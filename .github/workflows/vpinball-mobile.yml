name: vpinball-mobile
on:
  push:

env:
  VERSION_START_SHA: ea558e7417f6f06fe567d34f0e33792a141b8e64

defaults:
  run:
    shell: bash

jobs:
  version:
    name: Version
    runs-on: ubuntu-24.04
    outputs:
      revision: ${{ steps.version.outputs.revision }}
      version_short: ${{ steps.version.outputs.version_short }}
      version_full: ${{ steps.version.outputs.version_full }}
      version_ios: ${{ steps.version.outputs.version_ios }}
      sha7: ${{ steps.version.outputs.sha7 }}
      tag: ${{ steps.version.outputs.tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - id: version
        run: |
          REVISION=$(git rev-list ${{ env.VERSION_START_SHA }}..HEAD --count)
          VERSION_MAJOR=$(grep -Eo "VP_VERSION_MAJOR\s+[0-9]+" src/core/vpversion.h | grep -Eo "[0-9]+")
          VERSION_MINOR=$(grep -Eo "VP_VERSION_MINOR\s+[0-9]+" src/core/vpversion.h | grep -Eo "[0-9]+")
          VERSION_REV=$(grep -Eo "VP_VERSION_REV\s+[0-9]+" src/core/vpversion.h | grep -Eo "[0-9]+")
          VERSION_NUMERIC=$((VERSION_MAJOR * 10000 + VERSION_MINOR * 100 + VERSION_REV))
          VERSION_SHORT="${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_REV}"
          VERSION_FULL="${VERSION_SHORT}.${REVISION}"
          VERSION_IOS="${VERSION_NUMERIC}.0.${REVISION}"
          SHA7="${GITHUB_SHA::7}"
          TAG="${VERSION_SHORT}-${REVISION}-${SHA7}"
          echo "revision=${REVISION}" >> $GITHUB_OUTPUT
          echo "version_short=${VERSION_SHORT}" >> $GITHUB_OUTPUT
          echo "version_full=${VERSION_FULL}" >> $GITHUB_OUTPUT
          echo "version_ios=${VERSION_IOS}" >> $GITHUB_OUTPUT
          echo "sha7=${SHA7}" >> $GITHUB_OUTPUT
          echo "tag=${TAG}" >> $GITHUB_OUTPUT

  build-lib:
    name: Build VPinballX_BGFX_lib-${{ matrix.platform }}-${{ matrix.arch }}-${{ matrix.config }}
    runs-on: ${{ matrix.os }}
    needs: [ version ]
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-15
            platform: ios
            arch: arm64
            config: Release
          - os: macos-15
            platform: ios-simulator
            arch: arm64
            config: Release
          - os: ubuntu-24.04
            platform: android
            arch: arm64-v8a
            config: Release
    steps:
      - if: (matrix.os == 'macos-15')
        name: Add autoconf and automake (mac runner)
        run: |
          brew install bison autoconf automake libtool
          echo "$(brew --prefix bison)/bin" >> $GITHUB_PATH
      - if: (matrix.os == 'ubuntu-24.04')
        name: Add autoconf and automake (linux runner)
        run: |
          sudo apt install bison
      - uses: actions/checkout@v4
      - name: Calculate timestamp
        run: |
          echo "TIMESTAMP=$(date +%s)" >> $GITHUB_ENV
      - uses: actions/cache/restore@v4
        with:
          path: standalone/${{ matrix.platform }}-${{ matrix.arch }}/external/cache
          key: BGFX_lib-${{ matrix.platform }}-${{ matrix.arch }}-${{ matrix.config }}-external-${{ env.TIMESTAMP }}
          restore-keys: |
             BGFX_lib-${{ matrix.platform }}-${{ matrix.arch }}-${{ matrix.config }}-external-
      - name: Build Deps
        run: |
          cd standalone/${{ matrix.platform }}-${{ matrix.arch }}
          BUILD_TYPE=${{ matrix.config }} ./external.sh
      - uses: actions/cache/save@v4
        if: ${{ !cancelled() }}
        with:
          path: standalone/${{ matrix.platform }}-${{ matrix.arch }}/external/cache
          key: BGFX_lib-${{ matrix.platform }}-${{ matrix.arch }}-${{ matrix.config }}-external-${{ env.TIMESTAMP }}
      - name: Build
        run: |
          perl -i -pe"s/9999/${{ needs.version.outputs.revision }}/g" src/core/git_version.h
          perl -i -pe"s/unknown/${{ needs.version.outputs.sha7 }}/g" src/core/git_version.h
          if [[ "$(uname)" == "Darwin" ]]; then
             NUM_PROCS=$(sysctl -n hw.ncpu)
          else
             NUM_PROCS=$(nproc)
          fi
          cp standalone/cmake/CMakeLists_bgfx_lib.txt CMakeLists.txt
          if [[ "${{ matrix.platform }}" == "ios" || "${{ matrix.platform }}" == "ios-simulator" ]]; then
             cmake \
                -DPLATFORM=${{ matrix.platform }} \
                -DARCH=${{ matrix.arch }} \
                -DBUILD_FRAMEWORKS=ON \
                -DCMAKE_BUILD_TYPE=${{ matrix.config }} \
                -B build/${{ matrix.config }}
          elif [[ "${{ matrix.platform }}" == "android" ]]; then
             cmake \
                -DPLATFORM=${{ matrix.platform }} \
                -DARCH=${{ matrix.arch }} \
                -DCMAKE_BUILD_TYPE=${{ matrix.config }} \
                -B build/${{ matrix.config }}
          fi
          cmake --build build/${{ matrix.config }} -- -j${NUM_PROCS}
      - run: |
          mkdir tmp
          cp -a build/${{ matrix.config }}/*.h tmp
          cp -r build/${{ matrix.config }}/assets tmp
          cp -r build/${{ matrix.config }}/scripts tmp
          cp -r build/${{ matrix.config }}/tables tmp
          cp -r build/${{ matrix.config }}/docs tmp
          cp -r build/${{ matrix.config }}/flexdmd tmp
          if [[ "${{ matrix.platform }}" == "ios" || "${{ matrix.platform }}" == "ios-simulator" ]]; then
             cp -a build/${{ matrix.config }}/*.dylib tmp
             cp -r build/${{ matrix.config }}/*.framework tmp
             cp -r build/${{ matrix.config }}/*.dSYM tmp
          elif [[ "${{ matrix.platform }}" == "android" ]]; then
             cp -a build/${{ matrix.config }}/*.so tmp
             cp -a build/${{ matrix.config }}/*.jar tmp
          fi
      - uses: actions/upload-artifact@v4
        with:
          name: VPinballX_BGFX_lib-${{ needs.version.outputs.tag }}-${{ matrix.config }}-${{ matrix.platform }}-${{ matrix.arch }}
          path: tmp

  build-ios:
    name: Build VPinballX_${{ matrix.type }}-ios-${{ matrix.arch }}-${{ matrix.config }}
    runs-on: macos-15
    needs: [ version, build-lib ]
    strategy:
      fail-fast: false
      matrix:
        type: [ BGFX ]
        config: [ Release ]  
        arch: [ arm64 ]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: VPinballX_${{ matrix.type }}_lib-${{ needs.version.outputs.tag }}-${{ matrix.config }}-ios-${{ matrix.arch }}
          path: build/ios
      - name: Build
        run: |
          MARKETING_VERSION="${{ needs.version.outputs.version_ios }}"
          CURRENT_PROJECT_VERSION="${{ needs.version.outputs.version_full }}"
          cd standalone/ios
          perl -i -pe "s/MARKETING_VERSION = [0-9.]+/MARKETING_VERSION = $MARKETING_VERSION/g" "VPinball.xcodeproj/project.pbxproj"
          perl -i -pe "s/CURRENT_PROJECT_VERSION = [0-9.]+/CURRENT_PROJECT_VERSION = $CURRENT_PROJECT_VERSION/g" "VPinball.xcodeproj/project.pbxproj"
          fastlane build_unsigned_ipa
      - run: |
          mkdir tmp
          cp standalone/ios/fastlane/VPinballX.ipa tmp/VPinballX_${{ matrix.type }}-${{ needs.version.outputs.tag }}.ipa
      - uses: actions/upload-artifact@v4
        with:
          name: VPinballX_${{ matrix.type }}-${{ needs.version.outputs.tag }}-${{ matrix.config }}-ios-${{ matrix.arch }}
          path: tmp