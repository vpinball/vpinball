name: vpinball
on:
  push:

env:
  VERSION_START_SHA: ea558e7417f6f06fe567d34f0e33792a141b8e64

defaults:
  run:
    shell: bash

jobs:
  version:
    name: Version
    runs-on: ubuntu-latest
    outputs:
      revision: ${{ steps.version.outputs.revision }}
      version_short: ${{ steps.version.outputs.version_short }}
      version_full: ${{ steps.version.outputs.version_full }}
      sha7: ${{ steps.version.outputs.sha7 }}
      tag: ${{ steps.version.outputs.tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - id: version
        run: |
          REVISION=$(git rev-list ${{ env.VERSION_START_SHA }}..HEAD --count)
          VERSION_MAJOR=$(grep -Eo "VP_VERSION_MAJOR\s+[0-9]+" src/core/vpversion.h | grep -Eo "[0-9]+")
          VERSION_MINOR=$(grep -Eo "VP_VERSION_MINOR\s+[0-9]+" src/core/vpversion.h | grep -Eo "[0-9]+")
          VERSION_REV=$(grep -Eo "VP_VERSION_REV\s+[0-9]+" src/core/vpversion.h | grep -Eo "[0-9]+")
          VERSION_SHORT="${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_REV}"
          VERSION_FULL="${VERSION_SHORT}.${REVISION}"
          SHA7="${GITHUB_SHA::7}"
          TAG="${VERSION_SHORT}-${REVISION}-${SHA7}"
          echo "revision=${REVISION}" >> $GITHUB_OUTPUT
          echo "version_short=${VERSION_SHORT}" >> $GITHUB_OUTPUT
          echo "version_full=${VERSION_FULL}" >> $GITHUB_OUTPUT
          echo "sha7=${SHA7}" >> $GITHUB_OUTPUT
          echo "tag=${TAG}" >> $GITHUB_OUTPUT

  dxsdk:
    name: DirectX SDK
    runs-on: windows-latest
    steps:
      - id: cache
        uses: actions/cache@v4
        with:
          path: DXSDK
          key: cache-dxsdk
      - if: steps.cache.outputs.cache-hit != 'true'
        name: Create Cache
        run: |
          curl -sL https://download.microsoft.com/download/a/e/7/ae743f1f-632b-4809-87a9-aa1bb3458e31/DXSDK_Jun10.exe -o DXSDK_Jun10.exe
          7z x DXSDK_Jun10.exe DXSDK/Include -otmp
          7z x DXSDK_Jun10.exe DXSDK/Lib -otmp
          mv tmp/DXSDK DXSDK
          rm -fR DXSDK_Jun10.exe tmp
          ls -Ra DXSDK

  build:
    name: Build VPinballX_${{ matrix.type }}-${{ matrix.platform }}-${{ matrix.arch }}-${{ matrix.config }}
    runs-on: ${{ matrix.os }}
    needs: [ version, dxsdk ]
    strategy:
      fail-fast: false
      matrix:
        include:
          - { os: windows-2025, type: BGFX, platform: windows, arch: x64, config: Release }
          - { os: windows-2025, type: BGFX, platform: windows, arch: x64, config: Debug }
          - { os: windows-2025, type: BGFX, platform: windows, arch: x86, config: Release }
          - { os: windows-2025, type: BGFX, platform: windows, arch: x86, config: Debug }
          - { os: macos-latest, type: BGFX, platform: macos, arch: arm64, config: Release }
          - { os: macos-latest, type: BGFX, platform: macos, arch: x64, config: Release }
          - { os: ubuntu-latest, type: BGFX, platform: linux, arch: x64, config: Release }
          - { os: windows-2025, type: GL, platform: windows, arch: x64, config: Release }
          - { os: windows-2025, type: GL, platform: windows, arch: x86, config: Release }
          - { os: windows-2025, type: GL, platform: windows, arch: x64, config: Debug }
          - { os: windows-2025, type: GL, platform: windows, arch: x86, config: Debug }
          - { os: macos-latest, type: GL, platform: macos, arch: arm64, config: Release }
          - { os: macos-latest, type: GL, platform: macos, arch: x64, config: Release }
          - { os: ubuntu-latest, type: GL, platform: linux, arch: x64, config: Release }
    steps:
      - if: (matrix.platform == 'windows')
        uses: microsoft/setup-msbuild@v2
      - if: (matrix.platform == 'macos')
        run: |
          brew install bison autoconf automake libtool nasm
          echo "$(brew --prefix bison)/bin" >> $GITHUB_PATH
      - if: (matrix.platform == 'linux')
        run: |
          sudo apt-get update
          sudo apt install cmake nasm bison zlib1g-dev libdrm-dev libgbm-dev libglu1-mesa-dev libegl-dev libgl1-mesa-dev libwayland-dev libwayland-egl-backend-dev libudev-dev libx11-dev libxrandr-dev libasound2-dev libpipewire-0.3-dev
      - uses: actions/checkout@v4
      - if: (matrix.platform == 'windows')
        uses: actions/cache@v4
        with:
          path: DXSDK
          key: cache-dxsdk
      - name: Calculate external cache timestamp
        run: |
          echo "TIMESTAMP=$(date +%s)" >> $GITHUB_ENV
      - name: Restore external cache
        uses: actions/cache/restore@v4
        with:
          path: external
          key: ${{ matrix.type }}-${{ matrix.platform }}-${{ matrix.arch }}-${{ matrix.config }}-external-${{ env.TIMESTAMP }}
          restore-keys: |
             ${{ matrix.type }}-${{ matrix.platform }}-${{ matrix.arch }}-${{ matrix.config }}-external-
      - name: Build external cache
        run: |
          BUILD_TYPE=${{ matrix.config }} ./platforms/${{ matrix.platform }}-${{ matrix.arch }}/external.sh
      - if: ${{ !cancelled() }}
        name: Save external cache
        uses: actions/cache/save@v4
        with:
          path: external
          key: ${{ matrix.type }}-${{ matrix.platform }}-${{ matrix.arch }}-${{ matrix.config }}-external-${{ env.TIMESTAMP }}
      - if: (matrix.platform == 'windows' && matrix.type == 'BGFX')
        name: Save third-party artifacts
        uses: actions/upload-artifact@v4
        with:
          name: VPinballX-${{ needs.version.outputs.tag }}-dev-third-party-${{ matrix.platform }}-${{ matrix.arch }}-${{ matrix.config }}
          path: third-party
      - name: Set version
        run: |
          perl -i -pe"s/9999/${{ needs.version.outputs.revision }}/g" src/core/git_version.h
          perl -i -pe"s/unknown/${{ needs.version.outputs.sha7 }}/g" src/core/git_version.h
      - name: Build
        run: |
          TYPE=$(echo "${{ matrix.type }}" | tr '[:upper:]' '[:lower:]')
          cp make/CMakeLists_${TYPE}-${{ matrix.platform }}-${{ matrix.arch }}.txt CMakeLists.txt
          if [[ "${{ matrix.platform }}" == "windows" ]]; then
            export DXSDK_DIR="${GITHUB_WORKSPACE}/DXSDK"
            if [[ "${{ matrix.arch }}" == "x64" ]]; then
              cmake -G "Visual Studio 17 2022" -A x64 -B build
            else
              cmake -G "Visual Studio 17 2022" -A Win32 -B build
            fi
            cmake --build build --config ${{ matrix.config }}
          elif [[ "${{ matrix.platform }}" == "macos" ]]; then
            if [ "${{ github.repository }}" == "vpinball/vpinball" ]; then
              KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
              echo "${{ secrets.MACOS_CODESIGN_P12 }}" | base64 --decode > certificate.p12
              security create-keychain -p "${{ secrets.MACOS_CODESIGN_P12_PASSWORD }}" $KEYCHAIN_PATH
              security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
              security unlock-keychain -p "${{ secrets.MACOS_CODESIGN_P12_PASSWORD }}" $KEYCHAIN_PATH
              security import certificate.p12 -P "${{ secrets.MACOS_CODESIGN_P12_PASSWORD }}" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
              security list-keychain -d user -s $KEYCHAIN_PATH
              cmake \
                 -DOPT_CODESIGN=ON \
                 -DCODESIGN_DEVELOPER_ID="${{ secrets.MACOS_CODESIGN_DEVELOPER_ID }}" \
                 -DCODESIGN_APPLE_ID="${{ secrets.MACOS_CODESIGN_APPLE_ID }}" \
                 -DCODESIGN_PASSWORD="${{ secrets.MACOS_CODESIGN_PASSWORD }}" \
                 -DCODESIGN_TEAM_ID="${{ secrets.MACOS_CODESIGN_TEAM_ID }}" \
                 -DCMAKE_BUILD_TYPE=${{ matrix.config }} -B build/${{ matrix.config }}
            else
              cmake -DCMAKE_BUILD_TYPE=${{ matrix.config }} -B build/${{ matrix.config }}
            fi
            cmake --build build/${{ matrix.config }} -- -j$(sysctl -n hw.ncpu)
            cd build/${{ matrix.config }}
            cpack
          else
            cmake -DCMAKE_BUILD_TYPE=${{ matrix.config }} -B build/${{ matrix.config }}
            cmake --build build/${{ matrix.config }} -- -j$(nproc)
          fi
      - name: Stage artifacts
        run: |
          mkdir tmp
          if [[ "${{ matrix.platform }}" == "windows" ]]; then
            if [[ "${{ matrix.arch }}" == "x64" ]]; then
              cp build/${{ matrix.config }}/VPinballX_${{ matrix.type }}64.exe tmp
            else
              cp build/${{ matrix.config }}/VPinballX_${{ matrix.type }}.exe tmp
            fi
            cp build/${{ matrix.config }}/*.dll tmp
            if [[ "${{ matrix.type }}" == "GL" ]]; then
              cp -r build/${{ matrix.config }}/shaders-${{ needs.version.outputs.version_short }} tmp
            fi
            cp -r build/${{ matrix.config }}/assets tmp
            cp -r build/${{ matrix.config }}/plugins tmp
            cp -r build/${{ matrix.config }}/scripts tmp
            cp -r build/${{ matrix.config }}/tables tmp
            cp -r build/${{ matrix.config }}/docs tmp
          elif [[ "${{ matrix.platform }}" == "macos" ]]; then
            cp build/${{ matrix.config }}/*.dmg tmp
          elif [[ "${{ matrix.platform }}" == "linux" ]]; then
            mkdir stage
            cp build/${{ matrix.config }}/VPinballX_${{ matrix.type }} stage
            cp -a build/${{ matrix.config }}/*.{so,so.*} stage
            if [[ "${{ matrix.type }}" == "GL" ]]; then
              cp -r build/${{ matrix.config }}/shaders-${{ needs.version.outputs.version_short }} stage
            fi
            cp -r build/${{ matrix.config }}/flexdmd stage
            cp -r build/${{ matrix.config }}/assets stage
            cp -r build/${{ matrix.config }}/scripts stage
            cp -r build/${{ matrix.config }}/tables stage
            cp -r build/${{ matrix.config }}/docs stage
            tar czf tmp/VPinballX_${{ matrix.type }}-${{ needs.version.outputs.tag }}-${{ matrix.platform }}-${{ matrix.arch }}-${{ matrix.config }}.tar.gz -C stage .
          fi
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: VPinballX_${{ matrix.type }}-${{ needs.version.outputs.tag }}-${{ matrix.platform }}-${{ matrix.arch }}-${{ matrix.config }}
          path: tmp

  build-dx:
    name: Build VPinballX-${{ matrix.platform }}-${{ matrix.arch }}-${{ matrix.config }}
    runs-on: windows-2025
    needs: [ version, dxsdk ]
    strategy:
      fail-fast: false
      matrix:
        include:
          - { platform: windows, arch: x64, config: Release }
          - { platform: windows, arch: x64, config: Debug }
          - { platform: windows, arch: x86, config: Release }
          - { platform: windows, arch: x86, config: Debug }
    steps:
      - uses: microsoft/setup-msbuild@v2
      - uses: actions/checkout@v4
      - uses: actions/cache@v4
        with:
          path: DXSDK
          key: cache-dxsdk
      - name: Calculate external cache timestamp
        run: |
          echo "TIMESTAMP=$(date +%s)" >> $GITHUB_ENV
      - name: Restore external cache
        uses: actions/cache/restore@v4
        with:
          path: external
          key: dx-${{ matrix.platform }}-${{ matrix.arch }}-${{ matrix.config }}-external-${{ env.TIMESTAMP }}
          restore-keys: |
             dx-${{ matrix.platform }}-${{ matrix.arch }}-${{ matrix.config }}-external-
      - name: Build external cache
        run: |
          BUILD_TYPE=${{ matrix.config }} ./platforms/${{ matrix.platform }}-${{ matrix.arch }}/external.sh
      - if: ${{ !cancelled() }}
        name: Save external cache
        uses: actions/cache/save@v4
        with:
          path: external
          key: dx-${{ matrix.platform }}-${{ matrix.arch }}-${{ matrix.config }}-external-${{ env.TIMESTAMP }}
      - name: Setup build tools
        run: |
          # cmake can't find fxc.exe so copy one into the a directory in the path
          cp "/c/Program Files (x86)/Windows Kits/10/bin/10.0.26100.0/x86/fxc.exe" /mingw64/bin
      - name: Set version
        run: |
          perl -i -pe"s/9999/${{ needs.version.outputs.revision }}/g" src/core/git_version.h
          perl -i -pe"s/unknown/${{ needs.version.outputs.sha7 }}/g" src/core/git_version.h
      - name: Build
        run : |
          export DXSDK_DIR="${GITHUB_WORKSPACE}/DXSDK"
          cp make/CMakeLists_dx9-${{ matrix.platform }}-${{ matrix.arch }}.txt CMakeLists.txt
          if [[ "${{ matrix.arch }}" == "x64" ]]; then
            cmake -G "Visual Studio 17 2022" -A x64 -B build
          else
            cmake -G "Visual Studio 17 2022" -A Win32 -B build
          fi
          cmake --build build --config ${{ matrix.config }}
      - name: Stage artifacts
        run: |
          mkdir tmp
          if [[ "${{ matrix.arch }}" == "x64" ]]; then
            cp build/${{ matrix.config }}/VPinballX64.exe tmp
          else
            cp build/${{ matrix.config }}/VPinballX.exe tmp
          fi
          cp build/${{ matrix.config }}/*.dll tmp
          cp -r build/${{ matrix.config }}/assets tmp
          cp -r build/${{ matrix.config }}/scripts tmp
          cp -r build/${{ matrix.config }}/tables tmp
          cp -r build/${{ matrix.config }}/docs tmp
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: VPinballX-${{ needs.version.outputs.tag }}-${{ matrix.platform }}-${{ matrix.arch }}-${{ matrix.config }}
          path: tmp
