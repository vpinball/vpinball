name: vpinball-sbc
on:
  push:

env:
  VERSION_START_SHA: ea558e7417f6f06fe567d34f0e33792a141b8e64

defaults:
  run:
    shell: bash

jobs:
  version:
    name: Version
    runs-on: ubuntu-latest
    outputs:
      revision: ${{ steps.version.outputs.revision }}
      version_short: ${{ steps.version.outputs.version_short }}
      version_full: ${{ steps.version.outputs.version_full }}
      sha7: ${{ steps.version.outputs.sha7 }}
      tag: ${{ steps.version.outputs.tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - id: version
        run: |
          REVISION=$(git rev-list ${{ env.VERSION_START_SHA }}..HEAD --count)
          VERSION_MAJOR=$(grep -Eo "VP_VERSION_MAJOR\s+[0-9]+" src/core/vpversion.h | grep -Eo "[0-9]+")
          VERSION_MINOR=$(grep -Eo "VP_VERSION_MINOR\s+[0-9]+" src/core/vpversion.h | grep -Eo "[0-9]+")
          VERSION_REV=$(grep -Eo "VP_VERSION_REV\s+[0-9]+" src/core/vpversion.h | grep -Eo "[0-9]+")
          VERSION_SHORT="${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_REV}"
          VERSION_FULL="${VERSION_SHORT}.${REVISION}"
          SHA7="${GITHUB_SHA::7}"
          TAG="${VERSION_SHORT}-${REVISION}-${SHA7}"
          echo "revision=${REVISION}" >> $GITHUB_OUTPUT
          echo "version_short=${VERSION_SHORT}" >> $GITHUB_OUTPUT
          echo "version_full=${VERSION_FULL}" >> $GITHUB_OUTPUT
          echo "sha7=${SHA7}" >> $GITHUB_OUTPUT
          echo "tag=${TAG}" >> $GITHUB_OUTPUT

  build:
    name: Build VPinballX_${{ matrix.type }}-${{ matrix.board }}-${{ matrix.platform }}-${{ matrix.arch }}-${{ matrix.config }}
    runs-on: ${{ matrix.os }}
    needs: [ version ]
    strategy:
      fail-fast: false
      matrix:
        include:
          - { os: ubuntu-24.04-arm, type: BGFX, board: rpi, platform: linux, arch: aarch64, config: Release }
          - { os: ubuntu-24.04-arm, type: BGFX, board: rk3588, platform: linux, arch: aarch64, config: Release }
          - { os: ubuntu-24.04-arm, type: GL, board: rpi, platform: linux, arch: aarch64, config: Release }
          - { os: ubuntu-24.04-arm, type: GL, board: rk3588, platform: linux, arch: aarch64, config: Release }
    steps:
      - run: |
          sudo apt-get update
          sudo apt install cmake nasm bison zlib1g-dev libdrm-dev libgbm-dev libglu1-mesa-dev libegl-dev libgl1-mesa-dev libwayland-dev libwayland-egl-backend-dev libudev-dev libx11-dev libxrandr-dev libasound2-dev
      - uses: actions/checkout@v4
      - name: Calculate external cache timestamp
        run: |
          echo "TIMESTAMP=$(date +%s)" >> $GITHUB_ENV
      - name: Restore external cache
        uses: actions/cache/restore@v4
        with:
          path: external
          key: ${{ matrix.type }}-${{ matrix.board }}-${{ matrix.platform }}-${{ matrix.arch }}-${{ matrix.config }}-external-${{ env.TIMESTAMP }}
          restore-keys: |
             ${{ matrix.type }}-${{ matrix.board }}-${{ matrix.platform }}-${{ matrix.arch }}-${{ matrix.config }}-external-
      - name: Build external cache
        run: |
          BUILD_TYPE=${{ matrix.config }} ./platforms/${{ matrix.platform }}-${{ matrix.arch }}/external.sh
      - if: ${{ !cancelled() }}
        name: Save external cache
        uses: actions/cache/save@v4
        with:
          path: external
          key: ${{ matrix.type }}-${{ matrix.board }}-${{ matrix.platform }}-${{ matrix.arch }}-${{ matrix.config }}-external-${{ env.TIMESTAMP }}
      - name: Set version
        run: |
          perl -i -pe"s/9999/${{ needs.version.outputs.revision }}/g" src/core/git_version.h
          perl -i -pe"s/unknown/${{ needs.version.outputs.sha7 }}/g" src/core/git_version.h
      - name: Build
        run: |
          TYPE=$(echo "${{ matrix.type }}" | tr '[:upper:]' '[:lower:]')
          cp make/CMakeLists_${TYPE}-${{ matrix.platform }}-${{ matrix.arch }}.txt CMakeLists.txt
          OPTIONS=""
          if [[ "${{ matrix.board }}" == "rpi" ]]; then
            OPTIONS="-DBUILD_RPI=ON"
          elif [[ "${{ matrix.board }}" == "rk3588" ]]; then
            OPTIONS="-DBUILD_RK3588=ON"
          fi
          cmake -DCMAKE_BUILD_TYPE=${{ matrix.config }} ${OPTIONS} -B build/${{ matrix.config }}
          cmake --build build/${{ matrix.config }} -- -j$(nproc)
      - name: Stage artifacts
        run: |
          mkdir tmp
          mkdir stage
          cp build/${{ matrix.config }}/VPinballX_${{ matrix.type }} stage
          cp -a build/${{ matrix.config }}/*.{so,so.*} stage
          if [[ "${{ matrix.type }}" == "GL" ]]; then
            cp -r build/${{ matrix.config }}/shaders-${{ needs.version.outputs.version_short }} stage
          fi
          cp -r build/${{ matrix.config }}/flexdmd stage
          cp -r build/${{ matrix.config }}/assets stage
          cp -r build/${{ matrix.config }}/scripts stage
          cp -r build/${{ matrix.config }}/tables stage
          cp -r build/${{ matrix.config }}/docs stage
          tar czf tmp/VPinballX_${{ matrix.type }}-${{ needs.version.outputs.tag }}-${{ matrix.board }}-${{ matrix.platform }}-${{ matrix.arch }}-${{ matrix.config }}.tar.gz -C stage .
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: VPinballX_${{ matrix.type }}-${{ needs.version.outputs.tag }}-${{ matrix.board }}-${{ matrix.platform }}-${{ matrix.arch }}-${{ matrix.config }}
          path: tmp
