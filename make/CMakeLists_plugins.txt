# plugin CMake file to be included in main project CMakelists

if (APPLE)
	set(PLUGINS_DIR "$<TARGET_FILE_DIR:vpinball>/../Resources/plugins")
else()
	set(PLUGINS_DIR "$<TARGET_FILE_DIR:vpinball>/plugins")
endif()


# --- HelloWorld plugin ---
add_library(HelloWorldPlugin MODULE plugins/helloworld/helloworld.cpp)
if (WIN32)
set_target_properties(HelloWorldPlugin PROPERTIES
   MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:DEBUG>:Debug>"
)
target_compile_options(HelloWorldPlugin PUBLIC
   $<$<CONFIG:RELEASE>:$<$<COMPILE_LANGUAGE:CXX>:${OPT_COMMON}>>
   $<$<CONFIG:RELEASE>:$<$<COMPILE_LANGUAGE:C>:${OPT_COMMON}>>
)
target_link_options(HelloWorldPlugin PUBLIC
   $<$<CONFIG:RELEASE>:/INCREMENTAL:NO>
   $<$<CONFIG:RELEASE>:/OPT:REF>
   $<$<CONFIG:RELEASE>:/OPT:ICF>
   $<$<CONFIG:RELEASE>:/LTCG>
)
endif()
target_include_directories(HelloWorldPlugin PUBLIC ${CMAKE_CURRENT_SOURCE_DIR} src/plugins)
add_custom_command(TARGET HelloWorldPlugin POST_BUILD
   COMMAND "${CMAKE_COMMAND}" -E copy "${CMAKE_SOURCE_DIR}/plugins/helloworld/plugin.cfg" "${PLUGINS_DIR}/helloworld/plugin.cfg"
   COMMAND "${CMAKE_COMMAND}" -E copy "$<TARGET_FILE:HelloWorldPlugin>" "${PLUGINS_DIR}/helloworld/plugin-helloworld.${PluginArch}${CMAKE_SHARED_LIBRARY_SUFFIX}"
   COMMAND "${CMAKE_COMMAND}" -E rm "$<TARGET_FILE:HelloWorldPlugin>"
)


# --- HelloScript plugin ---
add_library(HelloScriptPlugin MODULE plugins/helloscript/helloscript.cpp)
if (WIN32)
set_target_properties(HelloScriptPlugin PROPERTIES
   MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:DEBUG>:Debug>"
)
target_compile_options(HelloScriptPlugin PUBLIC
   $<$<CONFIG:RELEASE>:$<$<COMPILE_LANGUAGE:CXX>:${OPT_COMMON}>>
   $<$<CONFIG:RELEASE>:$<$<COMPILE_LANGUAGE:C>:${OPT_COMMON}>>
)
target_link_options(HelloScriptPlugin PUBLIC
   $<$<CONFIG:RELEASE>:/INCREMENTAL:NO>
   $<$<CONFIG:RELEASE>:/OPT:REF>
   $<$<CONFIG:RELEASE>:/OPT:ICF>
   $<$<CONFIG:RELEASE>:/LTCG>
)
endif()
target_include_directories(HelloScriptPlugin PUBLIC ${CMAKE_CURRENT_SOURCE_DIR} src/plugins)
add_custom_command(TARGET HelloScriptPlugin POST_BUILD
   COMMAND "${CMAKE_COMMAND}" -E copy "${CMAKE_SOURCE_DIR}/plugins/helloscript/plugin.cfg" "${PLUGINS_DIR}/helloscript/plugin.cfg"
   COMMAND "${CMAKE_COMMAND}" -E copy "$<TARGET_FILE:HelloScriptPlugin>" "${PLUGINS_DIR}/helloscript/plugin-helloscript.${PluginArch}${CMAKE_SHARED_LIBRARY_SUFFIX}"
   COMMAND "${CMAKE_COMMAND}" -E rm "$<TARGET_FILE:HelloScriptPlugin>"
)


# --- FlexDMD plugin ---
# This plugin needs someone to setup its build script for other platforms
if (WIN32)
add_library(FlexDMDPlugin MODULE
    plugins/flexdmd/common.cpp
	plugins/flexdmd/FlexDMD.cpp
	plugins/flexdmd/FlexDmdPlugin.cpp
    plugins/flexdmd/SurfaceGraphics.cpp
    plugins/flexdmd/UltraDMD.cpp
	plugins/flexdmd/actors/Actor.cpp
	plugins/flexdmd/actors/AnimatedActor.cpp
	plugins/flexdmd/actors/FadeOverlay.cpp
	plugins/flexdmd/actors/Frame.cpp
	plugins/flexdmd/actors/GIFImage.cpp
	plugins/flexdmd/actors/Label.cpp
	plugins/flexdmd/actors/Group.cpp
    plugins/flexdmd/actors/Image.cpp
    plugins/flexdmd/actors/ImageSequence.cpp
    plugins/flexdmd/actors/ScoreBoard.cpp
    plugins/flexdmd/actors/Video.cpp
    plugins/flexdmd/bmfonts/BitmapFont.cpp
	plugins/flexdmd/ressources/AssetManager.cpp
	plugins/flexdmd/ressources/AssetSrc.cpp
	plugins/flexdmd/ressources/AdditiveFilter.cpp
	plugins/flexdmd/ressources/Bitmap.cpp
	plugins/flexdmd/ressources/BitmapFilter.cpp
	plugins/flexdmd/ressources/DotFilter.cpp
	plugins/flexdmd/ressources/Font.cpp
	plugins/flexdmd/ressources/PadFilter.cpp
	plugins/flexdmd/ressources/RegionFilter.cpp
	plugins/flexdmd/ressources/VPXFile.cpp
    plugins/flexdmd/scenes/BackgroundScene.cpp
    plugins/flexdmd/scenes/Scene.cpp
    plugins/flexdmd/scenes/ScrollingCreditsScene.cpp
    plugins/flexdmd/scenes/Sequence.cpp
    plugins/flexdmd/scenes/SingleLineScene.cpp
    plugins/flexdmd/scenes/TwoLineScene.cpp
	plugins/flexdmd/third-party/include/pole/pole.cpp
	
	plugins/flexdmd/common.h
	plugins/flexdmd/FlexDMD.h
	plugins/flexdmd/SurfaceGraphics.h
	plugins/flexdmd/UltraDMD.h
	plugins/flexdmd/actors/Actor.h
	plugins/flexdmd/actors/Actions.h
	plugins/flexdmd/actors/AnimatedActor.h
	plugins/flexdmd/actors/FadeOverlay.h
	plugins/flexdmd/actors/Frame.h
	plugins/flexdmd/actors/GIFImage.h
	plugins/flexdmd/actors/Group.h
	plugins/flexdmd/actors/Image.h
	plugins/flexdmd/actors/ImageSequence.h
	plugins/flexdmd/actors/Label.h
	plugins/flexdmd/actors/Layout.h
	plugins/flexdmd/actors/ScoreBoard.h
	plugins/flexdmd/actors/Video.h
	plugins/flexdmd/bmfonts/BitmapFont.h
	plugins/flexdmd/bmfonts/Character.h
	plugins/flexdmd/bmfonts/Kerning.h
	plugins/flexdmd/bmfonts/Page.h
	plugins/flexdmd/ressources/AssetManager.h
	plugins/flexdmd/ressources/AssetSrc.h
	plugins/flexdmd/ressources/Bitmap.h
	plugins/flexdmd/ressources/AdditiveFilter.h
	plugins/flexdmd/ressources/BitmapFilter.h
	plugins/flexdmd/ressources/DotFilter.h
	plugins/flexdmd/ressources/Font.h
	plugins/flexdmd/ressources/PadFilter.h
	plugins/flexdmd/ressources/RegionFilter.h
	plugins/flexdmd/ressources/RessourceDef.h
	plugins/flexdmd/ressources/VPXFile.h
	plugins/flexdmd/scenes/AnimationType.h
	plugins/flexdmd/scenes/BackgroundScene.h
	plugins/flexdmd/scenes/Scene.h
	plugins/flexdmd/scenes/ScrollingCreditsScene.h
	plugins/flexdmd/scenes/Sequence.h
	plugins/flexdmd/scenes/SingleLineScene.h
	plugins/flexdmd/scenes/TwoLineScene.h
	plugins/flexdmd/third-party/include/tweeny-3.2.0.h
	plugins/flexdmd/third-party/include/pole/pole.h
	plugins/flexdmd/third-party/include/sdl3/SDL_begin_code.h
	plugins/flexdmd/third-party/include/sdl3/SDL_blendmode.h
	plugins/flexdmd/third-party/include/sdl3/SDL_endian.h
	plugins/flexdmd/third-party/include/sdl3/SDL_error.h
	plugins/flexdmd/third-party/include/sdl3/SDL_pixels.h
	plugins/flexdmd/third-party/include/sdl3/SDL_platform_defines.h
	plugins/flexdmd/third-party/include/sdl3/SDL_properties.h
	plugins/flexdmd/third-party/include/sdl3/SDL_rect.h
	plugins/flexdmd/third-party/include/sdl3/SDL_stdinc.h
	plugins/flexdmd/third-party/include/sdl3/SDL_surface.h
	plugins/flexdmd/third-party/include/sdl3_image/SDL_image.h
)
if (WIN32)
	if (PluginArch STREQUAL "x86_64")
		target_link_directories(FlexDMDPlugin PUBLIC plugins/flexdmd/third-party/build-libs/windows-x64)
	else()
		target_link_directories(FlexDMDPlugin PUBLIC plugins/flexdmd/third-party/build-libs/windows-x86)
	endif()
	set_target_properties(FlexDMDPlugin PROPERTIES
	MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:DEBUG>:Debug>"
	)
	target_compile_options(FlexDMDPlugin PUBLIC
		$<$<CONFIG:RELEASE>:$<$<COMPILE_LANGUAGE:CXX>:${OPT_COMMON}>>
		$<$<CONFIG:RELEASE>:$<$<COMPILE_LANGUAGE:C>:${OPT_COMMON}>>
	)
	target_link_options(FlexDMDPlugin PUBLIC
		$<$<CONFIG:RELEASE>:/INCREMENTAL:NO>
		$<$<CONFIG:RELEASE>:/OPT:REF>
		$<$<CONFIG:RELEASE>:/OPT:ICF>
		$<$<CONFIG:RELEASE>:/LTCG>
	)
endif()
target_link_libraries(FlexDMDPlugin
	SDL3.lib
	SDL3_image.lib)
target_include_directories(FlexDMDPlugin PUBLIC
   ${CMAKE_CURRENT_SOURCE_DIR}
   src/plugins
   plugins/flexdmd
   plugins/flexdmd/third-party/include
)
add_custom_command(TARGET FlexDMDPlugin POST_BUILD
   COMMAND "${CMAKE_COMMAND}" -E copy "${CMAKE_SOURCE_DIR}/plugins/flexdmd/plugin.cfg" "${PLUGINS_DIR}/flexdmd/plugin.cfg"
   COMMAND "${CMAKE_COMMAND}" -E copy "$<TARGET_FILE:FlexDMDPlugin>" "${PLUGINS_DIR}/flexdmd/plugin-flexdmd.${PluginArch}${CMAKE_SHARED_LIBRARY_SUFFIX}"
   COMMAND "${CMAKE_COMMAND}" -E rm "$<TARGET_FILE:FlexDMDPlugin>"
   COMMAND "${CMAKE_COMMAND}" -E copy_directory ${CMAKE_SOURCE_DIR}/plugins/flexdmd/assets "${PLUGINS_DIR}/flexdmd/assets"
)
if (WIN32)
	if (PluginArch STREQUAL "x86_64")
		add_custom_command(TARGET FlexDMDPlugin POST_BUILD
			COMMAND "${CMAKE_COMMAND}" -E copy "${CMAKE_SOURCE_DIR}/plugins/flexdmd/third-party/runtime-libs/windows-x64/SDL364.dll" "${PLUGINS_DIR}/flexdmd/SDL364.dll"
			COMMAND "${CMAKE_COMMAND}" -E copy "${CMAKE_SOURCE_DIR}/plugins/flexdmd/third-party/runtime-libs/windows-x64/SDL3_image64.dll" "${PLUGINS_DIR}/flexdmd/SDL3_image64.dll"
		)
	elseif (PluginArch STREQUAL "x86_32")
		add_custom_command(TARGET FlexDMDPlugin POST_BUILD
			COMMAND "${CMAKE_COMMAND}" -E copy "${CMAKE_SOURCE_DIR}/plugins/flexdmd/third-party/runtime-libs/windows-x86/SDL3.dll" "${PLUGINS_DIR}/flexdmd/SDL3.dll"
			COMMAND "${CMAKE_COMMAND}" -E copy "${CMAKE_SOURCE_DIR}/plugins/flexdmd/third-party/runtime-libs/windows-x86/SDL3_image.dll" "${PLUGINS_DIR}/flexdmd/SDL3_image.dll"
		)
	endif()
endif()
endif()


# --- Serum colorization plugin ---
add_library(SerumPlugin MODULE
	plugins/serum/serum.cpp
	plugins/serum/third-party/include/libserum/serum-decode.cpp
	plugins/serum/third-party/include/miniz/miniz.c
)
set_source_files_properties(
   plugins/serum/third-party/include/miniz/miniz.c PROPERTIES LANGUAGE C
)
if (WIN32)
set_target_properties(SerumPlugin PROPERTIES
   MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:DEBUG>:Debug>"
)
target_compile_options(SerumPlugin PUBLIC
   $<$<CONFIG:RELEASE>:$<$<COMPILE_LANGUAGE:CXX>:${OPT_COMMON}>>
   $<$<CONFIG:RELEASE>:$<$<COMPILE_LANGUAGE:C>:${OPT_COMMON}>>
)
target_link_options(SerumPlugin PUBLIC
   $<$<CONFIG:RELEASE>:/INCREMENTAL:NO>
   $<$<CONFIG:RELEASE>:/OPT:REF>
   $<$<CONFIG:RELEASE>:/OPT:ICF>
   $<$<CONFIG:RELEASE>:/LTCG>
)
endif()
target_include_directories(SerumPlugin PUBLIC
   ${CMAKE_CURRENT_SOURCE_DIR}
   src/plugins
   plugins/serum/third-party/include
)
add_custom_command(TARGET SerumPlugin POST_BUILD
   COMMAND "${CMAKE_COMMAND}" -E copy "${CMAKE_SOURCE_DIR}/plugins/serum/plugin.cfg" "${PLUGINS_DIR}/serum/plugin.cfg"
   COMMAND "${CMAKE_COMMAND}" -E copy "$<TARGET_FILE:SerumPlugin>" "${PLUGINS_DIR}/serum/plugin-serum.${PluginArch}${CMAKE_SHARED_LIBRARY_SUFFIX}"
   COMMAND "${CMAKE_COMMAND}" -E rm "$<TARGET_FILE:SerumPlugin>"
)


# Pinup DMD plugin is only available on Windows as is talks to the closed-source Pinup Player
if (WIN32)

# --- Pinup DMD trigger plugin ---
add_library(PinupEventsPlugin MODULE plugins/pinup-events/pinup-events.cpp)
set_target_properties(PinupEventsPlugin PROPERTIES
   MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:DEBUG>:Debug>"
)
target_compile_options(PinupEventsPlugin PUBLIC
   $<$<CONFIG:RELEASE>:$<$<COMPILE_LANGUAGE:CXX>:${OPT_COMMON}>>
   $<$<CONFIG:RELEASE>:$<$<COMPILE_LANGUAGE:C>:${OPT_COMMON}>>
)
target_link_options(PinupEventsPlugin PUBLIC
   $<$<CONFIG:RELEASE>:/INCREMENTAL:NO>
   $<$<CONFIG:RELEASE>:/OPT:REF>
   $<$<CONFIG:RELEASE>:/OPT:ICF>
   $<$<CONFIG:RELEASE>:/LTCG>
)
target_include_directories(PinupEventsPlugin PUBLIC ${CMAKE_CURRENT_SOURCE_DIR} src/plugins)
add_custom_command(TARGET PinupEventsPlugin POST_BUILD
   COMMAND "${CMAKE_COMMAND}" -E copy "${CMAKE_SOURCE_DIR}/plugins/pinup-events/plugin.cfg" "$<TARGET_FILE_DIR:vpinball>/plugins/pinup-events/plugin.cfg"
   COMMAND "${CMAKE_COMMAND}" -E copy "$<TARGET_FILE:PinupEventsPlugin>" "$<TARGET_FILE_DIR:vpinball>/plugins/pinup-events/plugin-pinup-events.${PluginArch}${CMAKE_SHARED_LIBRARY_SUFFIX}"
   COMMAND "${CMAKE_COMMAND}" -E rm "$<TARGET_FILE:PinupEventsPlugin>"
)
endif()
