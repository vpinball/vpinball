cmake_minimum_required(VERSION 3.25)

set(PLATFORM "ios" CACHE STRING "Platform")
set(ARCH "arm64" CACHE STRING "Arch")

message(STATUS "PLATFORM: ${PLATFORM}")
message(STATUS "ARCH: ${ARCH}")

if(PLATFORM STREQUAL "ios" OR PLATFORM STREQUAL "ios-simulator")
   set(CMAKE_SYSTEM_NAME iOS)
   if (PLATFORM STREQUAL "ios-simulator")
      set(CMAKE_OSX_SYSROOT iphonesimulator)
   endif()
   set(CMAKE_OSX_DEPLOYMENT_TARGET 18.0)
elseif(PLATFORM STREQUAL "android")
   set(CMAKE_SYSTEM_NAME Android)
   set(CMAKE_SYSTEM_VERSION 30)
   set(CMAKE_ANDROID_ARCH_ABI arm64-v8a)
endif()

file(READ src/core/vpversion.h version)
string(REGEX MATCH "VP_VERSION_MAJOR[ ]+([0-9]+)" _tmp ${version})
set(VERSION_MAJOR "${CMAKE_MATCH_1}")
string(REGEX MATCH "VP_VERSION_MINOR[ ]+([0-9]+)" _tmp ${version})
set(VERSION_MINOR "${CMAKE_MATCH_1}")
string(REGEX MATCH "VP_VERSION_REV[ ]+([0-9]+)" _tmp ${version})
set(VERSION_REV "${CMAKE_MATCH_1}")

project(vpinball VERSION "${VERSION_MAJOR}.${VERSION_MINOR}.${VERSION_REV}")

include("${CMAKE_SOURCE_DIR}/make/CMakeLists_common_standalone.txt")

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_C_STANDARD 99)

set(CMAKE_CXX_VISIBILITY_PRESET hidden)
set(CMAKE_C_VISIBILITY_PRESET hidden)

find_package(BISON 3.8.2 REQUIRED)
bison_target(vbsparser ${CMAKE_SOURCE_DIR}/standalone/inc/wine/dlls/vbscript/parser.y ${CMAKE_SOURCE_DIR}/standalone/inc/wine/dlls/vbscript/parser.tab.c 
	     DEFINES_FILE ${CMAKE_SOURCE_DIR}/standalone/inc/wine/dlls/vbscript/parser.tab.h)

set(VPINBALL_SOURCES
   ${VPX_STANDALONE_SOURCES}

   standalone/inc/webserver/WebServer.cpp
   standalone/inc/webserver/WebServer.h

   standalone/VPinballLib.h
   standalone/VPinballLib.cpp
   standalone/VPinball.h
   standalone/VPinball.cpp
   standalone/VPXProgress.h
   standalone/VPXProgress.cpp

   third-party/include/mongoose/mongoose.c
   third-party/include/mongoose/mongoose.h
   third-party/include/imgui/imgui_impl_sdl3.cpp
   third-party/include/imgui/imgui_impl_sdl3.h
   third-party/include/bgfx-imgui/imgui_impl_bgfx.cpp
   third-party/include/bgfx-imgui/imgui_impl_bgfx.h
   third-party/include/bgfx-imgui/fs_ocornut_imgui.bin.h
   third-party/include/bgfx-imgui/vs_ocornut_imgui.bin.h   
)

if(PLATFORM STREQUAL "android")
   list(APPEND VPINBALL_SOURCES 
      standalone/VPinballJNI.cpp
   )
endif()

add_compile_options(-fPIC)

add_library(vpinball SHARED ${VPINBALL_SOURCES})

target_include_directories(vpinball PUBLIC
   ${CMAKE_SOURCE_DIR}/third-party/include
   ${CMAKE_SOURCE_DIR}
   standalone/inc/wine/include
   standalone/inc/wine/dlls/atl
   standalone/inc/wine/dlls/vbscript
   standalone/inc/wine/dlls/oleaut32
   standalone/inc/wine/dlls/kernelbase
   media
   pin
   src
   src/plugins
)

target_precompile_headers(vpinball PUBLIC
)

target_compile_definitions(vpinball PRIVATE
    __STANDALONE__
    __LIBVPINBALL__

    ENABLE_BGFX
    ENABLE_SDL_VIDEO
    ENABLE_SDL_INPUT

    __WINESRC__
    WINE_UNICODE_NATIVE

    WINE_NO_TRACE_MSGS
    WINE_NO_DEBUG_MSGS

    $<$<CONFIG:Debug>:BX_CONFIG_DEBUG=1>
    $<$<CONFIG:Release>:BX_CONFIG_DEBUG=0>

    "__forceinline=__attribute__((always_inline)) inline"
)

target_compile_options(vpinball PUBLIC
   -fvisibility=hidden
   -Wno-inconsistent-missing-override
   -Wno-missing-exception-spec
   $<$<OR:$<CXX_COMPILER_ID:Clang>,$<CXX_COMPILER_ID:AppleClang>>:
      -fdenormal-fp-math=preserve-sign
      -freciprocal-math
      -fassociative-math
      -fapprox-func
      -fno-math-errno
      -fno-trapping-math
      -ffp-contract=off
      -Wno-shorten-64-to-32>
   $<$<CXX_COMPILER_ID:GNU>:
      -ffast-math
      -ffp-contract=off>
)

target_link_directories(vpinball PUBLIC
   "${CMAKE_SOURCE_DIR}/third-party/build-libs/${PLATFORM}-${ARCH}"
   "${CMAKE_SOURCE_DIR}/third-party/runtime-libs/${PLATFORM}-${ARCH}"
)

target_link_libraries(vpinball PUBLIC
   bgfx
   bimg
   bimg_decode
   bx
   SDL3
   SDL3_image
   SDL3_ttf
   freeimage
   pinmame
   altsound
   zedmd
   serum
   dmdutil
   pupdmd
   sockpp
   dof
   avcodec
   avdevice
   avfilter
   avformat
   avutil
   swresample
   swscale
   zip
   AlphaDMDPlugin
   B2SPlugin
   B2SLegacyPlugin
   DMDUtilPlugin
   DOFPlugin
   FlexDMDPlugin
   HelloScriptPlugin
   HelloWorldPlugin
   PinMAMEPlugin
   PUPPlugin
   RemoteControlPlugin
   ScoreViewPlugin
   SerumPlugin
   WMPPlugin
)

if(PLATFORM STREQUAL "ios" OR PLATFORM STREQUAL "ios-simulator")
   target_link_libraries(vpinball PUBLIC
      bass
      freetype
      harfbuzz
      bz2
      iconv
      "-framework OpenGLES"
      "-framework AVFAudio"
      "-framework Metal"
      "-framework Foundation"
      "-framework QuartzCore"
      "-framework CoreMotion"
      "-framework CoreGraphics"
      "-framework CoreMedia"
      "-framework CoreVideo"
      "-framework VideoToolbox"
      "-framework GameController"
      "-framework AudioToolbox"
      "-framework CoreAudio"
      "-framework CoreHaptics"
      "-framework CoreServices"
      "-framework CoreText"
      "-framework AVFoundation"
      "-framework ImageIO"
      "-framework UIKit"
      "-framework CoreBluetooth"
   )
elseif(PLATFORM STREQUAL "android")
   target_link_libraries(vpinball PUBLIC
      EGL
      GLESv3
      android
      log
   )
endif()

add_custom_command(TARGET vpinball POST_BUILD
   COMMAND "${CMAKE_COMMAND}" -E copy "${CMAKE_SOURCE_DIR}/standalone/VPinball.h" "$<TARGET_FILE_DIR:vpinball>"
   COMMAND "${CMAKE_COMMAND}" -E copy "${CMAKE_SOURCE_DIR}/standalone/VPinballLib.h" "$<TARGET_FILE_DIR:vpinball>"
   COMMAND "${CMAKE_COMMAND}" -E copy_directory "${CMAKE_SOURCE_DIR}/src/assets" "$<TARGET_FILE_DIR:vpinball>/assets"
   COMMAND "${CMAKE_COMMAND}" -E copy_directory "${CMAKE_SOURCE_DIR}/scripts" "$<TARGET_FILE_DIR:vpinball>/scripts"
   COMMAND "${CMAKE_COMMAND}" -E copy_directory "${CMAKE_SOURCE_DIR}/tables" "$<TARGET_FILE_DIR:vpinball>/tables"
   COMMAND "${CMAKE_COMMAND}" -E copy_directory "${CMAKE_SOURCE_DIR}/docs" "$<TARGET_FILE_DIR:vpinball>/docs"
)

if(PLATFORM STREQUAL "android")
   add_custom_command(TARGET vpinball POST_BUILD
      COMMAND cp -a "${CMAKE_SOURCE_DIR}/third-party/runtime-libs/${PLATFORM}-${ARCH}/*.so" "$<TARGET_FILE_DIR:vpinball>"
   )
endif()

set(PluginPlatform "${PLATFORM}")
set(PluginArch "${ARCH}")
include("${CMAKE_SOURCE_DIR}/make/CMakeLists_plugins.txt")
