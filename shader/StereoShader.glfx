////GLOBAL
#version 330

////DEFINES
#include "Helpers.fxh"

// Anaglyph settings:
// - saturation to preprocess color from the anaglyph image: 0 = Black & White, 1 = normal color, >1 sursaturation (to compensate some glasses color losses)
// - contrast is a per eye contrast & brightness adjustment to compensate and balance glasses filter
uniform float4 Anaglyph_Saturation_Brightness_EyeContrast;

// Mode combines the glasses color, the eye order and the composition filter as a single int
uniform float4 ms_zpd_ya_td;
#define STEREO_MODE ms_zpd_ya_td.w
#define ANAGLYPH_RED_CYAN               5.0
#define ANAGLYPH_RED_CYAN_DUBOIS        6.0
#define ANAGLYPH_RED_CYAN_DEGHOST       7.0
#define ANAGLYPH_CYAN_RED               8.0
#define ANAGLYPH_CYAN_RED_DUBOIS        9.0
#define ANAGLYPH_CYAN_RED_DEGHOST      10.0
#define ANAGLYPH_GREEN_MAGENTA         11.0
#define ANAGLYPH_GREEN_MAGENTA_DUBOIS  12.0
#define ANAGLYPH_GREEN_MAGENTA_DEGHOST 13.0
#define ANAGLYPH_MAGENTA_GREEN         14.0
#define ANAGLYPH_MAGENTA_GREEN_DUBOIS  15.0
#define ANAGLYPH_MAGENTA_GREEN_DEGHOST 16.0
#define ANAGLYPH_BLUE_AMBER            17.0
#define ANAGLYPH_BLUE_AMBER_DUBOIS     18.0
#define ANAGLYPH_BLUE_AMBER_DEGHOST    19.0
#define ANAGLYPH_AMBER_BLUE            20.0
#define ANAGLYPH_AMBER_BLUE_DUBOIS     21.0
#define ANAGLYPH_AMBER_BLUE_DEGHOST    22.0

// Anaglyph stereo image composition
//
// This code was written using the following references:
// - Dubois anaglyph filters, see https://www.site.uottawa.ca/~edubois/anaglyph/
// - John Einselen contrast and deghosting, see http://iaian7.com/quartz/AnaglyphCompositing & vectorform.com
//   Note these are based on an Apple Quartz filter which are applied in linear color space (not 100% sure, but checked with online resources)
float3 anaglyph(const float3 L, const float3 R)
{
	// Convert to linear RGB, perform sursaturation/desaturation and adjust brightness
	// Theorically we should double brightness since the image's color space is splitted in 2 and each eye should only receive half 
	// of the brightness it would receive without anaglyph. In practice, this highly depends on the user glasses since the filters
	// are not perfectly fitted to the rendering (an eye can receive light targeted at the other eye) and glasses are not fully
	// transparent causing some light losses.
	const float3 Llin = InvGamma(L);
	const float3 Rlin = InvGamma(R);
	float3 LMAlin = saturate(Anaglyph_Saturation_Brightness_EyeContrast.y * lerp(float3(Luminance(Llin)), Llin, Anaglyph_Saturation_Brightness_EyeContrast.x));
	float3 RMAlin = saturate(Anaglyph_Saturation_Brightness_EyeContrast.y * lerp(float3(Luminance(Rlin)), Rlin, Anaglyph_Saturation_Brightness_EyeContrast.x));

	// No filter
	BRANCH if (STEREO_MODE == ANAGLYPH_RED_CYAN || STEREO_MODE == ANAGLYPH_CYAN_RED) // Anaglyph 3D Red/Cyan
	{
		return FBGamma(float3(0.5 + Anaglyph_Saturation_Brightness_EyeContrast.z * (LMAlin.r - 0.5),
		                      0.5 + Anaglyph_Saturation_Brightness_EyeContrast.w * (RMAlin.g - 0.5),
							  0.5 + Anaglyph_Saturation_Brightness_EyeContrast.w * (RMAlin.b - 0.5)));
	}
	BRANCH if (STEREO_MODE == ANAGLYPH_GREEN_MAGENTA || STEREO_MODE == ANAGLYPH_MAGENTA_GREEN) // Anaglyph 3D Green/Magenta
	{
		return FBGamma(float3(0.5 + Anaglyph_Saturation_Brightness_EyeContrast.w * (RMAlin.r - 0.5),
		                      0.5 + Anaglyph_Saturation_Brightness_EyeContrast.z * (LMAlin.g - 0.5),
							  0.5 + Anaglyph_Saturation_Brightness_EyeContrast.w * (RMAlin.b - 0.5)));
	}
	BRANCH if (STEREO_MODE == ANAGLYPH_BLUE_AMBER || STEREO_MODE == ANAGLYPH_AMBER_BLUE) // Anaglyph 3D Green/Magenta
	{
		return FBGamma(float3(0.5 + Anaglyph_Saturation_Brightness_EyeContrast.w * (RMAlin.r - 0.5),
		                      0.5 + Anaglyph_Saturation_Brightness_EyeContrast.w * (RMAlin.g - 0.5),
							  0.5 + Anaglyph_Saturation_Brightness_EyeContrast.z * (LMAlin.b - 0.5)));
	}
	
	// Dubois cross channel filters
	BRANCH if (STEREO_MODE == ANAGLYPH_RED_CYAN_DUBOIS || STEREO_MODE == ANAGLYPH_CYAN_RED_DUBOIS) // Anaglyph 3D Dubois Red/Cyan
	{
		// Dubois matrices are given in sRGB space
		const float3 LMA = FBGamma(0.5 + Anaglyph_Saturation_Brightness_EyeContrast.z * (LMAlin - 0.5));
		const float3 RMA = FBGamma(0.5 + Anaglyph_Saturation_Brightness_EyeContrast.w * (RMAlin - 0.5));
		const float r = dot(LMA, float3( 0.437,  0.449,  0.164)) + dot(RMA, float3(-0.011, -0.032, -0.007));
		const float g = dot(LMA, float3(-0.062, -0.062, -0.024)) + dot(RMA, float3( 0.377,  0.761,  0.009));
		const float b = dot(LMA, float3(-0.048, -0.050, -0.017)) + dot(RMA, float3(-0.026, -0.093,  1.234));
		return saturate(float3(r, g, b));
	}
	BRANCH if (STEREO_MODE == ANAGLYPH_GREEN_MAGENTA_DUBOIS || STEREO_MODE == ANAGLYPH_MAGENTA_GREEN_DUBOIS) // Anaglyph 3D Dubois Green/Magenta
	{
		// Dubois matrices are given in sRGB space
		const float3 LMA = FBGamma(0.5 + Anaglyph_Saturation_Brightness_EyeContrast.z * (LMAlin - 0.5));
		const float3 RMA = FBGamma(0.5 + Anaglyph_Saturation_Brightness_EyeContrast.w * (RMAlin - 0.5));
		const float r = dot(LMA, float3(-0.062, -0.158, -0.039)) + dot(RMA, float3( 0.529,  0.705, 0.024));
		const float g = dot(LMA, float3( 0.284,  0.668,  0.143)) + dot(RMA, float3(-0.016, -0.015, 0.065));
		const float b = dot(LMA, float3(-0.015, -0.027,  0.021)) + dot(RMA, float3( 0.009,  0.075, 0.937));
		return saturate(float3(r, g, b));
	}
	BRANCH if (STEREO_MODE == ANAGLYPH_BLUE_AMBER_DUBOIS || STEREO_MODE == ANAGLYPH_AMBER_BLUE_DUBOIS) // Anaglyph 3D Dubois Blue/Amber
	{
		// Dubois matrices are given in sRGB space
		const float3 LMA = FBGamma(0.5 + Anaglyph_Saturation_Brightness_EyeContrast.z * (LMAlin - 0.5));
		const float3 RMA = FBGamma(0.5 + Anaglyph_Saturation_Brightness_EyeContrast.w * (RMAlin - 0.5));
		const float r = dot(LMA, float3( 1.062, -0.205, 0.299)) + dot(RMA, float3(-0.016, -0.123, -0.017));
		const float g = dot(LMA, float3(-0.026,  0.908, 0.068)) + dot(RMA, float3( 0.006,  0.062, -0.017));
		const float b = dot(LMA, float3(-0.038, -0.173, 0.022)) + dot(RMA, float3( 0.094,  0.185,  0.911));
		return saturate(float3(r, g, b));
	}

	// Deghost filter
	float3 image;
	BRANCH if (STEREO_MODE == ANAGLYPH_RED_CYAN_DEGHOST || STEREO_MODE == ANAGLYPH_CYAN_RED_DEGHOST) // Anaglyph 3D Deghosted Red/Cyan
	{
		// Left eye
		const float LOne = Anaglyph_Saturation_Brightness_EyeContrast.z*0.45;
		float3 accum = saturate(LMAlin * float3(LOne, (1.0-LOne)*0.5, (1.0-LOne)*0.5));
		image.r = /*pow(*/ accum.r+accum.g+accum.b /*, 1.00)*/;
		
		// Right eye
		const float ROne = Anaglyph_Saturation_Brightness_EyeContrast.w;
		accum = saturate(RMAlin * float3(1.0-ROne, ROne, ROne));
		image.g = pow(accum.r+accum.g, 1.15);
		image.b = pow(accum.r+accum.b, 1.15);

		// Filters (very limited impact)
		const float DeGhost = 0.06 * 0.1;
		return saturate(FBGamma(float3(dot(image, float3(1.0 + DeGhost* 1.00,       DeGhost*-0.50,       DeGhost*-0.50)),
		                               dot(image, float3(      DeGhost*-0.25, 1.0 + DeGhost* 0.50,       DeGhost*-0.25)),
		                               dot(image, float3(      DeGhost*-0.25,       DeGhost*-0.25, 1.0 + DeGhost* 0.50)))));
	}
	BRANCH if (STEREO_MODE == ANAGLYPH_GREEN_MAGENTA_DEGHOST || STEREO_MODE == ANAGLYPH_MAGENTA_GREEN_DEGHOST) // Anaglyph 3D Deghosted Green/Magenta
	{
		// Left eye
		const float LOne = Anaglyph_Saturation_Brightness_EyeContrast.z;
		float3 accum = saturate(LMAlin * float3((1.0-LOne)*0.5, LOne, (1.0-LOne)*0.5));
		image.g = pow(accum.r+accum.g+accum.b, 1.05);

		// Right eye
		const float ROne = Anaglyph_Saturation_Brightness_EyeContrast.w*0.8;
		accum = saturate(RMAlin * float3(ROne, 1.0-ROne, ROne));
		image.r = pow(accum.r+accum.g, 1.15);
		image.b = pow(accum.g+accum.b, 1.15);

		// Filters (very limited impact)
		const float DeGhost = 0.06 * 0.275;
		return saturate(FBGamma(float3(dot(image, float3(1.0 + DeGhost* 0.50,       DeGhost*-0.25,       DeGhost*-0.25)),
		                               dot(image, float3(      DeGhost*-0.50, 1.0 + DeGhost* 0.25,       DeGhost*-0.50)),
		                               dot(image, float3(      DeGhost*-0.25,       DeGhost*-0.25, 1.0 + DeGhost* 0.50)))));
	}
	BRANCH if (STEREO_MODE == ANAGLYPH_BLUE_AMBER_DEGHOST || STEREO_MODE == ANAGLYPH_AMBER_BLUE_DEGHOST) // Anaglyph 3D Blue/Amber
	{
		// Left eye
		const float LOne = Anaglyph_Saturation_Brightness_EyeContrast.z * 0.45;
		float3 accum = saturate(LMAlin * float3((1.0-LOne)*0.5, (1.0-LOne)*0.5, LOne));
		image.b = /*pow(*/accum.r+accum.g+accum.b/*, 1.0)*/;
		
		// Right eye
		const float ROne = Anaglyph_Saturation_Brightness_EyeContrast.w;
		accum = saturate(RMAlin * float3(ROne, ROne, 1.0-ROne));
		image.r = pow(accum.r+accum.b, 1.05);
		image.g = pow(accum.g+accum.b, 1.10);

		// Filters (very limited impact)
		const float DeGhost = 0.06 * 0.275;
		image.b = lerp(pow(image.b,(DeGhost*0.15)+1.0), 1.0-pow(abs(1.0-image.b),(DeGhost*0.15)+1.0), image.b);
		return saturate(FBGamma(float3(dot(image, float3(1.0 + DeGhost* 1.50,       DeGhost*-0.75,       DeGhost*-0.75)),
		                               dot(image, float3(      DeGhost*-0.75, 1.0 + DeGhost* 1.50,       DeGhost*-0.75)),
		                               dot(image, float3(      DeGhost*-1.50,       DeGhost*-1.50, 1.0 + DeGhost* 3.00)))));
	}
	
	// Testing mode
	return FBGamma(LMAlin);
}

////VERTEX

layout(location=0) in vec3 vPosition;
layout(location=1) in vec2 tc;

out vec2 tex0;

////FRAGMENT

uniform sampler2DArray  tex_stereo_fb; // Render buffer with the 2 eyes

in vec2 tex0;

out vec4 color;

////vs_main_no_trafo

void main()
{
   gl_Position = vec4(vPosition.x, vPosition.y, 0.0, 1.0);
   tex0 = float2(tc.x, 1.0-tc.y);
}

////ps_main_tb

void main()
{
   color = textureLod(tex_stereo_fb, vec3(tex0.x, tex0.y * 2.0, tex0.y < 0.5 ? 0.0 : 1.0), 0.);
}

////ps_main_sbs

void main()
{
   color = textureLod(tex_stereo_fb, vec3(tex0.x * 2.0, tex0.y, tex0.x < 0.5 ? 0.0 : 1.0), 0.);
}

////ps_main_int

void main()
{
   // FIXME this cause an unwanted filtering
   color = textureLod(tex_stereo_fb, vec3(tex0.x, tex0.y, frac(gl_FragCoord.y*0.5) < 0.5 ? 0.0 : 1.0), 0.);
}

////ps_main_flipped_int

void main()
{
   // FIXME this cause an unwanted filtering
   color = textureLod(tex_stereo_fb, vec3(tex0.x, tex0.y, frac(gl_FragCoord.y*0.5) < 0.5 ? 1.0 : 0.0), 0.);
}

////ps_main_stereo_anaglyph

void main()
{
	const bool reversed = ((STEREO_MODE >= ANAGLYPH_CYAN_RED     ) && (STEREO_MODE <= ANAGLYPH_CYAN_RED_DEGHOST     ))
	                   || ((STEREO_MODE >= ANAGLYPH_MAGENTA_GREEN) && (STEREO_MODE <= ANAGLYPH_MAGENTA_GREEN_DEGHOST))
	                   || ((STEREO_MODE >= ANAGLYPH_AMBER_BLUE   ) && (STEREO_MODE <= ANAGLYPH_AMBER_BLUE_DEGHOST   ));
	const float3 lcol = textureLod(tex_stereo_fb, vec3(tex0.x, tex0.y, reversed ? 1. : 0.), 0.).xyz;
	const float3 rcol = textureLod(tex_stereo_fb, vec3(tex0.x, tex0.y, reversed ? 0. : 1.), 0.).xyz;
	color = float4(anaglyph(lcol, rcol), 1.0);
}


////TECHNIQUES

stereo_SBS:P0:vs_main_no_trafo():ps_main_sbs()
stereo_TB:P0:vs_main_no_trafo():ps_main_tb()
stereo_Int:P0:vs_main_no_trafo():ps_main_int()
stereo_Flipped_Int:P0:vs_main_no_trafo():ps_main_flipped_int()
stereo_anaglyph:P0:vs_main_no_trafo():ps_main_stereo_anaglyph()
