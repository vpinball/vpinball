////GLOBAL
#version 400

#ifdef SHADER_GLES30
precision highp float;
#define noperspective
#endif

////DEFINES
#include "Helpers.fxh"

uniform mat4 matWorldViewProj[N_EYES];


////VERTEX
layout(location=0) in vec3 vPosition;
layout(location=1) in vec3 vNormal;
layout(location=2) in vec2 tc;

out vec3 tablePos_gs;


////GEOMETRY
#extension GL_ARB_viewport_array : enable
layout(triangles) in;
layout(triangle_strip, max_vertices = 3) out;

// Use geometry invocations for stereo rendering
#if (N_EYES == 1)
   layout(invocations = 1) in;
#else
   layout(invocations = 2) in;
#endif

in vec3 tablePos_gs[];
out vec3 tablePos;


////FRAGMENT
uniform vec4 lightColor_intensity;
uniform vec4 lightColor2_falloff_power;
uniform vec4 lightCenter_maxRange;
uniform float blend_modulate_vs_add;

in vec3 tablePos;
out vec4 color;


////vs_lightbulb_main
void main()
{
   gl_Position = vec4(vPosition, 1.0);
   tablePos_gs = vPosition;
}


////gs_lightbulb_main
void main()
{
    gl_ViewportIndex = gl_InvocationID;
    for (int i=0;i<gl_in.length();i++) {
        //Default
        gl_Position = matWorldViewProj[gl_InvocationID]*gl_in[i].gl_Position;
        //Disabled since this would move backdrop lights behind other backdrop parts (rendered at z = 0), this could be readded with a max at 0, but I don't get why we would need this type of hack
        //gl_Position.z = max(gl_Position.z, 0.00006103515625); // clamp lights to near clip plane to avoid them being partially clipped // 0.00006103515625 due to 16bit half float
        //Custom
        tablePos = tablePos_gs[i];
        //Default
        EmitVertex();
    }
    EndPrimitive();
}


////PS_BulbLight
void main()
{
   const float3 light_dir = tablePos - lightCenter_maxRange.xyz;
   const float light_dist = length(light_dir);
   const float len = light_dist * lightCenter_maxRange.w;
   const float atten = saturate(pow(1.0 - saturate(len), lightColor2_falloff_power.w));
   const float3 lcolor = lerp(lightColor2_falloff_power.xyz, lightColor_intensity.xyz, sqrt(len));
   color.xyz = lcolor * (-blend_modulate_vs_add * atten * lightColor_intensity.w); // negative as it will be blended with '1.0-thisvalue' (the 1.0 is needed to modulate the underlying elements correctly, but not wanted for the term below)
   color.a = 1.0 / blend_modulate_vs_add - 1.0; //saturate(atten*lightColor_intensity.w);
}


////PS_BulbLight_with_ball_shadows
#include "BallShadows.fxh"
void main()
{
   const float3 light_dir = tablePos - lightCenter_maxRange.xyz;
   const float light_dist = length(light_dir);
   const float len = light_dist * lightCenter_maxRange.w;
   const float atten = saturate(pow(1.0 - saturate(len), lightColor2_falloff_power.w));
   const float3 lcolor = lerp(lightColor2_falloff_power.xyz, lightColor_intensity.xyz, sqrt(len));
   color.xyz = lcolor * (-blend_modulate_vs_add * atten * lightColor_intensity.w * get_light_ball_shadow(lightCenter_maxRange.xyz, light_dir, light_dist)); // negative as it will be blended with '1.0-thisvalue' (the 1.0 is needed to modulate the underlying elements correctly, but not wanted for the term below)
   color.a = 1.0 / blend_modulate_vs_add - 1.0; //saturate(atten*lightColor_intensity.w);
}


////TECHNIQUES

bulb_light:P0:vs_lightbulb_main():gs_lightbulb_main():PS_BulbLight()
bulb_light_with_ball_shadows:P0:vs_lightbulb_main():gs_lightbulb_main():PS_BulbLight_with_ball_shadows()
