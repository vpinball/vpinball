////GLOBAL
#version 410

#ifdef SHADER_GLES30
precision highp float;
#define noperspective
#endif

////DEFINES
#include "Helpers.fxh"

uniform vec4 backBoxSize; //xy=backbox location relative to rear left edge of the playfield zw=size  (all values in VPin Units)
uniform vec4 vColor_Intensity;
uniform vec4 vRes_Alpha_time;
uniform float alphaTestValue;

uniform mat4 matWorldViewProj[N_EYES];

//!! split into pure sprite & pure DMD?

////VERTEX

out int instanceID;

////GEOMETRY
#extension GL_ARB_viewport_array : enable
layout(triangles) in;
layout(triangle_strip, max_vertices = 3) out;
#if N_EYES == 1
   layout(invocations = 1) in;
#else
   layout(invocations = 2) in;
#endif

in int instanceID[];

////FRAGMENT

uniform sampler2D tex_dmd; // base texture for DMD (unfiltered)
uniform sampler2D tex_sprite; // base texture for sprites (filtered)

out vec4 color;

//
// VS function output structures
//

////vs_main

layout(location=0) in vec3 vPosition;
layout(location=1) in vec3 vNormal;
layout(location=2) in vec2 tc;

out vec2 tex0_gs;

void main()
{
   gl_Position = float4(vPosition.x*backBoxSize.z+backBoxSize.x, 0.0, vPosition.y*backBoxSize.w+backBoxSize.y, 1.0);
   tex0_gs = tc;
}

////vs_simple_world

layout(location=0) in vec3 vPosition;
layout(location=1) in vec3 vNormal;
layout(location=2) in vec2 tc;

out vec2 tex0_gs;

void main()
{
   gl_Position = float4(vPosition, 1.0);
   tex0_gs = tc;
}

////gs_simple

in vec2 tex0_gs[];
out vec2 tex0;

void main()
{
   gl_ViewportIndex = gl_InvocationID;
   for (int i=0;i<gl_in.length();i++) {
      //Default
      gl_Position = matWorldViewProj[gl_InvocationID]*gl_in[i].gl_Position;
      //Custom
      tex0 = tex0_gs[i];
      //Default
      EmitVertex();
   }
   EndPrimitive();
}

//
// PS functions (DMD and "sprites")
//

////ps_main_DMD

in vec2 tex0;

void main()
{
   float2 ddxs = dFdx(tex0) * 0.4; // use ddx and ddy to help the oversampling below/make filtering radius dependent on projected 'dot'/texel
   float2 ddys = dFdy(tex0) * 0.4;

   // brute force oversampling of DMD-texture and especially the dot-function (using 25 samples)
    float3 color2 = float3(0., 0., 0.);
    UNROLL for (int j = -2; j <= 2; ++j)
    {
        float2 uvj = tex0 + float(j) * ddys;
        UNROLL for (int i = -2; i <= 2; ++i)
        {
            const float2 uv = uvj + float(i) * ddxs;

            const float4 rgba = texture(tex_dmd, uv); //!! lots of tex access by doing this all the time, but (tex) cache should be able to catch all of it
            color.rgb = vColor_Intensity.xyz * vColor_Intensity.w; //!! create function that resembles LUT from VPM?
            if (rgba.a != 0.0)
                color.rgb *= rgba.rgb;
            else
                color.rgb *= rgba.r * (255.9 / 100.);

            // simulate dot within the sampled texel
            const float2 dist = fract(uv*vRes_Alpha_time.xy) * 2.2 - 1.1;
            const float d = dist.x * dist.x + dist.y * dist.y;

            color2 += color.rgb * smoothstep(0., 1., 1.0 - d * d);
        }
    }
    color2 *= 1. / 25.;

   /*float3 colorg = float3(0,0,0);
   UNROLL for(int j = -1; j <= 1; ++j)
   UNROLL for(int i = -1; i <= 1; ++i)
   {
      //collect glow from neighbors
   }*/

   //if (rgba.b > 200.0)
   //   return float4(InvToneMap(InvGamma(min(color2,float3(1.5,1.5,1.5))/*+colorg*/)), 0.5);
   //else
    color = float4(InvToneMap(InvGamma(color2/*+colorg*/)), vRes_Alpha_time.z); //!! meh, this sucks a bit performance-wise, but how to avoid this when doing fullscreen-tonemap/gamma without stencil and depth read?
}

////ps_main_DMD_ext

in vec2 tex0;

void main()
{
   float4 rgba = texture(tex_dmd, tex0); //!! lots of tex access by doing this all the time, but (tex) cache should be able to catch all of it
   color.rgb = rgba.rgb;
   color.a = vRes_Alpha_time.z;
}

////ps_main_noDMD

in vec2 tex0;

void main()
{
   const float4 l = texture(tex_sprite, tex0);
   if (l.a < alphaTestValue)
      discard; //stop the pixel shader if alpha test should reject pixel to avoid writing to the depth buffer
   color = float4(InvToneMap(InvGamma(l.xyz * vColor_Intensity.xyz * vColor_Intensity.w)), l.w); //!! meh, this sucks a bit performance-wise, but how to avoid this when doing fullscreen-tonemap/gamma without stencil and depth read?
}

////ps_main_noDMD_notex

void main()
{
   color = float4(InvToneMap(InvGamma(vColor_Intensity.xyz * vColor_Intensity.w)), 1.0); //!! meh, this sucks a bit performance-wise, but how to avoid this when doing fullscreen-tonemap/gamma without stencil and depth read?
}

////TECHNIQUES

basic_DMD:P0:vs_main():gs_simple():ps_main_DMD()
basic_DMD_ext:P0:vs_main():gs_simple():ps_main_DMD_ext()
basic_DMD_world:P0:vs_simple_world():gs_simple():ps_main_DMD()
basic_DMD_world_ext:P0:vs_simple_world():gs_simple():ps_main_DMD_ext()
basic_noDMD:P0:vs_main():gs_simple():ps_main_noDMD()
basic_noDMD_world:P0:vs_simple_world():gs_simple():ps_main_noDMD()
basic_noDMD_notex:P0:vs_main():gs_simple():ps_main_noDMD_notex()
