////GLOBAL
#version 400

////DEFINES
#include "Helpers.fxh"

#define Filter_None     0.
#define Filter_Additive 1.
#define Filter_Overlay  2.
#define Filter_Multiply 3.
#define Filter_Screen   4.

uniform mat4 matWorldViewProj[N_EYES];

////VERTEX
layout(location=0) in vec3 vPosition;
layout(location=1) in vec3 vNormal;
layout(location=2) in vec2 tc;

uniform vec4 clip_plane; // Clip plane defined in table coordinate system
uniform int layer; // Layer being rendered (set to 0 is using layered rendering, that is to say rendering multiple layers using instanced rendering)

VS_OUT(vec2, tex0);
VS_OUT(vec3, tablePos);
VS_OUT_EYE;


////GEOMETRY
layout(triangles) in;
layout(triangle_strip, max_vertices = 3) out;

in int eye_gs[];
#ifdef SHADER_GL410
flat out int glLayer_gs;
#endif


////FRAGMENT

// Early-Z-test implementation:
#extension GL_ARB_shader_image_load_store : enable
#extension GL_ARB_conservative_depth : enable
#if !defined(SHADER_GL410) && !defined(SHADER_GLES30)
layout(early_fragment_tests) in;
layout(depth_unchanged) out float gl_FragDepth;
#endif

uniform float4 staticColor_Alpha;
uniform float4 alphaTestValueAB_filterMode_addBlend; // last one bool
uniform float3 amount_blend_modulate_vs_add_flasherMode;

uniform float4 lightCenter_doShadow;

uniform sampler2D tex_flasher_A; // base texture
uniform sampler2D tex_flasher_B; // second image

in vec2 tex0;
out vec4 color;
#ifdef SHADER_GL410
flat in int glLayer_gs;
#endif

////vs_simple_main

void main()
{
   float4 pos = vec4(vPosition, 1.0);
   float3 table_pos = pos.xyz;

   VS_EYE;
   VS_POSITION(matWorldViewProj[eye_vs] * pos, pos);
   VS_VARYING(tablePos, table_pos);
   VS_VARYING(tex0, tc);
   VS_CLIP_DISTANCE(pos);
}

////gs_simple_main

in vec2 tex0_gs[];
out vec3 tablePos;
out vec2 tex0;

void main()
{
	GS_LAYER_COPY;
	for (int i=0;i<gl_in.length();i++) {
		gl_Position = (matWorldViewProj[eye_gs[i]]*gl_in[i].gl_Position);
		gl_ClipDistance[0] = gl_in[i].gl_ClipDistance[0];
		tablePos = gl_in[i].gl_Position.xyz;
		tex0 = tex0_gs[i];
		EmitVertex();
	}
	EndPrimitive();
}

////ps_main_noLight

in vec3 tablePos;

#include "BallShadows.fxh"

void main()
{
   FS_LAYER_TO_GLOBAL;
   float4 pixel1,pixel2;
   BRANCH if (amount_blend_modulate_vs_add_flasherMode.z < 2.) // Mode 0 & 1
   {
      pixel1 = texture(tex_flasher_A, tex0);
      if (pixel1.a <= alphaTestValueAB_filterMode_addBlend.x)
      {
         color = float4(0.0, 0.0, 0.0, 0.0);
         return;
      }
   }
   BRANCH if (amount_blend_modulate_vs_add_flasherMode.z == 1.)
   {
      pixel2 = texture(tex_flasher_B, tex0);
      if (pixel2.a <= alphaTestValueAB_filterMode_addBlend.y)
      {
         color = float4(0.0, 0.0, 0.0, 0.0);
         return;
      }
   }

   float4 result = staticColor_Alpha; // Mode 2 wires this through

   if (amount_blend_modulate_vs_add_flasherMode.z == 0.) // Mode 0 mods it by Texture
   {
      result *= pixel1;
   }

   BRANCH if (amount_blend_modulate_vs_add_flasherMode.z == 1.) // Mode 1 allows blends between Tex 1 & 2, and then mods the staticColor with it
   {
      BRANCH if (alphaTestValueAB_filterMode_addBlend.z == Filter_Overlay)
         result *= OverlayHDR(pixel1,pixel2); // could be HDR
      if (alphaTestValueAB_filterMode_addBlend.z == Filter_Multiply)
         result *= Multiply(pixel1,pixel2, amount_blend_modulate_vs_add_flasherMode.x);
      if (alphaTestValueAB_filterMode_addBlend.z == Filter_Additive)
         result *= Additive(pixel1,pixel2, amount_blend_modulate_vs_add_flasherMode.x);
      if (alphaTestValueAB_filterMode_addBlend.z == Filter_Screen)
         result *= ScreenHDR(pixel1,pixel2); // could be HDR
   }

   BRANCH if (lightCenter_doShadow.w != 0.)
   {
      const float3 light_dir = tablePos.xyz - lightCenter_doShadow.xyz;
      const float light_dist = length(light_dir);
      const float shadow = get_light_ball_shadow(lightCenter_doShadow.xyz, light_dir, light_dist);
      result.rgb *= shadow;
   }

   if (alphaTestValueAB_filterMode_addBlend.w == 0.)
      color = float4(result.xyz, saturate(result.a)); // Need to clamp here or we get some saturation artifacts on some tables
   else
      color = float4(result.xyz*(-amount_blend_modulate_vs_add_flasherMode.y*result.a), // negative as it will be blended with '1.0-thisvalue' (the 1.0 is needed to modulate the underlying elements correctly, but not wanted for the term below)
                     1.0/amount_blend_modulate_vs_add_flasherMode.y - 1.0);
}


////TECHNIQUES

basic_noLight:P0:vs_simple_main():gs_simple_main():ps_main_noLight()
