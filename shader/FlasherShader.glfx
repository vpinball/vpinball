////GLOBAL
#version 400

////DEFINES
#include "Helpers.fxh"

#define Filter_None     0.
#define Filter_Additive 1.
#define Filter_Overlay  2.
#define Filter_Multiply 3.
#define Filter_Screen   4.

layout(std140) uniform matrixBlock { mat4 matWorldViewProj[eyes];};

////VERTEX

in vec3 vPosition;
in vec2 tc;

out vec2 tex0_gs;

////GEOMETRY
#extension GL_ARB_viewport_array : enable
layout(triangles) in;
layout(triangle_strip, max_vertices = 3) out;
#if (eyes == 1)
   layout(invocations = 1) in;
#else
   layout(invocations = 2) in;
#endif

////FRAGMENT

// Early-Z-test implementation:
#extension GL_ARB_shader_image_load_store : enable
#extension GL_ARB_conservative_depth : enable
layout(early_fragment_tests) in;
layout(depth_unchanged) out float gl_FragDepth;

uniform float4 staticColor_Alpha;
uniform float4 alphaTestValueAB_filterMode_addBlend; // last one bool
uniform float3 amount_blend_modulate_vs_add_flasherMode;

uniform sampler2D tex_flasher_A; // base texture
uniform sampler2D tex_flasher_B; // second image

in vec2 tex0;
out vec4 color;

////vs_simple_main

void main()
{
   gl_Position = vec4(vPosition, 1.0);
   tex0_gs = tc;
}

////gs_simple_main

in vec2 tex0_gs[];
out vec2 tex0;

void main()
{
	gl_ViewportIndex = gl_InvocationID;
	for (int i=0;i<gl_in.length();i++) {
		//Default
		gl_Position = (matWorldViewProj[gl_InvocationID]*gl_in[i].gl_Position);
		//Custom
		tex0 = tex0_gs[i];
		//Default
		EmitVertex();
	}
	EndPrimitive();
}

////ps_main_noLight

void main()
{
   float4 pixel1,pixel2;
   bool stop = false;

   if (amount_blend_modulate_vs_add_flasherMode.z < 2.) // Mode 0 & 1
   {
      pixel1 = texture(tex_flasher_A, tex0);
      stop = (pixel1.a <= alphaTestValueAB_filterMode_addBlend.x);
   }
   if (amount_blend_modulate_vs_add_flasherMode.z == 1.)
   {
      pixel2 = texture(tex_flasher_B, tex0);
      stop = (stop || pixel2.a <= alphaTestValueAB_filterMode_addBlend.y);
   }

   if (stop) discard;

   float4 result = staticColor_Alpha; // Mode 2 wires this through

   if (amount_blend_modulate_vs_add_flasherMode.z == 0.) // Mode 0 mods it by texture
   {
      result *= pixel1;
      result.a = clamp(result.a, 0.0, 200.0); // Need to clamp here or we get some saturation artifacts on some tables
   }

   if (amount_blend_modulate_vs_add_flasherMode.z == 1.) // Mode 1 allows blends between Tex 1 & 2, and then mods the staticColor with it
   {
      if (alphaTestValueAB_filterMode_addBlend.z == Filter_Overlay)
         result *= OverlayHDR(pixel1,pixel2); // could be HDR
      if (alphaTestValueAB_filterMode_addBlend.z == Filter_Multiply)
         result *= Multiply(pixel1,pixel2, amount_blend_modulate_vs_add_flasherMode.x);
      if (alphaTestValueAB_filterMode_addBlend.z == Filter_Additive)
         result *= Additive(pixel1,pixel2, amount_blend_modulate_vs_add_flasherMode.x);
      if (alphaTestValueAB_filterMode_addBlend.z == Filter_Screen)
         result *= ScreenHDR(pixel1,pixel2); // could be HDR
   }

   if (alphaTestValueAB_filterMode_addBlend.w == 0.)
      color = result;
   else
      color = float4(result.xyz*(-amount_blend_modulate_vs_add_flasherMode.y*result.a), // negative as it will be blended with '1.0-thisvalue' (the 1.0 is needed to modulate the underlying elements correctly, but not wanted for the term below)
                     1.0/amount_blend_modulate_vs_add_flasherMode.y - 1.0);
}


////TECHNIQUES

basic_noLight:P0:vs_simple_main():gs_simple_main():ps_main_noLight()
