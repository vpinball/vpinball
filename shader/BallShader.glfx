////GLOBAL
#version 430

////DEFINES
#define NUM_BALL_LIGHTS 8

#include "Helpers.fxh"

uniform mat4 orientation;

layout(std140) uniform ballMatrixBlock {
	mat4 matView;
	mat4 matWorldView;
	mat4 matWorldViewInverse;
	mat4 matWorldViewProj[N_EYES];
};

uniform mat4 matProj[N_EYES]; // Separated from matrix block since we only need to set it once per frame (same for all balls)

////VERTEX
layout(location=0) in vec3 vPosition;
layout(location=1) in vec3 vNormal;
layout(location=2) in vec2 tex0;

uniform vec4 clip_plane; // Clip plane defined in table coordinate system
uniform int layer; // Layer being rendered (set to 0 is using layered rendering, that is to say rendering multiple layers using instanced rendering)

VS_OUT_EYE;

////GEOMETRY
layout(triangles) in;
layout(triangle_strip, max_vertices = 3) out;

in int eye_gs[];
#ifdef SHADER_GL410
flat out int glLayer_gs;
#endif

////FRAGMENT

// Early-Z-test implementation:
#extension GL_ARB_shader_image_load_store : enable
#extension GL_ARB_conservative_depth : enable
#if !defined(SHADER_GL410) && !defined(SHADER_GLES30)
layout(early_fragment_tests) in;
layout(depth_unchanged) out float gl_FragDepth;
#endif

uniform sampler2D tex_ball_color; // base texture
uniform samplerStereo tex_ball_playfield; // playfield
uniform sampler2D tex_ball_decal; // ball decal

uniform sampler2D tex_env; // envmap
uniform sampler2D tex_diffuse_env; // envmap radiance

#include "Material_GL.fxh"

uniform float4  invTableRes_reflection;
uniform float4  w_h_disableLighting;
#define disableLighting (w_h_disableLighting.z != 0.)

out vec4 color;
#ifdef SHADER_GL410
flat in int glLayer_gs;
#endif

////vsBall
VS_OUT(vec4, normal_t0x);
VS_OUT(vec4, worldPos_t0y);

void main()
{
    // apply spinning and move the ball to it's actual position
    float4 pos = vec4(vPosition, 1.0);
    pos.xyz = (orientation * pos).xyz;

    // apply spinning to the normals too to get the sphere mapping effect
    const float3 nspin = (orientation * vec4(vNormal,0.0)).xyz;
    // Needs to use a 'normal' matrix, and to normalize since we allow non uniform stretching, therefore matWorldView is not orthonormal
    const float3 normal = normalize((vec4(nspin, 0.0) * matWorldViewInverse).xyz); // actually: mul(vec4(nspin,0.), matWorldViewInverseTranspose), but optimized to save one matrix

    const float3 p = (matWorldView * pos).xyz;

    VS_EYE;
    VS_POSITION(matWorldViewProj[eye_vs] * pos, pos);
    VS_VARYING(normal_t0x, float4(normal,tex0.x));
    VS_VARYING(worldPos_t0y, float4(p,tex0.y));
    VS_CLIP_DISTANCE(pos);
}

////vsBallTrail
VS_OUT(vec3, tex0_alpha);

void main()
{
    float4 pos = vec4(vPosition, 1.0);
    VS_EYE;
    VS_POSITION(matWorldViewProj[eye_vs] * pos, pos);
    VS_VARYING(tex0_alpha, float3(tex0, vNormal.x)); //!! abuses normal for now
    VS_CLIP_DISTANCE(pos);
}

////gsBall

in vec4 normal_t0x_gs[];
out vec4 normal_t0x;

in vec4 worldPos_t0y_gs[];
out vec4 worldPos_t0y;

flat out float eye;

void main()
{
    GS_LAYER_COPY;
    for (int i=0;i<gl_in.length();i++) {
        gl_Position = (matWorldViewProj[eye_gs[i]]*gl_in[i].gl_Position);
        gl_ClipDistance[0] = gl_in[i].gl_ClipDistance[0];
        normal_t0x = normal_t0x_gs[i];
        worldPos_t0y = worldPos_t0y_gs[i];
        eye = eye_gs[i];
        EmitVertex();
    }
    EndPrimitive();
}

////gsBallTrail

in vec3 tex0_alpha_gs[];
out vec3 tex0_alpha;

void main()
{
    GS_LAYER_COPY;
    for (int i=0;i<gl_in.length();i++) {
        gl_Position = (matWorldViewProj[eye_gs[i]]*gl_in[i].gl_Position);
        tex0_alpha = tex0_alpha_gs[i];
        EmitVertex();
    }
    EndPrimitive();
}

////FRAGMENT

float3 ballLightLoop(const float3 pos, const float3 N, const float3 V, float3 diffuse, float3 glossy, const float3 specular, const float edge, const bool is_metal)
{
   // N and V must be already normalized by the caller
   // N = normalize(N);
   // V = normalize(V);

   // normalize BRDF layer inputs //!! use diffuse = (1-glossy)*diffuse instead?
   const float diffuseMax = max(diffuse.x,max(diffuse.y,diffuse.z));
   const float glossyMax = max(glossy.x,max(glossy.y,glossy.z));
   const float specularMax = max(specular.x,max(specular.y,specular.z)); //!! not needed as 2nd layer only so far
   const float sum = diffuseMax + glossyMax; //+ specularMax
   if(sum > 1.0)
   {
      const float invsum = 1.0/sum;
      diffuse  *= invsum;
      glossy   *= invsum;
      //specular *= invsum;
   }

   float3 color = float3(0.0, 0.0, 0.0);

   BRANCH if((!is_metal && (diffuseMax > 0.0)) || (glossyMax > 0.0))
      for(int i = 0; i < iLightPointBallsNum; i++)  
         color += DoPointLight(pos, N, V, diffuse, glossy, edge, Roughness_WrapL_Edge_Thickness.x, i, is_metal); // no clearcoat needed as only pointlights so far

   BRANCH if(!is_metal && (diffuseMax > 0.0))
      color += DoEnvmapDiffuse(normalize((matView * vec4(N,0.0)).xyz), diffuse); // trafo back to world for lookup into world space envmap // actually: mul(vec4(N, 0.0), matViewInverseInverseTranspose)

   if(specularMax > 0.0)
      color += specular; //!! blend? //!! Fresnel with 1st layer?

   return color;
}


////psBall

in vec4 normal_t0x;
in vec4 worldPos_t0y;
flat in float eye;

void main()
{
    FS_LAYER_TO_GLOBAL;
    const float3 V = normalize(/*camera=0,0,0,1*/-worldPos_t0y.xyz);
    const float3 N = normalize(normal_t0x.xyz);
    const float3 R = reflect(V, N);

    float3 ballImageColor;
    const float edge = dot(V, R);
    // edge falloff to reduce aliasing on edges (picks smaller mipmap -> more blur)
    const float lod = (edge > 0.6) ? edge*(6.0*1.0/0.4)-(6.0*0.6/0.4) : 0.0;
    BRANCH if (%PARAM0%) // equirectangularMap
    { // Equirectangular Map Reflections
      // trafo back to world for lookup into world space envmap
      // matView is always an orthonormal matrix, so no need to normalize after transform
      const float3 rv = /*normalize*/((float4(-R,0.0) * matView).xyz);
      const float2 uv = ray_to_equirectangular_uv(rv);
      ballImageColor = textureLod(tex_ball_color, uv, lod).rgb;
    }
    else
    { // Spherical Map Reflections
      // calculate the intermediate value for the final texture coords. found here http://www.ozone3d.net/tutorials/glsl_texturing_p04.php
      const float m = (1.0 - R.z > 0.) ? 0.3535533905932737622 * rsqrt(1.0 - R.z) : 0.; // 0.353...=0.5/sqrt(2)
      const float2 uv = float2(0.5 - m * R.x, 0.5 - m * R.y);
      ballImageColor = textureLod(tex_ball_color, uv, lod).rgb;
    }

    const float4 decalColorT = texture(tex_ball_decal, float2(normal_t0x.w, worldPos_t0y.w));
    float3 decalColor = decalColorT.rgb;

    if (!%PARAM1%) // decalMode
    {
       // decal texture is an alpha scratch texture and must be added to the ball texture
       // the strength of the scratches totally rely on the alpha values.
       decalColor *= decalColorT.a;
       ballImageColor += decalColor;
    }
    else
       ballImageColor = ScreenHDR(ballImageColor, decalColor);

    BRANCH if (disableLighting)
    {
       color = float4(ballImageColor,cBase_Alpha.a);
       return;
    }

    if (!%PARAM1%) // decalMode
       ballImageColor *= fenvEmissionScale_TexWidth.x;
    else
       ballImageColor *= 0.5*fenvEmissionScale_TexWidth.x; //!! 0.5=magic

    // No need to normalize here since the matWorldView matrix is normal (world is identity and view is always orthonormal)
    // No need to use a dedicated 'normal' matrix since the matWorldView is orthonormal (world is identity and view is always orthonormal)
    //const float3 playfield_normal = normalize((float4(0.,0.,1.,0.) * matWorldViewInverse).xyz); //!! normalize necessary? // actually: mul(float4(0.,0.,1.,0.), matWorldViewInverseTranspose), but optimized to save one matrix
    //const float3 playfield_normal = (matWorldView * float4(0.,0.,1.,0.)).xyz;
    const float3 playfield_normal = matWorldView[2].xyz;
    const float NdotR = dot(playfield_normal, R);

    const float3 playfield_p0 = mul_w1(float3(/*playfield_pos=*/0.,0.,0.), matWorldView);
    const float t = dot(playfield_normal, worldPos_t0y.xyz - playfield_p0) / NdotR;
    const float3 playfield_hit = worldPos_t0y.xyz - t * R;

    // New implementation: use previous frame as a reflection probe instead of computing a simplified render (this is faster and more accurate, support playfield mesh, lighting,... but there can be artefacts, with self reflection,...)
    // TODO use previous frame projection instead of the one of the current frame to limit reflection distortion (still this is minimal)
    const float4 proj = matProj[int(eye)] * float4(playfield_hit, 1.0);
    const float2 uvp = float2(0.5, 0.5) + proj.xy * (0.5 / proj.w);
    const float3 playfieldColor = 0.25 * (
          texStereo(tex_ball_playfield, uvp + float2(w_h_disableLighting.x, 0.)).rgb
        + texStereo(tex_ball_playfield, uvp - float2(w_h_disableLighting.x, 0.)).rgb
        + texStereo(tex_ball_playfield, uvp + float2(0., w_h_disableLighting.y)).rgb
        + texStereo(tex_ball_playfield, uvp - float2(0., w_h_disableLighting.y)).rgb
    ); // a bit of supersampling, not strictly needed, but a bit better and not that costly

    // we don't clamp sampling outside the playfield (costly and no real visual impact)
    // const float2 uv = (matWorldViewInverse * float4(playfield_hit, 1.0)).xy * invTableRes_reflection.xy;
    // && !(uv.x < 0.1 && uv.y < 0.1 && uv.x > 0.9 && uv.y > 0.9)
    BRANCH if (!(uvp.x < 0. || uvp.x > 1. || uvp.y < 0. || uvp.y > 1.) // outside of previous render => discard (we could use sampling techniques to optimize a bit)
            && !(t <= 0.)) // t < 0.0 may happen in some situation where ball intersects the playfield and the reflected point is inside the ball (like in kicker)
    {
        // NdotR allows to fade between playfield (down) and environment (up)
	    ballImageColor = lerp(ballImageColor, playfieldColor, smoothstep(0.0, 0.15, NdotR) * invTableRes_reflection.z);
    }

	// We can face infinite reflections (ball->playfield->ball->playfield->...) which would overflow, or very bright dots that would cause lighting artefacts, so we saturate to an arbitrary value
	ballImageColor = min(ballImageColor, float3(15., 15., 15.));

    float3 diffuse = cBase_Alpha.rgb*0.075;
    if(!%PARAM1%) // decalMode
       diffuse *= decalColor; // scratches make the material more rough

    const float3 glossy = max(diffuse*2.0, float3(0.1,0.1,0.1)); //!! meh

    float3 specular = ballImageColor * cBase_Alpha.rgb; //!! meh, too, as only added in ballLightLoop anyhow
    if(!%PARAM1%) // decalMode
       specular *= float3(1.,1.,1.)-decalColor; // see above

    color.rgb = ballLightLoop(worldPos_t0y.xyz, N, V, diffuse, glossy, specular, 1.0, false);
    color.a = cBase_Alpha.a;
}

////psBallDebug

void main()
{
    color = float4(1.0, 1.0, 1.0, 0.0);
}

////psBallTrail

in vec3 tex0_alpha;

void main()
{
   FS_LAYER_TO_GLOBAL;
   const float3 ballImageColor = texture(tex_ball_color, tex0_alpha.xy).rgb;
   if (disableLighting)
      color = float4(ballImageColor, tex0_alpha.z);
   else
      color = float4((cBase_Alpha.rgb*(0.075*0.25) + ballImageColor)*fenvEmissionScale_TexWidth.x, tex0_alpha.z); //!! just add the ballcolor in, this is a whacky trail anyhow
}

//------------------------------------
// Techniques

////TECHNIQUES

RenderBall:P0:vsBall():gsBall():psBall(true, false)
RenderBall_DecalMode:P0:vsBall():gsBall():psBall(true, true)
RenderBall_SphericalMap:P0:vsBall():gsBall():psBall(false, false)
RenderBall_SphericalMap_DecalMode:P0:vsBall():gsBall():psBall(false, true)
RenderBall_Debug:P0:vsBall():gsBall():psBallDebug()
RenderBallTrail:P0:vsBallTrail():gsBallTrail():psBallTrail()
