////GLOBAL
#version 430

#ifdef SHADER_GLES30
precision highp float;
#define noperspective
#endif

////DEFINES
#define NUM_BALL_LIGHTS 8

#include "Helpers.fxh"

uniform mat4 orientation;

layout(std140) uniform ballMatrixBlock {
	mat4 matView;
	mat4 matWorldView;
	mat4 matWorldViewInverse;
	mat4 matWorldViewProj[N_EYES];
};

////VERTEX

uniform vec4 clip_plane; // Clip plane defined in table coordinate system

////GEOMETRY
#extension GL_ARB_viewport_array : enable
layout(triangles) in;
layout(triangle_strip, max_vertices = 3) out;
#if (N_EYES == 1)
   layout(invocations = 1) in;
#else
   layout(invocations = 2) in;
#endif

////FRAGMENT

// Early-Z-test implementation:
#extension GL_ARB_shader_image_load_store : enable
#extension GL_ARB_conservative_depth : enable
#if !defined(SHADER_GL410) && !defined(SHADER_GLES30)
layout(early_fragment_tests) in;
layout(depth_unchanged) out float gl_FragDepth;
#endif

uniform sampler2D tex_ball_color; // base texture
uniform sampler2D tex_ball_playfield; // playfield
uniform sampler2D tex_ball_decal; // ball decal

uniform sampler2D tex_env; // envmap
uniform sampler2D tex_diffuse_env; // envmap radiance

#include "Material_GL.fxh"

uniform vec4  invTableRes_playfield_height_reflection;
uniform bool  disableLighting;

//const float    reflection_ball_playfield;

out vec4 color;

////vsBall

layout(location=0) in vec3 vPosition;
layout(location=1) in vec3 vNormal;
layout(location=2) in vec2 tex0;

out vec4 normal_t0x_gs;
out vec4 worldPos_t0y_gs;

void main()
{
	// apply spinning and move the ball to it's actual position
	float4 pos = vec4(vPosition, 1.0);
	pos.xyz = (orientation * pos).xyz;

	// apply spinning to the normals too to get the sphere mapping effect
	const float3 nspin = (orientation * vec4(vNormal,0.0)).xyz;
    // Needs to use a 'normal' matrix, and to normalize since we allow non uniform stretching, therefore matWorldView is not orthonormal
	const float3 normal = normalize((vec4(nspin, 0.0) * matWorldViewInverse).xyz); // actually: mul(vec4(nspin,0.), matWorldViewInverseTranspose), but optimized to save one matrix

	const float3 p = (matWorldView * pos).xyz;

	gl_Position = pos;
	normal_t0x_gs = float4(normal,tex0.x);
	worldPos_t0y_gs = float4(p,tex0.y);

    gl_ClipDistance[0] = dot(vec4(pos.xyz, 1.0), clip_plane);
}

////vsBallTrail

layout(location=0) in vec3 vPosition;
layout(location=1) in vec3 vNormal;
layout(location=2) in vec2 tex0;

out vec3 tex0_alpha_gs;

void main()
{
	gl_Position = vec4(vPosition, 1.0);
	tex0_alpha_gs = vec3(tex0, vNormal.x); //!! abuses normal for now
}

////gsBall

in vec4 normal_t0x_gs[];
out vec4 normal_t0x;

in vec4 worldPos_t0y_gs[];
out vec4 worldPos_t0y;

void main()
{
	gl_ViewportIndex = gl_InvocationID;
	for (int i=0;i<gl_in.length();i++) {
		gl_Position = (matWorldViewProj[gl_InvocationID]*gl_in[i].gl_Position);
        gl_ClipDistance[0] = gl_in[i].gl_ClipDistance[0];
		normal_t0x = normal_t0x_gs[i];
		worldPos_t0y = worldPos_t0y_gs[i];
		EmitVertex();
	}
	EndPrimitive();
}

////gsBallTrail

in vec3 tex0_alpha_gs[];
out vec3 tex0_alpha;

void main()
{
	gl_ViewportIndex = gl_InvocationID;
	for (int i=0;i<gl_in.length();i++) {
		gl_Position = (matWorldViewProj[gl_InvocationID]*gl_in[i].gl_Position);
		tex0_alpha = tex0_alpha_gs[i];
		EmitVertex();
	}
	EndPrimitive();
}

////FRAGMENT

float3 ballLightLoop(const float3 pos, const float3 N, const float3 V, float3 diffuse, float3 glossy, const float3 specular, const float edge, const bool is_metal)
{
   // N and V must be already normalized by the caller
   // N = normalize(N);
   // V = normalize(V);

   // normalize BRDF layer inputs //!! use diffuse = (1-glossy)*diffuse instead?
   const float diffuseMax = max(diffuse.x,max(diffuse.y,diffuse.z));
   const float glossyMax = max(glossy.x,max(glossy.y,glossy.z));
   const float specularMax = max(specular.x,max(specular.y,specular.z)); //!! not needed as 2nd layer only so far
   const float sum = diffuseMax + glossyMax; //+ specularMax
   if(sum > 1.0)
   {
      const float invsum = 1.0/sum;
      diffuse  *= invsum;
      glossy   *= invsum;
      //specular *= invsum;
   }

   //if(dot(N,V) < 0.0) //!! flip normal in case of wrong orientation? (backside lighting)
   //   N = -N;

   float3 color = float3(0.0, 0.0, 0.0);

   BRANCH if((!is_metal && (diffuseMax > 0.0)) || (glossyMax > 0.0))
   {
      for(int i = 0; i < iLightPointBallsNum; i++)  
         color += DoPointLight(pos, N, V, diffuse, glossy, edge, Roughness_WrapL_Edge_Thickness.x, i, is_metal); // no clearcoat needed as only pointlights so far
   }

   BRANCH if(!is_metal && (diffuseMax > 0.0))
      color += DoEnvmapDiffuse(normalize((matView * vec4(N,0.0)).xyz), diffuse); // trafo back to world for lookup into world space envmap // actually: mul(vec4(N, 0.0), matViewInverseInverseTranspose)

   if(specularMax > 0.0)
      color += specular; //!! blend? //!! Fresnel with 1st layer?

   return color;
}

float3 PFDoPointLight(const float3 pos, const float3 N, const float3 diffuse, const int i) 
{
   //!! do in vertex shader?! or completely before?!
   //const float3 lightDir = mul_w1(lightPos[i].xyz, matView) - pos;
   const float3 lightDir = (matView * vec4(lightPos[i].xyz, 1.0)).xyz - pos;
   const float3 L = normalize(lightDir);
   const float NdotL = dot(N, L);
   // compute diffuse color (lambert)
   const float3 Out = (NdotL > 0.0) ? diffuse * NdotL : float3(0.0,0.0,0.0);

   const float sqrl_lightDir = dot(lightDir,lightDir); // tweaked falloff to have ranged lightsources
   float fAtten = saturate(1.0 - sqrl_lightDir*sqrl_lightDir/(cAmbient_LightRange.w*cAmbient_LightRange.w*cAmbient_LightRange.w*cAmbient_LightRange.w)); //!! pre-mult/invert cAmbient_LightRange.w?
   fAtten = fAtten*fAtten/(sqrl_lightDir + 1.0);

   return Out * lightEmission[i].xyz * fAtten;
}

float3 PFlightLoop(const float3 pos, const float3 N, const float3 diffuse)
{
   const float diffuseMax = max(diffuse.x,max(diffuse.y,diffuse.z));

   float3 color = float3(0.0,0.0,0.0);

   BRANCH if (diffuseMax > 0.0)
   {
      for (int i = 0; i < iLightPointNum; i++)
         color += PFDoPointLight(pos, N, diffuse, i);

      color += DoEnvmapDiffuse(float3(0.,0.,1.), diffuse); // directly wire world space playfield normal
   }

   return color;
}


////psBall

in vec4 normal_t0x;
in vec4 worldPos_t0y;

void main()
{
    const float3 V = normalize( /*camera=0,0,0,1*/-worldPos_t0y.xyz);
    const float3 N = normalize(normal_t0x.xyz);
    const float3 r = reflect(V, N);

    float3 ballImageColor;
    BRANCH if (%PARAM0%) // equirectangularMap
    { // Equirectangular Map Reflections
	  // trafo back to world for lookup into world space envmap
	  // matView is always an orthonormal matrix, so no need to normalize after transform
	  const float3 rv = /*normalize*/((float4(-r,0.0) * matView).xyz);
      const float2 uv = ray_to_equirectangular_uv(rv);
      ballImageColor = texture(tex_ball_color, uv).xyz;
    }
    else
    { // Spherical Map Reflections
      // calculate the intermediate value for the final texture coords. found here http://www.ozone3d.net/tutorials/glsl_texturing_p04.php
      const float m = (1.0 - r.z > 0.) ? 0.3535533905932737622 * rsqrt(1.0 - r.z) : 0.; // 0.353...=0.5/sqrt(2)
      const float2 uv = float2(0.5 - m * r.x, 0.5 - m * r.y);
      const float edge = dot(V, r);
      // edge falloff to reduce aliasing on edges (picks smaller mipmap -> more blur)
      const float lod = (edge > 0.6) ? edge*(6.0*1.0/0.4)-(6.0*0.6/0.4) : 0.0;
      ballImageColor = textureLod(tex_ball_color, uv, lod).xyz;
    }

    const float4 decalColorT = texture(tex_ball_decal, float2(normal_t0x.w, worldPos_t0y.w));
    float3 decalColor = decalColorT.xyz;

    if (!%PARAM1%) // decalMode
    {
       // decal texture is an alpha scratch texture and must be added to the ball texture
       // the strength of the scratches totally rely on the alpha values.
       decalColor *= decalColorT.a;
       ballImageColor += decalColor;
    }
    else
       ballImageColor = ScreenHDR(ballImageColor, decalColor);

    BRANCH if (disableLighting)
    {
       color = float4(ballImageColor,cBase_Alpha.a);
       return;
    }

    if (!%PARAM1%) // decalMode
       ballImageColor *= fenvEmissionScale_TexWidth.x;
    else
       ballImageColor *= 0.5*fenvEmissionScale_TexWidth.x; //!! 0.5=magic

    // No need to normalize here since the matWorldView matrix is normal (world is identity and view is always orthonormal)
    // No need to use a dedicated 'normal' matrix since the matWorldView is orthonormal (world is identity and view is always orthonormal)
    //const float3 playfield_normal = normalize((float4(0.,0.,1.,0.) * matWorldViewInverse).xyz); //!! normalize necessary? // actually: mul(float4(0.,0.,1.,0.), matWorldViewInverseTranspose), but optimized to save one matrix
    //const float3 playfield_normal = (matWorldView * float4(0.,0.,1.,0.)).xyz;
    const float3 playfield_normal = matWorldView[2].xyz;
    const float NdotR = dot(playfield_normal,r);

    const float3 playfield_p0 = mul_w1(float3(/*playfield_pos=*/0.,0.,invTableRes_playfield_height_reflection.z), matWorldView);
    const float t = dot(playfield_normal, worldPos_t0y.xyz - playfield_p0) / NdotR;
    const float3 playfield_hit = worldPos_t0y.xyz - t*r;
    const float2 uv = (matWorldViewInverse * float4(playfield_hit, 1.0)).xy * invTableRes_playfield_height_reflection.xy;

    // This will break with custom playfield texture coordinates (like Flupper's TOTAN and many others)
    // => Rather use screen space sample from previous frame (it will include the lighting/shadowing but also the ball itself, and would need to account for viewer movement) ?
    float3 playfieldColor = tex2D(tex_ball_playfield, uv).xyz * invTableRes_playfield_height_reflection.w;
    BRANCH if (NdotR <= 0. || t < 0.)
    {
        // t < 0.0 may happen in some situation where ball intersects the playfield (like in kicker)
        playfieldColor = ballImageColor;
    }
    else
    {
       //!! hack to get some lighting on reflection sample, but only diffuse, the rest is not setup correctly anyhow
       playfieldColor = PFlightLoop(playfield_hit, playfield_normal, playfieldColor);

       //!! magic falloff & weight the rest in from the ballImage
       // Before 10.8, used to be: const float weight = NdotR*NdotR; 
       // const float weight = 1.0 / (1.0 + max(0.0, t - 12.5) * 0.01);
       const float weight = smoothstep(t, 0.0, 25.0);
       playfieldColor = lerp(playfieldColor, ballImageColor, weight);
    }

    float3 diffuse = cBase_Alpha.xyz*0.075;

    if(!%PARAM1%) // decalMode
       diffuse *= decalColor; // scratches make the material more rough

    const float3 glossy = max(diffuse*2.0, float3(0.1,0.1,0.1)); //!! meh
    float3 specular = playfieldColor*cBase_Alpha.xyz; //!! meh, too, as only added in ballLightLoop anyhow

    if(!%PARAM1%)
       specular *= float3(1.,1.,1.)-decalColor; // see above

   color.xyz = ballLightLoop(worldPos_t0y.xyz, N, V, diffuse, glossy, specular, 1.0, false);
   color.a = cBase_Alpha.a;
}

#if 0
float4 psBallReflection( const in voutReflection IN ) : COLOR
{
   const float2 envTex = float2(r.x*0.5 + 0.5, r.y*0.5 + 0.5);
   float3 ballImageColor = texture(tex_ball_color, envTex).xyz;
   ballImageColor = (cBase_Alpha.xyz*(0.075*0.25) + ballImageColor)*fenvEmissionScale_TexWidth.x; //!! just add the ballcolor in, this is a whacky reflection anyhow
   float alpha = saturate((tex0.y - position_radius.y) / position_radius.w);
   alpha = (alpha*alpha)*(alpha*alpha)*reflection_ball_playfield;
   color = float4(ballImageColor,alpha);
}
#endif

////psBallTrail

in vec3 tex0_alpha;

void main()
{
   const float3 ballImageColor = texture(tex_ball_color, tex0_alpha.xy).xyz;
   if (disableLighting)
      color = float4(ballImageColor, tex0_alpha.z);
   else
      color = float4((cBase_Alpha.xyz*(0.075*0.25) + ballImageColor)*fenvEmissionScale_TexWidth.x, tex0_alpha.z); //!! just add the ballcolor in, this is a whacky trail anyhow
}

//------------------------------------
// Techniques

////TECHNIQUES

RenderBall:P0:vsBall():gsBall():psBall(true, false)
RenderBall_DecalMode:P0:vsBall():gsBall():psBall(true, true)
RenderBall_SphericalMap:P0:vsBall():gsBall():psBall(false, false)
RenderBall_SphericalMap_DecalMode:P0:vsBall():gsBall():psBall(false, true)
//RenderBallReflection:P0:vsBallReflection():psBallReflection()
RenderBallTrail:P0:vsBallTrail():gsBallTrail():psBallTrail()
