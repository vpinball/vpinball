////GLOBAL
#version 400
/**
 * Copyright (C) 2013 Jorge Jimenez (jorge@iryoku.com)
 * Copyright (C) 2013 Jose I. Echevarria (joseignacioechevarria@gmail.com)
 * Copyright (C) 2013 Belen Masia (bmasia@unizar.es)
 * Copyright (C) 2013 Fernando Navarro (fernandn@microsoft.com)
 * Copyright (C) 2013 Diego Gutierrez (diegog@unizar.es)
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is furnished to
 * do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software. As clarification, there
 * is no requirement that the copyright notice and permission be included in
 * binary distributions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
//Modified for Visual pinball
 
#define SMAA_PRESET_HIGH
//#define SMAA_USE_DEPTH
//#define SMAA_USE_STENCIL
#define SMAA_USE_COLOR // otherwise luma

#ifdef SMAA_PRESET_CUSTOM
/**
 * This can be ignored; its purpose is to support interactive custom parameter
 * tweaking.
 */
float threshld;
float maxSearchSteps;
float maxSearchStepsDiag;
float cornerRounding;
#endif

// Set the GLSL version:
#define SMAA_GLSL_4

#ifdef SMAA_PRESET_CUSTOM
#define SMAA_THRESHOLD threshld
#define SMAA_MAX_SEARCH_STEPS maxSearchSteps
#define SMAA_MAX_SEARCH_STEPS_DIAG maxSearchStepsDiag
#define SMAA_CORNER_ROUNDING cornerRounding
#endif

uniform vec4 w_h_height; 
// Use a real macro here for maximum performance!
#ifndef SMAA_RT_METRICS // This is just for compilation-time syntax checking.
#define SMAA_RT_METRICS vec4(w_h_height.x,w_h_height.y,w_h_height.z,1.0/w_h_height.y) //!! //vec4(1.0 / 1280.0, 1.0 / 720.0, 1280.0, 720.0)
#endif

// And include our header!
#include "SMAA.hlsl"

////FRAGMENT

uniform sampler2D colorTex;
uniform sampler2D colorGammaTex;

uniform sampler2D edgesTex2D;
uniform sampler2D blendTex2D;

uniform sampler2D areaTex2D;
uniform sampler2D searchTex2D;

out vec4 color;

////GLSL_SMAAEdgeDetectionVS

in vec3 vPosition;
in vec2 tc;

out vec2 texcoord;
out vec4[3] offset;

void main()
{
    gl_Position = vec4(vPosition.x,-vPosition.y,0.0,1.0);
    //gl_Position = vec4(2.0*vPosition.x-1.0,2.0*vPosition.y-1.0, 0.0,1.0);
    // Offset texture coordinates since OpenGL texel center is shifted by half a texel from DirectX texel center
    //texcoord = vec2(tc.x,1.0-tc.y) + w_h_height.xy*0.5;
    texcoord = tc;
    SMAAEdgeDetectionVS(texcoord, offset);
}

////GLSL_SMAABlendingWeightCalculationVS

in vec3 vPosition;
in vec2 tc;

out vec2 texcoord;
out vec4[3] offset;
out vec2 pixcoord;

void main()
{
    gl_Position = vec4(vPosition.x,-vPosition.y,0.0,1.0);
    //gl_Position = vec4(2.0*vPosition.x-1.0,2.0*vPosition.y-1.0, 0.0,1.0);
    // Offset texture coordinates since OpenGL texel center is shifted by half a texel from DirectX texel center
    //texcoord = vec2(tc.x,1.0-tc.y) + w_h_height.xy*0.5;
    texcoord = tc;
    SMAABlendingWeightCalculationVS(texcoord, pixcoord, offset);
}

////GLSL_SMAANeighborhoodBlendingVS

in vec3 vPosition;
in vec2 tc;

out vec2 texcoord;
out vec4 offset;

void main()
{
    gl_Position = vec4(vPosition.x,-vPosition.y,0.0,1.0);
    // gl_Position = vec4(2.0*vPosition.x-1.0,2.0*vPosition.y-1.0, 0.0,1.0);
    // Offset texture coordinates since OpenGL texel center is shifted by half a texel from DirectX texel center
    //texcoord = vec2(tc.x,1.0-tc.y) + w_h_height.xy*0.5;
    texcoord = tc;
    SMAANeighborhoodBlendingVS(texcoord, offset);
}

////GLSL_SMAAColorEdgeDetectionPS

in vec2 texcoord;
in vec4[3] offset;

void main()
{
    color = vec4(SMAAColorEdgeDetectionPS(texcoord, offset, colorGammaTex), 0.0, 0.0);
}

////GLSL_SMAABlendingWeightCalculationPS

in vec2 texcoord;
in vec4[3] offset;
in vec2 pixcoord;

void main()
{
    color = SMAABlendingWeightCalculationPS(texcoord, pixcoord, offset, edgesTex2D, areaTex2D, searchTex2D, vec4(0.0));
}

////GLSL_SMAANeighborhoodBlendingPS

in vec2 texcoord;
in vec4 offset;

void main()
{
    color = SMAANeighborhoodBlendingPS(texcoord, offset, colorTex, blendTex2D);
}

////TECHNIQUES

//technique SMAA_LumaEdgeDetection:P0:GLSL_SMAAEdgeDetectionVS():GLSL_SMAALumaEdgeDetectionPS()
SMAA_ColorEdgeDetection:P0:GLSL_SMAAEdgeDetectionVS():GLSL_SMAAColorEdgeDetectionPS()
SMAA_BlendWeightCalculation:P0:GLSL_SMAABlendingWeightCalculationVS():GLSL_SMAABlendingWeightCalculationPS()
SMAA_NeighborhoodBlending:P0:GLSL_SMAANeighborhoodBlendingVS():GLSL_SMAANeighborhoodBlendingPS()
