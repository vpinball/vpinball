////GLOBAL
#version 430

////DEFINES

//!! have switch to choose if texture is weighted by diffuse/glossy or is just used raw?

#define NUM_BALL_LIGHTS 0 // just to avoid having too much constant mem allocated

layout(std140) uniform matrixBlock {
	mat4 matView;
	mat4 matWorldView;
	mat3x4 matWorldViewInverseTranspose;
	vec4 unusedFillerFormatWorldViewInverseTranspose;
	mat4 matWorldViewProj[eyes];
};

uniform bool ignoreStereo = false; // Must be able to force only one invocation for drawing bulb light texture

uniform vec4 clip_planes[eyes];

////VERTEX

////GEOMETRY
#extension GL_ARB_viewport_array : enable

layout(triangles) in;
layout(triangle_strip, max_vertices = 3) out;

// Use geometry invocations for stereo rendering
#if (eyes == 1)
   layout(invocations = 1) in;
#else
   layout(invocations = 2) in;
#endif

////FRAGMENT
// Early-Z-test implementation:
// Don't enable early_fragment_tests in basicshader, only enable conservative_depth
// Otherwise shader will cull unintended things like mini-playfield under regular playfield
//#extension GL_ARB_shader_image_load_store : enable
#extension GL_ARB_conservative_depth : enable
//layout(early_fragment_tests) in;
layout(depth_unchanged) out float gl_FragDepth;

uniform sampler2D tex_base_color; // base texture
uniform sampler2D tex_env; // envmap
uniform sampler2D tex_diffuse_env; // envmap radiance
uniform sampler2D tex_base_transmission; // bulb light buffer
uniform sampler2D tex_reflection; // reflections
uniform sampler2D tex_refraction; // refractions
uniform sampler2D tex_base_normalmap; // normal map

uniform bool objectSpaceNormalMap;

uniform bool is_metal;
uniform bool doNormalMapping;
uniform bool doReflections;
uniform bool doRefractions;
uniform float refractionThickness;

#include "Helpers.fxh"
#include "Material.fxh"

uniform float4 cClearcoat_EdgeAlpha;
uniform float4 cGlossy_ImageLerp;
//!! No value is under 0.02
//!! Non-metals value are un-intuitively low: 0.02-0.08
//!! Gemstones are 0.05-0.17
//!! Metals have high specular reflectance: 0.5-1.0

uniform float4 staticColor_Alpha;
uniform float alphaTestValue;

uniform float4 w_h_height;

uniform float mirrorFactor;
uniform float3 mirrorNormal;

out vec4 color;

mat3 TBN_trafo(const float3 N, const float3 V, const float2 uv)
{
   // derivatives: edge vectors for tri-pos and tri-uv
   const float3 dpx = dFdx(V);
   const float3 dpy = dFdy(V);
   const float2 duvx = dFdx(uv);
   const float2 duvy = dFdy(uv);

   // solve linear system
   const float3 dp2perp = cross(N, dpy);
   const float3 dp1perp = cross(dpx, N);
   const float3 T = dp2perp * duvx.x + dp1perp * duvy.x;
   const float3 B = dp2perp * duvx.y + dp1perp * duvy.y;

   // construct scale-invariant transformation
   return mat3(T, B, N * sqrt( max(dot(T,T), dot(B,B)) )); // inverse scale, as will be normalized anyhow later-on (to save some mul's)
}

float3 normal_map(const float3 N, const float3 V, const float2 uv)
{
   float3 tn = texture(tex_base_normalmap, uv).xyz * (255./127.) - (128./127.); // Note that Blender apparently does export tangent space normalmaps for Z (Blue) at full range, so 0..255 -> 0..1, which misses an option for here!

   if (objectSpaceNormalMap)
   {
      tn.z = -tn.z; // this matches the object space, +X +Y +Z, export/baking in Blender with our trafo setup
      return normalize((inverse(matView) * vec4(tn,0.0)).xyz);
   } else // tangent space
      return normalize((tn * TBN_trafo(N, V, uv)).xyz);  // !! The order of tn, and TBN_trainfo matters here?  Ship on FishTales gets blown out if you reverse them 
}

float4x4 inverse4x4(const float4x4 m)
{
   float n11 = m[0][0], n12 = m[1][0], n13 = m[2][0], n14 = m[3][0];
   float n21 = m[0][1], n22 = m[1][1], n23 = m[2][1], n24 = m[3][1];
   float n31 = m[0][2], n32 = m[1][2], n33 = m[2][2], n34 = m[3][2];
   float n41 = m[0][3], n42 = m[1][3], n43 = m[2][3], n44 = m[3][3];

   float t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44;
   float t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44;
   float t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44;
   float t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;

   float det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;
   float idet = 1.0 / det;

   float4x4 ret;

   ret[0][0] = t11 * idet;
   ret[0][1] = (n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44) * idet;
   ret[0][2] = (n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44) * idet;
   ret[0][3] = (n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43) * idet;

   ret[1][0] = t12 * idet;
   ret[1][1] = (n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44) * idet;
   ret[1][2] = (n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44) * idet;
   ret[1][3] = (n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43) * idet;

   ret[2][0] = t13 * idet;
   ret[2][1] = (n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44) * idet;
   ret[2][2] = (n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44) * idet;
   ret[2][3] = (n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43) * idet;

   ret[3][0] = t14 * idet;
   ret[3][1] = (n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34) * idet;
   ret[3][2] = (n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34) * idet;
   ret[3][3] = (n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33) * idet;

   return ret;
}

// Compute reflections from reflection probe (screen space coordinates)
// This is a simplified reflection model where reflected light is added instead of being mixed according to the fresnel coefficient (stronger reflection hiding the object's color at grazing angles)
float3 compute_reflection(const float2 screenSpace, const float3 N)
{
   // Only apply to faces pointing in the direction of the probe (normal = [0,0,-1])
   // the smoothstep values are *magic* values taken from visual tests
   // dot(mirrorNormal, N) does not really needs to be done per pixel and could be moved to the vertx shader
   // Offset by half a texel to use GPU filtering for some blur
   return smoothstep(0.5, 0.9, dot(mirrorNormal, N)) * mirrorFactor * tex2D(tex_reflection, screenSpace + 0.5 * w_h_height.xy).rgb;
}

// Compute refractions from screen space probe
float3 compute_refraction(const float3 pos, const float3 N, const float3 V)
{
   // Compute refracted visible position
   const float3 R = refract(V, N, 1.0 / 1.5); // n1 = 1.0 (air), n2 = 1.5 (plastic), eta = n1 / n2
   const float3 refracted_pos = pos + refractionThickness * R; // Shift ray by the thickness of the material

   // Project from world view position to probe UV
   const float4x4 matProj = mul(inverse4x4(matWorldView), matWorldViewProj[0]); // FIXME this must be moved to the matrix uniform stack
   const float4 proj = mul(float4(refracted_pos.x, refracted_pos.y, refracted_pos.z, 1.0), matProj);
   const float2 uv = float2(0.5, 0.5) + proj.xy * (0.5 / proj.w); //!! DX9 has float2(proj.x, -proj.y)

   /* // Debug output
   if (length(N) < 0.5) // invalid normal, shown as red for debugging
      return float3(1.0, 0.0, 0.0);
   if (dot(N, V) < 0.0) // Wrong orientation? (looking from the back, shown as blue for debugging)
      return float3(0.0, 0.0, 1.0);
   if (length(R) < 0.5) // invalid refraction state (no refraction, shown as green for debugging)
      return float3(0.0, 1.0, 0.0);*/

   return tex2D(tex_refraction, uv).rgb;
}

//------------------------------------
//
// Standard Materials
//

////vs_main

in vec3 vPosition;
in vec3 vNormal;
in vec2 tc;

out vec2 tex01_gs;
out vec3 worldPos_gs;
out vec3 normal_gs;

void main()
{
   gl_Position = vec4(vPosition, 1.0);
   tex01_gs = tc;
   // trafo all into worldview space (as most of the weird trafos happen in view, world is identity so far)
   worldPos_gs = (matWorldView*vec4(vPosition, 1.0)).xyz;
   normal_gs = normalize((matWorldViewInverseTranspose*vNormal).xyz);
}

////vs_notex_main

in vec3 vPosition;
in vec3 vNormal;
in vec2 tc;

out vec3 worldPos_gs;
out vec3 normal_gs;

void main()
{
   gl_Position = float4(vPosition, 1.0);
   worldPos_gs = (matWorldView*float4(vPosition, 1.0)).xyz;
   normal_gs = normalize((matWorldViewInverseTranspose*vNormal).xyz);
}

////vs_depth_only_main_without_texture

in vec3 vPosition;

void main()
{ 
   gl_Position = float4(vPosition, 1.0);
}

////vs_depth_only_main_with_texture

in vec3 vPosition;
in vec2 tc;

out vec2 tex0_gs;

void main()
{
   gl_Position = float4(vPosition, 1.0);
   tex0_gs = tc;
}

////gs_main

in vec2 tex01_gs[];
out vec2 tex01;

noperspective out vec2 tex03;

in vec3 worldPos_gs[];
out vec3 worldPos;

in vec3 normal_gs[];
out vec3 normal;

void main()
{
   gl_ViewportIndex = gl_InvocationID;
   for (int i=0;i<gl_in.length();i++) {
      //Default
      gl_Position = (matWorldViewProj[gl_InvocationID]*gl_in[i].gl_Position);
      gl_ClipDistance[0] = dot(gl_Position, clip_planes[gl_InvocationID]); // For Render Dynamic Mirror when enabling clipping.
      //Custom
      tex01 = tex01_gs[i];
      vec2 screen_space = 0.5 * (gl_Position.xy / gl_Position.w) + vec2(0.5);
#if (eyes == 1)
      tex03.xy = screen_space; // Sampling from a normal screen space texture
#else
#if stereo_vert
      tex03.xy = vec2(screen_space.x, 0.5 * (screen_space.y + gl_InvocationID)); // Sampling from a vertical stereo screen space texture
#else
      tex03.xy = vec2(0.5 * (screen_space.x + gl_InvocationID), screen_space.y); // Sampling from a horizontal stereo screen space texture
#endif
#endif
      worldPos = worldPos_gs[i];
      normal = normal_gs[i];
      //Default
      EmitVertex();
   }
   EndPrimitive();
}

////gs_notex_main

noperspective out vec2 tex03;

in vec3 worldPos_gs[];
out vec3 worldPos;

in vec3 normal_gs[];
out vec3 normal;

void main()
{
   gl_ViewportIndex = gl_InvocationID;
   for (int i=0;i<gl_in.length();i++) {
      //Default
      gl_Position = (matWorldViewProj[gl_InvocationID]*gl_in[i].gl_Position);
      gl_ClipDistance[0] = dot(matWorldViewProj[gl_InvocationID]*gl_in[i].gl_Position, clip_planes[i]); // For Render Dynamic Mirror when enabling clipping.
      //Custom
      vec2 screen_space = 0.5 * (gl_Position.xy / gl_Position.w) + vec2(0.5);
#if (eyes == 1)
      tex03.xy = screen_space; // Sampling from a normal screen space texture
#else
#if stereo_vert
      tex03.xy = vec2(screen_space.x, 0.5 * (screen_space.y + gl_InvocationID)); // Sampling from a vertical stereo screen space texture
#else
      tex03.xy = vec2(0.5 * (screen_space.x + gl_InvocationID), screen_space.y); // Sampling from a horizontal stereo screen space texture
#endif
#endif
      worldPos = worldPos_gs[i];
      normal = normal_gs[i];
      //Default
      EmitVertex();
   }
   EndPrimitive();
}

////gs_kicker_main

noperspective out vec2 tex03;

in vec3 worldPos_gs[];
out vec3 worldPos;

in vec3 normal_gs[];
out vec3 normal;

void main()
{
   gl_ViewportIndex = gl_InvocationID;
   for (int i=0;i<gl_in.length();i++) {
      //Default
      float4 P2 = gl_in[i].gl_Position;
      P2.z -= 30.0*1.0; // 1.0 = fKickerScale
      gl_Position.xyw = (matWorldViewProj[gl_InvocationID]*gl_in[i].gl_Position).xyw;
      gl_Position.z = (matWorldViewProj[gl_InvocationID]*P2).z;
      //Custom
      vec2 screen_space = 0.5 * (gl_Position.xy / gl_Position.w) + vec2(0.5);
#if (eyes == 1)
      tex03.xy = screen_space; // Sampling from a normal screen space texture
#else
#if stereo_vert
      tex03.xy = vec2(screen_space.x, 0.5 * (screen_space.y + gl_InvocationID)); // Sampling from a vertical stereo screen space texture
#else
      tex03.xy = vec2(0.5 * (screen_space.x + gl_InvocationID), screen_space.y); // Sampling from a horizontal stereo screen space texture
#endif
#endif
      worldPos = worldPos_gs[i];
      normal = normal_gs[i];
      //Default
      EmitVertex();
   }
   EndPrimitive();
}

////gs_depth_only_main_without_texture

void main()
{
   gl_ViewportIndex = gl_InvocationID;
   for (int i=0;i<gl_in.length();i++) {
      //Default
      gl_Position = (matWorldViewProj[gl_InvocationID]*gl_in[i].gl_Position);;
      //Custom
      //Default
      EmitVertex();
   }
   EndPrimitive();
}

////gs_depth_only_main_with_texture

in vec2 tex0_gs[];
out vec2 tex0;

void main()
{
   gl_ViewportIndex = gl_InvocationID;
   for (int i=0;i<gl_in.length();i++) {
      //Default
      gl_Position = (matWorldViewProj[gl_InvocationID]*gl_in[i].gl_Position);
      //Custom
      tex0 = tex0_gs[i];
      //Default
      EmitVertex();
   }
   EndPrimitive();
}

////ps_main_notex

noperspective in vec2 tex03;
in vec3 worldPos;
in vec3 normal;

void main() {
   const float3 diffuse  = cBase_Alpha.xyz;
   const float3 glossy   = is_metal ? cBase_Alpha.xyz : cGlossy_ImageLerp.xyz*0.08;
   const float3 specular = cClearcoat_EdgeAlpha.xyz*0.08;
   const float edge      = is_metal ? 1.0 : Roughness_WrapL_Edge_Thickness.z;

   const float3 V = normalize(-worldPos);
   const float3 N = normalize(normal);

   //color = float4((N+1.0)*0.5,1.0); return; // visualize normals

   color = float4(
      lightLoop(worldPos, N, V, diffuse, glossy, specular, edge, true, is_metal), //!! have a "real" view vector instead that mustn't assume that viewer is directly in front of monitor? (e.g. cab setup) -> viewer is always relative to playfield and/or user definable
      cBase_Alpha.a);

   if (cBase_Alpha.a < 1.0) {
      color.a = GeometricOpacity(dot(N,V), color.a, cClearcoat_EdgeAlpha.w, Roughness_WrapL_Edge_Thickness.w);

      if (fDisableLighting_top_below.y < 1.0)
          // add light from "below" from user-flagged bulb lights, pre-rendered/blurred in previous renderpass //!! sqrt = magic
          color.xyz += mix(sqrt(diffuse)*texture(tex_base_transmission, tex03.xy, 0).xyz*color.a, float3(0.), fDisableLighting_top_below.y); //!! depend on normal of light (unknown though) vs geom normal, too?
   }

   if (doReflections)
      color.rgb += compute_reflection(tex03.xy, N);

   if (doRefractions)
   {
      // alpha channel is the transparency of the object, tinting will be supported (even if alpha is 0)
      color.rgb = lerp(compute_refraction(worldPos.xyz, N, V), color.rgb, cBase_Alpha.a);
      color.a = 1.0;
   }

   color *= staticColor_Alpha;
}

////ps_main_texture

in vec2 tex01;
noperspective in vec2 tex03;
in vec3 worldPos;
in vec3 normal;

void main() {
   float4 pixel = texture(tex_base_color, tex01);

   if (pixel.a <= alphaTestValue)
      discard;           //stop the pixel shader if alpha test should reject pixel

   if (fDisableLighting_top_below.x < 1.0) // if there is lighting applied, make sure to clamp the values (as it could be coming from a HDR tex)
      pixel.xyz = clamp(pixel.xyz, float3(0.0,0.0,0.0), float3(1.0,1.0,1.0));

   const float3 t = pixel.xyz;

   const float3 diffuse  = t*cBase_Alpha.xyz;
   const float3 glossy   = is_metal ? diffuse : (t*cGlossy_ImageLerp.w + (1.0-cGlossy_ImageLerp.w))*cGlossy_ImageLerp.xyz*0.08; //!! use AO for glossy? specular?
   const float3 specular = cClearcoat_EdgeAlpha.xyz*0.08;
   const float edge      = is_metal ? 1.0 : Roughness_WrapL_Edge_Thickness.z;

   const float3 V = normalize(-worldPos);
   float3 N = normalize(normal);

   if (doNormalMapping)
      N = normal_map(N, normalize(worldPos), tex01);

   //color = float4((N+1.0)*0.5,1.0); return; // visualize normals

   color.rgb = lightLoop(worldPos, N, V, diffuse, glossy, specular, edge, !doNormalMapping, is_metal);
   color.a = clamp(pixel.a * cBase_Alpha.a, 0.0, 1.0);

   if (cBase_Alpha.a < 1.0 && color.a < 1.0) {
      color.a = GeometricOpacity(dot(N,V), color.a, cClearcoat_EdgeAlpha.w, Roughness_WrapL_Edge_Thickness.w);

      if (fDisableLighting_top_below.y < 1.0)
      {
         // add light from "below" from user-flagged bulb lights, pre-rendered/blurred in previous renderpass //!! sqrt = magic
         color.xyz += mix(sqrt(diffuse)*texture(tex_base_transmission, tex03.xy).xyz*color.a, float3(0.), fDisableLighting_top_below.y); //!! depend on normal of light (unknown though) vs geom normal, too?
      }
   }

   if (doReflections)
      color.rgb += compute_reflection(tex03.xy, N);

   if (doRefractions)
   {
      // alpha channel is the transparency of the object, tinting will be supported (even if alpha is 0) but not from main texture since these are different informations (reflected/refracted color)
      color.rgb = lerp(diffuse * compute_refraction(worldPos, N, V), color.rgb, color.a);
      color.a = 1.0;
   }

   color *= staticColor_Alpha;
}


////ps_main_reflection_only_without_texture

in vec2 tex01;
noperspective in vec2 tex03;
in vec3 worldPos;
in vec3 normal;

void main() {
   float3 N = normalize(normal);
   color.rgb = compute_reflection(tex03.xy, N);
   color.a = 1.0;
   color *= staticColor_Alpha;
}


////ps_main_reflection_only_with_texture

in vec2 tex01;
noperspective in vec2 tex03;
in vec3 worldPos;
in vec3 normal;

void main() {
   float4 result;

   result.a = tex2D(tex_base_color, tex01).a;

   if (result.a <= alphaTestValue)
      discard;           //stop the pixel shader if alpha test should reject pixel

   result.a *= cBase_Alpha.a;

   float3 N = normalize(normal);
   result.rgb = compute_reflection(tex03.xy, N);

   if (cBase_Alpha.a < 1.0 && result.a < 1.0)
   {
      const float3 V = normalize(/*camera=0,0,0,1*/ -worldPos);
      result.a = GeometricOpacity(dot(N, V), result.a, cClearcoat_EdgeAlpha.w, Roughness_WrapL_Edge_Thickness.w);
   }

   color = result * staticColor_Alpha;
}


////ps_main_depth_only_without_texture

void main() {
    color =  float4(0.,0.,0.,1.);
}

////ps_main_depth_only_with_texture

in vec2 tex0;

void main() {
   if (textureLod(tex_base_color, tex0, 0).a <= alphaTestValue)
      discard;           //stop the pixel shader if alpha test should reject pixel

   color = float4(0., 0., 0., 1.);
}

////ps_main_bg_decal

// BG-Decal

void main() {
   color = float4(InvToneMap(cBase_Alpha.xyz), clamp(cBase_Alpha.a, 0.0, 1.0));
}

////ps_main_bg_decal_texture

in vec2 tex01;

void main() {
   float4 pixel = texture(tex_base_color, tex01);

   //if (pixel.a <= alphaTestValue) discard;

   pixel.a = clamp(pixel.a * cBase_Alpha.a, 0.0, 1.0);

   color = float4(InvToneMap(pixel.xyz*cBase_Alpha.xyz), pixel.a);
}


//------------------------------------------
// Kicker boolean vertex shader

////vs_kicker

in vec3 vPosition;
in vec3 vNormal;
in vec2 tc;

out vec3 worldPos_gs;
out vec3 normal_gs;
out vec2 tex03_gs;

void main() {
   float4 vPosition4 = float4(vPosition,1.0);
   gl_Position = vPosition4;
   float4 bulbPos = (matWorldViewProj[0]*float4(vPosition, 1.0));
   tex03_gs = vec2(bulbPos.xy/bulbPos.w);
   worldPos_gs = (matWorldView * vPosition4).xyz;
   normal_gs = normalize((matWorldViewInverseTranspose*vNormal).xyz);
}

//------------------------------------
// Techniques
//

//
// Standard Materials
//
////TECHNIQUES

basic_without_texture:P0:vs_notex_main():gs_notex_main():ps_main_notex()
basic_with_texture:P0:vs_main():gs_main():ps_main_texture()
basic_refl_only_without_texture:P0:vs_notex_main():gs_notex_main():ps_main_reflection_only_without_texture()
basic_refl_only_with_texture:P0:vs_main():gs_main():ps_main_reflection_only_with_texture()

basic_depth_only_without_texture:P0:vs_depth_only_main_without_texture():gs_depth_only_main_without_texture():ps_main_depth_only_without_texture()
basic_depth_only_with_texture:P0:vs_depth_only_main_with_texture():gs_depth_only_main_with_texture():ps_main_depth_only_with_texture()

//
// BG-Decal
//

bg_decal_without_texture:P0:vs_notex_main():gs_notex_main():ps_main_bg_decal()
bg_decal_with_texture:P0:vs_main():gs_main():ps_main_bg_decal_texture()

//
// Kicker
//

kickerBoolean:P0:vs_kicker():gs_kicker_main():ps_main_notex()

#include "ClassicLightShader.glfx"
