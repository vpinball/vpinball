// MipMap Shaders

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Build of compute shader from cs_mipmap.sc to cs_mipmap_srgba8 with options: FMT_srgba8
static const uint8_t cs_mipmap_srgba8_mtl[6600] =
{
	0x43, 0x53, 0x48, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x0d, 0x75, // CSH............u
	0x5f, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x01, 0x01, 0xff, 0xff, // _Destination....
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x75, 0x5f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x01, // .......u_Source.
	0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x75, 0x5f, 0x53, 0x6f, 0x75, 0x72, // ..........u_Sour
	0x63, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x08, 0x00, // ce..............
	0x01, 0x00, 0x6e, 0x19, 0x00, 0x00, 0x23, 0x70, 0x72, 0x61, 0x67, 0x6d, 0x61, 0x20, 0x63, 0x6c, // ..n...#pragma cl
	0x61, 0x6e, 0x67, 0x20, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x20, 0x69, // ang diagnostic i
	0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x20, 0x22, 0x2d, 0x57, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, // gnored "-Wmissin
	0x67, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x22, 0x0a, 0x23, 0x70, // g-prototypes".#p
	0x72, 0x61, 0x67, 0x6d, 0x61, 0x20, 0x63, 0x6c, 0x61, 0x6e, 0x67, 0x20, 0x64, 0x69, 0x61, 0x67, // ragma clang diag
	0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x20, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x20, 0x22, // nostic ignored "
	0x2d, 0x57, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2d, 0x62, 0x72, 0x61, 0x63, 0x65, 0x73, // -Wmissing-braces
	0x22, 0x0a, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x6d, 0x65, 0x74, // "..#include <met
	0x61, 0x6c, 0x5f, 0x73, 0x74, 0x64, 0x6c, 0x69, 0x62, 0x3e, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, // al_stdlib>.#incl
	0x75, 0x64, 0x65, 0x20, 0x3c, 0x73, 0x69, 0x6d, 0x64, 0x2f, 0x73, 0x69, 0x6d, 0x64, 0x2e, 0x68, // ude <simd/simd.h
	0x3e, 0x0a, 0x0a, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, // >..using namespa
	0x63, 0x65, 0x20, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x3b, 0x0a, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, // ce metal;..templ
	0x61, 0x74, 0x65, 0x3c, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x54, 0x2c, 0x20, // ate<typename T, 
	0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x20, 0x4e, 0x75, 0x6d, 0x3e, 0x0a, 0x73, 0x74, 0x72, 0x75, // size_t Num>.stru
	0x63, 0x74, 0x20, 0x73, 0x70, 0x76, 0x55, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x41, 0x72, 0x72, 0x61, // ct spvUnsafeArra
	0x79, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x54, 0x20, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, // y.{.    T elemen
	0x74, 0x73, 0x5b, 0x4e, 0x75, 0x6d, 0x20, 0x3f, 0x20, 0x4e, 0x75, 0x6d, 0x20, 0x3a, 0x20, 0x31, // ts[Num ? Num : 1
	0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x74, 0x68, 0x72, 0x65, // ];.    .    thre
	0x61, 0x64, 0x20, 0x54, 0x26, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x5b, // ad T& operator [
	0x5d, 0x20, 0x28, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x20, 0x70, 0x6f, 0x73, 0x29, 0x20, 0x74, // ] (size_t pos) t
	0x68, 0x72, 0x65, 0x61, 0x64, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, // hread.    {.    
	0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x65, 0x6c, 0x65, 0x6d, 0x65, //     return eleme
	0x6e, 0x74, 0x73, 0x5b, 0x70, 0x6f, 0x73, 0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, // nts[pos];.    }.
	0x20, 0x20, 0x20, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x78, 0x70, 0x72, 0x20, 0x63, 0x6f, //     constexpr co
	0x6e, 0x73, 0x74, 0x20, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x20, 0x54, 0x26, 0x20, 0x6f, 0x70, // nst thread T& op
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x5b, 0x5d, 0x20, 0x28, 0x73, 0x69, 0x7a, 0x65, 0x5f, // erator [] (size_
	0x74, 0x20, 0x70, 0x6f, 0x73, 0x29, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x74, 0x68, 0x72, // t pos) const thr
	0x65, 0x61, 0x64, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ead.    {.      
	0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, //   return element
	0x73, 0x5b, 0x70, 0x6f, 0x73, 0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, // s[pos];.    }.  
	0x20, 0x20, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x54, 0x26, //   .    device T&
	0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x5b, 0x5d, 0x20, 0x28, 0x73, 0x69, //  operator [] (si
	0x7a, 0x65, 0x5f, 0x74, 0x20, 0x70, 0x6f, 0x73, 0x29, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, // ze_t pos) device
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x72, // .    {.        r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5b, 0x70, // eturn elements[p
	0x6f, 0x73, 0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x63, // os];.    }.    c
	0x6f, 0x6e, 0x73, 0x74, 0x65, 0x78, 0x70, 0x72, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x64, // onstexpr const d
	0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x54, 0x26, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, // evice T& operato
	0x72, 0x20, 0x5b, 0x5d, 0x20, 0x28, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x20, 0x70, 0x6f, 0x73, // r [] (size_t pos
	0x29, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x0a, 0x20, // ) const device. 
	0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, //    {.        ret
	0x75, 0x72, 0x6e, 0x20, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5b, 0x70, 0x6f, 0x73, // urn elements[pos
	0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x0a, 0x20, 0x20, // ];.    }.    .  
	0x20, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x78, 0x70, 0x72, 0x20, 0x63, 0x6f, 0x6e, 0x73, //   constexpr cons
	0x74, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x20, 0x54, 0x26, 0x20, 0x6f, 0x70, // t constant T& op
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x5b, 0x5d, 0x20, 0x28, 0x73, 0x69, 0x7a, 0x65, 0x5f, // erator [] (size_
	0x74, 0x20, 0x70, 0x6f, 0x73, 0x29, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x63, 0x6f, 0x6e, // t pos) const con
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, // stant.    {.    
	0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x65, 0x6c, 0x65, 0x6d, 0x65, //     return eleme
	0x6e, 0x74, 0x73, 0x5b, 0x70, 0x6f, 0x73, 0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, // nts[pos];.    }.
	0x20, 0x20, 0x20, 0x20, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x67, //     .    threadg
	0x72, 0x6f, 0x75, 0x70, 0x20, 0x54, 0x26, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, // roup T& operator
	0x20, 0x5b, 0x5d, 0x20, 0x28, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x20, 0x70, 0x6f, 0x73, 0x29, //  [] (size_t pos)
	0x20, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x0a, 0x20, 0x20, 0x20, //  threadgroup.   
	0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, //  {.        retur
	0x6e, 0x20, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5b, 0x70, 0x6f, 0x73, 0x5d, 0x3b, // n elements[pos];
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, // .    }.    const
	0x65, 0x78, 0x70, 0x72, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x74, 0x68, 0x72, 0x65, 0x61, // expr const threa
	0x64, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x20, 0x54, 0x26, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, // dgroup T& operat
	0x6f, 0x72, 0x20, 0x5b, 0x5d, 0x20, 0x28, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x20, 0x70, 0x6f, // or [] (size_t po
	0x73, 0x29, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x67, // s) const threadg
	0x72, 0x6f, 0x75, 0x70, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // roup.    {.     
	0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, //    return elemen
	0x74, 0x73, 0x5b, 0x70, 0x6f, 0x73, 0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x7d, // ts[pos];.    }.}
	0x3b, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x20, 0x73, 0x70, 0x76, 0x55, // ;..constant spvU
	0x6e, 0x73, 0x61, 0x66, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, // nsafeArray<float
	0x2c, 0x20, 0x34, 0x3e, 0x20, 0x5f, 0x32, 0x39, 0x34, 0x20, 0x3d, 0x20, 0x73, 0x70, 0x76, 0x55, // , 4> _294 = spvU
	0x6e, 0x73, 0x61, 0x66, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, // nsafeArray<float
	0x2c, 0x20, 0x34, 0x3e, 0x28, 0x7b, 0x20, 0x39, 0x2e, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x37, // , 4>({ 9.8999997
	0x31, 0x33, 0x35, 0x32, 0x35, 0x31, 0x37, 0x36, 0x30, 0x34, 0x38, 0x32, 0x37, 0x38, 0x38, 0x30, // 1352517604827880
	0x38, 0x35, 0x39, 0x33, 0x37, 0x35, 0x65, 0x2d, 0x30, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, // 859375e-05, 0.00
	0x34, 0x38, 0x37, 0x39, 0x39, 0x39, 0x39, 0x39, 0x30, 0x35, 0x38, 0x32, 0x34, 0x36, 0x36, 0x31, // 4879999905824661
	0x32, 0x35, 0x34, 0x38, 0x38, 0x32, 0x38, 0x31, 0x32, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, // 2548828125, 0.00
	0x34, 0x38, 0x37, 0x39, 0x39, 0x39, 0x39, 0x39, 0x30, 0x35, 0x38, 0x32, 0x34, 0x36, 0x36, 0x31, // 4879999905824661
	0x32, 0x35, 0x34, 0x38, 0x38, 0x32, 0x38, 0x31, 0x32, 0x35, 0x2c, 0x20, 0x39, 0x2e, 0x38, 0x39, // 2548828125, 9.89
	0x39, 0x39, 0x39, 0x39, 0x37, 0x31, 0x33, 0x35, 0x32, 0x35, 0x31, 0x37, 0x36, 0x30, 0x34, 0x38, // 9999713525176048
	0x32, 0x37, 0x38, 0x38, 0x30, 0x38, 0x35, 0x39, 0x33, 0x37, 0x35, 0x65, 0x2d, 0x30, 0x35, 0x20, // 27880859375e-05 
	0x7d, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x20, 0x73, 0x70, 0x76, // });.constant spv
	0x55, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x3c, 0x66, 0x6c, 0x6f, 0x61, // UnsafeArray<floa
	0x74, 0x2c, 0x20, 0x34, 0x3e, 0x20, 0x5f, 0x32, 0x39, 0x36, 0x20, 0x3d, 0x20, 0x73, 0x70, 0x76, // t, 4> _296 = spv
	0x55, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x3c, 0x66, 0x6c, 0x6f, 0x61, // UnsafeArray<floa
	0x74, 0x2c, 0x20, 0x34, 0x3e, 0x28, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x34, 0x38, 0x37, 0x39, // t, 4>({ 0.004879
	0x39, 0x39, 0x39, 0x39, 0x30, 0x35, 0x38, 0x32, 0x34, 0x36, 0x36, 0x31, 0x32, 0x35, 0x34, 0x38, // 9999058246612548
	0x38, 0x32, 0x38, 0x31, 0x32, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x32, 0x34, 0x30, 0x31, 0x34, 0x31, // 828125, 0.240141
	0x30, 0x30, 0x34, 0x33, 0x32, 0x33, 0x39, 0x35, 0x39, 0x33, 0x35, 0x30, 0x35, 0x38, 0x35, 0x39, // 0043239593505859
	0x33, 0x37, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x32, 0x34, 0x30, 0x31, 0x34, 0x31, 0x30, 0x30, 0x34, // 375, 0.240141004
	0x33, 0x32, 0x33, 0x39, 0x35, 0x39, 0x33, 0x35, 0x30, 0x35, 0x38, 0x35, 0x39, 0x33, 0x37, 0x35, // 3239593505859375
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x34, 0x38, 0x37, 0x39, 0x39, 0x39, 0x39, 0x39, 0x30, 0x35, // , 0.004879999905
	0x38, 0x32, 0x34, 0x36, 0x36, 0x31, 0x32, 0x35, 0x34, 0x38, 0x38, 0x32, 0x38, 0x31, 0x32, 0x35, // 8246612548828125
	0x20, 0x7d, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x20, 0x73, 0x70, //  });.constant sp
	0x76, 0x55, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x3c, 0x73, 0x70, 0x76, // vUnsafeArray<spv
	0x55, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x3c, 0x66, 0x6c, 0x6f, 0x61, // UnsafeArray<floa
	0x74, 0x2c, 0x20, 0x34, 0x3e, 0x2c, 0x20, 0x34, 0x3e, 0x20, 0x5f, 0x32, 0x39, 0x37, 0x20, 0x3d, // t, 4>, 4> _297 =
	0x20, 0x73, 0x70, 0x76, 0x55, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x3c, //  spvUnsafeArray<
	0x73, 0x70, 0x76, 0x55, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x3c, 0x66, // spvUnsafeArray<f
	0x6c, 0x6f, 0x61, 0x74, 0x2c, 0x20, 0x34, 0x3e, 0x2c, 0x20, 0x34, 0x3e, 0x28, 0x7b, 0x20, 0x73, // loat, 4>, 4>({ s
	0x70, 0x76, 0x55, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x3c, 0x66, 0x6c, // pvUnsafeArray<fl
	0x6f, 0x61, 0x74, 0x2c, 0x20, 0x34, 0x3e, 0x28, 0x7b, 0x20, 0x39, 0x2e, 0x38, 0x39, 0x39, 0x39, // oat, 4>({ 9.8999
	0x39, 0x39, 0x37, 0x31, 0x33, 0x35, 0x32, 0x35, 0x31, 0x37, 0x36, 0x30, 0x34, 0x38, 0x32, 0x37, // 9971352517604827
	0x38, 0x38, 0x30, 0x38, 0x35, 0x39, 0x33, 0x37, 0x35, 0x65, 0x2d, 0x30, 0x35, 0x2c, 0x20, 0x30, // 880859375e-05, 0
	0x2e, 0x30, 0x30, 0x34, 0x38, 0x37, 0x39, 0x39, 0x39, 0x39, 0x39, 0x30, 0x35, 0x38, 0x32, 0x34, // .004879999905824
	0x36, 0x36, 0x31, 0x32, 0x35, 0x34, 0x38, 0x38, 0x32, 0x38, 0x31, 0x32, 0x35, 0x2c, 0x20, 0x30, // 6612548828125, 0
	0x2e, 0x30, 0x30, 0x34, 0x38, 0x37, 0x39, 0x39, 0x39, 0x39, 0x39, 0x30, 0x35, 0x38, 0x32, 0x34, // .004879999905824
	0x36, 0x36, 0x31, 0x32, 0x35, 0x34, 0x38, 0x38, 0x32, 0x38, 0x31, 0x32, 0x35, 0x2c, 0x20, 0x39, // 6612548828125, 9
	0x2e, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x37, 0x31, 0x33, 0x35, 0x32, 0x35, 0x31, 0x37, 0x36, // .899999713525176
	0x30, 0x34, 0x38, 0x32, 0x37, 0x38, 0x38, 0x30, 0x38, 0x35, 0x39, 0x33, 0x37, 0x35, 0x65, 0x2d, // 04827880859375e-
	0x30, 0x35, 0x20, 0x7d, 0x29, 0x2c, 0x20, 0x73, 0x70, 0x76, 0x55, 0x6e, 0x73, 0x61, 0x66, 0x65, // 05 }), spvUnsafe
	0x41, 0x72, 0x72, 0x61, 0x79, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x2c, 0x20, 0x34, 0x3e, 0x28, // Array<float, 4>(
	0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x34, 0x38, 0x37, 0x39, 0x39, 0x39, 0x39, 0x39, 0x30, 0x35, // { 0.004879999905
	0x38, 0x32, 0x34, 0x36, 0x36, 0x31, 0x32, 0x35, 0x34, 0x38, 0x38, 0x32, 0x38, 0x31, 0x32, 0x35, // 8246612548828125
	0x2c, 0x20, 0x30, 0x2e, 0x32, 0x34, 0x30, 0x31, 0x34, 0x31, 0x30, 0x30, 0x34, 0x33, 0x32, 0x33, // , 0.240141004323
	0x39, 0x35, 0x39, 0x33, 0x35, 0x30, 0x35, 0x38, 0x35, 0x39, 0x33, 0x37, 0x35, 0x2c, 0x20, 0x30, // 9593505859375, 0
	0x2e, 0x32, 0x34, 0x30, 0x31, 0x34, 0x31, 0x30, 0x30, 0x34, 0x33, 0x32, 0x33, 0x39, 0x35, 0x39, // .240141004323959
	0x33, 0x35, 0x30, 0x35, 0x38, 0x35, 0x39, 0x33, 0x37, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, // 3505859375, 0.00
	0x34, 0x38, 0x37, 0x39, 0x39, 0x39, 0x39, 0x39, 0x30, 0x35, 0x38, 0x32, 0x34, 0x36, 0x36, 0x31, // 4879999905824661
	0x32, 0x35, 0x34, 0x38, 0x38, 0x32, 0x38, 0x31, 0x32, 0x35, 0x20, 0x7d, 0x29, 0x2c, 0x20, 0x73, // 2548828125 }), s
	0x70, 0x76, 0x55, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x3c, 0x66, 0x6c, // pvUnsafeArray<fl
	0x6f, 0x61, 0x74, 0x2c, 0x20, 0x34, 0x3e, 0x28, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x34, 0x38, // oat, 4>({ 0.0048
	0x37, 0x39, 0x39, 0x39, 0x39, 0x39, 0x30, 0x35, 0x38, 0x32, 0x34, 0x36, 0x36, 0x31, 0x32, 0x35, // 7999990582466125
	0x34, 0x38, 0x38, 0x32, 0x38, 0x31, 0x32, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x32, 0x34, 0x30, 0x31, // 48828125, 0.2401
	0x34, 0x31, 0x30, 0x30, 0x34, 0x33, 0x32, 0x33, 0x39, 0x35, 0x39, 0x33, 0x35, 0x30, 0x35, 0x38, // 4100432395935058
	0x35, 0x39, 0x33, 0x37, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x32, 0x34, 0x30, 0x31, 0x34, 0x31, 0x30, // 59375, 0.2401410
	0x30, 0x34, 0x33, 0x32, 0x33, 0x39, 0x35, 0x39, 0x33, 0x35, 0x30, 0x35, 0x38, 0x35, 0x39, 0x33, // 0432395935058593
	0x37, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x34, 0x38, 0x37, 0x39, 0x39, 0x39, 0x39, 0x39, // 75, 0.0048799999
	0x30, 0x35, 0x38, 0x32, 0x34, 0x36, 0x36, 0x31, 0x32, 0x35, 0x34, 0x38, 0x38, 0x32, 0x38, 0x31, // 0582466125488281
	0x32, 0x35, 0x20, 0x7d, 0x29, 0x2c, 0x20, 0x73, 0x70, 0x76, 0x55, 0x6e, 0x73, 0x61, 0x66, 0x65, // 25 }), spvUnsafe
	0x41, 0x72, 0x72, 0x61, 0x79, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x2c, 0x20, 0x34, 0x3e, 0x28, // Array<float, 4>(
	0x7b, 0x20, 0x39, 0x2e, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x37, 0x31, 0x33, 0x35, 0x32, 0x35, // { 9.899999713525
	0x31, 0x37, 0x36, 0x30, 0x34, 0x38, 0x32, 0x37, 0x38, 0x38, 0x30, 0x38, 0x35, 0x39, 0x33, 0x37, // 1760482788085937
	0x35, 0x65, 0x2d, 0x30, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x34, 0x38, 0x37, 0x39, 0x39, // 5e-05, 0.0048799
	0x39, 0x39, 0x39, 0x30, 0x35, 0x38, 0x32, 0x34, 0x36, 0x36, 0x31, 0x32, 0x35, 0x34, 0x38, 0x38, // 9990582466125488
	0x32, 0x38, 0x31, 0x32, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x34, 0x38, 0x37, 0x39, 0x39, // 28125, 0.0048799
	0x39, 0x39, 0x39, 0x30, 0x35, 0x38, 0x32, 0x34, 0x36, 0x36, 0x31, 0x32, 0x35, 0x34, 0x38, 0x38, // 9990582466125488
	0x32, 0x38, 0x31, 0x32, 0x35, 0x2c, 0x20, 0x39, 0x2e, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x37, // 28125, 9.8999997
	0x31, 0x33, 0x35, 0x32, 0x35, 0x31, 0x37, 0x36, 0x30, 0x34, 0x38, 0x32, 0x37, 0x38, 0x38, 0x30, // 1352517604827880
	0x38, 0x35, 0x39, 0x33, 0x37, 0x35, 0x65, 0x2d, 0x30, 0x35, 0x20, 0x7d, 0x29, 0x20, 0x7d, 0x29, // 859375e-05 }) })
	0x3b, 0x0a, 0x0a, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x20, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x78, // ;..kernel void x
	0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, // latMtlMain(textu
	0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3e, 0x20, 0x75, 0x5f, 0x53, 0x6f, // re2d<float> u_So
	0x75, 0x72, 0x63, 0x65, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x30, // urce [[texture(0
	0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, // )]], texture2d<f
	0x6c, 0x6f, 0x61, 0x74, 0x2c, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x3a, 0x3a, 0x77, 0x72, // loat, access::wr
	0x69, 0x74, 0x65, 0x3e, 0x20, 0x75, 0x5f, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, // ite> u_Destinati
	0x6f, 0x6e, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x31, 0x29, 0x5d, // on [[texture(1)]
	0x5d, 0x2c, 0x20, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x20, 0x67, 0x6c, 0x5f, 0x47, 0x6c, 0x6f, 0x62, // ], uint3 gl_Glob
	0x61, 0x6c, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x20, 0x5b, // alInvocationID [
	0x5b, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, // [thread_position
	0x5f, 0x69, 0x6e, 0x5f, 0x67, 0x72, 0x69, 0x64, 0x5d, 0x5d, 0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, // _in_grid]]).{.  
	0x20, 0x20, 0x64, 0x6f, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, //   do.    {.     
	0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x61, 0x6e, 0x79, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, //    if (any(float
	0x32, 0x28, 0x69, 0x6e, 0x74, 0x33, 0x28, 0x67, 0x6c, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, // 2(int3(gl_Global
	0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x29, 0x2e, 0x78, 0x79, // InvocationID).xy
	0x29, 0x20, 0x3e, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x69, 0x6e, 0x74, 0x32, // ) >= float2(int2
	0x28, 0x75, 0x69, 0x6e, 0x74, 0x32, 0x28, 0x75, 0x5f, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, // (uint2(u_Destina
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x28, 0x29, // tion.get_width()
	0x2c, 0x20, 0x75, 0x5f, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, // , u_Destination.
	0x67, 0x65, 0x74, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x28, 0x29, 0x29, 0x29, 0x29, 0x29, // get_height()))))
	0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, // ).        {.    
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, //         break;. 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //        }.       
	0x20, 0x69, 0x6e, 0x74, 0x32, 0x20, 0x5f, 0x35, 0x35, 0x36, 0x20, 0x3d, 0x20, 0x28, 0x69, 0x6e, //  int2 _556 = (in
	0x74, 0x33, 0x28, 0x67, 0x6c, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x6f, // t3(gl_GlobalInvo
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x29, 0x2e, 0x78, 0x79, 0x20, 0x2a, 0x20, 0x69, // cationID).xy * i
	0x6e, 0x74, 0x32, 0x28, 0x32, 0x29, 0x29, 0x20, 0x2d, 0x20, 0x69, 0x6e, 0x74, 0x32, 0x28, 0x31, // nt2(2)) - int2(1
	0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // );.        float
	0x34, 0x20, 0x5f, 0x37, 0x39, 0x33, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 4 _793;.        
	0x5f, 0x37, 0x39, 0x33, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x30, 0x2e, // _793 = float4(0.
	0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, // 0);.        floa
	0x74, 0x34, 0x20, 0x5f, 0x38, 0x30, 0x35, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // t4 _805;.       
	0x20, 0x66, 0x6f, 0x72, 0x20, 0x28, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x37, 0x39, 0x32, 0x20, 0x3d, //  for (int _792 =
	0x20, 0x30, 0x3b, 0x20, 0x5f, 0x37, 0x39, 0x32, 0x20, 0x3c, 0x20, 0x34, 0x3b, 0x20, 0x5f, 0x37, //  0; _792 < 4; _7
	0x39, 0x33, 0x20, 0x3d, 0x20, 0x5f, 0x38, 0x30, 0x35, 0x2c, 0x20, 0x5f, 0x37, 0x39, 0x32, 0x2b, // 93 = _805, _792+
	0x2b, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, // +).        {.   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x38, 0x30, 0x35, 0x20, 0x3d, 0x20, //          _805 = 
	0x5f, 0x37, 0x39, 0x33, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // _793;.          
	0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x35, 0x38, 0x31, 0x3b, 0x0a, 0x20, //   float4 _581;. 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x28, //            for (
	0x69, 0x6e, 0x74, 0x20, 0x5f, 0x37, 0x39, 0x37, 0x20, 0x3d, 0x20, 0x30, 0x3b, 0x20, 0x5f, 0x37, // int _797 = 0; _7
	0x39, 0x37, 0x20, 0x3c, 0x20, 0x34, 0x3b, 0x20, 0x5f, 0x38, 0x30, 0x35, 0x20, 0x3d, 0x20, 0x5f, // 97 < 4; _805 = _
	0x35, 0x38, 0x31, 0x2c, 0x20, 0x5f, 0x37, 0x39, 0x37, 0x2b, 0x2b, 0x29, 0x0a, 0x20, 0x20, 0x20, // 581, _797++).   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, //          {.     
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, //            float
	0x34, 0x20, 0x5f, 0x36, 0x32, 0x36, 0x20, 0x3d, 0x20, 0x75, 0x5f, 0x53, 0x6f, 0x75, 0x72, 0x63, // 4 _626 = u_Sourc
	0x65, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x32, 0x28, 0x28, 0x5f, 0x35, // e.read(uint2((_5
	0x35, 0x36, 0x20, 0x2b, 0x20, 0x69, 0x6e, 0x74, 0x32, 0x28, 0x5f, 0x37, 0x39, 0x37, 0x2c, 0x20, // 56 + int2(_797, 
	0x5f, 0x37, 0x39, 0x32, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, // _792))), 0);.   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, //              flo
	0x61, 0x74, 0x20, 0x5f, 0x36, 0x33, 0x33, 0x20, 0x3d, 0x20, 0x5f, 0x36, 0x32, 0x36, 0x2e, 0x78, // at _633 = _626.x
	0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ;.              
	0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x37, 0x39, 0x39, 0x3b, 0x0a, 0x20, 0x20, //   float _799;.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x64, 0x6f, //               do
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // .               
	0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //  {.             
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, 0x36, 0x33, 0x33, 0x20, //        if (_633 
	0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, 0x34, 0x34, 0x39, 0x39, 0x39, 0x39, 0x32, 0x37, // <= 0.04044999927
	0x32, 0x38, 0x32, 0x33, 0x33, 0x33, 0x33, 0x37, 0x34, 0x30, 0x32, 0x33, 0x34, 0x33, 0x37, 0x35, // 2823333740234375
	0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ).              
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //       {.        
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x5f, 0x37, 0x39, 0x39, 0x20, 0x3d, 0x20, 0x5f, 0x36, 0x33, 0x33, 0x20, 0x2a, 0x20, 0x30, 0x2e, // _799 = _633 * 0.
	0x30, 0x37, 0x37, 0x33, 0x39, 0x39, 0x33, 0x38, 0x30, 0x35, 0x30, 0x35, 0x30, 0x38, 0x34, 0x39, // 0773993805050849
	0x39, 0x31, 0x34, 0x35, 0x35, 0x30, 0x37, 0x38, 0x31, 0x32, 0x35, 0x3b, 0x0a, 0x20, 0x20, 0x20, // 91455078125;.   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, //      break;.    
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // }.              
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, //       else.     
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, //                {
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // .               
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x37, 0x39, 0x39, 0x20, 0x3d, 0x20, //          _799 = 
	0x70, 0x6f, 0x77, 0x72, 0x28, 0x28, 0x5f, 0x36, 0x33, 0x33, 0x20, 0x2a, 0x20, 0x30, 0x2e, 0x39, // powr((_633 * 0.9
	0x34, 0x37, 0x38, 0x36, 0x37, 0x32, 0x37, 0x34, 0x32, 0x38, 0x34, 0x33, 0x36, 0x32, 0x37, 0x39, // 4786727428436279
	0x32, 0x39, 0x36, 0x38, 0x37, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x32, 0x31, // 296875) + 0.0521
	0x33, 0x32, 0x36, 0x39, 0x39, 0x36, 0x33, 0x38, 0x36, 0x30, 0x35, 0x31, 0x31, 0x37, 0x37, 0x39, // 3269963860511779
	0x37, 0x38, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x30, 0x30, 0x30, // 78515625, 2.4000
	0x30, 0x30, 0x30, 0x39, 0x35, 0x33, 0x36, 0x37, 0x34, 0x33, 0x31, 0x36, 0x34, 0x30, 0x36, 0x32, // 0009536743164062
	0x35, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 5);.            
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, //             brea
	0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // k;.             
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //        }.       
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, //              bre
	0x61, 0x6b, 0x3b, 0x20, 0x2f, 0x2f, 0x20, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, // ak; // unreachab
	0x6c, 0x65, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x61, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x0a, 0x20, 0x20, // le workaround.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x20, //               } 
	0x77, 0x68, 0x69, 0x6c, 0x65, 0x28, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x20, 0x20, // while(false);.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, //               fl
	0x6f, 0x61, 0x74, 0x20, 0x5f, 0x36, 0x33, 0x36, 0x20, 0x3d, 0x20, 0x5f, 0x36, 0x32, 0x36, 0x2e, // oat _636 = _626.
	0x79, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // y;.             
	0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x38, 0x30, 0x30, 0x3b, 0x0a, 0x20, //    float _800;. 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x64, //                d
	0x6f, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // o.              
	0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //   {.            
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, 0x36, 0x33, 0x36, //         if (_636
	0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, 0x34, 0x34, 0x39, 0x39, 0x39, 0x39, 0x32, //  <= 0.0404499992
	0x37, 0x32, 0x38, 0x32, 0x33, 0x33, 0x33, 0x33, 0x37, 0x34, 0x30, 0x32, 0x33, 0x34, 0x33, 0x37, // 7282333374023437
	0x35, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 5).             
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //        {.       
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x20, 0x5f, 0x38, 0x30, 0x30, 0x20, 0x3d, 0x20, 0x5f, 0x36, 0x33, 0x36, 0x20, 0x2a, 0x20, 0x30, //  _800 = _636 * 0
	0x2e, 0x30, 0x37, 0x37, 0x33, 0x39, 0x39, 0x33, 0x38, 0x30, 0x35, 0x30, 0x35, 0x30, 0x38, 0x34, // .077399380505084
	0x39, 0x39, 0x31, 0x34, 0x35, 0x35, 0x30, 0x37, 0x38, 0x31, 0x32, 0x35, 0x3b, 0x0a, 0x20, 0x20, // 991455078125;.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, //       break;.   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //  }.             
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, //        else.    
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // {.              
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x38, 0x30, 0x30, 0x20, 0x3d, //           _800 =
	0x20, 0x70, 0x6f, 0x77, 0x72, 0x28, 0x28, 0x5f, 0x36, 0x33, 0x36, 0x20, 0x2a, 0x20, 0x30, 0x2e, //  powr((_636 * 0.
	0x39, 0x34, 0x37, 0x38, 0x36, 0x37, 0x32, 0x37, 0x34, 0x32, 0x38, 0x34, 0x33, 0x36, 0x32, 0x37, // 9478672742843627
	0x39, 0x32, 0x39, 0x36, 0x38, 0x37, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x32, // 9296875) + 0.052
	0x31, 0x33, 0x32, 0x36, 0x39, 0x39, 0x36, 0x33, 0x38, 0x36, 0x30, 0x35, 0x31, 0x31, 0x37, 0x37, // 1326996386051177
	0x39, 0x37, 0x38, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x30, 0x30, // 978515625, 2.400
	0x30, 0x30, 0x30, 0x30, 0x39, 0x35, 0x33, 0x36, 0x37, 0x34, 0x33, 0x31, 0x36, 0x34, 0x30, 0x36, // 0000953674316406
	0x32, 0x35, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 25);.           
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, //              bre
	0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ak;.            
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //         }.      
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, //               br
	0x65, 0x61, 0x6b, 0x3b, 0x20, 0x2f, 0x2f, 0x20, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, // eak; // unreacha
	0x62, 0x6c, 0x65, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x61, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x0a, 0x20, // ble workaround. 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, //                }
	0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x28, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x20, //  while(false);. 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, //                f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x36, 0x33, 0x39, 0x20, 0x3d, 0x20, 0x5f, 0x36, 0x32, 0x36, // loat _639 = _626
	0x2e, 0x7a, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // .z;.            
	0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x38, 0x30, 0x31, 0x3b, 0x0a, //     float _801;.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x64, 0x6f, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // do.             
	0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //    {.           
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, 0x36, 0x33, //          if (_63
	0x39, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, 0x34, 0x34, 0x39, 0x39, 0x39, 0x39, // 9 <= 0.040449999
	0x32, 0x37, 0x32, 0x38, 0x32, 0x33, 0x33, 0x33, 0x33, 0x37, 0x34, 0x30, 0x32, 0x33, 0x34, 0x33, // 2728233337402343
	0x37, 0x35, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 75).            
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //         {.      
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x20, 0x20, 0x5f, 0x38, 0x30, 0x31, 0x20, 0x3d, 0x20, 0x5f, 0x36, 0x33, 0x39, 0x20, 0x2a, 0x20, //   _801 = _639 * 
	0x30, 0x2e, 0x30, 0x37, 0x37, 0x33, 0x39, 0x39, 0x33, 0x38, 0x30, 0x35, 0x30, 0x35, 0x30, 0x38, // 0.07739938050508
	0x34, 0x39, 0x39, 0x31, 0x34, 0x35, 0x35, 0x30, 0x37, 0x38, 0x31, 0x32, 0x35, 0x3b, 0x0a, 0x20, // 4991455078125;. 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, //        break;.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //   }.            
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, //         else.   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //  {.             
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x38, 0x30, 0x31, 0x20, //            _801 
	0x3d, 0x20, 0x70, 0x6f, 0x77, 0x72, 0x28, 0x28, 0x5f, 0x36, 0x33, 0x39, 0x20, 0x2a, 0x20, 0x30, // = powr((_639 * 0
	0x2e, 0x39, 0x34, 0x37, 0x38, 0x36, 0x37, 0x32, 0x37, 0x34, 0x32, 0x38, 0x34, 0x33, 0x36, 0x32, // .947867274284362
	0x37, 0x39, 0x32, 0x39, 0x36, 0x38, 0x37, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x35, // 79296875) + 0.05
	0x32, 0x31, 0x33, 0x32, 0x36, 0x39, 0x39, 0x36, 0x33, 0x38, 0x36, 0x30, 0x35, 0x31, 0x31, 0x37, // 2132699638605117
	0x37, 0x39, 0x37, 0x38, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x30, // 7978515625, 2.40
	0x30, 0x30, 0x30, 0x30, 0x30, 0x39, 0x35, 0x33, 0x36, 0x37, 0x34, 0x33, 0x31, 0x36, 0x34, 0x30, // 0000095367431640
	0x36, 0x32, 0x35, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 625);.          
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, //               br
	0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // eak;.           
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, //          }.     
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, //                b
	0x72, 0x65, 0x61, 0x6b, 0x3b, 0x20, 0x2f, 0x2f, 0x20, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, // reak; // unreach
	0x61, 0x62, 0x6c, 0x65, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x61, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x0a, // able workaround.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x7d, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x28, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x29, 0x3b, 0x0a, // } while(false);.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x5f, 0x35, 0x38, 0x31, 0x20, 0x3d, 0x20, 0x5f, 0x38, 0x30, 0x35, 0x20, 0x2b, 0x20, 0x28, 0x66, // _581 = _805 + (f
	0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x37, 0x39, 0x39, 0x2c, 0x20, 0x5f, 0x38, 0x30, 0x30, // loat4(_799, _800
	0x2c, 0x20, 0x5f, 0x38, 0x30, 0x31, 0x2c, 0x20, 0x5f, 0x36, 0x32, 0x36, 0x2e, 0x77, 0x29, 0x20, // , _801, _626.w) 
	0x2a, 0x20, 0x5f, 0x32, 0x39, 0x37, 0x5b, 0x5f, 0x37, 0x39, 0x37, 0x5d, 0x5b, 0x5f, 0x37, 0x39, // * _297[_797][_79
	0x32, 0x5d, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 2]);.           
	0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, //  }.        }.   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x37, 0x39, 0x34, 0x3b, //      float _794;
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x64, 0x6f, 0x0a, 0x20, 0x20, 0x20, 0x20, // .        do.    
	0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //     {.          
	0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, 0x37, 0x39, 0x33, 0x2e, 0x78, 0x20, 0x3c, 0x3d, 0x20, //   if (_793.x <= 
	0x30, 0x2e, 0x30, 0x30, 0x33, 0x31, 0x33, 0x30, 0x38, 0x30, 0x30, 0x30, 0x39, 0x30, 0x37, 0x33, // 0.00313080009073
	0x30, 0x31, 0x39, 0x30, 0x32, 0x37, 0x37, 0x30, 0x39, 0x39, 0x36, 0x30, 0x39, 0x33, 0x37, 0x35, // 0190277099609375
	0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, // ).            {.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x5f, 0x37, 0x39, 0x34, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x30, 0x30, 0x30, 0x30, // _794 = 12.920000
	0x30, 0x37, 0x36, 0x32, 0x39, 0x33, 0x39, 0x34, 0x35, 0x33, 0x31, 0x32, 0x35, 0x20, 0x2a, 0x20, // 0762939453125 * 
	0x5f, 0x37, 0x39, 0x33, 0x2e, 0x78, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // _793.x;.        
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, //         break;. 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, //            }.   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, //          else.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, //           {.    
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x37, 0x39, 0x34, //             _794
	0x20, 0x3d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x35, 0x34, 0x39, 0x39, 0x39, 0x39, 0x34, 0x37, 0x35, //  = (1.0549999475
	0x34, 0x37, 0x39, 0x31, 0x32, 0x35, 0x39, 0x37, 0x36, 0x35, 0x36, 0x32, 0x35, 0x20, 0x2a, 0x20, // 4791259765625 * 
	0x70, 0x6f, 0x77, 0x72, 0x28, 0x5f, 0x37, 0x39, 0x33, 0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x34, // powr(_793.x, 0.4
	0x31, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x37, 0x33, 0x32, 0x35, 0x35, 0x39, 0x32, 0x30, // 1666665673255920
	0x34, 0x31, 0x30, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, // 41015625)) - 0.0
	0x35, 0x34, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x37, 0x30, 0x31, 0x39, 0x37, 0x36, 0x37, 0x37, // 5499999970197677
	0x36, 0x31, 0x32, 0x33, 0x30, 0x34, 0x36, 0x38, 0x37, 0x35, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, // 6123046875;.    
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, //             brea
	0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, // k;.            }
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, // .            bre
	0x61, 0x6b, 0x3b, 0x20, 0x2f, 0x2f, 0x20, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, // ak; // unreachab
	0x6c, 0x65, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x61, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x0a, 0x20, 0x20, // le workaround.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x28, 0x66, 0x61, //       } while(fa
	0x6c, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, // lse);.        fl
	0x6f, 0x61, 0x74, 0x20, 0x5f, 0x37, 0x39, 0x35, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // oat _795;.      
	0x20, 0x20, 0x64, 0x6f, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, //   do.        {. 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, //            if (_
	0x37, 0x39, 0x33, 0x2e, 0x79, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x33, 0x31, 0x33, // 793.y <= 0.00313
	0x30, 0x38, 0x30, 0x30, 0x30, 0x39, 0x30, 0x37, 0x33, 0x30, 0x31, 0x39, 0x30, 0x32, 0x37, 0x37, // 0800090730190277
	0x30, 0x39, 0x39, 0x36, 0x30, 0x39, 0x33, 0x37, 0x35, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // 099609375).     
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //        {.       
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x37, 0x39, 0x35, 0x20, 0x3d, 0x20, //          _795 = 
	0x31, 0x32, 0x2e, 0x39, 0x32, 0x30, 0x30, 0x30, 0x30, 0x30, 0x37, 0x36, 0x32, 0x39, 0x33, 0x39, // 12.9200000762939
	0x34, 0x35, 0x33, 0x31, 0x32, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x37, 0x39, 0x33, 0x2e, 0x79, 0x3b, // 453125 * _793.y;
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // .               
	0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //  break;.        
	0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //     }.          
	0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //   else.         
	0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //    {.           
	0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x37, 0x39, 0x35, 0x20, 0x3d, 0x20, 0x28, 0x31, 0x2e, 0x30, //      _795 = (1.0
	0x35, 0x34, 0x39, 0x39, 0x39, 0x39, 0x34, 0x37, 0x35, 0x34, 0x37, 0x39, 0x31, 0x32, 0x35, 0x39, // 5499994754791259
	0x37, 0x36, 0x35, 0x36, 0x32, 0x35, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x72, 0x28, 0x5f, 0x37, // 765625 * powr(_7
	0x39, 0x33, 0x2e, 0x79, 0x2c, 0x20, 0x30, 0x2e, 0x34, 0x31, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, // 93.y, 0.41666665
	0x36, 0x37, 0x33, 0x32, 0x35, 0x35, 0x39, 0x32, 0x30, 0x34, 0x31, 0x30, 0x31, 0x35, 0x36, 0x32, // 6732559204101562
	0x35, 0x29, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x34, 0x39, 0x39, 0x39, 0x39, 0x39, // 5)) - 0.05499999
	0x39, 0x37, 0x30, 0x31, 0x39, 0x37, 0x36, 0x37, 0x37, 0x36, 0x31, 0x32, 0x33, 0x30, 0x34, 0x36, // 9701976776123046
	0x38, 0x37, 0x35, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 875;.           
	0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, //      break;.    
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //         }.      
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x20, 0x2f, 0x2f, 0x20, //       break; // 
	0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x77, 0x6f, 0x72, 0x6b, // unreachable work
	0x61, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, // around.        }
	0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x28, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x20, //  while(false);. 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x37, 0x39, //        float _79
	0x36, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x64, 0x6f, 0x0a, 0x20, 0x20, // 6;.        do.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //       {.        
	0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, 0x37, 0x39, 0x33, 0x2e, 0x7a, 0x20, 0x3c, //     if (_793.z <
	0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x33, 0x31, 0x33, 0x30, 0x38, 0x30, 0x30, 0x30, 0x39, 0x30, // = 0.003130800090
	0x37, 0x33, 0x30, 0x31, 0x39, 0x30, 0x32, 0x37, 0x37, 0x30, 0x39, 0x39, 0x36, 0x30, 0x39, 0x33, // 7301902770996093
	0x37, 0x35, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 75).            
	0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // {.              
	0x20, 0x20, 0x5f, 0x37, 0x39, 0x36, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x30, 0x30, //   _796 = 12.9200
	0x30, 0x30, 0x30, 0x37, 0x36, 0x32, 0x39, 0x33, 0x39, 0x34, 0x35, 0x33, 0x31, 0x32, 0x35, 0x20, // 000762939453125 
	0x2a, 0x20, 0x5f, 0x37, 0x39, 0x33, 0x2e, 0x7a, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // * _793.z;.      
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, //           break;
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, // .            }. 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, //            else.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, //             {.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x37, //               _7
	0x39, 0x36, 0x20, 0x3d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x35, 0x34, 0x39, 0x39, 0x39, 0x39, 0x34, // 96 = (1.05499994
	0x37, 0x35, 0x34, 0x37, 0x39, 0x31, 0x32, 0x35, 0x39, 0x37, 0x36, 0x35, 0x36, 0x32, 0x35, 0x20, // 754791259765625 
	0x2a, 0x20, 0x70, 0x6f, 0x77, 0x72, 0x28, 0x5f, 0x37, 0x39, 0x33, 0x2e, 0x7a, 0x2c, 0x20, 0x30, // * powr(_793.z, 0
	0x2e, 0x34, 0x31, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x37, 0x33, 0x32, 0x35, 0x35, 0x39, // .416666656732559
	0x32, 0x30, 0x34, 0x31, 0x30, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x29, 0x20, 0x2d, 0x20, 0x30, // 2041015625)) - 0
	0x2e, 0x30, 0x35, 0x34, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x37, 0x30, 0x31, 0x39, 0x37, 0x36, // .054999999701976
	0x37, 0x37, 0x36, 0x31, 0x32, 0x33, 0x30, 0x34, 0x36, 0x38, 0x37, 0x35, 0x3b, 0x0a, 0x20, 0x20, // 776123046875;.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, //               br
	0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // eak;.           
	0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, //  }.            b
	0x72, 0x65, 0x61, 0x6b, 0x3b, 0x20, 0x2f, 0x2f, 0x20, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, // reak; // unreach
	0x61, 0x62, 0x6c, 0x65, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x61, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x0a, // able workaround.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x28, //         } while(
	0x66, 0x61, 0x6c, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // false);.        
	0x75, 0x5f, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x77, 0x72, // u_Destination.wr
	0x69, 0x74, 0x65, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x37, 0x39, 0x34, 0x2c, // ite(float4(_794,
	0x20, 0x5f, 0x37, 0x39, 0x35, 0x2c, 0x20, 0x5f, 0x37, 0x39, 0x36, 0x2c, 0x20, 0x5f, 0x37, 0x39, //  _795, _796, _79
	0x33, 0x2e, 0x77, 0x29, 0x2c, 0x20, 0x75, 0x69, 0x6e, 0x74, 0x32, 0x28, 0x69, 0x6e, 0x74, 0x33, // 3.w), uint2(int3
	0x28, 0x67, 0x6c, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, // (gl_GlobalInvoca
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x29, 0x2e, 0x78, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, // tionID).xy));.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, //       break;.   
	0x20, 0x7d, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x28, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x29, 0x3b, //  } while(false);
	0x0a, 0x7d, 0x0a, 0x0a, 0x00, 0x00, 0x20, 0x00,                                                 // .}.... .
};
static const uint8_t cs_mipmap_srgba8_essl[4511] =
{
	0x43, 0x53, 0x48, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8c, 0x11, // CSH.............
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x33, 0x31, 0x30, 0x20, 0x65, // ..#version 310 e
	0x73, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, // s.vec3 instMul(v
	0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, // ec3 _vec, mat3 _
	0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, // mtx) { return ( 
	0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, // (_vec) * (_mtx) 
	0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, // ); }.vec3 instMu
	0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, // l(mat3 _mtx, vec
	0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // 3 _vec) { return
	0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, //  ( (_mtx) * (_ve
	0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, // c) ); }.vec4 ins
	0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, // tMul(vec4 _vec, 
	0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // mat4 _mtx) { ret
	0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, // urn ( (_vec) * (
	0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, // _mtx) ); }.vec4 
	0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, // instMul(mat4 _mt
	0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, // x, vec4 _vec) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, // return ( (_mtx) 
	0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, 0x6c, // * (_vec) ); }.fl
	0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, 0x70, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x61, // oat rcp(float _a
	0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x5f, // ) { return 1.0/_
	0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, // a; }.vec2 rcp(ve
	0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // c2 _a) { return 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, // vec2(1.0)/_a; }.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x61, // vec3 rcp(vec3 _a
	0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, // ) { return vec3(
	0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, // 1.0)/_a; }.vec4 
	0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, // rcp(vec4 _a) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, // eturn vec4(1.0)/
	0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x65, 0x63, 0x32, 0x5f, // _a; }.vec2 vec2_
	0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, // splat(float _x) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, // { return vec2(_x
	0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, // , _x); }.vec3 ve
	0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, // c3_splat(float _
	0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, // x) { return vec3
	0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, // (_x, _x, _x); }.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, // vec4 vec4_splat(
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // float _x) { retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, // rn vec4(_x, _x, 
	0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x32, // _x, _x); }.uvec2
	0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, //  uvec2_splat(uin
	0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, // t _x) { return u
	0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, // vec2(_x, _x); }.
	0x75, 0x76, 0x65, 0x63, 0x33, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, // uvec3 uvec3_spla
	0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // t(uint _x) { ret
	0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, // urn uvec3(_x, _x
	0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, // , _x); }.uvec4 u
	0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, // vec4_splat(uint 
	0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, // _x) { return uve
	0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, // c4(_x, _x, _x, _
	0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, // x); }.mat4 mtxFr
	0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, // omRows(vec4 _0, 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, // vec4 _1, vec4 _2
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // , vec4 _3).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, // urn transpose(ma
	0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, // t4(_0, _1, _2, _
	0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, // 3) );.}.mat4 mtx
	0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, // FromCols(vec4 _0
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // , vec4 _1, vec4 
	0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, // _2, vec4 _3).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, // eturn mat4(_0, _
	0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, // 1, _2, _3);.}.ma
	0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, // t3 mtxFromRows(v
	0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, // ec3 _0, vec3 _1,
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, //  vec3 _2).{.retu
	0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, // rn transpose(mat
	0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x20, 0x29, 0x3b, // 3(_0, _1, _2) );
	0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, // .}.mat3 mtxFromC
	0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, // ols(vec3 _0, vec
	0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, // 3 _1, vec3 _2).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, // .return mat3(_0,
	0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, //  _1, _2);.}.unif
	0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x52, // orm vec4 u_viewR
	0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, // ect;.uniform vec
	0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x54, 0x65, 0x78, 0x65, 0x6c, 0x3b, 0x0a, 0x75, // 4 u_viewTexel;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, // niform mat4 u_vi
	0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, // ew;.uniform mat4
	0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, //  u_invView;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x3b, // orm mat4 u_proj;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, // .uniform mat4 u_
	0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // invProj;.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, //  mat4 u_viewProj
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, // ;.uniform mat4 u
	0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, // _invViewProj;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, // iform mat4 u_mod
	0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // el[32];.uniform 
	0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, // mat4 u_modelView
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, // ;.uniform mat4 u
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, // _modelViewProj;.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x61, // uniform vec4 u_a
	0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x66, 0x34, 0x3b, 0x0a, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, // lphaRef4;.layout
	0x28, 0x72, 0x67, 0x62, 0x61, 0x38, 0x2c, 0x20, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x3d, // (rgba8, binding=
	0x30, 0x29, 0x20, 0x72, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x75, 0x6e, 0x69, 0x66, // 0) readonly unif
	0x6f, 0x72, 0x6d, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x32, // orm highp image2
	0x44, 0x20, 0x75, 0x5f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x3b, 0x0a, 0x6c, 0x61, 0x79, 0x6f, // D u_Source;.layo
	0x75, 0x74, 0x28, 0x72, 0x67, 0x62, 0x61, 0x38, 0x2c, 0x20, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, // ut(rgba8, bindin
	0x67, 0x3d, 0x31, 0x29, 0x20, 0x77, 0x72, 0x69, 0x74, 0x65, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x75, // g=1) writeonly u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x69, 0x6d, 0x61, // niform highp ima
	0x67, 0x65, 0x32, 0x44, 0x20, 0x75, 0x5f, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, // ge2D u_Destinati
	0x6f, 0x6e, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x72, 0x67, 0x62, 0x54, 0x6f, // on;.float srgbTo
	0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x20, // Linear(float f) 
	0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, // {.if (f <= 0.040
	0x34, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x66, 0x20, 0x2a, 0x20, 0x28, // 45).return f * (
	0x31, 0x2e, 0x30, 0x2f, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, // 1.0/12.92);.else
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x20, 0x2a, 0x20, // .return pow(f * 
	0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, // (1.0/1.055) + (0
	0x2e, 0x30, 0x35, 0x35, 0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, 0x34, // .055/1.055), 2.4
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x73, 0x72, 0x67, 0x62, 0x54, 0x6f, // );.}.vec4 srgbTo
	0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x29, 0x20, 0x7b, // Linear(vec4 c) {
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x73, 0x72, 0x67, // .return vec4(srg
	0x62, 0x54, 0x6f, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x28, 0x63, 0x2e, 0x72, 0x29, 0x2c, 0x20, // bToLinear(c.r), 
	0x73, 0x72, 0x67, 0x62, 0x54, 0x6f, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x28, 0x63, 0x2e, 0x67, // srgbToLinear(c.g
	0x29, 0x2c, 0x20, 0x73, 0x72, 0x67, 0x62, 0x54, 0x6f, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x28, // ), srgbToLinear(
	0x63, 0x2e, 0x62, 0x29, 0x2c, 0x20, 0x63, 0x2e, 0x61, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, // c.b), c.a);.}.fl
	0x6f, 0x61, 0x74, 0x20, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x54, 0x6f, 0x53, 0x72, 0x67, 0x62, // oat linearToSrgb
	0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x20, 0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, // (float f) {.if (
	0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x33, 0x31, 0x33, 0x30, 0x38, 0x29, 0x0a, // f <= 0.0031308).
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x20, 0x2a, 0x20, 0x66, // return 12.92 * f
	0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, // ;.else.return 1.
	0x30, 0x35, 0x35, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x31, 0x2e, 0x30, // 055 * pow(f, 1.0
	0x2f, 0x32, 0x2e, 0x34, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x3b, 0x0a, 0x7d, // /2.4) - 0.055;.}
	0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x54, 0x6f, 0x53, 0x72, // .vec4 linearToSr
	0x67, 0x62, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x29, 0x20, 0x7b, 0x0a, 0x72, 0x65, 0x74, // gb(vec4 c) {.ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x54, // urn vec4(linearT
	0x6f, 0x53, 0x72, 0x67, 0x62, 0x28, 0x63, 0x2e, 0x72, 0x29, 0x2c, 0x20, 0x6c, 0x69, 0x6e, 0x65, // oSrgb(c.r), line
	0x61, 0x72, 0x54, 0x6f, 0x53, 0x72, 0x67, 0x62, 0x28, 0x63, 0x2e, 0x67, 0x29, 0x2c, 0x20, 0x6c, // arToSrgb(c.g), l
	0x69, 0x6e, 0x65, 0x61, 0x72, 0x54, 0x6f, 0x53, 0x72, 0x67, 0x62, 0x28, 0x63, 0x2e, 0x62, 0x29, // inearToSrgb(c.b)
	0x2c, 0x20, 0x63, 0x2e, 0x61, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // , c.a);.}.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x67, 0x5f, 0x6b, 0x61, 0x69, 0x73, 0x65, 0x72, 0x4b, 0x65, // float g_kaiserKe
	0x72, 0x6e, 0x65, 0x6c, 0x34, 0x5b, 0x34, 0x5d, 0x5b, 0x34, 0x5d, 0x20, 0x3d, 0x20, 0x7b, 0x0a, // rnel4[4][4] = {.
	0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x39, 0x39, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, // { 0.000099, 0.00
	0x34, 0x38, 0x38, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x34, 0x38, 0x38, 0x30, 0x2c, 0x20, // 4880, 0.004880, 
	0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x39, 0x39, 0x20, 0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, // 0.000099 },.{ 0.
	0x30, 0x30, 0x34, 0x38, 0x38, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x32, 0x34, 0x30, 0x31, 0x34, 0x31, // 004880, 0.240141
	0x2c, 0x20, 0x30, 0x2e, 0x32, 0x34, 0x30, 0x31, 0x34, 0x31, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, // , 0.240141, 0.00
	0x34, 0x38, 0x38, 0x30, 0x20, 0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x34, 0x38, // 4880 },.{ 0.0048
	0x38, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x32, 0x34, 0x30, 0x31, 0x34, 0x31, 0x2c, 0x20, 0x30, 0x2e, // 80, 0.240141, 0.
	0x32, 0x34, 0x30, 0x31, 0x34, 0x31, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x34, 0x38, 0x38, 0x30, // 240141, 0.004880
	0x20, 0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x39, 0x39, 0x2c, 0x20, //  },.{ 0.000099, 
	0x30, 0x2e, 0x30, 0x30, 0x34, 0x38, 0x38, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x34, 0x38, // 0.004880, 0.0048
	0x38, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x39, 0x39, 0x20, 0x7d, 0x0a, 0x7d, // 80, 0.000099 }.}
	0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x67, 0x5f, // ;.const float g_
	0x6b, 0x61, 0x69, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x36, 0x5b, 0x36, 0x5d, // kaiserKernel6[6]
	0x5b, 0x36, 0x5d, 0x20, 0x3d, 0x20, 0x7b, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, // [6] = {.{ 0.0000
	0x33, 0x36, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x38, 0x30, 0x38, 0x2c, 0x20, 0x30, 0x2e, // 36, 0.000808, 0.
	0x30, 0x30, 0x32, 0x31, 0x33, 0x33, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x32, 0x31, 0x33, 0x33, // 002133, 0.002133
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x38, 0x30, 0x38, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, // , 0.000808, 0.00
	0x30, 0x30, 0x33, 0x36, 0x20, 0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x38, // 0036 },.{ 0.0008
	0x30, 0x38, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, 0x34, 0x31, 0x30, 0x2c, 0x20, 0x30, 0x2e, // 08, 0.018410, 0.
	0x30, 0x34, 0x38, 0x36, 0x32, 0x34, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x38, 0x36, 0x32, 0x34, // 048624, 0.048624
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, 0x34, 0x31, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, // , 0.018410, 0.00
	0x30, 0x38, 0x30, 0x38, 0x20, 0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x32, 0x31, // 0808 },.{ 0.0021
	0x33, 0x33, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x38, 0x36, 0x32, 0x34, 0x2c, 0x20, 0x30, 0x2e, // 33, 0.048624, 0.
	0x31, 0x32, 0x38, 0x34, 0x32, 0x34, 0x2c, 0x20, 0x30, 0x2e, 0x31, 0x32, 0x38, 0x34, 0x32, 0x34, // 128424, 0.128424
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x38, 0x36, 0x32, 0x34, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, // , 0.048624, 0.00
	0x32, 0x31, 0x33, 0x33, 0x20, 0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x32, 0x31, // 2133 },.{ 0.0021
	0x33, 0x33, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x38, 0x36, 0x32, 0x34, 0x2c, 0x20, 0x30, 0x2e, // 33, 0.048624, 0.
	0x31, 0x32, 0x38, 0x34, 0x32, 0x34, 0x2c, 0x20, 0x30, 0x2e, 0x31, 0x32, 0x38, 0x34, 0x32, 0x34, // 128424, 0.128424
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x38, 0x36, 0x32, 0x34, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, // , 0.048624, 0.00
	0x32, 0x31, 0x33, 0x33, 0x20, 0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x38, // 2133 },.{ 0.0008
	0x30, 0x38, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, 0x34, 0x31, 0x30, 0x2c, 0x20, 0x30, 0x2e, // 08, 0.018410, 0.
	0x30, 0x34, 0x38, 0x36, 0x32, 0x34, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x38, 0x36, 0x32, 0x34, // 048624, 0.048624
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, 0x34, 0x31, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, // , 0.018410, 0.00
	0x30, 0x38, 0x30, 0x38, 0x20, 0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, // 0808 },.{ 0.0000
	0x33, 0x36, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x38, 0x30, 0x38, 0x2c, 0x20, 0x30, 0x2e, // 36, 0.000808, 0.
	0x30, 0x30, 0x32, 0x31, 0x33, 0x33, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x32, 0x31, 0x33, 0x33, // 002133, 0.002133
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x38, 0x30, 0x38, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, // , 0.000808, 0.00
	0x30, 0x30, 0x33, 0x36, 0x20, 0x7d, 0x0a, 0x7d, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // 0036 }.};.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x67, 0x5f, 0x6b, 0x61, 0x69, 0x73, 0x65, 0x72, 0x4b, 0x65, // float g_kaiserKe
	0x72, 0x6e, 0x65, 0x6c, 0x36, 0x73, 0x5b, 0x36, 0x5d, 0x5b, 0x36, 0x5d, 0x20, 0x3d, 0x20, 0x7b, // rnel6s[6][6] = {
	0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x35, 0x37, 0x39, 0x33, 0x38, 0x30, 0x2c, 0x20, 0x30, // .{ 0.00579380, 0
	0x2e, 0x30, 0x31, 0x33, 0x30, 0x32, 0x34, 0x39, 0x31, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x39, // .01302491, 0.019
	0x32, 0x33, 0x39, 0x37, 0x39, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x39, 0x32, 0x33, 0x39, 0x37, // 23979, 0.0192397
	0x39, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x33, 0x30, 0x32, 0x34, 0x39, 0x31, 0x2c, 0x20, 0x30, // 9, 0.01302491, 0
	0x2e, 0x30, 0x30, 0x35, 0x37, 0x39, 0x33, 0x38, 0x30, 0x20, 0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, // .00579380 },.{ 0
	0x2e, 0x30, 0x31, 0x33, 0x30, 0x32, 0x34, 0x39, 0x31, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x32, 0x39, // .01302491, 0.029
	0x32, 0x38, 0x31, 0x30, 0x33, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x33, 0x32, 0x35, 0x32, 0x35, // 28103, 0.0432525
	0x36, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x33, 0x32, 0x35, 0x32, 0x35, 0x36, 0x2c, 0x20, 0x30, // 6, 0.04325256, 0
	0x2e, 0x30, 0x32, 0x39, 0x32, 0x38, 0x31, 0x30, 0x33, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x33, // .02928103, 0.013
	0x30, 0x32, 0x34, 0x39, 0x31, 0x20, 0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x39, // 02491 },.{ 0.019
	0x32, 0x33, 0x39, 0x37, 0x39, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x33, 0x32, 0x35, 0x32, 0x35, // 23979, 0.0432525
	0x36, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x36, 0x33, 0x38, 0x39, 0x30, 0x36, 0x35, 0x2c, 0x20, 0x30, // 6, 0.06389065, 0
	0x2e, 0x30, 0x36, 0x33, 0x38, 0x39, 0x30, 0x36, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x33, // .06389065, 0.043
	0x32, 0x35, 0x32, 0x35, 0x36, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x39, 0x32, 0x33, 0x39, 0x37, // 25256, 0.0192397
	0x39, 0x20, 0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x39, 0x32, 0x33, 0x39, 0x37, // 9 },.{ 0.0192397
	0x39, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x33, 0x32, 0x35, 0x32, 0x35, 0x36, 0x2c, 0x20, 0x30, // 9, 0.04325256, 0
	0x2e, 0x30, 0x36, 0x33, 0x38, 0x39, 0x30, 0x36, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x36, 0x33, // .06389065, 0.063
	0x38, 0x39, 0x30, 0x36, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x33, 0x32, 0x35, 0x32, 0x35, // 89065, 0.0432525
	0x36, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x39, 0x32, 0x33, 0x39, 0x37, 0x39, 0x20, 0x7d, 0x2c, // 6, 0.01923979 },
	0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x33, 0x30, 0x32, 0x34, 0x39, 0x31, 0x2c, 0x20, 0x30, // .{ 0.01302491, 0
	0x2e, 0x30, 0x32, 0x39, 0x32, 0x38, 0x31, 0x30, 0x33, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x33, // .02928103, 0.043
	0x32, 0x35, 0x32, 0x35, 0x36, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x33, 0x32, 0x35, 0x32, 0x35, // 25256, 0.0432525
	0x36, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x32, 0x39, 0x32, 0x38, 0x31, 0x30, 0x33, 0x2c, 0x20, 0x30, // 6, 0.02928103, 0
	0x2e, 0x30, 0x31, 0x33, 0x30, 0x32, 0x34, 0x39, 0x31, 0x20, 0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, // .01302491 },.{ 0
	0x2e, 0x30, 0x30, 0x35, 0x37, 0x39, 0x33, 0x38, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x33, // .00579380, 0.013
	0x30, 0x32, 0x34, 0x39, 0x31, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x39, 0x32, 0x33, 0x39, 0x37, // 02491, 0.0192397
	0x39, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x39, 0x32, 0x33, 0x39, 0x37, 0x39, 0x2c, 0x20, 0x30, // 9, 0.01923979, 0
	0x2e, 0x30, 0x31, 0x33, 0x30, 0x32, 0x34, 0x39, 0x31, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x35, // .01302491, 0.005
	0x37, 0x39, 0x33, 0x38, 0x30, 0x20, 0x7d, 0x0a, 0x7d, 0x3b, 0x0a, 0x6c, 0x61, 0x79, 0x6f, 0x75, // 79380 }.};.layou
	0x74, 0x20, 0x28, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x78, 0x20, // t (local_size_x 
	0x3d, 0x20, 0x38, 0x2c, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, // = 8, local_size_
	0x79, 0x20, 0x3d, 0x20, 0x38, 0x2c, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, // y = 8, local_siz
	0x65, 0x5f, 0x7a, 0x20, 0x3d, 0x20, 0x31, 0x29, 0x20, 0x69, 0x6e, 0x3b, 0x0a, 0x76, 0x6f, 0x69, // e_z = 1) in;.voi
	0x64, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x20, 0x7b, 0x0a, 0x69, 0x76, 0x65, 0x63, 0x32, // d main() {.ivec2
	0x20, 0x64, 0x73, 0x74, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x3d, 0x20, 0x69, 0x76, 0x65, 0x63, //  dstCoord = ivec
	0x32, 0x28, 0x67, 0x6c, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x6f, 0x63, // 2(gl_GlobalInvoc
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x2e, 0x78, 0x79, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, // ationID.xy);.con
	0x73, 0x74, 0x20, 0x69, 0x76, 0x65, 0x63, 0x32, 0x20, 0x64, 0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, // st ivec2 dstSize
	0x20, 0x3d, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x28, 0x75, 0x5f, 0x44, //  = imageSize(u_D
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x20, // estination);.if 
	0x28, 0x61, 0x6e, 0x79, 0x28, 0x67, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x68, 0x61, 0x6e, // (any(greaterThan
	0x45, 0x71, 0x75, 0x61, 0x6c, 0x28, 0x64, 0x73, 0x74, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x2c, 0x20, // Equal(dstCoord, 
	0x64, 0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x29, 0x29, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // dstSize))).retur
	0x6e, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, // n;.vec4 color = 
	0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x3b, // vec4_splat(0.0);
	0x0a, 0x69, 0x66, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x3d, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x29, // .if (1.0 == 0.0)
	0x20, 0x7b, 0x0a, 0x69, 0x76, 0x65, 0x63, 0x32, 0x20, 0x73, 0x72, 0x63, 0x43, 0x6f, 0x6f, 0x72, //  {.ivec2 srcCoor
	0x64, 0x20, 0x3d, 0x20, 0x64, 0x73, 0x74, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x2a, 0x20, 0x32, // d = dstCoord * 2
	0x3b, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x3d, 0x20, 0x73, 0x72, 0x67, 0x62, 0x54, // ;.color += srgbT
	0x6f, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x28, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x61, // oLinear(imageLoa
	0x64, 0x28, 0x75, 0x5f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2c, 0x20, 0x73, 0x72, 0x63, 0x43, // d(u_Source, srcC
	0x6f, 0x6f, 0x72, 0x64, 0x20, 0x29, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, // oord ));.color +
	0x3d, 0x20, 0x73, 0x72, 0x67, 0x62, 0x54, 0x6f, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x28, 0x69, // = srgbToLinear(i
	0x6d, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x28, 0x75, 0x5f, 0x53, 0x6f, 0x75, 0x72, 0x63, // mageLoad(u_Sourc
	0x65, 0x2c, 0x20, 0x73, 0x72, 0x63, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x2b, 0x20, 0x69, 0x76, // e, srcCoord + iv
	0x65, 0x63, 0x32, 0x28, 0x30, 0x2c, 0x20, 0x31, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6c, // ec2(0, 1)));.col
	0x6f, 0x72, 0x20, 0x2b, 0x3d, 0x20, 0x73, 0x72, 0x67, 0x62, 0x54, 0x6f, 0x4c, 0x69, 0x6e, 0x65, // or += srgbToLine
	0x61, 0x72, 0x28, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x28, 0x75, 0x5f, 0x53, // ar(imageLoad(u_S
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2c, 0x20, 0x73, 0x72, 0x63, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, // ource, srcCoord 
	0x2b, 0x20, 0x69, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2c, 0x20, 0x30, 0x29, 0x29, 0x29, 0x3b, // + ivec2(1, 0)));
	0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x3d, 0x20, 0x73, 0x72, 0x67, 0x62, 0x54, 0x6f, // .color += srgbTo
	0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x28, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x61, 0x64, // Linear(imageLoad
	0x28, 0x75, 0x5f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2c, 0x20, 0x73, 0x72, 0x63, 0x43, 0x6f, // (u_Source, srcCo
	0x6f, 0x72, 0x64, 0x20, 0x2b, 0x20, 0x69, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2c, 0x20, 0x31, // ord + ivec2(1, 1
	0x29, 0x29, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2f, 0x3d, 0x20, 0x34, 0x2e, // )));.color /= 4.
	0x30, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x69, 0x66, 0x20, 0x28, 0x31, 0x2e, // 0;.}.else if (1.
	0x30, 0x20, 0x3d, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x7b, 0x0a, 0x69, 0x76, 0x65, 0x63, // 0 == 1.0) {.ivec
	0x32, 0x20, 0x73, 0x72, 0x63, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x3d, 0x20, 0x64, 0x73, 0x74, // 2 srcCoord = dst
	0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x2a, 0x20, 0x32, 0x20, 0x2d, 0x20, 0x69, 0x76, 0x65, 0x63, // Coord * 2 - ivec
	0x32, 0x28, 0x31, 0x2c, 0x20, 0x31, 0x29, 0x3b, 0x0a, 0x66, 0x6f, 0x72, 0x20, 0x28, 0x69, 0x6e, // 2(1, 1);.for (in
	0x74, 0x20, 0x64, 0x79, 0x20, 0x3d, 0x20, 0x30, 0x3b, 0x20, 0x64, 0x79, 0x20, 0x3c, 0x20, 0x34, // t dy = 0; dy < 4
	0x3b, 0x20, 0x2b, 0x2b, 0x64, 0x79, 0x29, 0x0a, 0x66, 0x6f, 0x72, 0x20, 0x28, 0x69, 0x6e, 0x74, // ; ++dy).for (int
	0x20, 0x64, 0x78, 0x20, 0x3d, 0x20, 0x30, 0x3b, 0x20, 0x64, 0x78, 0x20, 0x3c, 0x20, 0x34, 0x3b, //  dx = 0; dx < 4;
	0x20, 0x2b, 0x2b, 0x64, 0x78, 0x29, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x3d, 0x20, //  ++dx).color += 
	0x67, 0x5f, 0x6b, 0x61, 0x69, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x34, 0x5b, // g_kaiserKernel4[
	0x64, 0x78, 0x5d, 0x5b, 0x64, 0x79, 0x5d, 0x20, 0x2a, 0x20, 0x73, 0x72, 0x67, 0x62, 0x54, 0x6f, // dx][dy] * srgbTo
	0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x28, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x61, 0x64, // Linear(imageLoad
	0x28, 0x75, 0x5f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2c, 0x20, 0x73, 0x72, 0x63, 0x43, 0x6f, // (u_Source, srcCo
	0x6f, 0x72, 0x64, 0x20, 0x2b, 0x20, 0x69, 0x76, 0x65, 0x63, 0x32, 0x28, 0x64, 0x78, 0x2c, 0x20, // ord + ivec2(dx, 
	0x64, 0x79, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x69, 0x66, // dy)));.}.else if
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x3d, 0x3d, 0x20, 0x32, 0x2e, 0x30, 0x29, 0x20, 0x7b, 0x0a, //  (1.0 == 2.0) {.
	0x69, 0x76, 0x65, 0x63, 0x32, 0x20, 0x73, 0x72, 0x63, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x3d, // ivec2 srcCoord =
	0x20, 0x64, 0x73, 0x74, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x2a, 0x20, 0x32, 0x20, 0x2d, 0x20, //  dstCoord * 2 - 
	0x69, 0x76, 0x65, 0x63, 0x32, 0x28, 0x32, 0x2c, 0x20, 0x32, 0x29, 0x3b, 0x0a, 0x66, 0x6f, 0x72, // ivec2(2, 2);.for
	0x20, 0x28, 0x69, 0x6e, 0x74, 0x20, 0x64, 0x79, 0x20, 0x3d, 0x20, 0x30, 0x3b, 0x20, 0x64, 0x79, //  (int dy = 0; dy
	0x20, 0x3c, 0x20, 0x36, 0x3b, 0x20, 0x2b, 0x2b, 0x64, 0x79, 0x29, 0x0a, 0x66, 0x6f, 0x72, 0x20, //  < 6; ++dy).for 
	0x28, 0x69, 0x6e, 0x74, 0x20, 0x64, 0x78, 0x20, 0x3d, 0x20, 0x30, 0x3b, 0x20, 0x64, 0x78, 0x20, // (int dx = 0; dx 
	0x3c, 0x20, 0x36, 0x3b, 0x20, 0x2b, 0x2b, 0x64, 0x78, 0x29, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // < 6; ++dx).color
	0x20, 0x2b, 0x3d, 0x20, 0x67, 0x5f, 0x6b, 0x61, 0x69, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x72, 0x6e, //  += g_kaiserKern
	0x65, 0x6c, 0x36, 0x5b, 0x64, 0x78, 0x5d, 0x5b, 0x64, 0x79, 0x5d, 0x20, 0x2a, 0x20, 0x73, 0x72, // el6[dx][dy] * sr
	0x67, 0x62, 0x54, 0x6f, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x28, 0x69, 0x6d, 0x61, 0x67, 0x65, // gbToLinear(image
	0x4c, 0x6f, 0x61, 0x64, 0x28, 0x75, 0x5f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2c, 0x20, 0x73, // Load(u_Source, s
	0x72, 0x63, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x2b, 0x20, 0x69, 0x76, 0x65, 0x63, 0x32, 0x28, // rcCoord + ivec2(
	0x64, 0x78, 0x2c, 0x20, 0x64, 0x79, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, // dx, dy)));.}.els
	0x65, 0x20, 0x69, 0x66, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x3d, 0x3d, 0x20, 0x33, 0x2e, 0x30, // e if (1.0 == 3.0
	0x29, 0x20, 0x7b, 0x0a, 0x69, 0x76, 0x65, 0x63, 0x32, 0x20, 0x73, 0x72, 0x63, 0x43, 0x6f, 0x6f, // ) {.ivec2 srcCoo
	0x72, 0x64, 0x20, 0x3d, 0x20, 0x64, 0x73, 0x74, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x2a, 0x20, // rd = dstCoord * 
	0x32, 0x20, 0x2d, 0x20, 0x69, 0x76, 0x65, 0x63, 0x32, 0x28, 0x32, 0x2c, 0x20, 0x32, 0x29, 0x3b, // 2 - ivec2(2, 2);
	0x0a, 0x66, 0x6f, 0x72, 0x20, 0x28, 0x69, 0x6e, 0x74, 0x20, 0x64, 0x79, 0x20, 0x3d, 0x20, 0x30, // .for (int dy = 0
	0x3b, 0x20, 0x64, 0x79, 0x20, 0x3c, 0x20, 0x36, 0x3b, 0x20, 0x2b, 0x2b, 0x64, 0x79, 0x29, 0x0a, // ; dy < 6; ++dy).
	0x66, 0x6f, 0x72, 0x20, 0x28, 0x69, 0x6e, 0x74, 0x20, 0x64, 0x78, 0x20, 0x3d, 0x20, 0x30, 0x3b, // for (int dx = 0;
	0x20, 0x64, 0x78, 0x20, 0x3c, 0x20, 0x36, 0x3b, 0x20, 0x2b, 0x2b, 0x64, 0x78, 0x29, 0x0a, 0x63, //  dx < 6; ++dx).c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x3d, 0x20, 0x67, 0x5f, 0x6b, 0x61, 0x69, 0x73, 0x65, 0x72, // olor += g_kaiser
	0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x36, 0x73, 0x5b, 0x64, 0x78, 0x5d, 0x5b, 0x64, 0x79, 0x5d, // Kernel6s[dx][dy]
	0x20, 0x2a, 0x20, 0x73, 0x72, 0x67, 0x62, 0x54, 0x6f, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x28, //  * srgbToLinear(
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x28, 0x75, 0x5f, 0x53, 0x6f, 0x75, 0x72, // imageLoad(u_Sour
	0x63, 0x65, 0x2c, 0x20, 0x73, 0x72, 0x63, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x2b, 0x20, 0x69, // ce, srcCoord + i
	0x76, 0x65, 0x63, 0x32, 0x28, 0x64, 0x78, 0x2c, 0x20, 0x64, 0x79, 0x29, 0x29, 0x29, 0x3b, 0x0a, // vec2(dx, dy)));.
	0x7d, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x28, 0x75, 0x5f, 0x44, // }.imageStore(u_D
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x64, 0x73, 0x74, 0x43, // estination, dstC
	0x6f, 0x6f, 0x72, 0x64, 0x2c, 0x20, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x54, 0x6f, 0x53, 0x72, // oord, linearToSr
	0x67, 0x62, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x00,       // gb(color));.}..
};
static const uint8_t cs_mipmap_srgba8_glsl[4496] =
{
	0x43, 0x53, 0x48, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7d, 0x11, // CSH...........}.
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x34, 0x34, 0x30, 0x0a, 0x76, // ..#version 440.v
	0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x33, // ec3 instMul(vec3
	0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, //  _vec, mat3 _mtx
	0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, // ) { return ( (_v
	0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, // ec) * (_mtx) ); 
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, // }.vec3 instMul(m
	0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, // at3 _mtx, vec3 _
	0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, // vec) { return ( 
	0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, // (_mtx) * (_vec) 
	0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, // ); }.vec4 instMu
	0x6c, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, // l(vec4 _vec, mat
	0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // 4 _mtx) { return
	0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, //  ( (_vec) * (_mt
	0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, // x) ); }.vec4 ins
	0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, // tMul(mat4 _mtx, 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // vec4 _vec) { ret
	0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, // urn ( (_mtx) * (
	0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // _vec) ); }.float
	0x20, 0x72, 0x63, 0x70, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, //  rcp(float _a) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x5f, 0x61, 0x3b, 0x20, //  return 1.0/_a; 
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, // }.vec2 rcp(vec2 
	0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, // _a) { return vec
	0x32, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, // 2(1.0)/_a; }.vec
	0x33, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, // 3 rcp(vec3 _a) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x31, 0x2e, 0x30, //  return vec3(1.0
	0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x72, 0x63, 0x70, // )/_a; }.vec4 rcp
	0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // (vec4 _a) { retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, // rn vec4(1.0)/_a;
	0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, //  }.vec2 vec2_spl
	0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, // at(float _x) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, // eturn vec2(_x, _
	0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, // x); }.vec3 vec3_
	0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, // splat(float _x) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, // { return vec3(_x
	0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, // , _x, _x); }.vec
	0x34, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, // 4 vec4_splat(flo
	0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // at _x) { return 
	0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, // vec4(_x, _x, _x,
	0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x76, //  _x); }.uvec2 uv
	0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, // ec2_splat(uint _
	0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, // x) { return uvec
	0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, // 2(_x, _x); }.uve
	0x63, 0x33, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, // c3 uvec3_splat(u
	0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // int _x) { return
	0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, //  uvec3(_x, _x, _
	0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x76, 0x65, 0x63, // x); }.uvec4 uvec
	0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, // 4_splat(uint _x)
	0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x28, //  { return uvec4(
	0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, // _x, _x, _x, _x);
	0x20, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, //  }.mat4 mtxFromR
	0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, // ows(vec4 _0, vec
	0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, // 4 _1, vec4 _2, v
	0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // ec4 _3).{.return
	0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x28, //  transpose(mat4(
	0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x20, // _0, _1, _2, _3) 
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, // );.}.mat4 mtxFro
	0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, // mCols(vec4 _0, v
	0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, // ec4 _1, vec4 _2,
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, //  vec4 _3).{.retu
	0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, // rn mat4(_0, _1, 
	0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, // _2, _3);.}.mat3 
	0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, // mtxFromRows(vec3
	0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, //  _0, vec3 _1, ve
	0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // c3 _2).{.return 
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, // transpose(mat3(_
	0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // 0, _1, _2) );.}.
	0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, // mat3 mtxFromCols
	0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, // (vec3 _0, vec3 _
	0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // 1, vec3 _2).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, // turn mat3(_0, _1
	0x2c, 0x20, 0x5f, 0x32, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // , _2);.}.uniform
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x63, 0x74, //  vec4 u_viewRect
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, // ;.uniform vec4 u
	0x5f, 0x76, 0x69, 0x65, 0x77, 0x54, 0x65, 0x78, 0x65, 0x6c, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // _viewTexel;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x3b, // orm mat4 u_view;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, // .uniform mat4 u_
	0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // invView;.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, //  mat4 u_proj;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, // iform mat4 u_inv
	0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, // Proj;.uniform ma
	0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, // t4 u_viewProj;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, // niform mat4 u_in
	0x76, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, // vViewProj;.unifo
	0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5b, // rm mat4 u_model[
	0x33, 0x32, 0x5d, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, // 32];.uniform mat
	0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, // 4 u_modelView;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, // niform mat4 u_mo
	0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, // delViewProj;.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x61, 0x6c, 0x70, 0x68, // form vec4 u_alph
	0x61, 0x52, 0x65, 0x66, 0x34, 0x3b, 0x0a, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x28, 0x72, 0x67, // aRef4;.layout(rg
	0x62, 0x61, 0x38, 0x2c, 0x20, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x3d, 0x30, 0x29, 0x20, // ba8, binding=0) 
	0x72, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // readonly uniform
	0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x32, 0x44, 0x20, 0x75, 0x5f, 0x53, 0x6f, 0x75, 0x72, 0x63, //  image2D u_Sourc
	0x65, 0x3b, 0x0a, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x28, 0x72, 0x67, 0x62, 0x61, 0x38, 0x2c, // e;.layout(rgba8,
	0x20, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x3d, 0x31, 0x29, 0x20, 0x77, 0x72, 0x69, 0x74, //  binding=1) writ
	0x65, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x69, 0x6d, // eonly uniform im
	0x61, 0x67, 0x65, 0x32, 0x44, 0x20, 0x75, 0x5f, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, // age2D u_Destinat
	0x69, 0x6f, 0x6e, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x72, 0x67, 0x62, 0x54, // ion;.float srgbT
	0x6f, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, // oLinear(float f)
	0x20, 0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, //  {.if (f <= 0.04
	0x30, 0x34, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x66, 0x20, 0x2a, 0x20, // 045).return f * 
	0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, // (1.0/12.92);.els
	0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x20, 0x2a, // e.return pow(f *
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x28, //  (1.0/1.055) + (
	0x30, 0x2e, 0x30, 0x35, 0x35, 0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, // 0.055/1.055), 2.
	0x34, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x73, 0x72, 0x67, 0x62, 0x54, // 4);.}.vec4 srgbT
	0x6f, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x29, 0x20, // oLinear(vec4 c) 
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x73, 0x72, // {.return vec4(sr
	0x67, 0x62, 0x54, 0x6f, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x28, 0x63, 0x2e, 0x72, 0x29, 0x2c, // gbToLinear(c.r),
	0x20, 0x73, 0x72, 0x67, 0x62, 0x54, 0x6f, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x28, 0x63, 0x2e, //  srgbToLinear(c.
	0x67, 0x29, 0x2c, 0x20, 0x73, 0x72, 0x67, 0x62, 0x54, 0x6f, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, // g), srgbToLinear
	0x28, 0x63, 0x2e, 0x62, 0x29, 0x2c, 0x20, 0x63, 0x2e, 0x61, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // (c.b), c.a);.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x54, 0x6f, 0x53, 0x72, 0x67, // loat linearToSrg
	0x62, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x20, 0x7b, 0x0a, 0x69, 0x66, 0x20, // b(float f) {.if 
	0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x33, 0x31, 0x33, 0x30, 0x38, 0x29, // (f <= 0.0031308)
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x20, 0x2a, 0x20, // .return 12.92 * 
	0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, // f;.else.return 1
	0x2e, 0x30, 0x35, 0x35, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x31, 0x2e, // .055 * pow(f, 1.
	0x30, 0x2f, 0x32, 0x2e, 0x34, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x3b, 0x0a, // 0/2.4) - 0.055;.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x54, 0x6f, 0x53, // }.vec4 linearToS
	0x72, 0x67, 0x62, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x29, 0x20, 0x7b, 0x0a, 0x72, 0x65, // rgb(vec4 c) {.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, // turn vec4(linear
	0x54, 0x6f, 0x53, 0x72, 0x67, 0x62, 0x28, 0x63, 0x2e, 0x72, 0x29, 0x2c, 0x20, 0x6c, 0x69, 0x6e, // ToSrgb(c.r), lin
	0x65, 0x61, 0x72, 0x54, 0x6f, 0x53, 0x72, 0x67, 0x62, 0x28, 0x63, 0x2e, 0x67, 0x29, 0x2c, 0x20, // earToSrgb(c.g), 
	0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x54, 0x6f, 0x53, 0x72, 0x67, 0x62, 0x28, 0x63, 0x2e, 0x62, // linearToSrgb(c.b
	0x29, 0x2c, 0x20, 0x63, 0x2e, 0x61, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, // ), c.a);.}.const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x67, 0x5f, 0x6b, 0x61, 0x69, 0x73, 0x65, 0x72, 0x4b, //  float g_kaiserK
	0x65, 0x72, 0x6e, 0x65, 0x6c, 0x34, 0x5b, 0x34, 0x5d, 0x5b, 0x34, 0x5d, 0x20, 0x3d, 0x20, 0x7b, // ernel4[4][4] = {
	0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x39, 0x39, 0x2c, 0x20, 0x30, 0x2e, 0x30, // .{ 0.000099, 0.0
	0x30, 0x34, 0x38, 0x38, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x34, 0x38, 0x38, 0x30, 0x2c, // 04880, 0.004880,
	0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x39, 0x39, 0x20, 0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, //  0.000099 },.{ 0
	0x2e, 0x30, 0x30, 0x34, 0x38, 0x38, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x32, 0x34, 0x30, 0x31, 0x34, // .004880, 0.24014
	0x31, 0x2c, 0x20, 0x30, 0x2e, 0x32, 0x34, 0x30, 0x31, 0x34, 0x31, 0x2c, 0x20, 0x30, 0x2e, 0x30, // 1, 0.240141, 0.0
	0x30, 0x34, 0x38, 0x38, 0x30, 0x20, 0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x34, // 04880 },.{ 0.004
	0x38, 0x38, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x32, 0x34, 0x30, 0x31, 0x34, 0x31, 0x2c, 0x20, 0x30, // 880, 0.240141, 0
	0x2e, 0x32, 0x34, 0x30, 0x31, 0x34, 0x31, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x34, 0x38, 0x38, // .240141, 0.00488
	0x30, 0x20, 0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x39, 0x39, 0x2c, // 0 },.{ 0.000099,
	0x20, 0x30, 0x2e, 0x30, 0x30, 0x34, 0x38, 0x38, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x34, //  0.004880, 0.004
	0x38, 0x38, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x39, 0x39, 0x20, 0x7d, 0x0a, // 880, 0.000099 }.
	0x7d, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x67, // };.const float g
	0x5f, 0x6b, 0x61, 0x69, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x36, 0x5b, 0x36, // _kaiserKernel6[6
	0x5d, 0x5b, 0x36, 0x5d, 0x20, 0x3d, 0x20, 0x7b, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, // ][6] = {.{ 0.000
	0x30, 0x33, 0x36, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x38, 0x30, 0x38, 0x2c, 0x20, 0x30, // 036, 0.000808, 0
	0x2e, 0x30, 0x30, 0x32, 0x31, 0x33, 0x33, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x32, 0x31, 0x33, // .002133, 0.00213
	0x33, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x38, 0x30, 0x38, 0x2c, 0x20, 0x30, 0x2e, 0x30, // 3, 0.000808, 0.0
	0x30, 0x30, 0x30, 0x33, 0x36, 0x20, 0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, // 00036 },.{ 0.000
	0x38, 0x30, 0x38, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, 0x34, 0x31, 0x30, 0x2c, 0x20, 0x30, // 808, 0.018410, 0
	0x2e, 0x30, 0x34, 0x38, 0x36, 0x32, 0x34, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x38, 0x36, 0x32, // .048624, 0.04862
	0x34, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, 0x34, 0x31, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, // 4, 0.018410, 0.0
	0x30, 0x30, 0x38, 0x30, 0x38, 0x20, 0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x32, // 00808 },.{ 0.002
	0x31, 0x33, 0x33, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x38, 0x36, 0x32, 0x34, 0x2c, 0x20, 0x30, // 133, 0.048624, 0
	0x2e, 0x31, 0x32, 0x38, 0x34, 0x32, 0x34, 0x2c, 0x20, 0x30, 0x2e, 0x31, 0x32, 0x38, 0x34, 0x32, // .128424, 0.12842
	0x34, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x38, 0x36, 0x32, 0x34, 0x2c, 0x20, 0x30, 0x2e, 0x30, // 4, 0.048624, 0.0
	0x30, 0x32, 0x31, 0x33, 0x33, 0x20, 0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x32, // 02133 },.{ 0.002
	0x31, 0x33, 0x33, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x38, 0x36, 0x32, 0x34, 0x2c, 0x20, 0x30, // 133, 0.048624, 0
	0x2e, 0x31, 0x32, 0x38, 0x34, 0x32, 0x34, 0x2c, 0x20, 0x30, 0x2e, 0x31, 0x32, 0x38, 0x34, 0x32, // .128424, 0.12842
	0x34, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x38, 0x36, 0x32, 0x34, 0x2c, 0x20, 0x30, 0x2e, 0x30, // 4, 0.048624, 0.0
	0x30, 0x32, 0x31, 0x33, 0x33, 0x20, 0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, // 02133 },.{ 0.000
	0x38, 0x30, 0x38, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, 0x34, 0x31, 0x30, 0x2c, 0x20, 0x30, // 808, 0.018410, 0
	0x2e, 0x30, 0x34, 0x38, 0x36, 0x32, 0x34, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x38, 0x36, 0x32, // .048624, 0.04862
	0x34, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, 0x34, 0x31, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, // 4, 0.018410, 0.0
	0x30, 0x30, 0x38, 0x30, 0x38, 0x20, 0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, // 00808 },.{ 0.000
	0x30, 0x33, 0x36, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x38, 0x30, 0x38, 0x2c, 0x20, 0x30, // 036, 0.000808, 0
	0x2e, 0x30, 0x30, 0x32, 0x31, 0x33, 0x33, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x32, 0x31, 0x33, // .002133, 0.00213
	0x33, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x38, 0x30, 0x38, 0x2c, 0x20, 0x30, 0x2e, 0x30, // 3, 0.000808, 0.0
	0x30, 0x30, 0x30, 0x33, 0x36, 0x20, 0x7d, 0x0a, 0x7d, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, // 00036 }.};.const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x67, 0x5f, 0x6b, 0x61, 0x69, 0x73, 0x65, 0x72, 0x4b, //  float g_kaiserK
	0x65, 0x72, 0x6e, 0x65, 0x6c, 0x36, 0x73, 0x5b, 0x36, 0x5d, 0x5b, 0x36, 0x5d, 0x20, 0x3d, 0x20, // ernel6s[6][6] = 
	0x7b, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x35, 0x37, 0x39, 0x33, 0x38, 0x30, 0x2c, 0x20, // {.{ 0.00579380, 
	0x30, 0x2e, 0x30, 0x31, 0x33, 0x30, 0x32, 0x34, 0x39, 0x31, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x31, // 0.01302491, 0.01
	0x39, 0x32, 0x33, 0x39, 0x37, 0x39, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x39, 0x32, 0x33, 0x39, // 923979, 0.019239
	0x37, 0x39, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x33, 0x30, 0x32, 0x34, 0x39, 0x31, 0x2c, 0x20, // 79, 0.01302491, 
	0x30, 0x2e, 0x30, 0x30, 0x35, 0x37, 0x39, 0x33, 0x38, 0x30, 0x20, 0x7d, 0x2c, 0x0a, 0x7b, 0x20, // 0.00579380 },.{ 
	0x30, 0x2e, 0x30, 0x31, 0x33, 0x30, 0x32, 0x34, 0x39, 0x31, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x32, // 0.01302491, 0.02
	0x39, 0x32, 0x38, 0x31, 0x30, 0x33, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x33, 0x32, 0x35, 0x32, // 928103, 0.043252
	0x35, 0x36, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x33, 0x32, 0x35, 0x32, 0x35, 0x36, 0x2c, 0x20, // 56, 0.04325256, 
	0x30, 0x2e, 0x30, 0x32, 0x39, 0x32, 0x38, 0x31, 0x30, 0x33, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x31, // 0.02928103, 0.01
	0x33, 0x30, 0x32, 0x34, 0x39, 0x31, 0x20, 0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x31, // 302491 },.{ 0.01
	0x39, 0x32, 0x33, 0x39, 0x37, 0x39, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x33, 0x32, 0x35, 0x32, // 923979, 0.043252
	0x35, 0x36, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x36, 0x33, 0x38, 0x39, 0x30, 0x36, 0x35, 0x2c, 0x20, // 56, 0.06389065, 
	0x30, 0x2e, 0x30, 0x36, 0x33, 0x38, 0x39, 0x30, 0x36, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, // 0.06389065, 0.04
	0x33, 0x32, 0x35, 0x32, 0x35, 0x36, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x39, 0x32, 0x33, 0x39, // 325256, 0.019239
	0x37, 0x39, 0x20, 0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x39, 0x32, 0x33, 0x39, // 79 },.{ 0.019239
	0x37, 0x39, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x33, 0x32, 0x35, 0x32, 0x35, 0x36, 0x2c, 0x20, // 79, 0.04325256, 
	0x30, 0x2e, 0x30, 0x36, 0x33, 0x38, 0x39, 0x30, 0x36, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x36, // 0.06389065, 0.06
	0x33, 0x38, 0x39, 0x30, 0x36, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x33, 0x32, 0x35, 0x32, // 389065, 0.043252
	0x35, 0x36, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x39, 0x32, 0x33, 0x39, 0x37, 0x39, 0x20, 0x7d, // 56, 0.01923979 }
	0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x33, 0x30, 0x32, 0x34, 0x39, 0x31, 0x2c, 0x20, // ,.{ 0.01302491, 
	0x30, 0x2e, 0x30, 0x32, 0x39, 0x32, 0x38, 0x31, 0x30, 0x33, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, // 0.02928103, 0.04
	0x33, 0x32, 0x35, 0x32, 0x35, 0x36, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x33, 0x32, 0x35, 0x32, // 325256, 0.043252
	0x35, 0x36, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x32, 0x39, 0x32, 0x38, 0x31, 0x30, 0x33, 0x2c, 0x20, // 56, 0.02928103, 
	0x30, 0x2e, 0x30, 0x31, 0x33, 0x30, 0x32, 0x34, 0x39, 0x31, 0x20, 0x7d, 0x2c, 0x0a, 0x7b, 0x20, // 0.01302491 },.{ 
	0x30, 0x2e, 0x30, 0x30, 0x35, 0x37, 0x39, 0x33, 0x38, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x31, // 0.00579380, 0.01
	0x33, 0x30, 0x32, 0x34, 0x39, 0x31, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x39, 0x32, 0x33, 0x39, // 302491, 0.019239
	0x37, 0x39, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x39, 0x32, 0x33, 0x39, 0x37, 0x39, 0x2c, 0x20, // 79, 0.01923979, 
	0x30, 0x2e, 0x30, 0x31, 0x33, 0x30, 0x32, 0x34, 0x39, 0x31, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, // 0.01302491, 0.00
	0x35, 0x37, 0x39, 0x33, 0x38, 0x30, 0x20, 0x7d, 0x0a, 0x7d, 0x3b, 0x0a, 0x6c, 0x61, 0x79, 0x6f, // 579380 }.};.layo
	0x75, 0x74, 0x20, 0x28, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x78, // ut (local_size_x
	0x20, 0x3d, 0x20, 0x38, 0x2c, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, //  = 8, local_size
	0x5f, 0x79, 0x20, 0x3d, 0x20, 0x38, 0x2c, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x69, // _y = 8, local_si
	0x7a, 0x65, 0x5f, 0x7a, 0x20, 0x3d, 0x20, 0x31, 0x29, 0x20, 0x69, 0x6e, 0x3b, 0x0a, 0x76, 0x6f, // ze_z = 1) in;.vo
	0x69, 0x64, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x20, 0x7b, 0x0a, 0x69, 0x76, 0x65, 0x63, // id main() {.ivec
	0x32, 0x20, 0x64, 0x73, 0x74, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x3d, 0x20, 0x69, 0x76, 0x65, // 2 dstCoord = ive
	0x63, 0x32, 0x28, 0x67, 0x6c, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x6f, // c2(gl_GlobalInvo
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x2e, 0x78, 0x79, 0x29, 0x3b, 0x0a, 0x63, 0x6f, // cationID.xy);.co
	0x6e, 0x73, 0x74, 0x20, 0x69, 0x76, 0x65, 0x63, 0x32, 0x20, 0x64, 0x73, 0x74, 0x53, 0x69, 0x7a, // nst ivec2 dstSiz
	0x65, 0x20, 0x3d, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x28, 0x75, 0x5f, // e = imageSize(u_
	0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x3b, 0x0a, 0x69, 0x66, // Destination);.if
	0x20, 0x28, 0x61, 0x6e, 0x79, 0x28, 0x67, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x68, 0x61, //  (any(greaterTha
	0x6e, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x28, 0x64, 0x73, 0x74, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x2c, // nEqual(dstCoord,
	0x20, 0x64, 0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x29, 0x29, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, //  dstSize))).retu
	0x72, 0x6e, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, // rn;.vec4 color =
	0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x30, 0x2e, 0x30, 0x29, //  vec4_splat(0.0)
	0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x3d, 0x3d, 0x20, 0x30, 0x2e, 0x30, // ;.if (1.0 == 0.0
	0x29, 0x20, 0x7b, 0x0a, 0x69, 0x76, 0x65, 0x63, 0x32, 0x20, 0x73, 0x72, 0x63, 0x43, 0x6f, 0x6f, // ) {.ivec2 srcCoo
	0x72, 0x64, 0x20, 0x3d, 0x20, 0x64, 0x73, 0x74, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x2a, 0x20, // rd = dstCoord * 
	0x32, 0x3b, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x3d, 0x20, 0x73, 0x72, 0x67, 0x62, // 2;.color += srgb
	0x54, 0x6f, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x28, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x6f, // ToLinear(imageLo
	0x61, 0x64, 0x28, 0x75, 0x5f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2c, 0x20, 0x73, 0x72, 0x63, // ad(u_Source, src
	0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x29, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, // Coord ));.color 
	0x2b, 0x3d, 0x20, 0x73, 0x72, 0x67, 0x62, 0x54, 0x6f, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x28, // += srgbToLinear(
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x28, 0x75, 0x5f, 0x53, 0x6f, 0x75, 0x72, // imageLoad(u_Sour
	0x63, 0x65, 0x2c, 0x20, 0x73, 0x72, 0x63, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x2b, 0x20, 0x69, // ce, srcCoord + i
	0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2c, 0x20, 0x31, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x63, 0x6f, // vec2(0, 1)));.co
	0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x3d, 0x20, 0x73, 0x72, 0x67, 0x62, 0x54, 0x6f, 0x4c, 0x69, 0x6e, // lor += srgbToLin
	0x65, 0x61, 0x72, 0x28, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x28, 0x75, 0x5f, // ear(imageLoad(u_
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2c, 0x20, 0x73, 0x72, 0x63, 0x43, 0x6f, 0x6f, 0x72, 0x64, // Source, srcCoord
	0x20, 0x2b, 0x20, 0x69, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2c, 0x20, 0x30, 0x29, 0x29, 0x29, //  + ivec2(1, 0)))
	0x3b, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x3d, 0x20, 0x73, 0x72, 0x67, 0x62, 0x54, // ;.color += srgbT
	0x6f, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x28, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x61, // oLinear(imageLoa
	0x64, 0x28, 0x75, 0x5f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2c, 0x20, 0x73, 0x72, 0x63, 0x43, // d(u_Source, srcC
	0x6f, 0x6f, 0x72, 0x64, 0x20, 0x2b, 0x20, 0x69, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2c, 0x20, // oord + ivec2(1, 
	0x31, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2f, 0x3d, 0x20, 0x34, // 1)));.color /= 4
	0x2e, 0x30, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x69, 0x66, 0x20, 0x28, 0x31, // .0;.}.else if (1
	0x2e, 0x30, 0x20, 0x3d, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x7b, 0x0a, 0x69, 0x76, 0x65, // .0 == 1.0) {.ive
	0x63, 0x32, 0x20, 0x73, 0x72, 0x63, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x3d, 0x20, 0x64, 0x73, // c2 srcCoord = ds
	0x74, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x2a, 0x20, 0x32, 0x20, 0x2d, 0x20, 0x69, 0x76, 0x65, // tCoord * 2 - ive
	0x63, 0x32, 0x28, 0x31, 0x2c, 0x20, 0x31, 0x29, 0x3b, 0x0a, 0x66, 0x6f, 0x72, 0x20, 0x28, 0x69, // c2(1, 1);.for (i
	0x6e, 0x74, 0x20, 0x64, 0x79, 0x20, 0x3d, 0x20, 0x30, 0x3b, 0x20, 0x64, 0x79, 0x20, 0x3c, 0x20, // nt dy = 0; dy < 
	0x34, 0x3b, 0x20, 0x2b, 0x2b, 0x64, 0x79, 0x29, 0x0a, 0x66, 0x6f, 0x72, 0x20, 0x28, 0x69, 0x6e, // 4; ++dy).for (in
	0x74, 0x20, 0x64, 0x78, 0x20, 0x3d, 0x20, 0x30, 0x3b, 0x20, 0x64, 0x78, 0x20, 0x3c, 0x20, 0x34, // t dx = 0; dx < 4
	0x3b, 0x20, 0x2b, 0x2b, 0x64, 0x78, 0x29, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x3d, // ; ++dx).color +=
	0x20, 0x67, 0x5f, 0x6b, 0x61, 0x69, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x34, //  g_kaiserKernel4
	0x5b, 0x64, 0x78, 0x5d, 0x5b, 0x64, 0x79, 0x5d, 0x20, 0x2a, 0x20, 0x73, 0x72, 0x67, 0x62, 0x54, // [dx][dy] * srgbT
	0x6f, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x28, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x61, // oLinear(imageLoa
	0x64, 0x28, 0x75, 0x5f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2c, 0x20, 0x73, 0x72, 0x63, 0x43, // d(u_Source, srcC
	0x6f, 0x6f, 0x72, 0x64, 0x20, 0x2b, 0x20, 0x69, 0x76, 0x65, 0x63, 0x32, 0x28, 0x64, 0x78, 0x2c, // oord + ivec2(dx,
	0x20, 0x64, 0x79, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x69, //  dy)));.}.else i
	0x66, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x3d, 0x3d, 0x20, 0x32, 0x2e, 0x30, 0x29, 0x20, 0x7b, // f (1.0 == 2.0) {
	0x0a, 0x69, 0x76, 0x65, 0x63, 0x32, 0x20, 0x73, 0x72, 0x63, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, // .ivec2 srcCoord 
	0x3d, 0x20, 0x64, 0x73, 0x74, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x2a, 0x20, 0x32, 0x20, 0x2d, // = dstCoord * 2 -
	0x20, 0x69, 0x76, 0x65, 0x63, 0x32, 0x28, 0x32, 0x2c, 0x20, 0x32, 0x29, 0x3b, 0x0a, 0x66, 0x6f, //  ivec2(2, 2);.fo
	0x72, 0x20, 0x28, 0x69, 0x6e, 0x74, 0x20, 0x64, 0x79, 0x20, 0x3d, 0x20, 0x30, 0x3b, 0x20, 0x64, // r (int dy = 0; d
	0x79, 0x20, 0x3c, 0x20, 0x36, 0x3b, 0x20, 0x2b, 0x2b, 0x64, 0x79, 0x29, 0x0a, 0x66, 0x6f, 0x72, // y < 6; ++dy).for
	0x20, 0x28, 0x69, 0x6e, 0x74, 0x20, 0x64, 0x78, 0x20, 0x3d, 0x20, 0x30, 0x3b, 0x20, 0x64, 0x78, //  (int dx = 0; dx
	0x20, 0x3c, 0x20, 0x36, 0x3b, 0x20, 0x2b, 0x2b, 0x64, 0x78, 0x29, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, //  < 6; ++dx).colo
	0x72, 0x20, 0x2b, 0x3d, 0x20, 0x67, 0x5f, 0x6b, 0x61, 0x69, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x72, // r += g_kaiserKer
	0x6e, 0x65, 0x6c, 0x36, 0x5b, 0x64, 0x78, 0x5d, 0x5b, 0x64, 0x79, 0x5d, 0x20, 0x2a, 0x20, 0x73, // nel6[dx][dy] * s
	0x72, 0x67, 0x62, 0x54, 0x6f, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x28, 0x69, 0x6d, 0x61, 0x67, // rgbToLinear(imag
	0x65, 0x4c, 0x6f, 0x61, 0x64, 0x28, 0x75, 0x5f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2c, 0x20, // eLoad(u_Source, 
	0x73, 0x72, 0x63, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x2b, 0x20, 0x69, 0x76, 0x65, 0x63, 0x32, // srcCoord + ivec2
	0x28, 0x64, 0x78, 0x2c, 0x20, 0x64, 0x79, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, // (dx, dy)));.}.el
	0x73, 0x65, 0x20, 0x69, 0x66, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x3d, 0x3d, 0x20, 0x33, 0x2e, // se if (1.0 == 3.
	0x30, 0x29, 0x20, 0x7b, 0x0a, 0x69, 0x76, 0x65, 0x63, 0x32, 0x20, 0x73, 0x72, 0x63, 0x43, 0x6f, // 0) {.ivec2 srcCo
	0x6f, 0x72, 0x64, 0x20, 0x3d, 0x20, 0x64, 0x73, 0x74, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x2a, // ord = dstCoord *
	0x20, 0x32, 0x20, 0x2d, 0x20, 0x69, 0x76, 0x65, 0x63, 0x32, 0x28, 0x32, 0x2c, 0x20, 0x32, 0x29, //  2 - ivec2(2, 2)
	0x3b, 0x0a, 0x66, 0x6f, 0x72, 0x20, 0x28, 0x69, 0x6e, 0x74, 0x20, 0x64, 0x79, 0x20, 0x3d, 0x20, // ;.for (int dy = 
	0x30, 0x3b, 0x20, 0x64, 0x79, 0x20, 0x3c, 0x20, 0x36, 0x3b, 0x20, 0x2b, 0x2b, 0x64, 0x79, 0x29, // 0; dy < 6; ++dy)
	0x0a, 0x66, 0x6f, 0x72, 0x20, 0x28, 0x69, 0x6e, 0x74, 0x20, 0x64, 0x78, 0x20, 0x3d, 0x20, 0x30, // .for (int dx = 0
	0x3b, 0x20, 0x64, 0x78, 0x20, 0x3c, 0x20, 0x36, 0x3b, 0x20, 0x2b, 0x2b, 0x64, 0x78, 0x29, 0x0a, // ; dx < 6; ++dx).
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x3d, 0x20, 0x67, 0x5f, 0x6b, 0x61, 0x69, 0x73, 0x65, // color += g_kaise
	0x72, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x36, 0x73, 0x5b, 0x64, 0x78, 0x5d, 0x5b, 0x64, 0x79, // rKernel6s[dx][dy
	0x5d, 0x20, 0x2a, 0x20, 0x73, 0x72, 0x67, 0x62, 0x54, 0x6f, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, // ] * srgbToLinear
	0x28, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x28, 0x75, 0x5f, 0x53, 0x6f, 0x75, // (imageLoad(u_Sou
	0x72, 0x63, 0x65, 0x2c, 0x20, 0x73, 0x72, 0x63, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x2b, 0x20, // rce, srcCoord + 
	0x69, 0x76, 0x65, 0x63, 0x32, 0x28, 0x64, 0x78, 0x2c, 0x20, 0x64, 0x79, 0x29, 0x29, 0x29, 0x3b, // ivec2(dx, dy)));
	0x0a, 0x7d, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x28, 0x75, 0x5f, // .}.imageStore(u_
	0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x64, 0x73, 0x74, // Destination, dst
	0x43, 0x6f, 0x6f, 0x72, 0x64, 0x2c, 0x20, 0x6c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x54, 0x6f, 0x53, // Coord, linearToS
	0x72, 0x67, 0x62, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x00, // rgb(color));.}..
};
static const uint8_t cs_mipmap_srgba8_dx11[1834] =
{
	0x43, 0x53, 0x48, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x07, // CSH.............
	0x00, 0x00, 0x44, 0x58, 0x42, 0x43, 0xb2, 0xc8, 0xe8, 0xe4, 0xf7, 0x78, 0x4b, 0xa3, 0x64, 0xb1, // ..DXBC.....xK.d.
	0x95, 0xbf, 0x7c, 0xc7, 0xd2, 0x32, 0x01, 0x00, 0x00, 0x00, 0x14, 0x07, 0x00, 0x00, 0x03, 0x00, // ..|..2..........
	0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x4c, 0x00, 0x00, 0x00, 0x49, 0x53, // ..,...<...L...IS
	0x47, 0x4e, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x4f, 0x53, // GN............OS
	0x47, 0x4e, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x53, 0x48, // GN............SH
	0x45, 0x58, 0xc0, 0x06, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0xb0, 0x01, 0x00, 0x00, 0x6a, 0x08, // EX....P.......j.
	0x00, 0x01, 0x35, 0x18, 0x00, 0x00, 0x42, 0x00, 0x00, 0x00, 0x38, 0x9e, 0xcf, 0x38, 0x00, 0x00, // ..5...B...8..8..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0xe8, 0x9f, 0x3b, 0x00, 0x00, // ..........h..;..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0xe8, 0x9f, 0x3b, 0x00, 0x00, // ..........h..;..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x9e, 0xcf, 0x38, 0x00, 0x00, // ..........8..8..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0xe8, 0x9f, 0x3b, 0x00, 0x00, // ..........h..;..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0xe7, 0x75, 0x3e, 0x00, 0x00, // ............u>..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0xe7, 0x75, 0x3e, 0x00, 0x00, // ............u>..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0xe8, 0x9f, 0x3b, 0x00, 0x00, // ..........h..;..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0xe8, 0x9f, 0x3b, 0x00, 0x00, // ..........h..;..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0xe7, 0x75, 0x3e, 0x00, 0x00, // ............u>..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0xe7, 0x75, 0x3e, 0x00, 0x00, // ............u>..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0xe8, 0x9f, 0x3b, 0x00, 0x00, // ..........h..;..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x9e, 0xcf, 0x38, 0x00, 0x00, // ..........8..8..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0xe8, 0x9f, 0x3b, 0x00, 0x00, // ..........h..;..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0xe8, 0x9f, 0x3b, 0x00, 0x00, // ..........h..;..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x9e, 0xcf, 0x38, 0x00, 0x00, // ..........8..8..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x58, 0x18, 0x00, 0x04, 0x00, 0x70, // ..........X....p
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x11, 0x00, 0x00, 0x9c, 0x18, 0x00, 0x04, 0x00, 0xe0, // ................
	0x11, 0x00, 0x01, 0x00, 0x00, 0x00, 0x11, 0x11, 0x00, 0x00, 0x5f, 0x00, 0x00, 0x02, 0x32, 0x00, // .........._...2.
	0x02, 0x00, 0x68, 0x00, 0x00, 0x02, 0x07, 0x00, 0x00, 0x00, 0x9b, 0x00, 0x00, 0x04, 0x08, 0x00, // ..h.............
	0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3d, 0x10, 0x00, 0x89, 0xc2, 0x00, // ..........=.....
	0x00, 0x80, 0x43, 0x44, 0x04, 0x00, 0x32, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, // ..CD..2........@
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0xee, 0x11, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2b, 0x00, // ......F.......+.
	0x00, 0x04, 0xc2, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x04, 0x02, 0x00, 0x2b, 0x00, // ..............+.
	0x00, 0x05, 0x32, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x00, 0x00, // ..2.......F.....
	0x00, 0x00, 0x1d, 0x00, 0x00, 0x07, 0x32, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe6, 0x0a, // ......2.........
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, // ......F.......<.
	0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x04, 0x03, 0x0a, 0x00, // ................
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x01, 0x15, 0x00, 0x00, 0x01, 0x29, 0x00, // ......>.......).
	0x00, 0x09, 0x32, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x02, 0x00, 0x02, 0x40, // ..2.......F....@
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x1e, 0x00, 0x00, 0x0a, 0x32, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, // ......2.......F.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // .......@........
	0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x08, 0xc2, 0x00, // ..........6.....
	0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .......@........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x08, 0xf2, 0x00, // ..........6.....
	0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .......@........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x22, 0x00, // ..........6...".
	0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, // .......@......0.
	0x00, 0x01, 0x21, 0x00, 0x00, 0x07, 0x42, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x00, // ..!...B.........
	0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x03, 0x00, // .......@........
	0x04, 0x03, 0x2a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0xf2, 0x00, // ..*.......6.....
	0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x36, 0x00, // ......F.......6.
	0x00, 0x05, 0x12, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, // ...........@....
	0x00, 0x00, 0x30, 0x00, 0x00, 0x01, 0x21, 0x00, 0x00, 0x07, 0x42, 0x00, 0x10, 0x00, 0x00, 0x00, // ..0...!...B.....
	0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x04, 0x00, // ...........@....
	0x00, 0x00, 0x03, 0x00, 0x04, 0x03, 0x2a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x00, // ......*.......).
	0x00, 0x07, 0x42, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x03, 0x00, // ..B.............
	0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x07, 0x42, 0x00, // ...@..........B.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x2a, 0x00, // ..............*.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x07, 0x32, 0x00, 0x10, 0x00, 0x01, 0x00, // ..........2.....
	0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x03, 0x00, // ..F.......F.....
	0x00, 0x00, 0x2d, 0x00, 0x00, 0x89, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x44, 0x04, 0x00, 0xf2, 0x00, // ..-.......CD....
	0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x7e, // ......F.......F~
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x0a, 0x72, 0x00, 0x10, 0x00, 0x06, 0x00, // ..........r.....
	0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0xe6, 0xae, 0x25, 0x3d, 0xe6, 0xae, 0x25, 0x3d, 0xe6, 0xae, // ...@....%=..%=..
	0x25, 0x3d, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x38, 0x00, // %=....F.......8.
	0x00, 0x0a, 0x32, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x05, 0x00, // ..2.......F.....
	0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x91, 0x83, 0x9e, 0x3d, 0x91, 0x83, 0x9e, 0x3d, 0x00, 0x00, // ...@.....=...=..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x0f, 0xc2, 0x00, 0x10, 0x00, 0x03, 0x00, // ......2.........
	0x00, 0x00, 0x06, 0x04, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, // ...........@....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6e, 0xa7, 0x72, 0x3f, 0x6e, 0xa7, 0x72, 0x3f, 0x02, 0x40, // ......n.r?n.r?.@
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x89, 0x55, 0x3d, 0x19, 0x89, // ............U=..
	0x55, 0x3d, 0x2f, 0x00, 0x00, 0x05, 0xc2, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0xa6, 0x0e, // U=/.............
	0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x0a, 0xc2, 0x00, 0x10, 0x00, 0x03, 0x00, // ......8.........
	0x00, 0x00, 0xa6, 0x0e, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, // ...........@....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9a, 0x99, 0x19, 0x40, 0x9a, 0x99, 0x19, 0x40, 0x19, 0x00, // .........@...@..
	0x00, 0x05, 0xc2, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0xa6, 0x0e, 0x10, 0x00, 0x03, 0x00, // ................
	0x00, 0x00, 0x37, 0x00, 0x00, 0x09, 0x32, 0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x46, 0x00, // ..7...2.......F.
	0x10, 0x00, 0x06, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0xe6, 0x0a, // ......F.........
	0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x07, 0x82, 0x00, 0x10, 0x00, 0x00, 0x00, // ......8.........
	0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x91, 0x83, // ..*........@....
	0x9e, 0x3d, 0x32, 0x00, 0x00, 0x09, 0x12, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2a, 0x00, // .=2...........*.
	0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x6e, 0xa7, 0x72, 0x3f, 0x01, 0x40, // .......@..n.r?.@
	0x00, 0x00, 0x19, 0x89, 0x55, 0x3d, 0x2f, 0x00, 0x00, 0x05, 0x12, 0x00, 0x10, 0x00, 0x01, 0x00, // ....U=/.........
	0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x07, 0x12, 0x00, // ..........8.....
	0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, // ...............@
	0x00, 0x00, 0x9a, 0x99, 0x19, 0x40, 0x19, 0x00, 0x00, 0x05, 0x12, 0x00, 0x10, 0x00, 0x01, 0x00, // .....@..........
	0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x09, 0x42, 0x00, // ..........7...B.
	0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x06, 0x00, 0x00, 0x00, 0x3a, 0x00, // ......*.......:.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, 0x00, // ..............2.
	0x00, 0x0a, 0xf2, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x06, 0x90, 0x90, 0x00, 0x2a, 0x00, // ..............*.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x46, 0x0e, // ......F.......F.
	0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x03, 0x00, // ................
	0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x01, 0x00, // ...........@....
	0x00, 0x00, 0x16, 0x00, 0x00, 0x01, 0x36, 0x00, 0x00, 0x05, 0xf2, 0x00, 0x10, 0x00, 0x02, 0x00, // ......6.........
	0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x07, 0x22, 0x00, // ..F...........".
	0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x40, // ...............@
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x01, 0x1d, 0x00, 0x00, 0x0a, 0x72, 0x00, // ..............r.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x1c, 0x2e, 0x4d, 0x3b, 0x1c, 0x2e, // .......@....M;..
	0x4d, 0x3b, 0x1c, 0x2e, 0x4d, 0x3b, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x02, 0x00, // M;..M;....F.....
	0x00, 0x00, 0x38, 0x00, 0x00, 0x0a, 0x72, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x02, // ..8...r.......F.
	0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x52, 0xb8, 0x4e, 0x41, 0x52, 0xb8, // .......@..R.NAR.
	0x4e, 0x41, 0x52, 0xb8, 0x4e, 0x41, 0x00, 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x05, 0x72, 0x00, // NAR.NA..../...r.
	0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x38, 0x00, // ......F.......8.
	0x00, 0x0a, 0x72, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x03, 0x00, // ..r.......F.....
	0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x55, 0x55, 0xd5, 0x3e, 0x55, 0x55, 0xd5, 0x3e, 0x55, 0x55, // ...@..UU.>UU.>UU
	0xd5, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x05, 0x72, 0x00, 0x10, 0x00, 0x03, 0x00, // .>........r.....
	0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x0f, 0x72, 0x00, // ..F.......2...r.
	0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x40, // ......F........@
	0x00, 0x00, 0x3d, 0x0a, 0x87, 0x3f, 0x3d, 0x0a, 0x87, 0x3f, 0x3d, 0x0a, 0x87, 0x3f, 0x00, 0x00, // ..=..?=..?=..?..
	0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0xae, 0x47, 0x61, 0xbd, 0xae, 0x47, 0x61, 0xbd, 0xae, 0x47, // ...@...Ga..Ga..G
	0x61, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x09, 0x72, 0x00, 0x10, 0x00, 0x02, 0x00, // a.....7...r.....
	0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x01, 0x00, // ..F.......F.....
	0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0xa4, 0x00, 0x00, 0x06, 0xf2, 0xe0, // ..F.............
	0x11, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x05, 0x02, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x02, 0x00, // ......F...F.....
	0x00, 0x00, 0x3e, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,                                     // ..>.......
};
static const uint8_t cs_mipmap_srgba8_spv[3885] =
{
	0x43, 0x53, 0x48, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x08, 0x75, // CSH............u
	0x5f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x02, 0x43, // _Source .......C
	0x00, 0x0d, 0x75, 0x5f, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x01, // ..u_Destination.
	0x00, 0x03, 0x00, 0x03, 0x00, 0x00, 0x02, 0x43, 0x00, 0xec, 0x0e, 0x00, 0x00, 0x03, 0x02, 0x23, // .......C.......#
	0x07, 0x00, 0x00, 0x01, 0x00, 0x0b, 0x00, 0x08, 0x00, 0x29, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, // .........)......
	0x00, 0x11, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x11, 0x00, 0x02, 0x00, 0x32, 0x00, 0x00, // .............2..
	0x00, 0x0b, 0x00, 0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, 0x4c, 0x53, 0x4c, 0x2e, 0x73, 0x74, // .........GLSL.st
	0x64, 0x2e, 0x34, 0x35, 0x30, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, // d.450...........
	0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x06, 0x00, 0x05, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, // ................
	0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, 0x00, 0xc5, 0x01, 0x00, 0x00, 0x10, 0x00, 0x06, // .main...........
	0x00, 0x04, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, // ................
	0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x03, 0x00, 0x05, 0x00, 0x00, 0x00, 0xf4, 0x01, 0x00, // ................
	0x00, 0x05, 0x00, 0x04, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, // .........main...
	0x00, 0x05, 0x00, 0x06, 0x00, 0xb9, 0x00, 0x00, 0x00, 0x75, 0x5f, 0x44, 0x65, 0x73, 0x74, 0x69, // .........u_Desti
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x00, 0x00, 0x00, 0x05, 0x00, 0x05, 0x00, 0xd6, 0x00, 0x00, // nation..........
	0x00, 0x75, 0x5f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x08, // .u_Source.......
	0x00, 0xc5, 0x01, 0x00, 0x00, 0x67, 0x6c, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x49, 0x6e, // .....gl_GlobalIn
	0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, // vocationID...G..
	0x00, 0xb9, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, // .....".......G..
	0x00, 0xb9, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x47, 0x00, 0x03, // .....!.......G..
	0x00, 0xb9, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0xd6, 0x00, 0x00, // .........G......
	0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0xd6, 0x00, 0x00, // .".......G......
	0x00, 0x21, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0xc5, 0x01, 0x00, // .!.......G......
	0x00, 0x0b, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x13, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, // ................
	0x00, 0x21, 0x00, 0x03, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x16, 0x00, 0x03, // .!..............
	0x00, 0x06, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, // ..... ..........
	0x00, 0x06, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x14, 0x00, 0x02, 0x00, 0x09, 0x00, 0x00, // ................
	0x00, 0x17, 0x00, 0x04, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, // ................
	0x00, 0x20, 0x00, 0x04, 0x00, 0x10, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, // . ..............
	0x00, 0x17, 0x00, 0x04, 0x00, 0x11, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, // ................
	0x00, 0x15, 0x00, 0x04, 0x00, 0x18, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, // ......... ......
	0x00, 0x17, 0x00, 0x04, 0x00, 0x19, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, // ................
	0x00, 0x17, 0x00, 0x04, 0x00, 0x3b, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, // .....;..........
	0x00, 0x2b, 0x00, 0x04, 0x00, 0x18, 0x00, 0x00, 0x00, 0x4c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .+.......L......
	0x00, 0x15, 0x00, 0x04, 0x00, 0x55, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .....U... ......
	0x00, 0x17, 0x00, 0x04, 0x00, 0x56, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, // .....V...U......
	0x00, 0x2b, 0x00, 0x04, 0x00, 0x55, 0x00, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .+...U..........
	0x00, 0x2b, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0x6a, 0x00, 0x00, 0x00, 0xe6, 0xae, 0x25, // .+.......j.....%
	0x3d, 0x2b, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0x6f, 0x00, 0x00, 0x00, 0x91, 0x83, 0x9e, // =+.......o......
	0x3d, 0x2b, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0x6e, 0xa7, 0x72, // =+.......t...n.r
	0x3f, 0x2b, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x19, 0x89, 0x55, // ?+.......v.....U
	0x3d, 0x2b, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x9a, 0x99, 0x19, // =+.......x......
	0x40, 0x2b, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x1c, 0x2e, 0x4d, // @+.............M
	0x3b, 0x2b, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0x94, 0x00, 0x00, 0x00, 0x52, 0xb8, 0x4e, // ;+...........R.N
	0x41, 0x2b, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0x99, 0x00, 0x00, 0x00, 0x3d, 0x0a, 0x87, // A+...........=..
	0x3f, 0x2b, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0x9b, 0x00, 0x00, 0x00, 0x55, 0x55, 0xd5, // ?+...........UU.
	0x3e, 0x2b, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0x9e, 0x00, 0x00, 0x00, 0xae, 0x47, 0x61, // >+............Ga
	0x3d, 0x19, 0x00, 0x09, 0x00, 0xb7, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, // =...............
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, // ................
	0x00, 0x04, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ..... ..........
	0x00, 0xb7, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0xb8, 0x00, 0x00, 0x00, 0xb9, 0x00, 0x00, // .....;..........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0xc9, 0x00, 0x00, // .....+..........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x18, 0x00, 0x00, 0x00, 0xd1, 0x00, 0x00, // .....+..........
	0x00, 0x02, 0x00, 0x00, 0x00, 0x19, 0x00, 0x09, 0x00, 0xd4, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, // ................
	0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0xd5, 0x00, 0x00, // ......... ......
	0x00, 0x00, 0x00, 0x00, 0x00, 0xd4, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0xd5, 0x00, 0x00, // .........;......
	0x00, 0xd6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x18, 0x00, 0x00, // .........+......
	0x00, 0xe1, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x05, 0x00, 0x19, 0x00, 0x00, // .........,......
	0x00, 0xf8, 0x00, 0x00, 0x00, 0xe1, 0x00, 0x00, 0x00, 0xe1, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, // .............+..
	0x00, 0x18, 0x00, 0x00, 0x00, 0x17, 0x01, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, // .............+..
	0x00, 0x55, 0x00, 0x00, 0x00, 0x21, 0x01, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x04, // .U...!..........
	0x00, 0x22, 0x01, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x21, 0x01, 0x00, 0x00, 0x1c, 0x00, 0x04, // .".......!......
	0x00, 0x23, 0x01, 0x00, 0x00, 0x22, 0x01, 0x00, 0x00, 0x21, 0x01, 0x00, 0x00, 0x2b, 0x00, 0x04, // .#..."...!...+..
	0x00, 0x06, 0x00, 0x00, 0x00, 0x24, 0x01, 0x00, 0x00, 0x38, 0x9e, 0xcf, 0x38, 0x2b, 0x00, 0x04, // .....$...8..8+..
	0x00, 0x06, 0x00, 0x00, 0x00, 0x25, 0x01, 0x00, 0x00, 0x68, 0xe8, 0x9f, 0x3b, 0x2c, 0x00, 0x07, // .....%...h..;,..
	0x00, 0x22, 0x01, 0x00, 0x00, 0x26, 0x01, 0x00, 0x00, 0x24, 0x01, 0x00, 0x00, 0x25, 0x01, 0x00, // ."...&...$...%..
	0x00, 0x25, 0x01, 0x00, 0x00, 0x24, 0x01, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, // .%...$...+......
	0x00, 0x27, 0x01, 0x00, 0x00, 0x86, 0xe7, 0x75, 0x3e, 0x2c, 0x00, 0x07, 0x00, 0x22, 0x01, 0x00, // .'.....u>,..."..
	0x00, 0x28, 0x01, 0x00, 0x00, 0x25, 0x01, 0x00, 0x00, 0x27, 0x01, 0x00, 0x00, 0x27, 0x01, 0x00, // .(...%...'...'..
	0x00, 0x25, 0x01, 0x00, 0x00, 0x2c, 0x00, 0x07, 0x00, 0x23, 0x01, 0x00, 0x00, 0x29, 0x01, 0x00, // .%...,...#...)..
	0x00, 0x26, 0x01, 0x00, 0x00, 0x28, 0x01, 0x00, 0x00, 0x28, 0x01, 0x00, 0x00, 0x26, 0x01, 0x00, // .&...(...(...&..
	0x00, 0x20, 0x00, 0x04, 0x00, 0x2c, 0x01, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x23, 0x01, 0x00, // . ...,.......#..
	0x00, 0x2c, 0x00, 0x05, 0x00, 0x19, 0x00, 0x00, 0x00, 0x49, 0x01, 0x00, 0x00, 0xd1, 0x00, 0x00, // .,.......I......
	0x00, 0xd1, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0xc4, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, // ..... ..........
	0x00, 0x3b, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0xc4, 0x01, 0x00, 0x00, 0xc5, 0x01, 0x00, // .;...;..........
	0x00, 0x01, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x07, 0x00, 0x11, 0x00, 0x00, 0x00, 0x1a, 0x03, 0x00, // .....,..........
	0x00, 0xc9, 0x00, 0x00, 0x00, 0xc9, 0x00, 0x00, 0x00, 0xc9, 0x00, 0x00, 0x00, 0xc9, 0x00, 0x00, // ................
	0x00, 0x36, 0x00, 0x05, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .6..............
	0x00, 0x03, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x05, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, // .............;..
	0x00, 0x2c, 0x01, 0x00, 0x00, 0x05, 0x02, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, // .,...........=..
	0x00, 0x3b, 0x00, 0x00, 0x00, 0xc6, 0x01, 0x00, 0x00, 0xc5, 0x01, 0x00, 0x00, 0xf7, 0x00, 0x03, // .;..............
	0x00, 0x58, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfb, 0x00, 0x03, 0x00, 0x5c, 0x00, 0x00, // .X..............
	0x00, 0x1c, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x1c, 0x02, 0x00, 0x00, 0x4f, 0x00, 0x07, // .............O..
	0x00, 0x19, 0x00, 0x00, 0x00, 0x1e, 0x02, 0x00, 0x00, 0xc6, 0x01, 0x00, 0x00, 0xc6, 0x01, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0xb7, 0x00, 0x00, // .........=......
	0x00, 0x1f, 0x02, 0x00, 0x00, 0xb9, 0x00, 0x00, 0x00, 0x68, 0x00, 0x04, 0x00, 0x56, 0x00, 0x00, // .........h...V..
	0x00, 0x5e, 0x02, 0x00, 0x00, 0x1f, 0x02, 0x00, 0x00, 0x7c, 0x00, 0x04, 0x00, 0x19, 0x00, 0x00, // .^.......|......
	0x00, 0x66, 0x02, 0x00, 0x00, 0x5e, 0x02, 0x00, 0x00, 0x6f, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, // .f...^...o......
	0x00, 0x22, 0x02, 0x00, 0x00, 0x1e, 0x02, 0x00, 0x00, 0x6f, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, // .".......o......
	0x00, 0x24, 0x02, 0x00, 0x00, 0x66, 0x02, 0x00, 0x00, 0xbe, 0x00, 0x05, 0x00, 0x0a, 0x00, 0x00, // .$...f..........
	0x00, 0x6c, 0x02, 0x00, 0x00, 0x22, 0x02, 0x00, 0x00, 0x24, 0x02, 0x00, 0x00, 0x9a, 0x00, 0x04, // .l..."...$......
	0x00, 0x09, 0x00, 0x00, 0x00, 0x26, 0x02, 0x00, 0x00, 0x6c, 0x02, 0x00, 0x00, 0xf7, 0x00, 0x03, // .....&...l......
	0x00, 0x28, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0x26, 0x02, 0x00, // .(...........&..
	0x00, 0x27, 0x02, 0x00, 0x00, 0x28, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x27, 0x02, 0x00, // .'...(.......'..
	0x00, 0xf9, 0x00, 0x02, 0x00, 0x58, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x28, 0x02, 0x00, // .....X.......(..
	0x00, 0x84, 0x00, 0x05, 0x00, 0x19, 0x00, 0x00, 0x00, 0x2e, 0x02, 0x00, 0x00, 0x1e, 0x02, 0x00, // ................
	0x00, 0x49, 0x01, 0x00, 0x00, 0x82, 0x00, 0x05, 0x00, 0x19, 0x00, 0x00, 0x00, 0x2f, 0x02, 0x00, // .I.........../..
	0x00, 0x2e, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x30, 0x02, 0x00, // .............0..
	0x00, 0xf8, 0x00, 0x02, 0x00, 0x30, 0x02, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x11, 0x00, 0x00, // .....0..........
	0x00, 0x1c, 0x03, 0x00, 0x00, 0x1a, 0x03, 0x00, 0x00, 0x28, 0x02, 0x00, 0x00, 0x28, 0x03, 0x00, // .........(...(..
	0x00, 0x4d, 0x02, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x18, 0x00, 0x00, 0x00, 0x1b, 0x03, 0x00, // .M..............
	0x00, 0x4c, 0x00, 0x00, 0x00, 0x28, 0x02, 0x00, 0x00, 0x4f, 0x02, 0x00, 0x00, 0x4d, 0x02, 0x00, // .L...(...O...M..
	0x00, 0xb1, 0x00, 0x05, 0x00, 0x09, 0x00, 0x00, 0x00, 0x33, 0x02, 0x00, 0x00, 0x1b, 0x03, 0x00, // .........3......
	0x00, 0x17, 0x01, 0x00, 0x00, 0xf6, 0x00, 0x04, 0x00, 0x50, 0x02, 0x00, 0x00, 0x4d, 0x02, 0x00, // .........P...M..
	0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0x33, 0x02, 0x00, 0x00, 0x34, 0x02, 0x00, // .........3...4..
	0x00, 0x50, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x34, 0x02, 0x00, 0x00, 0xf9, 0x00, 0x02, // .P.......4......
	0x00, 0x35, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x35, 0x02, 0x00, 0x00, 0xf5, 0x00, 0x07, // .5.......5......
	0x00, 0x11, 0x00, 0x00, 0x00, 0x28, 0x03, 0x00, 0x00, 0x1c, 0x03, 0x00, 0x00, 0x34, 0x02, 0x00, // .....(.......4..
	0x00, 0x48, 0x02, 0x00, 0x00, 0x49, 0x02, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x18, 0x00, 0x00, // .H...I..........
	0x00, 0x20, 0x03, 0x00, 0x00, 0x4c, 0x00, 0x00, 0x00, 0x34, 0x02, 0x00, 0x00, 0x4b, 0x02, 0x00, // . ...L...4...K..
	0x00, 0x49, 0x02, 0x00, 0x00, 0xb1, 0x00, 0x05, 0x00, 0x09, 0x00, 0x00, 0x00, 0x38, 0x02, 0x00, // .I...........8..
	0x00, 0x20, 0x03, 0x00, 0x00, 0x17, 0x01, 0x00, 0x00, 0xf6, 0x00, 0x04, 0x00, 0x4c, 0x02, 0x00, // . ...........L..
	0x00, 0x49, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0x38, 0x02, 0x00, // .I...........8..
	0x00, 0x39, 0x02, 0x00, 0x00, 0x4c, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x39, 0x02, 0x00, // .9...L.......9..
	0x00, 0x3e, 0x00, 0x03, 0x00, 0x05, 0x02, 0x00, 0x00, 0x29, 0x01, 0x00, 0x00, 0x41, 0x00, 0x06, // .>.......)...A..
	0x00, 0x10, 0x00, 0x00, 0x00, 0x3c, 0x02, 0x00, 0x00, 0x05, 0x02, 0x00, 0x00, 0x20, 0x03, 0x00, // .....<....... ..
	0x00, 0x1b, 0x03, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0x3d, 0x02, 0x00, // .....=.......=..
	0x00, 0x3c, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x19, 0x00, 0x00, 0x00, 0x41, 0x02, 0x00, // .<...P.......A..
	0x00, 0x20, 0x03, 0x00, 0x00, 0x1b, 0x03, 0x00, 0x00, 0x80, 0x00, 0x05, 0x00, 0x19, 0x00, 0x00, // . ..............
	0x00, 0x42, 0x02, 0x00, 0x00, 0x2f, 0x02, 0x00, 0x00, 0x41, 0x02, 0x00, 0x00, 0x3d, 0x00, 0x04, // .B.../...A...=..
	0x00, 0xd4, 0x00, 0x00, 0x00, 0x43, 0x02, 0x00, 0x00, 0xd6, 0x00, 0x00, 0x00, 0x5f, 0x00, 0x07, // .....C......._..
	0x00, 0x11, 0x00, 0x00, 0x00, 0x75, 0x02, 0x00, 0x00, 0x43, 0x02, 0x00, 0x00, 0x42, 0x02, 0x00, // .....u...C...B..
	0x00, 0x02, 0x00, 0x00, 0x00, 0x4c, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x06, 0x00, 0x00, // .....L...Q......
	0x00, 0x7c, 0x02, 0x00, 0x00, 0x75, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, // .|...u..........
	0x00, 0x97, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfb, 0x00, 0x03, 0x00, 0x5c, 0x00, 0x00, // ................
	0x00, 0x8b, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x8b, 0x02, 0x00, 0x00, 0xbc, 0x00, 0x05, // ................
	0x00, 0x09, 0x00, 0x00, 0x00, 0x8d, 0x02, 0x00, 0x00, 0x7c, 0x02, 0x00, 0x00, 0x6a, 0x00, 0x00, // .........|...j..
	0x00, 0xf7, 0x00, 0x03, 0x00, 0x96, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, // ................
	0x00, 0x8d, 0x02, 0x00, 0x00, 0x93, 0x02, 0x00, 0x00, 0x8e, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, // ................
	0x00, 0x8e, 0x02, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x06, 0x00, 0x00, 0x00, 0x90, 0x02, 0x00, // ................
	0x00, 0x7c, 0x02, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x06, 0x00, 0x00, // .|...t..........
	0x00, 0x91, 0x02, 0x00, 0x00, 0x90, 0x02, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, // .........v......
	0x00, 0x06, 0x00, 0x00, 0x00, 0x92, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, // ................
	0x00, 0x91, 0x02, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x97, 0x02, 0x00, // .....x..........
	0x00, 0xf8, 0x00, 0x02, 0x00, 0x93, 0x02, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x06, 0x00, 0x00, // ................
	0x00, 0x95, 0x02, 0x00, 0x00, 0x7c, 0x02, 0x00, 0x00, 0x6f, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, // .....|...o......
	0x00, 0x97, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x96, 0x02, 0x00, 0x00, 0xff, 0x00, 0x01, // ................
	0x00, 0xf8, 0x00, 0x02, 0x00, 0x97, 0x02, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x06, 0x00, 0x00, // ................
	0x00, 0x22, 0x03, 0x00, 0x00, 0x92, 0x02, 0x00, 0x00, 0x8e, 0x02, 0x00, 0x00, 0x95, 0x02, 0x00, // ."..............
	0x00, 0x93, 0x02, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x06, 0x00, 0x00, 0x00, 0x7f, 0x02, 0x00, // .....Q..........
	0x00, 0x75, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0xa9, 0x02, 0x00, // .u..............
	0x00, 0x00, 0x00, 0x00, 0x00, 0xfb, 0x00, 0x03, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x9d, 0x02, 0x00, // ................
	0x00, 0xf8, 0x00, 0x02, 0x00, 0x9d, 0x02, 0x00, 0x00, 0xbc, 0x00, 0x05, 0x00, 0x09, 0x00, 0x00, // ................
	0x00, 0x9f, 0x02, 0x00, 0x00, 0x7f, 0x02, 0x00, 0x00, 0x6a, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, // .........j......
	0x00, 0xa8, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0x9f, 0x02, 0x00, // ................
	0x00, 0xa5, 0x02, 0x00, 0x00, 0xa0, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xa0, 0x02, 0x00, // ................
	0x00, 0x85, 0x00, 0x05, 0x00, 0x06, 0x00, 0x00, 0x00, 0xa2, 0x02, 0x00, 0x00, 0x7f, 0x02, 0x00, // ................
	0x00, 0x74, 0x00, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x06, 0x00, 0x00, 0x00, 0xa3, 0x02, 0x00, // .t..............
	0x00, 0xa2, 0x02, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x06, 0x00, 0x00, // .....v..........
	0x00, 0xa4, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0xa3, 0x02, 0x00, // ................
	0x00, 0x78, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0xa9, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, // .x..............
	0x00, 0xa5, 0x02, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x06, 0x00, 0x00, 0x00, 0xa7, 0x02, 0x00, // ................
	0x00, 0x7f, 0x02, 0x00, 0x00, 0x6f, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0xa9, 0x02, 0x00, // .....o..........
	0x00, 0xf8, 0x00, 0x02, 0x00, 0xa8, 0x02, 0x00, 0x00, 0xff, 0x00, 0x01, 0x00, 0xf8, 0x00, 0x02, // ................
	0x00, 0xa9, 0x02, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x06, 0x00, 0x00, 0x00, 0x23, 0x03, 0x00, // .............#..
	0x00, 0xa4, 0x02, 0x00, 0x00, 0xa0, 0x02, 0x00, 0x00, 0xa7, 0x02, 0x00, 0x00, 0xa5, 0x02, 0x00, // ................
	0x00, 0x51, 0x00, 0x05, 0x00, 0x06, 0x00, 0x00, 0x00, 0x82, 0x02, 0x00, 0x00, 0x75, 0x02, 0x00, // .Q...........u..
	0x00, 0x02, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0xbb, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0xfb, 0x00, 0x03, 0x00, 0x5c, 0x00, 0x00, 0x00, 0xaf, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, // ................
	0x00, 0xaf, 0x02, 0x00, 0x00, 0xbc, 0x00, 0x05, 0x00, 0x09, 0x00, 0x00, 0x00, 0xb1, 0x02, 0x00, // ................
	0x00, 0x82, 0x02, 0x00, 0x00, 0x6a, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0xba, 0x02, 0x00, // .....j..........
	0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0xb1, 0x02, 0x00, 0x00, 0xb7, 0x02, 0x00, // ................
	0x00, 0xb2, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xb2, 0x02, 0x00, 0x00, 0x85, 0x00, 0x05, // ................
	0x00, 0x06, 0x00, 0x00, 0x00, 0xb4, 0x02, 0x00, 0x00, 0x82, 0x02, 0x00, 0x00, 0x74, 0x00, 0x00, // .............t..
	0x00, 0x81, 0x00, 0x05, 0x00, 0x06, 0x00, 0x00, 0x00, 0xb5, 0x02, 0x00, 0x00, 0xb4, 0x02, 0x00, // ................
	0x00, 0x76, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x06, 0x00, 0x00, 0x00, 0xb6, 0x02, 0x00, // .v..............
	0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0xb5, 0x02, 0x00, 0x00, 0x78, 0x00, 0x00, // .............x..
	0x00, 0xf9, 0x00, 0x02, 0x00, 0xbb, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xb7, 0x02, 0x00, // ................
	0x00, 0x85, 0x00, 0x05, 0x00, 0x06, 0x00, 0x00, 0x00, 0xb9, 0x02, 0x00, 0x00, 0x82, 0x02, 0x00, // ................
	0x00, 0x6f, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0xbb, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, // .o..............
	0x00, 0xba, 0x02, 0x00, 0x00, 0xff, 0x00, 0x01, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xbb, 0x02, 0x00, // ................
	0x00, 0xf5, 0x00, 0x07, 0x00, 0x06, 0x00, 0x00, 0x00, 0x24, 0x03, 0x00, 0x00, 0xb6, 0x02, 0x00, // .........$......
	0x00, 0xb2, 0x02, 0x00, 0x00, 0xb9, 0x02, 0x00, 0x00, 0xb7, 0x02, 0x00, 0x00, 0x51, 0x00, 0x05, // .............Q..
	0x00, 0x06, 0x00, 0x00, 0x00, 0x85, 0x02, 0x00, 0x00, 0x75, 0x02, 0x00, 0x00, 0x03, 0x00, 0x00, // .........u......
	0x00, 0x50, 0x00, 0x07, 0x00, 0x11, 0x00, 0x00, 0x00, 0x86, 0x02, 0x00, 0x00, 0x22, 0x03, 0x00, // .P..........."..
	0x00, 0x23, 0x03, 0x00, 0x00, 0x24, 0x03, 0x00, 0x00, 0x85, 0x02, 0x00, 0x00, 0x8e, 0x00, 0x05, // .#...$..........
	0x00, 0x11, 0x00, 0x00, 0x00, 0x46, 0x02, 0x00, 0x00, 0x86, 0x02, 0x00, 0x00, 0x3d, 0x02, 0x00, // .....F.......=..
	0x00, 0x81, 0x00, 0x05, 0x00, 0x11, 0x00, 0x00, 0x00, 0x48, 0x02, 0x00, 0x00, 0x28, 0x03, 0x00, // .........H...(..
	0x00, 0x46, 0x02, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x49, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, // .F.......I......
	0x00, 0x49, 0x02, 0x00, 0x00, 0x80, 0x00, 0x05, 0x00, 0x18, 0x00, 0x00, 0x00, 0x4b, 0x02, 0x00, // .I...........K..
	0x00, 0x20, 0x03, 0x00, 0x00, 0xe1, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x35, 0x02, 0x00, // . ...........5..
	0x00, 0xf8, 0x00, 0x02, 0x00, 0x4c, 0x02, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x4d, 0x02, 0x00, // .....L.......M..
	0x00, 0xf8, 0x00, 0x02, 0x00, 0x4d, 0x02, 0x00, 0x00, 0x80, 0x00, 0x05, 0x00, 0x18, 0x00, 0x00, // .....M..........
	0x00, 0x4f, 0x02, 0x00, 0x00, 0x1b, 0x03, 0x00, 0x00, 0xe1, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, // .O..............
	0x00, 0x30, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x50, 0x02, 0x00, 0x00, 0x51, 0x00, 0x05, // .0.......P...Q..
	0x00, 0x06, 0x00, 0x00, 0x00, 0xc3, 0x02, 0x00, 0x00, 0x1c, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0xf7, 0x00, 0x03, 0x00, 0xde, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfb, 0x00, 0x03, // ................
	0x00, 0x5c, 0x00, 0x00, 0x00, 0xd2, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xd2, 0x02, 0x00, // ................
	0x00, 0xbc, 0x00, 0x05, 0x00, 0x09, 0x00, 0x00, 0x00, 0xd4, 0x02, 0x00, 0x00, 0xc3, 0x02, 0x00, // ................
	0x00, 0x90, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0xdd, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0xfa, 0x00, 0x04, 0x00, 0xd4, 0x02, 0x00, 0x00, 0xda, 0x02, 0x00, 0x00, 0xd5, 0x02, 0x00, // ................
	0x00, 0xf8, 0x00, 0x02, 0x00, 0xd5, 0x02, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x06, 0x00, 0x00, // ................
	0x00, 0xd7, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0xc3, 0x02, 0x00, // ................
	0x00, 0x9b, 0x00, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x06, 0x00, 0x00, 0x00, 0xd8, 0x02, 0x00, // ................
	0x00, 0x99, 0x00, 0x00, 0x00, 0xd7, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x06, 0x00, 0x00, // ................
	0x00, 0xd9, 0x02, 0x00, 0x00, 0xd8, 0x02, 0x00, 0x00, 0x9e, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, // ................
	0x00, 0xde, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xda, 0x02, 0x00, 0x00, 0x85, 0x00, 0x05, // ................
	0x00, 0x06, 0x00, 0x00, 0x00, 0xdc, 0x02, 0x00, 0x00, 0x94, 0x00, 0x00, 0x00, 0xc3, 0x02, 0x00, // ................
	0x00, 0xf9, 0x00, 0x02, 0x00, 0xde, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xdd, 0x02, 0x00, // ................
	0x00, 0xff, 0x00, 0x01, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xde, 0x02, 0x00, 0x00, 0xf5, 0x00, 0x07, // ................
	0x00, 0x06, 0x00, 0x00, 0x00, 0x1d, 0x03, 0x00, 0x00, 0xd9, 0x02, 0x00, 0x00, 0xd5, 0x02, 0x00, // ................
	0x00, 0xdc, 0x02, 0x00, 0x00, 0xda, 0x02, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x06, 0x00, 0x00, // .........Q......
	0x00, 0xc6, 0x02, 0x00, 0x00, 0x1c, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, // ................
	0x00, 0xf0, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfb, 0x00, 0x03, 0x00, 0x5c, 0x00, 0x00, // ................
	0x00, 0xe4, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xe4, 0x02, 0x00, 0x00, 0xbc, 0x00, 0x05, // ................
	0x00, 0x09, 0x00, 0x00, 0x00, 0xe6, 0x02, 0x00, 0x00, 0xc6, 0x02, 0x00, 0x00, 0x90, 0x00, 0x00, // ................
	0x00, 0xf7, 0x00, 0x03, 0x00, 0xef, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, // ................
	0x00, 0xe6, 0x02, 0x00, 0x00, 0xec, 0x02, 0x00, 0x00, 0xe7, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, // ................
	0x00, 0xe7, 0x02, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x06, 0x00, 0x00, 0x00, 0xe9, 0x02, 0x00, // ................
	0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0xc6, 0x02, 0x00, 0x00, 0x9b, 0x00, 0x00, // ................
	0x00, 0x85, 0x00, 0x05, 0x00, 0x06, 0x00, 0x00, 0x00, 0xea, 0x02, 0x00, 0x00, 0x99, 0x00, 0x00, // ................
	0x00, 0xe9, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x06, 0x00, 0x00, 0x00, 0xeb, 0x02, 0x00, // ................
	0x00, 0xea, 0x02, 0x00, 0x00, 0x9e, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0xf0, 0x02, 0x00, // ................
	0x00, 0xf8, 0x00, 0x02, 0x00, 0xec, 0x02, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x06, 0x00, 0x00, // ................
	0x00, 0xee, 0x02, 0x00, 0x00, 0x94, 0x00, 0x00, 0x00, 0xc6, 0x02, 0x00, 0x00, 0xf9, 0x00, 0x02, // ................
	0x00, 0xf0, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xef, 0x02, 0x00, 0x00, 0xff, 0x00, 0x01, // ................
	0x00, 0xf8, 0x00, 0x02, 0x00, 0xf0, 0x02, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x06, 0x00, 0x00, // ................
	0x00, 0x1e, 0x03, 0x00, 0x00, 0xeb, 0x02, 0x00, 0x00, 0xe7, 0x02, 0x00, 0x00, 0xee, 0x02, 0x00, // ................
	0x00, 0xec, 0x02, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x06, 0x00, 0x00, 0x00, 0xc9, 0x02, 0x00, // .....Q..........
	0x00, 0x1c, 0x03, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x02, 0x03, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0xfb, 0x00, 0x03, 0x00, 0x5c, 0x00, 0x00, 0x00, 0xf6, 0x02, 0x00, // ................
	0x00, 0xf8, 0x00, 0x02, 0x00, 0xf6, 0x02, 0x00, 0x00, 0xbc, 0x00, 0x05, 0x00, 0x09, 0x00, 0x00, // ................
	0x00, 0xf8, 0x02, 0x00, 0x00, 0xc9, 0x02, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, // ................
	0x00, 0x01, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0xf8, 0x02, 0x00, // ................
	0x00, 0xfe, 0x02, 0x00, 0x00, 0xf9, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xf9, 0x02, 0x00, // ................
	0x00, 0x0c, 0x00, 0x07, 0x00, 0x06, 0x00, 0x00, 0x00, 0xfb, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, // ................
	0x00, 0x1a, 0x00, 0x00, 0x00, 0xc9, 0x02, 0x00, 0x00, 0x9b, 0x00, 0x00, 0x00, 0x85, 0x00, 0x05, // ................
	0x00, 0x06, 0x00, 0x00, 0x00, 0xfc, 0x02, 0x00, 0x00, 0x99, 0x00, 0x00, 0x00, 0xfb, 0x02, 0x00, // ................
	0x00, 0x83, 0x00, 0x05, 0x00, 0x06, 0x00, 0x00, 0x00, 0xfd, 0x02, 0x00, 0x00, 0xfc, 0x02, 0x00, // ................
	0x00, 0x9e, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x02, 0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, // ................
	0x00, 0xfe, 0x02, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, // ................
	0x00, 0x94, 0x00, 0x00, 0x00, 0xc9, 0x02, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x02, 0x03, 0x00, // ................
	0x00, 0xf8, 0x00, 0x02, 0x00, 0x01, 0x03, 0x00, 0x00, 0xff, 0x00, 0x01, 0x00, 0xf8, 0x00, 0x02, // ................
	0x00, 0x02, 0x03, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x06, 0x00, 0x00, 0x00, 0x1f, 0x03, 0x00, // ................
	0x00, 0xfd, 0x02, 0x00, 0x00, 0xf9, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0xfe, 0x02, 0x00, // ................
	0x00, 0x51, 0x00, 0x05, 0x00, 0x06, 0x00, 0x00, 0x00, 0xcc, 0x02, 0x00, 0x00, 0x1c, 0x03, 0x00, // .Q..............
	0x00, 0x03, 0x00, 0x00, 0x00, 0x50, 0x00, 0x07, 0x00, 0x11, 0x00, 0x00, 0x00, 0xcd, 0x02, 0x00, // .....P..........
	0x00, 0x1d, 0x03, 0x00, 0x00, 0x1e, 0x03, 0x00, 0x00, 0x1f, 0x03, 0x00, 0x00, 0xcc, 0x02, 0x00, // ................
	0x00, 0x3d, 0x00, 0x04, 0x00, 0xb7, 0x00, 0x00, 0x00, 0x55, 0x02, 0x00, 0x00, 0xb9, 0x00, 0x00, // .=.......U......
	0x00, 0x63, 0x00, 0x04, 0x00, 0x55, 0x02, 0x00, 0x00, 0x1e, 0x02, 0x00, 0x00, 0xcd, 0x02, 0x00, // .c...U..........
	0x00, 0xf9, 0x00, 0x02, 0x00, 0x58, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x58, 0x02, 0x00, // .....X.......X..
	0x00, 0xfd, 0x00, 0x01, 0x00, 0x38, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,                   // .....8.......
};
static const bgfx::EmbeddedShader cs_mipmap_srgba8 = BGFX_EMBEDDED_SHADER(cs_mipmap_srgba8);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Build of compute shader from cs_mipmap.sc to cs_mipmap_rgba8 with options: FMT_rgba8
static const uint8_t cs_mipmap_rgba8_mtl[3238] =
{
	0x43, 0x53, 0x48, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x0d, 0x75, // CSH............u
	0x5f, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x01, 0x01, 0xff, 0xff, // _Destination....
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x75, 0x5f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x01, // .......u_Source.
	0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x75, 0x5f, 0x53, 0x6f, 0x75, 0x72, // ..........u_Sour
	0x63, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x08, 0x00, // ce..............
	0x01, 0x00, 0x4c, 0x0c, 0x00, 0x00, 0x23, 0x70, 0x72, 0x61, 0x67, 0x6d, 0x61, 0x20, 0x63, 0x6c, // ..L...#pragma cl
	0x61, 0x6e, 0x67, 0x20, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x20, 0x69, // ang diagnostic i
	0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x20, 0x22, 0x2d, 0x57, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, // gnored "-Wmissin
	0x67, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x22, 0x0a, 0x23, 0x70, // g-prototypes".#p
	0x72, 0x61, 0x67, 0x6d, 0x61, 0x20, 0x63, 0x6c, 0x61, 0x6e, 0x67, 0x20, 0x64, 0x69, 0x61, 0x67, // ragma clang diag
	0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x20, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x20, 0x22, // nostic ignored "
	0x2d, 0x57, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2d, 0x62, 0x72, 0x61, 0x63, 0x65, 0x73, // -Wmissing-braces
	0x22, 0x0a, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x6d, 0x65, 0x74, // "..#include <met
	0x61, 0x6c, 0x5f, 0x73, 0x74, 0x64, 0x6c, 0x69, 0x62, 0x3e, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, // al_stdlib>.#incl
	0x75, 0x64, 0x65, 0x20, 0x3c, 0x73, 0x69, 0x6d, 0x64, 0x2f, 0x73, 0x69, 0x6d, 0x64, 0x2e, 0x68, // ude <simd/simd.h
	0x3e, 0x0a, 0x0a, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, // >..using namespa
	0x63, 0x65, 0x20, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x3b, 0x0a, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, // ce metal;..templ
	0x61, 0x74, 0x65, 0x3c, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x54, 0x2c, 0x20, // ate<typename T, 
	0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x20, 0x4e, 0x75, 0x6d, 0x3e, 0x0a, 0x73, 0x74, 0x72, 0x75, // size_t Num>.stru
	0x63, 0x74, 0x20, 0x73, 0x70, 0x76, 0x55, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x41, 0x72, 0x72, 0x61, // ct spvUnsafeArra
	0x79, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x54, 0x20, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, // y.{.    T elemen
	0x74, 0x73, 0x5b, 0x4e, 0x75, 0x6d, 0x20, 0x3f, 0x20, 0x4e, 0x75, 0x6d, 0x20, 0x3a, 0x20, 0x31, // ts[Num ? Num : 1
	0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x74, 0x68, 0x72, 0x65, // ];.    .    thre
	0x61, 0x64, 0x20, 0x54, 0x26, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x5b, // ad T& operator [
	0x5d, 0x20, 0x28, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x20, 0x70, 0x6f, 0x73, 0x29, 0x20, 0x74, // ] (size_t pos) t
	0x68, 0x72, 0x65, 0x61, 0x64, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, // hread.    {.    
	0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x65, 0x6c, 0x65, 0x6d, 0x65, //     return eleme
	0x6e, 0x74, 0x73, 0x5b, 0x70, 0x6f, 0x73, 0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, // nts[pos];.    }.
	0x20, 0x20, 0x20, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x78, 0x70, 0x72, 0x20, 0x63, 0x6f, //     constexpr co
	0x6e, 0x73, 0x74, 0x20, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x20, 0x54, 0x26, 0x20, 0x6f, 0x70, // nst thread T& op
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x5b, 0x5d, 0x20, 0x28, 0x73, 0x69, 0x7a, 0x65, 0x5f, // erator [] (size_
	0x74, 0x20, 0x70, 0x6f, 0x73, 0x29, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x74, 0x68, 0x72, // t pos) const thr
	0x65, 0x61, 0x64, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ead.    {.      
	0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, //   return element
	0x73, 0x5b, 0x70, 0x6f, 0x73, 0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, // s[pos];.    }.  
	0x20, 0x20, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x54, 0x26, //   .    device T&
	0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x5b, 0x5d, 0x20, 0x28, 0x73, 0x69, //  operator [] (si
	0x7a, 0x65, 0x5f, 0x74, 0x20, 0x70, 0x6f, 0x73, 0x29, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, // ze_t pos) device
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x72, // .    {.        r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5b, 0x70, // eturn elements[p
	0x6f, 0x73, 0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x63, // os];.    }.    c
	0x6f, 0x6e, 0x73, 0x74, 0x65, 0x78, 0x70, 0x72, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x64, // onstexpr const d
	0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x54, 0x26, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, // evice T& operato
	0x72, 0x20, 0x5b, 0x5d, 0x20, 0x28, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x20, 0x70, 0x6f, 0x73, // r [] (size_t pos
	0x29, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x0a, 0x20, // ) const device. 
	0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, //    {.        ret
	0x75, 0x72, 0x6e, 0x20, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5b, 0x70, 0x6f, 0x73, // urn elements[pos
	0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x0a, 0x20, 0x20, // ];.    }.    .  
	0x20, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x78, 0x70, 0x72, 0x20, 0x63, 0x6f, 0x6e, 0x73, //   constexpr cons
	0x74, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x20, 0x54, 0x26, 0x20, 0x6f, 0x70, // t constant T& op
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x5b, 0x5d, 0x20, 0x28, 0x73, 0x69, 0x7a, 0x65, 0x5f, // erator [] (size_
	0x74, 0x20, 0x70, 0x6f, 0x73, 0x29, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x63, 0x6f, 0x6e, // t pos) const con
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, // stant.    {.    
	0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x65, 0x6c, 0x65, 0x6d, 0x65, //     return eleme
	0x6e, 0x74, 0x73, 0x5b, 0x70, 0x6f, 0x73, 0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, // nts[pos];.    }.
	0x20, 0x20, 0x20, 0x20, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x67, //     .    threadg
	0x72, 0x6f, 0x75, 0x70, 0x20, 0x54, 0x26, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, // roup T& operator
	0x20, 0x5b, 0x5d, 0x20, 0x28, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x20, 0x70, 0x6f, 0x73, 0x29, //  [] (size_t pos)
	0x20, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x0a, 0x20, 0x20, 0x20, //  threadgroup.   
	0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, //  {.        retur
	0x6e, 0x20, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5b, 0x70, 0x6f, 0x73, 0x5d, 0x3b, // n elements[pos];
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, // .    }.    const
	0x65, 0x78, 0x70, 0x72, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x74, 0x68, 0x72, 0x65, 0x61, // expr const threa
	0x64, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x20, 0x54, 0x26, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, // dgroup T& operat
	0x6f, 0x72, 0x20, 0x5b, 0x5d, 0x20, 0x28, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x20, 0x70, 0x6f, // or [] (size_t po
	0x73, 0x29, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x67, // s) const threadg
	0x72, 0x6f, 0x75, 0x70, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // roup.    {.     
	0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, //    return elemen
	0x74, 0x73, 0x5b, 0x70, 0x6f, 0x73, 0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x7d, // ts[pos];.    }.}
	0x3b, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x20, 0x73, 0x70, 0x76, 0x55, // ;..constant spvU
	0x6e, 0x73, 0x61, 0x66, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, // nsafeArray<float
	0x2c, 0x20, 0x34, 0x3e, 0x20, 0x5f, 0x31, 0x39, 0x38, 0x20, 0x3d, 0x20, 0x73, 0x70, 0x76, 0x55, // , 4> _198 = spvU
	0x6e, 0x73, 0x61, 0x66, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, // nsafeArray<float
	0x2c, 0x20, 0x34, 0x3e, 0x28, 0x7b, 0x20, 0x39, 0x2e, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x37, // , 4>({ 9.8999997
	0x31, 0x33, 0x35, 0x32, 0x35, 0x31, 0x37, 0x36, 0x30, 0x34, 0x38, 0x32, 0x37, 0x38, 0x38, 0x30, // 1352517604827880
	0x38, 0x35, 0x39, 0x33, 0x37, 0x35, 0x65, 0x2d, 0x30, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, // 859375e-05, 0.00
	0x34, 0x38, 0x37, 0x39, 0x39, 0x39, 0x39, 0x39, 0x30, 0x35, 0x38, 0x32, 0x34, 0x36, 0x36, 0x31, // 4879999905824661
	0x32, 0x35, 0x34, 0x38, 0x38, 0x32, 0x38, 0x31, 0x32, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, // 2548828125, 0.00
	0x34, 0x38, 0x37, 0x39, 0x39, 0x39, 0x39, 0x39, 0x30, 0x35, 0x38, 0x32, 0x34, 0x36, 0x36, 0x31, // 4879999905824661
	0x32, 0x35, 0x34, 0x38, 0x38, 0x32, 0x38, 0x31, 0x32, 0x35, 0x2c, 0x20, 0x39, 0x2e, 0x38, 0x39, // 2548828125, 9.89
	0x39, 0x39, 0x39, 0x39, 0x37, 0x31, 0x33, 0x35, 0x32, 0x35, 0x31, 0x37, 0x36, 0x30, 0x34, 0x38, // 9999713525176048
	0x32, 0x37, 0x38, 0x38, 0x30, 0x38, 0x35, 0x39, 0x33, 0x37, 0x35, 0x65, 0x2d, 0x30, 0x35, 0x20, // 27880859375e-05 
	0x7d, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x20, 0x73, 0x70, 0x76, // });.constant spv
	0x55, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x3c, 0x66, 0x6c, 0x6f, 0x61, // UnsafeArray<floa
	0x74, 0x2c, 0x20, 0x34, 0x3e, 0x20, 0x5f, 0x32, 0x30, 0x30, 0x20, 0x3d, 0x20, 0x73, 0x70, 0x76, // t, 4> _200 = spv
	0x55, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x3c, 0x66, 0x6c, 0x6f, 0x61, // UnsafeArray<floa
	0x74, 0x2c, 0x20, 0x34, 0x3e, 0x28, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x34, 0x38, 0x37, 0x39, // t, 4>({ 0.004879
	0x39, 0x39, 0x39, 0x39, 0x30, 0x35, 0x38, 0x32, 0x34, 0x36, 0x36, 0x31, 0x32, 0x35, 0x34, 0x38, // 9999058246612548
	0x38, 0x32, 0x38, 0x31, 0x32, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x32, 0x34, 0x30, 0x31, 0x34, 0x31, // 828125, 0.240141
	0x30, 0x30, 0x34, 0x33, 0x32, 0x33, 0x39, 0x35, 0x39, 0x33, 0x35, 0x30, 0x35, 0x38, 0x35, 0x39, // 0043239593505859
	0x33, 0x37, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x32, 0x34, 0x30, 0x31, 0x34, 0x31, 0x30, 0x30, 0x34, // 375, 0.240141004
	0x33, 0x32, 0x33, 0x39, 0x35, 0x39, 0x33, 0x35, 0x30, 0x35, 0x38, 0x35, 0x39, 0x33, 0x37, 0x35, // 3239593505859375
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x34, 0x38, 0x37, 0x39, 0x39, 0x39, 0x39, 0x39, 0x30, 0x35, // , 0.004879999905
	0x38, 0x32, 0x34, 0x36, 0x36, 0x31, 0x32, 0x35, 0x34, 0x38, 0x38, 0x32, 0x38, 0x31, 0x32, 0x35, // 8246612548828125
	0x20, 0x7d, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x20, 0x73, 0x70, //  });.constant sp
	0x76, 0x55, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x3c, 0x73, 0x70, 0x76, // vUnsafeArray<spv
	0x55, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x3c, 0x66, 0x6c, 0x6f, 0x61, // UnsafeArray<floa
	0x74, 0x2c, 0x20, 0x34, 0x3e, 0x2c, 0x20, 0x34, 0x3e, 0x20, 0x5f, 0x32, 0x30, 0x31, 0x20, 0x3d, // t, 4>, 4> _201 =
	0x20, 0x73, 0x70, 0x76, 0x55, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x3c, //  spvUnsafeArray<
	0x73, 0x70, 0x76, 0x55, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x3c, 0x66, // spvUnsafeArray<f
	0x6c, 0x6f, 0x61, 0x74, 0x2c, 0x20, 0x34, 0x3e, 0x2c, 0x20, 0x34, 0x3e, 0x28, 0x7b, 0x20, 0x73, // loat, 4>, 4>({ s
	0x70, 0x76, 0x55, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x3c, 0x66, 0x6c, // pvUnsafeArray<fl
	0x6f, 0x61, 0x74, 0x2c, 0x20, 0x34, 0x3e, 0x28, 0x7b, 0x20, 0x39, 0x2e, 0x38, 0x39, 0x39, 0x39, // oat, 4>({ 9.8999
	0x39, 0x39, 0x37, 0x31, 0x33, 0x35, 0x32, 0x35, 0x31, 0x37, 0x36, 0x30, 0x34, 0x38, 0x32, 0x37, // 9971352517604827
	0x38, 0x38, 0x30, 0x38, 0x35, 0x39, 0x33, 0x37, 0x35, 0x65, 0x2d, 0x30, 0x35, 0x2c, 0x20, 0x30, // 880859375e-05, 0
	0x2e, 0x30, 0x30, 0x34, 0x38, 0x37, 0x39, 0x39, 0x39, 0x39, 0x39, 0x30, 0x35, 0x38, 0x32, 0x34, // .004879999905824
	0x36, 0x36, 0x31, 0x32, 0x35, 0x34, 0x38, 0x38, 0x32, 0x38, 0x31, 0x32, 0x35, 0x2c, 0x20, 0x30, // 6612548828125, 0
	0x2e, 0x30, 0x30, 0x34, 0x38, 0x37, 0x39, 0x39, 0x39, 0x39, 0x39, 0x30, 0x35, 0x38, 0x32, 0x34, // .004879999905824
	0x36, 0x36, 0x31, 0x32, 0x35, 0x34, 0x38, 0x38, 0x32, 0x38, 0x31, 0x32, 0x35, 0x2c, 0x20, 0x39, // 6612548828125, 9
	0x2e, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x37, 0x31, 0x33, 0x35, 0x32, 0x35, 0x31, 0x37, 0x36, // .899999713525176
	0x30, 0x34, 0x38, 0x32, 0x37, 0x38, 0x38, 0x30, 0x38, 0x35, 0x39, 0x33, 0x37, 0x35, 0x65, 0x2d, // 04827880859375e-
	0x30, 0x35, 0x20, 0x7d, 0x29, 0x2c, 0x20, 0x73, 0x70, 0x76, 0x55, 0x6e, 0x73, 0x61, 0x66, 0x65, // 05 }), spvUnsafe
	0x41, 0x72, 0x72, 0x61, 0x79, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x2c, 0x20, 0x34, 0x3e, 0x28, // Array<float, 4>(
	0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x34, 0x38, 0x37, 0x39, 0x39, 0x39, 0x39, 0x39, 0x30, 0x35, // { 0.004879999905
	0x38, 0x32, 0x34, 0x36, 0x36, 0x31, 0x32, 0x35, 0x34, 0x38, 0x38, 0x32, 0x38, 0x31, 0x32, 0x35, // 8246612548828125
	0x2c, 0x20, 0x30, 0x2e, 0x32, 0x34, 0x30, 0x31, 0x34, 0x31, 0x30, 0x30, 0x34, 0x33, 0x32, 0x33, // , 0.240141004323
	0x39, 0x35, 0x39, 0x33, 0x35, 0x30, 0x35, 0x38, 0x35, 0x39, 0x33, 0x37, 0x35, 0x2c, 0x20, 0x30, // 9593505859375, 0
	0x2e, 0x32, 0x34, 0x30, 0x31, 0x34, 0x31, 0x30, 0x30, 0x34, 0x33, 0x32, 0x33, 0x39, 0x35, 0x39, // .240141004323959
	0x33, 0x35, 0x30, 0x35, 0x38, 0x35, 0x39, 0x33, 0x37, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, // 3505859375, 0.00
	0x34, 0x38, 0x37, 0x39, 0x39, 0x39, 0x39, 0x39, 0x30, 0x35, 0x38, 0x32, 0x34, 0x36, 0x36, 0x31, // 4879999905824661
	0x32, 0x35, 0x34, 0x38, 0x38, 0x32, 0x38, 0x31, 0x32, 0x35, 0x20, 0x7d, 0x29, 0x2c, 0x20, 0x73, // 2548828125 }), s
	0x70, 0x76, 0x55, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x3c, 0x66, 0x6c, // pvUnsafeArray<fl
	0x6f, 0x61, 0x74, 0x2c, 0x20, 0x34, 0x3e, 0x28, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x34, 0x38, // oat, 4>({ 0.0048
	0x37, 0x39, 0x39, 0x39, 0x39, 0x39, 0x30, 0x35, 0x38, 0x32, 0x34, 0x36, 0x36, 0x31, 0x32, 0x35, // 7999990582466125
	0x34, 0x38, 0x38, 0x32, 0x38, 0x31, 0x32, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x32, 0x34, 0x30, 0x31, // 48828125, 0.2401
	0x34, 0x31, 0x30, 0x30, 0x34, 0x33, 0x32, 0x33, 0x39, 0x35, 0x39, 0x33, 0x35, 0x30, 0x35, 0x38, // 4100432395935058
	0x35, 0x39, 0x33, 0x37, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x32, 0x34, 0x30, 0x31, 0x34, 0x31, 0x30, // 59375, 0.2401410
	0x30, 0x34, 0x33, 0x32, 0x33, 0x39, 0x35, 0x39, 0x33, 0x35, 0x30, 0x35, 0x38, 0x35, 0x39, 0x33, // 0432395935058593
	0x37, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x34, 0x38, 0x37, 0x39, 0x39, 0x39, 0x39, 0x39, // 75, 0.0048799999
	0x30, 0x35, 0x38, 0x32, 0x34, 0x36, 0x36, 0x31, 0x32, 0x35, 0x34, 0x38, 0x38, 0x32, 0x38, 0x31, // 0582466125488281
	0x32, 0x35, 0x20, 0x7d, 0x29, 0x2c, 0x20, 0x73, 0x70, 0x76, 0x55, 0x6e, 0x73, 0x61, 0x66, 0x65, // 25 }), spvUnsafe
	0x41, 0x72, 0x72, 0x61, 0x79, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x2c, 0x20, 0x34, 0x3e, 0x28, // Array<float, 4>(
	0x7b, 0x20, 0x39, 0x2e, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x37, 0x31, 0x33, 0x35, 0x32, 0x35, // { 9.899999713525
	0x31, 0x37, 0x36, 0x30, 0x34, 0x38, 0x32, 0x37, 0x38, 0x38, 0x30, 0x38, 0x35, 0x39, 0x33, 0x37, // 1760482788085937
	0x35, 0x65, 0x2d, 0x30, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x34, 0x38, 0x37, 0x39, 0x39, // 5e-05, 0.0048799
	0x39, 0x39, 0x39, 0x30, 0x35, 0x38, 0x32, 0x34, 0x36, 0x36, 0x31, 0x32, 0x35, 0x34, 0x38, 0x38, // 9990582466125488
	0x32, 0x38, 0x31, 0x32, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x34, 0x38, 0x37, 0x39, 0x39, // 28125, 0.0048799
	0x39, 0x39, 0x39, 0x30, 0x35, 0x38, 0x32, 0x34, 0x36, 0x36, 0x31, 0x32, 0x35, 0x34, 0x38, 0x38, // 9990582466125488
	0x32, 0x38, 0x31, 0x32, 0x35, 0x2c, 0x20, 0x39, 0x2e, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x37, // 28125, 9.8999997
	0x31, 0x33, 0x35, 0x32, 0x35, 0x31, 0x37, 0x36, 0x30, 0x34, 0x38, 0x32, 0x37, 0x38, 0x38, 0x30, // 1352517604827880
	0x38, 0x35, 0x39, 0x33, 0x37, 0x35, 0x65, 0x2d, 0x30, 0x35, 0x20, 0x7d, 0x29, 0x20, 0x7d, 0x29, // 859375e-05 }) })
	0x3b, 0x0a, 0x0a, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x20, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x78, // ;..kernel void x
	0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, // latMtlMain(textu
	0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3e, 0x20, 0x75, 0x5f, 0x53, 0x6f, // re2d<float> u_So
	0x75, 0x72, 0x63, 0x65, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x30, // urce [[texture(0
	0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, // )]], texture2d<f
	0x6c, 0x6f, 0x61, 0x74, 0x2c, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x3a, 0x3a, 0x77, 0x72, // loat, access::wr
	0x69, 0x74, 0x65, 0x3e, 0x20, 0x75, 0x5f, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, // ite> u_Destinati
	0x6f, 0x6e, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x31, 0x29, 0x5d, // on [[texture(1)]
	0x5d, 0x2c, 0x20, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x20, 0x67, 0x6c, 0x5f, 0x47, 0x6c, 0x6f, 0x62, // ], uint3 gl_Glob
	0x61, 0x6c, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x20, 0x5b, // alInvocationID [
	0x5b, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, // [thread_position
	0x5f, 0x69, 0x6e, 0x5f, 0x67, 0x72, 0x69, 0x64, 0x5d, 0x5d, 0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, // _in_grid]]).{.  
	0x20, 0x20, 0x64, 0x6f, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, //   do.    {.     
	0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x61, 0x6e, 0x79, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, //    if (any(float
	0x32, 0x28, 0x69, 0x6e, 0x74, 0x33, 0x28, 0x67, 0x6c, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, // 2(int3(gl_Global
	0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x29, 0x2e, 0x78, 0x79, // InvocationID).xy
	0x29, 0x20, 0x3e, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x69, 0x6e, 0x74, 0x32, // ) >= float2(int2
	0x28, 0x75, 0x69, 0x6e, 0x74, 0x32, 0x28, 0x75, 0x5f, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, // (uint2(u_Destina
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x28, 0x29, // tion.get_width()
	0x2c, 0x20, 0x75, 0x5f, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, // , u_Destination.
	0x67, 0x65, 0x74, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x28, 0x29, 0x29, 0x29, 0x29, 0x29, // get_height()))))
	0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, // ).        {.    
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, //         break;. 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //        }.       
	0x20, 0x69, 0x6e, 0x74, 0x32, 0x20, 0x5f, 0x34, 0x33, 0x34, 0x20, 0x3d, 0x20, 0x28, 0x69, 0x6e, //  int2 _434 = (in
	0x74, 0x33, 0x28, 0x67, 0x6c, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x6f, // t3(gl_GlobalInvo
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x29, 0x2e, 0x78, 0x79, 0x20, 0x2a, 0x20, 0x69, // cationID).xy * i
	0x6e, 0x74, 0x32, 0x28, 0x32, 0x29, 0x29, 0x20, 0x2d, 0x20, 0x69, 0x6e, 0x74, 0x32, 0x28, 0x31, // nt2(2)) - int2(1
	0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x6e, 0x74, 0x20, 0x5f, // );.        int _
	0x35, 0x31, 0x38, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, // 518;.        flo
	0x61, 0x74, 0x34, 0x20, 0x5f, 0x35, 0x31, 0x39, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // at4 _519;.      
	0x20, 0x20, 0x5f, 0x35, 0x31, 0x39, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, //   _519 = float4(
	0x30, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x35, // 0.0);.        _5
	0x31, 0x38, 0x20, 0x3d, 0x20, 0x30, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 18 = 0;.        
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x35, 0x32, 0x32, 0x3b, 0x0a, 0x20, 0x20, 0x20, // float4 _522;.   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x28, 0x3b, 0x20, 0x5f, 0x35, 0x31, 0x38, //      for (; _518
	0x20, 0x3c, 0x20, 0x34, 0x3b, 0x20, 0x5f, 0x35, 0x31, 0x39, 0x20, 0x3d, 0x20, 0x5f, 0x35, 0x32, //  < 4; _519 = _52
	0x32, 0x2c, 0x20, 0x5f, 0x35, 0x31, 0x38, 0x2b, 0x2b, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // 2, _518++).     
	0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //    {.           
	0x20, 0x5f, 0x35, 0x32, 0x32, 0x20, 0x3d, 0x20, 0x5f, 0x35, 0x31, 0x39, 0x3b, 0x0a, 0x20, 0x20, //  _522 = _519;.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x28, 0x69, //           for (i
	0x6e, 0x74, 0x20, 0x5f, 0x35, 0x32, 0x30, 0x20, 0x3d, 0x20, 0x30, 0x3b, 0x20, 0x5f, 0x35, 0x32, // nt _520 = 0; _52
	0x30, 0x20, 0x3c, 0x20, 0x34, 0x3b, 0x20, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 0 < 4; ).       
	0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //      {.         
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x35, 0x32, 0x32, 0x20, 0x2b, 0x3d, 0x20, 0x28, //        _522 += (
	0x75, 0x5f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x28, 0x75, 0x69, // u_Source.read(ui
	0x6e, 0x74, 0x32, 0x28, 0x28, 0x5f, 0x34, 0x33, 0x34, 0x20, 0x2b, 0x20, 0x69, 0x6e, 0x74, 0x32, // nt2((_434 + int2
	0x28, 0x5f, 0x35, 0x32, 0x30, 0x2c, 0x20, 0x5f, 0x35, 0x31, 0x38, 0x29, 0x29, 0x29, 0x2c, 0x20, // (_520, _518))), 
	0x30, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x32, 0x30, 0x31, 0x5b, 0x5f, 0x35, 0x32, 0x30, 0x5d, 0x5b, // 0) * _201[_520][
	0x5f, 0x35, 0x31, 0x38, 0x5d, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // _518]);.        
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x35, 0x32, 0x30, 0x2b, 0x2b, 0x3b, 0x0a, //         _520++;.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // continue;.      
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //       }.        
	0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x75, 0x5f, 0x44, 0x65, 0x73, 0x74, // }.        u_Dest
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x28, 0x5f, 0x35, // ination.write(_5
	0x31, 0x39, 0x2c, 0x20, 0x75, 0x69, 0x6e, 0x74, 0x32, 0x28, 0x69, 0x6e, 0x74, 0x33, 0x28, 0x67, // 19, uint2(int3(g
	0x6c, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, // l_GlobalInvocati
	0x6f, 0x6e, 0x49, 0x44, 0x29, 0x2e, 0x78, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, // onID).xy));.    
	0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, //     break;.    }
	0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x28, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x7d, //  while(false);.}
	0x0a, 0x0a, 0x00, 0x00, 0x20, 0x00,                                                             // .... .
};
static const uint8_t cs_mipmap_rgba8_essl[3945] =
{
	0x43, 0x53, 0x48, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x56, 0x0f, // CSH...........V.
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x33, 0x31, 0x30, 0x20, 0x65, // ..#version 310 e
	0x73, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, // s.vec3 instMul(v
	0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, // ec3 _vec, mat3 _
	0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, // mtx) { return ( 
	0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, // (_vec) * (_mtx) 
	0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, // ); }.vec3 instMu
	0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, // l(mat3 _mtx, vec
	0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // 3 _vec) { return
	0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, //  ( (_mtx) * (_ve
	0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, // c) ); }.vec4 ins
	0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, // tMul(vec4 _vec, 
	0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // mat4 _mtx) { ret
	0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, // urn ( (_vec) * (
	0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, // _mtx) ); }.vec4 
	0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, // instMul(mat4 _mt
	0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, // x, vec4 _vec) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, // return ( (_mtx) 
	0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, 0x6c, // * (_vec) ); }.fl
	0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, 0x70, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x61, // oat rcp(float _a
	0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x5f, // ) { return 1.0/_
	0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, // a; }.vec2 rcp(ve
	0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // c2 _a) { return 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, // vec2(1.0)/_a; }.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x61, // vec3 rcp(vec3 _a
	0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, // ) { return vec3(
	0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, // 1.0)/_a; }.vec4 
	0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, // rcp(vec4 _a) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, // eturn vec4(1.0)/
	0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x65, 0x63, 0x32, 0x5f, // _a; }.vec2 vec2_
	0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, // splat(float _x) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, // { return vec2(_x
	0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, // , _x); }.vec3 ve
	0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, // c3_splat(float _
	0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, // x) { return vec3
	0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, // (_x, _x, _x); }.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, // vec4 vec4_splat(
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // float _x) { retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, // rn vec4(_x, _x, 
	0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x32, // _x, _x); }.uvec2
	0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, //  uvec2_splat(uin
	0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, // t _x) { return u
	0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, // vec2(_x, _x); }.
	0x75, 0x76, 0x65, 0x63, 0x33, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, // uvec3 uvec3_spla
	0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // t(uint _x) { ret
	0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, // urn uvec3(_x, _x
	0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, // , _x); }.uvec4 u
	0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, // vec4_splat(uint 
	0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, // _x) { return uve
	0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, // c4(_x, _x, _x, _
	0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, // x); }.mat4 mtxFr
	0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, // omRows(vec4 _0, 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, // vec4 _1, vec4 _2
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // , vec4 _3).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, // urn transpose(ma
	0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, // t4(_0, _1, _2, _
	0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, // 3) );.}.mat4 mtx
	0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, // FromCols(vec4 _0
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // , vec4 _1, vec4 
	0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, // _2, vec4 _3).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, // eturn mat4(_0, _
	0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, // 1, _2, _3);.}.ma
	0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, // t3 mtxFromRows(v
	0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, // ec3 _0, vec3 _1,
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, //  vec3 _2).{.retu
	0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, // rn transpose(mat
	0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x20, 0x29, 0x3b, // 3(_0, _1, _2) );
	0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, // .}.mat3 mtxFromC
	0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, // ols(vec3 _0, vec
	0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, // 3 _1, vec3 _2).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, // .return mat3(_0,
	0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, //  _1, _2);.}.unif
	0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x52, // orm vec4 u_viewR
	0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, // ect;.uniform vec
	0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x54, 0x65, 0x78, 0x65, 0x6c, 0x3b, 0x0a, 0x75, // 4 u_viewTexel;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, // niform mat4 u_vi
	0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, // ew;.uniform mat4
	0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, //  u_invView;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x3b, // orm mat4 u_proj;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, // .uniform mat4 u_
	0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // invProj;.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, //  mat4 u_viewProj
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, // ;.uniform mat4 u
	0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, // _invViewProj;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, // iform mat4 u_mod
	0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // el[32];.uniform 
	0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, // mat4 u_modelView
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, // ;.uniform mat4 u
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, // _modelViewProj;.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x61, // uniform vec4 u_a
	0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x66, 0x34, 0x3b, 0x0a, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, // lphaRef4;.layout
	0x28, 0x72, 0x67, 0x62, 0x61, 0x38, 0x2c, 0x20, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x3d, // (rgba8, binding=
	0x30, 0x29, 0x20, 0x72, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x75, 0x6e, 0x69, 0x66, // 0) readonly unif
	0x6f, 0x72, 0x6d, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x32, // orm highp image2
	0x44, 0x20, 0x75, 0x5f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x3b, 0x0a, 0x6c, 0x61, 0x79, 0x6f, // D u_Source;.layo
	0x75, 0x74, 0x28, 0x72, 0x67, 0x62, 0x61, 0x38, 0x2c, 0x20, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, // ut(rgba8, bindin
	0x67, 0x3d, 0x31, 0x29, 0x20, 0x77, 0x72, 0x69, 0x74, 0x65, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x75, // g=1) writeonly u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x69, 0x6d, 0x61, // niform highp ima
	0x67, 0x65, 0x32, 0x44, 0x20, 0x75, 0x5f, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, // ge2D u_Destinati
	0x6f, 0x6e, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // on;.const float 
	0x67, 0x5f, 0x6b, 0x61, 0x69, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x34, 0x5b, // g_kaiserKernel4[
	0x34, 0x5d, 0x5b, 0x34, 0x5d, 0x20, 0x3d, 0x20, 0x7b, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, // 4][4] = {.{ 0.00
	0x30, 0x30, 0x39, 0x39, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x34, 0x38, 0x38, 0x30, 0x2c, 0x20, // 0099, 0.004880, 
	0x30, 0x2e, 0x30, 0x30, 0x34, 0x38, 0x38, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, // 0.004880, 0.0000
	0x39, 0x39, 0x20, 0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x34, 0x38, 0x38, 0x30, // 99 },.{ 0.004880
	0x2c, 0x20, 0x30, 0x2e, 0x32, 0x34, 0x30, 0x31, 0x34, 0x31, 0x2c, 0x20, 0x30, 0x2e, 0x32, 0x34, // , 0.240141, 0.24
	0x30, 0x31, 0x34, 0x31, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x34, 0x38, 0x38, 0x30, 0x20, 0x7d, // 0141, 0.004880 }
	0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x34, 0x38, 0x38, 0x30, 0x2c, 0x20, 0x30, 0x2e, // ,.{ 0.004880, 0.
	0x32, 0x34, 0x30, 0x31, 0x34, 0x31, 0x2c, 0x20, 0x30, 0x2e, 0x32, 0x34, 0x30, 0x31, 0x34, 0x31, // 240141, 0.240141
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x34, 0x38, 0x38, 0x30, 0x20, 0x7d, 0x2c, 0x0a, 0x7b, 0x20, // , 0.004880 },.{ 
	0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x39, 0x39, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x34, 0x38, // 0.000099, 0.0048
	0x38, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x34, 0x38, 0x38, 0x30, 0x2c, 0x20, 0x30, 0x2e, // 80, 0.004880, 0.
	0x30, 0x30, 0x30, 0x30, 0x39, 0x39, 0x20, 0x7d, 0x0a, 0x7d, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // 000099 }.};.cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x67, 0x5f, 0x6b, 0x61, 0x69, 0x73, 0x65, 0x72, // t float g_kaiser
	0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x36, 0x5b, 0x36, 0x5d, 0x5b, 0x36, 0x5d, 0x20, 0x3d, 0x20, // Kernel6[6][6] = 
	0x7b, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x33, 0x36, 0x2c, 0x20, 0x30, 0x2e, // {.{ 0.000036, 0.
	0x30, 0x30, 0x30, 0x38, 0x30, 0x38, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x32, 0x31, 0x33, 0x33, // 000808, 0.002133
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x32, 0x31, 0x33, 0x33, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, // , 0.002133, 0.00
	0x30, 0x38, 0x30, 0x38, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x33, 0x36, 0x20, 0x7d, // 0808, 0.000036 }
	0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x38, 0x30, 0x38, 0x2c, 0x20, 0x30, 0x2e, // ,.{ 0.000808, 0.
	0x30, 0x31, 0x38, 0x34, 0x31, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x38, 0x36, 0x32, 0x34, // 018410, 0.048624
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x38, 0x36, 0x32, 0x34, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x31, // , 0.048624, 0.01
	0x38, 0x34, 0x31, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x38, 0x30, 0x38, 0x20, 0x7d, // 8410, 0.000808 }
	0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x32, 0x31, 0x33, 0x33, 0x2c, 0x20, 0x30, 0x2e, // ,.{ 0.002133, 0.
	0x30, 0x34, 0x38, 0x36, 0x32, 0x34, 0x2c, 0x20, 0x30, 0x2e, 0x31, 0x32, 0x38, 0x34, 0x32, 0x34, // 048624, 0.128424
	0x2c, 0x20, 0x30, 0x2e, 0x31, 0x32, 0x38, 0x34, 0x32, 0x34, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, // , 0.128424, 0.04
	0x38, 0x36, 0x32, 0x34, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x32, 0x31, 0x33, 0x33, 0x20, 0x7d, // 8624, 0.002133 }
	0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x32, 0x31, 0x33, 0x33, 0x2c, 0x20, 0x30, 0x2e, // ,.{ 0.002133, 0.
	0x30, 0x34, 0x38, 0x36, 0x32, 0x34, 0x2c, 0x20, 0x30, 0x2e, 0x31, 0x32, 0x38, 0x34, 0x32, 0x34, // 048624, 0.128424
	0x2c, 0x20, 0x30, 0x2e, 0x31, 0x32, 0x38, 0x34, 0x32, 0x34, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, // , 0.128424, 0.04
	0x38, 0x36, 0x32, 0x34, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x32, 0x31, 0x33, 0x33, 0x20, 0x7d, // 8624, 0.002133 }
	0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x38, 0x30, 0x38, 0x2c, 0x20, 0x30, 0x2e, // ,.{ 0.000808, 0.
	0x30, 0x31, 0x38, 0x34, 0x31, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x38, 0x36, 0x32, 0x34, // 018410, 0.048624
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x38, 0x36, 0x32, 0x34, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x31, // , 0.048624, 0.01
	0x38, 0x34, 0x31, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x38, 0x30, 0x38, 0x20, 0x7d, // 8410, 0.000808 }
	0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x33, 0x36, 0x2c, 0x20, 0x30, 0x2e, // ,.{ 0.000036, 0.
	0x30, 0x30, 0x30, 0x38, 0x30, 0x38, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x32, 0x31, 0x33, 0x33, // 000808, 0.002133
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x32, 0x31, 0x33, 0x33, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, // , 0.002133, 0.00
	0x30, 0x38, 0x30, 0x38, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x33, 0x36, 0x20, 0x7d, // 0808, 0.000036 }
	0x0a, 0x7d, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // .};.const float 
	0x67, 0x5f, 0x6b, 0x61, 0x69, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x36, 0x73, // g_kaiserKernel6s
	0x5b, 0x36, 0x5d, 0x5b, 0x36, 0x5d, 0x20, 0x3d, 0x20, 0x7b, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, // [6][6] = {.{ 0.0
	0x30, 0x35, 0x37, 0x39, 0x33, 0x38, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x33, 0x30, 0x32, // 0579380, 0.01302
	0x34, 0x39, 0x31, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x39, 0x32, 0x33, 0x39, 0x37, 0x39, 0x2c, // 491, 0.01923979,
	0x20, 0x30, 0x2e, 0x30, 0x31, 0x39, 0x32, 0x33, 0x39, 0x37, 0x39, 0x2c, 0x20, 0x30, 0x2e, 0x30, //  0.01923979, 0.0
	0x31, 0x33, 0x30, 0x32, 0x34, 0x39, 0x31, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x35, 0x37, 0x39, // 1302491, 0.00579
	0x33, 0x38, 0x30, 0x20, 0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x33, 0x30, 0x32, // 380 },.{ 0.01302
	0x34, 0x39, 0x31, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x32, 0x39, 0x32, 0x38, 0x31, 0x30, 0x33, 0x2c, // 491, 0.02928103,
	0x20, 0x30, 0x2e, 0x30, 0x34, 0x33, 0x32, 0x35, 0x32, 0x35, 0x36, 0x2c, 0x20, 0x30, 0x2e, 0x30, //  0.04325256, 0.0
	0x34, 0x33, 0x32, 0x35, 0x32, 0x35, 0x36, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x32, 0x39, 0x32, 0x38, // 4325256, 0.02928
	0x31, 0x30, 0x33, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x33, 0x30, 0x32, 0x34, 0x39, 0x31, 0x20, // 103, 0.01302491 
	0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x39, 0x32, 0x33, 0x39, 0x37, 0x39, 0x2c, // },.{ 0.01923979,
	0x20, 0x30, 0x2e, 0x30, 0x34, 0x33, 0x32, 0x35, 0x32, 0x35, 0x36, 0x2c, 0x20, 0x30, 0x2e, 0x30, //  0.04325256, 0.0
	0x36, 0x33, 0x38, 0x39, 0x30, 0x36, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x36, 0x33, 0x38, 0x39, // 6389065, 0.06389
	0x30, 0x36, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x33, 0x32, 0x35, 0x32, 0x35, 0x36, 0x2c, // 065, 0.04325256,
	0x20, 0x30, 0x2e, 0x30, 0x31, 0x39, 0x32, 0x33, 0x39, 0x37, 0x39, 0x20, 0x7d, 0x2c, 0x0a, 0x7b, //  0.01923979 },.{
	0x20, 0x30, 0x2e, 0x30, 0x31, 0x39, 0x32, 0x33, 0x39, 0x37, 0x39, 0x2c, 0x20, 0x30, 0x2e, 0x30, //  0.01923979, 0.0
	0x34, 0x33, 0x32, 0x35, 0x32, 0x35, 0x36, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x36, 0x33, 0x38, 0x39, // 4325256, 0.06389
	0x30, 0x36, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x36, 0x33, 0x38, 0x39, 0x30, 0x36, 0x35, 0x2c, // 065, 0.06389065,
	0x20, 0x30, 0x2e, 0x30, 0x34, 0x33, 0x32, 0x35, 0x32, 0x35, 0x36, 0x2c, 0x20, 0x30, 0x2e, 0x30, //  0.04325256, 0.0
	0x31, 0x39, 0x32, 0x33, 0x39, 0x37, 0x39, 0x20, 0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, // 1923979 },.{ 0.0
	0x31, 0x33, 0x30, 0x32, 0x34, 0x39, 0x31, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x32, 0x39, 0x32, 0x38, // 1302491, 0.02928
	0x31, 0x30, 0x33, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x33, 0x32, 0x35, 0x32, 0x35, 0x36, 0x2c, // 103, 0.04325256,
	0x20, 0x30, 0x2e, 0x30, 0x34, 0x33, 0x32, 0x35, 0x32, 0x35, 0x36, 0x2c, 0x20, 0x30, 0x2e, 0x30, //  0.04325256, 0.0
	0x32, 0x39, 0x32, 0x38, 0x31, 0x30, 0x33, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x33, 0x30, 0x32, // 2928103, 0.01302
	0x34, 0x39, 0x31, 0x20, 0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x35, 0x37, 0x39, // 491 },.{ 0.00579
	0x33, 0x38, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x33, 0x30, 0x32, 0x34, 0x39, 0x31, 0x2c, // 380, 0.01302491,
	0x20, 0x30, 0x2e, 0x30, 0x31, 0x39, 0x32, 0x33, 0x39, 0x37, 0x39, 0x2c, 0x20, 0x30, 0x2e, 0x30, //  0.01923979, 0.0
	0x31, 0x39, 0x32, 0x33, 0x39, 0x37, 0x39, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x33, 0x30, 0x32, // 1923979, 0.01302
	0x34, 0x39, 0x31, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x35, 0x37, 0x39, 0x33, 0x38, 0x30, 0x20, // 491, 0.00579380 
	0x7d, 0x0a, 0x7d, 0x3b, 0x0a, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x20, 0x28, 0x6c, 0x6f, 0x63, // }.};.layout (loc
	0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x78, 0x20, 0x3d, 0x20, 0x38, 0x2c, 0x20, 0x6c, // al_size_x = 8, l
	0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x79, 0x20, 0x3d, 0x20, 0x38, 0x2c, // ocal_size_y = 8,
	0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x7a, 0x20, 0x3d, 0x20, //  local_size_z = 
	0x31, 0x29, 0x20, 0x69, 0x6e, 0x3b, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x6d, 0x61, 0x69, 0x6e, // 1) in;.void main
	0x28, 0x29, 0x20, 0x7b, 0x0a, 0x69, 0x76, 0x65, 0x63, 0x32, 0x20, 0x64, 0x73, 0x74, 0x43, 0x6f, // () {.ivec2 dstCo
	0x6f, 0x72, 0x64, 0x20, 0x3d, 0x20, 0x69, 0x76, 0x65, 0x63, 0x32, 0x28, 0x67, 0x6c, 0x5f, 0x47, // ord = ivec2(gl_G
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, // lobalInvocationI
	0x44, 0x2e, 0x78, 0x79, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x69, 0x76, 0x65, // D.xy);.const ive
	0x63, 0x32, 0x20, 0x64, 0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x20, 0x3d, 0x20, 0x69, 0x6d, 0x61, // c2 dstSize = ima
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x28, 0x75, 0x5f, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, // geSize(u_Destina
	0x74, 0x69, 0x6f, 0x6e, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x61, 0x6e, 0x79, 0x28, 0x67, // tion);.if (any(g
	0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x68, 0x61, 0x6e, 0x45, 0x71, 0x75, 0x61, 0x6c, 0x28, // reaterThanEqual(
	0x64, 0x73, 0x74, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x2c, 0x20, 0x64, 0x73, 0x74, 0x53, 0x69, 0x7a, // dstCoord, dstSiz
	0x65, 0x29, 0x29, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x3b, 0x0a, 0x76, 0x65, 0x63, // e))).return;.vec
	0x34, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, // 4 color = vec4_s
	0x70, 0x6c, 0x61, 0x74, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x31, // plat(0.0);.if (1
	0x2e, 0x30, 0x20, 0x3d, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x20, 0x7b, 0x0a, 0x69, 0x76, 0x65, // .0 == 0.0) {.ive
	0x63, 0x32, 0x20, 0x73, 0x72, 0x63, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x3d, 0x20, 0x64, 0x73, // c2 srcCoord = ds
	0x74, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x2a, 0x20, 0x32, 0x3b, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, // tCoord * 2;.colo
	0x72, 0x20, 0x2b, 0x3d, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x28, 0x75, // r += imageLoad(u
	0x5f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2c, 0x20, 0x73, 0x72, 0x63, 0x43, 0x6f, 0x6f, 0x72, // _Source, srcCoor
	0x64, 0x20, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x3d, 0x20, 0x69, 0x6d, // d );.color += im
	0x61, 0x67, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x28, 0x75, 0x5f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, // ageLoad(u_Source
	0x2c, 0x20, 0x73, 0x72, 0x63, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x2b, 0x20, 0x69, 0x76, 0x65, // , srcCoord + ive
	0x63, 0x32, 0x28, 0x30, 0x2c, 0x20, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // c2(0, 1));.color
	0x20, 0x2b, 0x3d, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x28, 0x75, 0x5f, //  += imageLoad(u_
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2c, 0x20, 0x73, 0x72, 0x63, 0x43, 0x6f, 0x6f, 0x72, 0x64, // Source, srcCoord
	0x20, 0x2b, 0x20, 0x69, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2c, 0x20, 0x30, 0x29, 0x29, 0x3b, //  + ivec2(1, 0));
	0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x3d, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4c, // .color += imageL
	0x6f, 0x61, 0x64, 0x28, 0x75, 0x5f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2c, 0x20, 0x73, 0x72, // oad(u_Source, sr
	0x63, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x2b, 0x20, 0x69, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, // cCoord + ivec2(1
	0x2c, 0x20, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2f, 0x3d, 0x20, // , 1));.color /= 
	0x34, 0x2e, 0x30, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x69, 0x66, 0x20, 0x28, // 4.0;.}.else if (
	0x31, 0x2e, 0x30, 0x20, 0x3d, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x7b, 0x0a, 0x69, 0x76, // 1.0 == 1.0) {.iv
	0x65, 0x63, 0x32, 0x20, 0x73, 0x72, 0x63, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x3d, 0x20, 0x64, // ec2 srcCoord = d
	0x73, 0x74, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x2a, 0x20, 0x32, 0x20, 0x2d, 0x20, 0x69, 0x76, // stCoord * 2 - iv
	0x65, 0x63, 0x32, 0x28, 0x31, 0x2c, 0x20, 0x31, 0x29, 0x3b, 0x0a, 0x66, 0x6f, 0x72, 0x20, 0x28, // ec2(1, 1);.for (
	0x69, 0x6e, 0x74, 0x20, 0x64, 0x79, 0x20, 0x3d, 0x20, 0x30, 0x3b, 0x20, 0x64, 0x79, 0x20, 0x3c, // int dy = 0; dy <
	0x20, 0x34, 0x3b, 0x20, 0x2b, 0x2b, 0x64, 0x79, 0x29, 0x0a, 0x66, 0x6f, 0x72, 0x20, 0x28, 0x69, //  4; ++dy).for (i
	0x6e, 0x74, 0x20, 0x64, 0x78, 0x20, 0x3d, 0x20, 0x30, 0x3b, 0x20, 0x64, 0x78, 0x20, 0x3c, 0x20, // nt dx = 0; dx < 
	0x34, 0x3b, 0x20, 0x2b, 0x2b, 0x64, 0x78, 0x29, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, // 4; ++dx).color +
	0x3d, 0x20, 0x67, 0x5f, 0x6b, 0x61, 0x69, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, // = g_kaiserKernel
	0x34, 0x5b, 0x64, 0x78, 0x5d, 0x5b, 0x64, 0x79, 0x5d, 0x20, 0x2a, 0x20, 0x69, 0x6d, 0x61, 0x67, // 4[dx][dy] * imag
	0x65, 0x4c, 0x6f, 0x61, 0x64, 0x28, 0x75, 0x5f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2c, 0x20, // eLoad(u_Source, 
	0x73, 0x72, 0x63, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x2b, 0x20, 0x69, 0x76, 0x65, 0x63, 0x32, // srcCoord + ivec2
	0x28, 0x64, 0x78, 0x2c, 0x20, 0x64, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, // (dx, dy));.}.els
	0x65, 0x20, 0x69, 0x66, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x3d, 0x3d, 0x20, 0x32, 0x2e, 0x30, // e if (1.0 == 2.0
	0x29, 0x20, 0x7b, 0x0a, 0x69, 0x76, 0x65, 0x63, 0x32, 0x20, 0x73, 0x72, 0x63, 0x43, 0x6f, 0x6f, // ) {.ivec2 srcCoo
	0x72, 0x64, 0x20, 0x3d, 0x20, 0x64, 0x73, 0x74, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x2a, 0x20, // rd = dstCoord * 
	0x32, 0x20, 0x2d, 0x20, 0x69, 0x76, 0x65, 0x63, 0x32, 0x28, 0x32, 0x2c, 0x20, 0x32, 0x29, 0x3b, // 2 - ivec2(2, 2);
	0x0a, 0x66, 0x6f, 0x72, 0x20, 0x28, 0x69, 0x6e, 0x74, 0x20, 0x64, 0x79, 0x20, 0x3d, 0x20, 0x30, // .for (int dy = 0
	0x3b, 0x20, 0x64, 0x79, 0x20, 0x3c, 0x20, 0x36, 0x3b, 0x20, 0x2b, 0x2b, 0x64, 0x79, 0x29, 0x0a, // ; dy < 6; ++dy).
	0x66, 0x6f, 0x72, 0x20, 0x28, 0x69, 0x6e, 0x74, 0x20, 0x64, 0x78, 0x20, 0x3d, 0x20, 0x30, 0x3b, // for (int dx = 0;
	0x20, 0x64, 0x78, 0x20, 0x3c, 0x20, 0x36, 0x3b, 0x20, 0x2b, 0x2b, 0x64, 0x78, 0x29, 0x0a, 0x63, //  dx < 6; ++dx).c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x3d, 0x20, 0x67, 0x5f, 0x6b, 0x61, 0x69, 0x73, 0x65, 0x72, // olor += g_kaiser
	0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x36, 0x5b, 0x64, 0x78, 0x5d, 0x5b, 0x64, 0x79, 0x5d, 0x20, // Kernel6[dx][dy] 
	0x2a, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x28, 0x75, 0x5f, 0x53, 0x6f, // * imageLoad(u_So
	0x75, 0x72, 0x63, 0x65, 0x2c, 0x20, 0x73, 0x72, 0x63, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x2b, // urce, srcCoord +
	0x20, 0x69, 0x76, 0x65, 0x63, 0x32, 0x28, 0x64, 0x78, 0x2c, 0x20, 0x64, 0x79, 0x29, 0x29, 0x3b, //  ivec2(dx, dy));
	0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x69, 0x66, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, // .}.else if (1.0 
	0x3d, 0x3d, 0x20, 0x33, 0x2e, 0x30, 0x29, 0x20, 0x7b, 0x0a, 0x69, 0x76, 0x65, 0x63, 0x32, 0x20, // == 3.0) {.ivec2 
	0x73, 0x72, 0x63, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x3d, 0x20, 0x64, 0x73, 0x74, 0x43, 0x6f, // srcCoord = dstCo
	0x6f, 0x72, 0x64, 0x20, 0x2a, 0x20, 0x32, 0x20, 0x2d, 0x20, 0x69, 0x76, 0x65, 0x63, 0x32, 0x28, // ord * 2 - ivec2(
	0x32, 0x2c, 0x20, 0x32, 0x29, 0x3b, 0x0a, 0x66, 0x6f, 0x72, 0x20, 0x28, 0x69, 0x6e, 0x74, 0x20, // 2, 2);.for (int 
	0x64, 0x79, 0x20, 0x3d, 0x20, 0x30, 0x3b, 0x20, 0x64, 0x79, 0x20, 0x3c, 0x20, 0x36, 0x3b, 0x20, // dy = 0; dy < 6; 
	0x2b, 0x2b, 0x64, 0x79, 0x29, 0x0a, 0x66, 0x6f, 0x72, 0x20, 0x28, 0x69, 0x6e, 0x74, 0x20, 0x64, // ++dy).for (int d
	0x78, 0x20, 0x3d, 0x20, 0x30, 0x3b, 0x20, 0x64, 0x78, 0x20, 0x3c, 0x20, 0x36, 0x3b, 0x20, 0x2b, // x = 0; dx < 6; +
	0x2b, 0x64, 0x78, 0x29, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x3d, 0x20, 0x67, 0x5f, // +dx).color += g_
	0x6b, 0x61, 0x69, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x36, 0x73, 0x5b, 0x64, // kaiserKernel6s[d
	0x78, 0x5d, 0x5b, 0x64, 0x79, 0x5d, 0x20, 0x2a, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x6f, // x][dy] * imageLo
	0x61, 0x64, 0x28, 0x75, 0x5f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2c, 0x20, 0x73, 0x72, 0x63, // ad(u_Source, src
	0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x2b, 0x20, 0x69, 0x76, 0x65, 0x63, 0x32, 0x28, 0x64, 0x78, // Coord + ivec2(dx
	0x2c, 0x20, 0x64, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x53, // , dy));.}.imageS
	0x74, 0x6f, 0x72, 0x65, 0x28, 0x75, 0x5f, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, // tore(u_Destinati
	0x6f, 0x6e, 0x2c, 0x20, 0x64, 0x73, 0x74, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x2c, 0x20, 0x63, 0x6f, // on, dstCoord, co
	0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x00,                                           // lor);.}..
};
static const uint8_t cs_mipmap_rgba8_glsl[3930] =
{
	0x43, 0x53, 0x48, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x0f, // CSH...........G.
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x34, 0x34, 0x30, 0x0a, 0x76, // ..#version 440.v
	0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x33, // ec3 instMul(vec3
	0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, //  _vec, mat3 _mtx
	0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, // ) { return ( (_v
	0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, // ec) * (_mtx) ); 
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, // }.vec3 instMul(m
	0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, // at3 _mtx, vec3 _
	0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, // vec) { return ( 
	0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, // (_mtx) * (_vec) 
	0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, // ); }.vec4 instMu
	0x6c, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, // l(vec4 _vec, mat
	0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // 4 _mtx) { return
	0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, //  ( (_vec) * (_mt
	0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, // x) ); }.vec4 ins
	0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, // tMul(mat4 _mtx, 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // vec4 _vec) { ret
	0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, // urn ( (_mtx) * (
	0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // _vec) ); }.float
	0x20, 0x72, 0x63, 0x70, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, //  rcp(float _a) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x5f, 0x61, 0x3b, 0x20, //  return 1.0/_a; 
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, // }.vec2 rcp(vec2 
	0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, // _a) { return vec
	0x32, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, // 2(1.0)/_a; }.vec
	0x33, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, // 3 rcp(vec3 _a) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x31, 0x2e, 0x30, //  return vec3(1.0
	0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x72, 0x63, 0x70, // )/_a; }.vec4 rcp
	0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // (vec4 _a) { retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, // rn vec4(1.0)/_a;
	0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, //  }.vec2 vec2_spl
	0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, // at(float _x) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, // eturn vec2(_x, _
	0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, // x); }.vec3 vec3_
	0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, // splat(float _x) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, // { return vec3(_x
	0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, // , _x, _x); }.vec
	0x34, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, // 4 vec4_splat(flo
	0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // at _x) { return 
	0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, // vec4(_x, _x, _x,
	0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x76, //  _x); }.uvec2 uv
	0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, // ec2_splat(uint _
	0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, // x) { return uvec
	0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, // 2(_x, _x); }.uve
	0x63, 0x33, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, // c3 uvec3_splat(u
	0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // int _x) { return
	0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, //  uvec3(_x, _x, _
	0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x76, 0x65, 0x63, // x); }.uvec4 uvec
	0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, // 4_splat(uint _x)
	0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x28, //  { return uvec4(
	0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, // _x, _x, _x, _x);
	0x20, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, //  }.mat4 mtxFromR
	0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, // ows(vec4 _0, vec
	0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, // 4 _1, vec4 _2, v
	0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // ec4 _3).{.return
	0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x28, //  transpose(mat4(
	0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x20, // _0, _1, _2, _3) 
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, // );.}.mat4 mtxFro
	0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, // mCols(vec4 _0, v
	0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, // ec4 _1, vec4 _2,
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, //  vec4 _3).{.retu
	0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, // rn mat4(_0, _1, 
	0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, // _2, _3);.}.mat3 
	0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, // mtxFromRows(vec3
	0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, //  _0, vec3 _1, ve
	0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // c3 _2).{.return 
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, // transpose(mat3(_
	0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // 0, _1, _2) );.}.
	0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, // mat3 mtxFromCols
	0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, // (vec3 _0, vec3 _
	0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // 1, vec3 _2).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, // turn mat3(_0, _1
	0x2c, 0x20, 0x5f, 0x32, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // , _2);.}.uniform
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x63, 0x74, //  vec4 u_viewRect
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, // ;.uniform vec4 u
	0x5f, 0x76, 0x69, 0x65, 0x77, 0x54, 0x65, 0x78, 0x65, 0x6c, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // _viewTexel;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x3b, // orm mat4 u_view;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, // .uniform mat4 u_
	0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // invView;.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, //  mat4 u_proj;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, // iform mat4 u_inv
	0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, // Proj;.uniform ma
	0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, // t4 u_viewProj;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, // niform mat4 u_in
	0x76, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, // vViewProj;.unifo
	0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5b, // rm mat4 u_model[
	0x33, 0x32, 0x5d, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, // 32];.uniform mat
	0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, // 4 u_modelView;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, // niform mat4 u_mo
	0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, // delViewProj;.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x61, 0x6c, 0x70, 0x68, // form vec4 u_alph
	0x61, 0x52, 0x65, 0x66, 0x34, 0x3b, 0x0a, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x28, 0x72, 0x67, // aRef4;.layout(rg
	0x62, 0x61, 0x38, 0x2c, 0x20, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x3d, 0x30, 0x29, 0x20, // ba8, binding=0) 
	0x72, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // readonly uniform
	0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x32, 0x44, 0x20, 0x75, 0x5f, 0x53, 0x6f, 0x75, 0x72, 0x63, //  image2D u_Sourc
	0x65, 0x3b, 0x0a, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x28, 0x72, 0x67, 0x62, 0x61, 0x38, 0x2c, // e;.layout(rgba8,
	0x20, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x3d, 0x31, 0x29, 0x20, 0x77, 0x72, 0x69, 0x74, //  binding=1) writ
	0x65, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x69, 0x6d, // eonly uniform im
	0x61, 0x67, 0x65, 0x32, 0x44, 0x20, 0x75, 0x5f, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, // age2D u_Destinat
	0x69, 0x6f, 0x6e, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // ion;.const float
	0x20, 0x67, 0x5f, 0x6b, 0x61, 0x69, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x34, //  g_kaiserKernel4
	0x5b, 0x34, 0x5d, 0x5b, 0x34, 0x5d, 0x20, 0x3d, 0x20, 0x7b, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, // [4][4] = {.{ 0.0
	0x30, 0x30, 0x30, 0x39, 0x39, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x34, 0x38, 0x38, 0x30, 0x2c, // 00099, 0.004880,
	0x20, 0x30, 0x2e, 0x30, 0x30, 0x34, 0x38, 0x38, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, //  0.004880, 0.000
	0x30, 0x39, 0x39, 0x20, 0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x34, 0x38, 0x38, // 099 },.{ 0.00488
	0x30, 0x2c, 0x20, 0x30, 0x2e, 0x32, 0x34, 0x30, 0x31, 0x34, 0x31, 0x2c, 0x20, 0x30, 0x2e, 0x32, // 0, 0.240141, 0.2
	0x34, 0x30, 0x31, 0x34, 0x31, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x34, 0x38, 0x38, 0x30, 0x20, // 40141, 0.004880 
	0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x34, 0x38, 0x38, 0x30, 0x2c, 0x20, 0x30, // },.{ 0.004880, 0
	0x2e, 0x32, 0x34, 0x30, 0x31, 0x34, 0x31, 0x2c, 0x20, 0x30, 0x2e, 0x32, 0x34, 0x30, 0x31, 0x34, // .240141, 0.24014
	0x31, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x34, 0x38, 0x38, 0x30, 0x20, 0x7d, 0x2c, 0x0a, 0x7b, // 1, 0.004880 },.{
	0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x39, 0x39, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x34, //  0.000099, 0.004
	0x38, 0x38, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x34, 0x38, 0x38, 0x30, 0x2c, 0x20, 0x30, // 880, 0.004880, 0
	0x2e, 0x30, 0x30, 0x30, 0x30, 0x39, 0x39, 0x20, 0x7d, 0x0a, 0x7d, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, // .000099 }.};.con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x67, 0x5f, 0x6b, 0x61, 0x69, 0x73, 0x65, // st float g_kaise
	0x72, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x36, 0x5b, 0x36, 0x5d, 0x5b, 0x36, 0x5d, 0x20, 0x3d, // rKernel6[6][6] =
	0x20, 0x7b, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x33, 0x36, 0x2c, 0x20, 0x30, //  {.{ 0.000036, 0
	0x2e, 0x30, 0x30, 0x30, 0x38, 0x30, 0x38, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x32, 0x31, 0x33, // .000808, 0.00213
	0x33, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x32, 0x31, 0x33, 0x33, 0x2c, 0x20, 0x30, 0x2e, 0x30, // 3, 0.002133, 0.0
	0x30, 0x30, 0x38, 0x30, 0x38, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x33, 0x36, 0x20, // 00808, 0.000036 
	0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x38, 0x30, 0x38, 0x2c, 0x20, 0x30, // },.{ 0.000808, 0
	0x2e, 0x30, 0x31, 0x38, 0x34, 0x31, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x38, 0x36, 0x32, // .018410, 0.04862
	0x34, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x38, 0x36, 0x32, 0x34, 0x2c, 0x20, 0x30, 0x2e, 0x30, // 4, 0.048624, 0.0
	0x31, 0x38, 0x34, 0x31, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x38, 0x30, 0x38, 0x20, // 18410, 0.000808 
	0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x32, 0x31, 0x33, 0x33, 0x2c, 0x20, 0x30, // },.{ 0.002133, 0
	0x2e, 0x30, 0x34, 0x38, 0x36, 0x32, 0x34, 0x2c, 0x20, 0x30, 0x2e, 0x31, 0x32, 0x38, 0x34, 0x32, // .048624, 0.12842
	0x34, 0x2c, 0x20, 0x30, 0x2e, 0x31, 0x32, 0x38, 0x34, 0x32, 0x34, 0x2c, 0x20, 0x30, 0x2e, 0x30, // 4, 0.128424, 0.0
	0x34, 0x38, 0x36, 0x32, 0x34, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x32, 0x31, 0x33, 0x33, 0x20, // 48624, 0.002133 
	0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x32, 0x31, 0x33, 0x33, 0x2c, 0x20, 0x30, // },.{ 0.002133, 0
	0x2e, 0x30, 0x34, 0x38, 0x36, 0x32, 0x34, 0x2c, 0x20, 0x30, 0x2e, 0x31, 0x32, 0x38, 0x34, 0x32, // .048624, 0.12842
	0x34, 0x2c, 0x20, 0x30, 0x2e, 0x31, 0x32, 0x38, 0x34, 0x32, 0x34, 0x2c, 0x20, 0x30, 0x2e, 0x30, // 4, 0.128424, 0.0
	0x34, 0x38, 0x36, 0x32, 0x34, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x32, 0x31, 0x33, 0x33, 0x20, // 48624, 0.002133 
	0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x38, 0x30, 0x38, 0x2c, 0x20, 0x30, // },.{ 0.000808, 0
	0x2e, 0x30, 0x31, 0x38, 0x34, 0x31, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x38, 0x36, 0x32, // .018410, 0.04862
	0x34, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x38, 0x36, 0x32, 0x34, 0x2c, 0x20, 0x30, 0x2e, 0x30, // 4, 0.048624, 0.0
	0x31, 0x38, 0x34, 0x31, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x38, 0x30, 0x38, 0x20, // 18410, 0.000808 
	0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x33, 0x36, 0x2c, 0x20, 0x30, // },.{ 0.000036, 0
	0x2e, 0x30, 0x30, 0x30, 0x38, 0x30, 0x38, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x32, 0x31, 0x33, // .000808, 0.00213
	0x33, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x32, 0x31, 0x33, 0x33, 0x2c, 0x20, 0x30, 0x2e, 0x30, // 3, 0.002133, 0.0
	0x30, 0x30, 0x38, 0x30, 0x38, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x33, 0x36, 0x20, // 00808, 0.000036 
	0x7d, 0x0a, 0x7d, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // }.};.const float
	0x20, 0x67, 0x5f, 0x6b, 0x61, 0x69, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x36, //  g_kaiserKernel6
	0x73, 0x5b, 0x36, 0x5d, 0x5b, 0x36, 0x5d, 0x20, 0x3d, 0x20, 0x7b, 0x0a, 0x7b, 0x20, 0x30, 0x2e, // s[6][6] = {.{ 0.
	0x30, 0x30, 0x35, 0x37, 0x39, 0x33, 0x38, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x33, 0x30, // 00579380, 0.0130
	0x32, 0x34, 0x39, 0x31, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x39, 0x32, 0x33, 0x39, 0x37, 0x39, // 2491, 0.01923979
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x39, 0x32, 0x33, 0x39, 0x37, 0x39, 0x2c, 0x20, 0x30, 0x2e, // , 0.01923979, 0.
	0x30, 0x31, 0x33, 0x30, 0x32, 0x34, 0x39, 0x31, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x35, 0x37, // 01302491, 0.0057
	0x39, 0x33, 0x38, 0x30, 0x20, 0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x33, 0x30, // 9380 },.{ 0.0130
	0x32, 0x34, 0x39, 0x31, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x32, 0x39, 0x32, 0x38, 0x31, 0x30, 0x33, // 2491, 0.02928103
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x33, 0x32, 0x35, 0x32, 0x35, 0x36, 0x2c, 0x20, 0x30, 0x2e, // , 0.04325256, 0.
	0x30, 0x34, 0x33, 0x32, 0x35, 0x32, 0x35, 0x36, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x32, 0x39, 0x32, // 04325256, 0.0292
	0x38, 0x31, 0x30, 0x33, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x33, 0x30, 0x32, 0x34, 0x39, 0x31, // 8103, 0.01302491
	0x20, 0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x39, 0x32, 0x33, 0x39, 0x37, 0x39, //  },.{ 0.01923979
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x33, 0x32, 0x35, 0x32, 0x35, 0x36, 0x2c, 0x20, 0x30, 0x2e, // , 0.04325256, 0.
	0x30, 0x36, 0x33, 0x38, 0x39, 0x30, 0x36, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x36, 0x33, 0x38, // 06389065, 0.0638
	0x39, 0x30, 0x36, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x33, 0x32, 0x35, 0x32, 0x35, 0x36, // 9065, 0.04325256
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x39, 0x32, 0x33, 0x39, 0x37, 0x39, 0x20, 0x7d, 0x2c, 0x0a, // , 0.01923979 },.
	0x7b, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x39, 0x32, 0x33, 0x39, 0x37, 0x39, 0x2c, 0x20, 0x30, 0x2e, // { 0.01923979, 0.
	0x30, 0x34, 0x33, 0x32, 0x35, 0x32, 0x35, 0x36, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x36, 0x33, 0x38, // 04325256, 0.0638
	0x39, 0x30, 0x36, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x36, 0x33, 0x38, 0x39, 0x30, 0x36, 0x35, // 9065, 0.06389065
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x33, 0x32, 0x35, 0x32, 0x35, 0x36, 0x2c, 0x20, 0x30, 0x2e, // , 0.04325256, 0.
	0x30, 0x31, 0x39, 0x32, 0x33, 0x39, 0x37, 0x39, 0x20, 0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, // 01923979 },.{ 0.
	0x30, 0x31, 0x33, 0x30, 0x32, 0x34, 0x39, 0x31, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x32, 0x39, 0x32, // 01302491, 0.0292
	0x38, 0x31, 0x30, 0x33, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x33, 0x32, 0x35, 0x32, 0x35, 0x36, // 8103, 0.04325256
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x33, 0x32, 0x35, 0x32, 0x35, 0x36, 0x2c, 0x20, 0x30, 0x2e, // , 0.04325256, 0.
	0x30, 0x32, 0x39, 0x32, 0x38, 0x31, 0x30, 0x33, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x33, 0x30, // 02928103, 0.0130
	0x32, 0x34, 0x39, 0x31, 0x20, 0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x35, 0x37, // 2491 },.{ 0.0057
	0x39, 0x33, 0x38, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x33, 0x30, 0x32, 0x34, 0x39, 0x31, // 9380, 0.01302491
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x39, 0x32, 0x33, 0x39, 0x37, 0x39, 0x2c, 0x20, 0x30, 0x2e, // , 0.01923979, 0.
	0x30, 0x31, 0x39, 0x32, 0x33, 0x39, 0x37, 0x39, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x33, 0x30, // 01923979, 0.0130
	0x32, 0x34, 0x39, 0x31, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x35, 0x37, 0x39, 0x33, 0x38, 0x30, // 2491, 0.00579380
	0x20, 0x7d, 0x0a, 0x7d, 0x3b, 0x0a, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x20, 0x28, 0x6c, 0x6f, //  }.};.layout (lo
	0x63, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x78, 0x20, 0x3d, 0x20, 0x38, 0x2c, 0x20, // cal_size_x = 8, 
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x79, 0x20, 0x3d, 0x20, 0x38, // local_size_y = 8
	0x2c, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x7a, 0x20, 0x3d, // , local_size_z =
	0x20, 0x31, 0x29, 0x20, 0x69, 0x6e, 0x3b, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x6d, 0x61, 0x69, //  1) in;.void mai
	0x6e, 0x28, 0x29, 0x20, 0x7b, 0x0a, 0x69, 0x76, 0x65, 0x63, 0x32, 0x20, 0x64, 0x73, 0x74, 0x43, // n() {.ivec2 dstC
	0x6f, 0x6f, 0x72, 0x64, 0x20, 0x3d, 0x20, 0x69, 0x76, 0x65, 0x63, 0x32, 0x28, 0x67, 0x6c, 0x5f, // oord = ivec2(gl_
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, // GlobalInvocation
	0x49, 0x44, 0x2e, 0x78, 0x79, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x69, 0x76, // ID.xy);.const iv
	0x65, 0x63, 0x32, 0x20, 0x64, 0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x20, 0x3d, 0x20, 0x69, 0x6d, // ec2 dstSize = im
	0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x28, 0x75, 0x5f, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, // ageSize(u_Destin
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x61, 0x6e, 0x79, 0x28, // ation);.if (any(
	0x67, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x68, 0x61, 0x6e, 0x45, 0x71, 0x75, 0x61, 0x6c, // greaterThanEqual
	0x28, 0x64, 0x73, 0x74, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x2c, 0x20, 0x64, 0x73, 0x74, 0x53, 0x69, // (dstCoord, dstSi
	0x7a, 0x65, 0x29, 0x29, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x3b, 0x0a, 0x76, 0x65, // ze))).return;.ve
	0x63, 0x34, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, // c4 color = vec4_
	0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, // splat(0.0);.if (
	0x31, 0x2e, 0x30, 0x20, 0x3d, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x20, 0x7b, 0x0a, 0x69, 0x76, // 1.0 == 0.0) {.iv
	0x65, 0x63, 0x32, 0x20, 0x73, 0x72, 0x63, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x3d, 0x20, 0x64, // ec2 srcCoord = d
	0x73, 0x74, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x2a, 0x20, 0x32, 0x3b, 0x0a, 0x63, 0x6f, 0x6c, // stCoord * 2;.col
	0x6f, 0x72, 0x20, 0x2b, 0x3d, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x28, // or += imageLoad(
	0x75, 0x5f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2c, 0x20, 0x73, 0x72, 0x63, 0x43, 0x6f, 0x6f, // u_Source, srcCoo
	0x72, 0x64, 0x20, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x3d, 0x20, 0x69, // rd );.color += i
	0x6d, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x28, 0x75, 0x5f, 0x53, 0x6f, 0x75, 0x72, 0x63, // mageLoad(u_Sourc
	0x65, 0x2c, 0x20, 0x73, 0x72, 0x63, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x2b, 0x20, 0x69, 0x76, // e, srcCoord + iv
	0x65, 0x63, 0x32, 0x28, 0x30, 0x2c, 0x20, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, // ec2(0, 1));.colo
	0x72, 0x20, 0x2b, 0x3d, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x28, 0x75, // r += imageLoad(u
	0x5f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2c, 0x20, 0x73, 0x72, 0x63, 0x43, 0x6f, 0x6f, 0x72, // _Source, srcCoor
	0x64, 0x20, 0x2b, 0x20, 0x69, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2c, 0x20, 0x30, 0x29, 0x29, // d + ivec2(1, 0))
	0x3b, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x3d, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, // ;.color += image
	0x4c, 0x6f, 0x61, 0x64, 0x28, 0x75, 0x5f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2c, 0x20, 0x73, // Load(u_Source, s
	0x72, 0x63, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x2b, 0x20, 0x69, 0x76, 0x65, 0x63, 0x32, 0x28, // rcCoord + ivec2(
	0x31, 0x2c, 0x20, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2f, 0x3d, // 1, 1));.color /=
	0x20, 0x34, 0x2e, 0x30, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x69, 0x66, 0x20, //  4.0;.}.else if 
	0x28, 0x31, 0x2e, 0x30, 0x20, 0x3d, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x7b, 0x0a, 0x69, // (1.0 == 1.0) {.i
	0x76, 0x65, 0x63, 0x32, 0x20, 0x73, 0x72, 0x63, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x3d, 0x20, // vec2 srcCoord = 
	0x64, 0x73, 0x74, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x2a, 0x20, 0x32, 0x20, 0x2d, 0x20, 0x69, // dstCoord * 2 - i
	0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2c, 0x20, 0x31, 0x29, 0x3b, 0x0a, 0x66, 0x6f, 0x72, 0x20, // vec2(1, 1);.for 
	0x28, 0x69, 0x6e, 0x74, 0x20, 0x64, 0x79, 0x20, 0x3d, 0x20, 0x30, 0x3b, 0x20, 0x64, 0x79, 0x20, // (int dy = 0; dy 
	0x3c, 0x20, 0x34, 0x3b, 0x20, 0x2b, 0x2b, 0x64, 0x79, 0x29, 0x0a, 0x66, 0x6f, 0x72, 0x20, 0x28, // < 4; ++dy).for (
	0x69, 0x6e, 0x74, 0x20, 0x64, 0x78, 0x20, 0x3d, 0x20, 0x30, 0x3b, 0x20, 0x64, 0x78, 0x20, 0x3c, // int dx = 0; dx <
	0x20, 0x34, 0x3b, 0x20, 0x2b, 0x2b, 0x64, 0x78, 0x29, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, //  4; ++dx).color 
	0x2b, 0x3d, 0x20, 0x67, 0x5f, 0x6b, 0x61, 0x69, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x72, 0x6e, 0x65, // += g_kaiserKerne
	0x6c, 0x34, 0x5b, 0x64, 0x78, 0x5d, 0x5b, 0x64, 0x79, 0x5d, 0x20, 0x2a, 0x20, 0x69, 0x6d, 0x61, // l4[dx][dy] * ima
	0x67, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x28, 0x75, 0x5f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2c, // geLoad(u_Source,
	0x20, 0x73, 0x72, 0x63, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x2b, 0x20, 0x69, 0x76, 0x65, 0x63, //  srcCoord + ivec
	0x32, 0x28, 0x64, 0x78, 0x2c, 0x20, 0x64, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, // 2(dx, dy));.}.el
	0x73, 0x65, 0x20, 0x69, 0x66, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x3d, 0x3d, 0x20, 0x32, 0x2e, // se if (1.0 == 2.
	0x30, 0x29, 0x20, 0x7b, 0x0a, 0x69, 0x76, 0x65, 0x63, 0x32, 0x20, 0x73, 0x72, 0x63, 0x43, 0x6f, // 0) {.ivec2 srcCo
	0x6f, 0x72, 0x64, 0x20, 0x3d, 0x20, 0x64, 0x73, 0x74, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x2a, // ord = dstCoord *
	0x20, 0x32, 0x20, 0x2d, 0x20, 0x69, 0x76, 0x65, 0x63, 0x32, 0x28, 0x32, 0x2c, 0x20, 0x32, 0x29, //  2 - ivec2(2, 2)
	0x3b, 0x0a, 0x66, 0x6f, 0x72, 0x20, 0x28, 0x69, 0x6e, 0x74, 0x20, 0x64, 0x79, 0x20, 0x3d, 0x20, // ;.for (int dy = 
	0x30, 0x3b, 0x20, 0x64, 0x79, 0x20, 0x3c, 0x20, 0x36, 0x3b, 0x20, 0x2b, 0x2b, 0x64, 0x79, 0x29, // 0; dy < 6; ++dy)
	0x0a, 0x66, 0x6f, 0x72, 0x20, 0x28, 0x69, 0x6e, 0x74, 0x20, 0x64, 0x78, 0x20, 0x3d, 0x20, 0x30, // .for (int dx = 0
	0x3b, 0x20, 0x64, 0x78, 0x20, 0x3c, 0x20, 0x36, 0x3b, 0x20, 0x2b, 0x2b, 0x64, 0x78, 0x29, 0x0a, // ; dx < 6; ++dx).
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x3d, 0x20, 0x67, 0x5f, 0x6b, 0x61, 0x69, 0x73, 0x65, // color += g_kaise
	0x72, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x36, 0x5b, 0x64, 0x78, 0x5d, 0x5b, 0x64, 0x79, 0x5d, // rKernel6[dx][dy]
	0x20, 0x2a, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x28, 0x75, 0x5f, 0x53, //  * imageLoad(u_S
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2c, 0x20, 0x73, 0x72, 0x63, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, // ource, srcCoord 
	0x2b, 0x20, 0x69, 0x76, 0x65, 0x63, 0x32, 0x28, 0x64, 0x78, 0x2c, 0x20, 0x64, 0x79, 0x29, 0x29, // + ivec2(dx, dy))
	0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x69, 0x66, 0x20, 0x28, 0x31, 0x2e, 0x30, // ;.}.else if (1.0
	0x20, 0x3d, 0x3d, 0x20, 0x33, 0x2e, 0x30, 0x29, 0x20, 0x7b, 0x0a, 0x69, 0x76, 0x65, 0x63, 0x32, //  == 3.0) {.ivec2
	0x20, 0x73, 0x72, 0x63, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x3d, 0x20, 0x64, 0x73, 0x74, 0x43, //  srcCoord = dstC
	0x6f, 0x6f, 0x72, 0x64, 0x20, 0x2a, 0x20, 0x32, 0x20, 0x2d, 0x20, 0x69, 0x76, 0x65, 0x63, 0x32, // oord * 2 - ivec2
	0x28, 0x32, 0x2c, 0x20, 0x32, 0x29, 0x3b, 0x0a, 0x66, 0x6f, 0x72, 0x20, 0x28, 0x69, 0x6e, 0x74, // (2, 2);.for (int
	0x20, 0x64, 0x79, 0x20, 0x3d, 0x20, 0x30, 0x3b, 0x20, 0x64, 0x79, 0x20, 0x3c, 0x20, 0x36, 0x3b, //  dy = 0; dy < 6;
	0x20, 0x2b, 0x2b, 0x64, 0x79, 0x29, 0x0a, 0x66, 0x6f, 0x72, 0x20, 0x28, 0x69, 0x6e, 0x74, 0x20, //  ++dy).for (int 
	0x64, 0x78, 0x20, 0x3d, 0x20, 0x30, 0x3b, 0x20, 0x64, 0x78, 0x20, 0x3c, 0x20, 0x36, 0x3b, 0x20, // dx = 0; dx < 6; 
	0x2b, 0x2b, 0x64, 0x78, 0x29, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x3d, 0x20, 0x67, // ++dx).color += g
	0x5f, 0x6b, 0x61, 0x69, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x36, 0x73, 0x5b, // _kaiserKernel6s[
	0x64, 0x78, 0x5d, 0x5b, 0x64, 0x79, 0x5d, 0x20, 0x2a, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4c, // dx][dy] * imageL
	0x6f, 0x61, 0x64, 0x28, 0x75, 0x5f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2c, 0x20, 0x73, 0x72, // oad(u_Source, sr
	0x63, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x2b, 0x20, 0x69, 0x76, 0x65, 0x63, 0x32, 0x28, 0x64, // cCoord + ivec2(d
	0x78, 0x2c, 0x20, 0x64, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, // x, dy));.}.image
	0x53, 0x74, 0x6f, 0x72, 0x65, 0x28, 0x75, 0x5f, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, // Store(u_Destinat
	0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x64, 0x73, 0x74, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x2c, 0x20, 0x63, // ion, dstCoord, c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x00,                                     // olor);.}..
};
static const uint8_t cs_mipmap_rgba8_dx11[1154] =
{
	0x43, 0x53, 0x48, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6c, 0x04, // CSH...........l.
	0x00, 0x00, 0x44, 0x58, 0x42, 0x43, 0x64, 0x43, 0x4c, 0x9b, 0x6b, 0xe8, 0xfb, 0x3b, 0x48, 0x84, // ..DXBCdCL.k..;H.
	0xfb, 0x61, 0xf4, 0xed, 0x24, 0xc9, 0x01, 0x00, 0x00, 0x00, 0x6c, 0x04, 0x00, 0x00, 0x03, 0x00, // .a..$.....l.....
	0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x4c, 0x00, 0x00, 0x00, 0x49, 0x53, // ..,...<...L...IS
	0x47, 0x4e, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x4f, 0x53, // GN............OS
	0x47, 0x4e, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x53, 0x48, // GN............SH
	0x45, 0x58, 0x18, 0x04, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x06, 0x01, 0x00, 0x00, 0x6a, 0x08, // EX....P.......j.
	0x00, 0x01, 0x35, 0x18, 0x00, 0x00, 0x42, 0x00, 0x00, 0x00, 0x38, 0x9e, 0xcf, 0x38, 0x00, 0x00, // ..5...B...8..8..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0xe8, 0x9f, 0x3b, 0x00, 0x00, // ..........h..;..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0xe8, 0x9f, 0x3b, 0x00, 0x00, // ..........h..;..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x9e, 0xcf, 0x38, 0x00, 0x00, // ..........8..8..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0xe8, 0x9f, 0x3b, 0x00, 0x00, // ..........h..;..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0xe7, 0x75, 0x3e, 0x00, 0x00, // ............u>..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0xe7, 0x75, 0x3e, 0x00, 0x00, // ............u>..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0xe8, 0x9f, 0x3b, 0x00, 0x00, // ..........h..;..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0xe8, 0x9f, 0x3b, 0x00, 0x00, // ..........h..;..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0xe7, 0x75, 0x3e, 0x00, 0x00, // ............u>..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0xe7, 0x75, 0x3e, 0x00, 0x00, // ............u>..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0xe8, 0x9f, 0x3b, 0x00, 0x00, // ..........h..;..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x9e, 0xcf, 0x38, 0x00, 0x00, // ..........8..8..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0xe8, 0x9f, 0x3b, 0x00, 0x00, // ..........h..;..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0xe8, 0x9f, 0x3b, 0x00, 0x00, // ..........h..;..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x9e, 0xcf, 0x38, 0x00, 0x00, // ..........8..8..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x58, 0x18, 0x00, 0x04, 0x00, 0x70, // ..........X....p
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x11, 0x00, 0x00, 0x9c, 0x18, 0x00, 0x04, 0x00, 0xe0, // ................
	0x11, 0x00, 0x01, 0x00, 0x00, 0x00, 0x11, 0x11, 0x00, 0x00, 0x5f, 0x00, 0x00, 0x02, 0x32, 0x00, // .........._...2.
	0x02, 0x00, 0x68, 0x00, 0x00, 0x02, 0x06, 0x00, 0x00, 0x00, 0x9b, 0x00, 0x00, 0x04, 0x08, 0x00, // ..h.............
	0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3d, 0x10, 0x00, 0x89, 0xc2, 0x00, // ..........=.....
	0x00, 0x80, 0x43, 0x44, 0x04, 0x00, 0x32, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, // ..CD..2........@
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0xee, 0x11, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2b, 0x00, // ......F.......+.
	0x00, 0x04, 0xc2, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x04, 0x02, 0x00, 0x2b, 0x00, // ..............+.
	0x00, 0x05, 0x32, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x00, 0x00, // ..2.......F.....
	0x00, 0x00, 0x1d, 0x00, 0x00, 0x07, 0x32, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe6, 0x0a, // ......2.........
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, // ......F.......<.
	0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x04, 0x03, 0x0a, 0x00, // ................
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x01, 0x15, 0x00, 0x00, 0x01, 0x29, 0x00, // ......>.......).
	0x00, 0x09, 0x32, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x02, 0x00, 0x02, 0x40, // ..2.......F....@
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x1e, 0x00, 0x00, 0x0a, 0x32, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, // ......2.......F.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // .......@........
	0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x08, 0xc2, 0x00, // ..........6.....
	0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .......@........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x08, 0xf2, 0x00, // ..........6.....
	0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .......@........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x22, 0x00, // ..........6...".
	0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, // .......@......0.
	0x00, 0x01, 0x21, 0x00, 0x00, 0x07, 0x42, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x00, // ..!...B.........
	0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x03, 0x00, // .......@........
	0x04, 0x03, 0x2a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0xf2, 0x00, // ..*.......6.....
	0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x36, 0x00, // ......F.......6.
	0x00, 0x05, 0x12, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, // ...........@....
	0x00, 0x00, 0x30, 0x00, 0x00, 0x01, 0x21, 0x00, 0x00, 0x07, 0x42, 0x00, 0x10, 0x00, 0x00, 0x00, // ..0...!...B.....
	0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x04, 0x00, // ...........@....
	0x00, 0x00, 0x03, 0x00, 0x04, 0x03, 0x2a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x00, // ......*.......).
	0x00, 0x07, 0x42, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x03, 0x00, // ..B.............
	0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x07, 0x42, 0x00, // ...@..........B.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x2a, 0x00, // ..............*.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x07, 0x32, 0x00, 0x10, 0x00, 0x01, 0x00, // ..........2.....
	0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x03, 0x00, // ..F.......F.....
	0x00, 0x00, 0x2d, 0x00, 0x00, 0x89, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x44, 0x04, 0x00, 0xf2, 0x00, // ..-.......CD....
	0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x7e, // ......F.......F~
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x0a, 0xf2, 0x00, 0x10, 0x00, 0x04, 0x00, // ......2.........
	0x00, 0x00, 0x06, 0x90, 0x90, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x0e, // ......*.......F.
	0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x1e, 0x00, // ......F.........
	0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x03, 0x00, // ................
	0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x01, 0x36, 0x00, // ...@..........6.
	0x00, 0x05, 0xf2, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x04, 0x00, // ..........F.....
	0x00, 0x00, 0x1e, 0x00, 0x00, 0x07, 0x22, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x1a, 0x00, // ......".........
	0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x16, 0x00, // .......@........
	0x00, 0x01, 0xa4, 0x00, 0x00, 0x06, 0xf2, 0xe0, 0x11, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x05, // ..............F.
	0x02, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x01, 0x00, 0x00, // ..F.......>.....
	0x00, 0x00,                                                                                     // ..
};
static const uint8_t cs_mipmap_rgba8_spv[2005] =
{
	0x43, 0x53, 0x48, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x08, 0x75, // CSH............u
	0x5f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x02, 0x43, // _Source .......C
	0x00, 0x0d, 0x75, 0x5f, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x01, // ..u_Destination.
	0x00, 0x03, 0x00, 0x03, 0x00, 0x00, 0x02, 0x43, 0x00, 0x94, 0x07, 0x00, 0x00, 0x03, 0x02, 0x23, // .......C.......#
	0x07, 0x00, 0x00, 0x01, 0x00, 0x0b, 0x00, 0x08, 0x00, 0x0e, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x11, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x11, 0x00, 0x02, 0x00, 0x32, 0x00, 0x00, // .............2..
	0x00, 0x0b, 0x00, 0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, 0x4c, 0x53, 0x4c, 0x2e, 0x73, 0x74, // .........GLSL.st
	0x64, 0x2e, 0x34, 0x35, 0x30, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, // d.450...........
	0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x06, 0x00, 0x05, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, // ................
	0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x5d, 0x01, 0x00, 0x00, 0x10, 0x00, 0x06, // .main....]......
	0x00, 0x04, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, // ................
	0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x03, 0x00, 0x05, 0x00, 0x00, 0x00, 0xf4, 0x01, 0x00, // ................
	0x00, 0x05, 0x00, 0x04, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, // .........main...
	0x00, 0x05, 0x00, 0x06, 0x00, 0x61, 0x00, 0x00, 0x00, 0x75, 0x5f, 0x44, 0x65, 0x73, 0x74, 0x69, // .....a...u_Desti
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x00, 0x00, 0x00, 0x05, 0x00, 0x05, 0x00, 0x7e, 0x00, 0x00, // nation.......~..
	0x00, 0x75, 0x5f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x08, // .u_Source.......
	0x00, 0x5d, 0x01, 0x00, 0x00, 0x67, 0x6c, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x49, 0x6e, // .]...gl_GlobalIn
	0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, // vocationID...G..
	0x00, 0x61, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, // .a...".......G..
	0x00, 0x61, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x47, 0x00, 0x03, // .a...!.......G..
	0x00, 0x61, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x7e, 0x00, 0x00, // .a.......G...~..
	0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x7e, 0x00, 0x00, // .".......G...~..
	0x00, 0x21, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x5d, 0x01, 0x00, // .!.......G...]..
	0x00, 0x0b, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x13, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, // ................
	0x00, 0x21, 0x00, 0x03, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x16, 0x00, 0x03, // .!..............
	0x00, 0x06, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, // ..... ..........
	0x00, 0x06, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x14, 0x00, 0x02, 0x00, 0x09, 0x00, 0x00, // ................
	0x00, 0x17, 0x00, 0x04, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, // ................
	0x00, 0x20, 0x00, 0x04, 0x00, 0x10, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, // . ..............
	0x00, 0x17, 0x00, 0x04, 0x00, 0x11, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, // ................
	0x00, 0x15, 0x00, 0x04, 0x00, 0x18, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, // ......... ......
	0x00, 0x17, 0x00, 0x04, 0x00, 0x19, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, // ................
	0x00, 0x17, 0x00, 0x04, 0x00, 0x2d, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, // .....-..........
	0x00, 0x2b, 0x00, 0x04, 0x00, 0x18, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .+.......>......
	0x00, 0x15, 0x00, 0x04, 0x00, 0x47, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .....G... ......
	0x00, 0x17, 0x00, 0x04, 0x00, 0x48, 0x00, 0x00, 0x00, 0x47, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, // .....H...G......
	0x00, 0x2b, 0x00, 0x04, 0x00, 0x47, 0x00, 0x00, 0x00, 0x4e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .+...G...N......
	0x00, 0x19, 0x00, 0x09, 0x00, 0x5f, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, // ....._..........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, // ................
	0x00, 0x04, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ..... ...`......
	0x00, 0x5f, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x60, 0x00, 0x00, 0x00, 0x61, 0x00, 0x00, // ._...;...`...a..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0x71, 0x00, 0x00, // .....+.......q..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x18, 0x00, 0x00, 0x00, 0x79, 0x00, 0x00, // .....+.......y..
	0x00, 0x02, 0x00, 0x00, 0x00, 0x19, 0x00, 0x09, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, // .........|......
	0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x7d, 0x00, 0x00, // ......... ...}..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x7d, 0x00, 0x00, // .....|...;...}..
	0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x18, 0x00, 0x00, // .~.......+......
	0x00, 0x87, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x05, 0x00, 0x19, 0x00, 0x00, // .........,......
	0x00, 0x9a, 0x00, 0x00, 0x00, 0x87, 0x00, 0x00, 0x00, 0x87, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, // .............+..
	0x00, 0x18, 0x00, 0x00, 0x00, 0xb7, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, // .............+..
	0x00, 0x47, 0x00, 0x00, 0x00, 0xc1, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x04, // .G..............
	0x00, 0xc2, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0xc1, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x04, // ................
	0x00, 0xc3, 0x00, 0x00, 0x00, 0xc2, 0x00, 0x00, 0x00, 0xc1, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, // .............+..
	0x00, 0x06, 0x00, 0x00, 0x00, 0xc4, 0x00, 0x00, 0x00, 0x38, 0x9e, 0xcf, 0x38, 0x2b, 0x00, 0x04, // .........8..8+..
	0x00, 0x06, 0x00, 0x00, 0x00, 0xc5, 0x00, 0x00, 0x00, 0x68, 0xe8, 0x9f, 0x3b, 0x2c, 0x00, 0x07, // .........h..;,..
	0x00, 0xc2, 0x00, 0x00, 0x00, 0xc6, 0x00, 0x00, 0x00, 0xc4, 0x00, 0x00, 0x00, 0xc5, 0x00, 0x00, // ................
	0x00, 0xc5, 0x00, 0x00, 0x00, 0xc4, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, // .........+......
	0x00, 0xc7, 0x00, 0x00, 0x00, 0x86, 0xe7, 0x75, 0x3e, 0x2c, 0x00, 0x07, 0x00, 0xc2, 0x00, 0x00, // .......u>,......
	0x00, 0xc8, 0x00, 0x00, 0x00, 0xc5, 0x00, 0x00, 0x00, 0xc7, 0x00, 0x00, 0x00, 0xc7, 0x00, 0x00, // ................
	0x00, 0xc5, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x07, 0x00, 0xc3, 0x00, 0x00, 0x00, 0xc9, 0x00, 0x00, // .....,..........
	0x00, 0xc6, 0x00, 0x00, 0x00, 0xc8, 0x00, 0x00, 0x00, 0xc8, 0x00, 0x00, 0x00, 0xc6, 0x00, 0x00, // ................
	0x00, 0x20, 0x00, 0x04, 0x00, 0xcc, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0xc3, 0x00, 0x00, // . ..............
	0x00, 0x2c, 0x00, 0x05, 0x00, 0x19, 0x00, 0x00, 0x00, 0xe7, 0x00, 0x00, 0x00, 0x79, 0x00, 0x00, // .,...........y..
	0x00, 0x79, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x5c, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, // .y... ..........
	0x00, 0x2d, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x5c, 0x01, 0x00, 0x00, 0x5d, 0x01, 0x00, // .-...;.......]..
	0x00, 0x01, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x07, 0x00, 0x11, 0x00, 0x00, 0x00, 0x08, 0x02, 0x00, // .....,..........
	0x00, 0x71, 0x00, 0x00, 0x00, 0x71, 0x00, 0x00, 0x00, 0x71, 0x00, 0x00, 0x00, 0x71, 0x00, 0x00, // .q...q...q...q..
	0x00, 0x36, 0x00, 0x05, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .6..............
	0x00, 0x03, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x05, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, // .............;..
	0x00, 0xcc, 0x00, 0x00, 0x00, 0x8f, 0x01, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, // .............=..
	0x00, 0x2d, 0x00, 0x00, 0x00, 0x5e, 0x01, 0x00, 0x00, 0x5d, 0x01, 0x00, 0x00, 0xf7, 0x00, 0x03, // .-...^...]......
	0x00, 0xdc, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfb, 0x00, 0x03, 0x00, 0x4e, 0x00, 0x00, // .............N..
	0x00, 0xa2, 0x01, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xa2, 0x01, 0x00, 0x00, 0x4f, 0x00, 0x07, // .............O..
	0x00, 0x19, 0x00, 0x00, 0x00, 0xa4, 0x01, 0x00, 0x00, 0x5e, 0x01, 0x00, 0x00, 0x5e, 0x01, 0x00, // .........^...^..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x5f, 0x00, 0x00, // .........=..._..
	0x00, 0xa5, 0x01, 0x00, 0x00, 0x61, 0x00, 0x00, 0x00, 0x68, 0x00, 0x04, 0x00, 0x48, 0x00, 0x00, // .....a...h...H..
	0x00, 0xe2, 0x01, 0x00, 0x00, 0xa5, 0x01, 0x00, 0x00, 0x7c, 0x00, 0x04, 0x00, 0x19, 0x00, 0x00, // .........|......
	0x00, 0xea, 0x01, 0x00, 0x00, 0xe2, 0x01, 0x00, 0x00, 0x6f, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, // .........o......
	0x00, 0xa8, 0x01, 0x00, 0x00, 0xa4, 0x01, 0x00, 0x00, 0x6f, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, // .........o......
	0x00, 0xaa, 0x01, 0x00, 0x00, 0xea, 0x01, 0x00, 0x00, 0xbe, 0x00, 0x05, 0x00, 0x0a, 0x00, 0x00, // ................
	0x00, 0xf0, 0x01, 0x00, 0x00, 0xa8, 0x01, 0x00, 0x00, 0xaa, 0x01, 0x00, 0x00, 0x9a, 0x00, 0x04, // ................
	0x00, 0x09, 0x00, 0x00, 0x00, 0xac, 0x01, 0x00, 0x00, 0xf0, 0x01, 0x00, 0x00, 0xf7, 0x00, 0x03, // ................
	0x00, 0xae, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0xac, 0x01, 0x00, // ................
	0x00, 0xad, 0x01, 0x00, 0x00, 0xae, 0x01, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xad, 0x01, 0x00, // ................
	0x00, 0xf9, 0x00, 0x02, 0x00, 0xdc, 0x01, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xae, 0x01, 0x00, // ................
	0x00, 0x84, 0x00, 0x05, 0x00, 0x19, 0x00, 0x00, 0x00, 0xb4, 0x01, 0x00, 0x00, 0xa4, 0x01, 0x00, // ................
	0x00, 0xe7, 0x00, 0x00, 0x00, 0x82, 0x00, 0x05, 0x00, 0x19, 0x00, 0x00, 0x00, 0xb5, 0x01, 0x00, // ................
	0x00, 0xb4, 0x01, 0x00, 0x00, 0x9a, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0xb6, 0x01, 0x00, // ................
	0x00, 0xf8, 0x00, 0x02, 0x00, 0xb6, 0x01, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x11, 0x00, 0x00, // ................
	0x00, 0x0a, 0x02, 0x00, 0x00, 0x08, 0x02, 0x00, 0x00, 0xae, 0x01, 0x00, 0x00, 0x0d, 0x02, 0x00, // ................
	0x00, 0xd2, 0x01, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x18, 0x00, 0x00, 0x00, 0x09, 0x02, 0x00, // ................
	0x00, 0x3e, 0x00, 0x00, 0x00, 0xae, 0x01, 0x00, 0x00, 0xd4, 0x01, 0x00, 0x00, 0xd2, 0x01, 0x00, // .>..............
	0x00, 0xb1, 0x00, 0x05, 0x00, 0x09, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x09, 0x02, 0x00, // ................
	0x00, 0xb7, 0x00, 0x00, 0x00, 0xf6, 0x00, 0x04, 0x00, 0xd5, 0x01, 0x00, 0x00, 0xd2, 0x01, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0xb9, 0x01, 0x00, 0x00, 0xba, 0x01, 0x00, // ................
	0x00, 0xd5, 0x01, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xba, 0x01, 0x00, 0x00, 0xf9, 0x00, 0x02, // ................
	0x00, 0xbb, 0x01, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xbb, 0x01, 0x00, 0x00, 0xf5, 0x00, 0x07, // ................
	0x00, 0x11, 0x00, 0x00, 0x00, 0x0d, 0x02, 0x00, 0x00, 0x0a, 0x02, 0x00, 0x00, 0xba, 0x01, 0x00, // ................
	0x00, 0xcd, 0x01, 0x00, 0x00, 0xbf, 0x01, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x18, 0x00, 0x00, // ................
	0x00, 0x0b, 0x02, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0xba, 0x01, 0x00, 0x00, 0xd0, 0x01, 0x00, // .....>..........
	0x00, 0xbf, 0x01, 0x00, 0x00, 0xb1, 0x00, 0x05, 0x00, 0x09, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, // ................
	0x00, 0x0b, 0x02, 0x00, 0x00, 0xb7, 0x00, 0x00, 0x00, 0xf6, 0x00, 0x04, 0x00, 0xd1, 0x01, 0x00, // ................
	0x00, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0xbe, 0x01, 0x00, // ................
	0x00, 0xbf, 0x01, 0x00, 0x00, 0xd1, 0x01, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xbf, 0x01, 0x00, // ................
	0x00, 0x3e, 0x00, 0x03, 0x00, 0x8f, 0x01, 0x00, 0x00, 0xc9, 0x00, 0x00, 0x00, 0x41, 0x00, 0x06, // .>...........A..
	0x00, 0x10, 0x00, 0x00, 0x00, 0xc2, 0x01, 0x00, 0x00, 0x8f, 0x01, 0x00, 0x00, 0x0b, 0x02, 0x00, // ................
	0x00, 0x09, 0x02, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0xc3, 0x01, 0x00, // .....=..........
	0x00, 0xc2, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x19, 0x00, 0x00, 0x00, 0xc7, 0x01, 0x00, // .....P..........
	0x00, 0x0b, 0x02, 0x00, 0x00, 0x09, 0x02, 0x00, 0x00, 0x80, 0x00, 0x05, 0x00, 0x19, 0x00, 0x00, // ................
	0x00, 0xc8, 0x01, 0x00, 0x00, 0xb5, 0x01, 0x00, 0x00, 0xc7, 0x01, 0x00, 0x00, 0x3d, 0x00, 0x04, // .............=..
	0x00, 0x7c, 0x00, 0x00, 0x00, 0xc9, 0x01, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x5f, 0x00, 0x07, // .|.......~..._..
	0x00, 0x11, 0x00, 0x00, 0x00, 0xf9, 0x01, 0x00, 0x00, 0xc9, 0x01, 0x00, 0x00, 0xc8, 0x01, 0x00, // ................
	0x00, 0x02, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x8e, 0x00, 0x05, 0x00, 0x11, 0x00, 0x00, // .....>..........
	0x00, 0xcb, 0x01, 0x00, 0x00, 0xf9, 0x01, 0x00, 0x00, 0xc3, 0x01, 0x00, 0x00, 0x81, 0x00, 0x05, // ................
	0x00, 0x11, 0x00, 0x00, 0x00, 0xcd, 0x01, 0x00, 0x00, 0x0d, 0x02, 0x00, 0x00, 0xcb, 0x01, 0x00, // ................
	0x00, 0x80, 0x00, 0x05, 0x00, 0x18, 0x00, 0x00, 0x00, 0xd0, 0x01, 0x00, 0x00, 0x0b, 0x02, 0x00, // ................
	0x00, 0x87, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0xbb, 0x01, 0x00, 0x00, 0xf8, 0x00, 0x02, // ................
	0x00, 0xd1, 0x01, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0xd2, 0x01, 0x00, 0x00, 0xf8, 0x00, 0x02, // ................
	0x00, 0xd2, 0x01, 0x00, 0x00, 0x80, 0x00, 0x05, 0x00, 0x18, 0x00, 0x00, 0x00, 0xd4, 0x01, 0x00, // ................
	0x00, 0x09, 0x02, 0x00, 0x00, 0x87, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0xb6, 0x01, 0x00, // ................
	0x00, 0xf8, 0x00, 0x02, 0x00, 0xd5, 0x01, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x5f, 0x00, 0x00, // .........=..._..
	0x00, 0xd8, 0x01, 0x00, 0x00, 0x61, 0x00, 0x00, 0x00, 0x63, 0x00, 0x04, 0x00, 0xd8, 0x01, 0x00, // .....a...c......
	0x00, 0xa4, 0x01, 0x00, 0x00, 0x0a, 0x02, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0xdc, 0x01, 0x00, // ................
	0x00, 0xf8, 0x00, 0x02, 0x00, 0xdc, 0x01, 0x00, 0x00, 0xfd, 0x00, 0x01, 0x00, 0x38, 0x00, 0x01, // .............8..
	0x00, 0x00, 0x00, 0x00, 0x00,                                                                   // .....
};
static const bgfx::EmbeddedShader cs_mipmap_rgba8 = BGFX_EMBEDDED_SHADER(cs_mipmap_rgba8);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Build of compute shader from cs_mipmap.sc to cs_mipmap_rgba16f with options: FMT_rgba16f
static const uint8_t cs_mipmap_rgba16f_mtl[3238] =
{
	0x43, 0x53, 0x48, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x0d, 0x75, // CSH............u
	0x5f, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x01, 0x01, 0xff, 0xff, // _Destination....
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x75, 0x5f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x01, // .......u_Source.
	0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x75, 0x5f, 0x53, 0x6f, 0x75, 0x72, // ..........u_Sour
	0x63, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x08, 0x00, // ce..............
	0x01, 0x00, 0x4c, 0x0c, 0x00, 0x00, 0x23, 0x70, 0x72, 0x61, 0x67, 0x6d, 0x61, 0x20, 0x63, 0x6c, // ..L...#pragma cl
	0x61, 0x6e, 0x67, 0x20, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x20, 0x69, // ang diagnostic i
	0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x20, 0x22, 0x2d, 0x57, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, // gnored "-Wmissin
	0x67, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x22, 0x0a, 0x23, 0x70, // g-prototypes".#p
	0x72, 0x61, 0x67, 0x6d, 0x61, 0x20, 0x63, 0x6c, 0x61, 0x6e, 0x67, 0x20, 0x64, 0x69, 0x61, 0x67, // ragma clang diag
	0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x20, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x20, 0x22, // nostic ignored "
	0x2d, 0x57, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2d, 0x62, 0x72, 0x61, 0x63, 0x65, 0x73, // -Wmissing-braces
	0x22, 0x0a, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x6d, 0x65, 0x74, // "..#include <met
	0x61, 0x6c, 0x5f, 0x73, 0x74, 0x64, 0x6c, 0x69, 0x62, 0x3e, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, // al_stdlib>.#incl
	0x75, 0x64, 0x65, 0x20, 0x3c, 0x73, 0x69, 0x6d, 0x64, 0x2f, 0x73, 0x69, 0x6d, 0x64, 0x2e, 0x68, // ude <simd/simd.h
	0x3e, 0x0a, 0x0a, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, // >..using namespa
	0x63, 0x65, 0x20, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x3b, 0x0a, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, // ce metal;..templ
	0x61, 0x74, 0x65, 0x3c, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x54, 0x2c, 0x20, // ate<typename T, 
	0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x20, 0x4e, 0x75, 0x6d, 0x3e, 0x0a, 0x73, 0x74, 0x72, 0x75, // size_t Num>.stru
	0x63, 0x74, 0x20, 0x73, 0x70, 0x76, 0x55, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x41, 0x72, 0x72, 0x61, // ct spvUnsafeArra
	0x79, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x54, 0x20, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, // y.{.    T elemen
	0x74, 0x73, 0x5b, 0x4e, 0x75, 0x6d, 0x20, 0x3f, 0x20, 0x4e, 0x75, 0x6d, 0x20, 0x3a, 0x20, 0x31, // ts[Num ? Num : 1
	0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x74, 0x68, 0x72, 0x65, // ];.    .    thre
	0x61, 0x64, 0x20, 0x54, 0x26, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x5b, // ad T& operator [
	0x5d, 0x20, 0x28, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x20, 0x70, 0x6f, 0x73, 0x29, 0x20, 0x74, // ] (size_t pos) t
	0x68, 0x72, 0x65, 0x61, 0x64, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, // hread.    {.    
	0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x65, 0x6c, 0x65, 0x6d, 0x65, //     return eleme
	0x6e, 0x74, 0x73, 0x5b, 0x70, 0x6f, 0x73, 0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, // nts[pos];.    }.
	0x20, 0x20, 0x20, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x78, 0x70, 0x72, 0x20, 0x63, 0x6f, //     constexpr co
	0x6e, 0x73, 0x74, 0x20, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x20, 0x54, 0x26, 0x20, 0x6f, 0x70, // nst thread T& op
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x5b, 0x5d, 0x20, 0x28, 0x73, 0x69, 0x7a, 0x65, 0x5f, // erator [] (size_
	0x74, 0x20, 0x70, 0x6f, 0x73, 0x29, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x74, 0x68, 0x72, // t pos) const thr
	0x65, 0x61, 0x64, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ead.    {.      
	0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, //   return element
	0x73, 0x5b, 0x70, 0x6f, 0x73, 0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, // s[pos];.    }.  
	0x20, 0x20, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x54, 0x26, //   .    device T&
	0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x5b, 0x5d, 0x20, 0x28, 0x73, 0x69, //  operator [] (si
	0x7a, 0x65, 0x5f, 0x74, 0x20, 0x70, 0x6f, 0x73, 0x29, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, // ze_t pos) device
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x72, // .    {.        r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5b, 0x70, // eturn elements[p
	0x6f, 0x73, 0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x63, // os];.    }.    c
	0x6f, 0x6e, 0x73, 0x74, 0x65, 0x78, 0x70, 0x72, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x64, // onstexpr const d
	0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x54, 0x26, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, // evice T& operato
	0x72, 0x20, 0x5b, 0x5d, 0x20, 0x28, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x20, 0x70, 0x6f, 0x73, // r [] (size_t pos
	0x29, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x0a, 0x20, // ) const device. 
	0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, //    {.        ret
	0x75, 0x72, 0x6e, 0x20, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5b, 0x70, 0x6f, 0x73, // urn elements[pos
	0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x0a, 0x20, 0x20, // ];.    }.    .  
	0x20, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x78, 0x70, 0x72, 0x20, 0x63, 0x6f, 0x6e, 0x73, //   constexpr cons
	0x74, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x20, 0x54, 0x26, 0x20, 0x6f, 0x70, // t constant T& op
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x5b, 0x5d, 0x20, 0x28, 0x73, 0x69, 0x7a, 0x65, 0x5f, // erator [] (size_
	0x74, 0x20, 0x70, 0x6f, 0x73, 0x29, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x63, 0x6f, 0x6e, // t pos) const con
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, // stant.    {.    
	0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x65, 0x6c, 0x65, 0x6d, 0x65, //     return eleme
	0x6e, 0x74, 0x73, 0x5b, 0x70, 0x6f, 0x73, 0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, // nts[pos];.    }.
	0x20, 0x20, 0x20, 0x20, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x67, //     .    threadg
	0x72, 0x6f, 0x75, 0x70, 0x20, 0x54, 0x26, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, // roup T& operator
	0x20, 0x5b, 0x5d, 0x20, 0x28, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x20, 0x70, 0x6f, 0x73, 0x29, //  [] (size_t pos)
	0x20, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x0a, 0x20, 0x20, 0x20, //  threadgroup.   
	0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, //  {.        retur
	0x6e, 0x20, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5b, 0x70, 0x6f, 0x73, 0x5d, 0x3b, // n elements[pos];
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, // .    }.    const
	0x65, 0x78, 0x70, 0x72, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x74, 0x68, 0x72, 0x65, 0x61, // expr const threa
	0x64, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x20, 0x54, 0x26, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, // dgroup T& operat
	0x6f, 0x72, 0x20, 0x5b, 0x5d, 0x20, 0x28, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x20, 0x70, 0x6f, // or [] (size_t po
	0x73, 0x29, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x67, // s) const threadg
	0x72, 0x6f, 0x75, 0x70, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // roup.    {.     
	0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, //    return elemen
	0x74, 0x73, 0x5b, 0x70, 0x6f, 0x73, 0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x7d, // ts[pos];.    }.}
	0x3b, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x20, 0x73, 0x70, 0x76, 0x55, // ;..constant spvU
	0x6e, 0x73, 0x61, 0x66, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, // nsafeArray<float
	0x2c, 0x20, 0x34, 0x3e, 0x20, 0x5f, 0x31, 0x39, 0x38, 0x20, 0x3d, 0x20, 0x73, 0x70, 0x76, 0x55, // , 4> _198 = spvU
	0x6e, 0x73, 0x61, 0x66, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, // nsafeArray<float
	0x2c, 0x20, 0x34, 0x3e, 0x28, 0x7b, 0x20, 0x39, 0x2e, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x37, // , 4>({ 9.8999997
	0x31, 0x33, 0x35, 0x32, 0x35, 0x31, 0x37, 0x36, 0x30, 0x34, 0x38, 0x32, 0x37, 0x38, 0x38, 0x30, // 1352517604827880
	0x38, 0x35, 0x39, 0x33, 0x37, 0x35, 0x65, 0x2d, 0x30, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, // 859375e-05, 0.00
	0x34, 0x38, 0x37, 0x39, 0x39, 0x39, 0x39, 0x39, 0x30, 0x35, 0x38, 0x32, 0x34, 0x36, 0x36, 0x31, // 4879999905824661
	0x32, 0x35, 0x34, 0x38, 0x38, 0x32, 0x38, 0x31, 0x32, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, // 2548828125, 0.00
	0x34, 0x38, 0x37, 0x39, 0x39, 0x39, 0x39, 0x39, 0x30, 0x35, 0x38, 0x32, 0x34, 0x36, 0x36, 0x31, // 4879999905824661
	0x32, 0x35, 0x34, 0x38, 0x38, 0x32, 0x38, 0x31, 0x32, 0x35, 0x2c, 0x20, 0x39, 0x2e, 0x38, 0x39, // 2548828125, 9.89
	0x39, 0x39, 0x39, 0x39, 0x37, 0x31, 0x33, 0x35, 0x32, 0x35, 0x31, 0x37, 0x36, 0x30, 0x34, 0x38, // 9999713525176048
	0x32, 0x37, 0x38, 0x38, 0x30, 0x38, 0x35, 0x39, 0x33, 0x37, 0x35, 0x65, 0x2d, 0x30, 0x35, 0x20, // 27880859375e-05 
	0x7d, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x20, 0x73, 0x70, 0x76, // });.constant spv
	0x55, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x3c, 0x66, 0x6c, 0x6f, 0x61, // UnsafeArray<floa
	0x74, 0x2c, 0x20, 0x34, 0x3e, 0x20, 0x5f, 0x32, 0x30, 0x30, 0x20, 0x3d, 0x20, 0x73, 0x70, 0x76, // t, 4> _200 = spv
	0x55, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x3c, 0x66, 0x6c, 0x6f, 0x61, // UnsafeArray<floa
	0x74, 0x2c, 0x20, 0x34, 0x3e, 0x28, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x34, 0x38, 0x37, 0x39, // t, 4>({ 0.004879
	0x39, 0x39, 0x39, 0x39, 0x30, 0x35, 0x38, 0x32, 0x34, 0x36, 0x36, 0x31, 0x32, 0x35, 0x34, 0x38, // 9999058246612548
	0x38, 0x32, 0x38, 0x31, 0x32, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x32, 0x34, 0x30, 0x31, 0x34, 0x31, // 828125, 0.240141
	0x30, 0x30, 0x34, 0x33, 0x32, 0x33, 0x39, 0x35, 0x39, 0x33, 0x35, 0x30, 0x35, 0x38, 0x35, 0x39, // 0043239593505859
	0x33, 0x37, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x32, 0x34, 0x30, 0x31, 0x34, 0x31, 0x30, 0x30, 0x34, // 375, 0.240141004
	0x33, 0x32, 0x33, 0x39, 0x35, 0x39, 0x33, 0x35, 0x30, 0x35, 0x38, 0x35, 0x39, 0x33, 0x37, 0x35, // 3239593505859375
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x34, 0x38, 0x37, 0x39, 0x39, 0x39, 0x39, 0x39, 0x30, 0x35, // , 0.004879999905
	0x38, 0x32, 0x34, 0x36, 0x36, 0x31, 0x32, 0x35, 0x34, 0x38, 0x38, 0x32, 0x38, 0x31, 0x32, 0x35, // 8246612548828125
	0x20, 0x7d, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x20, 0x73, 0x70, //  });.constant sp
	0x76, 0x55, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x3c, 0x73, 0x70, 0x76, // vUnsafeArray<spv
	0x55, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x3c, 0x66, 0x6c, 0x6f, 0x61, // UnsafeArray<floa
	0x74, 0x2c, 0x20, 0x34, 0x3e, 0x2c, 0x20, 0x34, 0x3e, 0x20, 0x5f, 0x32, 0x30, 0x31, 0x20, 0x3d, // t, 4>, 4> _201 =
	0x20, 0x73, 0x70, 0x76, 0x55, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x3c, //  spvUnsafeArray<
	0x73, 0x70, 0x76, 0x55, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x3c, 0x66, // spvUnsafeArray<f
	0x6c, 0x6f, 0x61, 0x74, 0x2c, 0x20, 0x34, 0x3e, 0x2c, 0x20, 0x34, 0x3e, 0x28, 0x7b, 0x20, 0x73, // loat, 4>, 4>({ s
	0x70, 0x76, 0x55, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x3c, 0x66, 0x6c, // pvUnsafeArray<fl
	0x6f, 0x61, 0x74, 0x2c, 0x20, 0x34, 0x3e, 0x28, 0x7b, 0x20, 0x39, 0x2e, 0x38, 0x39, 0x39, 0x39, // oat, 4>({ 9.8999
	0x39, 0x39, 0x37, 0x31, 0x33, 0x35, 0x32, 0x35, 0x31, 0x37, 0x36, 0x30, 0x34, 0x38, 0x32, 0x37, // 9971352517604827
	0x38, 0x38, 0x30, 0x38, 0x35, 0x39, 0x33, 0x37, 0x35, 0x65, 0x2d, 0x30, 0x35, 0x2c, 0x20, 0x30, // 880859375e-05, 0
	0x2e, 0x30, 0x30, 0x34, 0x38, 0x37, 0x39, 0x39, 0x39, 0x39, 0x39, 0x30, 0x35, 0x38, 0x32, 0x34, // .004879999905824
	0x36, 0x36, 0x31, 0x32, 0x35, 0x34, 0x38, 0x38, 0x32, 0x38, 0x31, 0x32, 0x35, 0x2c, 0x20, 0x30, // 6612548828125, 0
	0x2e, 0x30, 0x30, 0x34, 0x38, 0x37, 0x39, 0x39, 0x39, 0x39, 0x39, 0x30, 0x35, 0x38, 0x32, 0x34, // .004879999905824
	0x36, 0x36, 0x31, 0x32, 0x35, 0x34, 0x38, 0x38, 0x32, 0x38, 0x31, 0x32, 0x35, 0x2c, 0x20, 0x39, // 6612548828125, 9
	0x2e, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x37, 0x31, 0x33, 0x35, 0x32, 0x35, 0x31, 0x37, 0x36, // .899999713525176
	0x30, 0x34, 0x38, 0x32, 0x37, 0x38, 0x38, 0x30, 0x38, 0x35, 0x39, 0x33, 0x37, 0x35, 0x65, 0x2d, // 04827880859375e-
	0x30, 0x35, 0x20, 0x7d, 0x29, 0x2c, 0x20, 0x73, 0x70, 0x76, 0x55, 0x6e, 0x73, 0x61, 0x66, 0x65, // 05 }), spvUnsafe
	0x41, 0x72, 0x72, 0x61, 0x79, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x2c, 0x20, 0x34, 0x3e, 0x28, // Array<float, 4>(
	0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x34, 0x38, 0x37, 0x39, 0x39, 0x39, 0x39, 0x39, 0x30, 0x35, // { 0.004879999905
	0x38, 0x32, 0x34, 0x36, 0x36, 0x31, 0x32, 0x35, 0x34, 0x38, 0x38, 0x32, 0x38, 0x31, 0x32, 0x35, // 8246612548828125
	0x2c, 0x20, 0x30, 0x2e, 0x32, 0x34, 0x30, 0x31, 0x34, 0x31, 0x30, 0x30, 0x34, 0x33, 0x32, 0x33, // , 0.240141004323
	0x39, 0x35, 0x39, 0x33, 0x35, 0x30, 0x35, 0x38, 0x35, 0x39, 0x33, 0x37, 0x35, 0x2c, 0x20, 0x30, // 9593505859375, 0
	0x2e, 0x32, 0x34, 0x30, 0x31, 0x34, 0x31, 0x30, 0x30, 0x34, 0x33, 0x32, 0x33, 0x39, 0x35, 0x39, // .240141004323959
	0x33, 0x35, 0x30, 0x35, 0x38, 0x35, 0x39, 0x33, 0x37, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, // 3505859375, 0.00
	0x34, 0x38, 0x37, 0x39, 0x39, 0x39, 0x39, 0x39, 0x30, 0x35, 0x38, 0x32, 0x34, 0x36, 0x36, 0x31, // 4879999905824661
	0x32, 0x35, 0x34, 0x38, 0x38, 0x32, 0x38, 0x31, 0x32, 0x35, 0x20, 0x7d, 0x29, 0x2c, 0x20, 0x73, // 2548828125 }), s
	0x70, 0x76, 0x55, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x3c, 0x66, 0x6c, // pvUnsafeArray<fl
	0x6f, 0x61, 0x74, 0x2c, 0x20, 0x34, 0x3e, 0x28, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x34, 0x38, // oat, 4>({ 0.0048
	0x37, 0x39, 0x39, 0x39, 0x39, 0x39, 0x30, 0x35, 0x38, 0x32, 0x34, 0x36, 0x36, 0x31, 0x32, 0x35, // 7999990582466125
	0x34, 0x38, 0x38, 0x32, 0x38, 0x31, 0x32, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x32, 0x34, 0x30, 0x31, // 48828125, 0.2401
	0x34, 0x31, 0x30, 0x30, 0x34, 0x33, 0x32, 0x33, 0x39, 0x35, 0x39, 0x33, 0x35, 0x30, 0x35, 0x38, // 4100432395935058
	0x35, 0x39, 0x33, 0x37, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x32, 0x34, 0x30, 0x31, 0x34, 0x31, 0x30, // 59375, 0.2401410
	0x30, 0x34, 0x33, 0x32, 0x33, 0x39, 0x35, 0x39, 0x33, 0x35, 0x30, 0x35, 0x38, 0x35, 0x39, 0x33, // 0432395935058593
	0x37, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x34, 0x38, 0x37, 0x39, 0x39, 0x39, 0x39, 0x39, // 75, 0.0048799999
	0x30, 0x35, 0x38, 0x32, 0x34, 0x36, 0x36, 0x31, 0x32, 0x35, 0x34, 0x38, 0x38, 0x32, 0x38, 0x31, // 0582466125488281
	0x32, 0x35, 0x20, 0x7d, 0x29, 0x2c, 0x20, 0x73, 0x70, 0x76, 0x55, 0x6e, 0x73, 0x61, 0x66, 0x65, // 25 }), spvUnsafe
	0x41, 0x72, 0x72, 0x61, 0x79, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x2c, 0x20, 0x34, 0x3e, 0x28, // Array<float, 4>(
	0x7b, 0x20, 0x39, 0x2e, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x37, 0x31, 0x33, 0x35, 0x32, 0x35, // { 9.899999713525
	0x31, 0x37, 0x36, 0x30, 0x34, 0x38, 0x32, 0x37, 0x38, 0x38, 0x30, 0x38, 0x35, 0x39, 0x33, 0x37, // 1760482788085937
	0x35, 0x65, 0x2d, 0x30, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x34, 0x38, 0x37, 0x39, 0x39, // 5e-05, 0.0048799
	0x39, 0x39, 0x39, 0x30, 0x35, 0x38, 0x32, 0x34, 0x36, 0x36, 0x31, 0x32, 0x35, 0x34, 0x38, 0x38, // 9990582466125488
	0x32, 0x38, 0x31, 0x32, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x34, 0x38, 0x37, 0x39, 0x39, // 28125, 0.0048799
	0x39, 0x39, 0x39, 0x30, 0x35, 0x38, 0x32, 0x34, 0x36, 0x36, 0x31, 0x32, 0x35, 0x34, 0x38, 0x38, // 9990582466125488
	0x32, 0x38, 0x31, 0x32, 0x35, 0x2c, 0x20, 0x39, 0x2e, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x37, // 28125, 9.8999997
	0x31, 0x33, 0x35, 0x32, 0x35, 0x31, 0x37, 0x36, 0x30, 0x34, 0x38, 0x32, 0x37, 0x38, 0x38, 0x30, // 1352517604827880
	0x38, 0x35, 0x39, 0x33, 0x37, 0x35, 0x65, 0x2d, 0x30, 0x35, 0x20, 0x7d, 0x29, 0x20, 0x7d, 0x29, // 859375e-05 }) })
	0x3b, 0x0a, 0x0a, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x20, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x78, // ;..kernel void x
	0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, // latMtlMain(textu
	0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3e, 0x20, 0x75, 0x5f, 0x53, 0x6f, // re2d<float> u_So
	0x75, 0x72, 0x63, 0x65, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x30, // urce [[texture(0
	0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, // )]], texture2d<f
	0x6c, 0x6f, 0x61, 0x74, 0x2c, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x3a, 0x3a, 0x77, 0x72, // loat, access::wr
	0x69, 0x74, 0x65, 0x3e, 0x20, 0x75, 0x5f, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, // ite> u_Destinati
	0x6f, 0x6e, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x31, 0x29, 0x5d, // on [[texture(1)]
	0x5d, 0x2c, 0x20, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x20, 0x67, 0x6c, 0x5f, 0x47, 0x6c, 0x6f, 0x62, // ], uint3 gl_Glob
	0x61, 0x6c, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x20, 0x5b, // alInvocationID [
	0x5b, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, // [thread_position
	0x5f, 0x69, 0x6e, 0x5f, 0x67, 0x72, 0x69, 0x64, 0x5d, 0x5d, 0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, // _in_grid]]).{.  
	0x20, 0x20, 0x64, 0x6f, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, //   do.    {.     
	0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x61, 0x6e, 0x79, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, //    if (any(float
	0x32, 0x28, 0x69, 0x6e, 0x74, 0x33, 0x28, 0x67, 0x6c, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, // 2(int3(gl_Global
	0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x29, 0x2e, 0x78, 0x79, // InvocationID).xy
	0x29, 0x20, 0x3e, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x69, 0x6e, 0x74, 0x32, // ) >= float2(int2
	0x28, 0x75, 0x69, 0x6e, 0x74, 0x32, 0x28, 0x75, 0x5f, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, // (uint2(u_Destina
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x28, 0x29, // tion.get_width()
	0x2c, 0x20, 0x75, 0x5f, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, // , u_Destination.
	0x67, 0x65, 0x74, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x28, 0x29, 0x29, 0x29, 0x29, 0x29, // get_height()))))
	0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, // ).        {.    
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, //         break;. 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //        }.       
	0x20, 0x69, 0x6e, 0x74, 0x32, 0x20, 0x5f, 0x34, 0x33, 0x34, 0x20, 0x3d, 0x20, 0x28, 0x69, 0x6e, //  int2 _434 = (in
	0x74, 0x33, 0x28, 0x67, 0x6c, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x6f, // t3(gl_GlobalInvo
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x29, 0x2e, 0x78, 0x79, 0x20, 0x2a, 0x20, 0x69, // cationID).xy * i
	0x6e, 0x74, 0x32, 0x28, 0x32, 0x29, 0x29, 0x20, 0x2d, 0x20, 0x69, 0x6e, 0x74, 0x32, 0x28, 0x31, // nt2(2)) - int2(1
	0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x6e, 0x74, 0x20, 0x5f, // );.        int _
	0x35, 0x31, 0x38, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, // 518;.        flo
	0x61, 0x74, 0x34, 0x20, 0x5f, 0x35, 0x31, 0x39, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // at4 _519;.      
	0x20, 0x20, 0x5f, 0x35, 0x31, 0x39, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, //   _519 = float4(
	0x30, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x35, // 0.0);.        _5
	0x31, 0x38, 0x20, 0x3d, 0x20, 0x30, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 18 = 0;.        
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x35, 0x32, 0x32, 0x3b, 0x0a, 0x20, 0x20, 0x20, // float4 _522;.   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x28, 0x3b, 0x20, 0x5f, 0x35, 0x31, 0x38, //      for (; _518
	0x20, 0x3c, 0x20, 0x34, 0x3b, 0x20, 0x5f, 0x35, 0x31, 0x39, 0x20, 0x3d, 0x20, 0x5f, 0x35, 0x32, //  < 4; _519 = _52
	0x32, 0x2c, 0x20, 0x5f, 0x35, 0x31, 0x38, 0x2b, 0x2b, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // 2, _518++).     
	0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //    {.           
	0x20, 0x5f, 0x35, 0x32, 0x32, 0x20, 0x3d, 0x20, 0x5f, 0x35, 0x31, 0x39, 0x3b, 0x0a, 0x20, 0x20, //  _522 = _519;.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x28, 0x69, //           for (i
	0x6e, 0x74, 0x20, 0x5f, 0x35, 0x32, 0x30, 0x20, 0x3d, 0x20, 0x30, 0x3b, 0x20, 0x5f, 0x35, 0x32, // nt _520 = 0; _52
	0x30, 0x20, 0x3c, 0x20, 0x34, 0x3b, 0x20, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 0 < 4; ).       
	0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //      {.         
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x35, 0x32, 0x32, 0x20, 0x2b, 0x3d, 0x20, 0x28, //        _522 += (
	0x75, 0x5f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x28, 0x75, 0x69, // u_Source.read(ui
	0x6e, 0x74, 0x32, 0x28, 0x28, 0x5f, 0x34, 0x33, 0x34, 0x20, 0x2b, 0x20, 0x69, 0x6e, 0x74, 0x32, // nt2((_434 + int2
	0x28, 0x5f, 0x35, 0x32, 0x30, 0x2c, 0x20, 0x5f, 0x35, 0x31, 0x38, 0x29, 0x29, 0x29, 0x2c, 0x20, // (_520, _518))), 
	0x30, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x32, 0x30, 0x31, 0x5b, 0x5f, 0x35, 0x32, 0x30, 0x5d, 0x5b, // 0) * _201[_520][
	0x5f, 0x35, 0x31, 0x38, 0x5d, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // _518]);.        
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x35, 0x32, 0x30, 0x2b, 0x2b, 0x3b, 0x0a, //         _520++;.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // continue;.      
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //       }.        
	0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x75, 0x5f, 0x44, 0x65, 0x73, 0x74, // }.        u_Dest
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x28, 0x5f, 0x35, // ination.write(_5
	0x31, 0x39, 0x2c, 0x20, 0x75, 0x69, 0x6e, 0x74, 0x32, 0x28, 0x69, 0x6e, 0x74, 0x33, 0x28, 0x67, // 19, uint2(int3(g
	0x6c, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, // l_GlobalInvocati
	0x6f, 0x6e, 0x49, 0x44, 0x29, 0x2e, 0x78, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, // onID).xy));.    
	0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, //     break;.    }
	0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x28, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x7d, //  while(false);.}
	0x0a, 0x0a, 0x00, 0x00, 0x20, 0x00,                                                             // .... .
};
static const uint8_t cs_mipmap_rgba16f_essl[3949] =
{
	0x43, 0x53, 0x48, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5a, 0x0f, // CSH...........Z.
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x33, 0x31, 0x30, 0x20, 0x65, // ..#version 310 e
	0x73, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, // s.vec3 instMul(v
	0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, // ec3 _vec, mat3 _
	0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, // mtx) { return ( 
	0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, // (_vec) * (_mtx) 
	0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, // ); }.vec3 instMu
	0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, // l(mat3 _mtx, vec
	0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // 3 _vec) { return
	0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, //  ( (_mtx) * (_ve
	0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, // c) ); }.vec4 ins
	0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, // tMul(vec4 _vec, 
	0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // mat4 _mtx) { ret
	0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, // urn ( (_vec) * (
	0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, // _mtx) ); }.vec4 
	0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, // instMul(mat4 _mt
	0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, // x, vec4 _vec) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, // return ( (_mtx) 
	0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, 0x6c, // * (_vec) ); }.fl
	0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, 0x70, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x61, // oat rcp(float _a
	0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x5f, // ) { return 1.0/_
	0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, // a; }.vec2 rcp(ve
	0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // c2 _a) { return 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, // vec2(1.0)/_a; }.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x61, // vec3 rcp(vec3 _a
	0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, // ) { return vec3(
	0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, // 1.0)/_a; }.vec4 
	0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, // rcp(vec4 _a) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, // eturn vec4(1.0)/
	0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x65, 0x63, 0x32, 0x5f, // _a; }.vec2 vec2_
	0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, // splat(float _x) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, // { return vec2(_x
	0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, // , _x); }.vec3 ve
	0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, // c3_splat(float _
	0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, // x) { return vec3
	0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, // (_x, _x, _x); }.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, // vec4 vec4_splat(
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // float _x) { retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, // rn vec4(_x, _x, 
	0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x32, // _x, _x); }.uvec2
	0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, //  uvec2_splat(uin
	0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, // t _x) { return u
	0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, // vec2(_x, _x); }.
	0x75, 0x76, 0x65, 0x63, 0x33, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, // uvec3 uvec3_spla
	0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // t(uint _x) { ret
	0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, // urn uvec3(_x, _x
	0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, // , _x); }.uvec4 u
	0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, // vec4_splat(uint 
	0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, // _x) { return uve
	0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, // c4(_x, _x, _x, _
	0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, // x); }.mat4 mtxFr
	0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, // omRows(vec4 _0, 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, // vec4 _1, vec4 _2
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // , vec4 _3).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, // urn transpose(ma
	0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, // t4(_0, _1, _2, _
	0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, // 3) );.}.mat4 mtx
	0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, // FromCols(vec4 _0
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // , vec4 _1, vec4 
	0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, // _2, vec4 _3).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, // eturn mat4(_0, _
	0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, // 1, _2, _3);.}.ma
	0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, // t3 mtxFromRows(v
	0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, // ec3 _0, vec3 _1,
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, //  vec3 _2).{.retu
	0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, // rn transpose(mat
	0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x20, 0x29, 0x3b, // 3(_0, _1, _2) );
	0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, // .}.mat3 mtxFromC
	0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, // ols(vec3 _0, vec
	0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, // 3 _1, vec3 _2).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, // .return mat3(_0,
	0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, //  _1, _2);.}.unif
	0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x52, // orm vec4 u_viewR
	0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, // ect;.uniform vec
	0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x54, 0x65, 0x78, 0x65, 0x6c, 0x3b, 0x0a, 0x75, // 4 u_viewTexel;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, // niform mat4 u_vi
	0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, // ew;.uniform mat4
	0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, //  u_invView;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x3b, // orm mat4 u_proj;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, // .uniform mat4 u_
	0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // invProj;.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, //  mat4 u_viewProj
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, // ;.uniform mat4 u
	0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, // _invViewProj;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, // iform mat4 u_mod
	0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // el[32];.uniform 
	0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, // mat4 u_modelView
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, // ;.uniform mat4 u
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, // _modelViewProj;.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x61, // uniform vec4 u_a
	0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x66, 0x34, 0x3b, 0x0a, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, // lphaRef4;.layout
	0x28, 0x72, 0x67, 0x62, 0x61, 0x31, 0x36, 0x66, 0x2c, 0x20, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, // (rgba16f, bindin
	0x67, 0x3d, 0x30, 0x29, 0x20, 0x72, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x75, 0x6e, // g=0) readonly un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x69, 0x6d, 0x61, 0x67, // iform highp imag
	0x65, 0x32, 0x44, 0x20, 0x75, 0x5f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x3b, 0x0a, 0x6c, 0x61, // e2D u_Source;.la
	0x79, 0x6f, 0x75, 0x74, 0x28, 0x72, 0x67, 0x62, 0x61, 0x31, 0x36, 0x66, 0x2c, 0x20, 0x62, 0x69, // yout(rgba16f, bi
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x3d, 0x31, 0x29, 0x20, 0x77, 0x72, 0x69, 0x74, 0x65, 0x6f, 0x6e, // nding=1) writeon
	0x6c, 0x79, 0x20, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, // ly uniform highp
	0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x32, 0x44, 0x20, 0x75, 0x5f, 0x44, 0x65, 0x73, 0x74, 0x69, //  image2D u_Desti
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // nation;.const fl
	0x6f, 0x61, 0x74, 0x20, 0x67, 0x5f, 0x6b, 0x61, 0x69, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x72, 0x6e, // oat g_kaiserKern
	0x65, 0x6c, 0x34, 0x5b, 0x34, 0x5d, 0x5b, 0x34, 0x5d, 0x20, 0x3d, 0x20, 0x7b, 0x0a, 0x7b, 0x20, // el4[4][4] = {.{ 
	0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x39, 0x39, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x34, 0x38, // 0.000099, 0.0048
	0x38, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x34, 0x38, 0x38, 0x30, 0x2c, 0x20, 0x30, 0x2e, // 80, 0.004880, 0.
	0x30, 0x30, 0x30, 0x30, 0x39, 0x39, 0x20, 0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, // 000099 },.{ 0.00
	0x34, 0x38, 0x38, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x32, 0x34, 0x30, 0x31, 0x34, 0x31, 0x2c, 0x20, // 4880, 0.240141, 
	0x30, 0x2e, 0x32, 0x34, 0x30, 0x31, 0x34, 0x31, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x34, 0x38, // 0.240141, 0.0048
	0x38, 0x30, 0x20, 0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x34, 0x38, 0x38, 0x30, // 80 },.{ 0.004880
	0x2c, 0x20, 0x30, 0x2e, 0x32, 0x34, 0x30, 0x31, 0x34, 0x31, 0x2c, 0x20, 0x30, 0x2e, 0x32, 0x34, // , 0.240141, 0.24
	0x30, 0x31, 0x34, 0x31, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x34, 0x38, 0x38, 0x30, 0x20, 0x7d, // 0141, 0.004880 }
	0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x39, 0x39, 0x2c, 0x20, 0x30, 0x2e, // ,.{ 0.000099, 0.
	0x30, 0x30, 0x34, 0x38, 0x38, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x34, 0x38, 0x38, 0x30, // 004880, 0.004880
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x39, 0x39, 0x20, 0x7d, 0x0a, 0x7d, 0x3b, 0x0a, // , 0.000099 }.};.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x67, 0x5f, 0x6b, 0x61, // const float g_ka
	0x69, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x36, 0x5b, 0x36, 0x5d, 0x5b, 0x36, // iserKernel6[6][6
	0x5d, 0x20, 0x3d, 0x20, 0x7b, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x33, 0x36, // ] = {.{ 0.000036
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x38, 0x30, 0x38, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, // , 0.000808, 0.00
	0x32, 0x31, 0x33, 0x33, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x32, 0x31, 0x33, 0x33, 0x2c, 0x20, // 2133, 0.002133, 
	0x30, 0x2e, 0x30, 0x30, 0x30, 0x38, 0x30, 0x38, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, // 0.000808, 0.0000
	0x33, 0x36, 0x20, 0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x38, 0x30, 0x38, // 36 },.{ 0.000808
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, 0x34, 0x31, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, // , 0.018410, 0.04
	0x38, 0x36, 0x32, 0x34, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x38, 0x36, 0x32, 0x34, 0x2c, 0x20, // 8624, 0.048624, 
	0x30, 0x2e, 0x30, 0x31, 0x38, 0x34, 0x31, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x38, // 0.018410, 0.0008
	0x30, 0x38, 0x20, 0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x32, 0x31, 0x33, 0x33, // 08 },.{ 0.002133
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x38, 0x36, 0x32, 0x34, 0x2c, 0x20, 0x30, 0x2e, 0x31, 0x32, // , 0.048624, 0.12
	0x38, 0x34, 0x32, 0x34, 0x2c, 0x20, 0x30, 0x2e, 0x31, 0x32, 0x38, 0x34, 0x32, 0x34, 0x2c, 0x20, // 8424, 0.128424, 
	0x30, 0x2e, 0x30, 0x34, 0x38, 0x36, 0x32, 0x34, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x32, 0x31, // 0.048624, 0.0021
	0x33, 0x33, 0x20, 0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x32, 0x31, 0x33, 0x33, // 33 },.{ 0.002133
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x38, 0x36, 0x32, 0x34, 0x2c, 0x20, 0x30, 0x2e, 0x31, 0x32, // , 0.048624, 0.12
	0x38, 0x34, 0x32, 0x34, 0x2c, 0x20, 0x30, 0x2e, 0x31, 0x32, 0x38, 0x34, 0x32, 0x34, 0x2c, 0x20, // 8424, 0.128424, 
	0x30, 0x2e, 0x30, 0x34, 0x38, 0x36, 0x32, 0x34, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x32, 0x31, // 0.048624, 0.0021
	0x33, 0x33, 0x20, 0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x38, 0x30, 0x38, // 33 },.{ 0.000808
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, 0x34, 0x31, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, // , 0.018410, 0.04
	0x38, 0x36, 0x32, 0x34, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x38, 0x36, 0x32, 0x34, 0x2c, 0x20, // 8624, 0.048624, 
	0x30, 0x2e, 0x30, 0x31, 0x38, 0x34, 0x31, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x38, // 0.018410, 0.0008
	0x30, 0x38, 0x20, 0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x33, 0x36, // 08 },.{ 0.000036
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x38, 0x30, 0x38, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, // , 0.000808, 0.00
	0x32, 0x31, 0x33, 0x33, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x32, 0x31, 0x33, 0x33, 0x2c, 0x20, // 2133, 0.002133, 
	0x30, 0x2e, 0x30, 0x30, 0x30, 0x38, 0x30, 0x38, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, // 0.000808, 0.0000
	0x33, 0x36, 0x20, 0x7d, 0x0a, 0x7d, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // 36 }.};.const fl
	0x6f, 0x61, 0x74, 0x20, 0x67, 0x5f, 0x6b, 0x61, 0x69, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x72, 0x6e, // oat g_kaiserKern
	0x65, 0x6c, 0x36, 0x73, 0x5b, 0x36, 0x5d, 0x5b, 0x36, 0x5d, 0x20, 0x3d, 0x20, 0x7b, 0x0a, 0x7b, // el6s[6][6] = {.{
	0x20, 0x30, 0x2e, 0x30, 0x30, 0x35, 0x37, 0x39, 0x33, 0x38, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, //  0.00579380, 0.0
	0x31, 0x33, 0x30, 0x32, 0x34, 0x39, 0x31, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x39, 0x32, 0x33, // 1302491, 0.01923
	0x39, 0x37, 0x39, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x39, 0x32, 0x33, 0x39, 0x37, 0x39, 0x2c, // 979, 0.01923979,
	0x20, 0x30, 0x2e, 0x30, 0x31, 0x33, 0x30, 0x32, 0x34, 0x39, 0x31, 0x2c, 0x20, 0x30, 0x2e, 0x30, //  0.01302491, 0.0
	0x30, 0x35, 0x37, 0x39, 0x33, 0x38, 0x30, 0x20, 0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, // 0579380 },.{ 0.0
	0x31, 0x33, 0x30, 0x32, 0x34, 0x39, 0x31, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x32, 0x39, 0x32, 0x38, // 1302491, 0.02928
	0x31, 0x30, 0x33, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x33, 0x32, 0x35, 0x32, 0x35, 0x36, 0x2c, // 103, 0.04325256,
	0x20, 0x30, 0x2e, 0x30, 0x34, 0x33, 0x32, 0x35, 0x32, 0x35, 0x36, 0x2c, 0x20, 0x30, 0x2e, 0x30, //  0.04325256, 0.0
	0x32, 0x39, 0x32, 0x38, 0x31, 0x30, 0x33, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x33, 0x30, 0x32, // 2928103, 0.01302
	0x34, 0x39, 0x31, 0x20, 0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x39, 0x32, 0x33, // 491 },.{ 0.01923
	0x39, 0x37, 0x39, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x33, 0x32, 0x35, 0x32, 0x35, 0x36, 0x2c, // 979, 0.04325256,
	0x20, 0x30, 0x2e, 0x30, 0x36, 0x33, 0x38, 0x39, 0x30, 0x36, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, //  0.06389065, 0.0
	0x36, 0x33, 0x38, 0x39, 0x30, 0x36, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x33, 0x32, 0x35, // 6389065, 0.04325
	0x32, 0x35, 0x36, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x39, 0x32, 0x33, 0x39, 0x37, 0x39, 0x20, // 256, 0.01923979 
	0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x39, 0x32, 0x33, 0x39, 0x37, 0x39, 0x2c, // },.{ 0.01923979,
	0x20, 0x30, 0x2e, 0x30, 0x34, 0x33, 0x32, 0x35, 0x32, 0x35, 0x36, 0x2c, 0x20, 0x30, 0x2e, 0x30, //  0.04325256, 0.0
	0x36, 0x33, 0x38, 0x39, 0x30, 0x36, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x36, 0x33, 0x38, 0x39, // 6389065, 0.06389
	0x30, 0x36, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x33, 0x32, 0x35, 0x32, 0x35, 0x36, 0x2c, // 065, 0.04325256,
	0x20, 0x30, 0x2e, 0x30, 0x31, 0x39, 0x32, 0x33, 0x39, 0x37, 0x39, 0x20, 0x7d, 0x2c, 0x0a, 0x7b, //  0.01923979 },.{
	0x20, 0x30, 0x2e, 0x30, 0x31, 0x33, 0x30, 0x32, 0x34, 0x39, 0x31, 0x2c, 0x20, 0x30, 0x2e, 0x30, //  0.01302491, 0.0
	0x32, 0x39, 0x32, 0x38, 0x31, 0x30, 0x33, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x33, 0x32, 0x35, // 2928103, 0.04325
	0x32, 0x35, 0x36, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x33, 0x32, 0x35, 0x32, 0x35, 0x36, 0x2c, // 256, 0.04325256,
	0x20, 0x30, 0x2e, 0x30, 0x32, 0x39, 0x32, 0x38, 0x31, 0x30, 0x33, 0x2c, 0x20, 0x30, 0x2e, 0x30, //  0.02928103, 0.0
	0x31, 0x33, 0x30, 0x32, 0x34, 0x39, 0x31, 0x20, 0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, // 1302491 },.{ 0.0
	0x30, 0x35, 0x37, 0x39, 0x33, 0x38, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x33, 0x30, 0x32, // 0579380, 0.01302
	0x34, 0x39, 0x31, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x39, 0x32, 0x33, 0x39, 0x37, 0x39, 0x2c, // 491, 0.01923979,
	0x20, 0x30, 0x2e, 0x30, 0x31, 0x39, 0x32, 0x33, 0x39, 0x37, 0x39, 0x2c, 0x20, 0x30, 0x2e, 0x30, //  0.01923979, 0.0
	0x31, 0x33, 0x30, 0x32, 0x34, 0x39, 0x31, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x35, 0x37, 0x39, // 1302491, 0.00579
	0x33, 0x38, 0x30, 0x20, 0x7d, 0x0a, 0x7d, 0x3b, 0x0a, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x20, // 380 }.};.layout 
	0x28, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x78, 0x20, 0x3d, 0x20, // (local_size_x = 
	0x38, 0x2c, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x79, 0x20, // 8, local_size_y 
	0x3d, 0x20, 0x38, 0x2c, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, // = 8, local_size_
	0x7a, 0x20, 0x3d, 0x20, 0x31, 0x29, 0x20, 0x69, 0x6e, 0x3b, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, // z = 1) in;.void 
	0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x20, 0x7b, 0x0a, 0x69, 0x76, 0x65, 0x63, 0x32, 0x20, 0x64, // main() {.ivec2 d
	0x73, 0x74, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x3d, 0x20, 0x69, 0x76, 0x65, 0x63, 0x32, 0x28, // stCoord = ivec2(
	0x67, 0x6c, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, // gl_GlobalInvocat
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x2e, 0x78, 0x79, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, // ionID.xy);.const
	0x20, 0x69, 0x76, 0x65, 0x63, 0x32, 0x20, 0x64, 0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x20, 0x3d, //  ivec2 dstSize =
	0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x28, 0x75, 0x5f, 0x44, 0x65, 0x73, //  imageSize(u_Des
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x61, // tination);.if (a
	0x6e, 0x79, 0x28, 0x67, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x68, 0x61, 0x6e, 0x45, 0x71, // ny(greaterThanEq
	0x75, 0x61, 0x6c, 0x28, 0x64, 0x73, 0x74, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x2c, 0x20, 0x64, 0x73, // ual(dstCoord, ds
	0x74, 0x53, 0x69, 0x7a, 0x65, 0x29, 0x29, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x3b, // tSize))).return;
	0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x76, 0x65, // .vec4 color = ve
	0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x69, // c4_splat(0.0);.i
	0x66, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x3d, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x20, 0x7b, // f (1.0 == 0.0) {
	0x0a, 0x69, 0x76, 0x65, 0x63, 0x32, 0x20, 0x73, 0x72, 0x63, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, // .ivec2 srcCoord 
	0x3d, 0x20, 0x64, 0x73, 0x74, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x2a, 0x20, 0x32, 0x3b, 0x0a, // = dstCoord * 2;.
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x3d, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x6f, // color += imageLo
	0x61, 0x64, 0x28, 0x75, 0x5f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2c, 0x20, 0x73, 0x72, 0x63, // ad(u_Source, src
	0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, // Coord );.color +
	0x3d, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x28, 0x75, 0x5f, 0x53, 0x6f, // = imageLoad(u_So
	0x75, 0x72, 0x63, 0x65, 0x2c, 0x20, 0x73, 0x72, 0x63, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x2b, // urce, srcCoord +
	0x20, 0x69, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2c, 0x20, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x63, //  ivec2(0, 1));.c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x3d, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x61, // olor += imageLoa
	0x64, 0x28, 0x75, 0x5f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2c, 0x20, 0x73, 0x72, 0x63, 0x43, // d(u_Source, srcC
	0x6f, 0x6f, 0x72, 0x64, 0x20, 0x2b, 0x20, 0x69, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2c, 0x20, // oord + ivec2(1, 
	0x30, 0x29, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x3d, 0x20, 0x69, 0x6d, // 0));.color += im
	0x61, 0x67, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x28, 0x75, 0x5f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, // ageLoad(u_Source
	0x2c, 0x20, 0x73, 0x72, 0x63, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x2b, 0x20, 0x69, 0x76, 0x65, // , srcCoord + ive
	0x63, 0x32, 0x28, 0x31, 0x2c, 0x20, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // c2(1, 1));.color
	0x20, 0x2f, 0x3d, 0x20, 0x34, 0x2e, 0x30, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x20, //  /= 4.0;.}.else 
	0x69, 0x66, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x3d, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, // if (1.0 == 1.0) 
	0x7b, 0x0a, 0x69, 0x76, 0x65, 0x63, 0x32, 0x20, 0x73, 0x72, 0x63, 0x43, 0x6f, 0x6f, 0x72, 0x64, // {.ivec2 srcCoord
	0x20, 0x3d, 0x20, 0x64, 0x73, 0x74, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x2a, 0x20, 0x32, 0x20, //  = dstCoord * 2 
	0x2d, 0x20, 0x69, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2c, 0x20, 0x31, 0x29, 0x3b, 0x0a, 0x66, // - ivec2(1, 1);.f
	0x6f, 0x72, 0x20, 0x28, 0x69, 0x6e, 0x74, 0x20, 0x64, 0x79, 0x20, 0x3d, 0x20, 0x30, 0x3b, 0x20, // or (int dy = 0; 
	0x64, 0x79, 0x20, 0x3c, 0x20, 0x34, 0x3b, 0x20, 0x2b, 0x2b, 0x64, 0x79, 0x29, 0x0a, 0x66, 0x6f, // dy < 4; ++dy).fo
	0x72, 0x20, 0x28, 0x69, 0x6e, 0x74, 0x20, 0x64, 0x78, 0x20, 0x3d, 0x20, 0x30, 0x3b, 0x20, 0x64, // r (int dx = 0; d
	0x78, 0x20, 0x3c, 0x20, 0x34, 0x3b, 0x20, 0x2b, 0x2b, 0x64, 0x78, 0x29, 0x0a, 0x63, 0x6f, 0x6c, // x < 4; ++dx).col
	0x6f, 0x72, 0x20, 0x2b, 0x3d, 0x20, 0x67, 0x5f, 0x6b, 0x61, 0x69, 0x73, 0x65, 0x72, 0x4b, 0x65, // or += g_kaiserKe
	0x72, 0x6e, 0x65, 0x6c, 0x34, 0x5b, 0x64, 0x78, 0x5d, 0x5b, 0x64, 0x79, 0x5d, 0x20, 0x2a, 0x20, // rnel4[dx][dy] * 
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x28, 0x75, 0x5f, 0x53, 0x6f, 0x75, 0x72, // imageLoad(u_Sour
	0x63, 0x65, 0x2c, 0x20, 0x73, 0x72, 0x63, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x2b, 0x20, 0x69, // ce, srcCoord + i
	0x76, 0x65, 0x63, 0x32, 0x28, 0x64, 0x78, 0x2c, 0x20, 0x64, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, // vec2(dx, dy));.}
	0x0a, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x69, 0x66, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x3d, 0x3d, // .else if (1.0 ==
	0x20, 0x32, 0x2e, 0x30, 0x29, 0x20, 0x7b, 0x0a, 0x69, 0x76, 0x65, 0x63, 0x32, 0x20, 0x73, 0x72, //  2.0) {.ivec2 sr
	0x63, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x3d, 0x20, 0x64, 0x73, 0x74, 0x43, 0x6f, 0x6f, 0x72, // cCoord = dstCoor
	0x64, 0x20, 0x2a, 0x20, 0x32, 0x20, 0x2d, 0x20, 0x69, 0x76, 0x65, 0x63, 0x32, 0x28, 0x32, 0x2c, // d * 2 - ivec2(2,
	0x20, 0x32, 0x29, 0x3b, 0x0a, 0x66, 0x6f, 0x72, 0x20, 0x28, 0x69, 0x6e, 0x74, 0x20, 0x64, 0x79, //  2);.for (int dy
	0x20, 0x3d, 0x20, 0x30, 0x3b, 0x20, 0x64, 0x79, 0x20, 0x3c, 0x20, 0x36, 0x3b, 0x20, 0x2b, 0x2b, //  = 0; dy < 6; ++
	0x64, 0x79, 0x29, 0x0a, 0x66, 0x6f, 0x72, 0x20, 0x28, 0x69, 0x6e, 0x74, 0x20, 0x64, 0x78, 0x20, // dy).for (int dx 
	0x3d, 0x20, 0x30, 0x3b, 0x20, 0x64, 0x78, 0x20, 0x3c, 0x20, 0x36, 0x3b, 0x20, 0x2b, 0x2b, 0x64, // = 0; dx < 6; ++d
	0x78, 0x29, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x3d, 0x20, 0x67, 0x5f, 0x6b, 0x61, // x).color += g_ka
	0x69, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x36, 0x5b, 0x64, 0x78, 0x5d, 0x5b, // iserKernel6[dx][
	0x64, 0x79, 0x5d, 0x20, 0x2a, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x28, // dy] * imageLoad(
	0x75, 0x5f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2c, 0x20, 0x73, 0x72, 0x63, 0x43, 0x6f, 0x6f, // u_Source, srcCoo
	0x72, 0x64, 0x20, 0x2b, 0x20, 0x69, 0x76, 0x65, 0x63, 0x32, 0x28, 0x64, 0x78, 0x2c, 0x20, 0x64, // rd + ivec2(dx, d
	0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x69, 0x66, 0x20, 0x28, // y));.}.else if (
	0x31, 0x2e, 0x30, 0x20, 0x3d, 0x3d, 0x20, 0x33, 0x2e, 0x30, 0x29, 0x20, 0x7b, 0x0a, 0x69, 0x76, // 1.0 == 3.0) {.iv
	0x65, 0x63, 0x32, 0x20, 0x73, 0x72, 0x63, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x3d, 0x20, 0x64, // ec2 srcCoord = d
	0x73, 0x74, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x2a, 0x20, 0x32, 0x20, 0x2d, 0x20, 0x69, 0x76, // stCoord * 2 - iv
	0x65, 0x63, 0x32, 0x28, 0x32, 0x2c, 0x20, 0x32, 0x29, 0x3b, 0x0a, 0x66, 0x6f, 0x72, 0x20, 0x28, // ec2(2, 2);.for (
	0x69, 0x6e, 0x74, 0x20, 0x64, 0x79, 0x20, 0x3d, 0x20, 0x30, 0x3b, 0x20, 0x64, 0x79, 0x20, 0x3c, // int dy = 0; dy <
	0x20, 0x36, 0x3b, 0x20, 0x2b, 0x2b, 0x64, 0x79, 0x29, 0x0a, 0x66, 0x6f, 0x72, 0x20, 0x28, 0x69, //  6; ++dy).for (i
	0x6e, 0x74, 0x20, 0x64, 0x78, 0x20, 0x3d, 0x20, 0x30, 0x3b, 0x20, 0x64, 0x78, 0x20, 0x3c, 0x20, // nt dx = 0; dx < 
	0x36, 0x3b, 0x20, 0x2b, 0x2b, 0x64, 0x78, 0x29, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, // 6; ++dx).color +
	0x3d, 0x20, 0x67, 0x5f, 0x6b, 0x61, 0x69, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, // = g_kaiserKernel
	0x36, 0x73, 0x5b, 0x64, 0x78, 0x5d, 0x5b, 0x64, 0x79, 0x5d, 0x20, 0x2a, 0x20, 0x69, 0x6d, 0x61, // 6s[dx][dy] * ima
	0x67, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x28, 0x75, 0x5f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2c, // geLoad(u_Source,
	0x20, 0x73, 0x72, 0x63, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x2b, 0x20, 0x69, 0x76, 0x65, 0x63, //  srcCoord + ivec
	0x32, 0x28, 0x64, 0x78, 0x2c, 0x20, 0x64, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x69, 0x6d, // 2(dx, dy));.}.im
	0x61, 0x67, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x28, 0x75, 0x5f, 0x44, 0x65, 0x73, 0x74, 0x69, // ageStore(u_Desti
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x64, 0x73, 0x74, 0x43, 0x6f, 0x6f, 0x72, 0x64, // nation, dstCoord
	0x2c, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x00,                   // , color);.}..
};
static const uint8_t cs_mipmap_rgba16f_glsl[3934] =
{
	0x43, 0x53, 0x48, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4b, 0x0f, // CSH...........K.
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x34, 0x34, 0x30, 0x0a, 0x76, // ..#version 440.v
	0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x33, // ec3 instMul(vec3
	0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, //  _vec, mat3 _mtx
	0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, // ) { return ( (_v
	0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, // ec) * (_mtx) ); 
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, // }.vec3 instMul(m
	0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, // at3 _mtx, vec3 _
	0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, // vec) { return ( 
	0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, // (_mtx) * (_vec) 
	0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, // ); }.vec4 instMu
	0x6c, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, // l(vec4 _vec, mat
	0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // 4 _mtx) { return
	0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, //  ( (_vec) * (_mt
	0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, // x) ); }.vec4 ins
	0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, // tMul(mat4 _mtx, 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // vec4 _vec) { ret
	0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, // urn ( (_mtx) * (
	0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // _vec) ); }.float
	0x20, 0x72, 0x63, 0x70, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, //  rcp(float _a) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x5f, 0x61, 0x3b, 0x20, //  return 1.0/_a; 
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, // }.vec2 rcp(vec2 
	0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, // _a) { return vec
	0x32, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, // 2(1.0)/_a; }.vec
	0x33, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, // 3 rcp(vec3 _a) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x31, 0x2e, 0x30, //  return vec3(1.0
	0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x72, 0x63, 0x70, // )/_a; }.vec4 rcp
	0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // (vec4 _a) { retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, // rn vec4(1.0)/_a;
	0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, //  }.vec2 vec2_spl
	0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, // at(float _x) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, // eturn vec2(_x, _
	0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, // x); }.vec3 vec3_
	0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, // splat(float _x) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, // { return vec3(_x
	0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, // , _x, _x); }.vec
	0x34, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, // 4 vec4_splat(flo
	0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // at _x) { return 
	0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, // vec4(_x, _x, _x,
	0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x76, //  _x); }.uvec2 uv
	0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, // ec2_splat(uint _
	0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, // x) { return uvec
	0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, // 2(_x, _x); }.uve
	0x63, 0x33, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, // c3 uvec3_splat(u
	0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // int _x) { return
	0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, //  uvec3(_x, _x, _
	0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x76, 0x65, 0x63, // x); }.uvec4 uvec
	0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, // 4_splat(uint _x)
	0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x28, //  { return uvec4(
	0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, // _x, _x, _x, _x);
	0x20, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, //  }.mat4 mtxFromR
	0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, // ows(vec4 _0, vec
	0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, // 4 _1, vec4 _2, v
	0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // ec4 _3).{.return
	0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x28, //  transpose(mat4(
	0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x20, // _0, _1, _2, _3) 
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, // );.}.mat4 mtxFro
	0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, // mCols(vec4 _0, v
	0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, // ec4 _1, vec4 _2,
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, //  vec4 _3).{.retu
	0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, // rn mat4(_0, _1, 
	0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, // _2, _3);.}.mat3 
	0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, // mtxFromRows(vec3
	0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, //  _0, vec3 _1, ve
	0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // c3 _2).{.return 
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, // transpose(mat3(_
	0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // 0, _1, _2) );.}.
	0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, // mat3 mtxFromCols
	0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, // (vec3 _0, vec3 _
	0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // 1, vec3 _2).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, // turn mat3(_0, _1
	0x2c, 0x20, 0x5f, 0x32, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // , _2);.}.uniform
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x63, 0x74, //  vec4 u_viewRect
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, // ;.uniform vec4 u
	0x5f, 0x76, 0x69, 0x65, 0x77, 0x54, 0x65, 0x78, 0x65, 0x6c, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // _viewTexel;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x3b, // orm mat4 u_view;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, // .uniform mat4 u_
	0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // invView;.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, //  mat4 u_proj;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, // iform mat4 u_inv
	0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, // Proj;.uniform ma
	0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, // t4 u_viewProj;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, // niform mat4 u_in
	0x76, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, // vViewProj;.unifo
	0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5b, // rm mat4 u_model[
	0x33, 0x32, 0x5d, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, // 32];.uniform mat
	0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, // 4 u_modelView;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, // niform mat4 u_mo
	0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, // delViewProj;.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x61, 0x6c, 0x70, 0x68, // form vec4 u_alph
	0x61, 0x52, 0x65, 0x66, 0x34, 0x3b, 0x0a, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x28, 0x72, 0x67, // aRef4;.layout(rg
	0x62, 0x61, 0x31, 0x36, 0x66, 0x2c, 0x20, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x3d, 0x30, // ba16f, binding=0
	0x29, 0x20, 0x72, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x75, 0x6e, 0x69, 0x66, 0x6f, // ) readonly unifo
	0x72, 0x6d, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x32, 0x44, 0x20, 0x75, 0x5f, 0x53, 0x6f, 0x75, // rm image2D u_Sou
	0x72, 0x63, 0x65, 0x3b, 0x0a, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x28, 0x72, 0x67, 0x62, 0x61, // rce;.layout(rgba
	0x31, 0x36, 0x66, 0x2c, 0x20, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x3d, 0x31, 0x29, 0x20, // 16f, binding=1) 
	0x77, 0x72, 0x69, 0x74, 0x65, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // writeonly unifor
	0x6d, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x32, 0x44, 0x20, 0x75, 0x5f, 0x44, 0x65, 0x73, 0x74, // m image2D u_Dest
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // ination;.const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x67, 0x5f, 0x6b, 0x61, 0x69, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x72, // loat g_kaiserKer
	0x6e, 0x65, 0x6c, 0x34, 0x5b, 0x34, 0x5d, 0x5b, 0x34, 0x5d, 0x20, 0x3d, 0x20, 0x7b, 0x0a, 0x7b, // nel4[4][4] = {.{
	0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x39, 0x39, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x34, //  0.000099, 0.004
	0x38, 0x38, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x34, 0x38, 0x38, 0x30, 0x2c, 0x20, 0x30, // 880, 0.004880, 0
	0x2e, 0x30, 0x30, 0x30, 0x30, 0x39, 0x39, 0x20, 0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, // .000099 },.{ 0.0
	0x30, 0x34, 0x38, 0x38, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x32, 0x34, 0x30, 0x31, 0x34, 0x31, 0x2c, // 04880, 0.240141,
	0x20, 0x30, 0x2e, 0x32, 0x34, 0x30, 0x31, 0x34, 0x31, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x34, //  0.240141, 0.004
	0x38, 0x38, 0x30, 0x20, 0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x34, 0x38, 0x38, // 880 },.{ 0.00488
	0x30, 0x2c, 0x20, 0x30, 0x2e, 0x32, 0x34, 0x30, 0x31, 0x34, 0x31, 0x2c, 0x20, 0x30, 0x2e, 0x32, // 0, 0.240141, 0.2
	0x34, 0x30, 0x31, 0x34, 0x31, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x34, 0x38, 0x38, 0x30, 0x20, // 40141, 0.004880 
	0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x39, 0x39, 0x2c, 0x20, 0x30, // },.{ 0.000099, 0
	0x2e, 0x30, 0x30, 0x34, 0x38, 0x38, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x34, 0x38, 0x38, // .004880, 0.00488
	0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x39, 0x39, 0x20, 0x7d, 0x0a, 0x7d, 0x3b, // 0, 0.000099 }.};
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x67, 0x5f, 0x6b, // .const float g_k
	0x61, 0x69, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x36, 0x5b, 0x36, 0x5d, 0x5b, // aiserKernel6[6][
	0x36, 0x5d, 0x20, 0x3d, 0x20, 0x7b, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x33, // 6] = {.{ 0.00003
	0x36, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x38, 0x30, 0x38, 0x2c, 0x20, 0x30, 0x2e, 0x30, // 6, 0.000808, 0.0
	0x30, 0x32, 0x31, 0x33, 0x33, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x32, 0x31, 0x33, 0x33, 0x2c, // 02133, 0.002133,
	0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x38, 0x30, 0x38, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, //  0.000808, 0.000
	0x30, 0x33, 0x36, 0x20, 0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x38, 0x30, // 036 },.{ 0.00080
	0x38, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, 0x34, 0x31, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, // 8, 0.018410, 0.0
	0x34, 0x38, 0x36, 0x32, 0x34, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x38, 0x36, 0x32, 0x34, 0x2c, // 48624, 0.048624,
	0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, 0x34, 0x31, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, //  0.018410, 0.000
	0x38, 0x30, 0x38, 0x20, 0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x32, 0x31, 0x33, // 808 },.{ 0.00213
	0x33, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x38, 0x36, 0x32, 0x34, 0x2c, 0x20, 0x30, 0x2e, 0x31, // 3, 0.048624, 0.1
	0x32, 0x38, 0x34, 0x32, 0x34, 0x2c, 0x20, 0x30, 0x2e, 0x31, 0x32, 0x38, 0x34, 0x32, 0x34, 0x2c, // 28424, 0.128424,
	0x20, 0x30, 0x2e, 0x30, 0x34, 0x38, 0x36, 0x32, 0x34, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x32, //  0.048624, 0.002
	0x31, 0x33, 0x33, 0x20, 0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x32, 0x31, 0x33, // 133 },.{ 0.00213
	0x33, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x38, 0x36, 0x32, 0x34, 0x2c, 0x20, 0x30, 0x2e, 0x31, // 3, 0.048624, 0.1
	0x32, 0x38, 0x34, 0x32, 0x34, 0x2c, 0x20, 0x30, 0x2e, 0x31, 0x32, 0x38, 0x34, 0x32, 0x34, 0x2c, // 28424, 0.128424,
	0x20, 0x30, 0x2e, 0x30, 0x34, 0x38, 0x36, 0x32, 0x34, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x32, //  0.048624, 0.002
	0x31, 0x33, 0x33, 0x20, 0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x38, 0x30, // 133 },.{ 0.00080
	0x38, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, 0x34, 0x31, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, // 8, 0.018410, 0.0
	0x34, 0x38, 0x36, 0x32, 0x34, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x38, 0x36, 0x32, 0x34, 0x2c, // 48624, 0.048624,
	0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, 0x34, 0x31, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, //  0.018410, 0.000
	0x38, 0x30, 0x38, 0x20, 0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x33, // 808 },.{ 0.00003
	0x36, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x38, 0x30, 0x38, 0x2c, 0x20, 0x30, 0x2e, 0x30, // 6, 0.000808, 0.0
	0x30, 0x32, 0x31, 0x33, 0x33, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x32, 0x31, 0x33, 0x33, 0x2c, // 02133, 0.002133,
	0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x38, 0x30, 0x38, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, //  0.000808, 0.000
	0x30, 0x33, 0x36, 0x20, 0x7d, 0x0a, 0x7d, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // 036 }.};.const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x67, 0x5f, 0x6b, 0x61, 0x69, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x72, // loat g_kaiserKer
	0x6e, 0x65, 0x6c, 0x36, 0x73, 0x5b, 0x36, 0x5d, 0x5b, 0x36, 0x5d, 0x20, 0x3d, 0x20, 0x7b, 0x0a, // nel6s[6][6] = {.
	0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x35, 0x37, 0x39, 0x33, 0x38, 0x30, 0x2c, 0x20, 0x30, 0x2e, // { 0.00579380, 0.
	0x30, 0x31, 0x33, 0x30, 0x32, 0x34, 0x39, 0x31, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x39, 0x32, // 01302491, 0.0192
	0x33, 0x39, 0x37, 0x39, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x39, 0x32, 0x33, 0x39, 0x37, 0x39, // 3979, 0.01923979
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x33, 0x30, 0x32, 0x34, 0x39, 0x31, 0x2c, 0x20, 0x30, 0x2e, // , 0.01302491, 0.
	0x30, 0x30, 0x35, 0x37, 0x39, 0x33, 0x38, 0x30, 0x20, 0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, // 00579380 },.{ 0.
	0x30, 0x31, 0x33, 0x30, 0x32, 0x34, 0x39, 0x31, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x32, 0x39, 0x32, // 01302491, 0.0292
	0x38, 0x31, 0x30, 0x33, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x33, 0x32, 0x35, 0x32, 0x35, 0x36, // 8103, 0.04325256
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x33, 0x32, 0x35, 0x32, 0x35, 0x36, 0x2c, 0x20, 0x30, 0x2e, // , 0.04325256, 0.
	0x30, 0x32, 0x39, 0x32, 0x38, 0x31, 0x30, 0x33, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x33, 0x30, // 02928103, 0.0130
	0x32, 0x34, 0x39, 0x31, 0x20, 0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x39, 0x32, // 2491 },.{ 0.0192
	0x33, 0x39, 0x37, 0x39, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x33, 0x32, 0x35, 0x32, 0x35, 0x36, // 3979, 0.04325256
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x36, 0x33, 0x38, 0x39, 0x30, 0x36, 0x35, 0x2c, 0x20, 0x30, 0x2e, // , 0.06389065, 0.
	0x30, 0x36, 0x33, 0x38, 0x39, 0x30, 0x36, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x33, 0x32, // 06389065, 0.0432
	0x35, 0x32, 0x35, 0x36, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x39, 0x32, 0x33, 0x39, 0x37, 0x39, // 5256, 0.01923979
	0x20, 0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x39, 0x32, 0x33, 0x39, 0x37, 0x39, //  },.{ 0.01923979
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x33, 0x32, 0x35, 0x32, 0x35, 0x36, 0x2c, 0x20, 0x30, 0x2e, // , 0.04325256, 0.
	0x30, 0x36, 0x33, 0x38, 0x39, 0x30, 0x36, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x36, 0x33, 0x38, // 06389065, 0.0638
	0x39, 0x30, 0x36, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x33, 0x32, 0x35, 0x32, 0x35, 0x36, // 9065, 0.04325256
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x39, 0x32, 0x33, 0x39, 0x37, 0x39, 0x20, 0x7d, 0x2c, 0x0a, // , 0.01923979 },.
	0x7b, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x33, 0x30, 0x32, 0x34, 0x39, 0x31, 0x2c, 0x20, 0x30, 0x2e, // { 0.01302491, 0.
	0x30, 0x32, 0x39, 0x32, 0x38, 0x31, 0x30, 0x33, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x33, 0x32, // 02928103, 0.0432
	0x35, 0x32, 0x35, 0x36, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x33, 0x32, 0x35, 0x32, 0x35, 0x36, // 5256, 0.04325256
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x32, 0x39, 0x32, 0x38, 0x31, 0x30, 0x33, 0x2c, 0x20, 0x30, 0x2e, // , 0.02928103, 0.
	0x30, 0x31, 0x33, 0x30, 0x32, 0x34, 0x39, 0x31, 0x20, 0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, // 01302491 },.{ 0.
	0x30, 0x30, 0x35, 0x37, 0x39, 0x33, 0x38, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x33, 0x30, // 00579380, 0.0130
	0x32, 0x34, 0x39, 0x31, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x39, 0x32, 0x33, 0x39, 0x37, 0x39, // 2491, 0.01923979
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x39, 0x32, 0x33, 0x39, 0x37, 0x39, 0x2c, 0x20, 0x30, 0x2e, // , 0.01923979, 0.
	0x30, 0x31, 0x33, 0x30, 0x32, 0x34, 0x39, 0x31, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x35, 0x37, // 01302491, 0.0057
	0x39, 0x33, 0x38, 0x30, 0x20, 0x7d, 0x0a, 0x7d, 0x3b, 0x0a, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, // 9380 }.};.layout
	0x20, 0x28, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x78, 0x20, 0x3d, //  (local_size_x =
	0x20, 0x38, 0x2c, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x79, //  8, local_size_y
	0x20, 0x3d, 0x20, 0x38, 0x2c, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, //  = 8, local_size
	0x5f, 0x7a, 0x20, 0x3d, 0x20, 0x31, 0x29, 0x20, 0x69, 0x6e, 0x3b, 0x0a, 0x76, 0x6f, 0x69, 0x64, // _z = 1) in;.void
	0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x20, 0x7b, 0x0a, 0x69, 0x76, 0x65, 0x63, 0x32, 0x20, //  main() {.ivec2 
	0x64, 0x73, 0x74, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x3d, 0x20, 0x69, 0x76, 0x65, 0x63, 0x32, // dstCoord = ivec2
	0x28, 0x67, 0x6c, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, // (gl_GlobalInvoca
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x2e, 0x78, 0x79, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // tionID.xy);.cons
	0x74, 0x20, 0x69, 0x76, 0x65, 0x63, 0x32, 0x20, 0x64, 0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x20, // t ivec2 dstSize 
	0x3d, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x28, 0x75, 0x5f, 0x44, 0x65, // = imageSize(u_De
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, // stination);.if (
	0x61, 0x6e, 0x79, 0x28, 0x67, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x68, 0x61, 0x6e, 0x45, // any(greaterThanE
	0x71, 0x75, 0x61, 0x6c, 0x28, 0x64, 0x73, 0x74, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x2c, 0x20, 0x64, // qual(dstCoord, d
	0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x29, 0x29, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // stSize))).return
	0x3b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x76, // ;.vec4 color = v
	0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x3b, 0x0a, // ec4_splat(0.0);.
	0x69, 0x66, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x3d, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x20, // if (1.0 == 0.0) 
	0x7b, 0x0a, 0x69, 0x76, 0x65, 0x63, 0x32, 0x20, 0x73, 0x72, 0x63, 0x43, 0x6f, 0x6f, 0x72, 0x64, // {.ivec2 srcCoord
	0x20, 0x3d, 0x20, 0x64, 0x73, 0x74, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x2a, 0x20, 0x32, 0x3b, //  = dstCoord * 2;
	0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x3d, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4c, // .color += imageL
	0x6f, 0x61, 0x64, 0x28, 0x75, 0x5f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2c, 0x20, 0x73, 0x72, // oad(u_Source, sr
	0x63, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, // cCoord );.color 
	0x2b, 0x3d, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x28, 0x75, 0x5f, 0x53, // += imageLoad(u_S
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2c, 0x20, 0x73, 0x72, 0x63, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, // ource, srcCoord 
	0x2b, 0x20, 0x69, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2c, 0x20, 0x31, 0x29, 0x29, 0x3b, 0x0a, // + ivec2(0, 1));.
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x3d, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x6f, // color += imageLo
	0x61, 0x64, 0x28, 0x75, 0x5f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2c, 0x20, 0x73, 0x72, 0x63, // ad(u_Source, src
	0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x2b, 0x20, 0x69, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2c, // Coord + ivec2(1,
	0x20, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x3d, 0x20, 0x69, //  0));.color += i
	0x6d, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x28, 0x75, 0x5f, 0x53, 0x6f, 0x75, 0x72, 0x63, // mageLoad(u_Sourc
	0x65, 0x2c, 0x20, 0x73, 0x72, 0x63, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x2b, 0x20, 0x69, 0x76, // e, srcCoord + iv
	0x65, 0x63, 0x32, 0x28, 0x31, 0x2c, 0x20, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, // ec2(1, 1));.colo
	0x72, 0x20, 0x2f, 0x3d, 0x20, 0x34, 0x2e, 0x30, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, // r /= 4.0;.}.else
	0x20, 0x69, 0x66, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x3d, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x29, //  if (1.0 == 1.0)
	0x20, 0x7b, 0x0a, 0x69, 0x76, 0x65, 0x63, 0x32, 0x20, 0x73, 0x72, 0x63, 0x43, 0x6f, 0x6f, 0x72, //  {.ivec2 srcCoor
	0x64, 0x20, 0x3d, 0x20, 0x64, 0x73, 0x74, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x2a, 0x20, 0x32, // d = dstCoord * 2
	0x20, 0x2d, 0x20, 0x69, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2c, 0x20, 0x31, 0x29, 0x3b, 0x0a, //  - ivec2(1, 1);.
	0x66, 0x6f, 0x72, 0x20, 0x28, 0x69, 0x6e, 0x74, 0x20, 0x64, 0x79, 0x20, 0x3d, 0x20, 0x30, 0x3b, // for (int dy = 0;
	0x20, 0x64, 0x79, 0x20, 0x3c, 0x20, 0x34, 0x3b, 0x20, 0x2b, 0x2b, 0x64, 0x79, 0x29, 0x0a, 0x66, //  dy < 4; ++dy).f
	0x6f, 0x72, 0x20, 0x28, 0x69, 0x6e, 0x74, 0x20, 0x64, 0x78, 0x20, 0x3d, 0x20, 0x30, 0x3b, 0x20, // or (int dx = 0; 
	0x64, 0x78, 0x20, 0x3c, 0x20, 0x34, 0x3b, 0x20, 0x2b, 0x2b, 0x64, 0x78, 0x29, 0x0a, 0x63, 0x6f, // dx < 4; ++dx).co
	0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x3d, 0x20, 0x67, 0x5f, 0x6b, 0x61, 0x69, 0x73, 0x65, 0x72, 0x4b, // lor += g_kaiserK
	0x65, 0x72, 0x6e, 0x65, 0x6c, 0x34, 0x5b, 0x64, 0x78, 0x5d, 0x5b, 0x64, 0x79, 0x5d, 0x20, 0x2a, // ernel4[dx][dy] *
	0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x28, 0x75, 0x5f, 0x53, 0x6f, 0x75, //  imageLoad(u_Sou
	0x72, 0x63, 0x65, 0x2c, 0x20, 0x73, 0x72, 0x63, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x2b, 0x20, // rce, srcCoord + 
	0x69, 0x76, 0x65, 0x63, 0x32, 0x28, 0x64, 0x78, 0x2c, 0x20, 0x64, 0x79, 0x29, 0x29, 0x3b, 0x0a, // ivec2(dx, dy));.
	0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x69, 0x66, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x3d, // }.else if (1.0 =
	0x3d, 0x20, 0x32, 0x2e, 0x30, 0x29, 0x20, 0x7b, 0x0a, 0x69, 0x76, 0x65, 0x63, 0x32, 0x20, 0x73, // = 2.0) {.ivec2 s
	0x72, 0x63, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x3d, 0x20, 0x64, 0x73, 0x74, 0x43, 0x6f, 0x6f, // rcCoord = dstCoo
	0x72, 0x64, 0x20, 0x2a, 0x20, 0x32, 0x20, 0x2d, 0x20, 0x69, 0x76, 0x65, 0x63, 0x32, 0x28, 0x32, // rd * 2 - ivec2(2
	0x2c, 0x20, 0x32, 0x29, 0x3b, 0x0a, 0x66, 0x6f, 0x72, 0x20, 0x28, 0x69, 0x6e, 0x74, 0x20, 0x64, // , 2);.for (int d
	0x79, 0x20, 0x3d, 0x20, 0x30, 0x3b, 0x20, 0x64, 0x79, 0x20, 0x3c, 0x20, 0x36, 0x3b, 0x20, 0x2b, // y = 0; dy < 6; +
	0x2b, 0x64, 0x79, 0x29, 0x0a, 0x66, 0x6f, 0x72, 0x20, 0x28, 0x69, 0x6e, 0x74, 0x20, 0x64, 0x78, // +dy).for (int dx
	0x20, 0x3d, 0x20, 0x30, 0x3b, 0x20, 0x64, 0x78, 0x20, 0x3c, 0x20, 0x36, 0x3b, 0x20, 0x2b, 0x2b, //  = 0; dx < 6; ++
	0x64, 0x78, 0x29, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x3d, 0x20, 0x67, 0x5f, 0x6b, // dx).color += g_k
	0x61, 0x69, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x36, 0x5b, 0x64, 0x78, 0x5d, // aiserKernel6[dx]
	0x5b, 0x64, 0x79, 0x5d, 0x20, 0x2a, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x61, 0x64, // [dy] * imageLoad
	0x28, 0x75, 0x5f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2c, 0x20, 0x73, 0x72, 0x63, 0x43, 0x6f, // (u_Source, srcCo
	0x6f, 0x72, 0x64, 0x20, 0x2b, 0x20, 0x69, 0x76, 0x65, 0x63, 0x32, 0x28, 0x64, 0x78, 0x2c, 0x20, // ord + ivec2(dx, 
	0x64, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x69, 0x66, 0x20, // dy));.}.else if 
	0x28, 0x31, 0x2e, 0x30, 0x20, 0x3d, 0x3d, 0x20, 0x33, 0x2e, 0x30, 0x29, 0x20, 0x7b, 0x0a, 0x69, // (1.0 == 3.0) {.i
	0x76, 0x65, 0x63, 0x32, 0x20, 0x73, 0x72, 0x63, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x3d, 0x20, // vec2 srcCoord = 
	0x64, 0x73, 0x74, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x2a, 0x20, 0x32, 0x20, 0x2d, 0x20, 0x69, // dstCoord * 2 - i
	0x76, 0x65, 0x63, 0x32, 0x28, 0x32, 0x2c, 0x20, 0x32, 0x29, 0x3b, 0x0a, 0x66, 0x6f, 0x72, 0x20, // vec2(2, 2);.for 
	0x28, 0x69, 0x6e, 0x74, 0x20, 0x64, 0x79, 0x20, 0x3d, 0x20, 0x30, 0x3b, 0x20, 0x64, 0x79, 0x20, // (int dy = 0; dy 
	0x3c, 0x20, 0x36, 0x3b, 0x20, 0x2b, 0x2b, 0x64, 0x79, 0x29, 0x0a, 0x66, 0x6f, 0x72, 0x20, 0x28, // < 6; ++dy).for (
	0x69, 0x6e, 0x74, 0x20, 0x64, 0x78, 0x20, 0x3d, 0x20, 0x30, 0x3b, 0x20, 0x64, 0x78, 0x20, 0x3c, // int dx = 0; dx <
	0x20, 0x36, 0x3b, 0x20, 0x2b, 0x2b, 0x64, 0x78, 0x29, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, //  6; ++dx).color 
	0x2b, 0x3d, 0x20, 0x67, 0x5f, 0x6b, 0x61, 0x69, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x72, 0x6e, 0x65, // += g_kaiserKerne
	0x6c, 0x36, 0x73, 0x5b, 0x64, 0x78, 0x5d, 0x5b, 0x64, 0x79, 0x5d, 0x20, 0x2a, 0x20, 0x69, 0x6d, // l6s[dx][dy] * im
	0x61, 0x67, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x28, 0x75, 0x5f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, // ageLoad(u_Source
	0x2c, 0x20, 0x73, 0x72, 0x63, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x2b, 0x20, 0x69, 0x76, 0x65, // , srcCoord + ive
	0x63, 0x32, 0x28, 0x64, 0x78, 0x2c, 0x20, 0x64, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x69, // c2(dx, dy));.}.i
	0x6d, 0x61, 0x67, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x28, 0x75, 0x5f, 0x44, 0x65, 0x73, 0x74, // mageStore(u_Dest
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x64, 0x73, 0x74, 0x43, 0x6f, 0x6f, 0x72, // ination, dstCoor
	0x64, 0x2c, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x00,             // d, color);.}..
};
static const uint8_t cs_mipmap_rgba16f_dx11[1154] =
{
	0x43, 0x53, 0x48, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6c, 0x04, // CSH...........l.
	0x00, 0x00, 0x44, 0x58, 0x42, 0x43, 0x34, 0x95, 0xb5, 0xc2, 0x30, 0xd0, 0xa7, 0x1e, 0x17, 0xdf, // ..DXBC4...0.....
	0xfa, 0xa3, 0x85, 0x58, 0x03, 0x6f, 0x01, 0x00, 0x00, 0x00, 0x6c, 0x04, 0x00, 0x00, 0x03, 0x00, // ...X.o....l.....
	0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x4c, 0x00, 0x00, 0x00, 0x49, 0x53, // ..,...<...L...IS
	0x47, 0x4e, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x4f, 0x53, // GN............OS
	0x47, 0x4e, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x53, 0x48, // GN............SH
	0x45, 0x58, 0x18, 0x04, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x06, 0x01, 0x00, 0x00, 0x6a, 0x08, // EX....P.......j.
	0x00, 0x01, 0x35, 0x18, 0x00, 0x00, 0x42, 0x00, 0x00, 0x00, 0x38, 0x9e, 0xcf, 0x38, 0x00, 0x00, // ..5...B...8..8..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0xe8, 0x9f, 0x3b, 0x00, 0x00, // ..........h..;..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0xe8, 0x9f, 0x3b, 0x00, 0x00, // ..........h..;..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x9e, 0xcf, 0x38, 0x00, 0x00, // ..........8..8..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0xe8, 0x9f, 0x3b, 0x00, 0x00, // ..........h..;..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0xe7, 0x75, 0x3e, 0x00, 0x00, // ............u>..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0xe7, 0x75, 0x3e, 0x00, 0x00, // ............u>..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0xe8, 0x9f, 0x3b, 0x00, 0x00, // ..........h..;..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0xe8, 0x9f, 0x3b, 0x00, 0x00, // ..........h..;..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0xe7, 0x75, 0x3e, 0x00, 0x00, // ............u>..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0xe7, 0x75, 0x3e, 0x00, 0x00, // ............u>..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0xe8, 0x9f, 0x3b, 0x00, 0x00, // ..........h..;..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x9e, 0xcf, 0x38, 0x00, 0x00, // ..........8..8..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0xe8, 0x9f, 0x3b, 0x00, 0x00, // ..........h..;..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0xe8, 0x9f, 0x3b, 0x00, 0x00, // ..........h..;..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x9e, 0xcf, 0x38, 0x00, 0x00, // ..........8..8..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x58, 0x18, 0x00, 0x04, 0x00, 0x70, // ..........X....p
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x55, 0x00, 0x00, 0x9c, 0x18, 0x00, 0x04, 0x00, 0xe0, // ......UU........
	0x11, 0x00, 0x01, 0x00, 0x00, 0x00, 0x55, 0x55, 0x00, 0x00, 0x5f, 0x00, 0x00, 0x02, 0x32, 0x00, // ......UU.._...2.
	0x02, 0x00, 0x68, 0x00, 0x00, 0x02, 0x06, 0x00, 0x00, 0x00, 0x9b, 0x00, 0x00, 0x04, 0x08, 0x00, // ..h.............
	0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3d, 0x10, 0x00, 0x89, 0xc2, 0x00, // ..........=.....
	0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x32, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, // ..CU..2........@
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0xee, 0x11, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2b, 0x00, // ......F.......+.
	0x00, 0x04, 0xc2, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x04, 0x02, 0x00, 0x2b, 0x00, // ..............+.
	0x00, 0x05, 0x32, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x00, 0x00, // ..2.......F.....
	0x00, 0x00, 0x1d, 0x00, 0x00, 0x07, 0x32, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe6, 0x0a, // ......2.........
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, // ......F.......<.
	0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x04, 0x03, 0x0a, 0x00, // ................
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x01, 0x15, 0x00, 0x00, 0x01, 0x29, 0x00, // ......>.......).
	0x00, 0x09, 0x32, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x02, 0x00, 0x02, 0x40, // ..2.......F....@
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x1e, 0x00, 0x00, 0x0a, 0x32, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, // ......2.......F.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // .......@........
	0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x08, 0xc2, 0x00, // ..........6.....
	0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .......@........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x08, 0xf2, 0x00, // ..........6.....
	0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .......@........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x22, 0x00, // ..........6...".
	0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, // .......@......0.
	0x00, 0x01, 0x21, 0x00, 0x00, 0x07, 0x42, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x00, // ..!...B.........
	0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x03, 0x00, // .......@........
	0x04, 0x03, 0x2a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0xf2, 0x00, // ..*.......6.....
	0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x36, 0x00, // ......F.......6.
	0x00, 0x05, 0x12, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, // ...........@....
	0x00, 0x00, 0x30, 0x00, 0x00, 0x01, 0x21, 0x00, 0x00, 0x07, 0x42, 0x00, 0x10, 0x00, 0x00, 0x00, // ..0...!...B.....
	0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x04, 0x00, // ...........@....
	0x00, 0x00, 0x03, 0x00, 0x04, 0x03, 0x2a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x00, // ......*.......).
	0x00, 0x07, 0x42, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x03, 0x00, // ..B.............
	0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x07, 0x42, 0x00, // ...@..........B.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x2a, 0x00, // ..............*.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x07, 0x32, 0x00, 0x10, 0x00, 0x01, 0x00, // ..........2.....
	0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x03, 0x00, // ..F.......F.....
	0x00, 0x00, 0x2d, 0x00, 0x00, 0x89, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0xf2, 0x00, // ..-.......CU....
	0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x7e, // ......F.......F~
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x0a, 0xf2, 0x00, 0x10, 0x00, 0x04, 0x00, // ......2.........
	0x00, 0x00, 0x06, 0x90, 0x90, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x0e, // ......*.......F.
	0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x1e, 0x00, // ......F.........
	0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x03, 0x00, // ................
	0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x01, 0x36, 0x00, // ...@..........6.
	0x00, 0x05, 0xf2, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x04, 0x00, // ..........F.....
	0x00, 0x00, 0x1e, 0x00, 0x00, 0x07, 0x22, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x1a, 0x00, // ......".........
	0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x16, 0x00, // .......@........
	0x00, 0x01, 0xa4, 0x00, 0x00, 0x06, 0xf2, 0xe0, 0x11, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x05, // ..............F.
	0x02, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x01, 0x00, 0x00, // ..F.......>.....
	0x00, 0x00,                                                                                     // ..
};
static const uint8_t cs_mipmap_rgba16f_spv[2005] =
{
	0x43, 0x53, 0x48, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x08, 0x75, // CSH............u
	0x5f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x02, 0x4a, // _Source .......J
	0x00, 0x0d, 0x75, 0x5f, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x01, // ..u_Destination.
	0x00, 0x03, 0x00, 0x03, 0x00, 0x00, 0x02, 0x4a, 0x00, 0x94, 0x07, 0x00, 0x00, 0x03, 0x02, 0x23, // .......J.......#
	0x07, 0x00, 0x00, 0x01, 0x00, 0x0b, 0x00, 0x08, 0x00, 0x0e, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x11, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x11, 0x00, 0x02, 0x00, 0x32, 0x00, 0x00, // .............2..
	0x00, 0x0b, 0x00, 0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, 0x4c, 0x53, 0x4c, 0x2e, 0x73, 0x74, // .........GLSL.st
	0x64, 0x2e, 0x34, 0x35, 0x30, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, // d.450...........
	0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x06, 0x00, 0x05, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, // ................
	0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x5d, 0x01, 0x00, 0x00, 0x10, 0x00, 0x06, // .main....]......
	0x00, 0x04, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, // ................
	0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x03, 0x00, 0x05, 0x00, 0x00, 0x00, 0xf4, 0x01, 0x00, // ................
	0x00, 0x05, 0x00, 0x04, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, // .........main...
	0x00, 0x05, 0x00, 0x06, 0x00, 0x61, 0x00, 0x00, 0x00, 0x75, 0x5f, 0x44, 0x65, 0x73, 0x74, 0x69, // .....a...u_Desti
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x00, 0x00, 0x00, 0x05, 0x00, 0x05, 0x00, 0x7e, 0x00, 0x00, // nation.......~..
	0x00, 0x75, 0x5f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x08, // .u_Source.......
	0x00, 0x5d, 0x01, 0x00, 0x00, 0x67, 0x6c, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x49, 0x6e, // .]...gl_GlobalIn
	0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, // vocationID...G..
	0x00, 0x61, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, // .a...".......G..
	0x00, 0x61, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x47, 0x00, 0x03, // .a...!.......G..
	0x00, 0x61, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x7e, 0x00, 0x00, // .a.......G...~..
	0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x7e, 0x00, 0x00, // .".......G...~..
	0x00, 0x21, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x5d, 0x01, 0x00, // .!.......G...]..
	0x00, 0x0b, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x13, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, // ................
	0x00, 0x21, 0x00, 0x03, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x16, 0x00, 0x03, // .!..............
	0x00, 0x06, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, // ..... ..........
	0x00, 0x06, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x14, 0x00, 0x02, 0x00, 0x09, 0x00, 0x00, // ................
	0x00, 0x17, 0x00, 0x04, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, // ................
	0x00, 0x20, 0x00, 0x04, 0x00, 0x10, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, // . ..............
	0x00, 0x17, 0x00, 0x04, 0x00, 0x11, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, // ................
	0x00, 0x15, 0x00, 0x04, 0x00, 0x18, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, // ......... ......
	0x00, 0x17, 0x00, 0x04, 0x00, 0x19, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, // ................
	0x00, 0x17, 0x00, 0x04, 0x00, 0x2d, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, // .....-..........
	0x00, 0x2b, 0x00, 0x04, 0x00, 0x18, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .+.......>......
	0x00, 0x15, 0x00, 0x04, 0x00, 0x47, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .....G... ......
	0x00, 0x17, 0x00, 0x04, 0x00, 0x48, 0x00, 0x00, 0x00, 0x47, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, // .....H...G......
	0x00, 0x2b, 0x00, 0x04, 0x00, 0x47, 0x00, 0x00, 0x00, 0x4e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .+...G...N......
	0x00, 0x19, 0x00, 0x09, 0x00, 0x5f, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, // ....._..........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, // ................
	0x00, 0x02, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ..... ...`......
	0x00, 0x5f, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x60, 0x00, 0x00, 0x00, 0x61, 0x00, 0x00, // ._...;...`...a..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0x71, 0x00, 0x00, // .....+.......q..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x18, 0x00, 0x00, 0x00, 0x79, 0x00, 0x00, // .....+.......y..
	0x00, 0x02, 0x00, 0x00, 0x00, 0x19, 0x00, 0x09, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, // .........|......
	0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x7d, 0x00, 0x00, // ......... ...}..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x7d, 0x00, 0x00, // .....|...;...}..
	0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x18, 0x00, 0x00, // .~.......+......
	0x00, 0x87, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x05, 0x00, 0x19, 0x00, 0x00, // .........,......
	0x00, 0x9a, 0x00, 0x00, 0x00, 0x87, 0x00, 0x00, 0x00, 0x87, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, // .............+..
	0x00, 0x18, 0x00, 0x00, 0x00, 0xb7, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, // .............+..
	0x00, 0x47, 0x00, 0x00, 0x00, 0xc1, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x04, // .G..............
	0x00, 0xc2, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0xc1, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x04, // ................
	0x00, 0xc3, 0x00, 0x00, 0x00, 0xc2, 0x00, 0x00, 0x00, 0xc1, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, // .............+..
	0x00, 0x06, 0x00, 0x00, 0x00, 0xc4, 0x00, 0x00, 0x00, 0x38, 0x9e, 0xcf, 0x38, 0x2b, 0x00, 0x04, // .........8..8+..
	0x00, 0x06, 0x00, 0x00, 0x00, 0xc5, 0x00, 0x00, 0x00, 0x68, 0xe8, 0x9f, 0x3b, 0x2c, 0x00, 0x07, // .........h..;,..
	0x00, 0xc2, 0x00, 0x00, 0x00, 0xc6, 0x00, 0x00, 0x00, 0xc4, 0x00, 0x00, 0x00, 0xc5, 0x00, 0x00, // ................
	0x00, 0xc5, 0x00, 0x00, 0x00, 0xc4, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, // .........+......
	0x00, 0xc7, 0x00, 0x00, 0x00, 0x86, 0xe7, 0x75, 0x3e, 0x2c, 0x00, 0x07, 0x00, 0xc2, 0x00, 0x00, // .......u>,......
	0x00, 0xc8, 0x00, 0x00, 0x00, 0xc5, 0x00, 0x00, 0x00, 0xc7, 0x00, 0x00, 0x00, 0xc7, 0x00, 0x00, // ................
	0x00, 0xc5, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x07, 0x00, 0xc3, 0x00, 0x00, 0x00, 0xc9, 0x00, 0x00, // .....,..........
	0x00, 0xc6, 0x00, 0x00, 0x00, 0xc8, 0x00, 0x00, 0x00, 0xc8, 0x00, 0x00, 0x00, 0xc6, 0x00, 0x00, // ................
	0x00, 0x20, 0x00, 0x04, 0x00, 0xcc, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0xc3, 0x00, 0x00, // . ..............
	0x00, 0x2c, 0x00, 0x05, 0x00, 0x19, 0x00, 0x00, 0x00, 0xe7, 0x00, 0x00, 0x00, 0x79, 0x00, 0x00, // .,...........y..
	0x00, 0x79, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x5c, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, // .y... ..........
	0x00, 0x2d, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x5c, 0x01, 0x00, 0x00, 0x5d, 0x01, 0x00, // .-...;.......]..
	0x00, 0x01, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x07, 0x00, 0x11, 0x00, 0x00, 0x00, 0x08, 0x02, 0x00, // .....,..........
	0x00, 0x71, 0x00, 0x00, 0x00, 0x71, 0x00, 0x00, 0x00, 0x71, 0x00, 0x00, 0x00, 0x71, 0x00, 0x00, // .q...q...q...q..
	0x00, 0x36, 0x00, 0x05, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .6..............
	0x00, 0x03, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x05, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, // .............;..
	0x00, 0xcc, 0x00, 0x00, 0x00, 0x8f, 0x01, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, // .............=..
	0x00, 0x2d, 0x00, 0x00, 0x00, 0x5e, 0x01, 0x00, 0x00, 0x5d, 0x01, 0x00, 0x00, 0xf7, 0x00, 0x03, // .-...^...]......
	0x00, 0xdc, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfb, 0x00, 0x03, 0x00, 0x4e, 0x00, 0x00, // .............N..
	0x00, 0xa2, 0x01, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xa2, 0x01, 0x00, 0x00, 0x4f, 0x00, 0x07, // .............O..
	0x00, 0x19, 0x00, 0x00, 0x00, 0xa4, 0x01, 0x00, 0x00, 0x5e, 0x01, 0x00, 0x00, 0x5e, 0x01, 0x00, // .........^...^..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x5f, 0x00, 0x00, // .........=..._..
	0x00, 0xa5, 0x01, 0x00, 0x00, 0x61, 0x00, 0x00, 0x00, 0x68, 0x00, 0x04, 0x00, 0x48, 0x00, 0x00, // .....a...h...H..
	0x00, 0xe2, 0x01, 0x00, 0x00, 0xa5, 0x01, 0x00, 0x00, 0x7c, 0x00, 0x04, 0x00, 0x19, 0x00, 0x00, // .........|......
	0x00, 0xea, 0x01, 0x00, 0x00, 0xe2, 0x01, 0x00, 0x00, 0x6f, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, // .........o......
	0x00, 0xa8, 0x01, 0x00, 0x00, 0xa4, 0x01, 0x00, 0x00, 0x6f, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, // .........o......
	0x00, 0xaa, 0x01, 0x00, 0x00, 0xea, 0x01, 0x00, 0x00, 0xbe, 0x00, 0x05, 0x00, 0x0a, 0x00, 0x00, // ................
	0x00, 0xf0, 0x01, 0x00, 0x00, 0xa8, 0x01, 0x00, 0x00, 0xaa, 0x01, 0x00, 0x00, 0x9a, 0x00, 0x04, // ................
	0x00, 0x09, 0x00, 0x00, 0x00, 0xac, 0x01, 0x00, 0x00, 0xf0, 0x01, 0x00, 0x00, 0xf7, 0x00, 0x03, // ................
	0x00, 0xae, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0xac, 0x01, 0x00, // ................
	0x00, 0xad, 0x01, 0x00, 0x00, 0xae, 0x01, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xad, 0x01, 0x00, // ................
	0x00, 0xf9, 0x00, 0x02, 0x00, 0xdc, 0x01, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xae, 0x01, 0x00, // ................
	0x00, 0x84, 0x00, 0x05, 0x00, 0x19, 0x00, 0x00, 0x00, 0xb4, 0x01, 0x00, 0x00, 0xa4, 0x01, 0x00, // ................
	0x00, 0xe7, 0x00, 0x00, 0x00, 0x82, 0x00, 0x05, 0x00, 0x19, 0x00, 0x00, 0x00, 0xb5, 0x01, 0x00, // ................
	0x00, 0xb4, 0x01, 0x00, 0x00, 0x9a, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0xb6, 0x01, 0x00, // ................
	0x00, 0xf8, 0x00, 0x02, 0x00, 0xb6, 0x01, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x11, 0x00, 0x00, // ................
	0x00, 0x0a, 0x02, 0x00, 0x00, 0x08, 0x02, 0x00, 0x00, 0xae, 0x01, 0x00, 0x00, 0x0d, 0x02, 0x00, // ................
	0x00, 0xd2, 0x01, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x18, 0x00, 0x00, 0x00, 0x09, 0x02, 0x00, // ................
	0x00, 0x3e, 0x00, 0x00, 0x00, 0xae, 0x01, 0x00, 0x00, 0xd4, 0x01, 0x00, 0x00, 0xd2, 0x01, 0x00, // .>..............
	0x00, 0xb1, 0x00, 0x05, 0x00, 0x09, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x09, 0x02, 0x00, // ................
	0x00, 0xb7, 0x00, 0x00, 0x00, 0xf6, 0x00, 0x04, 0x00, 0xd5, 0x01, 0x00, 0x00, 0xd2, 0x01, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0xb9, 0x01, 0x00, 0x00, 0xba, 0x01, 0x00, // ................
	0x00, 0xd5, 0x01, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xba, 0x01, 0x00, 0x00, 0xf9, 0x00, 0x02, // ................
	0x00, 0xbb, 0x01, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xbb, 0x01, 0x00, 0x00, 0xf5, 0x00, 0x07, // ................
	0x00, 0x11, 0x00, 0x00, 0x00, 0x0d, 0x02, 0x00, 0x00, 0x0a, 0x02, 0x00, 0x00, 0xba, 0x01, 0x00, // ................
	0x00, 0xcd, 0x01, 0x00, 0x00, 0xbf, 0x01, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x18, 0x00, 0x00, // ................
	0x00, 0x0b, 0x02, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0xba, 0x01, 0x00, 0x00, 0xd0, 0x01, 0x00, // .....>..........
	0x00, 0xbf, 0x01, 0x00, 0x00, 0xb1, 0x00, 0x05, 0x00, 0x09, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, // ................
	0x00, 0x0b, 0x02, 0x00, 0x00, 0xb7, 0x00, 0x00, 0x00, 0xf6, 0x00, 0x04, 0x00, 0xd1, 0x01, 0x00, // ................
	0x00, 0xbf, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0xbe, 0x01, 0x00, // ................
	0x00, 0xbf, 0x01, 0x00, 0x00, 0xd1, 0x01, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xbf, 0x01, 0x00, // ................
	0x00, 0x3e, 0x00, 0x03, 0x00, 0x8f, 0x01, 0x00, 0x00, 0xc9, 0x00, 0x00, 0x00, 0x41, 0x00, 0x06, // .>...........A..
	0x00, 0x10, 0x00, 0x00, 0x00, 0xc2, 0x01, 0x00, 0x00, 0x8f, 0x01, 0x00, 0x00, 0x0b, 0x02, 0x00, // ................
	0x00, 0x09, 0x02, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0xc3, 0x01, 0x00, // .....=..........
	0x00, 0xc2, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x19, 0x00, 0x00, 0x00, 0xc7, 0x01, 0x00, // .....P..........
	0x00, 0x0b, 0x02, 0x00, 0x00, 0x09, 0x02, 0x00, 0x00, 0x80, 0x00, 0x05, 0x00, 0x19, 0x00, 0x00, // ................
	0x00, 0xc8, 0x01, 0x00, 0x00, 0xb5, 0x01, 0x00, 0x00, 0xc7, 0x01, 0x00, 0x00, 0x3d, 0x00, 0x04, // .............=..
	0x00, 0x7c, 0x00, 0x00, 0x00, 0xc9, 0x01, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x5f, 0x00, 0x07, // .|.......~..._..
	0x00, 0x11, 0x00, 0x00, 0x00, 0xf9, 0x01, 0x00, 0x00, 0xc9, 0x01, 0x00, 0x00, 0xc8, 0x01, 0x00, // ................
	0x00, 0x02, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x8e, 0x00, 0x05, 0x00, 0x11, 0x00, 0x00, // .....>..........
	0x00, 0xcb, 0x01, 0x00, 0x00, 0xf9, 0x01, 0x00, 0x00, 0xc3, 0x01, 0x00, 0x00, 0x81, 0x00, 0x05, // ................
	0x00, 0x11, 0x00, 0x00, 0x00, 0xcd, 0x01, 0x00, 0x00, 0x0d, 0x02, 0x00, 0x00, 0xcb, 0x01, 0x00, // ................
	0x00, 0x80, 0x00, 0x05, 0x00, 0x18, 0x00, 0x00, 0x00, 0xd0, 0x01, 0x00, 0x00, 0x0b, 0x02, 0x00, // ................
	0x00, 0x87, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0xbb, 0x01, 0x00, 0x00, 0xf8, 0x00, 0x02, // ................
	0x00, 0xd1, 0x01, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0xd2, 0x01, 0x00, 0x00, 0xf8, 0x00, 0x02, // ................
	0x00, 0xd2, 0x01, 0x00, 0x00, 0x80, 0x00, 0x05, 0x00, 0x18, 0x00, 0x00, 0x00, 0xd4, 0x01, 0x00, // ................
	0x00, 0x09, 0x02, 0x00, 0x00, 0x87, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0xb6, 0x01, 0x00, // ................
	0x00, 0xf8, 0x00, 0x02, 0x00, 0xd5, 0x01, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x5f, 0x00, 0x00, // .........=..._..
	0x00, 0xd8, 0x01, 0x00, 0x00, 0x61, 0x00, 0x00, 0x00, 0x63, 0x00, 0x04, 0x00, 0xd8, 0x01, 0x00, // .....a...c......
	0x00, 0xa4, 0x01, 0x00, 0x00, 0x0a, 0x02, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0xdc, 0x01, 0x00, // ................
	0x00, 0xf8, 0x00, 0x02, 0x00, 0xdc, 0x01, 0x00, 0x00, 0xfd, 0x00, 0x01, 0x00, 0x38, 0x00, 0x01, // .............8..
	0x00, 0x00, 0x00, 0x00, 0x00,                                                                   // .....
};
static const bgfx::EmbeddedShader cs_mipmap_rgba16f = BGFX_EMBEDDED_SHADER(cs_mipmap_rgba16f);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Build of compute shader from cs_mipmap.sc to cs_mipmap_rgba32f with options: FMT_rgba32f
static const uint8_t cs_mipmap_rgba32f_mtl[3238] =
{
	0x43, 0x53, 0x48, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x0d, 0x75, // CSH............u
	0x5f, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x01, 0x01, 0xff, 0xff, // _Destination....
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x75, 0x5f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x01, // .......u_Source.
	0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x75, 0x5f, 0x53, 0x6f, 0x75, 0x72, // ..........u_Sour
	0x63, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x08, 0x00, // ce..............
	0x01, 0x00, 0x4c, 0x0c, 0x00, 0x00, 0x23, 0x70, 0x72, 0x61, 0x67, 0x6d, 0x61, 0x20, 0x63, 0x6c, // ..L...#pragma cl
	0x61, 0x6e, 0x67, 0x20, 0x64, 0x69, 0x61, 0x67, 0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x20, 0x69, // ang diagnostic i
	0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x20, 0x22, 0x2d, 0x57, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, // gnored "-Wmissin
	0x67, 0x2d, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x22, 0x0a, 0x23, 0x70, // g-prototypes".#p
	0x72, 0x61, 0x67, 0x6d, 0x61, 0x20, 0x63, 0x6c, 0x61, 0x6e, 0x67, 0x20, 0x64, 0x69, 0x61, 0x67, // ragma clang diag
	0x6e, 0x6f, 0x73, 0x74, 0x69, 0x63, 0x20, 0x69, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x64, 0x20, 0x22, // nostic ignored "
	0x2d, 0x57, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x2d, 0x62, 0x72, 0x61, 0x63, 0x65, 0x73, // -Wmissing-braces
	0x22, 0x0a, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x6d, 0x65, 0x74, // "..#include <met
	0x61, 0x6c, 0x5f, 0x73, 0x74, 0x64, 0x6c, 0x69, 0x62, 0x3e, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, // al_stdlib>.#incl
	0x75, 0x64, 0x65, 0x20, 0x3c, 0x73, 0x69, 0x6d, 0x64, 0x2f, 0x73, 0x69, 0x6d, 0x64, 0x2e, 0x68, // ude <simd/simd.h
	0x3e, 0x0a, 0x0a, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, // >..using namespa
	0x63, 0x65, 0x20, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x3b, 0x0a, 0x0a, 0x74, 0x65, 0x6d, 0x70, 0x6c, // ce metal;..templ
	0x61, 0x74, 0x65, 0x3c, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x54, 0x2c, 0x20, // ate<typename T, 
	0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x20, 0x4e, 0x75, 0x6d, 0x3e, 0x0a, 0x73, 0x74, 0x72, 0x75, // size_t Num>.stru
	0x63, 0x74, 0x20, 0x73, 0x70, 0x76, 0x55, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x41, 0x72, 0x72, 0x61, // ct spvUnsafeArra
	0x79, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x54, 0x20, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, // y.{.    T elemen
	0x74, 0x73, 0x5b, 0x4e, 0x75, 0x6d, 0x20, 0x3f, 0x20, 0x4e, 0x75, 0x6d, 0x20, 0x3a, 0x20, 0x31, // ts[Num ? Num : 1
	0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x74, 0x68, 0x72, 0x65, // ];.    .    thre
	0x61, 0x64, 0x20, 0x54, 0x26, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x5b, // ad T& operator [
	0x5d, 0x20, 0x28, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x20, 0x70, 0x6f, 0x73, 0x29, 0x20, 0x74, // ] (size_t pos) t
	0x68, 0x72, 0x65, 0x61, 0x64, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, // hread.    {.    
	0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x65, 0x6c, 0x65, 0x6d, 0x65, //     return eleme
	0x6e, 0x74, 0x73, 0x5b, 0x70, 0x6f, 0x73, 0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, // nts[pos];.    }.
	0x20, 0x20, 0x20, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x78, 0x70, 0x72, 0x20, 0x63, 0x6f, //     constexpr co
	0x6e, 0x73, 0x74, 0x20, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x20, 0x54, 0x26, 0x20, 0x6f, 0x70, // nst thread T& op
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x5b, 0x5d, 0x20, 0x28, 0x73, 0x69, 0x7a, 0x65, 0x5f, // erator [] (size_
	0x74, 0x20, 0x70, 0x6f, 0x73, 0x29, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x74, 0x68, 0x72, // t pos) const thr
	0x65, 0x61, 0x64, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ead.    {.      
	0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, //   return element
	0x73, 0x5b, 0x70, 0x6f, 0x73, 0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, // s[pos];.    }.  
	0x20, 0x20, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x54, 0x26, //   .    device T&
	0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x5b, 0x5d, 0x20, 0x28, 0x73, 0x69, //  operator [] (si
	0x7a, 0x65, 0x5f, 0x74, 0x20, 0x70, 0x6f, 0x73, 0x29, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, // ze_t pos) device
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x72, // .    {.        r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5b, 0x70, // eturn elements[p
	0x6f, 0x73, 0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x63, // os];.    }.    c
	0x6f, 0x6e, 0x73, 0x74, 0x65, 0x78, 0x70, 0x72, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x64, // onstexpr const d
	0x65, 0x76, 0x69, 0x63, 0x65, 0x20, 0x54, 0x26, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, // evice T& operato
	0x72, 0x20, 0x5b, 0x5d, 0x20, 0x28, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x20, 0x70, 0x6f, 0x73, // r [] (size_t pos
	0x29, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x0a, 0x20, // ) const device. 
	0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, //    {.        ret
	0x75, 0x72, 0x6e, 0x20, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5b, 0x70, 0x6f, 0x73, // urn elements[pos
	0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x0a, 0x20, 0x20, // ];.    }.    .  
	0x20, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x65, 0x78, 0x70, 0x72, 0x20, 0x63, 0x6f, 0x6e, 0x73, //   constexpr cons
	0x74, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x20, 0x54, 0x26, 0x20, 0x6f, 0x70, // t constant T& op
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x5b, 0x5d, 0x20, 0x28, 0x73, 0x69, 0x7a, 0x65, 0x5f, // erator [] (size_
	0x74, 0x20, 0x70, 0x6f, 0x73, 0x29, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x63, 0x6f, 0x6e, // t pos) const con
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, // stant.    {.    
	0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x65, 0x6c, 0x65, 0x6d, 0x65, //     return eleme
	0x6e, 0x74, 0x73, 0x5b, 0x70, 0x6f, 0x73, 0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, // nts[pos];.    }.
	0x20, 0x20, 0x20, 0x20, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x67, //     .    threadg
	0x72, 0x6f, 0x75, 0x70, 0x20, 0x54, 0x26, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, // roup T& operator
	0x20, 0x5b, 0x5d, 0x20, 0x28, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x20, 0x70, 0x6f, 0x73, 0x29, //  [] (size_t pos)
	0x20, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x0a, 0x20, 0x20, 0x20, //  threadgroup.   
	0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, //  {.        retur
	0x6e, 0x20, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5b, 0x70, 0x6f, 0x73, 0x5d, 0x3b, // n elements[pos];
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, // .    }.    const
	0x65, 0x78, 0x70, 0x72, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x74, 0x68, 0x72, 0x65, 0x61, // expr const threa
	0x64, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x20, 0x54, 0x26, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, // dgroup T& operat
	0x6f, 0x72, 0x20, 0x5b, 0x5d, 0x20, 0x28, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x74, 0x20, 0x70, 0x6f, // or [] (size_t po
	0x73, 0x29, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x67, // s) const threadg
	0x72, 0x6f, 0x75, 0x70, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // roup.    {.     
	0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, //    return elemen
	0x74, 0x73, 0x5b, 0x70, 0x6f, 0x73, 0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x7d, // ts[pos];.    }.}
	0x3b, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x20, 0x73, 0x70, 0x76, 0x55, // ;..constant spvU
	0x6e, 0x73, 0x61, 0x66, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, // nsafeArray<float
	0x2c, 0x20, 0x34, 0x3e, 0x20, 0x5f, 0x31, 0x39, 0x37, 0x20, 0x3d, 0x20, 0x73, 0x70, 0x76, 0x55, // , 4> _197 = spvU
	0x6e, 0x73, 0x61, 0x66, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, // nsafeArray<float
	0x2c, 0x20, 0x34, 0x3e, 0x28, 0x7b, 0x20, 0x39, 0x2e, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x37, // , 4>({ 9.8999997
	0x31, 0x33, 0x35, 0x32, 0x35, 0x31, 0x37, 0x36, 0x30, 0x34, 0x38, 0x32, 0x37, 0x38, 0x38, 0x30, // 1352517604827880
	0x38, 0x35, 0x39, 0x33, 0x37, 0x35, 0x65, 0x2d, 0x30, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, // 859375e-05, 0.00
	0x34, 0x38, 0x37, 0x39, 0x39, 0x39, 0x39, 0x39, 0x30, 0x35, 0x38, 0x32, 0x34, 0x36, 0x36, 0x31, // 4879999905824661
	0x32, 0x35, 0x34, 0x38, 0x38, 0x32, 0x38, 0x31, 0x32, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, // 2548828125, 0.00
	0x34, 0x38, 0x37, 0x39, 0x39, 0x39, 0x39, 0x39, 0x30, 0x35, 0x38, 0x32, 0x34, 0x36, 0x36, 0x31, // 4879999905824661
	0x32, 0x35, 0x34, 0x38, 0x38, 0x32, 0x38, 0x31, 0x32, 0x35, 0x2c, 0x20, 0x39, 0x2e, 0x38, 0x39, // 2548828125, 9.89
	0x39, 0x39, 0x39, 0x39, 0x37, 0x31, 0x33, 0x35, 0x32, 0x35, 0x31, 0x37, 0x36, 0x30, 0x34, 0x38, // 9999713525176048
	0x32, 0x37, 0x38, 0x38, 0x30, 0x38, 0x35, 0x39, 0x33, 0x37, 0x35, 0x65, 0x2d, 0x30, 0x35, 0x20, // 27880859375e-05 
	0x7d, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x20, 0x73, 0x70, 0x76, // });.constant spv
	0x55, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x3c, 0x66, 0x6c, 0x6f, 0x61, // UnsafeArray<floa
	0x74, 0x2c, 0x20, 0x34, 0x3e, 0x20, 0x5f, 0x31, 0x39, 0x39, 0x20, 0x3d, 0x20, 0x73, 0x70, 0x76, // t, 4> _199 = spv
	0x55, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x3c, 0x66, 0x6c, 0x6f, 0x61, // UnsafeArray<floa
	0x74, 0x2c, 0x20, 0x34, 0x3e, 0x28, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x34, 0x38, 0x37, 0x39, // t, 4>({ 0.004879
	0x39, 0x39, 0x39, 0x39, 0x30, 0x35, 0x38, 0x32, 0x34, 0x36, 0x36, 0x31, 0x32, 0x35, 0x34, 0x38, // 9999058246612548
	0x38, 0x32, 0x38, 0x31, 0x32, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x32, 0x34, 0x30, 0x31, 0x34, 0x31, // 828125, 0.240141
	0x30, 0x30, 0x34, 0x33, 0x32, 0x33, 0x39, 0x35, 0x39, 0x33, 0x35, 0x30, 0x35, 0x38, 0x35, 0x39, // 0043239593505859
	0x33, 0x37, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x32, 0x34, 0x30, 0x31, 0x34, 0x31, 0x30, 0x30, 0x34, // 375, 0.240141004
	0x33, 0x32, 0x33, 0x39, 0x35, 0x39, 0x33, 0x35, 0x30, 0x35, 0x38, 0x35, 0x39, 0x33, 0x37, 0x35, // 3239593505859375
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x34, 0x38, 0x37, 0x39, 0x39, 0x39, 0x39, 0x39, 0x30, 0x35, // , 0.004879999905
	0x38, 0x32, 0x34, 0x36, 0x36, 0x31, 0x32, 0x35, 0x34, 0x38, 0x38, 0x32, 0x38, 0x31, 0x32, 0x35, // 8246612548828125
	0x20, 0x7d, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x20, 0x73, 0x70, //  });.constant sp
	0x76, 0x55, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x3c, 0x73, 0x70, 0x76, // vUnsafeArray<spv
	0x55, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x3c, 0x66, 0x6c, 0x6f, 0x61, // UnsafeArray<floa
	0x74, 0x2c, 0x20, 0x34, 0x3e, 0x2c, 0x20, 0x34, 0x3e, 0x20, 0x5f, 0x32, 0x30, 0x30, 0x20, 0x3d, // t, 4>, 4> _200 =
	0x20, 0x73, 0x70, 0x76, 0x55, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x3c, //  spvUnsafeArray<
	0x73, 0x70, 0x76, 0x55, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x3c, 0x66, // spvUnsafeArray<f
	0x6c, 0x6f, 0x61, 0x74, 0x2c, 0x20, 0x34, 0x3e, 0x2c, 0x20, 0x34, 0x3e, 0x28, 0x7b, 0x20, 0x73, // loat, 4>, 4>({ s
	0x70, 0x76, 0x55, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x3c, 0x66, 0x6c, // pvUnsafeArray<fl
	0x6f, 0x61, 0x74, 0x2c, 0x20, 0x34, 0x3e, 0x28, 0x7b, 0x20, 0x39, 0x2e, 0x38, 0x39, 0x39, 0x39, // oat, 4>({ 9.8999
	0x39, 0x39, 0x37, 0x31, 0x33, 0x35, 0x32, 0x35, 0x31, 0x37, 0x36, 0x30, 0x34, 0x38, 0x32, 0x37, // 9971352517604827
	0x38, 0x38, 0x30, 0x38, 0x35, 0x39, 0x33, 0x37, 0x35, 0x65, 0x2d, 0x30, 0x35, 0x2c, 0x20, 0x30, // 880859375e-05, 0
	0x2e, 0x30, 0x30, 0x34, 0x38, 0x37, 0x39, 0x39, 0x39, 0x39, 0x39, 0x30, 0x35, 0x38, 0x32, 0x34, // .004879999905824
	0x36, 0x36, 0x31, 0x32, 0x35, 0x34, 0x38, 0x38, 0x32, 0x38, 0x31, 0x32, 0x35, 0x2c, 0x20, 0x30, // 6612548828125, 0
	0x2e, 0x30, 0x30, 0x34, 0x38, 0x37, 0x39, 0x39, 0x39, 0x39, 0x39, 0x30, 0x35, 0x38, 0x32, 0x34, // .004879999905824
	0x36, 0x36, 0x31, 0x32, 0x35, 0x34, 0x38, 0x38, 0x32, 0x38, 0x31, 0x32, 0x35, 0x2c, 0x20, 0x39, // 6612548828125, 9
	0x2e, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x37, 0x31, 0x33, 0x35, 0x32, 0x35, 0x31, 0x37, 0x36, // .899999713525176
	0x30, 0x34, 0x38, 0x32, 0x37, 0x38, 0x38, 0x30, 0x38, 0x35, 0x39, 0x33, 0x37, 0x35, 0x65, 0x2d, // 04827880859375e-
	0x30, 0x35, 0x20, 0x7d, 0x29, 0x2c, 0x20, 0x73, 0x70, 0x76, 0x55, 0x6e, 0x73, 0x61, 0x66, 0x65, // 05 }), spvUnsafe
	0x41, 0x72, 0x72, 0x61, 0x79, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x2c, 0x20, 0x34, 0x3e, 0x28, // Array<float, 4>(
	0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x34, 0x38, 0x37, 0x39, 0x39, 0x39, 0x39, 0x39, 0x30, 0x35, // { 0.004879999905
	0x38, 0x32, 0x34, 0x36, 0x36, 0x31, 0x32, 0x35, 0x34, 0x38, 0x38, 0x32, 0x38, 0x31, 0x32, 0x35, // 8246612548828125
	0x2c, 0x20, 0x30, 0x2e, 0x32, 0x34, 0x30, 0x31, 0x34, 0x31, 0x30, 0x30, 0x34, 0x33, 0x32, 0x33, // , 0.240141004323
	0x39, 0x35, 0x39, 0x33, 0x35, 0x30, 0x35, 0x38, 0x35, 0x39, 0x33, 0x37, 0x35, 0x2c, 0x20, 0x30, // 9593505859375, 0
	0x2e, 0x32, 0x34, 0x30, 0x31, 0x34, 0x31, 0x30, 0x30, 0x34, 0x33, 0x32, 0x33, 0x39, 0x35, 0x39, // .240141004323959
	0x33, 0x35, 0x30, 0x35, 0x38, 0x35, 0x39, 0x33, 0x37, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, // 3505859375, 0.00
	0x34, 0x38, 0x37, 0x39, 0x39, 0x39, 0x39, 0x39, 0x30, 0x35, 0x38, 0x32, 0x34, 0x36, 0x36, 0x31, // 4879999905824661
	0x32, 0x35, 0x34, 0x38, 0x38, 0x32, 0x38, 0x31, 0x32, 0x35, 0x20, 0x7d, 0x29, 0x2c, 0x20, 0x73, // 2548828125 }), s
	0x70, 0x76, 0x55, 0x6e, 0x73, 0x61, 0x66, 0x65, 0x41, 0x72, 0x72, 0x61, 0x79, 0x3c, 0x66, 0x6c, // pvUnsafeArray<fl
	0x6f, 0x61, 0x74, 0x2c, 0x20, 0x34, 0x3e, 0x28, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x34, 0x38, // oat, 4>({ 0.0048
	0x37, 0x39, 0x39, 0x39, 0x39, 0x39, 0x30, 0x35, 0x38, 0x32, 0x34, 0x36, 0x36, 0x31, 0x32, 0x35, // 7999990582466125
	0x34, 0x38, 0x38, 0x32, 0x38, 0x31, 0x32, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x32, 0x34, 0x30, 0x31, // 48828125, 0.2401
	0x34, 0x31, 0x30, 0x30, 0x34, 0x33, 0x32, 0x33, 0x39, 0x35, 0x39, 0x33, 0x35, 0x30, 0x35, 0x38, // 4100432395935058
	0x35, 0x39, 0x33, 0x37, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x32, 0x34, 0x30, 0x31, 0x34, 0x31, 0x30, // 59375, 0.2401410
	0x30, 0x34, 0x33, 0x32, 0x33, 0x39, 0x35, 0x39, 0x33, 0x35, 0x30, 0x35, 0x38, 0x35, 0x39, 0x33, // 0432395935058593
	0x37, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x34, 0x38, 0x37, 0x39, 0x39, 0x39, 0x39, 0x39, // 75, 0.0048799999
	0x30, 0x35, 0x38, 0x32, 0x34, 0x36, 0x36, 0x31, 0x32, 0x35, 0x34, 0x38, 0x38, 0x32, 0x38, 0x31, // 0582466125488281
	0x32, 0x35, 0x20, 0x7d, 0x29, 0x2c, 0x20, 0x73, 0x70, 0x76, 0x55, 0x6e, 0x73, 0x61, 0x66, 0x65, // 25 }), spvUnsafe
	0x41, 0x72, 0x72, 0x61, 0x79, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x2c, 0x20, 0x34, 0x3e, 0x28, // Array<float, 4>(
	0x7b, 0x20, 0x39, 0x2e, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x37, 0x31, 0x33, 0x35, 0x32, 0x35, // { 9.899999713525
	0x31, 0x37, 0x36, 0x30, 0x34, 0x38, 0x32, 0x37, 0x38, 0x38, 0x30, 0x38, 0x35, 0x39, 0x33, 0x37, // 1760482788085937
	0x35, 0x65, 0x2d, 0x30, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x34, 0x38, 0x37, 0x39, 0x39, // 5e-05, 0.0048799
	0x39, 0x39, 0x39, 0x30, 0x35, 0x38, 0x32, 0x34, 0x36, 0x36, 0x31, 0x32, 0x35, 0x34, 0x38, 0x38, // 9990582466125488
	0x32, 0x38, 0x31, 0x32, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x34, 0x38, 0x37, 0x39, 0x39, // 28125, 0.0048799
	0x39, 0x39, 0x39, 0x30, 0x35, 0x38, 0x32, 0x34, 0x36, 0x36, 0x31, 0x32, 0x35, 0x34, 0x38, 0x38, // 9990582466125488
	0x32, 0x38, 0x31, 0x32, 0x35, 0x2c, 0x20, 0x39, 0x2e, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x37, // 28125, 9.8999997
	0x31, 0x33, 0x35, 0x32, 0x35, 0x31, 0x37, 0x36, 0x30, 0x34, 0x38, 0x32, 0x37, 0x38, 0x38, 0x30, // 1352517604827880
	0x38, 0x35, 0x39, 0x33, 0x37, 0x35, 0x65, 0x2d, 0x30, 0x35, 0x20, 0x7d, 0x29, 0x20, 0x7d, 0x29, // 859375e-05 }) })
	0x3b, 0x0a, 0x0a, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x20, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x78, // ;..kernel void x
	0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, // latMtlMain(textu
	0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3e, 0x20, 0x75, 0x5f, 0x53, 0x6f, // re2d<float> u_So
	0x75, 0x72, 0x63, 0x65, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x30, // urce [[texture(0
	0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, // )]], texture2d<f
	0x6c, 0x6f, 0x61, 0x74, 0x2c, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x3a, 0x3a, 0x77, 0x72, // loat, access::wr
	0x69, 0x74, 0x65, 0x3e, 0x20, 0x75, 0x5f, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, // ite> u_Destinati
	0x6f, 0x6e, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x31, 0x29, 0x5d, // on [[texture(1)]
	0x5d, 0x2c, 0x20, 0x75, 0x69, 0x6e, 0x74, 0x33, 0x20, 0x67, 0x6c, 0x5f, 0x47, 0x6c, 0x6f, 0x62, // ], uint3 gl_Glob
	0x61, 0x6c, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x20, 0x5b, // alInvocationID [
	0x5b, 0x74, 0x68, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, // [thread_position
	0x5f, 0x69, 0x6e, 0x5f, 0x67, 0x72, 0x69, 0x64, 0x5d, 0x5d, 0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, // _in_grid]]).{.  
	0x20, 0x20, 0x64, 0x6f, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, //   do.    {.     
	0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x61, 0x6e, 0x79, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, //    if (any(float
	0x32, 0x28, 0x69, 0x6e, 0x74, 0x33, 0x28, 0x67, 0x6c, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, // 2(int3(gl_Global
	0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x29, 0x2e, 0x78, 0x79, // InvocationID).xy
	0x29, 0x20, 0x3e, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x69, 0x6e, 0x74, 0x32, // ) >= float2(int2
	0x28, 0x75, 0x69, 0x6e, 0x74, 0x32, 0x28, 0x75, 0x5f, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, // (uint2(u_Destina
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x77, 0x69, 0x64, 0x74, 0x68, 0x28, 0x29, // tion.get_width()
	0x2c, 0x20, 0x75, 0x5f, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, // , u_Destination.
	0x67, 0x65, 0x74, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x28, 0x29, 0x29, 0x29, 0x29, 0x29, // get_height()))))
	0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, // ).        {.    
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, //         break;. 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //        }.       
	0x20, 0x69, 0x6e, 0x74, 0x32, 0x20, 0x5f, 0x34, 0x33, 0x33, 0x20, 0x3d, 0x20, 0x28, 0x69, 0x6e, //  int2 _433 = (in
	0x74, 0x33, 0x28, 0x67, 0x6c, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x6f, // t3(gl_GlobalInvo
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x29, 0x2e, 0x78, 0x79, 0x20, 0x2a, 0x20, 0x69, // cationID).xy * i
	0x6e, 0x74, 0x32, 0x28, 0x32, 0x29, 0x29, 0x20, 0x2d, 0x20, 0x69, 0x6e, 0x74, 0x32, 0x28, 0x31, // nt2(2)) - int2(1
	0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x6e, 0x74, 0x20, 0x5f, // );.        int _
	0x35, 0x31, 0x37, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, // 517;.        flo
	0x61, 0x74, 0x34, 0x20, 0x5f, 0x35, 0x31, 0x38, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // at4 _518;.      
	0x20, 0x20, 0x5f, 0x35, 0x31, 0x38, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, //   _518 = float4(
	0x30, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x35, // 0.0);.        _5
	0x31, 0x37, 0x20, 0x3d, 0x20, 0x30, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 17 = 0;.        
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x35, 0x32, 0x31, 0x3b, 0x0a, 0x20, 0x20, 0x20, // float4 _521;.   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x28, 0x3b, 0x20, 0x5f, 0x35, 0x31, 0x37, //      for (; _517
	0x20, 0x3c, 0x20, 0x34, 0x3b, 0x20, 0x5f, 0x35, 0x31, 0x38, 0x20, 0x3d, 0x20, 0x5f, 0x35, 0x32, //  < 4; _518 = _52
	0x31, 0x2c, 0x20, 0x5f, 0x35, 0x31, 0x37, 0x2b, 0x2b, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // 1, _517++).     
	0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //    {.           
	0x20, 0x5f, 0x35, 0x32, 0x31, 0x20, 0x3d, 0x20, 0x5f, 0x35, 0x31, 0x38, 0x3b, 0x0a, 0x20, 0x20, //  _521 = _518;.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x28, 0x69, //           for (i
	0x6e, 0x74, 0x20, 0x5f, 0x35, 0x31, 0x39, 0x20, 0x3d, 0x20, 0x30, 0x3b, 0x20, 0x5f, 0x35, 0x31, // nt _519 = 0; _51
	0x39, 0x20, 0x3c, 0x20, 0x34, 0x3b, 0x20, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 9 < 4; ).       
	0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //      {.         
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x35, 0x32, 0x31, 0x20, 0x2b, 0x3d, 0x20, 0x28, //        _521 += (
	0x75, 0x5f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x72, 0x65, 0x61, 0x64, 0x28, 0x75, 0x69, // u_Source.read(ui
	0x6e, 0x74, 0x32, 0x28, 0x28, 0x5f, 0x34, 0x33, 0x33, 0x20, 0x2b, 0x20, 0x69, 0x6e, 0x74, 0x32, // nt2((_433 + int2
	0x28, 0x5f, 0x35, 0x31, 0x39, 0x2c, 0x20, 0x5f, 0x35, 0x31, 0x37, 0x29, 0x29, 0x29, 0x2c, 0x20, // (_519, _517))), 
	0x30, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x32, 0x30, 0x30, 0x5b, 0x5f, 0x35, 0x31, 0x39, 0x5d, 0x5b, // 0) * _200[_519][
	0x5f, 0x35, 0x31, 0x37, 0x5d, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // _517]);.        
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x35, 0x31, 0x39, 0x2b, 0x2b, 0x3b, 0x0a, //         _519++;.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // continue;.      
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //       }.        
	0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x75, 0x5f, 0x44, 0x65, 0x73, 0x74, // }.        u_Dest
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x77, 0x72, 0x69, 0x74, 0x65, 0x28, 0x5f, 0x35, // ination.write(_5
	0x31, 0x38, 0x2c, 0x20, 0x75, 0x69, 0x6e, 0x74, 0x32, 0x28, 0x69, 0x6e, 0x74, 0x33, 0x28, 0x67, // 18, uint2(int3(g
	0x6c, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, // l_GlobalInvocati
	0x6f, 0x6e, 0x49, 0x44, 0x29, 0x2e, 0x78, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, // onID).xy));.    
	0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, //     break;.    }
	0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x28, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x7d, //  while(false);.}
	0x0a, 0x0a, 0x00, 0x00, 0x20, 0x00,                                                             // .... .
};
static const uint8_t cs_mipmap_rgba32f_essl[3949] =
{
	0x43, 0x53, 0x48, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5a, 0x0f, // CSH...........Z.
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x33, 0x31, 0x30, 0x20, 0x65, // ..#version 310 e
	0x73, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, // s.vec3 instMul(v
	0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, // ec3 _vec, mat3 _
	0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, // mtx) { return ( 
	0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, // (_vec) * (_mtx) 
	0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, // ); }.vec3 instMu
	0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, // l(mat3 _mtx, vec
	0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // 3 _vec) { return
	0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, //  ( (_mtx) * (_ve
	0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, // c) ); }.vec4 ins
	0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, // tMul(vec4 _vec, 
	0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // mat4 _mtx) { ret
	0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, // urn ( (_vec) * (
	0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, // _mtx) ); }.vec4 
	0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, // instMul(mat4 _mt
	0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, // x, vec4 _vec) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, // return ( (_mtx) 
	0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, 0x6c, // * (_vec) ); }.fl
	0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, 0x70, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x61, // oat rcp(float _a
	0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x5f, // ) { return 1.0/_
	0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, // a; }.vec2 rcp(ve
	0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // c2 _a) { return 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, // vec2(1.0)/_a; }.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x61, // vec3 rcp(vec3 _a
	0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, // ) { return vec3(
	0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, // 1.0)/_a; }.vec4 
	0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, // rcp(vec4 _a) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, // eturn vec4(1.0)/
	0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x65, 0x63, 0x32, 0x5f, // _a; }.vec2 vec2_
	0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, // splat(float _x) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, // { return vec2(_x
	0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, // , _x); }.vec3 ve
	0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, // c3_splat(float _
	0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, // x) { return vec3
	0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, // (_x, _x, _x); }.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, // vec4 vec4_splat(
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // float _x) { retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, // rn vec4(_x, _x, 
	0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x32, // _x, _x); }.uvec2
	0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, //  uvec2_splat(uin
	0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, // t _x) { return u
	0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, // vec2(_x, _x); }.
	0x75, 0x76, 0x65, 0x63, 0x33, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, // uvec3 uvec3_spla
	0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // t(uint _x) { ret
	0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, // urn uvec3(_x, _x
	0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, // , _x); }.uvec4 u
	0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, // vec4_splat(uint 
	0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, // _x) { return uve
	0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, // c4(_x, _x, _x, _
	0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, // x); }.mat4 mtxFr
	0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, // omRows(vec4 _0, 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, // vec4 _1, vec4 _2
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // , vec4 _3).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, // urn transpose(ma
	0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, // t4(_0, _1, _2, _
	0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, // 3) );.}.mat4 mtx
	0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, // FromCols(vec4 _0
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // , vec4 _1, vec4 
	0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, // _2, vec4 _3).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, // eturn mat4(_0, _
	0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, // 1, _2, _3);.}.ma
	0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, // t3 mtxFromRows(v
	0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, // ec3 _0, vec3 _1,
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, //  vec3 _2).{.retu
	0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, // rn transpose(mat
	0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x20, 0x29, 0x3b, // 3(_0, _1, _2) );
	0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, // .}.mat3 mtxFromC
	0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, // ols(vec3 _0, vec
	0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, // 3 _1, vec3 _2).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, // .return mat3(_0,
	0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, //  _1, _2);.}.unif
	0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x52, // orm vec4 u_viewR
	0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, // ect;.uniform vec
	0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x54, 0x65, 0x78, 0x65, 0x6c, 0x3b, 0x0a, 0x75, // 4 u_viewTexel;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, // niform mat4 u_vi
	0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, // ew;.uniform mat4
	0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, //  u_invView;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x3b, // orm mat4 u_proj;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, // .uniform mat4 u_
	0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // invProj;.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, //  mat4 u_viewProj
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, // ;.uniform mat4 u
	0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, // _invViewProj;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, // iform mat4 u_mod
	0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // el[32];.uniform 
	0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, // mat4 u_modelView
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, // ;.uniform mat4 u
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, // _modelViewProj;.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x61, // uniform vec4 u_a
	0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x66, 0x34, 0x3b, 0x0a, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, // lphaRef4;.layout
	0x28, 0x72, 0x67, 0x62, 0x61, 0x33, 0x32, 0x66, 0x2c, 0x20, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, // (rgba32f, bindin
	0x67, 0x3d, 0x30, 0x29, 0x20, 0x72, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x75, 0x6e, // g=0) readonly un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x69, 0x6d, 0x61, 0x67, // iform highp imag
	0x65, 0x32, 0x44, 0x20, 0x75, 0x5f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x3b, 0x0a, 0x6c, 0x61, // e2D u_Source;.la
	0x79, 0x6f, 0x75, 0x74, 0x28, 0x72, 0x67, 0x62, 0x61, 0x33, 0x32, 0x66, 0x2c, 0x20, 0x62, 0x69, // yout(rgba32f, bi
	0x6e, 0x64, 0x69, 0x6e, 0x67, 0x3d, 0x31, 0x29, 0x20, 0x77, 0x72, 0x69, 0x74, 0x65, 0x6f, 0x6e, // nding=1) writeon
	0x6c, 0x79, 0x20, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, // ly uniform highp
	0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x32, 0x44, 0x20, 0x75, 0x5f, 0x44, 0x65, 0x73, 0x74, 0x69, //  image2D u_Desti
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // nation;.const fl
	0x6f, 0x61, 0x74, 0x20, 0x67, 0x5f, 0x6b, 0x61, 0x69, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x72, 0x6e, // oat g_kaiserKern
	0x65, 0x6c, 0x34, 0x5b, 0x34, 0x5d, 0x5b, 0x34, 0x5d, 0x20, 0x3d, 0x20, 0x7b, 0x0a, 0x7b, 0x20, // el4[4][4] = {.{ 
	0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x39, 0x39, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x34, 0x38, // 0.000099, 0.0048
	0x38, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x34, 0x38, 0x38, 0x30, 0x2c, 0x20, 0x30, 0x2e, // 80, 0.004880, 0.
	0x30, 0x30, 0x30, 0x30, 0x39, 0x39, 0x20, 0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, // 000099 },.{ 0.00
	0x34, 0x38, 0x38, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x32, 0x34, 0x30, 0x31, 0x34, 0x31, 0x2c, 0x20, // 4880, 0.240141, 
	0x30, 0x2e, 0x32, 0x34, 0x30, 0x31, 0x34, 0x31, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x34, 0x38, // 0.240141, 0.0048
	0x38, 0x30, 0x20, 0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x34, 0x38, 0x38, 0x30, // 80 },.{ 0.004880
	0x2c, 0x20, 0x30, 0x2e, 0x32, 0x34, 0x30, 0x31, 0x34, 0x31, 0x2c, 0x20, 0x30, 0x2e, 0x32, 0x34, // , 0.240141, 0.24
	0x30, 0x31, 0x34, 0x31, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x34, 0x38, 0x38, 0x30, 0x20, 0x7d, // 0141, 0.004880 }
	0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x39, 0x39, 0x2c, 0x20, 0x30, 0x2e, // ,.{ 0.000099, 0.
	0x30, 0x30, 0x34, 0x38, 0x38, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x34, 0x38, 0x38, 0x30, // 004880, 0.004880
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x39, 0x39, 0x20, 0x7d, 0x0a, 0x7d, 0x3b, 0x0a, // , 0.000099 }.};.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x67, 0x5f, 0x6b, 0x61, // const float g_ka
	0x69, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x36, 0x5b, 0x36, 0x5d, 0x5b, 0x36, // iserKernel6[6][6
	0x5d, 0x20, 0x3d, 0x20, 0x7b, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x33, 0x36, // ] = {.{ 0.000036
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x38, 0x30, 0x38, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, // , 0.000808, 0.00
	0x32, 0x31, 0x33, 0x33, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x32, 0x31, 0x33, 0x33, 0x2c, 0x20, // 2133, 0.002133, 
	0x30, 0x2e, 0x30, 0x30, 0x30, 0x38, 0x30, 0x38, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, // 0.000808, 0.0000
	0x33, 0x36, 0x20, 0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x38, 0x30, 0x38, // 36 },.{ 0.000808
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, 0x34, 0x31, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, // , 0.018410, 0.04
	0x38, 0x36, 0x32, 0x34, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x38, 0x36, 0x32, 0x34, 0x2c, 0x20, // 8624, 0.048624, 
	0x30, 0x2e, 0x30, 0x31, 0x38, 0x34, 0x31, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x38, // 0.018410, 0.0008
	0x30, 0x38, 0x20, 0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x32, 0x31, 0x33, 0x33, // 08 },.{ 0.002133
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x38, 0x36, 0x32, 0x34, 0x2c, 0x20, 0x30, 0x2e, 0x31, 0x32, // , 0.048624, 0.12
	0x38, 0x34, 0x32, 0x34, 0x2c, 0x20, 0x30, 0x2e, 0x31, 0x32, 0x38, 0x34, 0x32, 0x34, 0x2c, 0x20, // 8424, 0.128424, 
	0x30, 0x2e, 0x30, 0x34, 0x38, 0x36, 0x32, 0x34, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x32, 0x31, // 0.048624, 0.0021
	0x33, 0x33, 0x20, 0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x32, 0x31, 0x33, 0x33, // 33 },.{ 0.002133
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x38, 0x36, 0x32, 0x34, 0x2c, 0x20, 0x30, 0x2e, 0x31, 0x32, // , 0.048624, 0.12
	0x38, 0x34, 0x32, 0x34, 0x2c, 0x20, 0x30, 0x2e, 0x31, 0x32, 0x38, 0x34, 0x32, 0x34, 0x2c, 0x20, // 8424, 0.128424, 
	0x30, 0x2e, 0x30, 0x34, 0x38, 0x36, 0x32, 0x34, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x32, 0x31, // 0.048624, 0.0021
	0x33, 0x33, 0x20, 0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x38, 0x30, 0x38, // 33 },.{ 0.000808
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, 0x34, 0x31, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, // , 0.018410, 0.04
	0x38, 0x36, 0x32, 0x34, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x38, 0x36, 0x32, 0x34, 0x2c, 0x20, // 8624, 0.048624, 
	0x30, 0x2e, 0x30, 0x31, 0x38, 0x34, 0x31, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x38, // 0.018410, 0.0008
	0x30, 0x38, 0x20, 0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x33, 0x36, // 08 },.{ 0.000036
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x38, 0x30, 0x38, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, // , 0.000808, 0.00
	0x32, 0x31, 0x33, 0x33, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x32, 0x31, 0x33, 0x33, 0x2c, 0x20, // 2133, 0.002133, 
	0x30, 0x2e, 0x30, 0x30, 0x30, 0x38, 0x30, 0x38, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, // 0.000808, 0.0000
	0x33, 0x36, 0x20, 0x7d, 0x0a, 0x7d, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // 36 }.};.const fl
	0x6f, 0x61, 0x74, 0x20, 0x67, 0x5f, 0x6b, 0x61, 0x69, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x72, 0x6e, // oat g_kaiserKern
	0x65, 0x6c, 0x36, 0x73, 0x5b, 0x36, 0x5d, 0x5b, 0x36, 0x5d, 0x20, 0x3d, 0x20, 0x7b, 0x0a, 0x7b, // el6s[6][6] = {.{
	0x20, 0x30, 0x2e, 0x30, 0x30, 0x35, 0x37, 0x39, 0x33, 0x38, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, //  0.00579380, 0.0
	0x31, 0x33, 0x30, 0x32, 0x34, 0x39, 0x31, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x39, 0x32, 0x33, // 1302491, 0.01923
	0x39, 0x37, 0x39, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x39, 0x32, 0x33, 0x39, 0x37, 0x39, 0x2c, // 979, 0.01923979,
	0x20, 0x30, 0x2e, 0x30, 0x31, 0x33, 0x30, 0x32, 0x34, 0x39, 0x31, 0x2c, 0x20, 0x30, 0x2e, 0x30, //  0.01302491, 0.0
	0x30, 0x35, 0x37, 0x39, 0x33, 0x38, 0x30, 0x20, 0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, // 0579380 },.{ 0.0
	0x31, 0x33, 0x30, 0x32, 0x34, 0x39, 0x31, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x32, 0x39, 0x32, 0x38, // 1302491, 0.02928
	0x31, 0x30, 0x33, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x33, 0x32, 0x35, 0x32, 0x35, 0x36, 0x2c, // 103, 0.04325256,
	0x20, 0x30, 0x2e, 0x30, 0x34, 0x33, 0x32, 0x35, 0x32, 0x35, 0x36, 0x2c, 0x20, 0x30, 0x2e, 0x30, //  0.04325256, 0.0
	0x32, 0x39, 0x32, 0x38, 0x31, 0x30, 0x33, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x33, 0x30, 0x32, // 2928103, 0.01302
	0x34, 0x39, 0x31, 0x20, 0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x39, 0x32, 0x33, // 491 },.{ 0.01923
	0x39, 0x37, 0x39, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x33, 0x32, 0x35, 0x32, 0x35, 0x36, 0x2c, // 979, 0.04325256,
	0x20, 0x30, 0x2e, 0x30, 0x36, 0x33, 0x38, 0x39, 0x30, 0x36, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, //  0.06389065, 0.0
	0x36, 0x33, 0x38, 0x39, 0x30, 0x36, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x33, 0x32, 0x35, // 6389065, 0.04325
	0x32, 0x35, 0x36, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x39, 0x32, 0x33, 0x39, 0x37, 0x39, 0x20, // 256, 0.01923979 
	0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x39, 0x32, 0x33, 0x39, 0x37, 0x39, 0x2c, // },.{ 0.01923979,
	0x20, 0x30, 0x2e, 0x30, 0x34, 0x33, 0x32, 0x35, 0x32, 0x35, 0x36, 0x2c, 0x20, 0x30, 0x2e, 0x30, //  0.04325256, 0.0
	0x36, 0x33, 0x38, 0x39, 0x30, 0x36, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x36, 0x33, 0x38, 0x39, // 6389065, 0.06389
	0x30, 0x36, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x33, 0x32, 0x35, 0x32, 0x35, 0x36, 0x2c, // 065, 0.04325256,
	0x20, 0x30, 0x2e, 0x30, 0x31, 0x39, 0x32, 0x33, 0x39, 0x37, 0x39, 0x20, 0x7d, 0x2c, 0x0a, 0x7b, //  0.01923979 },.{
	0x20, 0x30, 0x2e, 0x30, 0x31, 0x33, 0x30, 0x32, 0x34, 0x39, 0x31, 0x2c, 0x20, 0x30, 0x2e, 0x30, //  0.01302491, 0.0
	0x32, 0x39, 0x32, 0x38, 0x31, 0x30, 0x33, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x33, 0x32, 0x35, // 2928103, 0.04325
	0x32, 0x35, 0x36, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x33, 0x32, 0x35, 0x32, 0x35, 0x36, 0x2c, // 256, 0.04325256,
	0x20, 0x30, 0x2e, 0x30, 0x32, 0x39, 0x32, 0x38, 0x31, 0x30, 0x33, 0x2c, 0x20, 0x30, 0x2e, 0x30, //  0.02928103, 0.0
	0x31, 0x33, 0x30, 0x32, 0x34, 0x39, 0x31, 0x20, 0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, // 1302491 },.{ 0.0
	0x30, 0x35, 0x37, 0x39, 0x33, 0x38, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x33, 0x30, 0x32, // 0579380, 0.01302
	0x34, 0x39, 0x31, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x39, 0x32, 0x33, 0x39, 0x37, 0x39, 0x2c, // 491, 0.01923979,
	0x20, 0x30, 0x2e, 0x30, 0x31, 0x39, 0x32, 0x33, 0x39, 0x37, 0x39, 0x2c, 0x20, 0x30, 0x2e, 0x30, //  0.01923979, 0.0
	0x31, 0x33, 0x30, 0x32, 0x34, 0x39, 0x31, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x35, 0x37, 0x39, // 1302491, 0.00579
	0x33, 0x38, 0x30, 0x20, 0x7d, 0x0a, 0x7d, 0x3b, 0x0a, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x20, // 380 }.};.layout 
	0x28, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x78, 0x20, 0x3d, 0x20, // (local_size_x = 
	0x38, 0x2c, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x79, 0x20, // 8, local_size_y 
	0x3d, 0x20, 0x38, 0x2c, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, // = 8, local_size_
	0x7a, 0x20, 0x3d, 0x20, 0x31, 0x29, 0x20, 0x69, 0x6e, 0x3b, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, // z = 1) in;.void 
	0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x20, 0x7b, 0x0a, 0x69, 0x76, 0x65, 0x63, 0x32, 0x20, 0x64, // main() {.ivec2 d
	0x73, 0x74, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x3d, 0x20, 0x69, 0x76, 0x65, 0x63, 0x32, 0x28, // stCoord = ivec2(
	0x67, 0x6c, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, // gl_GlobalInvocat
	0x69, 0x6f, 0x6e, 0x49, 0x44, 0x2e, 0x78, 0x79, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, // ionID.xy);.const
	0x20, 0x69, 0x76, 0x65, 0x63, 0x32, 0x20, 0x64, 0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x20, 0x3d, //  ivec2 dstSize =
	0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x28, 0x75, 0x5f, 0x44, 0x65, 0x73, //  imageSize(u_Des
	0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x61, // tination);.if (a
	0x6e, 0x79, 0x28, 0x67, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x68, 0x61, 0x6e, 0x45, 0x71, // ny(greaterThanEq
	0x75, 0x61, 0x6c, 0x28, 0x64, 0x73, 0x74, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x2c, 0x20, 0x64, 0x73, // ual(dstCoord, ds
	0x74, 0x53, 0x69, 0x7a, 0x65, 0x29, 0x29, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x3b, // tSize))).return;
	0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x76, 0x65, // .vec4 color = ve
	0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x69, // c4_splat(0.0);.i
	0x66, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x3d, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x20, 0x7b, // f (1.0 == 0.0) {
	0x0a, 0x69, 0x76, 0x65, 0x63, 0x32, 0x20, 0x73, 0x72, 0x63, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, // .ivec2 srcCoord 
	0x3d, 0x20, 0x64, 0x73, 0x74, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x2a, 0x20, 0x32, 0x3b, 0x0a, // = dstCoord * 2;.
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x3d, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x6f, // color += imageLo
	0x61, 0x64, 0x28, 0x75, 0x5f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2c, 0x20, 0x73, 0x72, 0x63, // ad(u_Source, src
	0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, // Coord );.color +
	0x3d, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x28, 0x75, 0x5f, 0x53, 0x6f, // = imageLoad(u_So
	0x75, 0x72, 0x63, 0x65, 0x2c, 0x20, 0x73, 0x72, 0x63, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x2b, // urce, srcCoord +
	0x20, 0x69, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2c, 0x20, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x63, //  ivec2(0, 1));.c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x3d, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x61, // olor += imageLoa
	0x64, 0x28, 0x75, 0x5f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2c, 0x20, 0x73, 0x72, 0x63, 0x43, // d(u_Source, srcC
	0x6f, 0x6f, 0x72, 0x64, 0x20, 0x2b, 0x20, 0x69, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2c, 0x20, // oord + ivec2(1, 
	0x30, 0x29, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x3d, 0x20, 0x69, 0x6d, // 0));.color += im
	0x61, 0x67, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x28, 0x75, 0x5f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, // ageLoad(u_Source
	0x2c, 0x20, 0x73, 0x72, 0x63, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x2b, 0x20, 0x69, 0x76, 0x65, // , srcCoord + ive
	0x63, 0x32, 0x28, 0x31, 0x2c, 0x20, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // c2(1, 1));.color
	0x20, 0x2f, 0x3d, 0x20, 0x34, 0x2e, 0x30, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x20, //  /= 4.0;.}.else 
	0x69, 0x66, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x3d, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, // if (1.0 == 1.0) 
	0x7b, 0x0a, 0x69, 0x76, 0x65, 0x63, 0x32, 0x20, 0x73, 0x72, 0x63, 0x43, 0x6f, 0x6f, 0x72, 0x64, // {.ivec2 srcCoord
	0x20, 0x3d, 0x20, 0x64, 0x73, 0x74, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x2a, 0x20, 0x32, 0x20, //  = dstCoord * 2 
	0x2d, 0x20, 0x69, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2c, 0x20, 0x31, 0x29, 0x3b, 0x0a, 0x66, // - ivec2(1, 1);.f
	0x6f, 0x72, 0x20, 0x28, 0x69, 0x6e, 0x74, 0x20, 0x64, 0x79, 0x20, 0x3d, 0x20, 0x30, 0x3b, 0x20, // or (int dy = 0; 
	0x64, 0x79, 0x20, 0x3c, 0x20, 0x34, 0x3b, 0x20, 0x2b, 0x2b, 0x64, 0x79, 0x29, 0x0a, 0x66, 0x6f, // dy < 4; ++dy).fo
	0x72, 0x20, 0x28, 0x69, 0x6e, 0x74, 0x20, 0x64, 0x78, 0x20, 0x3d, 0x20, 0x30, 0x3b, 0x20, 0x64, // r (int dx = 0; d
	0x78, 0x20, 0x3c, 0x20, 0x34, 0x3b, 0x20, 0x2b, 0x2b, 0x64, 0x78, 0x29, 0x0a, 0x63, 0x6f, 0x6c, // x < 4; ++dx).col
	0x6f, 0x72, 0x20, 0x2b, 0x3d, 0x20, 0x67, 0x5f, 0x6b, 0x61, 0x69, 0x73, 0x65, 0x72, 0x4b, 0x65, // or += g_kaiserKe
	0x72, 0x6e, 0x65, 0x6c, 0x34, 0x5b, 0x64, 0x78, 0x5d, 0x5b, 0x64, 0x79, 0x5d, 0x20, 0x2a, 0x20, // rnel4[dx][dy] * 
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x28, 0x75, 0x5f, 0x53, 0x6f, 0x75, 0x72, // imageLoad(u_Sour
	0x63, 0x65, 0x2c, 0x20, 0x73, 0x72, 0x63, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x2b, 0x20, 0x69, // ce, srcCoord + i
	0x76, 0x65, 0x63, 0x32, 0x28, 0x64, 0x78, 0x2c, 0x20, 0x64, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, // vec2(dx, dy));.}
	0x0a, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x69, 0x66, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x3d, 0x3d, // .else if (1.0 ==
	0x20, 0x32, 0x2e, 0x30, 0x29, 0x20, 0x7b, 0x0a, 0x69, 0x76, 0x65, 0x63, 0x32, 0x20, 0x73, 0x72, //  2.0) {.ivec2 sr
	0x63, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x3d, 0x20, 0x64, 0x73, 0x74, 0x43, 0x6f, 0x6f, 0x72, // cCoord = dstCoor
	0x64, 0x20, 0x2a, 0x20, 0x32, 0x20, 0x2d, 0x20, 0x69, 0x76, 0x65, 0x63, 0x32, 0x28, 0x32, 0x2c, // d * 2 - ivec2(2,
	0x20, 0x32, 0x29, 0x3b, 0x0a, 0x66, 0x6f, 0x72, 0x20, 0x28, 0x69, 0x6e, 0x74, 0x20, 0x64, 0x79, //  2);.for (int dy
	0x20, 0x3d, 0x20, 0x30, 0x3b, 0x20, 0x64, 0x79, 0x20, 0x3c, 0x20, 0x36, 0x3b, 0x20, 0x2b, 0x2b, //  = 0; dy < 6; ++
	0x64, 0x79, 0x29, 0x0a, 0x66, 0x6f, 0x72, 0x20, 0x28, 0x69, 0x6e, 0x74, 0x20, 0x64, 0x78, 0x20, // dy).for (int dx 
	0x3d, 0x20, 0x30, 0x3b, 0x20, 0x64, 0x78, 0x20, 0x3c, 0x20, 0x36, 0x3b, 0x20, 0x2b, 0x2b, 0x64, // = 0; dx < 6; ++d
	0x78, 0x29, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x3d, 0x20, 0x67, 0x5f, 0x6b, 0x61, // x).color += g_ka
	0x69, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x36, 0x5b, 0x64, 0x78, 0x5d, 0x5b, // iserKernel6[dx][
	0x64, 0x79, 0x5d, 0x20, 0x2a, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x28, // dy] * imageLoad(
	0x75, 0x5f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2c, 0x20, 0x73, 0x72, 0x63, 0x43, 0x6f, 0x6f, // u_Source, srcCoo
	0x72, 0x64, 0x20, 0x2b, 0x20, 0x69, 0x76, 0x65, 0x63, 0x32, 0x28, 0x64, 0x78, 0x2c, 0x20, 0x64, // rd + ivec2(dx, d
	0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x69, 0x66, 0x20, 0x28, // y));.}.else if (
	0x31, 0x2e, 0x30, 0x20, 0x3d, 0x3d, 0x20, 0x33, 0x2e, 0x30, 0x29, 0x20, 0x7b, 0x0a, 0x69, 0x76, // 1.0 == 3.0) {.iv
	0x65, 0x63, 0x32, 0x20, 0x73, 0x72, 0x63, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x3d, 0x20, 0x64, // ec2 srcCoord = d
	0x73, 0x74, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x2a, 0x20, 0x32, 0x20, 0x2d, 0x20, 0x69, 0x76, // stCoord * 2 - iv
	0x65, 0x63, 0x32, 0x28, 0x32, 0x2c, 0x20, 0x32, 0x29, 0x3b, 0x0a, 0x66, 0x6f, 0x72, 0x20, 0x28, // ec2(2, 2);.for (
	0x69, 0x6e, 0x74, 0x20, 0x64, 0x79, 0x20, 0x3d, 0x20, 0x30, 0x3b, 0x20, 0x64, 0x79, 0x20, 0x3c, // int dy = 0; dy <
	0x20, 0x36, 0x3b, 0x20, 0x2b, 0x2b, 0x64, 0x79, 0x29, 0x0a, 0x66, 0x6f, 0x72, 0x20, 0x28, 0x69, //  6; ++dy).for (i
	0x6e, 0x74, 0x20, 0x64, 0x78, 0x20, 0x3d, 0x20, 0x30, 0x3b, 0x20, 0x64, 0x78, 0x20, 0x3c, 0x20, // nt dx = 0; dx < 
	0x36, 0x3b, 0x20, 0x2b, 0x2b, 0x64, 0x78, 0x29, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, // 6; ++dx).color +
	0x3d, 0x20, 0x67, 0x5f, 0x6b, 0x61, 0x69, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, // = g_kaiserKernel
	0x36, 0x73, 0x5b, 0x64, 0x78, 0x5d, 0x5b, 0x64, 0x79, 0x5d, 0x20, 0x2a, 0x20, 0x69, 0x6d, 0x61, // 6s[dx][dy] * ima
	0x67, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x28, 0x75, 0x5f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2c, // geLoad(u_Source,
	0x20, 0x73, 0x72, 0x63, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x2b, 0x20, 0x69, 0x76, 0x65, 0x63, //  srcCoord + ivec
	0x32, 0x28, 0x64, 0x78, 0x2c, 0x20, 0x64, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x69, 0x6d, // 2(dx, dy));.}.im
	0x61, 0x67, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x28, 0x75, 0x5f, 0x44, 0x65, 0x73, 0x74, 0x69, // ageStore(u_Desti
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x64, 0x73, 0x74, 0x43, 0x6f, 0x6f, 0x72, 0x64, // nation, dstCoord
	0x2c, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x00,                   // , color);.}..
};
static const uint8_t cs_mipmap_rgba32f_glsl[3934] =
{
	0x43, 0x53, 0x48, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4b, 0x0f, // CSH...........K.
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x34, 0x34, 0x30, 0x0a, 0x76, // ..#version 440.v
	0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x33, // ec3 instMul(vec3
	0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, //  _vec, mat3 _mtx
	0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, // ) { return ( (_v
	0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, // ec) * (_mtx) ); 
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, // }.vec3 instMul(m
	0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, // at3 _mtx, vec3 _
	0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, // vec) { return ( 
	0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, // (_mtx) * (_vec) 
	0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, // ); }.vec4 instMu
	0x6c, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, // l(vec4 _vec, mat
	0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // 4 _mtx) { return
	0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, //  ( (_vec) * (_mt
	0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, // x) ); }.vec4 ins
	0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, // tMul(mat4 _mtx, 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // vec4 _vec) { ret
	0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, // urn ( (_mtx) * (
	0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // _vec) ); }.float
	0x20, 0x72, 0x63, 0x70, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, //  rcp(float _a) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x5f, 0x61, 0x3b, 0x20, //  return 1.0/_a; 
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, // }.vec2 rcp(vec2 
	0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, // _a) { return vec
	0x32, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, // 2(1.0)/_a; }.vec
	0x33, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, // 3 rcp(vec3 _a) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x31, 0x2e, 0x30, //  return vec3(1.0
	0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x72, 0x63, 0x70, // )/_a; }.vec4 rcp
	0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // (vec4 _a) { retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, // rn vec4(1.0)/_a;
	0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, //  }.vec2 vec2_spl
	0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, // at(float _x) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, // eturn vec2(_x, _
	0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, // x); }.vec3 vec3_
	0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, // splat(float _x) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, // { return vec3(_x
	0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, // , _x, _x); }.vec
	0x34, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, // 4 vec4_splat(flo
	0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // at _x) { return 
	0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, // vec4(_x, _x, _x,
	0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x76, //  _x); }.uvec2 uv
	0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, // ec2_splat(uint _
	0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, // x) { return uvec
	0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, // 2(_x, _x); }.uve
	0x63, 0x33, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, // c3 uvec3_splat(u
	0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // int _x) { return
	0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, //  uvec3(_x, _x, _
	0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x76, 0x65, 0x63, // x); }.uvec4 uvec
	0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, // 4_splat(uint _x)
	0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x28, //  { return uvec4(
	0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, // _x, _x, _x, _x);
	0x20, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, //  }.mat4 mtxFromR
	0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, // ows(vec4 _0, vec
	0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, // 4 _1, vec4 _2, v
	0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // ec4 _3).{.return
	0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x28, //  transpose(mat4(
	0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x20, // _0, _1, _2, _3) 
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, // );.}.mat4 mtxFro
	0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, // mCols(vec4 _0, v
	0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, // ec4 _1, vec4 _2,
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, //  vec4 _3).{.retu
	0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, // rn mat4(_0, _1, 
	0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, // _2, _3);.}.mat3 
	0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, // mtxFromRows(vec3
	0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, //  _0, vec3 _1, ve
	0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // c3 _2).{.return 
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, // transpose(mat3(_
	0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // 0, _1, _2) );.}.
	0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, // mat3 mtxFromCols
	0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, // (vec3 _0, vec3 _
	0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // 1, vec3 _2).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, // turn mat3(_0, _1
	0x2c, 0x20, 0x5f, 0x32, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // , _2);.}.uniform
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x63, 0x74, //  vec4 u_viewRect
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, // ;.uniform vec4 u
	0x5f, 0x76, 0x69, 0x65, 0x77, 0x54, 0x65, 0x78, 0x65, 0x6c, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // _viewTexel;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x3b, // orm mat4 u_view;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, // .uniform mat4 u_
	0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // invView;.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, //  mat4 u_proj;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, // iform mat4 u_inv
	0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, // Proj;.uniform ma
	0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, // t4 u_viewProj;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, // niform mat4 u_in
	0x76, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, // vViewProj;.unifo
	0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5b, // rm mat4 u_model[
	0x33, 0x32, 0x5d, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, // 32];.uniform mat
	0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, // 4 u_modelView;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, // niform mat4 u_mo
	0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, // delViewProj;.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x61, 0x6c, 0x70, 0x68, // form vec4 u_alph
	0x61, 0x52, 0x65, 0x66, 0x34, 0x3b, 0x0a, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x28, 0x72, 0x67, // aRef4;.layout(rg
	0x62, 0x61, 0x33, 0x32, 0x66, 0x2c, 0x20, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x3d, 0x30, // ba32f, binding=0
	0x29, 0x20, 0x72, 0x65, 0x61, 0x64, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x75, 0x6e, 0x69, 0x66, 0x6f, // ) readonly unifo
	0x72, 0x6d, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x32, 0x44, 0x20, 0x75, 0x5f, 0x53, 0x6f, 0x75, // rm image2D u_Sou
	0x72, 0x63, 0x65, 0x3b, 0x0a, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x28, 0x72, 0x67, 0x62, 0x61, // rce;.layout(rgba
	0x33, 0x32, 0x66, 0x2c, 0x20, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x3d, 0x31, 0x29, 0x20, // 32f, binding=1) 
	0x77, 0x72, 0x69, 0x74, 0x65, 0x6f, 0x6e, 0x6c, 0x79, 0x20, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // writeonly unifor
	0x6d, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x32, 0x44, 0x20, 0x75, 0x5f, 0x44, 0x65, 0x73, 0x74, // m image2D u_Dest
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // ination;.const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x67, 0x5f, 0x6b, 0x61, 0x69, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x72, // loat g_kaiserKer
	0x6e, 0x65, 0x6c, 0x34, 0x5b, 0x34, 0x5d, 0x5b, 0x34, 0x5d, 0x20, 0x3d, 0x20, 0x7b, 0x0a, 0x7b, // nel4[4][4] = {.{
	0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x39, 0x39, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x34, //  0.000099, 0.004
	0x38, 0x38, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x34, 0x38, 0x38, 0x30, 0x2c, 0x20, 0x30, // 880, 0.004880, 0
	0x2e, 0x30, 0x30, 0x30, 0x30, 0x39, 0x39, 0x20, 0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, // .000099 },.{ 0.0
	0x30, 0x34, 0x38, 0x38, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x32, 0x34, 0x30, 0x31, 0x34, 0x31, 0x2c, // 04880, 0.240141,
	0x20, 0x30, 0x2e, 0x32, 0x34, 0x30, 0x31, 0x34, 0x31, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x34, //  0.240141, 0.004
	0x38, 0x38, 0x30, 0x20, 0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x34, 0x38, 0x38, // 880 },.{ 0.00488
	0x30, 0x2c, 0x20, 0x30, 0x2e, 0x32, 0x34, 0x30, 0x31, 0x34, 0x31, 0x2c, 0x20, 0x30, 0x2e, 0x32, // 0, 0.240141, 0.2
	0x34, 0x30, 0x31, 0x34, 0x31, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x34, 0x38, 0x38, 0x30, 0x20, // 40141, 0.004880 
	0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x39, 0x39, 0x2c, 0x20, 0x30, // },.{ 0.000099, 0
	0x2e, 0x30, 0x30, 0x34, 0x38, 0x38, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x34, 0x38, 0x38, // .004880, 0.00488
	0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x39, 0x39, 0x20, 0x7d, 0x0a, 0x7d, 0x3b, // 0, 0.000099 }.};
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x67, 0x5f, 0x6b, // .const float g_k
	0x61, 0x69, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x36, 0x5b, 0x36, 0x5d, 0x5b, // aiserKernel6[6][
	0x36, 0x5d, 0x20, 0x3d, 0x20, 0x7b, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x33, // 6] = {.{ 0.00003
	0x36, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x38, 0x30, 0x38, 0x2c, 0x20, 0x30, 0x2e, 0x30, // 6, 0.000808, 0.0
	0x30, 0x32, 0x31, 0x33, 0x33, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x32, 0x31, 0x33, 0x33, 0x2c, // 02133, 0.002133,
	0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x38, 0x30, 0x38, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, //  0.000808, 0.000
	0x30, 0x33, 0x36, 0x20, 0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x38, 0x30, // 036 },.{ 0.00080
	0x38, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, 0x34, 0x31, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, // 8, 0.018410, 0.0
	0x34, 0x38, 0x36, 0x32, 0x34, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x38, 0x36, 0x32, 0x34, 0x2c, // 48624, 0.048624,
	0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, 0x34, 0x31, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, //  0.018410, 0.000
	0x38, 0x30, 0x38, 0x20, 0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x32, 0x31, 0x33, // 808 },.{ 0.00213
	0x33, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x38, 0x36, 0x32, 0x34, 0x2c, 0x20, 0x30, 0x2e, 0x31, // 3, 0.048624, 0.1
	0x32, 0x38, 0x34, 0x32, 0x34, 0x2c, 0x20, 0x30, 0x2e, 0x31, 0x32, 0x38, 0x34, 0x32, 0x34, 0x2c, // 28424, 0.128424,
	0x20, 0x30, 0x2e, 0x30, 0x34, 0x38, 0x36, 0x32, 0x34, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x32, //  0.048624, 0.002
	0x31, 0x33, 0x33, 0x20, 0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x32, 0x31, 0x33, // 133 },.{ 0.00213
	0x33, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x38, 0x36, 0x32, 0x34, 0x2c, 0x20, 0x30, 0x2e, 0x31, // 3, 0.048624, 0.1
	0x32, 0x38, 0x34, 0x32, 0x34, 0x2c, 0x20, 0x30, 0x2e, 0x31, 0x32, 0x38, 0x34, 0x32, 0x34, 0x2c, // 28424, 0.128424,
	0x20, 0x30, 0x2e, 0x30, 0x34, 0x38, 0x36, 0x32, 0x34, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x32, //  0.048624, 0.002
	0x31, 0x33, 0x33, 0x20, 0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x38, 0x30, // 133 },.{ 0.00080
	0x38, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, 0x34, 0x31, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, // 8, 0.018410, 0.0
	0x34, 0x38, 0x36, 0x32, 0x34, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x38, 0x36, 0x32, 0x34, 0x2c, // 48624, 0.048624,
	0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, 0x34, 0x31, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, //  0.018410, 0.000
	0x38, 0x30, 0x38, 0x20, 0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x33, // 808 },.{ 0.00003
	0x36, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x38, 0x30, 0x38, 0x2c, 0x20, 0x30, 0x2e, 0x30, // 6, 0.000808, 0.0
	0x30, 0x32, 0x31, 0x33, 0x33, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x32, 0x31, 0x33, 0x33, 0x2c, // 02133, 0.002133,
	0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x38, 0x30, 0x38, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, //  0.000808, 0.000
	0x30, 0x33, 0x36, 0x20, 0x7d, 0x0a, 0x7d, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // 036 }.};.const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x67, 0x5f, 0x6b, 0x61, 0x69, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x72, // loat g_kaiserKer
	0x6e, 0x65, 0x6c, 0x36, 0x73, 0x5b, 0x36, 0x5d, 0x5b, 0x36, 0x5d, 0x20, 0x3d, 0x20, 0x7b, 0x0a, // nel6s[6][6] = {.
	0x7b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x35, 0x37, 0x39, 0x33, 0x38, 0x30, 0x2c, 0x20, 0x30, 0x2e, // { 0.00579380, 0.
	0x30, 0x31, 0x33, 0x30, 0x32, 0x34, 0x39, 0x31, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x39, 0x32, // 01302491, 0.0192
	0x33, 0x39, 0x37, 0x39, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x39, 0x32, 0x33, 0x39, 0x37, 0x39, // 3979, 0.01923979
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x33, 0x30, 0x32, 0x34, 0x39, 0x31, 0x2c, 0x20, 0x30, 0x2e, // , 0.01302491, 0.
	0x30, 0x30, 0x35, 0x37, 0x39, 0x33, 0x38, 0x30, 0x20, 0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, // 00579380 },.{ 0.
	0x30, 0x31, 0x33, 0x30, 0x32, 0x34, 0x39, 0x31, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x32, 0x39, 0x32, // 01302491, 0.0292
	0x38, 0x31, 0x30, 0x33, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x33, 0x32, 0x35, 0x32, 0x35, 0x36, // 8103, 0.04325256
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x33, 0x32, 0x35, 0x32, 0x35, 0x36, 0x2c, 0x20, 0x30, 0x2e, // , 0.04325256, 0.
	0x30, 0x32, 0x39, 0x32, 0x38, 0x31, 0x30, 0x33, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x33, 0x30, // 02928103, 0.0130
	0x32, 0x34, 0x39, 0x31, 0x20, 0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x39, 0x32, // 2491 },.{ 0.0192
	0x33, 0x39, 0x37, 0x39, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x33, 0x32, 0x35, 0x32, 0x35, 0x36, // 3979, 0.04325256
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x36, 0x33, 0x38, 0x39, 0x30, 0x36, 0x35, 0x2c, 0x20, 0x30, 0x2e, // , 0.06389065, 0.
	0x30, 0x36, 0x33, 0x38, 0x39, 0x30, 0x36, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x33, 0x32, // 06389065, 0.0432
	0x35, 0x32, 0x35, 0x36, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x39, 0x32, 0x33, 0x39, 0x37, 0x39, // 5256, 0.01923979
	0x20, 0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x39, 0x32, 0x33, 0x39, 0x37, 0x39, //  },.{ 0.01923979
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x33, 0x32, 0x35, 0x32, 0x35, 0x36, 0x2c, 0x20, 0x30, 0x2e, // , 0.04325256, 0.
	0x30, 0x36, 0x33, 0x38, 0x39, 0x30, 0x36, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x36, 0x33, 0x38, // 06389065, 0.0638
	0x39, 0x30, 0x36, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x33, 0x32, 0x35, 0x32, 0x35, 0x36, // 9065, 0.04325256
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x39, 0x32, 0x33, 0x39, 0x37, 0x39, 0x20, 0x7d, 0x2c, 0x0a, // , 0.01923979 },.
	0x7b, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x33, 0x30, 0x32, 0x34, 0x39, 0x31, 0x2c, 0x20, 0x30, 0x2e, // { 0.01302491, 0.
	0x30, 0x32, 0x39, 0x32, 0x38, 0x31, 0x30, 0x33, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x33, 0x32, // 02928103, 0.0432
	0x35, 0x32, 0x35, 0x36, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x33, 0x32, 0x35, 0x32, 0x35, 0x36, // 5256, 0.04325256
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x32, 0x39, 0x32, 0x38, 0x31, 0x30, 0x33, 0x2c, 0x20, 0x30, 0x2e, // , 0.02928103, 0.
	0x30, 0x31, 0x33, 0x30, 0x32, 0x34, 0x39, 0x31, 0x20, 0x7d, 0x2c, 0x0a, 0x7b, 0x20, 0x30, 0x2e, // 01302491 },.{ 0.
	0x30, 0x30, 0x35, 0x37, 0x39, 0x33, 0x38, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x33, 0x30, // 00579380, 0.0130
	0x32, 0x34, 0x39, 0x31, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x39, 0x32, 0x33, 0x39, 0x37, 0x39, // 2491, 0.01923979
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x39, 0x32, 0x33, 0x39, 0x37, 0x39, 0x2c, 0x20, 0x30, 0x2e, // , 0.01923979, 0.
	0x30, 0x31, 0x33, 0x30, 0x32, 0x34, 0x39, 0x31, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x35, 0x37, // 01302491, 0.0057
	0x39, 0x33, 0x38, 0x30, 0x20, 0x7d, 0x0a, 0x7d, 0x3b, 0x0a, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, // 9380 }.};.layout
	0x20, 0x28, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x78, 0x20, 0x3d, //  (local_size_x =
	0x20, 0x38, 0x2c, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x79, //  8, local_size_y
	0x20, 0x3d, 0x20, 0x38, 0x2c, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x73, 0x69, 0x7a, 0x65, //  = 8, local_size
	0x5f, 0x7a, 0x20, 0x3d, 0x20, 0x31, 0x29, 0x20, 0x69, 0x6e, 0x3b, 0x0a, 0x76, 0x6f, 0x69, 0x64, // _z = 1) in;.void
	0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x20, 0x7b, 0x0a, 0x69, 0x76, 0x65, 0x63, 0x32, 0x20, //  main() {.ivec2 
	0x64, 0x73, 0x74, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x3d, 0x20, 0x69, 0x76, 0x65, 0x63, 0x32, // dstCoord = ivec2
	0x28, 0x67, 0x6c, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, // (gl_GlobalInvoca
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x2e, 0x78, 0x79, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // tionID.xy);.cons
	0x74, 0x20, 0x69, 0x76, 0x65, 0x63, 0x32, 0x20, 0x64, 0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x20, // t ivec2 dstSize 
	0x3d, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x28, 0x75, 0x5f, 0x44, 0x65, // = imageSize(u_De
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, // stination);.if (
	0x61, 0x6e, 0x79, 0x28, 0x67, 0x72, 0x65, 0x61, 0x74, 0x65, 0x72, 0x54, 0x68, 0x61, 0x6e, 0x45, // any(greaterThanE
	0x71, 0x75, 0x61, 0x6c, 0x28, 0x64, 0x73, 0x74, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x2c, 0x20, 0x64, // qual(dstCoord, d
	0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x29, 0x29, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // stSize))).return
	0x3b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x76, // ;.vec4 color = v
	0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x3b, 0x0a, // ec4_splat(0.0);.
	0x69, 0x66, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x3d, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x20, // if (1.0 == 0.0) 
	0x7b, 0x0a, 0x69, 0x76, 0x65, 0x63, 0x32, 0x20, 0x73, 0x72, 0x63, 0x43, 0x6f, 0x6f, 0x72, 0x64, // {.ivec2 srcCoord
	0x20, 0x3d, 0x20, 0x64, 0x73, 0x74, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x2a, 0x20, 0x32, 0x3b, //  = dstCoord * 2;
	0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x3d, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4c, // .color += imageL
	0x6f, 0x61, 0x64, 0x28, 0x75, 0x5f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2c, 0x20, 0x73, 0x72, // oad(u_Source, sr
	0x63, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, // cCoord );.color 
	0x2b, 0x3d, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x28, 0x75, 0x5f, 0x53, // += imageLoad(u_S
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2c, 0x20, 0x73, 0x72, 0x63, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, // ource, srcCoord 
	0x2b, 0x20, 0x69, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2c, 0x20, 0x31, 0x29, 0x29, 0x3b, 0x0a, // + ivec2(0, 1));.
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x3d, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x6f, // color += imageLo
	0x61, 0x64, 0x28, 0x75, 0x5f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2c, 0x20, 0x73, 0x72, 0x63, // ad(u_Source, src
	0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x2b, 0x20, 0x69, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2c, // Coord + ivec2(1,
	0x20, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x3d, 0x20, 0x69, //  0));.color += i
	0x6d, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x28, 0x75, 0x5f, 0x53, 0x6f, 0x75, 0x72, 0x63, // mageLoad(u_Sourc
	0x65, 0x2c, 0x20, 0x73, 0x72, 0x63, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x2b, 0x20, 0x69, 0x76, // e, srcCoord + iv
	0x65, 0x63, 0x32, 0x28, 0x31, 0x2c, 0x20, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, // ec2(1, 1));.colo
	0x72, 0x20, 0x2f, 0x3d, 0x20, 0x34, 0x2e, 0x30, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, // r /= 4.0;.}.else
	0x20, 0x69, 0x66, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x3d, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x29, //  if (1.0 == 1.0)
	0x20, 0x7b, 0x0a, 0x69, 0x76, 0x65, 0x63, 0x32, 0x20, 0x73, 0x72, 0x63, 0x43, 0x6f, 0x6f, 0x72, //  {.ivec2 srcCoor
	0x64, 0x20, 0x3d, 0x20, 0x64, 0x73, 0x74, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x2a, 0x20, 0x32, // d = dstCoord * 2
	0x20, 0x2d, 0x20, 0x69, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2c, 0x20, 0x31, 0x29, 0x3b, 0x0a, //  - ivec2(1, 1);.
	0x66, 0x6f, 0x72, 0x20, 0x28, 0x69, 0x6e, 0x74, 0x20, 0x64, 0x79, 0x20, 0x3d, 0x20, 0x30, 0x3b, // for (int dy = 0;
	0x20, 0x64, 0x79, 0x20, 0x3c, 0x20, 0x34, 0x3b, 0x20, 0x2b, 0x2b, 0x64, 0x79, 0x29, 0x0a, 0x66, //  dy < 4; ++dy).f
	0x6f, 0x72, 0x20, 0x28, 0x69, 0x6e, 0x74, 0x20, 0x64, 0x78, 0x20, 0x3d, 0x20, 0x30, 0x3b, 0x20, // or (int dx = 0; 
	0x64, 0x78, 0x20, 0x3c, 0x20, 0x34, 0x3b, 0x20, 0x2b, 0x2b, 0x64, 0x78, 0x29, 0x0a, 0x63, 0x6f, // dx < 4; ++dx).co
	0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x3d, 0x20, 0x67, 0x5f, 0x6b, 0x61, 0x69, 0x73, 0x65, 0x72, 0x4b, // lor += g_kaiserK
	0x65, 0x72, 0x6e, 0x65, 0x6c, 0x34, 0x5b, 0x64, 0x78, 0x5d, 0x5b, 0x64, 0x79, 0x5d, 0x20, 0x2a, // ernel4[dx][dy] *
	0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x28, 0x75, 0x5f, 0x53, 0x6f, 0x75, //  imageLoad(u_Sou
	0x72, 0x63, 0x65, 0x2c, 0x20, 0x73, 0x72, 0x63, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x2b, 0x20, // rce, srcCoord + 
	0x69, 0x76, 0x65, 0x63, 0x32, 0x28, 0x64, 0x78, 0x2c, 0x20, 0x64, 0x79, 0x29, 0x29, 0x3b, 0x0a, // ivec2(dx, dy));.
	0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x69, 0x66, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x3d, // }.else if (1.0 =
	0x3d, 0x20, 0x32, 0x2e, 0x30, 0x29, 0x20, 0x7b, 0x0a, 0x69, 0x76, 0x65, 0x63, 0x32, 0x20, 0x73, // = 2.0) {.ivec2 s
	0x72, 0x63, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x3d, 0x20, 0x64, 0x73, 0x74, 0x43, 0x6f, 0x6f, // rcCoord = dstCoo
	0x72, 0x64, 0x20, 0x2a, 0x20, 0x32, 0x20, 0x2d, 0x20, 0x69, 0x76, 0x65, 0x63, 0x32, 0x28, 0x32, // rd * 2 - ivec2(2
	0x2c, 0x20, 0x32, 0x29, 0x3b, 0x0a, 0x66, 0x6f, 0x72, 0x20, 0x28, 0x69, 0x6e, 0x74, 0x20, 0x64, // , 2);.for (int d
	0x79, 0x20, 0x3d, 0x20, 0x30, 0x3b, 0x20, 0x64, 0x79, 0x20, 0x3c, 0x20, 0x36, 0x3b, 0x20, 0x2b, // y = 0; dy < 6; +
	0x2b, 0x64, 0x79, 0x29, 0x0a, 0x66, 0x6f, 0x72, 0x20, 0x28, 0x69, 0x6e, 0x74, 0x20, 0x64, 0x78, // +dy).for (int dx
	0x20, 0x3d, 0x20, 0x30, 0x3b, 0x20, 0x64, 0x78, 0x20, 0x3c, 0x20, 0x36, 0x3b, 0x20, 0x2b, 0x2b, //  = 0; dx < 6; ++
	0x64, 0x78, 0x29, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x3d, 0x20, 0x67, 0x5f, 0x6b, // dx).color += g_k
	0x61, 0x69, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x36, 0x5b, 0x64, 0x78, 0x5d, // aiserKernel6[dx]
	0x5b, 0x64, 0x79, 0x5d, 0x20, 0x2a, 0x20, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x4c, 0x6f, 0x61, 0x64, // [dy] * imageLoad
	0x28, 0x75, 0x5f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2c, 0x20, 0x73, 0x72, 0x63, 0x43, 0x6f, // (u_Source, srcCo
	0x6f, 0x72, 0x64, 0x20, 0x2b, 0x20, 0x69, 0x76, 0x65, 0x63, 0x32, 0x28, 0x64, 0x78, 0x2c, 0x20, // ord + ivec2(dx, 
	0x64, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x69, 0x66, 0x20, // dy));.}.else if 
	0x28, 0x31, 0x2e, 0x30, 0x20, 0x3d, 0x3d, 0x20, 0x33, 0x2e, 0x30, 0x29, 0x20, 0x7b, 0x0a, 0x69, // (1.0 == 3.0) {.i
	0x76, 0x65, 0x63, 0x32, 0x20, 0x73, 0x72, 0x63, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x3d, 0x20, // vec2 srcCoord = 
	0x64, 0x73, 0x74, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x2a, 0x20, 0x32, 0x20, 0x2d, 0x20, 0x69, // dstCoord * 2 - i
	0x76, 0x65, 0x63, 0x32, 0x28, 0x32, 0x2c, 0x20, 0x32, 0x29, 0x3b, 0x0a, 0x66, 0x6f, 0x72, 0x20, // vec2(2, 2);.for 
	0x28, 0x69, 0x6e, 0x74, 0x20, 0x64, 0x79, 0x20, 0x3d, 0x20, 0x30, 0x3b, 0x20, 0x64, 0x79, 0x20, // (int dy = 0; dy 
	0x3c, 0x20, 0x36, 0x3b, 0x20, 0x2b, 0x2b, 0x64, 0x79, 0x29, 0x0a, 0x66, 0x6f, 0x72, 0x20, 0x28, // < 6; ++dy).for (
	0x69, 0x6e, 0x74, 0x20, 0x64, 0x78, 0x20, 0x3d, 0x20, 0x30, 0x3b, 0x20, 0x64, 0x78, 0x20, 0x3c, // int dx = 0; dx <
	0x20, 0x36, 0x3b, 0x20, 0x2b, 0x2b, 0x64, 0x78, 0x29, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, //  6; ++dx).color 
	0x2b, 0x3d, 0x20, 0x67, 0x5f, 0x6b, 0x61, 0x69, 0x73, 0x65, 0x72, 0x4b, 0x65, 0x72, 0x6e, 0x65, // += g_kaiserKerne
	0x6c, 0x36, 0x73, 0x5b, 0x64, 0x78, 0x5d, 0x5b, 0x64, 0x79, 0x5d, 0x20, 0x2a, 0x20, 0x69, 0x6d, // l6s[dx][dy] * im
	0x61, 0x67, 0x65, 0x4c, 0x6f, 0x61, 0x64, 0x28, 0x75, 0x5f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, // ageLoad(u_Source
	0x2c, 0x20, 0x73, 0x72, 0x63, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x2b, 0x20, 0x69, 0x76, 0x65, // , srcCoord + ive
	0x63, 0x32, 0x28, 0x64, 0x78, 0x2c, 0x20, 0x64, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x69, // c2(dx, dy));.}.i
	0x6d, 0x61, 0x67, 0x65, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x28, 0x75, 0x5f, 0x44, 0x65, 0x73, 0x74, // mageStore(u_Dest
	0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x64, 0x73, 0x74, 0x43, 0x6f, 0x6f, 0x72, // ination, dstCoor
	0x64, 0x2c, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x00,             // d, color);.}..
};
static const uint8_t cs_mipmap_rgba32f_dx11[1154] =
{
	0x43, 0x53, 0x48, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6c, 0x04, // CSH...........l.
	0x00, 0x00, 0x44, 0x58, 0x42, 0x43, 0x34, 0x95, 0xb5, 0xc2, 0x30, 0xd0, 0xa7, 0x1e, 0x17, 0xdf, // ..DXBC4...0.....
	0xfa, 0xa3, 0x85, 0x58, 0x03, 0x6f, 0x01, 0x00, 0x00, 0x00, 0x6c, 0x04, 0x00, 0x00, 0x03, 0x00, // ...X.o....l.....
	0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x4c, 0x00, 0x00, 0x00, 0x49, 0x53, // ..,...<...L...IS
	0x47, 0x4e, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x4f, 0x53, // GN............OS
	0x47, 0x4e, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x53, 0x48, // GN............SH
	0x45, 0x58, 0x18, 0x04, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x06, 0x01, 0x00, 0x00, 0x6a, 0x08, // EX....P.......j.
	0x00, 0x01, 0x35, 0x18, 0x00, 0x00, 0x42, 0x00, 0x00, 0x00, 0x38, 0x9e, 0xcf, 0x38, 0x00, 0x00, // ..5...B...8..8..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0xe8, 0x9f, 0x3b, 0x00, 0x00, // ..........h..;..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0xe8, 0x9f, 0x3b, 0x00, 0x00, // ..........h..;..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x9e, 0xcf, 0x38, 0x00, 0x00, // ..........8..8..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0xe8, 0x9f, 0x3b, 0x00, 0x00, // ..........h..;..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0xe7, 0x75, 0x3e, 0x00, 0x00, // ............u>..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0xe7, 0x75, 0x3e, 0x00, 0x00, // ............u>..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0xe8, 0x9f, 0x3b, 0x00, 0x00, // ..........h..;..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0xe8, 0x9f, 0x3b, 0x00, 0x00, // ..........h..;..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0xe7, 0x75, 0x3e, 0x00, 0x00, // ............u>..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0xe7, 0x75, 0x3e, 0x00, 0x00, // ............u>..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0xe8, 0x9f, 0x3b, 0x00, 0x00, // ..........h..;..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x9e, 0xcf, 0x38, 0x00, 0x00, // ..........8..8..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0xe8, 0x9f, 0x3b, 0x00, 0x00, // ..........h..;..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0xe8, 0x9f, 0x3b, 0x00, 0x00, // ..........h..;..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x9e, 0xcf, 0x38, 0x00, 0x00, // ..........8..8..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x58, 0x18, 0x00, 0x04, 0x00, 0x70, // ..........X....p
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x55, 0x00, 0x00, 0x9c, 0x18, 0x00, 0x04, 0x00, 0xe0, // ......UU........
	0x11, 0x00, 0x01, 0x00, 0x00, 0x00, 0x55, 0x55, 0x00, 0x00, 0x5f, 0x00, 0x00, 0x02, 0x32, 0x00, // ......UU.._...2.
	0x02, 0x00, 0x68, 0x00, 0x00, 0x02, 0x06, 0x00, 0x00, 0x00, 0x9b, 0x00, 0x00, 0x04, 0x08, 0x00, // ..h.............
	0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3d, 0x10, 0x00, 0x89, 0xc2, 0x00, // ..........=.....
	0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x32, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, // ..CU..2........@
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0xee, 0x11, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2b, 0x00, // ......F.......+.
	0x00, 0x04, 0xc2, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x04, 0x02, 0x00, 0x2b, 0x00, // ..............+.
	0x00, 0x05, 0x32, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x00, 0x00, // ..2.......F.....
	0x00, 0x00, 0x1d, 0x00, 0x00, 0x07, 0x32, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe6, 0x0a, // ......2.........
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, // ......F.......<.
	0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x04, 0x03, 0x0a, 0x00, // ................
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x01, 0x15, 0x00, 0x00, 0x01, 0x29, 0x00, // ......>.......).
	0x00, 0x09, 0x32, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x02, 0x00, 0x02, 0x40, // ..2.......F....@
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x1e, 0x00, 0x00, 0x0a, 0x32, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, // ......2.......F.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, // .......@........
	0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x08, 0xc2, 0x00, // ..........6.....
	0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .......@........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x08, 0xf2, 0x00, // ..........6.....
	0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .......@........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x22, 0x00, // ..........6...".
	0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, // .......@......0.
	0x00, 0x01, 0x21, 0x00, 0x00, 0x07, 0x42, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x00, // ..!...B.........
	0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x03, 0x00, // .......@........
	0x04, 0x03, 0x2a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0xf2, 0x00, // ..*.......6.....
	0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x36, 0x00, // ......F.......6.
	0x00, 0x05, 0x12, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, // ...........@....
	0x00, 0x00, 0x30, 0x00, 0x00, 0x01, 0x21, 0x00, 0x00, 0x07, 0x42, 0x00, 0x10, 0x00, 0x00, 0x00, // ..0...!...B.....
	0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x04, 0x00, // ...........@....
	0x00, 0x00, 0x03, 0x00, 0x04, 0x03, 0x2a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x29, 0x00, // ......*.......).
	0x00, 0x07, 0x42, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x03, 0x00, // ..B.............
	0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x07, 0x42, 0x00, // ...@..........B.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x2a, 0x00, // ..............*.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x07, 0x32, 0x00, 0x10, 0x00, 0x01, 0x00, // ..........2.....
	0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x03, 0x00, // ..F.......F.....
	0x00, 0x00, 0x2d, 0x00, 0x00, 0x89, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0xf2, 0x00, // ..-.......CU....
	0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x7e, // ......F.......F~
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x0a, 0xf2, 0x00, 0x10, 0x00, 0x04, 0x00, // ......2.........
	0x00, 0x00, 0x06, 0x90, 0x90, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x0e, // ......*.......F.
	0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x1e, 0x00, // ......F.........
	0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x03, 0x00, // ................
	0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x01, 0x36, 0x00, // ...@..........6.
	0x00, 0x05, 0xf2, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x04, 0x00, // ..........F.....
	0x00, 0x00, 0x1e, 0x00, 0x00, 0x07, 0x22, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x1a, 0x00, // ......".........
	0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x16, 0x00, // .......@........
	0x00, 0x01, 0xa4, 0x00, 0x00, 0x06, 0xf2, 0xe0, 0x11, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x05, // ..............F.
	0x02, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x01, 0x00, 0x00, // ..F.......>.....
	0x00, 0x00,                                                                                     // ..
};
static const uint8_t cs_mipmap_rgba32f_spv[2005] =
{
	0x43, 0x53, 0x48, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x08, 0x75, // CSH............u
	0x5f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x20, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x02, 0x4e, // _Source .......N
	0x00, 0x0d, 0x75, 0x5f, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x01, // ..u_Destination.
	0x00, 0x03, 0x00, 0x03, 0x00, 0x00, 0x02, 0x4e, 0x00, 0x94, 0x07, 0x00, 0x00, 0x03, 0x02, 0x23, // .......N.......#
	0x07, 0x00, 0x00, 0x01, 0x00, 0x0b, 0x00, 0x08, 0x00, 0x0d, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x11, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x11, 0x00, 0x02, 0x00, 0x32, 0x00, 0x00, // .............2..
	0x00, 0x0b, 0x00, 0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, 0x4c, 0x53, 0x4c, 0x2e, 0x73, 0x74, // .........GLSL.st
	0x64, 0x2e, 0x34, 0x35, 0x30, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, // d.450...........
	0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x06, 0x00, 0x05, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, // ................
	0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x5c, 0x01, 0x00, 0x00, 0x10, 0x00, 0x06, // .main...........
	0x00, 0x04, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, // ................
	0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x03, 0x00, 0x05, 0x00, 0x00, 0x00, 0xf4, 0x01, 0x00, // ................
	0x00, 0x05, 0x00, 0x04, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, // .........main...
	0x00, 0x05, 0x00, 0x06, 0x00, 0x60, 0x00, 0x00, 0x00, 0x75, 0x5f, 0x44, 0x65, 0x73, 0x74, 0x69, // .....`...u_Desti
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x00, 0x00, 0x00, 0x05, 0x00, 0x05, 0x00, 0x7d, 0x00, 0x00, // nation.......}..
	0x00, 0x75, 0x5f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x08, // .u_Source.......
	0x00, 0x5c, 0x01, 0x00, 0x00, 0x67, 0x6c, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x49, 0x6e, // .....gl_GlobalIn
	0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x44, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, // vocationID...G..
	0x00, 0x60, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, // .`...".......G..
	0x00, 0x60, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x47, 0x00, 0x03, // .`...!.......G..
	0x00, 0x60, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x7d, 0x00, 0x00, // .`.......G...}..
	0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x7d, 0x00, 0x00, // .".......G...}..
	0x00, 0x21, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x5c, 0x01, 0x00, // .!.......G......
	0x00, 0x0b, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x13, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, // ................
	0x00, 0x21, 0x00, 0x03, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x16, 0x00, 0x03, // .!..............
	0x00, 0x06, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, // ..... ..........
	0x00, 0x06, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x14, 0x00, 0x02, 0x00, 0x09, 0x00, 0x00, // ................
	0x00, 0x17, 0x00, 0x04, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, // ................
	0x00, 0x20, 0x00, 0x04, 0x00, 0x10, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, // . ..............
	0x00, 0x17, 0x00, 0x04, 0x00, 0x11, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, // ................
	0x00, 0x15, 0x00, 0x04, 0x00, 0x18, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, // ......... ......
	0x00, 0x17, 0x00, 0x04, 0x00, 0x19, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, // ................
	0x00, 0x19, 0x00, 0x09, 0x00, 0x20, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, // ..... ..........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, // ................
	0x00, 0x01, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x2d, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, // .........-......
	0x00, 0x03, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x18, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, // .....+.......>..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x00, 0x04, 0x00, 0x47, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, // .........G... ..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x48, 0x00, 0x00, 0x00, 0x47, 0x00, 0x00, // .........H...G..
	0x00, 0x02, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x47, 0x00, 0x00, 0x00, 0x4e, 0x00, 0x00, // .....+...G...N..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ..... ..._......
	0x00, 0x20, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x5f, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, // . ...;..._...`..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, // .....+.......p..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x18, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, // .....+.......x..
	0x00, 0x02, 0x00, 0x00, 0x00, 0x19, 0x00, 0x09, 0x00, 0x7b, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, // .........{......
	0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x7c, 0x00, 0x00, // ......... ...|..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x7b, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x7c, 0x00, 0x00, // .....{...;...|..
	0x00, 0x7d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x18, 0x00, 0x00, // .}.......+......
	0x00, 0x86, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x05, 0x00, 0x19, 0x00, 0x00, // .........,......
	0x00, 0x99, 0x00, 0x00, 0x00, 0x86, 0x00, 0x00, 0x00, 0x86, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, // .............+..
	0x00, 0x18, 0x00, 0x00, 0x00, 0xb6, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, // .............+..
	0x00, 0x47, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x04, // .G..............
	0x00, 0xc1, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x04, // ................
	0x00, 0xc2, 0x00, 0x00, 0x00, 0xc1, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, // .............+..
	0x00, 0x06, 0x00, 0x00, 0x00, 0xc3, 0x00, 0x00, 0x00, 0x38, 0x9e, 0xcf, 0x38, 0x2b, 0x00, 0x04, // .........8..8+..
	0x00, 0x06, 0x00, 0x00, 0x00, 0xc4, 0x00, 0x00, 0x00, 0x68, 0xe8, 0x9f, 0x3b, 0x2c, 0x00, 0x07, // .........h..;,..
	0x00, 0xc1, 0x00, 0x00, 0x00, 0xc5, 0x00, 0x00, 0x00, 0xc3, 0x00, 0x00, 0x00, 0xc4, 0x00, 0x00, // ................
	0x00, 0xc4, 0x00, 0x00, 0x00, 0xc3, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, // .........+......
	0x00, 0xc6, 0x00, 0x00, 0x00, 0x86, 0xe7, 0x75, 0x3e, 0x2c, 0x00, 0x07, 0x00, 0xc1, 0x00, 0x00, // .......u>,......
	0x00, 0xc7, 0x00, 0x00, 0x00, 0xc4, 0x00, 0x00, 0x00, 0xc6, 0x00, 0x00, 0x00, 0xc6, 0x00, 0x00, // ................
	0x00, 0xc4, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x07, 0x00, 0xc2, 0x00, 0x00, 0x00, 0xc8, 0x00, 0x00, // .....,..........
	0x00, 0xc5, 0x00, 0x00, 0x00, 0xc7, 0x00, 0x00, 0x00, 0xc7, 0x00, 0x00, 0x00, 0xc5, 0x00, 0x00, // ................
	0x00, 0x20, 0x00, 0x04, 0x00, 0xcb, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0xc2, 0x00, 0x00, // . ..............
	0x00, 0x2c, 0x00, 0x05, 0x00, 0x19, 0x00, 0x00, 0x00, 0xe6, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, // .,...........x..
	0x00, 0x78, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x5b, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, // .x... ...[......
	0x00, 0x2d, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x5b, 0x01, 0x00, 0x00, 0x5c, 0x01, 0x00, // .-...;...[......
	0x00, 0x01, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x07, 0x00, 0x11, 0x00, 0x00, 0x00, 0x07, 0x02, 0x00, // .....,..........
	0x00, 0x70, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, // .p...p...p...p..
	0x00, 0x36, 0x00, 0x05, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .6..............
	0x00, 0x03, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x05, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, // .............;..
	0x00, 0xcb, 0x00, 0x00, 0x00, 0x8e, 0x01, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, // .............=..
	0x00, 0x2d, 0x00, 0x00, 0x00, 0x5d, 0x01, 0x00, 0x00, 0x5c, 0x01, 0x00, 0x00, 0xf7, 0x00, 0x03, // .-...]..........
	0x00, 0xdb, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfb, 0x00, 0x03, 0x00, 0x4e, 0x00, 0x00, // .............N..
	0x00, 0xa1, 0x01, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xa1, 0x01, 0x00, 0x00, 0x4f, 0x00, 0x07, // .............O..
	0x00, 0x19, 0x00, 0x00, 0x00, 0xa3, 0x01, 0x00, 0x00, 0x5d, 0x01, 0x00, 0x00, 0x5d, 0x01, 0x00, // .........]...]..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x20, 0x00, 0x00, // .........=... ..
	0x00, 0xa4, 0x01, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x68, 0x00, 0x04, 0x00, 0x48, 0x00, 0x00, // .....`...h...H..
	0x00, 0xe1, 0x01, 0x00, 0x00, 0xa4, 0x01, 0x00, 0x00, 0x7c, 0x00, 0x04, 0x00, 0x19, 0x00, 0x00, // .........|......
	0x00, 0xe9, 0x01, 0x00, 0x00, 0xe1, 0x01, 0x00, 0x00, 0x6f, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, // .........o......
	0x00, 0xa7, 0x01, 0x00, 0x00, 0xa3, 0x01, 0x00, 0x00, 0x6f, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, // .........o......
	0x00, 0xa9, 0x01, 0x00, 0x00, 0xe9, 0x01, 0x00, 0x00, 0xbe, 0x00, 0x05, 0x00, 0x0a, 0x00, 0x00, // ................
	0x00, 0xef, 0x01, 0x00, 0x00, 0xa7, 0x01, 0x00, 0x00, 0xa9, 0x01, 0x00, 0x00, 0x9a, 0x00, 0x04, // ................
	0x00, 0x09, 0x00, 0x00, 0x00, 0xab, 0x01, 0x00, 0x00, 0xef, 0x01, 0x00, 0x00, 0xf7, 0x00, 0x03, // ................
	0x00, 0xad, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0xab, 0x01, 0x00, // ................
	0x00, 0xac, 0x01, 0x00, 0x00, 0xad, 0x01, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xac, 0x01, 0x00, // ................
	0x00, 0xf9, 0x00, 0x02, 0x00, 0xdb, 0x01, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xad, 0x01, 0x00, // ................
	0x00, 0x84, 0x00, 0x05, 0x00, 0x19, 0x00, 0x00, 0x00, 0xb3, 0x01, 0x00, 0x00, 0xa3, 0x01, 0x00, // ................
	0x00, 0xe6, 0x00, 0x00, 0x00, 0x82, 0x00, 0x05, 0x00, 0x19, 0x00, 0x00, 0x00, 0xb4, 0x01, 0x00, // ................
	0x00, 0xb3, 0x01, 0x00, 0x00, 0x99, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0xb5, 0x01, 0x00, // ................
	0x00, 0xf8, 0x00, 0x02, 0x00, 0xb5, 0x01, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x11, 0x00, 0x00, // ................
	0x00, 0x09, 0x02, 0x00, 0x00, 0x07, 0x02, 0x00, 0x00, 0xad, 0x01, 0x00, 0x00, 0x0c, 0x02, 0x00, // ................
	0x00, 0xd1, 0x01, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x18, 0x00, 0x00, 0x00, 0x08, 0x02, 0x00, // ................
	0x00, 0x3e, 0x00, 0x00, 0x00, 0xad, 0x01, 0x00, 0x00, 0xd3, 0x01, 0x00, 0x00, 0xd1, 0x01, 0x00, // .>..............
	0x00, 0xb1, 0x00, 0x05, 0x00, 0x09, 0x00, 0x00, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x08, 0x02, 0x00, // ................
	0x00, 0xb6, 0x00, 0x00, 0x00, 0xf6, 0x00, 0x04, 0x00, 0xd4, 0x01, 0x00, 0x00, 0xd1, 0x01, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0xb8, 0x01, 0x00, 0x00, 0xb9, 0x01, 0x00, // ................
	0x00, 0xd4, 0x01, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xb9, 0x01, 0x00, 0x00, 0xf9, 0x00, 0x02, // ................
	0x00, 0xba, 0x01, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xba, 0x01, 0x00, 0x00, 0xf5, 0x00, 0x07, // ................
	0x00, 0x11, 0x00, 0x00, 0x00, 0x0c, 0x02, 0x00, 0x00, 0x09, 0x02, 0x00, 0x00, 0xb9, 0x01, 0x00, // ................
	0x00, 0xcc, 0x01, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x18, 0x00, 0x00, // ................
	0x00, 0x0a, 0x02, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0xcf, 0x01, 0x00, // .....>..........
	0x00, 0xbe, 0x01, 0x00, 0x00, 0xb1, 0x00, 0x05, 0x00, 0x09, 0x00, 0x00, 0x00, 0xbd, 0x01, 0x00, // ................
	0x00, 0x0a, 0x02, 0x00, 0x00, 0xb6, 0x00, 0x00, 0x00, 0xf6, 0x00, 0x04, 0x00, 0xd0, 0x01, 0x00, // ................
	0x00, 0xbe, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0xbd, 0x01, 0x00, // ................
	0x00, 0xbe, 0x01, 0x00, 0x00, 0xd0, 0x01, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xbe, 0x01, 0x00, // ................
	0x00, 0x3e, 0x00, 0x03, 0x00, 0x8e, 0x01, 0x00, 0x00, 0xc8, 0x00, 0x00, 0x00, 0x41, 0x00, 0x06, // .>...........A..
	0x00, 0x10, 0x00, 0x00, 0x00, 0xc1, 0x01, 0x00, 0x00, 0x8e, 0x01, 0x00, 0x00, 0x0a, 0x02, 0x00, // ................
	0x00, 0x08, 0x02, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0xc2, 0x01, 0x00, // .....=..........
	0x00, 0xc1, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x19, 0x00, 0x00, 0x00, 0xc6, 0x01, 0x00, // .....P..........
	0x00, 0x0a, 0x02, 0x00, 0x00, 0x08, 0x02, 0x00, 0x00, 0x80, 0x00, 0x05, 0x00, 0x19, 0x00, 0x00, // ................
	0x00, 0xc7, 0x01, 0x00, 0x00, 0xb4, 0x01, 0x00, 0x00, 0xc6, 0x01, 0x00, 0x00, 0x3d, 0x00, 0x04, // .............=..
	0x00, 0x7b, 0x00, 0x00, 0x00, 0xc8, 0x01, 0x00, 0x00, 0x7d, 0x00, 0x00, 0x00, 0x5f, 0x00, 0x07, // .{.......}..._..
	0x00, 0x11, 0x00, 0x00, 0x00, 0xf8, 0x01, 0x00, 0x00, 0xc8, 0x01, 0x00, 0x00, 0xc7, 0x01, 0x00, // ................
	0x00, 0x02, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x8e, 0x00, 0x05, 0x00, 0x11, 0x00, 0x00, // .....>..........
	0x00, 0xca, 0x01, 0x00, 0x00, 0xf8, 0x01, 0x00, 0x00, 0xc2, 0x01, 0x00, 0x00, 0x81, 0x00, 0x05, // ................
	0x00, 0x11, 0x00, 0x00, 0x00, 0xcc, 0x01, 0x00, 0x00, 0x0c, 0x02, 0x00, 0x00, 0xca, 0x01, 0x00, // ................
	0x00, 0x80, 0x00, 0x05, 0x00, 0x18, 0x00, 0x00, 0x00, 0xcf, 0x01, 0x00, 0x00, 0x0a, 0x02, 0x00, // ................
	0x00, 0x86, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0xba, 0x01, 0x00, 0x00, 0xf8, 0x00, 0x02, // ................
	0x00, 0xd0, 0x01, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0xd1, 0x01, 0x00, 0x00, 0xf8, 0x00, 0x02, // ................
	0x00, 0xd1, 0x01, 0x00, 0x00, 0x80, 0x00, 0x05, 0x00, 0x18, 0x00, 0x00, 0x00, 0xd3, 0x01, 0x00, // ................
	0x00, 0x08, 0x02, 0x00, 0x00, 0x86, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0xb5, 0x01, 0x00, // ................
	0x00, 0xf8, 0x00, 0x02, 0x00, 0xd4, 0x01, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x20, 0x00, 0x00, // .........=... ..
	0x00, 0xd7, 0x01, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x63, 0x00, 0x04, 0x00, 0xd7, 0x01, 0x00, // .....`...c......
	0x00, 0xa3, 0x01, 0x00, 0x00, 0x09, 0x02, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0xdb, 0x01, 0x00, // ................
	0x00, 0xf8, 0x00, 0x02, 0x00, 0xdb, 0x01, 0x00, 0x00, 0xfd, 0x00, 0x01, 0x00, 0x38, 0x00, 0x01, // .............8..
	0x00, 0x00, 0x00, 0x00, 0x00,                                                                   // .....
};
static const bgfx::EmbeddedShader cs_mipmap_rgba32f = BGFX_EMBEDDED_SHADER(cs_mipmap_rgba32f);
