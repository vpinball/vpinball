////GLOBAL
#version 410

////DEFINES
#include "Helpers.fxh"

uniform vec4 vColor_Intensity;
uniform vec4 vRes_Alpha_time;
uniform float alphaTestValue;

uniform mat4 matWorldViewProj[N_EYES];

//!! split into pure sprite & pure DMD?

////VERTEX
uniform int layer; // Layer being rendered (set to 0 if using layered rendering, that is to say rendering multiple layers using instanced rendering)

VS_OUT_EYE;

////GEOMETRY
layout(triangles) in;
layout(triangle_strip, max_vertices = 3) out;

in int eye_gs[];
#ifdef SHADER_GL410
flat out int glLayer_gs;
#endif

////FRAGMENT

uniform sampler2D tex_dmd; // base texture for DMD (unfiltered)
uniform sampler2D tex_sprite; // base texture for sprites (filtered)

out vec4 color;
#ifdef SHADER_GL410
flat in int glLayer_gs;
#endif

//
// VS function output structures
//

////vs_main

layout(location=0) in vec3 vPosition;
layout(location=1) in vec3 vNormal;
layout(location=2) in vec2 tc;

VS_OUT(vec2, tex0);

void main()
{
   // Set Z to 1. which in turns result in a written depth of 0. needed to avoid tonemapping of DMD and for correct fake stereo
   // (background and DMD are placed at depth buffer = 0.0, that is to say behind the playfield, at max separation)
   float4 pos = float4(vPosition.x, vPosition.y, 1.0, 1.0);
   VS_EYE;
   VS_POSITION(pos, pos);
   VS_VARYING(tex0, tc);
}

////vs_simple_world

layout(location=0) in vec3 vPosition;
layout(location=1) in vec3 vNormal;
layout(location=2) in vec2 tc;

VS_OUT(vec2, tex0);

uniform vec4 clip_plane; // Clip plane defined in table coordinate system

void main()
{
   float4 pos = float4(vPosition, 1.0);
   VS_EYE;
   VS_POSITION(matWorldViewProj[eye_vs] * pos, pos);
   VS_VARYING(tex0, tc);
   VS_CLIP_DISTANCE(pos);
}

////gs_simple_main

in vec2 tex0_gs[];
out vec2 tex0;

void main()
{
   GS_LAYER_COPY;
   for (int i=0;i<gl_in.length();i++) {
      gl_Position = gl_in[i].gl_Position;
      tex0 = tex0_gs[i];
      EmitVertex();
   }
   EndPrimitive();
}

////gs_simple_world

in vec2 tex0_gs[];
out vec2 tex0;

void main()
{
   GS_LAYER_COPY;
   for (int i=0;i<gl_in.length();i++) {
      gl_Position = (matWorldViewProj[eye_gs[i]]*gl_in[i].gl_Position);
      gl_ClipDistance[0] = gl_in[i].gl_ClipDistance[0];
      tex0 = tex0_gs[i];
      EmitVertex();
    }
    EndPrimitive();
}

//
// PS functions (DMD and "sprites")
//

////ps_main_DMD


#if 0 // raw pixelated output
float4 ps_main_DMD_no(const in VS_OUTPUT IN) : COLOR
{
   const float4 rgba = texNoLod(texSampler0, IN.tex0);
   float3 color = vColor_Intensity.xyz * vColor_Intensity.w; //!! create function that resembles LUT from VPM?
   if(rgba.a != 0.0)
      color *= rgba.rgb;
   else
      color *= rgba.r * (255.9 / 100.);

   return float4(InvGamma(color), vRes_Alpha_time.z);
}
#endif

#if 0
float nrand(const float2 uv)
{
   return frac(sin(dot(uv, float2(12.9898, 78.233))) * 43758.5453);
}
#endif

float2 hash22(const float2 uv)
{
   float3 p3 = frac(uv.xyx * float3(.1031, .1030, .0973));
   p3 += dot(p3, p3.yzx + 33.33);
   return frac((p3.xx + p3.yz)*p3.zy);
}

#if 0
float gold_noise(const float2 xy, const float seed)
{
   return frac(tan(distance(xy * 1.61803398874989484820459, xy) * seed) * xy.x); // tan is usually slower than sin/cos
}
#endif

float triangularPDF(const float r) // from -1..1, c=0 (with random no r=0..1)
{
   float p = 2.*r;
   const bool b = (p > 1.);
   if (b)
      p = 2.-p;
   p = 1.-sqrt(p); //!! handle 0 explicitly due to compiler doing 1/rsqrt(0)? but might be still 0 according to spec, as rsqrt(0) = inf and 1/inf = 0, but values close to 0 could be screwed up still
   return b ? p : -p;
}

#if 0
// approximation, mainly to get limited support (i.e. not infinite, like real gauss, which is nonsense for a small amount of samples)
float2 gaussianPDF(const float2 xi)
{
   float2 u;
   sincos(6.283185307179586476925286766559 * xi.y, u.x, u.y);
   const float root4 = sqrt(sqrt(1.0 - xi.x));
   const float half_r = sqrt(0.25 - 0.25 * root4);
   return u * half_r;
}
#endif

//!! this is incredibly heavy for a supposedly simple DMD output shader, but then again this is pretty robust for all kinds of scales and input resolutions now, plus also for 'distorted' output (via the flashers)!
//!! gaussianPDF is even more heavy, introduces more noise and is only barely higher quality (=bit less moiree) 
in vec2 tex0;

void main()
{
   FS_LAYER_TO_GLOBAL;
   const float blur = /*gaussian: 4.0; /*/ 1.5; // 1.0..2.0 looks best (between sharp and blurry), and 1.5 matches the intention of the triangle filter (see triangularPDF calls below)!
   const float2 ddxs = dFdx(tex0)*blur; // use ddx and ddy to help the oversampling below/make filtering radius dependent on projected 'dots'/texel
   const float2 ddys = dFdy(tex0)*blur;

   const float dist_factor = clamp((1.-length(ddxs+ddys)*6.66)*sqrt(128./vRes_Alpha_time.x), 0.4,1.0); // fades the smooth dots to unicolored rectangles for less aliasing

   const float2 offs = hash22(tex0 + vRes_Alpha_time.w); //float2(nrand(tex0 + vRes_Alpha_time.w), nrand(tex0 + (2048.0 + vRes_Alpha_time.w))); // random offset for the oversampling

   // brute force oversampling of DMD-texture and especially the dot-function (using 25 samples)
   float3 color2 = float3(0., 0., 0.);

   const int samples = 13; //4,8,9,13,21,25,32 korobov,fibonacci
   const float samples_float = float(samples);
   UNROLL for (int i = 0; i < samples; ++i) // oversample the dots
   {
      const float i_float = float(i);
      const float2 xi = float2(frac(i_float* (1.0 / samples_float) + offs.x), frac(i_float* (8.0 / samples_float) + offs.y)); //1,5,2,8,13,7,7 korobov,fibonacci
      //const float2 gxi = gaussianPDF(xi);
      const float2 uv = tex0 + /*gxi.x*ddxs + gxi.y*ddys; /*/ triangularPDF(xi.x)*ddxs + triangularPDF(xi.y)*ddys; //!! lots of ALU

      const float4 rgba = texNoLod(tex_dmd, uv); //!! lots of tex access by doing this all the time, but (tex) cache should be able to catch all of it

      // simulate dot within the sampled texel
      const float2 dist = (frac(uv*vRes_Alpha_time.xy)*2.2 - 1.1) * dist_factor;
      const float d = smoothstep(0., 1., 1.0 - sqr(dist.x*dist.x + dist.y*dist.y));

      if (rgba.a != 0.0)
         color2 += rgba.rgb * d;
      else
         color2 += rgba.r * (255.9 / 100.) * d;
   }
   color2 *= vColor_Intensity.xyz * ((vColor_Intensity.w/samples_float) * sqr(dist_factor)); //!! create function that resembles LUT from VPM?

   /*float3 colorg = float3(0,0,0);
   UNROLL for(int j = -1; j <= 1; ++j)
   UNROLL for(int i = -1; i <= 1; ++i)
   {
      //collect glow from neighbors
   }*/

   //if (rgba.r > 200.0)
   //   return float4(InvGamma(min(color2,float3(1.5,1.5,1.5))/*+colorg*/), 0.5);
   //else
    color = float4(InvGamma(color2/*+colorg*/), vRes_Alpha_time.z);
}

////ps_main_DMD_ext

in vec2 tex0;

void main()
{
   FS_LAYER_TO_GLOBAL;
   color.rgb = texture(tex_dmd, tex0).rgb;
   color.a = vRes_Alpha_time.z;
}

////ps_main_noDMD

in vec2 tex0;

void main()
{
   FS_LAYER_TO_GLOBAL;
   const float4 l = tex2D(tex_sprite, tex0);
   if (l.a < alphaTestValue)
      discard; //stop the pixel shader if alpha test should reject pixel to avoid writing to the depth buffer
   color = float4(/*InvGamma*/(l.xyz * vColor_Intensity.xyz * vColor_Intensity.w), l.w);
}

////ps_main_noDMD_notex

void main()
{
   FS_LAYER_TO_GLOBAL;
   color = float4(InvGamma(vColor_Intensity.xyz * vColor_Intensity.w), 1.0);
}

////TECHNIQUES

basic_DMD:P0:vs_main():gs_simple_main():ps_main_DMD()
basic_DMD_ext:P0:vs_main():gs_simple_main():ps_main_DMD_ext()
basic_DMD_world:P0:vs_simple_world():gs_simple_world():ps_main_DMD()
basic_DMD_world_ext:P0:vs_simple_world():gs_simple_world():ps_main_DMD_ext()
basic_noDMD:P0:vs_main():gs_simple_main():ps_main_noDMD()
basic_noDMD_world:P0:vs_simple_world():gs_simple_world():ps_main_noDMD()
basic_noDMD_notex:P0:vs_main():gs_simple_main():ps_main_noDMD_notex()
