// Stereo Shaders

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Build of fragment shader from fs_pp_stereo.sc to fs_pp_stereo_sbs with options: SBS NOSTEREO
static const uint8_t fs_pp_stereo_sbs_mtl[3170] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x14, 0x74, // FSH.o.><.......t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, // ex_stereo_fbSamp
	0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x74, 0x65, // ler...........te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x54, 0x65, 0x78, 0x74, 0x75, // x_stereo_fbTextu
	0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x74, 0x65, 0x78, // re...........tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, // _stereo_depthSam
	0x70, 0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x74, // pler...........t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x54, // ex_stereo_depthT
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, // exture..........
	0x13, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, // .Stereo_MS_ZPD_Y
	0x41, 0x78, 0x69, 0x73, 0x12, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x77, // Axis...........w
	0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x01, 0x10, 0x00, 0x01, 0x00, 0x00, // _h_height.......
	0x00, 0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, // ....tex_stereo_f
	0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x74, 0x65, 0x78, 0x5f, // b...........tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x10, 0x00, 0x00, 0x00, // stereo_depth....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x0b, 0x00, 0x00, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, // ......d...#inclu
	0x64, 0x65, 0x20, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x64, 0x6c, 0x69, 0x62, // de <metal_stdlib
	0x3e, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x73, 0x69, 0x6d, 0x64, // >.#include <simd
	0x2f, 0x73, 0x69, 0x6d, 0x64, 0x2e, 0x68, 0x3e, 0x0a, 0x0a, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, // /simd.h>..using 
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x3b, // namespace metal;
	0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, // ..struct _Global
	0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, // .{.    float4 St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, // ereo_MS_ZPD_YAxi
	0x73, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x77, 0x5f, // s;.    float4 w_
	0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, // h_height;.};..st
	0x72, 0x75, 0x63, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, // ruct xlatMtlMain
	0x5f, 0x6f, 0x75, 0x74, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // _out.{.    float
	0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, // 4 bgfx_FragData0
	0x20, 0x5b, 0x5b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, //  [[color(0)]];.}
	0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, // ;..struct xlatMt
	0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, // lMain_in.{.    f
	0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, // loat2 v_texcoord
	0x30, 0x20, 0x5b, 0x5b, 0x75, 0x73, 0x65, 0x72, 0x28, 0x6c, 0x6f, 0x63, 0x6e, 0x30, 0x29, 0x5d, // 0 [[user(locn0)]
	0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, // ];.};..fragment 
	0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x20, // xlatMtlMain_out 
	0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x28, 0x78, 0x6c, 0x61, 0x74, // xlatMtlMain(xlat
	0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x5b, 0x5b, // MtlMain_in in [[
	0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x5d, 0x5d, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, // stage_in]], cons
	0x74, 0x61, 0x6e, 0x74, 0x20, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x26, 0x20, 0x5f, 0x6d, // tant _Global& _m
	0x74, 0x6c, 0x5f, 0x75, 0x20, 0x5b, 0x5b, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x28, 0x30, 0x29, // tl_u [[buffer(0)
	0x5d, 0x5d, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, // ]], texture2d<fl
	0x6f, 0x61, 0x74, 0x3e, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // oat> tex_stereo_
	0x66, 0x62, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x30, 0x29, 0x5d, // fb [[texture(0)]
	0x5d, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, 0x6f, // ], texture2d<flo
	0x61, 0x74, 0x3e, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, // at> tex_stereo_d
	0x65, 0x70, 0x74, 0x68, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x31, // epth [[texture(1
	0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x74, 0x65, 0x78, // )]], sampler tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, // _stereo_fbSample
	0x72, 0x20, 0x5b, 0x5b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, // r [[sampler(0)]]
	0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // , sampler tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, // ereo_depthSample
	0x72, 0x20, 0x5b, 0x5b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x31, 0x29, 0x5d, 0x5d, // r [[sampler(1)]]
	0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, // ).{.    xlatMtlM
	0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x3d, 0x20, 0x7b, 0x7d, // ain_out out = {}
	0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x5f, 0x33, 0x35, // ;.    float2 _35
	0x34, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, // 4 = float2(in.v_
	0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x32, 0x2e, // texcoord0.x * 2.
	0x30, 0x2c, 0x20, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, // 0, in.v_texcoord
	0x30, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, // 0.y);.    float3
	0x20, 0x5f, 0x36, 0x36, 0x39, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x64, 0x6f, 0x0a, 0x20, 0x20, //  _669;.    do.  
	0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x6f, 0x6f, 0x6c, //   {.        bool
	0x20, 0x5f, 0x34, 0x30, 0x34, 0x20, 0x3d, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, //  _404 = _mtl_u.S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, // tereo_MS_ZPD_YAx
	0x69, 0x73, 0x2e, 0x7a, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x3b, 0x0a, 0x20, 0x20, 0x20, // is.z != 0.0;.   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, //      if (in.v_te
	0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2e, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x35, 0x29, // xcoord0.x < 0.5)
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // .        {.     
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x34, 0x36, //        float _46
	0x35, 0x20, 0x3d, 0x20, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, // 5 = fast::max(0.
	0x30, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, // 0, _mtl_u.w_h_he
	0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, // ight.w + (_mtl_u
	0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, // .Stereo_MS_ZPD_Y
	0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, // Axis.x * (1.0 - 
	0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x28, 0x66, // (1.0 / (0.5 + (f
	0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, 0x6e, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, // ast::min(fast::m
	0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, // in(tex_stereo_de
	0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, // pth.sample(tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, // tereo_depthSampl
	0x65, 0x72, 0x2c, 0x20, 0x28, 0x5f, 0x33, 0x35, 0x34, 0x20, 0x2b, 0x20, 0x73, 0x65, 0x6c, 0x65, // er, (_354 + sele
	0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2a, 0x20, // ct(float2(0.5 * 
	0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, // _mtl_u.Stereo_MS
	0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, // _ZPD_YAxis.x, 0.
	0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, // 0), float2(0.0, 
	0x30, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, // 0.5 * _mtl_u.Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, // reo_MS_ZPD_YAxis
	0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x34, 0x30, 0x34, 0x29, // .x), bool2(_404)
	0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, // )), level(0.0)).
	0x78, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, // x, tex_stereo_de
	0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, // pth.sample(tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, // tereo_depthSampl
	0x65, 0x72, 0x2c, 0x20, 0x28, 0x5f, 0x33, 0x35, 0x34, 0x20, 0x2b, 0x20, 0x73, 0x65, 0x6c, 0x65, // er, (_354 + sele
	0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x30, // ct(float2(0.6660
	0x30, 0x30, 0x30, 0x30, 0x38, 0x35, 0x38, 0x33, 0x30, 0x36, 0x38, 0x38, 0x34, 0x37, 0x36, 0x35, // 0000858306884765
	0x36, 0x32, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, // 625 * _mtl_u.Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, // reo_MS_ZPD_YAxis
	0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, // .x, 0.0), float2
	0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x30, 0x30, 0x30, 0x30, 0x30, // (0.0, 0.66600000
	0x38, 0x35, 0x38, 0x33, 0x30, 0x36, 0x38, 0x38, 0x34, 0x37, 0x36, 0x35, 0x36, 0x32, 0x35, 0x20, // 858306884765625 
	0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // * _mtl_u.Stereo_
	0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, // MS_ZPD_YAxis.x),
	0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x34, 0x30, 0x34, 0x29, 0x29, 0x29, 0x2c, 0x20, //  bool2(_404))), 
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x20, // level(0.0)).x), 
	0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, // tex_stereo_depth
	0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // .sample(tex_ster
	0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, // eo_depthSampler,
	0x20, 0x28, 0x5f, 0x33, 0x35, 0x34, 0x20, 0x2b, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, //  (_354 + select(
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, // float2(_mtl_u.St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, // ereo_MS_ZPD_YAxi
	0x73, 0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // s.x, 0.0), float
	0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, // 2(0.0, _mtl_u.St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, // ereo_MS_ZPD_YAxi
	0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x34, 0x30, 0x34, // s.x), bool2(_404
	0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, // ))), level(0.0))
	0x2e, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x5f, 0x6d, // .x) * ((1.0 / _m
	0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, // tl_u.Stereo_MS_Z
	0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, // PD_YAxis.y) - 0.
	0x35, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 5)))))));.      
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x36, 0x36, 0x39, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, //       _669 = tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, // _stereo_fb.sampl
	0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, // e(tex_stereo_fbS
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x5f, 0x33, 0x35, 0x34, 0x20, 0x2b, 0x20, // ampler, (_354 + 
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x5f, 0x34, // select(float2(_4
	0x36, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, // 65, 0.0), float2
	0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x5f, 0x34, 0x36, 0x35, 0x29, 0x2c, 0x20, 0x62, 0x6f, // (0.0, -_465), bo
	0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x34, 0x30, 0x34, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, // ol2(_404))), lev
	0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x20, 0x20, // el(0.0)).xyz;.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, //           break;
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // .        }.     
	0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //    else.        
	0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, // {.            fl
	0x6f, 0x61, 0x74, 0x20, 0x5f, 0x35, 0x33, 0x36, 0x20, 0x3d, 0x20, 0x66, 0x61, 0x73, 0x74, 0x3a, // oat _536 = fast:
	0x3a, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, // :max(0.0, _mtl_u
	0x2e, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, // .w_h_height.w + 
	0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, // (_mtl_u.Stereo_M
	0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x20, 0x2a, 0x20, // S_ZPD_YAxis.x * 
	0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, // (1.0 - (1.0 / (0
	0x2e, 0x35, 0x20, 0x2b, 0x20, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, 0x6e, 0x28, // .5 + (fast::min(
	0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // fast::min(tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, // ereo_depth.sampl
	0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, // e(tex_stereo_dep
	0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x5f, 0x33, 0x35, 0x34, // thSampler, (_354
	0x20, 0x2d, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, //  - select(float2
	0x28, 0x30, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, // (0.5 * _mtl_u.St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, // ereo_MS_ZPD_YAxi
	0x73, 0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // s.x, 0.0), float
	0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, // 2(0.0, 0.5 * _mt
	0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, // l_u.Stereo_MS_ZP
	0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, // D_YAxis.x), bool
	0x32, 0x28, 0x5f, 0x34, 0x30, 0x34, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, // 2(_404))), level
	0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // (0.0)).x, tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, // ereo_depth.sampl
	0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, // e(tex_stereo_dep
	0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x5f, 0x33, 0x35, 0x34, // thSampler, (_354
	0x20, 0x2d, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, //  - select(float2
	0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x30, 0x30, 0x30, 0x30, 0x30, 0x38, 0x35, 0x38, 0x33, 0x30, // (0.6660000085830
	0x36, 0x38, 0x38, 0x34, 0x37, 0x36, 0x35, 0x36, 0x32, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, // 6884765625 * _mt
	0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, // l_u.Stereo_MS_ZP
	0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, // D_YAxis.x, 0.0),
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, //  float2(0.0, 0.6
	0x36, 0x36, 0x30, 0x30, 0x30, 0x30, 0x30, 0x38, 0x35, 0x38, 0x33, 0x30, 0x36, 0x38, 0x38, 0x34, // 6600000858306884
	0x37, 0x36, 0x35, 0x36, 0x32, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, // 765625 * _mtl_u.
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, // Stereo_MS_ZPD_YA
	0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x34, // xis.x), bool2(_4
	0x30, 0x34, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, // 04))), level(0.0
	0x29, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // )).x), tex_stere
	0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, // o_depth.sample(t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, // ex_stereo_depthS
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x5f, 0x33, 0x35, 0x34, 0x20, 0x2d, 0x20, // ampler, (_354 - 
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x5f, 0x6d, // select(float2(_m
	0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, // tl_u.Stereo_MS_Z
	0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // PD_YAxis.x, 0.0)
	0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x5f, 0x6d, // , float2(0.0, _m
	0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, // tl_u.Stereo_MS_Z
	0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, // PD_YAxis.x), boo
	0x6c, 0x32, 0x28, 0x5f, 0x34, 0x30, 0x34, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, // l2(_404))), leve
	0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x31, // l(0.0)).x) * ((1
	0x2e, 0x30, 0x20, 0x2f, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, // .0 / _mtl_u.Ster
	0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, // eo_MS_ZPD_YAxis.
	0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x3b, // y) - 0.5)))))));
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x36, 0x36, // .            _66
	0x39, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, // 9 = tex_stereo_f
	0x62, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, // b.sample(tex_ste
	0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, // reo_fbSampler, (
	0x5f, 0x33, 0x35, 0x34, 0x20, 0x2d, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, // _354 - select(fl
	0x6f, 0x61, 0x74, 0x32, 0x28, 0x5f, 0x35, 0x33, 0x36, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, // oat2(_536, 0.0),
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x5f, 0x35, //  float2(0.0, -_5
	0x33, 0x36, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x34, 0x30, 0x34, 0x29, // 36), bool2(_404)
	0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, // )), level(0.0)).
	0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // xyz;.           
	0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //  break;.        
	0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, // }.        break;
	0x20, 0x2f, 0x2f, 0x20, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x20, //  // unreachable 
	0x77, 0x6f, 0x72, 0x6b, 0x61, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, // workaround.    }
	0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x28, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x20, //  while(false);. 
	0x20, 0x20, 0x20, 0x6f, 0x75, 0x74, 0x2e, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, //    out.bgfx_Frag
	0x44, 0x61, 0x74, 0x61, 0x30, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x5f, // Data0 = float4(_
	0x36, 0x36, 0x39, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x72, // 669, 1.0);.    r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6f, 0x75, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x0a, 0x00, 0x00, // eturn out;.}....
	0x60, 0x00,                                                                                     // `.
};
static const uint8_t fs_pp_stereo_sbs_essl[10568] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x35, 0x29, // FSH.o.><......5)
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x33, 0x32, 0x30, 0x20, 0x65, // ..#version 320 e
	0x73, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, // s.#define attrib
	0x75, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x76, // ute in.#define v
	0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, // arying in.precis
	0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3b, // ion highp float;
	0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, // .precision highp
	0x20, 0x69, 0x6e, 0x74, 0x3b, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x73, 0x68, //  int;.#define sh
	0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, // adow2D(_sampler,
	0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, //  _coord) texture
	0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, // (_sampler, _coor
	0x64, 0x29, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x73, 0x68, 0x61, 0x64, 0x6f, // d).#define shado
	0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // w2DProj(_sampler
	0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // , _coord) textur
	0x65, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, // eProj(_sampler, 
	0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x0a, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x65, 0x64, 0x69, // _coord).out medi
	0x75, 0x6d, 0x70, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, // ump vec4 bgfx_Fr
	0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, // agColor;.varying
	0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, //  vec2 v_texcoord
	0x30, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, // 0;.vec3 instMul(
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x20, // vec3 _vec, mat3 
	0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // _mtx) { return (
	0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, //  (_vec) * (_mtx)
	0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, //  ); }.vec3 instM
	0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, // ul(mat3 _mtx, ve
	0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, // c3 _vec) { retur
	0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, // n ( (_mtx) * (_v
	0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, // ec) ); }.vec4 in
	0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, // stMul(vec4 _vec,
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, //  mat4 _mtx) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, // turn ( (_vec) * 
	0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, // (_mtx) ); }.vec4
	0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, //  instMul(mat4 _m
	0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, // tx, vec4 _vec) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, //  return ( (_mtx)
	0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, //  * (_vec) ); }.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, 0x70, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, // loat rcp(float _
	0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x2f, // a) { return 1.0/
	0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, // _a; }.vec2 rcp(v
	0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // ec2 _a) { return
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, //  vec2(1.0)/_a; }
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, // .vec3 rcp(vec3 _
	0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, // a) { return vec3
	0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, // (1.0)/_a; }.vec4
	0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, //  rcp(vec4 _a) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x31, 0x2e, 0x30, 0x29, // return vec4(1.0)
	0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x65, 0x63, 0x32, // /_a; }.vec2 vec2
	0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, // _splat(float _x)
	0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, //  { return vec2(_
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, // x, _x); }.vec3 v
	0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // ec3_splat(float 
	0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, // _x) { return vec
	0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, // 3(_x, _x, _x); }
	0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, // .vec4 vec4_splat
	0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // (float _x) { ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, // urn vec4(_x, _x,
	0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, //  _x, _x); }.uvec
	0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, // 2 uvec2_splat(ui
	0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // nt _x) { return 
	0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, // uvec2(_x, _x); }
	0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, // .uvec3 uvec3_spl
	0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // at(uint _x) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, // turn uvec3(_x, _
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x34, 0x20, // x, _x); }.uvec4 
	0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, // uvec4_splat(uint
	0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, //  _x) { return uv
	0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, // ec4(_x, _x, _x, 
	0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, // _x); }.mat4 mtxF
	0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, // romRows(vec4 _0,
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, //  vec4 _1, vec4 _
	0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // 2, vec4 _3).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, // turn transpose(m
	0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, // at4(_0, _1, _2, 
	0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, // _3) );.}.mat4 mt
	0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, // xFromCols(vec4 _
	0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // 0, vec4 _1, vec4
	0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, //  _2, vec4 _3).{.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, // return mat4(_0, 
	0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, // _1, _2, _3);.}.m
	0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, // at3 mtxFromRows(
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, // vec3 _0, vec3 _1
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // , vec3 _2).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, // urn transpose(ma
	0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x20, 0x29, // t3(_0, _1, _2) )
	0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, // ;.}.mat3 mtxFrom
	0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, // Cols(vec3 _0, ve
	0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, // c3 _1, vec3 _2).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, // {.return mat3(_0
	0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, // , _1, _2);.}.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, // form vec4 u_view
	0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, // Rect;.uniform ve
	0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x54, 0x65, 0x78, 0x65, 0x6c, 0x3b, 0x0a, // c4 u_viewTexel;.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, // uniform mat4 u_v
	0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, // iew;.uniform mat
	0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, // 4 u_invView;.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x70, 0x72, 0x6f, 0x6a, // form mat4 u_proj
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, // ;.uniform mat4 u
	0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // _invProj;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, // m mat4 u_viewPro
	0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, // j;.uniform mat4 
	0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, // u_invViewProj;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, // niform mat4 u_mo
	0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // del[32];.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, //  mat4 u_modelVie
	0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, // w;.uniform mat4 
	0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, // u_modelViewProj;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, // .uniform vec4 u_
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x66, 0x34, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // alphaRef4;.float
	0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, //  sqr( float v).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // .return v*v;.}.v
	0x65, 0x63, 0x32, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x29, // ec2 sqr( vec2 v)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, // .{.return v*v;.}
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // .vec3 sqr( vec3 
	0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, // v).{.return v*v;
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6d, 0x75, 0x6c, 0x5f, 0x77, 0x31, 0x28, 0x20, // .}.vec3 mul_w1( 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x29, 0x0a, // vec3 v, mat4 m).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2e, 0x78, 0x2a, 0x6d, 0x5b, 0x30, // {.return v.x*m[0
	0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x79, 0x2a, 0x6d, 0x5b, 0x31, // ].xyz + (v.y*m[1
	0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x7a, 0x2a, 0x6d, 0x5b, 0x32, // ].xyz + (v.z*m[2
	0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x6d, 0x5b, 0x33, 0x5d, 0x2e, 0x78, 0x79, 0x7a, // ].xyz + m[3].xyz
	0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x63, 0x6f, 0x73, // ));.}.float acos
	0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x20, 0x66, // _approx_divPI( f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // loat v).{.float 
	0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, // x = abs(v);.if(1
	0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, // . - x <= 0.00006
	0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // 103515625).retur
	0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, // n (v >= 0.) ? 0.
	0x20, 0x3a, 0x20, 0x31, 0x2e, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, //  : 1.;.float res
	0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, //  = ((-0.155972/3
	0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, // .141592653589793
	0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, // 2384626433832795
	0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, // ) * x + (1.56467
	0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, // /3.1415926535897
	0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, // 9323846264338327
	0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, // 95) ) * sqrt(1. 
	0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, // - x);.return (v 
	0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x31, // >= 0.) ? res : 1
	0x2e, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // . - res;.}.float
	0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, //  atan2_approx_di
	0x76, 0x32, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x79, 0x2c, 0x20, 0x66, // v2PI( float y, f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // loat x).{.float 
	0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x79, 0x29, 0x3b, 0x0a, // abs_y = abs(y);.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, // float abs_x = ab
	0x73, 0x28, 0x78, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3c, // s(x);.if(abs_x <
	0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, // = 0.000061035156
	0x32, 0x35, 0x20, 0x26, 0x26, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3c, 0x3d, 0x20, 0x30, // 25 && abs_y <= 0
	0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, // .00006103515625)
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x30, 0x2e, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // .return 0.;.floa
	0x74, 0x20, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2d, 0x20, 0x61, // t r = (abs_x - a
	0x62, 0x73, 0x5f, 0x79, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2b, // bs_y) / (abs_x +
	0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, //  abs_y);.float a
	0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, // ngle = ((x < 0.)
	0x20, 0x3f, 0x20, 0x28, 0x33, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x20, 0x3a, 0x20, 0x28, 0x31, 0x2e, //  ? (3./8.) : (1.
	0x2f, 0x38, 0x2e, 0x29, 0x29, 0x0a, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x32, 0x31, 0x31, 0x38, 0x36, // /8.)).+ (0.21186
	0x38, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, // 8 /(2.*3.1415926
	0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, // 5358979323846264
	0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x72, 0x20, 0x2a, 0x20, // 33832795) * r * 
	0x72, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x39, 0x38, 0x37, 0x33, 0x30, 0x35, 0x20, 0x2f, 0x28, 0x32, // r - 0.987305 /(2
	0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, // .*3.141592653589
	0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, // 7932384626433832
	0x37, 0x39, 0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, // 795)) * ((x < 0.
	0x29, 0x20, 0x3f, 0x20, 0x2d, 0x72, 0x20, 0x3a, 0x20, 0x72, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, // ) ? -r : r);.ret
	0x75, 0x72, 0x6e, 0x20, 0x28, 0x79, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, // urn (y < 0.) ? -
	0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3a, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x3b, 0x0a, 0x7d, // angle : angle;.}
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x73, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x72, // .float asin_appr
	0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // ox_divPI( float 
	0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, // v).{.float x = a
	0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, // bs(v);.if(1. - x
	0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, //  <= 0.0000610351
	0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, // 5625).return (v 
	0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x3a, 0x20, 0x2d, // >= 0.) ? 0.5 : -
	0x30, 0x2e, 0x35, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, // 0.5;.float res =
	0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, //  ((-0.155972/3.1
	0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, // 4159265358979323
	0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, // 84626433832795) 
	0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, // * x + (1.56467/3
	0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, // .141592653589793
	0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, // 2384626433832795
	0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, // ) ) * sqrt(1. - 
	0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, // x);.return (v >=
	0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, //  0.) ? 0.5 - res
	0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, //  : -0.5 + res;.}
	0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x61, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x71, 0x75, // .vec2 ray_to_equ
	0x69, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x75, 0x76, 0x28, // irectangular_uv(
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x61, 0x79, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, //  vec3 ray).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x0a, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, // urn vec2(.0.5 + 
	0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, // atan2_approx_div
	0x32, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x79, 0x2c, 0x20, 0x72, 0x61, 0x79, 0x2e, 0x78, // 2PI(ray.y, ray.x
	0x29, 0x2c, 0x0a, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, // ),.acos_approx_d
	0x69, 0x76, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // ivPI(ray.z));.}.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x20, 0x66, // float InvsRGB( f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, // loat color).{.if
	0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, //  (color <= 0.040
	0x34, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // 45).return color
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x29, 0x3b, 0x0a, //  * (1.0/12.92);.
	0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, // else.return pow(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, // color * (1.0/1.0
	0x35, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x2f, 0x31, 0x2e, 0x30, // 55) + (0.055/1.0
	0x35, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // 55), 2.4);.}.flo
	0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x20, 0x66, 0x6c, // at InvRec709( fl
	0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, // oat color).{.if 
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x38, 0x31, 0x29, // (color <= 0.081)
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, // .return color * 
	0x28, 0x31, 0x2e, 0x30, 0x2f, 0x34, 0x2e, 0x35, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, // (1.0/4.5);.else.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // return pow(color
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, 0x20, 0x2b, //  * (1.0/1.099) +
	0x20, 0x28, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, 0x2c, 0x20, //  (0.099/1.099), 
	0x31, 0x2e, 0x30, 0x2f, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // 1.0/0.45);.}.flo
	0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x66, 0x6c, 0x6f, // at InvGamma( flo
	0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, // at color).{.retu
	0x72, 0x6e, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // rn InvsRGB(color
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, // );.}.vec3 InvGam
	0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, // ma( vec3 color).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x49, 0x6e, // {.return vec3(In
	0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, // vGamma(color.x),
	0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, // InvGamma(color.y
	0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // ),InvGamma(color
	0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, // .z));.}.vec3 Inv
	0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, // ToneMap( vec3 co
	0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x69, 0x6e, 0x76, // lor).{.float inv
	0x5f, 0x32, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x30, 0x2e, 0x35, 0x2f, 0x30, 0x2e, 0x32, 0x35, 0x3b, // _2bh = 0.5/0.25;
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x34, 0x2e, 0x30, 0x2a, // .float bh = 4.0*
	0x30, 0x2e, 0x32, 0x35, 0x20, 0x2d, 0x20, 0x32, 0x2e, 0x30, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // 0.25 - 2.0;.retu
	0x72, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, // rn (color - 1.0 
	0x2b, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2a, 0x28, 0x63, 0x6f, // + sqrt(color*(co
	0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x20, 0x62, 0x68, 0x29, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, // lor + bh) + 1.0)
	0x29, 0x2a, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // )*inv_2bh;.}.flo
	0x61, 0x74, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, // at sRGB( float f
	0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, // ).{.float s;.if 
	0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x33, 0x31, 0x33, 0x30, 0x38, 0x29, // (f <= 0.0031308)
	0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, // .s = 12.92 * f;.
	0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x20, 0x2a, // else.s = 1.055 *
	0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x34, 0x29, //  pow(f, 1.0/2.4)
	0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, //  - 0.055;.return
	0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x52, 0x65, 0x63, 0x37, //  s;.}.float Rec7
	0x30, 0x39, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, // 09( float f).{.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, // loat s;.if (f <=
	0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x34, 0x2e, 0x35, 0x20, //  0.018).s = 4.5 
	0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, // * f;.else.s = 1.
	0x30, 0x39, 0x39, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x34, // 099 * pow(f, 0.4
	0x35, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // 5) - 0.099;.retu
	0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, // rn s;.}.float FB
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, // Gamma( float col
	0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x52, 0x47, // or).{.return sRG
	0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, // B(color);.}.vec2
	0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, //  FBGamma( vec2 c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // olor).{.return v
	0x65, 0x63, 0x32, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // ec2(FBGamma(colo
	0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, // r.x),FBGamma(col
	0x6f, 0x72, 0x2e, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, // or.y));.}.vec3 F
	0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, // BGamma( vec3 col
	0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, // or).{.return vec
	0x33, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, // 3(FBGamma(color.
	0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // x),FBGamma(color
	0x2e, 0x79, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // .y),FBGamma(colo
	0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, // r.z));.}.vec3 FB
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x32, 0x32, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, // Gamma22( vec3 co
	0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, // lor).{.return ve
	0x63, 0x33, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x2c, 0x20, // c3(pow(color.x, 
	0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, // 1.0/2.2),pow(col
	0x6f, 0x72, 0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, // or.y, 1.0/2.2),p
	0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, // ow(color.z, 1.0/
	0x32, 0x2e, 0x32, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, // 2.2));.}.float F
	0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // BToneMap( float 
	0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6c, 0x20, 0x2a, 0x20, // l).{.return l * 
	0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, // ((l*0.25 + 1.0) 
	0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // / (l + 1.0));.}.
	0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, // vec2 FBToneMap( 
	0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, // vec2 color).{.fl
	0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // oat l = dot(colo
	0x72, 0x2c, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2b, // r,vec2(0.176204+
	0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x2c, 0x30, 0x2e, // 0.0108109*0.5,0.
	0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, // 812985+0.0108109
	0x2a, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, // *0.5));.return c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, // olor * ((l*0.25 
	0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, // + 1.0) / (l + 1.
	0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x54, 0x6f, // 0));.}.vec3 FBTo
	0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // neMap( vec3 colo
	0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, // r).{.float l = d
	0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, // ot(color,vec3(0.
	0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2c, // 176204,0.812985,
	0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, // 0.0108109));.ret
	0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, // urn color * ((l*
	0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, // 0.25 + 1.0) / (l
	0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, //  + 1.0));.}.vec4
	0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, //  Additive( vec4 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, // cBase, vec4 cBle
	0x6e, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, // nd, float percen
	0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, // t).{.return cBas
	0x65, 0x20, 0x2b, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, // e + cBlend*perce
	0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, // nt;.}.vec3 Scree
	0x6e, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, // n ( vec3 cBase, 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, // vec3 cBlend).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, // eturn 1.0 - (1.0
	0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, //  - cBase) * (1.0
	0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, //  - cBlend);.}.ve
	0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, // c4 Screen ( vec4
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, //  cBase, vec4 cBl
	0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, // end).{.return 1.
	0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, // 0 - (1.0 - cBase
	0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // ) * (1.0 - cBlen
	0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, // d);.}.vec3 Scree
	0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, // nHDR ( vec3 cBas
	0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, // e, vec3 cBlend).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, // {.return max(1.0
	0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, //  - (1.0 - cBase)
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, //  * (1.0 - cBlend
	0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, // ), vec3(0.,0.,0.
	0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, // ));.}.vec4 Scree
	0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, // nHDR ( vec4 cBas
	0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, // e, vec4 cBlend).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, // {.return max(1.0
	0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, //  - (1.0 - cBase)
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, //  * (1.0 - cBlend
	0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, // ), vec4(0.,0.,0.
	0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4d, 0x75, // ,0.));.}.vec4 Mu
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // ltiply ( vec4 cB
	0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, // ase, vec4 cBlend
	0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, // , float percent)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, // .{.return cBase 
	0x2a, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, // * cBlend*percent
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, // ;.}.vec4 Overlay
	0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, //  ( vec4 cBase, v
	0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, // ec4 cBlend).{.ve
	0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, // c4 cNew = step(0
	0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, // .5, cBase);.cNew
	0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, //  = mix(cBase*cBl
	0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, // end*2.0, 1.0-2.0
	0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, // *(1.0-cBase)*(1.
	0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, // 0-cBlend), cNew)
	0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, // ;.return cNew;.}
	0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x48, 0x44, 0x52, // .vec4 OverlayHDR
	0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, //  ( vec4 cBase, v
	0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, // ec4 cBlend).{.ve
	0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, // c4 cNew = step(0
	0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, // .5, cBase);.cNew
	0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, //  = max(mix(cBase
	0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, // *cBlend*2.0, 1.0
	0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, // -2.0*(1.0-cBase)
	0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, // *(1.0-cBlend), c
	0x4e, 0x65, 0x77, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, // New), vec4(0.,0.
	0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // ,0.,0.));.return
	0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, //  cNew;.}.vec3 co
	0x73, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x5f, 0x73, 0x61, 0x6d, // s_hemisphere_sam
	0x70, 0x6c, 0x65, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x66, // ple( vec2 t).{.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x68, 0x69, 0x20, 0x3d, 0x20, 0x74, 0x2e, 0x79, 0x20, 0x2a, // loat phi = t.y *
	0x20, 0x28, 0x32, 0x2e, 0x30, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, //  (2.0*3.14159265
	0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, // 3589793238462643
	0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // 3832795);.float 
	0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, // cosTheta = sqrt(
	0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // 1.0 - t.x);.floa
	0x74, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, // t sinTheta = sqr
	0x74, 0x28, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x70, // t(t.x);.float sp
	0x2c, 0x63, 0x70, 0x3b, 0x0a, 0x7b, 0x73, 0x70, 0x3d, 0x73, 0x69, 0x6e, 0x28, 0x70, 0x68, 0x69, // ,cp;.{sp=sin(phi
	0x29, 0x3b, 0x63, 0x70, 0x3d, 0x63, 0x6f, 0x73, 0x28, 0x70, 0x68, 0x69, 0x29, 0x3b, 0x7d, 0x3b, // );cp=cos(phi);};
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x63, 0x70, 0x20, // .return vec3(cp 
	0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x63, 0x6f, 0x73, 0x54, // * sinTheta, cosT
	0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x73, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, // heta, sp * sinTh
	0x65, 0x74, 0x61, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x6f, 0x74, // eta);.}.vec3 rot
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x70, // ate_to_vector_up
	0x70, 0x65, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x76, // per( vec3 vec, v
	0x65, 0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, // ec3 normal).{.if
	0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x3e, 0x20, 0x2d, 0x30, 0x2e, 0x39, // (normal.y > -0.9
	0x39, 0x39, 0x39, 0x39, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x20, // 9999).{.float h 
	0x3d, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x28, 0x31, 0x2e, 0x30, 0x2b, 0x6e, 0x6f, 0x72, 0x6d, 0x61, // = 1.0/(1.0+norma
	0x6c, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x20, 0x3d, // l.y);.float hz =
	0x20, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, //  h*normal.z;.flo
	0x61, 0x74, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x3d, 0x20, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, // at hzx = hz*norm
	0x61, 0x6c, 0x2e, 0x78, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, // al.x;.return vec
	0x33, 0x28, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, // 3(.vec.x * (norm
	0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, // al.y+hz*normal.z
	0x29, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, // ) + vec.y * norm
	0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x68, // al.x - vec.z * h
	0x7a, 0x78, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, // zx,.vec.y * norm
	0x61, 0x6c, 0x2e, 0x79, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x6e, // al.y - vec.x * n
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, // ormal.x - vec.z 
	0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, // * normal.z,.vec.
	0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x20, 0x2d, 0x20, 0x76, // y * normal.z - v
	0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, // ec.x * hzx + vec
	0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, // .z * (normal.y+h
	0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, // *normal.x*normal
	0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x72, 0x65, 0x74, // .x));.}.else ret
	0x75, 0x72, 0x6e, 0x20, 0x2d, 0x76, 0x65, 0x63, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, // urn -vec;.}.unif
	0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // orm vec4 Stereo_
	0x53, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // Saturation;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // orm vec4 Stereo_
	0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x3b, 0x0a, 0x75, 0x6e, // MS_ZPD_YAxis;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x20, // iform sampler2D 
	0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x3b, 0x0a, 0x75, // tex_stereo_fb;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, // niform sampler2D
	0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, //  tex_stereo_dept
	0x68, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // h;.uniform vec4 
	0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, // w_h_height;.vec3
	0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x28, //  gatherEyeColor(
	0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x69, 0x73, 0x4c, // vec2 u, bool isL
	0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x79, 0x61, 0x78, 0x69, // eft).{.bool yaxi
	0x73, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, // s = (Stereo_MS_Z
	0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x7a, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, // PD_YAxis.z != 0.
	0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, // );.float MaxSepa
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // ration = (Stereo
	0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, // _MS_ZPD_YAxis.x)
	0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, 0x0a, // ;.if (isLeft).{.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, // float lminDepth 
	0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // = min(min(textur
	0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // eLod(tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, // depth, u + (yaxi
	0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, // s ? vec2(0.0, 0.
	0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // 500 * MaxSeparat
	0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, // ion) : vec2(0.50
	0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, // 0 * MaxSeparatio
	0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, // n, 0.0)), 0.0).x
	0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, // ,.textureLod(tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, // _stereo_depth, u
	0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, //  + (yaxis ? vec2
	0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, // (0.0, 0.666 * Ma
	0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, // xSeparation) : v
	0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, // ec2(0.666 * MaxS
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, // eparation, 0.0))
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, // , 0.0).x),.textu
	0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // reLod(tex_stereo
	0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, // _depth, u + (yax
	0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, // is ? vec2(0.0, M
	0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, // axSeparation) : 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // vec2( MaxSeparat
	0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // ion, 0.0)), 0.0)
	0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x70, 0x61, 0x72, 0x61, // .x);.float lpara
	0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, // llax = max(0.0, 
	0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, // w_h_height.w + M
	0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, // axSeparation * (
	0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, // 1.0 - 1.0 / (0.5
	0x20, 0x2b, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, //  + lminDepth * (
	0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, // 1.0 / (Stereo_MS
	0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, // _ZPD_YAxis.y) - 
	0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // 0.5))));.return 
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, // textureLod(tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, // tereo_fb, u + (y
	0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, // axis ? vec2(0.0,
	0x20, 0x2d, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, //  -lparallax) : v
	0x65, 0x63, 0x32, 0x28, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, // ec2(lparallax, 0
	0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, // .0)), 0.0).xyz;.
	0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, // }.else.{.float r
	0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, // minDepth = min(m
	0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, // in(textureLod(te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, // x_stereo_depth, 
	0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, // u - (yaxis ? vec
	0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, // 2(0.0, 0.500 * M
	0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, // axSeparation) : 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, // vec2(0.500 * Max
	0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // Separation, 0.0)
	0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, // ), 0.0).x,.textu
	0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // reLod(tex_stereo
	0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, // _depth, u - (yax
	0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, // is ? vec2(0.0, 0
	0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, // .666 * MaxSepara
	0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, // tion) : vec2(0.6
	0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // 66 * MaxSeparati
	0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, // on, 0.0)), 0.0).
	0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, // x),.textureLod(t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, // ex_stereo_depth,
	0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, //  u - (yaxis ? ve
	0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, // c2(0.0, MaxSepar
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, // ation) : vec2( M
	0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, // axSeparation, 0.
	0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, // 0)), 0.0).x);.fl
	0x6f, 0x61, 0x74, 0x20, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, // oat rparallax = 
	0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, // max(0.0, w_h_hei
	0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, // ght.w + MaxSepar
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, // ation * (1.0 - 1
	0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x6d, 0x69, 0x6e, // .0 / (0.5 + rmin
	0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, // Depth * (1.0 / (
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, // Stereo_MS_ZPD_YA
	0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, // xis.y) - 0.5))))
	0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // ;.return texture
	0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, // Lod(tex_stereo_f
	0x62, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, // b, u - (yaxis ? 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x72, 0x70, 0x61, 0x72, 0x61, // vec2(0.0, -rpara
	0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x72, 0x70, 0x61, // llax) : vec2(rpa
	0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, // rallax, 0.0)), 0
	0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, // .0).xyz;.}.}.voi
	0x64, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x69, 0x67, 0x68, // d gatherLeftRigh
	0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, // tColors(vec2 u, 
	0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x63, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, // out vec3 lcol, o
	0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, // ut vec3 rcol).{.
	0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, // bool yaxis = (St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, // ereo_MS_ZPD_YAxi
	0x73, 0x2e, 0x7a, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // s.z != 0.);.floa
	0x74, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, // t MaxSeparation 
	0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, // = (Stereo_MS_ZPD
	0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // _YAxis.x);.float
	0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, //  lminDepth = min
	0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, // (min(textureLod(
	0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, // tex_stereo_depth
	0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, // , u + (yaxis ? v
	0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, // ec2(0.0, 0.500 *
	0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, //  MaxSeparation) 
	0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, // : vec2(0.500 * M
	0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, // axSeparation, 0.
	0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, // 0)), 0.0).x,.tex
	0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // tureLod(tex_ster
	0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, // eo_depth, u + (y
	0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, // axis ? vec2(0.0,
	0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, //  0.666 * MaxSepa
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, // ration) : vec2(0
	0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, // .666 * MaxSepara
	0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, // tion, 0.0)), 0.0
	0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, // ).x),.textureLod
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, // (tex_stereo_dept
	0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, // h, u + (yaxis ? 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // vec2(0.0, MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // aration) : vec2(
	0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, //  MaxSeparation, 
	0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, // 0.0)), 0.0).x);.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, // float lparallax 
	0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, // = max(0.0, w_h_h
	0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // eight.w + MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, // aration * (1.0 -
	0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x6c, 0x6d, //  1.0 / (0.5 + lm
	0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, // inDepth * (1.0 /
	0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, //  (Stereo_MS_ZPD_
	0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, // YAxis.y) - 0.5))
	0x29, 0x29, 0x3b, 0x0a, 0x6c, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, // ));.lcol = textu
	0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // reLod(tex_stereo
	0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, // _fb, u + (yaxis 
	0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x6c, 0x70, 0x61, // ? vec2(0.0, -lpa
	0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x6c, // rallax) : vec2(l
	0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, // parallax, 0.0)),
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, //  0.0).xyz;.float
	0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, //  rminDepth = min
	0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, // (min(textureLod(
	0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, // tex_stereo_depth
	0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, // , u - (yaxis ? v
	0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, // ec2(0.0, 0.500 *
	0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, //  MaxSeparation) 
	0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, // : vec2(0.500 * M
	0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, // axSeparation, 0.
	0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, // 0)), 0.0).x,.tex
	0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // tureLod(tex_ster
	0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, // eo_depth, u - (y
	0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, // axis ? vec2(0.0,
	0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, //  0.666 * MaxSepa
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, // ration) : vec2(0
	0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, // .666 * MaxSepara
	0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, // tion, 0.0)), 0.0
	0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, // ).x),.textureLod
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, // (tex_stereo_dept
	0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, // h, u - (yaxis ? 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // vec2(0.0, MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // aration) : vec2(
	0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, //  MaxSeparation, 
	0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, // 0.0)), 0.0).x);.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, // float rparallax 
	0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, // = max(0.0, w_h_h
	0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // eight.w + MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, // aration * (1.0 -
	0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x6d, //  1.0 / (0.5 + rm
	0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, // inDepth * (1.0 /
	0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, //  (Stereo_MS_ZPD_
	0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, // YAxis.y) - 0.5))
	0x29, 0x29, 0x3b, 0x0a, 0x72, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, // ));.rcol = textu
	0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // reLod(tex_stereo
	0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, // _fb, u - (yaxis 
	0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x72, 0x70, 0x61, // ? vec2(0.0, -rpa
	0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x72, // rallax) : vec2(r
	0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, // parallax, 0.0)),
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, //  0.0).xyz;.}.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // form mat4 Stereo
	0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // _LeftMat;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, // m mat4 Stereo_Ri
	0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // ghtMat;.uniform 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, // vec4 Stereo_Left
	0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, // Luminance_Gamma;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, // .uniform vec4 St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, // ereo_RightLumina
	0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x3b, 0x0a, 0x76, 0x6f, // nce_DynDesat;.vo
	0x69, 0x64, 0x20, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x65, 0x73, 0x61, 0x74, 0x41, // id DynamicDesatA
	0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, // naglyph( vec3 lC
	0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, // ol, vec3 rCol, o
	0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, // ut vec3 lDesatCo
	0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x44, 0x65, 0x73, // l, out vec3 rDes
	0x61, 0x74, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, // atCol).{.float l
	0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, // eft2LeftLum = do
	0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, // t(lCol, Stereo_L
	0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, // eftLuminance_Gam
	0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, // ma.xyz);.float l
	0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, // eft2RightLum = d
	0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // ot(lCol, Stereo_
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, // RightLuminance_D
	0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, // ynDesat.xyz);.fl
	0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, // oat right2LeftLu
	0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, // m = dot(rCol, St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, // ereo_LeftLuminan
	0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, // ce_Gamma.xyz);.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, // loat right2Right
	0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // Lum = dot(rCol, 
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, // Stereo_RightLumi
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x78, // nance_DynDesat.x
	0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x4c, // yz);.float leftL
	0x75, 0x6d, 0x20, 0x3d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, // um = left2LeftLu
	0x6d, 0x20, 0x2b, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // m + left2RightLu
	0x6d, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // m;.float rightLu
	0x6d, 0x20, 0x3d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, // m = right2LeftLu
	0x6d, 0x20, 0x2b, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, // m + right2RightL
	0x75, 0x6d, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, // um;.float leftDe
	0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, // sat = Stereo_Rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, // htLuminance_DynD
	0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x6c, 0x65, // esat.w * abs((le
	0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x6c, 0x65, 0x66, // ft2LeftLum - lef
	0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, // t2RightLum) / (l
	0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, // eftLum + 0.0001)
	0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, // );.float rightDe
	0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, // sat = Stereo_Rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, // htLuminance_DynD
	0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x72, 0x69, // esat.w * abs((ri
	0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x72, 0x69, // ght2LeftLum - ri
	0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, // ght2RightLum) / 
	0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, // (rightLum + 0.00
	0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, // 01));.lDesatCol 
	0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, // = mix(lCol, vec3
	0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, // _splat(leftLum),
	0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x72, 0x44, 0x65, //  leftDesat);.rDe
	0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x72, 0x43, 0x6f, // satCol = mix(rCo
	0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x72, 0x69, // l, vec3_splat(ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, // ghtLum), rightDe
	0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x4c, 0x69, 0x6e, // sat);.}.vec3 Lin
	0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, 0x63, // earAnaglyph( vec
	0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, // 3 lCol, vec3 rCo
	0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, // l).{.vec3 color 
	0x3d, 0x20, 0x28, 0x28, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, // = (( (vec4(lCol,
	0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, //  1.)) * (Stereo_
	0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x20, 0x28, // LeftMat) ) + ( (
	0x76, 0x65, 0x63, 0x34, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, // vec4(rCol, 1.)) 
	0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, // * (Stereo_RightM
	0x61, 0x74, 0x29, 0x20, 0x29, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // at) )).rgb;.retu
	0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, // rn color;.}.unif
	0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // orm vec4 Stereo_
	0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, 0x6e, // DeghostGamma;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // iform mat4 Stere
	0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3b, // o_DeghostFilter;
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x6e, 0x61, // .vec3 DeghostAna
	0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, // glyph( vec3 lCol
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x76, // , vec3 rCol).{.v
	0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, 0x6e, 0x65, // ec3 color = Line
	0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, // arAnaglyph(lCol,
	0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, //  rCol);.return (
	0x20, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x53, 0x74, 0x65, //  (pow(color, Ste
	0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, // reo_DeghostGamma
	0x2e, 0x72, 0x67, 0x62, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x53, // .rgb)) * (mat3(S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, // tereo_DeghostFil
	0x74, 0x65, 0x72, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, // ter[0].xyz, Ster
	0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, // eo_DeghostFilter
	0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // [1].xyz, Stereo_
	0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x32, 0x5d, // DeghostFilter[2]
	0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, 0x64, // .xyz)) );.}.void
	0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, //  main().{.bgfx_F
	0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, // ragColor = vec4(
	0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x76, // gatherEyeColor(v
	0x65, 0x63, 0x32, 0x28, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2e, // ec2(v_texcoord0.
	0x78, 0x20, 0x2a, 0x20, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, // x * 2.0, v_texco
	0x6f, 0x72, 0x64, 0x30, 0x2e, 0x79, 0x29, 0x2c, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, // ord0.y), v_texco
	0x6f, 0x72, 0x64, 0x30, 0x2e, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x2c, 0x20, 0x31, // ord0.x < 0.5), 1
	0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x00,                                                 // .0);.}..
};
static const uint8_t fs_pp_stereo_sbs_glsl[10938] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa7, 0x2a, // FSH.o.><.......*
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x34, 0x34, 0x30, 0x0a, 0x6f, // ..#version 440.o
	0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, // ut vec4 bgfx_Fra
	0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, // gColor;.#define 
	0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x62, 0x67, 0x66, // gl_FragColor bgf
	0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x0a, 0x23, 0x64, 0x65, 0x66, // x_FragColor.#def
	0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x20, 0x20, 0x20, // ine texture2D   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x0a, 0x23, //        texture.#
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, // define texture2D
	0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // Lod       textur
	0x65, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, // eLod.#define tex
	0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ture2DGrad      
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, // textureGrad.#def
	0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, // ine texture2DPro
	0x6a, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, // jLod   texturePr
	0x6f, 0x6a, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, // ojLod.#define te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, 0x20, // xture2DProjGrad 
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, //  textureProjGrad
	0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // .#define texture
	0x43, 0x75, 0x62, 0x65, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, // CubeLod     text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, // ureLod.#define t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, // extureCubeGrad  
	0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, //   textureGrad.#d
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x33, 0x44, 0x20, // efine texture3D 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, //          texture
	0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // .#define texture
	0x32, 0x44, 0x4c, 0x6f, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x20, 0x74, 0x65, 0x78, 0x74, // 2DLodOffset text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x0a, 0x23, 0x64, 0x65, // ureLodOffset.#de
	0x66, 0x69, 0x6e, 0x65, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x69, // fine attribute i
	0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, // n.#define varyin
	0x67, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x62, 0x67, 0x66, // g in.#define bgf
	0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, // xShadow2D(_sampl
	0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, // er, _coord)     
	0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, // vec4_splat(textu
	0x72, 0x65, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, // re(_sampler, _co
	0x6f, 0x72, 0x64, 0x29, 0x20, 0x29, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x62, // ord) ).#define b
	0x67, 0x66, 0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x28, // gfxShadow2DProj(
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, // _sampler, _coord
	0x29, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, // ) vec4_splat(tex
	0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // tureProj(_sample
	0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x29, 0x0a, 0x76, 0x61, 0x72, // r, _coord) ).var
	0x79, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, // ying vec2 v_texc
	0x6f, 0x6f, 0x72, 0x64, 0x30, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, // oord0;.vec3 inst
	0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, // Mul(vec3 _vec, m
	0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // at3 _mtx) { retu
	0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, // rn ( (_vec) * (_
	0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, // mtx) ); }.vec3 i
	0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, // nstMul(mat3 _mtx
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, // , vec3 _vec) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, // eturn ( (_mtx) *
	0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, //  (_vec) ); }.vec
	0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, // 4 instMul(vec4 _
	0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, // vec, mat4 _mtx) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, // { return ( (_vec
	0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, // ) * (_mtx) ); }.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, // vec4 instMul(mat
	0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, // 4 _mtx, vec4 _ve
	0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, // c) { return ( (_
	0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, // mtx) * (_vec) );
	0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, 0x70, 0x28, 0x66, 0x6c, 0x6f, //  }.float rcp(flo
	0x61, 0x74, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // at _a) { return 
	0x31, 0x2e, 0x30, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, // 1.0/_a; }.vec2 r
	0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // cp(vec2 _a) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, // turn vec2(1.0)/_
	0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, // a; }.vec3 rcp(ve
	0x63, 0x33, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // c3 _a) { return 
	0x76, 0x65, 0x63, 0x33, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, // vec3(1.0)/_a; }.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x61, // vec4 rcp(vec4 _a
	0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, // ) { return vec4(
	0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, // 1.0)/_a; }.vec2 
	0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, // vec2_splat(float
	0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, //  _x) { return ve
	0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, // c2(_x, _x); }.ve
	0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, // c3 vec3_splat(fl
	0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // oat _x) { return
	0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, //  vec3(_x, _x, _x
	0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, // ); }.vec4 vec4_s
	0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, // plat(float _x) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, //  return vec4(_x,
	0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, //  _x, _x, _x); }.
	0x75, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, // uvec2 uvec2_spla
	0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // t(uint _x) { ret
	0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, // urn uvec2(_x, _x
	0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, // ); }.uvec3 uvec3
	0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, // _splat(uint _x) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, // { return uvec3(_
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, // x, _x, _x); }.uv
	0x65, 0x63, 0x34, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, // ec4 uvec4_splat(
	0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, // uint _x) { retur
	0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, // n uvec4(_x, _x, 
	0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, // _x, _x); }.mat4 
	0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, // mtxFromRows(vec4
	0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, //  _0, vec4 _1, ve
	0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, // c4 _2, vec4 _3).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, // {.return transpo
	0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, // se(mat4(_0, _1, 
	0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, // _2, _3) );.}.mat
	0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, // 4 mtxFromCols(ve
	0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, // c4 _0, vec4 _1, 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, // vec4 _2, vec4 _3
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x28, // ).{.return mat4(
	0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x3b, // _0, _1, _2, _3);
	0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, // .}.mat3 mtxFromR
	0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, // ows(vec3 _0, vec
	0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, // 3 _1, vec3 _2).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, // .return transpos
	0x65, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, // e(mat3(_0, _1, _
	0x32, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, // 2) );.}.mat3 mtx
	0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, // FromCols(vec3 _0
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // , vec3 _1, vec3 
	0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, // _2).{.return mat
	0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x3b, 0x0a, 0x7d, // 3(_0, _1, _2);.}
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, // .uniform vec4 u_
	0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // viewRect;.unifor
	0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x54, 0x65, 0x78, // m vec4 u_viewTex
	0x65, 0x6c, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, // el;.uniform mat4
	0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, //  u_view;.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x3b, //  mat4 u_invView;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, // .uniform mat4 u_
	0x70, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, // proj;.uniform ma
	0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, // t4 u_invProj;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, // iform mat4 u_vie
	0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, // wProj;.uniform m
	0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, // at4 u_invViewPro
	0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, // j;.uniform mat4 
	0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, 0x3b, 0x0a, 0x75, 0x6e, 0x69, // u_model[32];.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, // form mat4 u_mode
	0x6c, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, // lView;.uniform m
	0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x50, // at4 u_modelViewP
	0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, // roj;.uniform vec
	0x34, 0x20, 0x75, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x66, 0x34, 0x3b, 0x0a, 0x66, // 4 u_alphaRef4;.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // loat sqr( float 
	0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, // v).{.return v*v;
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, // .}.vec2 sqr( vec
	0x32, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, // 2 v).{.return v*
	0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x76, // v;.}.vec3 sqr( v
	0x65, 0x63, 0x33, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // ec3 v).{.return 
	0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6d, 0x75, 0x6c, 0x5f, // v*v;.}.vec3 mul_
	0x77, 0x31, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, // w1( vec3 v, mat4
	0x20, 0x6d, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2e, 0x78, //  m).{.return v.x
	0x2a, 0x6d, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x79, // *m[0].xyz + (v.y
	0x2a, 0x6d, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x7a, // *m[1].xyz + (v.z
	0x2a, 0x6d, 0x5b, 0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x6d, 0x5b, 0x33, 0x5d, // *m[2].xyz + m[3]
	0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // .xyz));.}.float 
	0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, // acos_approx_divP
	0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, // I( float v).{.fl
	0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, // oat x = abs(v);.
	0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, // if(1. - x <= 0.0
	0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, // 0006103515625).r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, // eturn (v >= 0.) 
	0x3f, 0x20, 0x30, 0x2e, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // ? 0. : 1.;.float
	0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, //  res = ((-0.1559
	0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, // 72/3.14159265358
	0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, // 9793238462643383
	0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, // 2795) * x + (1.5
	0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, // 6467/3.141592653
	0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, // 5897932384626433
	0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, // 832795) ) * sqrt
	0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // (1. - x);.return
	0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x72, 0x65, 0x73, //  (v >= 0.) ? res
	0x20, 0x3a, 0x20, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, //  : 1. - res;.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, // loat atan2_appro
	0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // x_div2PI( float 
	0x79, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, // y, float x).{.fl
	0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, // oat abs_y = abs(
	0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, // y);.float abs_x 
	0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x78, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x61, 0x62, 0x73, // = abs(x);.if(abs
	0x5f, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, // _x <= 0.00006103
	0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x20, 0x26, 0x26, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, // 515625 && abs_y 
	0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, // <= 0.00006103515
	0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x30, 0x2e, 0x3b, 0x0a, // 625).return 0.;.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, // float r = (abs_x
	0x20, 0x2d, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x61, 0x62, 0x73, //  - abs_y) / (abs
	0x5f, 0x78, 0x20, 0x2b, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, // _x + abs_y);.flo
	0x61, 0x74, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, // at angle = ((x <
	0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x28, 0x33, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x20, 0x3a, //  0.) ? (3./8.) :
	0x20, 0x28, 0x31, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x29, 0x0a, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x32, //  (1./8.)).+ (0.2
	0x31, 0x31, 0x38, 0x36, 0x38, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, // 11868 /(2.*3.141
	0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, // 5926535897932384
	0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, // 626433832795) * 
	0x72, 0x20, 0x2a, 0x20, 0x72, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x39, 0x38, 0x37, 0x33, 0x30, 0x35, // r * r - 0.987305
	0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, //  /(2.*3.14159265
	0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, // 3589793238462643
	0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x78, 0x20, // 3832795)) * ((x 
	0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x72, 0x20, 0x3a, 0x20, 0x72, 0x29, 0x3b, // < 0.) ? -r : r);
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x79, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, // .return (y < 0.)
	0x20, 0x3f, 0x20, 0x2d, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3a, 0x20, 0x61, 0x6e, 0x67, 0x6c, //  ? -angle : angl
	0x65, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x73, 0x69, 0x6e, 0x5f, // e;.}.float asin_
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, // approx_divPI( fl
	0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, // oat v).{.float x
	0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, //  = abs(v);.if(1.
	0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, //  - x <= 0.000061
	0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // 03515625).return
	0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, //  (v >= 0.) ? 0.5
	0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, //  : -0.5;.float r
	0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, // es = ((-0.155972
	0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, // /3.1415926535897
	0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, // 9323846264338327
	0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, // 95) * x + (1.564
	0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, // 67/3.14159265358
	0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, // 9793238462643383
	0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, // 2795) ) * sqrt(1
	0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // . - x);.return (
	0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x2d, // v >= 0.) ? 0.5 -
	0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x65, //  res : -0.5 + re
	0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x61, 0x79, 0x5f, 0x74, 0x6f, // s;.}.vec2 ray_to
	0x5f, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, // _equirectangular
	0x5f, 0x75, 0x76, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x61, 0x79, 0x29, 0x0a, 0x7b, // _uv( vec3 ray).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x0a, 0x30, 0x2e, // .return vec2(.0.
	0x35, 0x20, 0x2b, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, // 5 + atan2_approx
	0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x79, 0x2c, 0x20, 0x72, // _div2PI(ray.y, r
	0x61, 0x79, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, // ay.x),.acos_appr
	0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x7a, 0x29, 0x29, // ox_divPI(ray.z))
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, // ;.}.float InvsRG
	0x42, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, // B( float color).
	0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, // {.if (color <= 0
	0x2e, 0x30, 0x34, 0x30, 0x34, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, // .04045).return c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x32, 0x2e, 0x39, // olor * (1.0/12.9
	0x32, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // 2);.else.return 
	0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, // pow(color * (1.0
	0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x35, 0x35, // /1.055) + (0.055
	0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x29, 0x3b, 0x0a, 0x7d, // /1.055), 2.4);.}
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, // .float InvRec709
	0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, // ( float color).{
	0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, // .if (color <= 0.
	0x30, 0x38, 0x31, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // 081).return colo
	0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x34, 0x2e, 0x35, 0x29, 0x3b, 0x0a, 0x65, // r * (1.0/4.5);.e
	0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, // lse.return pow(c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x39, // olor * (1.0/1.09
	0x39, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x2f, 0x31, 0x2e, 0x30, 0x39, // 9) + (0.099/1.09
	0x39, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x3b, 0x0a, 0x7d, // 9), 1.0/0.45);.}
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, // .float InvGamma(
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, //  float color).{.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, // return InvsRGB(c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, // olor);.}.vec3 In
	0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, // vGamma( vec3 col
	0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, // or).{.return vec
	0x33, 0x28, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // 3(InvGamma(color
	0x2e, 0x78, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, // .x),InvGamma(col
	0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, // or.y),InvGamma(c
	0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, // olor.z));.}.vec3
	0x20, 0x49, 0x6e, 0x76, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, //  InvToneMap( vec
	0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // 3 color).{.float
	0x20, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x30, 0x2e, 0x35, 0x2f, 0x30, //  inv_2bh = 0.5/0
	0x2e, 0x32, 0x35, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x68, 0x20, 0x3d, 0x20, // .25;.float bh = 
	0x34, 0x2e, 0x30, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2d, 0x20, 0x32, 0x2e, 0x30, 0x3b, 0x0a, // 4.0*0.25 - 2.0;.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2d, 0x20, // return (color - 
	0x31, 0x2e, 0x30, 0x20, 0x2b, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // 1.0 + sqrt(color
	0x2a, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x20, 0x62, 0x68, 0x29, 0x20, 0x2b, 0x20, // *(color + bh) + 
	0x31, 0x2e, 0x30, 0x29, 0x29, 0x2a, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x3b, 0x0a, 0x7d, // 1.0))*inv_2bh;.}
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x20, 0x66, 0x6c, 0x6f, // .float sRGB( flo
	0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, // at f).{.float s;
	0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x33, 0x31, // .if (f <= 0.0031
	0x33, 0x30, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x20, 0x2a, // 308).s = 12.92 *
	0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, //  f;.else.s = 1.0
	0x35, 0x35, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, // 55 * pow(f, 1.0/
	0x32, 0x2e, 0x34, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x3b, 0x0a, 0x72, 0x65, // 2.4) - 0.055;.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // turn s;.}.float 
	0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, // Rec709( float f)
	0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, // .{.float s;.if (
	0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, // f <= 0.018).s = 
	0x34, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, // 4.5 * f;.else.s 
	0x3d, 0x20, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, // = 1.099 * pow(f,
	0x20, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x3b, 0x0a, //  0.45) - 0.099;.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // return s;.}.floa
	0x74, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // t FBGamma( float
	0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, //  color).{.return
	0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, //  sRGB(color);.}.
	0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, // vec2 FBGamma( ve
	0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, // c2 color).{.retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, // rn vec2(FBGamma(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, // color.x),FBGamma
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // (color.y));.}.ve
	0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, // c3 FBGamma( vec3
	0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, //  color).{.return
	0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, //  vec3(FBGamma(co
	0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, // lor.x),FBGamma(c
	0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, // olor.y),FBGamma(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // color.z));.}.vec
	0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x32, 0x32, 0x28, 0x20, 0x76, 0x65, 0x63, // 3 FBGamma22( vec
	0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // 3 color).{.retur
	0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // n vec3(pow(color
	0x2e, 0x78, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, // .x, 1.0/2.2),pow
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, // (color.y, 1.0/2.
	0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x2c, 0x20, // 2),pow(color.z, 
	0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // 1.0/2.2));.}.flo
	0x61, 0x74, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x66, 0x6c, // at FBToneMap( fl
	0x6f, 0x61, 0x74, 0x20, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // oat l).{.return 
	0x6c, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, // l * ((l*0.25 + 1
	0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, // .0) / (l + 1.0))
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, // ;.}.vec2 FBToneM
	0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, // ap( vec2 color).
	0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, // {.float l = dot(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, // color,vec2(0.176
	0x32, 0x30, 0x34, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, // 204+0.0108109*0.
	0x35, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, // 5,0.812985+0.010
	0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // 8109*0.5));.retu
	0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, // rn color * ((l*0
	0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, // .25 + 1.0) / (l 
	0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // + 1.0));.}.vec3 
	0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // FBToneMap( vec3 
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, // color).{.float l
	0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, //  = dot(color,vec
	0x33, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, // 3(0.176204,0.812
	0x39, 0x38, 0x35, 0x2c, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x29, 0x29, 0x3b, // 985,0.0108109));
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, // .return color * 
	0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, // ((l*0.25 + 1.0) 
	0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // / (l + 1.0));.}.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x28, 0x20, 0x76, // vec4 Additive( v
	0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // ec4 cBase, vec4 
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, // cBlend, float pe
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // rcent).{.return 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2b, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, // cBase + cBlend*p
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, // ercent;.}.vec3 S
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, // creen ( vec3 cBa
	0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, // se, vec3 cBlend)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, // .{.return 1.0 - 
	0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, // (1.0 - cBase) * 
	0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, // (1.0 - cBlend);.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x20, // }.vec4 Screen ( 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // vec4 cBase, vec4
	0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, //  cBlend).{.retur
	0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, // n 1.0 - (1.0 - c
	0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, // Base) * (1.0 - c
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, // Blend);.}.vec3 S
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // creenHDR ( vec3 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, // cBase, vec3 cBle
	0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, // nd).{.return max
	0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, // (1.0 - (1.0 - cB
	0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, // ase) * (1.0 - cB
	0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x2c, 0x30, // lend), vec3(0.,0
	0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, // .,0.));.}.vec4 S
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // creenHDR ( vec4 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, // cBase, vec4 cBle
	0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, // nd).{.return max
	0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, // (1.0 - (1.0 - cB
	0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, // ase) * (1.0 - cB
	0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, // lend), vec4(0.,0
	0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // .,0.,0.));.}.vec
	0x34, 0x20, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, // 4 Multiply ( vec
	0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // 4 cBase, vec4 cB
	0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, // lend, float perc
	0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, // ent).{.return cB
	0x61, 0x73, 0x65, 0x20, 0x2a, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, // ase * cBlend*per
	0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, // cent;.}.vec4 Ove
	0x72, 0x6c, 0x61, 0x79, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, // rlay ( vec4 cBas
	0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, // e, vec4 cBlend).
	0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, // {.vec4 cNew = st
	0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, // ep(0.5, cBase);.
	0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, // cNew = mix(cBase
	0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, // *cBlend*2.0, 1.0
	0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, // -2.0*(1.0-cBase)
	0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, // *(1.0-cBlend), c
	0x4e, 0x65, 0x77, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, // New);.return cNe
	0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, // w;.}.vec4 Overla
	0x79, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, // yHDR ( vec4 cBas
	0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, // e, vec4 cBlend).
	0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, // {.vec4 cNew = st
	0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, // ep(0.5, cBase);.
	0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x6d, 0x69, 0x78, 0x28, 0x63, // cNew = max(mix(c
	0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, // Base*cBlend*2.0,
	0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, //  1.0-2.0*(1.0-cB
	0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, // ase)*(1.0-cBlend
	0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, // ), cNew), vec4(0
	0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, // .,0.,0.,0.));.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // turn cNew;.}.vec
	0x33, 0x20, 0x63, 0x6f, 0x73, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, // 3 cos_hemisphere
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x29, // _sample( vec2 t)
	0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x68, 0x69, 0x20, 0x3d, 0x20, 0x74, // .{.float phi = t
	0x2e, 0x79, 0x20, 0x2a, 0x20, 0x28, 0x32, 0x2e, 0x30, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, // .y * (2.0*3.1415
	0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, // 9265358979323846
	0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x3b, 0x0a, 0x66, 0x6c, // 26433832795);.fl
	0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, // oat cosTheta = s
	0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, // qrt(1.0 - t.x);.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, // float sinTheta =
	0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, //  sqrt(t.x);.floa
	0x74, 0x20, 0x73, 0x70, 0x2c, 0x63, 0x70, 0x3b, 0x0a, 0x7b, 0x73, 0x70, 0x3d, 0x73, 0x69, 0x6e, // t sp,cp;.{sp=sin
	0x28, 0x70, 0x68, 0x69, 0x29, 0x3b, 0x63, 0x70, 0x3d, 0x63, 0x6f, 0x73, 0x28, 0x70, 0x68, 0x69, // (phi);cp=cos(phi
	0x29, 0x3b, 0x7d, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, // );};.return vec3
	0x28, 0x63, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, // (cp * sinTheta, 
	0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x73, 0x70, 0x20, 0x2a, 0x20, 0x73, // cosTheta, sp * s
	0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, // inTheta);.}.vec3
	0x20, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, //  rotate_to_vecto
	0x72, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, // r_upper( vec3 ve
	0x63, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x29, 0x0a, // c, vec3 normal).
	0x7b, 0x0a, 0x69, 0x66, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x3e, 0x20, // {.if(normal.y > 
	0x2d, 0x30, 0x2e, 0x39, 0x39, 0x39, 0x39, 0x39, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // -0.99999).{.floa
	0x74, 0x20, 0x68, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x28, 0x31, 0x2e, 0x30, 0x2b, 0x6e, // t h = 1.0/(1.0+n
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // ormal.y);.float 
	0x68, 0x7a, 0x20, 0x3d, 0x20, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x3b, // hz = h*normal.z;
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x3d, 0x20, 0x68, 0x7a, 0x2a, // .float hzx = hz*
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // normal.x;.return
	0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x28, //  vec3(.vec.x * (
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, // normal.y+hz*norm
	0x61, 0x6c, 0x2e, 0x7a, 0x29, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, // al.z) + vec.y * 
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, // normal.x - vec.z
	0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, //  * hzx,.vec.y * 
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, // normal.y - vec.x
	0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, //  * normal.x - ve
	0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x2c, 0x0a, // c.z * normal.z,.
	0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, // vec.y * normal.z
	0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x2b, //  - vec.x * hzx +
	0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, //  vec.z * (normal
	0x2e, 0x79, 0x2b, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x2a, 0x6e, 0x6f, // .y+h*normal.x*no
	0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, // rmal.x));.}.else
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x2d, 0x76, 0x65, 0x63, 0x3b, 0x0a, 0x7d, 0x0a, //  return -vec;.}.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, // uniform vec4 Ste
	0x72, 0x65, 0x6f, 0x5f, 0x53, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x0a, // reo_Saturation;.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, // uniform vec4 Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, // reo_MS_ZPD_YAxis
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // ;.uniform sample
	0x72, 0x32, 0x44, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, // r2D tex_stereo_f
	0x62, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, // b;.uniform sampl
	0x65, 0x72, 0x32, 0x44, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // er2D tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, // depth;.uniform v
	0x65, 0x63, 0x34, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, // ec4 w_h_height;.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, // vec3 gatherEyeCo
	0x6c, 0x6f, 0x72, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, // lor(vec2 u, bool
	0x20, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x20, //  isLeft).{.bool 
	0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // yaxis = (Stereo_
	0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x7a, 0x20, 0x21, // MS_ZPD_YAxis.z !
	0x3d, 0x20, 0x30, 0x2e, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x4d, 0x61, 0x78, // = 0.);.float Max
	0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, // Separation = (St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, // ereo_MS_ZPD_YAxi
	0x73, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, // s.x);.if (isLeft
	0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, // ).{.float lminDe
	0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, // pth = min(min(te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, // xtureLod(tex_ste
	0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, // reo_depth, u + (
	0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, // yaxis ? vec2(0.0
	0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // , 0.500 * MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // aration) : vec2(
	0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, // 0.500 * MaxSepar
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, // ation, 0.0)), 0.
	0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, // 0).x,.textureLod
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, // (tex_stereo_dept
	0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, // h, u + (yaxis ? 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, // vec2(0.0, 0.666 
	0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, // * MaxSeparation)
	0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, //  : vec2(0.666 * 
	0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, // MaxSeparation, 0
	0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, // .0)), 0.0).x),.t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // extureLod(tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, // ereo_depth, u + 
	0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, // (yaxis ? vec2(0.
	0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, // 0, MaxSeparation
	0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // ) : vec2( MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, // aration, 0.0)), 
	0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, // 0.0).x);.float l
	0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, // parallax = max(0
	0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, // .0, w_h_height.w
	0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, //  + MaxSeparation
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, //  * (1.0 - 1.0 / 
	0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, // (0.5 + lminDepth
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, //  * (1.0 / (Stere
	0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, // o_MS_ZPD_YAxis.y
	0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, // ) - 0.5))));.ret
	0x75, 0x72, 0x6e, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, // urn textureLod(t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, // ex_stereo_fb, u 
	0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // + (yaxis ? vec2(
	0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, // 0.0, -lparallax)
	0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, //  : vec2(lparalla
	0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, // x, 0.0)), 0.0).x
	0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, // yz;.}.else.{.flo
	0x61, 0x74, 0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, // at rminDepth = m
	0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, // in(min(textureLo
	0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, // d(tex_stereo_dep
	0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, // th, u - (yaxis ?
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, //  vec2(0.0, 0.500
	0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, //  * MaxSeparation
	0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, // ) : vec2(0.500 *
	0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, //  MaxSeparation, 
	0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, // 0.0)), 0.0).x,.t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // extureLod(tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, // ereo_depth, u - 
	0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, // (yaxis ? vec2(0.
	0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, // 0, 0.666 * MaxSe
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, // paration) : vec2
	0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, // (0.666 * MaxSepa
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, // ration, 0.0)), 0
	0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, // .0).x),.textureL
	0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, // od(tex_stereo_de
	0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, // pth, u - (yaxis 
	0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, // ? vec2(0.0, MaxS
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, // eparation) : vec
	0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, // 2( MaxSeparation
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, // , 0.0)), 0.0).x)
	0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, // ;.float rparalla
	0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, // x = max(0.0, w_h
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, // _height.w + MaxS
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, // eparation * (1.0
	0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, //  - 1.0 / (0.5 + 
	0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, // rminDepth * (1.0
	0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, //  / (Stereo_MS_ZP
	0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, // D_YAxis.y) - 0.5
	0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x65, 0x78, // ))));.return tex
	0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // tureLod(tex_ster
	0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, // eo_fb, u - (yaxi
	0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x72, // s ? vec2(0.0, -r
	0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, // parallax) : vec2
	0x28, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // (rparallax, 0.0)
	0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x7d, // ), 0.0).xyz;.}.}
	0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, // .void gatherLeft
	0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x28, 0x76, 0x65, 0x63, 0x32, // RightColors(vec2
	0x20, 0x75, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x63, 0x6f, //  u, out vec3 lco
	0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x6f, 0x6c, // l, out vec3 rcol
	0x29, 0x0a, 0x7b, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3d, // ).{.bool yaxis =
	0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, //  (Stereo_MS_ZPD_
	0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x7a, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x3b, 0x0a, // YAxis.z != 0.);.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // float MaxSeparat
	0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, // ion = (Stereo_MS
	0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, // _ZPD_YAxis.x);.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, // loat lminDepth =
	0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, //  min(min(texture
	0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, // Lod(tex_stereo_d
	0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, // epth, u + (yaxis
	0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, //  ? vec2(0.0, 0.5
	0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // 00 * MaxSeparati
	0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, // on) : vec2(0.500
	0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, //  * MaxSeparation
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, // , 0.0)), 0.0).x,
	0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, // .textureLod(tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, // stereo_depth, u 
	0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // + (yaxis ? vec2(
	0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, // 0.0, 0.666 * Max
	0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, // Separation) : ve
	0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, // c2(0.666 * MaxSe
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, // paration, 0.0)),
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, //  0.0).x),.textur
	0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // eLod(tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, // depth, u + (yaxi
	0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, // s ? vec2(0.0, Ma
	0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, // xSeparation) : v
	0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // ec2( MaxSeparati
	0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, // on, 0.0)), 0.0).
	0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, // x);.float lparal
	0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, // lax = max(0.0, w
	0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, // _h_height.w + Ma
	0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, // xSeparation * (1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, // .0 - 1.0 / (0.5 
	0x2b, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, // + lminDepth * (1
	0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, // .0 / (Stereo_MS_
	0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, // ZPD_YAxis.y) - 0
	0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x6c, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, // .5))));.lcol = t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // extureLod(tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, // ereo_fb, u + (ya
	0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, // xis ? vec2(0.0, 
	0x2d, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, // -lparallax) : ve
	0x63, 0x32, 0x28, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, // c2(lparallax, 0.
	0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x66, // 0)), 0.0).xyz;.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, // loat rminDepth =
	0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, //  min(min(texture
	0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, // Lod(tex_stereo_d
	0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, // epth, u - (yaxis
	0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, //  ? vec2(0.0, 0.5
	0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // 00 * MaxSeparati
	0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, // on) : vec2(0.500
	0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, //  * MaxSeparation
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, // , 0.0)), 0.0).x,
	0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, // .textureLod(tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, // stereo_depth, u 
	0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // - (yaxis ? vec2(
	0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, // 0.0, 0.666 * Max
	0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, // Separation) : ve
	0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, // c2(0.666 * MaxSe
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, // paration, 0.0)),
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, //  0.0).x),.textur
	0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // eLod(tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, // depth, u - (yaxi
	0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, // s ? vec2(0.0, Ma
	0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, // xSeparation) : v
	0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // ec2( MaxSeparati
	0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, // on, 0.0)), 0.0).
	0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, // x);.float rparal
	0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, // lax = max(0.0, w
	0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, // _h_height.w + Ma
	0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, // xSeparation * (1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, // .0 - 1.0 / (0.5 
	0x2b, 0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, // + rminDepth * (1
	0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, // .0 / (Stereo_MS_
	0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, // ZPD_YAxis.y) - 0
	0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, // .5))));.rcol = t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // extureLod(tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, // ereo_fb, u - (ya
	0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, // xis ? vec2(0.0, 
	0x2d, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, // -rparallax) : ve
	0x63, 0x32, 0x28, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, // c2(rparallax, 0.
	0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, // 0)), 0.0).xyz;.}
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, // .uniform mat4 St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, // ereo_LeftMat;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // iform mat4 Stere
	0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // o_RightMat;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // orm vec4 Stereo_
	0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, // LeftLuminance_Ga
	0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, // mma;.uniform vec
	0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // 4 Stereo_RightLu
	0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, // minance_DynDesat
	0x3b, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x65, // ;.void DynamicDe
	0x73, 0x61, 0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, 0x63, // satAnaglyph( vec
	0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, // 3 lCol, vec3 rCo
	0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x44, 0x65, 0x73, // l, out vec3 lDes
	0x61, 0x74, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // atCol, out vec3 
	0x72, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, // rDesatCol).{.flo
	0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, // at left2LeftLum 
	0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, // = dot(lCol, Ster
	0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, // eo_LeftLuminance
	0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, // _Gamma.xyz);.flo
	0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, // at left2RightLum
	0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, //  = dot(lCol, Ste
	0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, // reo_RightLuminan
	0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, // ce_DynDesat.xyz)
	0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, // ;.float right2Le
	0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, // ftLum = dot(rCol
	0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // , Stereo_LeftLum
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, // inance_Gamma.xyz
	0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, // );.float right2R
	0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, // ightLum = dot(rC
	0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, // ol, Stereo_Right
	0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, // Luminance_DynDes
	0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, // at.xyz);.float l
	0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, // eftLum = left2Le
	0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, // ftLum + left2Rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, // htLum;.float rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, // htLum = right2Le
	0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, // ftLum + right2Ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, // ghtLum;.float le
	0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // ftDesat = Stereo
	0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, // _RightLuminance_
	0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, // DynDesat.w * abs
	0x28, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, // ((left2LeftLum -
	0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, //  left2RightLum) 
	0x2f, 0x20, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, // / (leftLum + 0.0
	0x30, 0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, // 001));.float rig
	0x68, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // htDesat = Stereo
	0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, // _RightLuminance_
	0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, // DynDesat.w * abs
	0x28, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, // ((right2LeftLum 
	0x2d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, // - right2RightLum
	0x29, 0x20, 0x2f, 0x20, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, // ) / (rightLum + 
	0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, // 0.0001));.lDesat
	0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // Col = mix(lCol, 
	0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, // vec3_splat(leftL
	0x75, 0x6d, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, // um), leftDesat);
	0x0a, 0x72, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, // .rDesatCol = mix
	0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, // (rCol, vec3_spla
	0x74, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, 0x72, 0x69, 0x67, // t(rightLum), rig
	0x68, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, // htDesat);.}.vec3
	0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, //  LinearAnaglyph(
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, //  vec3 lCol, vec3
	0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, //  rCol).{.vec3 co
	0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x6c, // lor = (( (vec4(l
	0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, // Col, 1.)) * (Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x20, 0x2b, // reo_LeftMat) ) +
	0x20, 0x28, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, //  ( (vec4(rCol, 1
	0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, // .)) * (Stereo_Ri
	0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, // ghtMat) )).rgb;.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x7d, 0x0a, // return color;.}.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, // uniform vec4 Ste
	0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, // reo_DeghostGamma
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, // ;.uniform mat4 S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, // tereo_DeghostFil
	0x74, 0x65, 0x72, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, // ter;.vec3 Deghos
	0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // tAnaglyph( vec3 
	0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, // lCol, vec3 rCol)
	0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, // .{.vec3 color = 
	0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, // LinearAnaglyph(l
	0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // Col, rCol);.retu
	0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, // rn ( (pow(color,
	0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, //  Stereo_DeghostG
	0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x72, 0x67, 0x62, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x6d, 0x61, // amma.rgb)) * (ma
	0x74, 0x33, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, // t3(Stereo_Deghos
	0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, // tFilter[0].xyz, 
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, // Stereo_DeghostFi
	0x6c, 0x74, 0x65, 0x72, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, // lter[1].xyz, Ste
	0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, // reo_DeghostFilte
	0x72, 0x5b, 0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // r[2].xyz)) );.}.
	0x76, 0x6f, 0x69, 0x64, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x67, 0x6c, // void main().{.gl
	0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, // _FragColor = vec
	0x34, 0x28, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, // 4(gatherEyeColor
	0x28, 0x76, 0x65, 0x63, 0x32, 0x28, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, // (vec2(v_texcoord
	0x30, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, // 0.x * 2.0, v_tex
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2e, 0x79, 0x29, 0x2c, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, // coord0.y), v_tex
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2e, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x2c, // coord0.x < 0.5),
	0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x00,                                     //  1.0);.}..
};
static const uint8_t fs_pp_stereo_sbs_dx11[2507] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x13, 0x53, // FSH.o.><.......S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, // tereo_MS_ZPD_YAx
	0x69, 0x73, 0x12, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x77, 0x5f, 0x68, // is...........w_h
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, // _height.........
	0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x30, // ..tex_stereo_fb0
	0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // ..........tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x30, 0x01, 0x01, 0x00, 0x01, 0x00, // ereo_depth0.....
	0x00, 0x00, 0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // .....tex_stereo_
	0x66, 0x62, 0x30, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x74, 0x65, 0x78, // fb0..........tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x30, 0x01, 0x01, // _stereo_depth0..
	0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x09, 0x00, 0x00, 0x44, 0x58, 0x42, 0x43, 0x55, // ...........DXBCU
	0xf5, 0x38, 0xef, 0x03, 0xf6, 0x07, 0x22, 0xbf, 0x27, 0x17, 0x4e, 0x38, 0x1f, 0x69, 0x44, 0x01, // .8....".'.N8.iD.
	0x00, 0x00, 0x00, 0x1c, 0x09, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x84, // ...........,....
	0x00, 0x00, 0x00, 0xb8, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x4e, 0x50, 0x00, 0x00, 0x00, 0x02, // .......ISGNP....
	0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, // .......8........
	0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x44, // ...............D
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, // .......SV_POSITI
	0x4f, 0x4e, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0xab, 0xab, 0xab, 0x4f, // ON.TEXCOORD....O
	0x53, 0x47, 0x4e, 0x2c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x20, // SGN,........... 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, // .......SV_TARGET
	0x00, 0xab, 0xab, 0x53, 0x48, 0x45, 0x58, 0x5c, 0x08, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x17, // ...SHEX....P....
	0x02, 0x00, 0x00, 0x6a, 0x08, 0x00, 0x01, 0x59, 0x00, 0x00, 0x04, 0x46, 0x8e, 0x20, 0x00, 0x00, // ...j...Y...F. ..
	0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x03, 0x00, 0x60, 0x10, 0x00, 0x00, // .......Z....`...
	0x00, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x03, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x58, // ...Z....`......X
	0x18, 0x00, 0x04, 0x00, 0x70, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x55, 0x00, 0x00, 0x58, // ....p......UU..X
	0x18, 0x00, 0x04, 0x00, 0x70, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x55, 0x55, 0x00, 0x00, 0x62, // ....p......UU..b
	0x10, 0x00, 0x03, 0x32, 0x10, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x03, 0xf2, // ...2.......e....
	0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x02, 0x03, 0x00, 0x00, 0x00, 0x31, //  ......h.......1
	0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x10, 0x10, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x39, 0x00, 0x00, 0x08, 0x22, // ....@.....?9..."
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .......*. ......
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x04, 0x03, 0x0a, // ....@...........
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x08, 0x52, 0x00, 0x10, 0x00, 0x01, // .......6...R....
	0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ....@...........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x0b, 0xa2, 0x00, 0x10, 0x00, 0x01, // .......8........
	0x00, 0x00, 0x00, 0x06, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, // ..... ..........
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0xfa, // @.........?.....
	0x7e, 0x2a, 0x3f, 0x37, 0x00, 0x00, 0x09, 0xf2, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x56, // ~*?7...........V
	0x05, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x16, // .......F........
	0x0b, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x0c, 0xf2, 0x00, 0x10, 0x00, 0x01, // .......2........
	0x00, 0x00, 0x00, 0x46, 0x14, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, // ...F........@...
	0x00, 0x00, 0x40, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x80, 0x3f, 0x46, // ..@...?...@...?F
	0x0e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, // .......H.......C
	0x55, 0x15, 0x00, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x01, // U..........F....
	0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, // ...F~.......`...
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, // ....@......H....
	0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x42, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe6, // ...CU..B........
	0x0a, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x96, 0x7c, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, // ........|.......
	0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, // `.......@......3
	0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x00, // ...........*....
	0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x08, 0x52, // ...........6...R
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........@.......
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x06, 0x22, // ...........6..."
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ......... ......
	0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x09, 0xc2, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x56, // ...7...........V
	0x05, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x04, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x56, // ...............V
	0x01, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x0c, 0xc2, 0x00, 0x10, 0x00, 0x00, // .......2........
	0x00, 0x00, 0x00, 0x06, 0x14, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, // ............@...
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x80, 0x3f, 0xa6, // ..........@...?.
	0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, // .......H.......C
	0x55, 0x15, 0x00, 0x42, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x00, // U..B............
	0x00, 0x00, 0x00, 0x96, 0x7c, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, // ....|.......`...
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x07, 0x12, // ....@......3....
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, // .......*........
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x0b, 0x42, 0x00, 0x10, 0x00, 0x00, // ...........B....
	0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, // ....@.....?...?.
	0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x1a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ..?...?.. ......
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x42, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, // .......B.......*
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0x32, // ........@......2
	0x00, 0x00, 0x09, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, // ...*........@...
	0x00, 0x00, 0x3f, 0x0e, 0x00, 0x00, 0x0a, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, // ..?.............
	0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, // @.....?...?...?.
	0x00, 0x80, 0x3f, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x12, // ..?.............
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x00, // ...........A....
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x32, 0x00, 0x00, 0x0b, 0x12, // ....@.....?2....
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ......... ......
	0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, 0x80, 0x20, 0x00, 0x00, // ...........:. ..
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x01, // .......4........
	0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, // ............@...
	0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x06, 0x82, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, // ...6............
	0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x22, // ...A.......6..."
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, // ........@......7
	0x00, 0x00, 0x09, 0x52, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x56, 0x05, 0x10, 0x00, 0x00, // ...R.......V....
	0x00, 0x00, 0x00, 0xa6, 0x0b, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x01, 0x10, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x0c, 0x52, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, // ...2...R........
	0x11, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, // ........@.....@.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x06, 0x02, 0x10, 0x00, 0x00, // ......?.........
	0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0xd2, // ...H.......CU...
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, // ................
	0x79, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, // y.......`.......
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x01, 0x36, 0x00, 0x00, 0x08, 0x52, // @..........6...R
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........@.......
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x0b, 0xa2, // ...........8....
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ......... ......
	0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, // ....@.........?.
	0x00, 0x00, 0x00, 0xfa, 0x7e, 0x2a, 0x3f, 0x37, 0x00, 0x00, 0x09, 0xf2, 0x00, 0x10, 0x00, 0x01, // ....~*?7........
	0x00, 0x00, 0x00, 0x56, 0x05, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x01, // ...V.......F....
	0x00, 0x00, 0x00, 0x16, 0x0b, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x0d, 0xf2, // ...........2....
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x14, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, // .......F........
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x00, 0x40, 0x00, // @.....@...?...@.
	0x00, 0x80, 0x3f, 0x46, 0x0e, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x48, // ..?F...A.......H
	0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x12, 0x00, 0x10, 0x00, 0x01, // .......CU.......
	0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, 0x01, // ...F.......F~...
	0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, // ....`.......@...
	0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x22, // ...H.......CU.."
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x16, // ................
	0x7e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, // ~.......`.......
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x01, // @......3........
	0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x08, 0x52, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, // ...6...R........
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // @...............
	0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x06, 0x22, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0a, // ...6..."........
	0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x09, 0x62, // . .........7...b
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x56, 0x05, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, // .......V........
	0x01, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x56, 0x04, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x32, // .......V.......2
	0x00, 0x00, 0x0d, 0x62, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x11, 0x10, 0x00, 0x01, // ...b............
	0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, // ....@.........@.
	0x00, 0x80, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x56, 0x06, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x01, // ..?....V...A....
	0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x22, // ...H.......CU.."
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x96, 0x05, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x16, // ................
	0x7e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, // ~.......`.......
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x01, // @......3........
	0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x0b, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, // ......."........
	0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, // @.....?...?...?.
	0x00, 0x80, 0x3f, 0x1a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ..?.. ..........
	0x00, 0x00, 0x07, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, // ..."............
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0x32, 0x00, 0x00, 0x09, 0x12, // ....@......2....
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, // ................
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x0e, // ........@.....?.
	0x00, 0x00, 0x0a, 0x12, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, // ............@...
	0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x0a, // ..?...?...?...?.
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x12, 0x00, 0x10, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, // .......A........
	0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x32, 0x00, 0x00, 0x0b, 0x12, 0x00, 0x10, 0x00, 0x01, // @.....?2........
	0x00, 0x00, 0x00, 0x0a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, // ..... ..........
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, // .......:. ......
	0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, // ...4............
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, // ........@......6
	0x00, 0x00, 0x06, 0x82, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x80, 0x41, // ...............A
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x22, 0x00, 0x10, 0x00, 0x01, // .......6..."....
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x09, 0x32, // ....@......7...2
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x56, 0x05, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe6, // .......V........
	0x0a, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, // .......F.......2
	0x00, 0x00, 0x0d, 0x32, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x10, 0x10, 0x00, 0x01, // ...2.......F....
	0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x80, 0x3f, 0x00, // ....@.....@...?.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x01, // .......F...A....
	0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0xd2, // ...H.......CU...
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0xc6, // .......F........
	0x79, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, // y.......`.......
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x01, 0x36, 0x00, 0x00, 0x05, 0x72, // @..........6...r
	0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x03, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, //  ..............6
	0x00, 0x00, 0x05, 0x82, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, // .... .......@...
	0x00, 0x80, 0x3f, 0x3e, 0x00, 0x00, 0x01, 0x00, 0x00, 0x20, 0x00,                               // ..?>..... .
};
static const uint8_t fs_pp_stereo_sbs_spv[4172] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x13, 0x53, // FSH.o.><.......S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, // tereo_MS_ZPD_YAx
	0x69, 0x73, 0x12, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x77, 0x5f, 0x68, // is...........w_h
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x01, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, // _height.........
	0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x30, // ..tex_stereo_fb0
	0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x02, 0x22, 0x00, 0x10, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // ......."..tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x30, 0x00, 0x03, 0x00, 0x00, 0x00, // ereo_depth0.....
	0x00, 0x02, 0x22, 0x00, 0xd0, 0x0f, 0x00, 0x00, 0x03, 0x02, 0x23, 0x07, 0x00, 0x00, 0x01, 0x00, // ..".......#.....
	0x0b, 0x00, 0x08, 0x00, 0x9e, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x02, 0x00, // ................
	0x01, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, 0x4c, 0x53, 0x4c, // ............GLSL
	0x2e, 0x73, 0x74, 0x64, 0x2e, 0x34, 0x35, 0x30, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x03, 0x00, // .std.450........
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x07, 0x00, 0x04, 0x00, 0x00, 0x00, // ................
	0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x29, 0x01, 0x00, 0x00, // ....main....)...
	0x34, 0x01, 0x00, 0x00, 0x10, 0x00, 0x03, 0x00, 0x04, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, // 4...............
	0x03, 0x00, 0x03, 0x00, 0x05, 0x00, 0x00, 0x00, 0xf4, 0x01, 0x00, 0x00, 0x05, 0x00, 0x04, 0x00, // ................
	0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x08, 0x00, // ....main........
	0x2b, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, // +...tex_stereo_f
	0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x08, 0x00, // bSampler........
	0x2e, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, // ....tex_stereo_f
	0x62, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x08, 0x00, // bTexture........
	0x32, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, // 2...tex_stereo_d
	0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x00, 0x05, 0x00, 0x08, 0x00, // epthSampler.....
	0x34, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, // 4...tex_stereo_d
	0x65, 0x70, 0x74, 0x68, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x00, 0x05, 0x00, 0x06, 0x00, // epthTexture.....
	0x4c, 0x00, 0x00, 0x00, 0x55, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, // L...UniformBlock
	0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x08, 0x00, 0x4c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........L.......
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, // Stereo_MS_ZPD_YA
	0x78, 0x69, 0x73, 0x00, 0x06, 0x00, 0x06, 0x00, 0x4c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // xis.....L.......
	0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x00, 0x00, 0x05, 0x00, 0x03, 0x00, // w_h_height......
	0x4e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x05, 0x00, 0x29, 0x01, 0x00, 0x00, // N...........)...
	0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x00, 0x05, 0x00, 0x06, 0x00, // v_texcoord0.....
	0x34, 0x01, 0x00, 0x00, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, // 4...bgfx_FragDat
	0x61, 0x30, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x2b, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, // a0..G...+..."...
	0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x2b, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, // ....G...+...!...
	0x12, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, // ....G......."...
	0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, // ....G.......!...
	0x02, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x32, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, // ....G...2..."...
	0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x32, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, // ....G...2...!...
	0x13, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x34, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, // ....G...4..."...
	0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x34, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, // ....G...4...!...
	0x03, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0x4c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ....H...L.......
	0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0x4c, 0x00, 0x00, 0x00, // #.......H...L...
	0x01, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x47, 0x00, 0x03, 0x00, // ....#.......G...
	0x4c, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x4e, 0x00, 0x00, 0x00, // L.......G...N...
	0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x4e, 0x00, 0x00, 0x00, // ".......G...N...
	0x21, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x29, 0x01, 0x00, 0x00, // !.......G...)...
	0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x34, 0x01, 0x00, 0x00, // ........G...4...
	0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, // ................
	0x21, 0x00, 0x03, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x02, 0x00, // !...............
	0x06, 0x00, 0x00, 0x00, 0x16, 0x00, 0x03, 0x00, 0x07, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, // ............ ...
	0x19, 0x00, 0x09, 0x00, 0x08, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, // ................
	0x02, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, // ................
	0x04, 0x00, 0x00, 0x00, 0x14, 0x00, 0x02, 0x00, 0x19, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00, // ................
	0x1b, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, // ............ ...
	0x2a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, // *...........;...
	0x2a, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, // *...+....... ...
	0x2d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, // -...........;...
	0x2d, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, // -...........;...
	0x2a, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, // *...2.......;...
	0x2d, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x00, 0x04, 0x00, // -...4...........
	0x37, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, // 7... .......+...
	0x37, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, // 7...8.......+...
	0x37, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x03, 0x00, // 7...<...........
	0x40, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x04, 0x00, 0x4c, 0x00, 0x00, 0x00, // @...........L...
	0x0e, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x4d, 0x00, 0x00, 0x00, // ........ ...M...
	0x02, 0x00, 0x00, 0x00, 0x4c, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x4d, 0x00, 0x00, 0x00, // ....L...;...M...
	0x4e, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x15, 0x00, 0x04, 0x00, 0x4f, 0x00, 0x00, 0x00, // N...........O...
	0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x4f, 0x00, 0x00, 0x00, //  .......+...O...
	0x50, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x51, 0x00, 0x00, 0x00, // P....... ...Q...
	0x02, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, // ........+.......
	0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x4f, 0x00, 0x00, 0x00, // T.......+...O...
	0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, // W.......+.......
	0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x17, 0x00, 0x04, 0x00, 0x67, 0x00, 0x00, 0x00, // `......?....g...
	0x19, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, // ........+.......
	0x73, 0x00, 0x00, 0x00, 0xfa, 0x7e, 0x2a, 0x3f, 0x2b, 0x00, 0x04, 0x00, 0x4f, 0x00, 0x00, 0x00, // s....~*?+...O...
	0x95, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, // ........+.......
	0x99, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x2b, 0x00, 0x04, 0x00, 0x4f, 0x00, 0x00, 0x00, // .......?+...O...
	0x9b, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, // ........+.......
	0x14, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x20, 0x00, 0x04, 0x00, 0x28, 0x01, 0x00, 0x00, // .......@ ...(...
	0x01, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x28, 0x01, 0x00, 0x00, // ........;...(...
	0x29, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x33, 0x01, 0x00, 0x00, // )....... ...3...
	0x03, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x33, 0x01, 0x00, 0x00, // ........;...3...
	0x34, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x36, 0x00, 0x05, 0x00, 0x02, 0x00, 0x00, 0x00, // 4.......6.......
	0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, // ................
	0x05, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, // ....=.......,...
	0x2b, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x08, 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x00, // +...=......./...
	0x2e, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, // ....=.......3...
	0x32, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x08, 0x00, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, // 2...=.......5...
	0x34, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x2a, 0x01, 0x00, 0x00, // 4...=.......*...
	0x29, 0x01, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x5e, 0x01, 0x00, 0x00, // )...Q.......^...
	0x2a, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // *...............
	0x5f, 0x01, 0x00, 0x00, 0x5e, 0x01, 0x00, 0x00, 0x14, 0x01, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, // _...^.......Q...
	0x07, 0x00, 0x00, 0x00, 0x61, 0x01, 0x00, 0x00, 0x2a, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // ....a...*.......
	0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x62, 0x01, 0x00, 0x00, 0x5f, 0x01, 0x00, 0x00, // P.......b..._...
	0x61, 0x01, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x64, 0x01, 0x00, 0x00, // a...Q.......d...
	0x2a, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb8, 0x00, 0x05, 0x00, 0x19, 0x00, 0x00, 0x00, // *...............
	0x65, 0x01, 0x00, 0x00, 0x64, 0x01, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, // e...d...`.......
	0x27, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfb, 0x00, 0x03, 0x00, 0x57, 0x00, 0x00, 0x00, // '...........W...
	0x91, 0x01, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x91, 0x01, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, // ............A...
	0x51, 0x00, 0x00, 0x00, 0x92, 0x01, 0x00, 0x00, 0x4e, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, // Q.......N...<...
	0x50, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x93, 0x01, 0x00, 0x00, // P...=...........
	0x92, 0x01, 0x00, 0x00, 0xb7, 0x00, 0x05, 0x00, 0x19, 0x00, 0x00, 0x00, 0x94, 0x01, 0x00, 0x00, // ................
	0x93, 0x01, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x51, 0x00, 0x00, 0x00, // ....T...A...Q...
	0x95, 0x01, 0x00, 0x00, 0x4e, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, // ....N...<...W...
	0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x96, 0x01, 0x00, 0x00, 0x95, 0x01, 0x00, 0x00, // =...............
	0xf7, 0x00, 0x03, 0x00, 0x26, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, // ....&...........
	0x65, 0x01, 0x00, 0x00, 0x98, 0x01, 0x00, 0x00, 0xdf, 0x01, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, // e...............
	0xdf, 0x01, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xe3, 0x01, 0x00, 0x00, // ................
	0x60, 0x00, 0x00, 0x00, 0x96, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, // `.......P.......
	0xe4, 0x01, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0xe3, 0x01, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, // ....T...........
	0x07, 0x00, 0x00, 0x00, 0xe6, 0x01, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x96, 0x01, 0x00, 0x00, // ........`.......
	0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xe7, 0x01, 0x00, 0x00, 0xe6, 0x01, 0x00, 0x00, // P...............
	0x54, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x67, 0x00, 0x00, 0x00, 0xe8, 0x01, 0x00, 0x00, // T...P...g.......
	0x94, 0x01, 0x00, 0x00, 0x94, 0x01, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, // ................
	0xe9, 0x01, 0x00, 0x00, 0xe8, 0x01, 0x00, 0x00, 0xe4, 0x01, 0x00, 0x00, 0xe7, 0x01, 0x00, 0x00, // ................
	0x83, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xea, 0x01, 0x00, 0x00, 0x62, 0x01, 0x00, 0x00, // ............b...
	0xe9, 0x01, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, 0x40, 0x00, 0x00, 0x00, 0x57, 0x02, 0x00, 0x00, // ....V...@...W...
	0x35, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, // 5...3...X.......
	0x5a, 0x02, 0x00, 0x00, 0x57, 0x02, 0x00, 0x00, 0xea, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // Z...W...........
	0x54, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xed, 0x01, 0x00, 0x00, // T...Q...........
	0x5a, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // Z...............
	0xf1, 0x01, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00, 0x96, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, // ....s.......P...
	0x0b, 0x00, 0x00, 0x00, 0xf2, 0x01, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0xf1, 0x01, 0x00, 0x00, // ........T.......
	0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xf4, 0x01, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00, // ............s...
	0x96, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xf5, 0x01, 0x00, 0x00, // ....P...........
	0xf4, 0x01, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x67, 0x00, 0x00, 0x00, // ....T...P...g...
	0xf6, 0x01, 0x00, 0x00, 0x94, 0x01, 0x00, 0x00, 0x94, 0x01, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, // ................
	0x0b, 0x00, 0x00, 0x00, 0xf7, 0x01, 0x00, 0x00, 0xf6, 0x01, 0x00, 0x00, 0xf2, 0x01, 0x00, 0x00, // ................
	0xf5, 0x01, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xf8, 0x01, 0x00, 0x00, // ................
	0x62, 0x01, 0x00, 0x00, 0xf7, 0x01, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, 0x40, 0x00, 0x00, 0x00, // b.......V...@...
	0x61, 0x02, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, // a...5...3...X...
	0x0e, 0x00, 0x00, 0x00, 0x64, 0x02, 0x00, 0x00, 0x61, 0x02, 0x00, 0x00, 0xf8, 0x01, 0x00, 0x00, // ....d...a.......
	0x02, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // ....T...Q.......
	0xfb, 0x01, 0x00, 0x00, 0x64, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, // ....d...........
	0x07, 0x00, 0x00, 0x00, 0xfc, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, // ............%...
	0xed, 0x01, 0x00, 0x00, 0xfb, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, // ........P.......
	0x00, 0x02, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x96, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, // ....T.......P...
	0x0b, 0x00, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x96, 0x01, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, // ............T...
	0x50, 0x00, 0x05, 0x00, 0x67, 0x00, 0x00, 0x00, 0x03, 0x02, 0x00, 0x00, 0x94, 0x01, 0x00, 0x00, // P...g...........
	0x94, 0x01, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x04, 0x02, 0x00, 0x00, // ................
	0x03, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, // ................
	0x0b, 0x00, 0x00, 0x00, 0x05, 0x02, 0x00, 0x00, 0x62, 0x01, 0x00, 0x00, 0x04, 0x02, 0x00, 0x00, // ........b.......
	0x56, 0x00, 0x05, 0x00, 0x40, 0x00, 0x00, 0x00, 0x6b, 0x02, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, // V...@...k...5...
	0x33, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x6e, 0x02, 0x00, 0x00, // 3...X.......n...
	0x6b, 0x02, 0x00, 0x00, 0x05, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, // k...........T...
	0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x08, 0x02, 0x00, 0x00, 0x6e, 0x02, 0x00, 0x00, // Q...........n...
	0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x09, 0x02, 0x00, 0x00, // ................
	0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0xfc, 0x01, 0x00, 0x00, 0x08, 0x02, 0x00, 0x00, // ....%...........
	0x41, 0x00, 0x06, 0x00, 0x51, 0x00, 0x00, 0x00, 0x0a, 0x02, 0x00, 0x00, 0x4e, 0x00, 0x00, 0x00, // A...Q.......N...
	0x38, 0x00, 0x00, 0x00, 0x95, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, // 8.......=.......
	0x0b, 0x02, 0x00, 0x00, 0x0a, 0x02, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x51, 0x00, 0x00, 0x00, // ........A...Q...
	0x0e, 0x02, 0x00, 0x00, 0x4e, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x9b, 0x00, 0x00, 0x00, // ....N...<.......
	0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x0f, 0x02, 0x00, 0x00, 0x0e, 0x02, 0x00, 0x00, // =...............
	0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x10, 0x02, 0x00, 0x00, 0x99, 0x00, 0x00, 0x00, // ................
	0x0f, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x11, 0x02, 0x00, 0x00, // ................
	0x10, 0x02, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // ....`...........
	0x12, 0x02, 0x00, 0x00, 0x09, 0x02, 0x00, 0x00, 0x11, 0x02, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, // ................
	0x07, 0x00, 0x00, 0x00, 0x13, 0x02, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x12, 0x02, 0x00, 0x00, // ........`.......
	0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x14, 0x02, 0x00, 0x00, 0x99, 0x00, 0x00, 0x00, // ................
	0x13, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x15, 0x02, 0x00, 0x00, // ................
	0x99, 0x00, 0x00, 0x00, 0x14, 0x02, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // ................
	0x16, 0x02, 0x00, 0x00, 0x96, 0x01, 0x00, 0x00, 0x15, 0x02, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, // ................
	0x07, 0x00, 0x00, 0x00, 0x17, 0x02, 0x00, 0x00, 0x0b, 0x02, 0x00, 0x00, 0x16, 0x02, 0x00, 0x00, // ................
	0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x18, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // ................
	0x28, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x17, 0x02, 0x00, 0x00, 0x7f, 0x00, 0x04, 0x00, // (...T...........
	0x07, 0x00, 0x00, 0x00, 0x1c, 0x02, 0x00, 0x00, 0x18, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, // ............P...
	0x0b, 0x00, 0x00, 0x00, 0x1d, 0x02, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x1c, 0x02, 0x00, 0x00, // ........T.......
	0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x1f, 0x02, 0x00, 0x00, 0x18, 0x02, 0x00, 0x00, // P...............
	0x54, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x67, 0x00, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00, // T...P...g... ...
	0x94, 0x01, 0x00, 0x00, 0x94, 0x01, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, // ................
	0x21, 0x02, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00, 0x1d, 0x02, 0x00, 0x00, 0x1f, 0x02, 0x00, 0x00, // !... ...........
	0x83, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x22, 0x02, 0x00, 0x00, 0x62, 0x01, 0x00, 0x00, // ........"...b...
	0x21, 0x02, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, 0x40, 0x00, 0x00, 0x00, 0x75, 0x02, 0x00, 0x00, // !...V...@...u...
	0x2f, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, // /...,...X.......
	0x78, 0x02, 0x00, 0x00, 0x75, 0x02, 0x00, 0x00, 0x22, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // x...u...".......
	0x54, 0x00, 0x00, 0x00, 0x4f, 0x00, 0x08, 0x00, 0x1b, 0x00, 0x00, 0x00, 0x25, 0x02, 0x00, 0x00, // T...O.......%...
	0x78, 0x02, 0x00, 0x00, 0x78, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // x...x...........
	0x02, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x27, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, // ........'.......
	0x98, 0x01, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x9c, 0x01, 0x00, 0x00, // ................
	0x60, 0x00, 0x00, 0x00, 0x96, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, // `.......P.......
	0x9d, 0x01, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x9c, 0x01, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, // ....T...........
	0x07, 0x00, 0x00, 0x00, 0x9f, 0x01, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x96, 0x01, 0x00, 0x00, // ........`.......
	0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xa0, 0x01, 0x00, 0x00, 0x9f, 0x01, 0x00, 0x00, // P...............
	0x54, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x67, 0x00, 0x00, 0x00, 0xa1, 0x01, 0x00, 0x00, // T...P...g.......
	0x94, 0x01, 0x00, 0x00, 0x94, 0x01, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, // ................
	0xa2, 0x01, 0x00, 0x00, 0xa1, 0x01, 0x00, 0x00, 0x9d, 0x01, 0x00, 0x00, 0xa0, 0x01, 0x00, 0x00, // ................
	0x81, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xa3, 0x01, 0x00, 0x00, 0x62, 0x01, 0x00, 0x00, // ............b...
	0xa2, 0x01, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, 0x40, 0x00, 0x00, 0x00, 0x2f, 0x02, 0x00, 0x00, // ....V...@.../...
	0x35, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, // 5...3...X.......
	0x32, 0x02, 0x00, 0x00, 0x2f, 0x02, 0x00, 0x00, 0xa3, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // 2.../...........
	0x54, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xa6, 0x01, 0x00, 0x00, // T...Q...........
	0x32, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // 2...............
	0xaa, 0x01, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00, 0x96, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, // ....s.......P...
	0x0b, 0x00, 0x00, 0x00, 0xab, 0x01, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0xaa, 0x01, 0x00, 0x00, // ........T.......
	0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xad, 0x01, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00, // ............s...
	0x96, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xae, 0x01, 0x00, 0x00, // ....P...........
	0xad, 0x01, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x67, 0x00, 0x00, 0x00, // ....T...P...g...
	0xaf, 0x01, 0x00, 0x00, 0x94, 0x01, 0x00, 0x00, 0x94, 0x01, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, // ................
	0x0b, 0x00, 0x00, 0x00, 0xb0, 0x01, 0x00, 0x00, 0xaf, 0x01, 0x00, 0x00, 0xab, 0x01, 0x00, 0x00, // ................
	0xae, 0x01, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xb1, 0x01, 0x00, 0x00, // ................
	0x62, 0x01, 0x00, 0x00, 0xb0, 0x01, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, 0x40, 0x00, 0x00, 0x00, // b.......V...@...
	0x39, 0x02, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, // 9...5...3...X...
	0x0e, 0x00, 0x00, 0x00, 0x3c, 0x02, 0x00, 0x00, 0x39, 0x02, 0x00, 0x00, 0xb1, 0x01, 0x00, 0x00, // ....<...9.......
	0x02, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // ....T...Q.......
	0xb4, 0x01, 0x00, 0x00, 0x3c, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, // ....<...........
	0x07, 0x00, 0x00, 0x00, 0xb5, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, // ............%...
	0xa6, 0x01, 0x00, 0x00, 0xb4, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, // ........P.......
	0xb9, 0x01, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x96, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, // ....T.......P...
	0x0b, 0x00, 0x00, 0x00, 0xbb, 0x01, 0x00, 0x00, 0x96, 0x01, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, // ............T...
	0x50, 0x00, 0x05, 0x00, 0x67, 0x00, 0x00, 0x00, 0xbc, 0x01, 0x00, 0x00, 0x94, 0x01, 0x00, 0x00, // P...g...........
	0x94, 0x01, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xbd, 0x01, 0x00, 0x00, // ................
	0xbc, 0x01, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0xbb, 0x01, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, // ................
	0x0b, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x62, 0x01, 0x00, 0x00, 0xbd, 0x01, 0x00, 0x00, // ........b.......
	0x56, 0x00, 0x05, 0x00, 0x40, 0x00, 0x00, 0x00, 0x43, 0x02, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, // V...@...C...5...
	0x33, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x46, 0x02, 0x00, 0x00, // 3...X.......F...
	0x43, 0x02, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, // C...........T...
	0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xc1, 0x01, 0x00, 0x00, 0x46, 0x02, 0x00, 0x00, // Q...........F...
	0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0xc2, 0x01, 0x00, 0x00, // ................
	0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0xb5, 0x01, 0x00, 0x00, 0xc1, 0x01, 0x00, 0x00, // ....%...........
	0x41, 0x00, 0x06, 0x00, 0x51, 0x00, 0x00, 0x00, 0xc3, 0x01, 0x00, 0x00, 0x4e, 0x00, 0x00, 0x00, // A...Q.......N...
	0x38, 0x00, 0x00, 0x00, 0x95, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, // 8.......=.......
	0xc4, 0x01, 0x00, 0x00, 0xc3, 0x01, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x51, 0x00, 0x00, 0x00, // ........A...Q...
	0xc7, 0x01, 0x00, 0x00, 0x4e, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x9b, 0x00, 0x00, 0x00, // ....N...<.......
	0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0xc8, 0x01, 0x00, 0x00, 0xc7, 0x01, 0x00, 0x00, // =...............
	0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xc9, 0x01, 0x00, 0x00, 0x99, 0x00, 0x00, 0x00, // ................
	0xc8, 0x01, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xca, 0x01, 0x00, 0x00, // ................
	0xc9, 0x01, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // ....`...........
	0xcb, 0x01, 0x00, 0x00, 0xc2, 0x01, 0x00, 0x00, 0xca, 0x01, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, // ................
	0x07, 0x00, 0x00, 0x00, 0xcc, 0x01, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0xcb, 0x01, 0x00, 0x00, // ........`.......
	0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xcd, 0x01, 0x00, 0x00, 0x99, 0x00, 0x00, 0x00, // ................
	0xcc, 0x01, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xce, 0x01, 0x00, 0x00, // ................
	0x99, 0x00, 0x00, 0x00, 0xcd, 0x01, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // ................
	0xcf, 0x01, 0x00, 0x00, 0x96, 0x01, 0x00, 0x00, 0xce, 0x01, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, // ................
	0x07, 0x00, 0x00, 0x00, 0xd0, 0x01, 0x00, 0x00, 0xc4, 0x01, 0x00, 0x00, 0xcf, 0x01, 0x00, 0x00, // ................
	0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0xd1, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // ................
	0x28, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0xd0, 0x01, 0x00, 0x00, 0x7f, 0x00, 0x04, 0x00, // (...T...........
	0x07, 0x00, 0x00, 0x00, 0xd5, 0x01, 0x00, 0x00, 0xd1, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, // ............P...
	0x0b, 0x00, 0x00, 0x00, 0xd6, 0x01, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0xd5, 0x01, 0x00, 0x00, // ........T.......
	0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xd8, 0x01, 0x00, 0x00, 0xd1, 0x01, 0x00, 0x00, // P...............
	0x54, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x67, 0x00, 0x00, 0x00, 0xd9, 0x01, 0x00, 0x00, // T...P...g.......
	0x94, 0x01, 0x00, 0x00, 0x94, 0x01, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, // ................
	0xda, 0x01, 0x00, 0x00, 0xd9, 0x01, 0x00, 0x00, 0xd6, 0x01, 0x00, 0x00, 0xd8, 0x01, 0x00, 0x00, // ................
	0x81, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xdb, 0x01, 0x00, 0x00, 0x62, 0x01, 0x00, 0x00, // ............b...
	0xda, 0x01, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, 0x40, 0x00, 0x00, 0x00, 0x4d, 0x02, 0x00, 0x00, // ....V...@...M...
	0x2f, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, // /...,...X.......
	0x50, 0x02, 0x00, 0x00, 0x4d, 0x02, 0x00, 0x00, 0xdb, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // P...M...........
	0x54, 0x00, 0x00, 0x00, 0x4f, 0x00, 0x08, 0x00, 0x1b, 0x00, 0x00, 0x00, 0xde, 0x01, 0x00, 0x00, // T...O...........
	0x50, 0x02, 0x00, 0x00, 0x50, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // P...P...........
	0x02, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x27, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, // ........'.......
	0x26, 0x02, 0x00, 0x00, 0xff, 0x00, 0x01, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x27, 0x02, 0x00, 0x00, // &...........'...
	0xf5, 0x00, 0x07, 0x00, 0x1b, 0x00, 0x00, 0x00, 0x9d, 0x02, 0x00, 0x00, 0x25, 0x02, 0x00, 0x00, // ............%...
	0xdf, 0x01, 0x00, 0x00, 0xde, 0x01, 0x00, 0x00, 0x98, 0x01, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, // ............Q...
	0x07, 0x00, 0x00, 0x00, 0x67, 0x01, 0x00, 0x00, 0x9d, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ....g...........
	0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x68, 0x01, 0x00, 0x00, 0x9d, 0x02, 0x00, 0x00, // Q.......h.......
	0x01, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x69, 0x01, 0x00, 0x00, // ....Q.......i...
	0x9d, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x50, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, // ........P.......
	0x6a, 0x01, 0x00, 0x00, 0x67, 0x01, 0x00, 0x00, 0x68, 0x01, 0x00, 0x00, 0x69, 0x01, 0x00, 0x00, // j...g...h...i...
	0x99, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x03, 0x00, 0x34, 0x01, 0x00, 0x00, 0x6a, 0x01, 0x00, 0x00, // ....>...4...j...
	0xfd, 0x00, 0x01, 0x00, 0x38, 0x00, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00,                         // ....8..... .
};
static const bgfx::EmbeddedShader fs_pp_stereo_sbs = BGFX_EMBEDDED_SHADER(fs_pp_stereo_sbs);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Build of fragment shader from fs_pp_stereo.sc to fs_pp_stereo_tb with options: TB NOSTEREO
static const uint8_t fs_pp_stereo_tb_mtl[3170] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x14, 0x74, // FSH.o.><.......t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, // ex_stereo_fbSamp
	0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x74, 0x65, // ler...........te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x54, 0x65, 0x78, 0x74, 0x75, // x_stereo_fbTextu
	0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x74, 0x65, 0x78, // re...........tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, // _stereo_depthSam
	0x70, 0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x74, // pler...........t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x54, // ex_stereo_depthT
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, // exture..........
	0x13, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, // .Stereo_MS_ZPD_Y
	0x41, 0x78, 0x69, 0x73, 0x12, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x77, // Axis...........w
	0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x01, 0x10, 0x00, 0x01, 0x00, 0x00, // _h_height.......
	0x00, 0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, // ....tex_stereo_f
	0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x74, 0x65, 0x78, 0x5f, // b...........tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x10, 0x00, 0x00, 0x00, // stereo_depth....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x64, 0x0b, 0x00, 0x00, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, // ......d...#inclu
	0x64, 0x65, 0x20, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x64, 0x6c, 0x69, 0x62, // de <metal_stdlib
	0x3e, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x73, 0x69, 0x6d, 0x64, // >.#include <simd
	0x2f, 0x73, 0x69, 0x6d, 0x64, 0x2e, 0x68, 0x3e, 0x0a, 0x0a, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, // /simd.h>..using 
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x3b, // namespace metal;
	0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, // ..struct _Global
	0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, // .{.    float4 St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, // ereo_MS_ZPD_YAxi
	0x73, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x77, 0x5f, // s;.    float4 w_
	0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, // h_height;.};..st
	0x72, 0x75, 0x63, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, // ruct xlatMtlMain
	0x5f, 0x6f, 0x75, 0x74, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // _out.{.    float
	0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, // 4 bgfx_FragData0
	0x20, 0x5b, 0x5b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, //  [[color(0)]];.}
	0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, // ;..struct xlatMt
	0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, // lMain_in.{.    f
	0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, // loat2 v_texcoord
	0x30, 0x20, 0x5b, 0x5b, 0x75, 0x73, 0x65, 0x72, 0x28, 0x6c, 0x6f, 0x63, 0x6e, 0x30, 0x29, 0x5d, // 0 [[user(locn0)]
	0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, // ];.};..fragment 
	0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x20, // xlatMtlMain_out 
	0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x28, 0x78, 0x6c, 0x61, 0x74, // xlatMtlMain(xlat
	0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x5b, 0x5b, // MtlMain_in in [[
	0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x5d, 0x5d, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, // stage_in]], cons
	0x74, 0x61, 0x6e, 0x74, 0x20, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x26, 0x20, 0x5f, 0x6d, // tant _Global& _m
	0x74, 0x6c, 0x5f, 0x75, 0x20, 0x5b, 0x5b, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x28, 0x30, 0x29, // tl_u [[buffer(0)
	0x5d, 0x5d, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, // ]], texture2d<fl
	0x6f, 0x61, 0x74, 0x3e, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // oat> tex_stereo_
	0x66, 0x62, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x30, 0x29, 0x5d, // fb [[texture(0)]
	0x5d, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, 0x6f, // ], texture2d<flo
	0x61, 0x74, 0x3e, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, // at> tex_stereo_d
	0x65, 0x70, 0x74, 0x68, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x31, // epth [[texture(1
	0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x74, 0x65, 0x78, // )]], sampler tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, // _stereo_fbSample
	0x72, 0x20, 0x5b, 0x5b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, // r [[sampler(0)]]
	0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // , sampler tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, // ereo_depthSample
	0x72, 0x20, 0x5b, 0x5b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x31, 0x29, 0x5d, 0x5d, // r [[sampler(1)]]
	0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, // ).{.    xlatMtlM
	0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x3d, 0x20, 0x7b, 0x7d, // ain_out out = {}
	0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x5f, 0x33, 0x35, // ;.    float2 _35
	0x34, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, // 4 = float2(in.v_
	0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2e, 0x78, 0x2c, 0x20, 0x69, 0x6e, 0x2e, // texcoord0.x, in.
	0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2e, 0x79, 0x20, 0x2a, 0x20, // v_texcoord0.y * 
	0x32, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, // 2.0);.    float3
	0x20, 0x5f, 0x36, 0x36, 0x39, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x64, 0x6f, 0x0a, 0x20, 0x20, //  _669;.    do.  
	0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x6f, 0x6f, 0x6c, //   {.        bool
	0x20, 0x5f, 0x34, 0x30, 0x34, 0x20, 0x3d, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, //  _404 = _mtl_u.S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, // tereo_MS_ZPD_YAx
	0x69, 0x73, 0x2e, 0x7a, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x3b, 0x0a, 0x20, 0x20, 0x20, // is.z != 0.0;.   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, //      if (in.v_te
	0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2e, 0x79, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x35, 0x29, // xcoord0.y < 0.5)
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // .        {.     
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x34, 0x36, //        float _46
	0x35, 0x20, 0x3d, 0x20, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, // 5 = fast::max(0.
	0x30, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, // 0, _mtl_u.w_h_he
	0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, // ight.w + (_mtl_u
	0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, // .Stereo_MS_ZPD_Y
	0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, // Axis.x * (1.0 - 
	0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x28, 0x66, // (1.0 / (0.5 + (f
	0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, 0x6e, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, // ast::min(fast::m
	0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, // in(tex_stereo_de
	0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, // pth.sample(tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, // tereo_depthSampl
	0x65, 0x72, 0x2c, 0x20, 0x28, 0x5f, 0x33, 0x35, 0x34, 0x20, 0x2b, 0x20, 0x73, 0x65, 0x6c, 0x65, // er, (_354 + sele
	0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2a, 0x20, // ct(float2(0.5 * 
	0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, // _mtl_u.Stereo_MS
	0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, // _ZPD_YAxis.x, 0.
	0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, // 0), float2(0.0, 
	0x30, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, // 0.5 * _mtl_u.Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, // reo_MS_ZPD_YAxis
	0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x34, 0x30, 0x34, 0x29, // .x), bool2(_404)
	0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, // )), level(0.0)).
	0x78, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, // x, tex_stereo_de
	0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, // pth.sample(tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, // tereo_depthSampl
	0x65, 0x72, 0x2c, 0x20, 0x28, 0x5f, 0x33, 0x35, 0x34, 0x20, 0x2b, 0x20, 0x73, 0x65, 0x6c, 0x65, // er, (_354 + sele
	0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x30, // ct(float2(0.6660
	0x30, 0x30, 0x30, 0x30, 0x38, 0x35, 0x38, 0x33, 0x30, 0x36, 0x38, 0x38, 0x34, 0x37, 0x36, 0x35, // 0000858306884765
	0x36, 0x32, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, // 625 * _mtl_u.Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, // reo_MS_ZPD_YAxis
	0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, // .x, 0.0), float2
	0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x30, 0x30, 0x30, 0x30, 0x30, // (0.0, 0.66600000
	0x38, 0x35, 0x38, 0x33, 0x30, 0x36, 0x38, 0x38, 0x34, 0x37, 0x36, 0x35, 0x36, 0x32, 0x35, 0x20, // 858306884765625 
	0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // * _mtl_u.Stereo_
	0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, // MS_ZPD_YAxis.x),
	0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x34, 0x30, 0x34, 0x29, 0x29, 0x29, 0x2c, 0x20, //  bool2(_404))), 
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x20, // level(0.0)).x), 
	0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, // tex_stereo_depth
	0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // .sample(tex_ster
	0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, // eo_depthSampler,
	0x20, 0x28, 0x5f, 0x33, 0x35, 0x34, 0x20, 0x2b, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, //  (_354 + select(
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, // float2(_mtl_u.St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, // ereo_MS_ZPD_YAxi
	0x73, 0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // s.x, 0.0), float
	0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, // 2(0.0, _mtl_u.St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, // ereo_MS_ZPD_YAxi
	0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x34, 0x30, 0x34, // s.x), bool2(_404
	0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, // ))), level(0.0))
	0x2e, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x5f, 0x6d, // .x) * ((1.0 / _m
	0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, // tl_u.Stereo_MS_Z
	0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, // PD_YAxis.y) - 0.
	0x35, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 5)))))));.      
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x36, 0x36, 0x39, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, //       _669 = tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, // _stereo_fb.sampl
	0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, // e(tex_stereo_fbS
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x5f, 0x33, 0x35, 0x34, 0x20, 0x2b, 0x20, // ampler, (_354 + 
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x5f, 0x34, // select(float2(_4
	0x36, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, // 65, 0.0), float2
	0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x5f, 0x34, 0x36, 0x35, 0x29, 0x2c, 0x20, 0x62, 0x6f, // (0.0, -_465), bo
	0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x34, 0x30, 0x34, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, // ol2(_404))), lev
	0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x20, 0x20, // el(0.0)).xyz;.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, //           break;
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // .        }.     
	0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //    else.        
	0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, // {.            fl
	0x6f, 0x61, 0x74, 0x20, 0x5f, 0x35, 0x33, 0x36, 0x20, 0x3d, 0x20, 0x66, 0x61, 0x73, 0x74, 0x3a, // oat _536 = fast:
	0x3a, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, // :max(0.0, _mtl_u
	0x2e, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, // .w_h_height.w + 
	0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, // (_mtl_u.Stereo_M
	0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x20, 0x2a, 0x20, // S_ZPD_YAxis.x * 
	0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, // (1.0 - (1.0 / (0
	0x2e, 0x35, 0x20, 0x2b, 0x20, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, 0x6e, 0x28, // .5 + (fast::min(
	0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // fast::min(tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, // ereo_depth.sampl
	0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, // e(tex_stereo_dep
	0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x5f, 0x33, 0x35, 0x34, // thSampler, (_354
	0x20, 0x2d, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, //  - select(float2
	0x28, 0x30, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, // (0.5 * _mtl_u.St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, // ereo_MS_ZPD_YAxi
	0x73, 0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // s.x, 0.0), float
	0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, // 2(0.0, 0.5 * _mt
	0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, // l_u.Stereo_MS_ZP
	0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, // D_YAxis.x), bool
	0x32, 0x28, 0x5f, 0x34, 0x30, 0x34, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, // 2(_404))), level
	0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // (0.0)).x, tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, // ereo_depth.sampl
	0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, // e(tex_stereo_dep
	0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x5f, 0x33, 0x35, 0x34, // thSampler, (_354
	0x20, 0x2d, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, //  - select(float2
	0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x30, 0x30, 0x30, 0x30, 0x30, 0x38, 0x35, 0x38, 0x33, 0x30, // (0.6660000085830
	0x36, 0x38, 0x38, 0x34, 0x37, 0x36, 0x35, 0x36, 0x32, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, // 6884765625 * _mt
	0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, // l_u.Stereo_MS_ZP
	0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, // D_YAxis.x, 0.0),
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, //  float2(0.0, 0.6
	0x36, 0x36, 0x30, 0x30, 0x30, 0x30, 0x30, 0x38, 0x35, 0x38, 0x33, 0x30, 0x36, 0x38, 0x38, 0x34, // 6600000858306884
	0x37, 0x36, 0x35, 0x36, 0x32, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, // 765625 * _mtl_u.
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, // Stereo_MS_ZPD_YA
	0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x34, // xis.x), bool2(_4
	0x30, 0x34, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, // 04))), level(0.0
	0x29, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // )).x), tex_stere
	0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, // o_depth.sample(t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, // ex_stereo_depthS
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x5f, 0x33, 0x35, 0x34, 0x20, 0x2d, 0x20, // ampler, (_354 - 
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x5f, 0x6d, // select(float2(_m
	0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, // tl_u.Stereo_MS_Z
	0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // PD_YAxis.x, 0.0)
	0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x5f, 0x6d, // , float2(0.0, _m
	0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, // tl_u.Stereo_MS_Z
	0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, // PD_YAxis.x), boo
	0x6c, 0x32, 0x28, 0x5f, 0x34, 0x30, 0x34, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, // l2(_404))), leve
	0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x31, // l(0.0)).x) * ((1
	0x2e, 0x30, 0x20, 0x2f, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, // .0 / _mtl_u.Ster
	0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, // eo_MS_ZPD_YAxis.
	0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x3b, // y) - 0.5)))))));
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x36, 0x36, // .            _66
	0x39, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, // 9 = tex_stereo_f
	0x62, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, // b.sample(tex_ste
	0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, // reo_fbSampler, (
	0x5f, 0x33, 0x35, 0x34, 0x20, 0x2d, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, // _354 - select(fl
	0x6f, 0x61, 0x74, 0x32, 0x28, 0x5f, 0x35, 0x33, 0x36, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, // oat2(_536, 0.0),
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x5f, 0x35, //  float2(0.0, -_5
	0x33, 0x36, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x34, 0x30, 0x34, 0x29, // 36), bool2(_404)
	0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, // )), level(0.0)).
	0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // xyz;.           
	0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //  break;.        
	0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, // }.        break;
	0x20, 0x2f, 0x2f, 0x20, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x20, //  // unreachable 
	0x77, 0x6f, 0x72, 0x6b, 0x61, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, // workaround.    }
	0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x28, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x20, //  while(false);. 
	0x20, 0x20, 0x20, 0x6f, 0x75, 0x74, 0x2e, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, //    out.bgfx_Frag
	0x44, 0x61, 0x74, 0x61, 0x30, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x5f, // Data0 = float4(_
	0x36, 0x36, 0x39, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x72, // 669, 1.0);.    r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6f, 0x75, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x0a, 0x00, 0x00, // eturn out;.}....
	0x60, 0x00,                                                                                     // `.
};
static const uint8_t fs_pp_stereo_tb_essl[10568] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x35, 0x29, // FSH.o.><......5)
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x33, 0x32, 0x30, 0x20, 0x65, // ..#version 320 e
	0x73, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, // s.#define attrib
	0x75, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x76, // ute in.#define v
	0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, // arying in.precis
	0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3b, // ion highp float;
	0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, // .precision highp
	0x20, 0x69, 0x6e, 0x74, 0x3b, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x73, 0x68, //  int;.#define sh
	0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, // adow2D(_sampler,
	0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, //  _coord) texture
	0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, // (_sampler, _coor
	0x64, 0x29, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x73, 0x68, 0x61, 0x64, 0x6f, // d).#define shado
	0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // w2DProj(_sampler
	0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // , _coord) textur
	0x65, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, // eProj(_sampler, 
	0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x0a, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x65, 0x64, 0x69, // _coord).out medi
	0x75, 0x6d, 0x70, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, // ump vec4 bgfx_Fr
	0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, // agColor;.varying
	0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, //  vec2 v_texcoord
	0x30, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, // 0;.vec3 instMul(
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x20, // vec3 _vec, mat3 
	0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // _mtx) { return (
	0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, //  (_vec) * (_mtx)
	0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, //  ); }.vec3 instM
	0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, // ul(mat3 _mtx, ve
	0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, // c3 _vec) { retur
	0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, // n ( (_mtx) * (_v
	0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, // ec) ); }.vec4 in
	0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, // stMul(vec4 _vec,
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, //  mat4 _mtx) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, // turn ( (_vec) * 
	0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, // (_mtx) ); }.vec4
	0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, //  instMul(mat4 _m
	0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, // tx, vec4 _vec) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, //  return ( (_mtx)
	0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, //  * (_vec) ); }.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, 0x70, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, // loat rcp(float _
	0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x2f, // a) { return 1.0/
	0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, // _a; }.vec2 rcp(v
	0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // ec2 _a) { return
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, //  vec2(1.0)/_a; }
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, // .vec3 rcp(vec3 _
	0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, // a) { return vec3
	0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, // (1.0)/_a; }.vec4
	0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, //  rcp(vec4 _a) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x31, 0x2e, 0x30, 0x29, // return vec4(1.0)
	0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x65, 0x63, 0x32, // /_a; }.vec2 vec2
	0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, // _splat(float _x)
	0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, //  { return vec2(_
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, // x, _x); }.vec3 v
	0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // ec3_splat(float 
	0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, // _x) { return vec
	0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, // 3(_x, _x, _x); }
	0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, // .vec4 vec4_splat
	0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // (float _x) { ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, // urn vec4(_x, _x,
	0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, //  _x, _x); }.uvec
	0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, // 2 uvec2_splat(ui
	0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // nt _x) { return 
	0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, // uvec2(_x, _x); }
	0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, // .uvec3 uvec3_spl
	0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // at(uint _x) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, // turn uvec3(_x, _
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x34, 0x20, // x, _x); }.uvec4 
	0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, // uvec4_splat(uint
	0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, //  _x) { return uv
	0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, // ec4(_x, _x, _x, 
	0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, // _x); }.mat4 mtxF
	0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, // romRows(vec4 _0,
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, //  vec4 _1, vec4 _
	0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // 2, vec4 _3).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, // turn transpose(m
	0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, // at4(_0, _1, _2, 
	0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, // _3) );.}.mat4 mt
	0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, // xFromCols(vec4 _
	0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // 0, vec4 _1, vec4
	0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, //  _2, vec4 _3).{.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, // return mat4(_0, 
	0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, // _1, _2, _3);.}.m
	0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, // at3 mtxFromRows(
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, // vec3 _0, vec3 _1
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // , vec3 _2).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, // urn transpose(ma
	0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x20, 0x29, // t3(_0, _1, _2) )
	0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, // ;.}.mat3 mtxFrom
	0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, // Cols(vec3 _0, ve
	0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, // c3 _1, vec3 _2).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, // {.return mat3(_0
	0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, // , _1, _2);.}.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, // form vec4 u_view
	0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, // Rect;.uniform ve
	0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x54, 0x65, 0x78, 0x65, 0x6c, 0x3b, 0x0a, // c4 u_viewTexel;.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, // uniform mat4 u_v
	0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, // iew;.uniform mat
	0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, // 4 u_invView;.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x70, 0x72, 0x6f, 0x6a, // form mat4 u_proj
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, // ;.uniform mat4 u
	0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // _invProj;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, // m mat4 u_viewPro
	0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, // j;.uniform mat4 
	0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, // u_invViewProj;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, // niform mat4 u_mo
	0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // del[32];.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, //  mat4 u_modelVie
	0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, // w;.uniform mat4 
	0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, // u_modelViewProj;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, // .uniform vec4 u_
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x66, 0x34, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // alphaRef4;.float
	0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, //  sqr( float v).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // .return v*v;.}.v
	0x65, 0x63, 0x32, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x29, // ec2 sqr( vec2 v)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, // .{.return v*v;.}
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // .vec3 sqr( vec3 
	0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, // v).{.return v*v;
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6d, 0x75, 0x6c, 0x5f, 0x77, 0x31, 0x28, 0x20, // .}.vec3 mul_w1( 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x29, 0x0a, // vec3 v, mat4 m).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2e, 0x78, 0x2a, 0x6d, 0x5b, 0x30, // {.return v.x*m[0
	0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x79, 0x2a, 0x6d, 0x5b, 0x31, // ].xyz + (v.y*m[1
	0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x7a, 0x2a, 0x6d, 0x5b, 0x32, // ].xyz + (v.z*m[2
	0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x6d, 0x5b, 0x33, 0x5d, 0x2e, 0x78, 0x79, 0x7a, // ].xyz + m[3].xyz
	0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x63, 0x6f, 0x73, // ));.}.float acos
	0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x20, 0x66, // _approx_divPI( f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // loat v).{.float 
	0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, // x = abs(v);.if(1
	0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, // . - x <= 0.00006
	0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // 103515625).retur
	0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, // n (v >= 0.) ? 0.
	0x20, 0x3a, 0x20, 0x31, 0x2e, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, //  : 1.;.float res
	0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, //  = ((-0.155972/3
	0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, // .141592653589793
	0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, // 2384626433832795
	0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, // ) * x + (1.56467
	0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, // /3.1415926535897
	0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, // 9323846264338327
	0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, // 95) ) * sqrt(1. 
	0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, // - x);.return (v 
	0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x31, // >= 0.) ? res : 1
	0x2e, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // . - res;.}.float
	0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, //  atan2_approx_di
	0x76, 0x32, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x79, 0x2c, 0x20, 0x66, // v2PI( float y, f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // loat x).{.float 
	0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x79, 0x29, 0x3b, 0x0a, // abs_y = abs(y);.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, // float abs_x = ab
	0x73, 0x28, 0x78, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3c, // s(x);.if(abs_x <
	0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, // = 0.000061035156
	0x32, 0x35, 0x20, 0x26, 0x26, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3c, 0x3d, 0x20, 0x30, // 25 && abs_y <= 0
	0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, // .00006103515625)
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x30, 0x2e, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // .return 0.;.floa
	0x74, 0x20, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2d, 0x20, 0x61, // t r = (abs_x - a
	0x62, 0x73, 0x5f, 0x79, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2b, // bs_y) / (abs_x +
	0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, //  abs_y);.float a
	0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, // ngle = ((x < 0.)
	0x20, 0x3f, 0x20, 0x28, 0x33, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x20, 0x3a, 0x20, 0x28, 0x31, 0x2e, //  ? (3./8.) : (1.
	0x2f, 0x38, 0x2e, 0x29, 0x29, 0x0a, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x32, 0x31, 0x31, 0x38, 0x36, // /8.)).+ (0.21186
	0x38, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, // 8 /(2.*3.1415926
	0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, // 5358979323846264
	0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x72, 0x20, 0x2a, 0x20, // 33832795) * r * 
	0x72, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x39, 0x38, 0x37, 0x33, 0x30, 0x35, 0x20, 0x2f, 0x28, 0x32, // r - 0.987305 /(2
	0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, // .*3.141592653589
	0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, // 7932384626433832
	0x37, 0x39, 0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, // 795)) * ((x < 0.
	0x29, 0x20, 0x3f, 0x20, 0x2d, 0x72, 0x20, 0x3a, 0x20, 0x72, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, // ) ? -r : r);.ret
	0x75, 0x72, 0x6e, 0x20, 0x28, 0x79, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, // urn (y < 0.) ? -
	0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3a, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x3b, 0x0a, 0x7d, // angle : angle;.}
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x73, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x72, // .float asin_appr
	0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // ox_divPI( float 
	0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, // v).{.float x = a
	0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, // bs(v);.if(1. - x
	0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, //  <= 0.0000610351
	0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, // 5625).return (v 
	0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x3a, 0x20, 0x2d, // >= 0.) ? 0.5 : -
	0x30, 0x2e, 0x35, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, // 0.5;.float res =
	0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, //  ((-0.155972/3.1
	0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, // 4159265358979323
	0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, // 84626433832795) 
	0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, // * x + (1.56467/3
	0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, // .141592653589793
	0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, // 2384626433832795
	0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, // ) ) * sqrt(1. - 
	0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, // x);.return (v >=
	0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, //  0.) ? 0.5 - res
	0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, //  : -0.5 + res;.}
	0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x61, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x71, 0x75, // .vec2 ray_to_equ
	0x69, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x75, 0x76, 0x28, // irectangular_uv(
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x61, 0x79, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, //  vec3 ray).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x0a, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, // urn vec2(.0.5 + 
	0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, // atan2_approx_div
	0x32, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x79, 0x2c, 0x20, 0x72, 0x61, 0x79, 0x2e, 0x78, // 2PI(ray.y, ray.x
	0x29, 0x2c, 0x0a, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, // ),.acos_approx_d
	0x69, 0x76, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // ivPI(ray.z));.}.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x20, 0x66, // float InvsRGB( f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, // loat color).{.if
	0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, //  (color <= 0.040
	0x34, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // 45).return color
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x29, 0x3b, 0x0a, //  * (1.0/12.92);.
	0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, // else.return pow(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, // color * (1.0/1.0
	0x35, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x2f, 0x31, 0x2e, 0x30, // 55) + (0.055/1.0
	0x35, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // 55), 2.4);.}.flo
	0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x20, 0x66, 0x6c, // at InvRec709( fl
	0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, // oat color).{.if 
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x38, 0x31, 0x29, // (color <= 0.081)
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, // .return color * 
	0x28, 0x31, 0x2e, 0x30, 0x2f, 0x34, 0x2e, 0x35, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, // (1.0/4.5);.else.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // return pow(color
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, 0x20, 0x2b, //  * (1.0/1.099) +
	0x20, 0x28, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, 0x2c, 0x20, //  (0.099/1.099), 
	0x31, 0x2e, 0x30, 0x2f, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // 1.0/0.45);.}.flo
	0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x66, 0x6c, 0x6f, // at InvGamma( flo
	0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, // at color).{.retu
	0x72, 0x6e, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // rn InvsRGB(color
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, // );.}.vec3 InvGam
	0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, // ma( vec3 color).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x49, 0x6e, // {.return vec3(In
	0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, // vGamma(color.x),
	0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, // InvGamma(color.y
	0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // ),InvGamma(color
	0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, // .z));.}.vec3 Inv
	0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, // ToneMap( vec3 co
	0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x69, 0x6e, 0x76, // lor).{.float inv
	0x5f, 0x32, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x30, 0x2e, 0x35, 0x2f, 0x30, 0x2e, 0x32, 0x35, 0x3b, // _2bh = 0.5/0.25;
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x34, 0x2e, 0x30, 0x2a, // .float bh = 4.0*
	0x30, 0x2e, 0x32, 0x35, 0x20, 0x2d, 0x20, 0x32, 0x2e, 0x30, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // 0.25 - 2.0;.retu
	0x72, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, // rn (color - 1.0 
	0x2b, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2a, 0x28, 0x63, 0x6f, // + sqrt(color*(co
	0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x20, 0x62, 0x68, 0x29, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, // lor + bh) + 1.0)
	0x29, 0x2a, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // )*inv_2bh;.}.flo
	0x61, 0x74, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, // at sRGB( float f
	0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, // ).{.float s;.if 
	0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x33, 0x31, 0x33, 0x30, 0x38, 0x29, // (f <= 0.0031308)
	0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, // .s = 12.92 * f;.
	0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x20, 0x2a, // else.s = 1.055 *
	0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x34, 0x29, //  pow(f, 1.0/2.4)
	0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, //  - 0.055;.return
	0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x52, 0x65, 0x63, 0x37, //  s;.}.float Rec7
	0x30, 0x39, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, // 09( float f).{.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, // loat s;.if (f <=
	0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x34, 0x2e, 0x35, 0x20, //  0.018).s = 4.5 
	0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, // * f;.else.s = 1.
	0x30, 0x39, 0x39, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x34, // 099 * pow(f, 0.4
	0x35, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // 5) - 0.099;.retu
	0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, // rn s;.}.float FB
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, // Gamma( float col
	0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x52, 0x47, // or).{.return sRG
	0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, // B(color);.}.vec2
	0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, //  FBGamma( vec2 c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // olor).{.return v
	0x65, 0x63, 0x32, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // ec2(FBGamma(colo
	0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, // r.x),FBGamma(col
	0x6f, 0x72, 0x2e, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, // or.y));.}.vec3 F
	0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, // BGamma( vec3 col
	0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, // or).{.return vec
	0x33, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, // 3(FBGamma(color.
	0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // x),FBGamma(color
	0x2e, 0x79, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // .y),FBGamma(colo
	0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, // r.z));.}.vec3 FB
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x32, 0x32, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, // Gamma22( vec3 co
	0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, // lor).{.return ve
	0x63, 0x33, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x2c, 0x20, // c3(pow(color.x, 
	0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, // 1.0/2.2),pow(col
	0x6f, 0x72, 0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, // or.y, 1.0/2.2),p
	0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, // ow(color.z, 1.0/
	0x32, 0x2e, 0x32, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, // 2.2));.}.float F
	0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // BToneMap( float 
	0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6c, 0x20, 0x2a, 0x20, // l).{.return l * 
	0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, // ((l*0.25 + 1.0) 
	0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // / (l + 1.0));.}.
	0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, // vec2 FBToneMap( 
	0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, // vec2 color).{.fl
	0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // oat l = dot(colo
	0x72, 0x2c, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2b, // r,vec2(0.176204+
	0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x2c, 0x30, 0x2e, // 0.0108109*0.5,0.
	0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, // 812985+0.0108109
	0x2a, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, // *0.5));.return c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, // olor * ((l*0.25 
	0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, // + 1.0) / (l + 1.
	0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x54, 0x6f, // 0));.}.vec3 FBTo
	0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // neMap( vec3 colo
	0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, // r).{.float l = d
	0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, // ot(color,vec3(0.
	0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2c, // 176204,0.812985,
	0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, // 0.0108109));.ret
	0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, // urn color * ((l*
	0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, // 0.25 + 1.0) / (l
	0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, //  + 1.0));.}.vec4
	0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, //  Additive( vec4 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, // cBase, vec4 cBle
	0x6e, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, // nd, float percen
	0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, // t).{.return cBas
	0x65, 0x20, 0x2b, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, // e + cBlend*perce
	0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, // nt;.}.vec3 Scree
	0x6e, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, // n ( vec3 cBase, 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, // vec3 cBlend).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, // eturn 1.0 - (1.0
	0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, //  - cBase) * (1.0
	0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, //  - cBlend);.}.ve
	0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, // c4 Screen ( vec4
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, //  cBase, vec4 cBl
	0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, // end).{.return 1.
	0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, // 0 - (1.0 - cBase
	0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // ) * (1.0 - cBlen
	0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, // d);.}.vec3 Scree
	0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, // nHDR ( vec3 cBas
	0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, // e, vec3 cBlend).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, // {.return max(1.0
	0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, //  - (1.0 - cBase)
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, //  * (1.0 - cBlend
	0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, // ), vec3(0.,0.,0.
	0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, // ));.}.vec4 Scree
	0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, // nHDR ( vec4 cBas
	0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, // e, vec4 cBlend).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, // {.return max(1.0
	0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, //  - (1.0 - cBase)
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, //  * (1.0 - cBlend
	0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, // ), vec4(0.,0.,0.
	0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4d, 0x75, // ,0.));.}.vec4 Mu
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // ltiply ( vec4 cB
	0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, // ase, vec4 cBlend
	0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, // , float percent)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, // .{.return cBase 
	0x2a, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, // * cBlend*percent
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, // ;.}.vec4 Overlay
	0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, //  ( vec4 cBase, v
	0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, // ec4 cBlend).{.ve
	0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, // c4 cNew = step(0
	0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, // .5, cBase);.cNew
	0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, //  = mix(cBase*cBl
	0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, // end*2.0, 1.0-2.0
	0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, // *(1.0-cBase)*(1.
	0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, // 0-cBlend), cNew)
	0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, // ;.return cNew;.}
	0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x48, 0x44, 0x52, // .vec4 OverlayHDR
	0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, //  ( vec4 cBase, v
	0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, // ec4 cBlend).{.ve
	0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, // c4 cNew = step(0
	0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, // .5, cBase);.cNew
	0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, //  = max(mix(cBase
	0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, // *cBlend*2.0, 1.0
	0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, // -2.0*(1.0-cBase)
	0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, // *(1.0-cBlend), c
	0x4e, 0x65, 0x77, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, // New), vec4(0.,0.
	0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // ,0.,0.));.return
	0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, //  cNew;.}.vec3 co
	0x73, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x5f, 0x73, 0x61, 0x6d, // s_hemisphere_sam
	0x70, 0x6c, 0x65, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x66, // ple( vec2 t).{.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x68, 0x69, 0x20, 0x3d, 0x20, 0x74, 0x2e, 0x79, 0x20, 0x2a, // loat phi = t.y *
	0x20, 0x28, 0x32, 0x2e, 0x30, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, //  (2.0*3.14159265
	0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, // 3589793238462643
	0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // 3832795);.float 
	0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, // cosTheta = sqrt(
	0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // 1.0 - t.x);.floa
	0x74, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, // t sinTheta = sqr
	0x74, 0x28, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x70, // t(t.x);.float sp
	0x2c, 0x63, 0x70, 0x3b, 0x0a, 0x7b, 0x73, 0x70, 0x3d, 0x73, 0x69, 0x6e, 0x28, 0x70, 0x68, 0x69, // ,cp;.{sp=sin(phi
	0x29, 0x3b, 0x63, 0x70, 0x3d, 0x63, 0x6f, 0x73, 0x28, 0x70, 0x68, 0x69, 0x29, 0x3b, 0x7d, 0x3b, // );cp=cos(phi);};
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x63, 0x70, 0x20, // .return vec3(cp 
	0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x63, 0x6f, 0x73, 0x54, // * sinTheta, cosT
	0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x73, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, // heta, sp * sinTh
	0x65, 0x74, 0x61, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x6f, 0x74, // eta);.}.vec3 rot
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x70, // ate_to_vector_up
	0x70, 0x65, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x76, // per( vec3 vec, v
	0x65, 0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, // ec3 normal).{.if
	0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x3e, 0x20, 0x2d, 0x30, 0x2e, 0x39, // (normal.y > -0.9
	0x39, 0x39, 0x39, 0x39, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x20, // 9999).{.float h 
	0x3d, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x28, 0x31, 0x2e, 0x30, 0x2b, 0x6e, 0x6f, 0x72, 0x6d, 0x61, // = 1.0/(1.0+norma
	0x6c, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x20, 0x3d, // l.y);.float hz =
	0x20, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, //  h*normal.z;.flo
	0x61, 0x74, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x3d, 0x20, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, // at hzx = hz*norm
	0x61, 0x6c, 0x2e, 0x78, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, // al.x;.return vec
	0x33, 0x28, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, // 3(.vec.x * (norm
	0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, // al.y+hz*normal.z
	0x29, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, // ) + vec.y * norm
	0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x68, // al.x - vec.z * h
	0x7a, 0x78, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, // zx,.vec.y * norm
	0x61, 0x6c, 0x2e, 0x79, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x6e, // al.y - vec.x * n
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, // ormal.x - vec.z 
	0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, // * normal.z,.vec.
	0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x20, 0x2d, 0x20, 0x76, // y * normal.z - v
	0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, // ec.x * hzx + vec
	0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, // .z * (normal.y+h
	0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, // *normal.x*normal
	0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x72, 0x65, 0x74, // .x));.}.else ret
	0x75, 0x72, 0x6e, 0x20, 0x2d, 0x76, 0x65, 0x63, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, // urn -vec;.}.unif
	0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // orm vec4 Stereo_
	0x53, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // Saturation;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // orm vec4 Stereo_
	0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x3b, 0x0a, 0x75, 0x6e, // MS_ZPD_YAxis;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x20, // iform sampler2D 
	0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x3b, 0x0a, 0x75, // tex_stereo_fb;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, // niform sampler2D
	0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, //  tex_stereo_dept
	0x68, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // h;.uniform vec4 
	0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, // w_h_height;.vec3
	0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x28, //  gatherEyeColor(
	0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x69, 0x73, 0x4c, // vec2 u, bool isL
	0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x79, 0x61, 0x78, 0x69, // eft).{.bool yaxi
	0x73, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, // s = (Stereo_MS_Z
	0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x7a, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, // PD_YAxis.z != 0.
	0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, // );.float MaxSepa
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // ration = (Stereo
	0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, // _MS_ZPD_YAxis.x)
	0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, 0x0a, // ;.if (isLeft).{.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, // float lminDepth 
	0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // = min(min(textur
	0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // eLod(tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, // depth, u + (yaxi
	0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, // s ? vec2(0.0, 0.
	0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // 500 * MaxSeparat
	0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, // ion) : vec2(0.50
	0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, // 0 * MaxSeparatio
	0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, // n, 0.0)), 0.0).x
	0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, // ,.textureLod(tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, // _stereo_depth, u
	0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, //  + (yaxis ? vec2
	0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, // (0.0, 0.666 * Ma
	0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, // xSeparation) : v
	0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, // ec2(0.666 * MaxS
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, // eparation, 0.0))
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, // , 0.0).x),.textu
	0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // reLod(tex_stereo
	0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, // _depth, u + (yax
	0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, // is ? vec2(0.0, M
	0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, // axSeparation) : 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // vec2( MaxSeparat
	0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // ion, 0.0)), 0.0)
	0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x70, 0x61, 0x72, 0x61, // .x);.float lpara
	0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, // llax = max(0.0, 
	0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, // w_h_height.w + M
	0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, // axSeparation * (
	0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, // 1.0 - 1.0 / (0.5
	0x20, 0x2b, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, //  + lminDepth * (
	0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, // 1.0 / (Stereo_MS
	0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, // _ZPD_YAxis.y) - 
	0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // 0.5))));.return 
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, // textureLod(tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, // tereo_fb, u + (y
	0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, // axis ? vec2(0.0,
	0x20, 0x2d, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, //  -lparallax) : v
	0x65, 0x63, 0x32, 0x28, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, // ec2(lparallax, 0
	0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, // .0)), 0.0).xyz;.
	0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, // }.else.{.float r
	0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, // minDepth = min(m
	0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, // in(textureLod(te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, // x_stereo_depth, 
	0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, // u - (yaxis ? vec
	0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, // 2(0.0, 0.500 * M
	0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, // axSeparation) : 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, // vec2(0.500 * Max
	0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // Separation, 0.0)
	0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, // ), 0.0).x,.textu
	0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // reLod(tex_stereo
	0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, // _depth, u - (yax
	0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, // is ? vec2(0.0, 0
	0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, // .666 * MaxSepara
	0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, // tion) : vec2(0.6
	0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // 66 * MaxSeparati
	0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, // on, 0.0)), 0.0).
	0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, // x),.textureLod(t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, // ex_stereo_depth,
	0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, //  u - (yaxis ? ve
	0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, // c2(0.0, MaxSepar
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, // ation) : vec2( M
	0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, // axSeparation, 0.
	0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, // 0)), 0.0).x);.fl
	0x6f, 0x61, 0x74, 0x20, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, // oat rparallax = 
	0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, // max(0.0, w_h_hei
	0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, // ght.w + MaxSepar
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, // ation * (1.0 - 1
	0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x6d, 0x69, 0x6e, // .0 / (0.5 + rmin
	0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, // Depth * (1.0 / (
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, // Stereo_MS_ZPD_YA
	0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, // xis.y) - 0.5))))
	0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // ;.return texture
	0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, // Lod(tex_stereo_f
	0x62, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, // b, u - (yaxis ? 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x72, 0x70, 0x61, 0x72, 0x61, // vec2(0.0, -rpara
	0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x72, 0x70, 0x61, // llax) : vec2(rpa
	0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, // rallax, 0.0)), 0
	0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, // .0).xyz;.}.}.voi
	0x64, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x69, 0x67, 0x68, // d gatherLeftRigh
	0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, // tColors(vec2 u, 
	0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x63, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, // out vec3 lcol, o
	0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, // ut vec3 rcol).{.
	0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, // bool yaxis = (St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, // ereo_MS_ZPD_YAxi
	0x73, 0x2e, 0x7a, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // s.z != 0.);.floa
	0x74, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, // t MaxSeparation 
	0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, // = (Stereo_MS_ZPD
	0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // _YAxis.x);.float
	0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, //  lminDepth = min
	0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, // (min(textureLod(
	0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, // tex_stereo_depth
	0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, // , u + (yaxis ? v
	0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, // ec2(0.0, 0.500 *
	0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, //  MaxSeparation) 
	0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, // : vec2(0.500 * M
	0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, // axSeparation, 0.
	0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, // 0)), 0.0).x,.tex
	0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // tureLod(tex_ster
	0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, // eo_depth, u + (y
	0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, // axis ? vec2(0.0,
	0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, //  0.666 * MaxSepa
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, // ration) : vec2(0
	0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, // .666 * MaxSepara
	0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, // tion, 0.0)), 0.0
	0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, // ).x),.textureLod
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, // (tex_stereo_dept
	0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, // h, u + (yaxis ? 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // vec2(0.0, MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // aration) : vec2(
	0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, //  MaxSeparation, 
	0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, // 0.0)), 0.0).x);.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, // float lparallax 
	0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, // = max(0.0, w_h_h
	0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // eight.w + MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, // aration * (1.0 -
	0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x6c, 0x6d, //  1.0 / (0.5 + lm
	0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, // inDepth * (1.0 /
	0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, //  (Stereo_MS_ZPD_
	0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, // YAxis.y) - 0.5))
	0x29, 0x29, 0x3b, 0x0a, 0x6c, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, // ));.lcol = textu
	0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // reLod(tex_stereo
	0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, // _fb, u + (yaxis 
	0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x6c, 0x70, 0x61, // ? vec2(0.0, -lpa
	0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x6c, // rallax) : vec2(l
	0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, // parallax, 0.0)),
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, //  0.0).xyz;.float
	0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, //  rminDepth = min
	0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, // (min(textureLod(
	0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, // tex_stereo_depth
	0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, // , u - (yaxis ? v
	0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, // ec2(0.0, 0.500 *
	0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, //  MaxSeparation) 
	0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, // : vec2(0.500 * M
	0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, // axSeparation, 0.
	0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, // 0)), 0.0).x,.tex
	0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // tureLod(tex_ster
	0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, // eo_depth, u - (y
	0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, // axis ? vec2(0.0,
	0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, //  0.666 * MaxSepa
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, // ration) : vec2(0
	0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, // .666 * MaxSepara
	0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, // tion, 0.0)), 0.0
	0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, // ).x),.textureLod
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, // (tex_stereo_dept
	0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, // h, u - (yaxis ? 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // vec2(0.0, MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // aration) : vec2(
	0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, //  MaxSeparation, 
	0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, // 0.0)), 0.0).x);.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, // float rparallax 
	0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, // = max(0.0, w_h_h
	0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // eight.w + MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, // aration * (1.0 -
	0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x6d, //  1.0 / (0.5 + rm
	0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, // inDepth * (1.0 /
	0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, //  (Stereo_MS_ZPD_
	0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, // YAxis.y) - 0.5))
	0x29, 0x29, 0x3b, 0x0a, 0x72, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, // ));.rcol = textu
	0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // reLod(tex_stereo
	0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, // _fb, u - (yaxis 
	0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x72, 0x70, 0x61, // ? vec2(0.0, -rpa
	0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x72, // rallax) : vec2(r
	0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, // parallax, 0.0)),
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, //  0.0).xyz;.}.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // form mat4 Stereo
	0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // _LeftMat;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, // m mat4 Stereo_Ri
	0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // ghtMat;.uniform 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, // vec4 Stereo_Left
	0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, // Luminance_Gamma;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, // .uniform vec4 St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, // ereo_RightLumina
	0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x3b, 0x0a, 0x76, 0x6f, // nce_DynDesat;.vo
	0x69, 0x64, 0x20, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x65, 0x73, 0x61, 0x74, 0x41, // id DynamicDesatA
	0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, // naglyph( vec3 lC
	0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, // ol, vec3 rCol, o
	0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, // ut vec3 lDesatCo
	0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x44, 0x65, 0x73, // l, out vec3 rDes
	0x61, 0x74, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, // atCol).{.float l
	0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, // eft2LeftLum = do
	0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, // t(lCol, Stereo_L
	0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, // eftLuminance_Gam
	0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, // ma.xyz);.float l
	0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, // eft2RightLum = d
	0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // ot(lCol, Stereo_
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, // RightLuminance_D
	0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, // ynDesat.xyz);.fl
	0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, // oat right2LeftLu
	0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, // m = dot(rCol, St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, // ereo_LeftLuminan
	0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, // ce_Gamma.xyz);.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, // loat right2Right
	0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // Lum = dot(rCol, 
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, // Stereo_RightLumi
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x78, // nance_DynDesat.x
	0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x4c, // yz);.float leftL
	0x75, 0x6d, 0x20, 0x3d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, // um = left2LeftLu
	0x6d, 0x20, 0x2b, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // m + left2RightLu
	0x6d, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // m;.float rightLu
	0x6d, 0x20, 0x3d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, // m = right2LeftLu
	0x6d, 0x20, 0x2b, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, // m + right2RightL
	0x75, 0x6d, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, // um;.float leftDe
	0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, // sat = Stereo_Rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, // htLuminance_DynD
	0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x6c, 0x65, // esat.w * abs((le
	0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x6c, 0x65, 0x66, // ft2LeftLum - lef
	0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, // t2RightLum) / (l
	0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, // eftLum + 0.0001)
	0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, // );.float rightDe
	0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, // sat = Stereo_Rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, // htLuminance_DynD
	0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x72, 0x69, // esat.w * abs((ri
	0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x72, 0x69, // ght2LeftLum - ri
	0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, // ght2RightLum) / 
	0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, // (rightLum + 0.00
	0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, // 01));.lDesatCol 
	0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, // = mix(lCol, vec3
	0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, // _splat(leftLum),
	0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x72, 0x44, 0x65, //  leftDesat);.rDe
	0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x72, 0x43, 0x6f, // satCol = mix(rCo
	0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x72, 0x69, // l, vec3_splat(ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, // ghtLum), rightDe
	0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x4c, 0x69, 0x6e, // sat);.}.vec3 Lin
	0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, 0x63, // earAnaglyph( vec
	0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, // 3 lCol, vec3 rCo
	0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, // l).{.vec3 color 
	0x3d, 0x20, 0x28, 0x28, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, // = (( (vec4(lCol,
	0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, //  1.)) * (Stereo_
	0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x20, 0x28, // LeftMat) ) + ( (
	0x76, 0x65, 0x63, 0x34, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, // vec4(rCol, 1.)) 
	0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, // * (Stereo_RightM
	0x61, 0x74, 0x29, 0x20, 0x29, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // at) )).rgb;.retu
	0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, // rn color;.}.unif
	0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // orm vec4 Stereo_
	0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, 0x6e, // DeghostGamma;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // iform mat4 Stere
	0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3b, // o_DeghostFilter;
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x6e, 0x61, // .vec3 DeghostAna
	0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, // glyph( vec3 lCol
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x76, // , vec3 rCol).{.v
	0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, 0x6e, 0x65, // ec3 color = Line
	0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, // arAnaglyph(lCol,
	0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, //  rCol);.return (
	0x20, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x53, 0x74, 0x65, //  (pow(color, Ste
	0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, // reo_DeghostGamma
	0x2e, 0x72, 0x67, 0x62, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x53, // .rgb)) * (mat3(S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, // tereo_DeghostFil
	0x74, 0x65, 0x72, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, // ter[0].xyz, Ster
	0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, // eo_DeghostFilter
	0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // [1].xyz, Stereo_
	0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x32, 0x5d, // DeghostFilter[2]
	0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, 0x64, // .xyz)) );.}.void
	0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, //  main().{.bgfx_F
	0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, // ragColor = vec4(
	0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x76, // gatherEyeColor(v
	0x65, 0x63, 0x32, 0x28, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2e, // ec2(v_texcoord0.
	0x78, 0x2c, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2e, 0x79, // x, v_texcoord0.y
	0x20, 0x2a, 0x20, 0x32, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, //  * 2.0), v_texco
	0x6f, 0x72, 0x64, 0x30, 0x2e, 0x79, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x2c, 0x20, 0x31, // ord0.y < 0.5), 1
	0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x00,                                                 // .0);.}..
};
static const uint8_t fs_pp_stereo_tb_glsl[10938] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa7, 0x2a, // FSH.o.><.......*
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x34, 0x34, 0x30, 0x0a, 0x6f, // ..#version 440.o
	0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, // ut vec4 bgfx_Fra
	0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, // gColor;.#define 
	0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x62, 0x67, 0x66, // gl_FragColor bgf
	0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x0a, 0x23, 0x64, 0x65, 0x66, // x_FragColor.#def
	0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x20, 0x20, 0x20, // ine texture2D   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x0a, 0x23, //        texture.#
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, // define texture2D
	0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // Lod       textur
	0x65, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, // eLod.#define tex
	0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ture2DGrad      
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, // textureGrad.#def
	0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, // ine texture2DPro
	0x6a, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, // jLod   texturePr
	0x6f, 0x6a, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, // ojLod.#define te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, 0x20, // xture2DProjGrad 
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, //  textureProjGrad
	0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // .#define texture
	0x43, 0x75, 0x62, 0x65, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, // CubeLod     text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, // ureLod.#define t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, // extureCubeGrad  
	0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, //   textureGrad.#d
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x33, 0x44, 0x20, // efine texture3D 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, //          texture
	0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // .#define texture
	0x32, 0x44, 0x4c, 0x6f, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x20, 0x74, 0x65, 0x78, 0x74, // 2DLodOffset text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x0a, 0x23, 0x64, 0x65, // ureLodOffset.#de
	0x66, 0x69, 0x6e, 0x65, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x69, // fine attribute i
	0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, // n.#define varyin
	0x67, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x62, 0x67, 0x66, // g in.#define bgf
	0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, // xShadow2D(_sampl
	0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, // er, _coord)     
	0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, // vec4_splat(textu
	0x72, 0x65, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, // re(_sampler, _co
	0x6f, 0x72, 0x64, 0x29, 0x20, 0x29, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x62, // ord) ).#define b
	0x67, 0x66, 0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x28, // gfxShadow2DProj(
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, // _sampler, _coord
	0x29, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, // ) vec4_splat(tex
	0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // tureProj(_sample
	0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x29, 0x0a, 0x76, 0x61, 0x72, // r, _coord) ).var
	0x79, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, // ying vec2 v_texc
	0x6f, 0x6f, 0x72, 0x64, 0x30, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, // oord0;.vec3 inst
	0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, // Mul(vec3 _vec, m
	0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // at3 _mtx) { retu
	0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, // rn ( (_vec) * (_
	0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, // mtx) ); }.vec3 i
	0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, // nstMul(mat3 _mtx
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, // , vec3 _vec) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, // eturn ( (_mtx) *
	0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, //  (_vec) ); }.vec
	0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, // 4 instMul(vec4 _
	0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, // vec, mat4 _mtx) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, // { return ( (_vec
	0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, // ) * (_mtx) ); }.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, // vec4 instMul(mat
	0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, // 4 _mtx, vec4 _ve
	0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, // c) { return ( (_
	0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, // mtx) * (_vec) );
	0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, 0x70, 0x28, 0x66, 0x6c, 0x6f, //  }.float rcp(flo
	0x61, 0x74, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // at _a) { return 
	0x31, 0x2e, 0x30, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, // 1.0/_a; }.vec2 r
	0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // cp(vec2 _a) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, // turn vec2(1.0)/_
	0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, // a; }.vec3 rcp(ve
	0x63, 0x33, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // c3 _a) { return 
	0x76, 0x65, 0x63, 0x33, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, // vec3(1.0)/_a; }.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x61, // vec4 rcp(vec4 _a
	0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, // ) { return vec4(
	0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, // 1.0)/_a; }.vec2 
	0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, // vec2_splat(float
	0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, //  _x) { return ve
	0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, // c2(_x, _x); }.ve
	0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, // c3 vec3_splat(fl
	0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // oat _x) { return
	0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, //  vec3(_x, _x, _x
	0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, // ); }.vec4 vec4_s
	0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, // plat(float _x) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, //  return vec4(_x,
	0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, //  _x, _x, _x); }.
	0x75, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, // uvec2 uvec2_spla
	0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // t(uint _x) { ret
	0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, // urn uvec2(_x, _x
	0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, // ); }.uvec3 uvec3
	0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, // _splat(uint _x) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, // { return uvec3(_
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, // x, _x, _x); }.uv
	0x65, 0x63, 0x34, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, // ec4 uvec4_splat(
	0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, // uint _x) { retur
	0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, // n uvec4(_x, _x, 
	0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, // _x, _x); }.mat4 
	0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, // mtxFromRows(vec4
	0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, //  _0, vec4 _1, ve
	0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, // c4 _2, vec4 _3).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, // {.return transpo
	0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, // se(mat4(_0, _1, 
	0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, // _2, _3) );.}.mat
	0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, // 4 mtxFromCols(ve
	0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, // c4 _0, vec4 _1, 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, // vec4 _2, vec4 _3
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x28, // ).{.return mat4(
	0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x3b, // _0, _1, _2, _3);
	0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, // .}.mat3 mtxFromR
	0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, // ows(vec3 _0, vec
	0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, // 3 _1, vec3 _2).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, // .return transpos
	0x65, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, // e(mat3(_0, _1, _
	0x32, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, // 2) );.}.mat3 mtx
	0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, // FromCols(vec3 _0
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // , vec3 _1, vec3 
	0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, // _2).{.return mat
	0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x3b, 0x0a, 0x7d, // 3(_0, _1, _2);.}
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, // .uniform vec4 u_
	0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // viewRect;.unifor
	0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x54, 0x65, 0x78, // m vec4 u_viewTex
	0x65, 0x6c, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, // el;.uniform mat4
	0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, //  u_view;.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x3b, //  mat4 u_invView;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, // .uniform mat4 u_
	0x70, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, // proj;.uniform ma
	0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, // t4 u_invProj;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, // iform mat4 u_vie
	0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, // wProj;.uniform m
	0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, // at4 u_invViewPro
	0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, // j;.uniform mat4 
	0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, 0x3b, 0x0a, 0x75, 0x6e, 0x69, // u_model[32];.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, // form mat4 u_mode
	0x6c, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, // lView;.uniform m
	0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x50, // at4 u_modelViewP
	0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, // roj;.uniform vec
	0x34, 0x20, 0x75, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x66, 0x34, 0x3b, 0x0a, 0x66, // 4 u_alphaRef4;.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // loat sqr( float 
	0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, // v).{.return v*v;
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, // .}.vec2 sqr( vec
	0x32, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, // 2 v).{.return v*
	0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x76, // v;.}.vec3 sqr( v
	0x65, 0x63, 0x33, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // ec3 v).{.return 
	0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6d, 0x75, 0x6c, 0x5f, // v*v;.}.vec3 mul_
	0x77, 0x31, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, // w1( vec3 v, mat4
	0x20, 0x6d, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2e, 0x78, //  m).{.return v.x
	0x2a, 0x6d, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x79, // *m[0].xyz + (v.y
	0x2a, 0x6d, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x7a, // *m[1].xyz + (v.z
	0x2a, 0x6d, 0x5b, 0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x6d, 0x5b, 0x33, 0x5d, // *m[2].xyz + m[3]
	0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // .xyz));.}.float 
	0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, // acos_approx_divP
	0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, // I( float v).{.fl
	0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, // oat x = abs(v);.
	0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, // if(1. - x <= 0.0
	0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, // 0006103515625).r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, // eturn (v >= 0.) 
	0x3f, 0x20, 0x30, 0x2e, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // ? 0. : 1.;.float
	0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, //  res = ((-0.1559
	0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, // 72/3.14159265358
	0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, // 9793238462643383
	0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, // 2795) * x + (1.5
	0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, // 6467/3.141592653
	0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, // 5897932384626433
	0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, // 832795) ) * sqrt
	0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // (1. - x);.return
	0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x72, 0x65, 0x73, //  (v >= 0.) ? res
	0x20, 0x3a, 0x20, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, //  : 1. - res;.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, // loat atan2_appro
	0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // x_div2PI( float 
	0x79, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, // y, float x).{.fl
	0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, // oat abs_y = abs(
	0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, // y);.float abs_x 
	0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x78, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x61, 0x62, 0x73, // = abs(x);.if(abs
	0x5f, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, // _x <= 0.00006103
	0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x20, 0x26, 0x26, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, // 515625 && abs_y 
	0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, // <= 0.00006103515
	0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x30, 0x2e, 0x3b, 0x0a, // 625).return 0.;.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, // float r = (abs_x
	0x20, 0x2d, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x61, 0x62, 0x73, //  - abs_y) / (abs
	0x5f, 0x78, 0x20, 0x2b, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, // _x + abs_y);.flo
	0x61, 0x74, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, // at angle = ((x <
	0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x28, 0x33, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x20, 0x3a, //  0.) ? (3./8.) :
	0x20, 0x28, 0x31, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x29, 0x0a, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x32, //  (1./8.)).+ (0.2
	0x31, 0x31, 0x38, 0x36, 0x38, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, // 11868 /(2.*3.141
	0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, // 5926535897932384
	0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, // 626433832795) * 
	0x72, 0x20, 0x2a, 0x20, 0x72, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x39, 0x38, 0x37, 0x33, 0x30, 0x35, // r * r - 0.987305
	0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, //  /(2.*3.14159265
	0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, // 3589793238462643
	0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x78, 0x20, // 3832795)) * ((x 
	0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x72, 0x20, 0x3a, 0x20, 0x72, 0x29, 0x3b, // < 0.) ? -r : r);
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x79, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, // .return (y < 0.)
	0x20, 0x3f, 0x20, 0x2d, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3a, 0x20, 0x61, 0x6e, 0x67, 0x6c, //  ? -angle : angl
	0x65, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x73, 0x69, 0x6e, 0x5f, // e;.}.float asin_
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, // approx_divPI( fl
	0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, // oat v).{.float x
	0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, //  = abs(v);.if(1.
	0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, //  - x <= 0.000061
	0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // 03515625).return
	0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, //  (v >= 0.) ? 0.5
	0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, //  : -0.5;.float r
	0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, // es = ((-0.155972
	0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, // /3.1415926535897
	0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, // 9323846264338327
	0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, // 95) * x + (1.564
	0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, // 67/3.14159265358
	0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, // 9793238462643383
	0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, // 2795) ) * sqrt(1
	0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // . - x);.return (
	0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x2d, // v >= 0.) ? 0.5 -
	0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x65, //  res : -0.5 + re
	0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x61, 0x79, 0x5f, 0x74, 0x6f, // s;.}.vec2 ray_to
	0x5f, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, // _equirectangular
	0x5f, 0x75, 0x76, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x61, 0x79, 0x29, 0x0a, 0x7b, // _uv( vec3 ray).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x0a, 0x30, 0x2e, // .return vec2(.0.
	0x35, 0x20, 0x2b, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, // 5 + atan2_approx
	0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x79, 0x2c, 0x20, 0x72, // _div2PI(ray.y, r
	0x61, 0x79, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, // ay.x),.acos_appr
	0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x7a, 0x29, 0x29, // ox_divPI(ray.z))
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, // ;.}.float InvsRG
	0x42, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, // B( float color).
	0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, // {.if (color <= 0
	0x2e, 0x30, 0x34, 0x30, 0x34, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, // .04045).return c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x32, 0x2e, 0x39, // olor * (1.0/12.9
	0x32, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // 2);.else.return 
	0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, // pow(color * (1.0
	0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x35, 0x35, // /1.055) + (0.055
	0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x29, 0x3b, 0x0a, 0x7d, // /1.055), 2.4);.}
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, // .float InvRec709
	0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, // ( float color).{
	0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, // .if (color <= 0.
	0x30, 0x38, 0x31, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // 081).return colo
	0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x34, 0x2e, 0x35, 0x29, 0x3b, 0x0a, 0x65, // r * (1.0/4.5);.e
	0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, // lse.return pow(c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x39, // olor * (1.0/1.09
	0x39, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x2f, 0x31, 0x2e, 0x30, 0x39, // 9) + (0.099/1.09
	0x39, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x3b, 0x0a, 0x7d, // 9), 1.0/0.45);.}
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, // .float InvGamma(
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, //  float color).{.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, // return InvsRGB(c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, // olor);.}.vec3 In
	0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, // vGamma( vec3 col
	0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, // or).{.return vec
	0x33, 0x28, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // 3(InvGamma(color
	0x2e, 0x78, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, // .x),InvGamma(col
	0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, // or.y),InvGamma(c
	0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, // olor.z));.}.vec3
	0x20, 0x49, 0x6e, 0x76, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, //  InvToneMap( vec
	0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // 3 color).{.float
	0x20, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x30, 0x2e, 0x35, 0x2f, 0x30, //  inv_2bh = 0.5/0
	0x2e, 0x32, 0x35, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x68, 0x20, 0x3d, 0x20, // .25;.float bh = 
	0x34, 0x2e, 0x30, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2d, 0x20, 0x32, 0x2e, 0x30, 0x3b, 0x0a, // 4.0*0.25 - 2.0;.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2d, 0x20, // return (color - 
	0x31, 0x2e, 0x30, 0x20, 0x2b, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // 1.0 + sqrt(color
	0x2a, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x20, 0x62, 0x68, 0x29, 0x20, 0x2b, 0x20, // *(color + bh) + 
	0x31, 0x2e, 0x30, 0x29, 0x29, 0x2a, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x3b, 0x0a, 0x7d, // 1.0))*inv_2bh;.}
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x20, 0x66, 0x6c, 0x6f, // .float sRGB( flo
	0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, // at f).{.float s;
	0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x33, 0x31, // .if (f <= 0.0031
	0x33, 0x30, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x20, 0x2a, // 308).s = 12.92 *
	0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, //  f;.else.s = 1.0
	0x35, 0x35, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, // 55 * pow(f, 1.0/
	0x32, 0x2e, 0x34, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x3b, 0x0a, 0x72, 0x65, // 2.4) - 0.055;.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // turn s;.}.float 
	0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, // Rec709( float f)
	0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, // .{.float s;.if (
	0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, // f <= 0.018).s = 
	0x34, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, // 4.5 * f;.else.s 
	0x3d, 0x20, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, // = 1.099 * pow(f,
	0x20, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x3b, 0x0a, //  0.45) - 0.099;.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // return s;.}.floa
	0x74, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // t FBGamma( float
	0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, //  color).{.return
	0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, //  sRGB(color);.}.
	0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, // vec2 FBGamma( ve
	0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, // c2 color).{.retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, // rn vec2(FBGamma(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, // color.x),FBGamma
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // (color.y));.}.ve
	0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, // c3 FBGamma( vec3
	0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, //  color).{.return
	0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, //  vec3(FBGamma(co
	0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, // lor.x),FBGamma(c
	0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, // olor.y),FBGamma(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // color.z));.}.vec
	0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x32, 0x32, 0x28, 0x20, 0x76, 0x65, 0x63, // 3 FBGamma22( vec
	0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // 3 color).{.retur
	0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // n vec3(pow(color
	0x2e, 0x78, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, // .x, 1.0/2.2),pow
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, // (color.y, 1.0/2.
	0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x2c, 0x20, // 2),pow(color.z, 
	0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // 1.0/2.2));.}.flo
	0x61, 0x74, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x66, 0x6c, // at FBToneMap( fl
	0x6f, 0x61, 0x74, 0x20, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // oat l).{.return 
	0x6c, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, // l * ((l*0.25 + 1
	0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, // .0) / (l + 1.0))
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, // ;.}.vec2 FBToneM
	0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, // ap( vec2 color).
	0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, // {.float l = dot(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, // color,vec2(0.176
	0x32, 0x30, 0x34, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, // 204+0.0108109*0.
	0x35, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, // 5,0.812985+0.010
	0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // 8109*0.5));.retu
	0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, // rn color * ((l*0
	0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, // .25 + 1.0) / (l 
	0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // + 1.0));.}.vec3 
	0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // FBToneMap( vec3 
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, // color).{.float l
	0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, //  = dot(color,vec
	0x33, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, // 3(0.176204,0.812
	0x39, 0x38, 0x35, 0x2c, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x29, 0x29, 0x3b, // 985,0.0108109));
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, // .return color * 
	0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, // ((l*0.25 + 1.0) 
	0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // / (l + 1.0));.}.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x28, 0x20, 0x76, // vec4 Additive( v
	0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // ec4 cBase, vec4 
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, // cBlend, float pe
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // rcent).{.return 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2b, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, // cBase + cBlend*p
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, // ercent;.}.vec3 S
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, // creen ( vec3 cBa
	0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, // se, vec3 cBlend)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, // .{.return 1.0 - 
	0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, // (1.0 - cBase) * 
	0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, // (1.0 - cBlend);.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x20, // }.vec4 Screen ( 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // vec4 cBase, vec4
	0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, //  cBlend).{.retur
	0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, // n 1.0 - (1.0 - c
	0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, // Base) * (1.0 - c
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, // Blend);.}.vec3 S
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // creenHDR ( vec3 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, // cBase, vec3 cBle
	0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, // nd).{.return max
	0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, // (1.0 - (1.0 - cB
	0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, // ase) * (1.0 - cB
	0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x2c, 0x30, // lend), vec3(0.,0
	0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, // .,0.));.}.vec4 S
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // creenHDR ( vec4 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, // cBase, vec4 cBle
	0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, // nd).{.return max
	0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, // (1.0 - (1.0 - cB
	0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, // ase) * (1.0 - cB
	0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, // lend), vec4(0.,0
	0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // .,0.,0.));.}.vec
	0x34, 0x20, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, // 4 Multiply ( vec
	0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // 4 cBase, vec4 cB
	0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, // lend, float perc
	0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, // ent).{.return cB
	0x61, 0x73, 0x65, 0x20, 0x2a, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, // ase * cBlend*per
	0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, // cent;.}.vec4 Ove
	0x72, 0x6c, 0x61, 0x79, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, // rlay ( vec4 cBas
	0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, // e, vec4 cBlend).
	0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, // {.vec4 cNew = st
	0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, // ep(0.5, cBase);.
	0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, // cNew = mix(cBase
	0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, // *cBlend*2.0, 1.0
	0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, // -2.0*(1.0-cBase)
	0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, // *(1.0-cBlend), c
	0x4e, 0x65, 0x77, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, // New);.return cNe
	0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, // w;.}.vec4 Overla
	0x79, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, // yHDR ( vec4 cBas
	0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, // e, vec4 cBlend).
	0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, // {.vec4 cNew = st
	0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, // ep(0.5, cBase);.
	0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x6d, 0x69, 0x78, 0x28, 0x63, // cNew = max(mix(c
	0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, // Base*cBlend*2.0,
	0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, //  1.0-2.0*(1.0-cB
	0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, // ase)*(1.0-cBlend
	0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, // ), cNew), vec4(0
	0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, // .,0.,0.,0.));.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // turn cNew;.}.vec
	0x33, 0x20, 0x63, 0x6f, 0x73, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, // 3 cos_hemisphere
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x29, // _sample( vec2 t)
	0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x68, 0x69, 0x20, 0x3d, 0x20, 0x74, // .{.float phi = t
	0x2e, 0x79, 0x20, 0x2a, 0x20, 0x28, 0x32, 0x2e, 0x30, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, // .y * (2.0*3.1415
	0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, // 9265358979323846
	0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x3b, 0x0a, 0x66, 0x6c, // 26433832795);.fl
	0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, // oat cosTheta = s
	0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, // qrt(1.0 - t.x);.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, // float sinTheta =
	0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, //  sqrt(t.x);.floa
	0x74, 0x20, 0x73, 0x70, 0x2c, 0x63, 0x70, 0x3b, 0x0a, 0x7b, 0x73, 0x70, 0x3d, 0x73, 0x69, 0x6e, // t sp,cp;.{sp=sin
	0x28, 0x70, 0x68, 0x69, 0x29, 0x3b, 0x63, 0x70, 0x3d, 0x63, 0x6f, 0x73, 0x28, 0x70, 0x68, 0x69, // (phi);cp=cos(phi
	0x29, 0x3b, 0x7d, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, // );};.return vec3
	0x28, 0x63, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, // (cp * sinTheta, 
	0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x73, 0x70, 0x20, 0x2a, 0x20, 0x73, // cosTheta, sp * s
	0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, // inTheta);.}.vec3
	0x20, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, //  rotate_to_vecto
	0x72, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, // r_upper( vec3 ve
	0x63, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x29, 0x0a, // c, vec3 normal).
	0x7b, 0x0a, 0x69, 0x66, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x3e, 0x20, // {.if(normal.y > 
	0x2d, 0x30, 0x2e, 0x39, 0x39, 0x39, 0x39, 0x39, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // -0.99999).{.floa
	0x74, 0x20, 0x68, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x28, 0x31, 0x2e, 0x30, 0x2b, 0x6e, // t h = 1.0/(1.0+n
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // ormal.y);.float 
	0x68, 0x7a, 0x20, 0x3d, 0x20, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x3b, // hz = h*normal.z;
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x3d, 0x20, 0x68, 0x7a, 0x2a, // .float hzx = hz*
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // normal.x;.return
	0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x28, //  vec3(.vec.x * (
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, // normal.y+hz*norm
	0x61, 0x6c, 0x2e, 0x7a, 0x29, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, // al.z) + vec.y * 
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, // normal.x - vec.z
	0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, //  * hzx,.vec.y * 
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, // normal.y - vec.x
	0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, //  * normal.x - ve
	0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x2c, 0x0a, // c.z * normal.z,.
	0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, // vec.y * normal.z
	0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x2b, //  - vec.x * hzx +
	0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, //  vec.z * (normal
	0x2e, 0x79, 0x2b, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x2a, 0x6e, 0x6f, // .y+h*normal.x*no
	0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, // rmal.x));.}.else
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x2d, 0x76, 0x65, 0x63, 0x3b, 0x0a, 0x7d, 0x0a, //  return -vec;.}.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, // uniform vec4 Ste
	0x72, 0x65, 0x6f, 0x5f, 0x53, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x0a, // reo_Saturation;.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, // uniform vec4 Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, // reo_MS_ZPD_YAxis
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // ;.uniform sample
	0x72, 0x32, 0x44, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, // r2D tex_stereo_f
	0x62, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, // b;.uniform sampl
	0x65, 0x72, 0x32, 0x44, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // er2D tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, // depth;.uniform v
	0x65, 0x63, 0x34, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, // ec4 w_h_height;.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, // vec3 gatherEyeCo
	0x6c, 0x6f, 0x72, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, // lor(vec2 u, bool
	0x20, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x20, //  isLeft).{.bool 
	0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // yaxis = (Stereo_
	0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x7a, 0x20, 0x21, // MS_ZPD_YAxis.z !
	0x3d, 0x20, 0x30, 0x2e, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x4d, 0x61, 0x78, // = 0.);.float Max
	0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, // Separation = (St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, // ereo_MS_ZPD_YAxi
	0x73, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, // s.x);.if (isLeft
	0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, // ).{.float lminDe
	0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, // pth = min(min(te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, // xtureLod(tex_ste
	0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, // reo_depth, u + (
	0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, // yaxis ? vec2(0.0
	0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // , 0.500 * MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // aration) : vec2(
	0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, // 0.500 * MaxSepar
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, // ation, 0.0)), 0.
	0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, // 0).x,.textureLod
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, // (tex_stereo_dept
	0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, // h, u + (yaxis ? 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, // vec2(0.0, 0.666 
	0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, // * MaxSeparation)
	0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, //  : vec2(0.666 * 
	0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, // MaxSeparation, 0
	0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, // .0)), 0.0).x),.t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // extureLod(tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, // ereo_depth, u + 
	0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, // (yaxis ? vec2(0.
	0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, // 0, MaxSeparation
	0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // ) : vec2( MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, // aration, 0.0)), 
	0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, // 0.0).x);.float l
	0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, // parallax = max(0
	0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, // .0, w_h_height.w
	0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, //  + MaxSeparation
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, //  * (1.0 - 1.0 / 
	0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, // (0.5 + lminDepth
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, //  * (1.0 / (Stere
	0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, // o_MS_ZPD_YAxis.y
	0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, // ) - 0.5))));.ret
	0x75, 0x72, 0x6e, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, // urn textureLod(t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, // ex_stereo_fb, u 
	0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // + (yaxis ? vec2(
	0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, // 0.0, -lparallax)
	0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, //  : vec2(lparalla
	0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, // x, 0.0)), 0.0).x
	0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, // yz;.}.else.{.flo
	0x61, 0x74, 0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, // at rminDepth = m
	0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, // in(min(textureLo
	0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, // d(tex_stereo_dep
	0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, // th, u - (yaxis ?
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, //  vec2(0.0, 0.500
	0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, //  * MaxSeparation
	0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, // ) : vec2(0.500 *
	0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, //  MaxSeparation, 
	0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, // 0.0)), 0.0).x,.t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // extureLod(tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, // ereo_depth, u - 
	0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, // (yaxis ? vec2(0.
	0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, // 0, 0.666 * MaxSe
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, // paration) : vec2
	0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, // (0.666 * MaxSepa
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, // ration, 0.0)), 0
	0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, // .0).x),.textureL
	0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, // od(tex_stereo_de
	0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, // pth, u - (yaxis 
	0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, // ? vec2(0.0, MaxS
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, // eparation) : vec
	0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, // 2( MaxSeparation
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, // , 0.0)), 0.0).x)
	0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, // ;.float rparalla
	0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, // x = max(0.0, w_h
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, // _height.w + MaxS
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, // eparation * (1.0
	0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, //  - 1.0 / (0.5 + 
	0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, // rminDepth * (1.0
	0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, //  / (Stereo_MS_ZP
	0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, // D_YAxis.y) - 0.5
	0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x65, 0x78, // ))));.return tex
	0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // tureLod(tex_ster
	0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, // eo_fb, u - (yaxi
	0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x72, // s ? vec2(0.0, -r
	0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, // parallax) : vec2
	0x28, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // (rparallax, 0.0)
	0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x7d, // ), 0.0).xyz;.}.}
	0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, // .void gatherLeft
	0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x28, 0x76, 0x65, 0x63, 0x32, // RightColors(vec2
	0x20, 0x75, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x63, 0x6f, //  u, out vec3 lco
	0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x6f, 0x6c, // l, out vec3 rcol
	0x29, 0x0a, 0x7b, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3d, // ).{.bool yaxis =
	0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, //  (Stereo_MS_ZPD_
	0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x7a, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x3b, 0x0a, // YAxis.z != 0.);.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // float MaxSeparat
	0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, // ion = (Stereo_MS
	0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, // _ZPD_YAxis.x);.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, // loat lminDepth =
	0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, //  min(min(texture
	0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, // Lod(tex_stereo_d
	0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, // epth, u + (yaxis
	0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, //  ? vec2(0.0, 0.5
	0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // 00 * MaxSeparati
	0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, // on) : vec2(0.500
	0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, //  * MaxSeparation
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, // , 0.0)), 0.0).x,
	0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, // .textureLod(tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, // stereo_depth, u 
	0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // + (yaxis ? vec2(
	0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, // 0.0, 0.666 * Max
	0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, // Separation) : ve
	0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, // c2(0.666 * MaxSe
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, // paration, 0.0)),
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, //  0.0).x),.textur
	0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // eLod(tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, // depth, u + (yaxi
	0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, // s ? vec2(0.0, Ma
	0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, // xSeparation) : v
	0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // ec2( MaxSeparati
	0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, // on, 0.0)), 0.0).
	0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, // x);.float lparal
	0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, // lax = max(0.0, w
	0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, // _h_height.w + Ma
	0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, // xSeparation * (1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, // .0 - 1.0 / (0.5 
	0x2b, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, // + lminDepth * (1
	0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, // .0 / (Stereo_MS_
	0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, // ZPD_YAxis.y) - 0
	0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x6c, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, // .5))));.lcol = t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // extureLod(tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, // ereo_fb, u + (ya
	0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, // xis ? vec2(0.0, 
	0x2d, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, // -lparallax) : ve
	0x63, 0x32, 0x28, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, // c2(lparallax, 0.
	0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x66, // 0)), 0.0).xyz;.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, // loat rminDepth =
	0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, //  min(min(texture
	0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, // Lod(tex_stereo_d
	0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, // epth, u - (yaxis
	0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, //  ? vec2(0.0, 0.5
	0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // 00 * MaxSeparati
	0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, // on) : vec2(0.500
	0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, //  * MaxSeparation
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, // , 0.0)), 0.0).x,
	0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, // .textureLod(tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, // stereo_depth, u 
	0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // - (yaxis ? vec2(
	0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, // 0.0, 0.666 * Max
	0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, // Separation) : ve
	0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, // c2(0.666 * MaxSe
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, // paration, 0.0)),
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, //  0.0).x),.textur
	0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // eLod(tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, // depth, u - (yaxi
	0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, // s ? vec2(0.0, Ma
	0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, // xSeparation) : v
	0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // ec2( MaxSeparati
	0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, // on, 0.0)), 0.0).
	0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, // x);.float rparal
	0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, // lax = max(0.0, w
	0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, // _h_height.w + Ma
	0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, // xSeparation * (1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, // .0 - 1.0 / (0.5 
	0x2b, 0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, // + rminDepth * (1
	0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, // .0 / (Stereo_MS_
	0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, // ZPD_YAxis.y) - 0
	0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, // .5))));.rcol = t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // extureLod(tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, // ereo_fb, u - (ya
	0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, // xis ? vec2(0.0, 
	0x2d, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, // -rparallax) : ve
	0x63, 0x32, 0x28, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, // c2(rparallax, 0.
	0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, // 0)), 0.0).xyz;.}
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, // .uniform mat4 St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, // ereo_LeftMat;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // iform mat4 Stere
	0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // o_RightMat;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // orm vec4 Stereo_
	0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, // LeftLuminance_Ga
	0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, // mma;.uniform vec
	0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // 4 Stereo_RightLu
	0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, // minance_DynDesat
	0x3b, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x65, // ;.void DynamicDe
	0x73, 0x61, 0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, 0x63, // satAnaglyph( vec
	0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, // 3 lCol, vec3 rCo
	0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x44, 0x65, 0x73, // l, out vec3 lDes
	0x61, 0x74, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // atCol, out vec3 
	0x72, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, // rDesatCol).{.flo
	0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, // at left2LeftLum 
	0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, // = dot(lCol, Ster
	0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, // eo_LeftLuminance
	0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, // _Gamma.xyz);.flo
	0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, // at left2RightLum
	0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, //  = dot(lCol, Ste
	0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, // reo_RightLuminan
	0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, // ce_DynDesat.xyz)
	0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, // ;.float right2Le
	0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, // ftLum = dot(rCol
	0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // , Stereo_LeftLum
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, // inance_Gamma.xyz
	0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, // );.float right2R
	0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, // ightLum = dot(rC
	0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, // ol, Stereo_Right
	0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, // Luminance_DynDes
	0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, // at.xyz);.float l
	0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, // eftLum = left2Le
	0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, // ftLum + left2Rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, // htLum;.float rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, // htLum = right2Le
	0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, // ftLum + right2Ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, // ghtLum;.float le
	0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // ftDesat = Stereo
	0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, // _RightLuminance_
	0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, // DynDesat.w * abs
	0x28, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, // ((left2LeftLum -
	0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, //  left2RightLum) 
	0x2f, 0x20, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, // / (leftLum + 0.0
	0x30, 0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, // 001));.float rig
	0x68, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // htDesat = Stereo
	0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, // _RightLuminance_
	0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, // DynDesat.w * abs
	0x28, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, // ((right2LeftLum 
	0x2d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, // - right2RightLum
	0x29, 0x20, 0x2f, 0x20, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, // ) / (rightLum + 
	0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, // 0.0001));.lDesat
	0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // Col = mix(lCol, 
	0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, // vec3_splat(leftL
	0x75, 0x6d, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, // um), leftDesat);
	0x0a, 0x72, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, // .rDesatCol = mix
	0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, // (rCol, vec3_spla
	0x74, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, 0x72, 0x69, 0x67, // t(rightLum), rig
	0x68, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, // htDesat);.}.vec3
	0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, //  LinearAnaglyph(
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, //  vec3 lCol, vec3
	0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, //  rCol).{.vec3 co
	0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x6c, // lor = (( (vec4(l
	0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, // Col, 1.)) * (Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x20, 0x2b, // reo_LeftMat) ) +
	0x20, 0x28, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, //  ( (vec4(rCol, 1
	0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, // .)) * (Stereo_Ri
	0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, // ghtMat) )).rgb;.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x7d, 0x0a, // return color;.}.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, // uniform vec4 Ste
	0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, // reo_DeghostGamma
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, // ;.uniform mat4 S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, // tereo_DeghostFil
	0x74, 0x65, 0x72, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, // ter;.vec3 Deghos
	0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // tAnaglyph( vec3 
	0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, // lCol, vec3 rCol)
	0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, // .{.vec3 color = 
	0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, // LinearAnaglyph(l
	0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // Col, rCol);.retu
	0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, // rn ( (pow(color,
	0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, //  Stereo_DeghostG
	0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x72, 0x67, 0x62, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x6d, 0x61, // amma.rgb)) * (ma
	0x74, 0x33, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, // t3(Stereo_Deghos
	0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, // tFilter[0].xyz, 
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, // Stereo_DeghostFi
	0x6c, 0x74, 0x65, 0x72, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, // lter[1].xyz, Ste
	0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, // reo_DeghostFilte
	0x72, 0x5b, 0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // r[2].xyz)) );.}.
	0x76, 0x6f, 0x69, 0x64, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x67, 0x6c, // void main().{.gl
	0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, // _FragColor = vec
	0x34, 0x28, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, // 4(gatherEyeColor
	0x28, 0x76, 0x65, 0x63, 0x32, 0x28, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, // (vec2(v_texcoord
	0x30, 0x2e, 0x78, 0x2c, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, // 0.x, v_texcoord0
	0x2e, 0x79, 0x20, 0x2a, 0x20, 0x32, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, // .y * 2.0), v_tex
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2e, 0x79, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x2c, // coord0.y < 0.5),
	0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x00,                                     //  1.0);.}..
};
static const uint8_t fs_pp_stereo_tb_dx11[2507] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x13, 0x53, // FSH.o.><.......S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, // tereo_MS_ZPD_YAx
	0x69, 0x73, 0x12, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x77, 0x5f, 0x68, // is...........w_h
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, // _height.........
	0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x30, // ..tex_stereo_fb0
	0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // ..........tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x30, 0x01, 0x01, 0x00, 0x01, 0x00, // ereo_depth0.....
	0x00, 0x00, 0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // .....tex_stereo_
	0x66, 0x62, 0x30, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x74, 0x65, 0x78, // fb0..........tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x30, 0x01, 0x01, // _stereo_depth0..
	0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x09, 0x00, 0x00, 0x44, 0x58, 0x42, 0x43, 0x01, // ...........DXBC.
	0xef, 0xa3, 0x61, 0x04, 0xc6, 0xd7, 0x90, 0x84, 0x49, 0x52, 0xde, 0xb7, 0x22, 0xc3, 0x0a, 0x01, // ..a.....IR.."...
	0x00, 0x00, 0x00, 0x1c, 0x09, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x84, // ...........,....
	0x00, 0x00, 0x00, 0xb8, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x4e, 0x50, 0x00, 0x00, 0x00, 0x02, // .......ISGNP....
	0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, // .......8........
	0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x44, // ...............D
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, // .......SV_POSITI
	0x4f, 0x4e, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0xab, 0xab, 0xab, 0x4f, // ON.TEXCOORD....O
	0x53, 0x47, 0x4e, 0x2c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x20, // SGN,........... 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, // .......SV_TARGET
	0x00, 0xab, 0xab, 0x53, 0x48, 0x45, 0x58, 0x5c, 0x08, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x17, // ...SHEX....P....
	0x02, 0x00, 0x00, 0x6a, 0x08, 0x00, 0x01, 0x59, 0x00, 0x00, 0x04, 0x46, 0x8e, 0x20, 0x00, 0x00, // ...j...Y...F. ..
	0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x03, 0x00, 0x60, 0x10, 0x00, 0x00, // .......Z....`...
	0x00, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x03, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x58, // ...Z....`......X
	0x18, 0x00, 0x04, 0x00, 0x70, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x55, 0x00, 0x00, 0x58, // ....p......UU..X
	0x18, 0x00, 0x04, 0x00, 0x70, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x55, 0x55, 0x00, 0x00, 0x62, // ....p......UU..b
	0x10, 0x00, 0x03, 0x32, 0x10, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x03, 0xf2, // ...2.......e....
	0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x02, 0x03, 0x00, 0x00, 0x00, 0x31, //  ......h.......1
	0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x10, 0x10, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x39, 0x00, 0x00, 0x08, 0x22, // ....@.....?9..."
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .......*. ......
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x04, 0x03, 0x0a, // ....@...........
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x08, 0x52, 0x00, 0x10, 0x00, 0x01, // .......6...R....
	0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ....@...........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x0b, 0xa2, 0x00, 0x10, 0x00, 0x01, // .......8........
	0x00, 0x00, 0x00, 0x06, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, // ..... ..........
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0xfa, // @.........?.....
	0x7e, 0x2a, 0x3f, 0x37, 0x00, 0x00, 0x09, 0xf2, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x56, // ~*?7...........V
	0x05, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x16, // .......F........
	0x0b, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x0c, 0xf2, 0x00, 0x10, 0x00, 0x01, // .......2........
	0x00, 0x00, 0x00, 0x46, 0x14, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, // ...F........@...
	0x00, 0x80, 0x3f, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x00, 0x40, 0x46, // ..?...@...?...@F
	0x0e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, // .......H.......C
	0x55, 0x15, 0x00, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x01, // U..........F....
	0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, // ...F~.......`...
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, // ....@......H....
	0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x42, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe6, // ...CU..B........
	0x0a, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x96, 0x7c, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, // ........|.......
	0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, // `.......@......3
	0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x00, // ...........*....
	0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x08, 0x52, // ...........6...R
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........@.......
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x06, 0x22, // ...........6..."
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ......... ......
	0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x09, 0xc2, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x56, // ...7...........V
	0x05, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x04, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x56, // ...............V
	0x01, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x0c, 0xc2, 0x00, 0x10, 0x00, 0x00, // .......2........
	0x00, 0x00, 0x00, 0x06, 0x14, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, // ............@...
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x00, 0x40, 0xa6, // ..........?...@.
	0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, // .......H.......C
	0x55, 0x15, 0x00, 0x42, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x00, // U..B............
	0x00, 0x00, 0x00, 0x96, 0x7c, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, // ....|.......`...
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x07, 0x12, // ....@......3....
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, // .......*........
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x0b, 0x42, 0x00, 0x10, 0x00, 0x00, // ...........B....
	0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, // ....@.....?...?.
	0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x1a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ..?...?.. ......
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x42, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, // .......B.......*
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0x32, // ........@......2
	0x00, 0x00, 0x09, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, // ...*........@...
	0x00, 0x00, 0x3f, 0x0e, 0x00, 0x00, 0x0a, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, // ..?.............
	0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, // @.....?...?...?.
	0x00, 0x80, 0x3f, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x12, // ..?.............
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x00, // ...........A....
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x32, 0x00, 0x00, 0x0b, 0x12, // ....@.....?2....
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ......... ......
	0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, 0x80, 0x20, 0x00, 0x00, // ...........:. ..
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x01, // .......4........
	0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, // ............@...
	0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x06, 0x82, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, // ...6............
	0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x22, // ...A.......6..."
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, // ........@......7
	0x00, 0x00, 0x09, 0x52, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x56, 0x05, 0x10, 0x00, 0x00, // ...R.......V....
	0x00, 0x00, 0x00, 0xa6, 0x0b, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x01, 0x10, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x0c, 0x52, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, // ...2...R........
	0x11, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, // ........@.....?.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x06, 0x02, 0x10, 0x00, 0x00, // ......@.........
	0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0xd2, // ...H.......CU...
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, // ................
	0x79, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, // y.......`.......
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x01, 0x36, 0x00, 0x00, 0x08, 0x52, // @..........6...R
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........@.......
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x0b, 0xa2, // ...........8....
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ......... ......
	0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, // ....@.........?.
	0x00, 0x00, 0x00, 0xfa, 0x7e, 0x2a, 0x3f, 0x37, 0x00, 0x00, 0x09, 0xf2, 0x00, 0x10, 0x00, 0x01, // ....~*?7........
	0x00, 0x00, 0x00, 0x56, 0x05, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x01, // ...V.......F....
	0x00, 0x00, 0x00, 0x16, 0x0b, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x0d, 0xf2, // ...........2....
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x14, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, // .......F........
	0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x80, 0x3f, 0x00, // @.....?...@...?.
	0x00, 0x00, 0x40, 0x46, 0x0e, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x48, // ..@F...A.......H
	0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x12, 0x00, 0x10, 0x00, 0x01, // .......CU.......
	0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, 0x01, // ...F.......F~...
	0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, // ....`.......@...
	0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x22, // ...H.......CU.."
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x16, // ................
	0x7e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, // ~.......`.......
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x01, // @......3........
	0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x08, 0x52, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, // ...6...R........
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // @...............
	0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x06, 0x22, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0a, // ...6..."........
	0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x09, 0x62, // . .........7...b
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x56, 0x05, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, // .......V........
	0x01, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x56, 0x04, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x32, // .......V.......2
	0x00, 0x00, 0x0d, 0x62, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x11, 0x10, 0x00, 0x01, // ...b............
	0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, // ....@.........?.
	0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x56, 0x06, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x01, // ..@....V...A....
	0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x22, // ...H.......CU.."
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x96, 0x05, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x16, // ................
	0x7e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, // ~.......`.......
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x01, // @......3........
	0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x0b, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, // ......."........
	0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, // @.....?...?...?.
	0x00, 0x80, 0x3f, 0x1a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ..?.. ..........
	0x00, 0x00, 0x07, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, // ..."............
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0x32, 0x00, 0x00, 0x09, 0x12, // ....@......2....
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, // ................
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x0e, // ........@.....?.
	0x00, 0x00, 0x0a, 0x12, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, // ............@...
	0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x0a, // ..?...?...?...?.
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x12, 0x00, 0x10, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, // .......A........
	0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x32, 0x00, 0x00, 0x0b, 0x12, 0x00, 0x10, 0x00, 0x01, // @.....?2........
	0x00, 0x00, 0x00, 0x0a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, // ..... ..........
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, // .......:. ......
	0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, // ...4............
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, // ........@......6
	0x00, 0x00, 0x06, 0x82, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x80, 0x41, // ...............A
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x22, 0x00, 0x10, 0x00, 0x01, // .......6..."....
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x09, 0x32, // ....@......7...2
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x56, 0x05, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe6, // .......V........
	0x0a, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, // .......F.......2
	0x00, 0x00, 0x0d, 0x32, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x10, 0x10, 0x00, 0x01, // ...2.......F....
	0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x00, 0x40, 0x00, // ....@.....?...@.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x01, // .......F...A....
	0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0xd2, // ...H.......CU...
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0xc6, // .......F........
	0x79, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, // y.......`.......
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x01, 0x36, 0x00, 0x00, 0x05, 0x72, // @..........6...r
	0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x03, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, //  ..............6
	0x00, 0x00, 0x05, 0x82, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, // .... .......@...
	0x00, 0x80, 0x3f, 0x3e, 0x00, 0x00, 0x01, 0x00, 0x00, 0x20, 0x00,                               // ..?>..... .
};
static const uint8_t fs_pp_stereo_tb_spv[4172] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x13, 0x53, // FSH.o.><.......S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, // tereo_MS_ZPD_YAx
	0x69, 0x73, 0x12, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x77, 0x5f, 0x68, // is...........w_h
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x01, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, // _height.........
	0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x30, // ..tex_stereo_fb0
	0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x02, 0x22, 0x00, 0x10, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // ......."..tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x30, 0x00, 0x03, 0x00, 0x00, 0x00, // ereo_depth0.....
	0x00, 0x02, 0x22, 0x00, 0xd0, 0x0f, 0x00, 0x00, 0x03, 0x02, 0x23, 0x07, 0x00, 0x00, 0x01, 0x00, // ..".......#.....
	0x0b, 0x00, 0x08, 0x00, 0x9e, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x02, 0x00, // ................
	0x01, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, 0x4c, 0x53, 0x4c, // ............GLSL
	0x2e, 0x73, 0x74, 0x64, 0x2e, 0x34, 0x35, 0x30, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x03, 0x00, // .std.450........
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x07, 0x00, 0x04, 0x00, 0x00, 0x00, // ................
	0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x29, 0x01, 0x00, 0x00, // ....main....)...
	0x34, 0x01, 0x00, 0x00, 0x10, 0x00, 0x03, 0x00, 0x04, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, // 4...............
	0x03, 0x00, 0x03, 0x00, 0x05, 0x00, 0x00, 0x00, 0xf4, 0x01, 0x00, 0x00, 0x05, 0x00, 0x04, 0x00, // ................
	0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x08, 0x00, // ....main........
	0x2b, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, // +...tex_stereo_f
	0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x08, 0x00, // bSampler........
	0x2e, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, // ....tex_stereo_f
	0x62, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x08, 0x00, // bTexture........
	0x32, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, // 2...tex_stereo_d
	0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x00, 0x05, 0x00, 0x08, 0x00, // epthSampler.....
	0x34, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, // 4...tex_stereo_d
	0x65, 0x70, 0x74, 0x68, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x00, 0x05, 0x00, 0x06, 0x00, // epthTexture.....
	0x4c, 0x00, 0x00, 0x00, 0x55, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, // L...UniformBlock
	0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x08, 0x00, 0x4c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........L.......
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, // Stereo_MS_ZPD_YA
	0x78, 0x69, 0x73, 0x00, 0x06, 0x00, 0x06, 0x00, 0x4c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // xis.....L.......
	0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x00, 0x00, 0x05, 0x00, 0x03, 0x00, // w_h_height......
	0x4e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x05, 0x00, 0x29, 0x01, 0x00, 0x00, // N...........)...
	0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x00, 0x05, 0x00, 0x06, 0x00, // v_texcoord0.....
	0x34, 0x01, 0x00, 0x00, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, // 4...bgfx_FragDat
	0x61, 0x30, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x2b, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, // a0..G...+..."...
	0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x2b, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, // ....G...+...!...
	0x12, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, // ....G......."...
	0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, // ....G.......!...
	0x02, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x32, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, // ....G...2..."...
	0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x32, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, // ....G...2...!...
	0x13, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x34, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, // ....G...4..."...
	0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x34, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, // ....G...4...!...
	0x03, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0x4c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ....H...L.......
	0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0x4c, 0x00, 0x00, 0x00, // #.......H...L...
	0x01, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x47, 0x00, 0x03, 0x00, // ....#.......G...
	0x4c, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x4e, 0x00, 0x00, 0x00, // L.......G...N...
	0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x4e, 0x00, 0x00, 0x00, // ".......G...N...
	0x21, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x29, 0x01, 0x00, 0x00, // !.......G...)...
	0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x34, 0x01, 0x00, 0x00, // ........G...4...
	0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, // ................
	0x21, 0x00, 0x03, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x02, 0x00, // !...............
	0x06, 0x00, 0x00, 0x00, 0x16, 0x00, 0x03, 0x00, 0x07, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, // ............ ...
	0x19, 0x00, 0x09, 0x00, 0x08, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, // ................
	0x02, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, // ................
	0x04, 0x00, 0x00, 0x00, 0x14, 0x00, 0x02, 0x00, 0x19, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00, // ................
	0x1b, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, // ............ ...
	0x2a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, // *...........;...
	0x2a, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, // *...+....... ...
	0x2d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, // -...........;...
	0x2d, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, // -...........;...
	0x2a, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, // *...2.......;...
	0x2d, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x00, 0x04, 0x00, // -...4...........
	0x37, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, // 7... .......+...
	0x37, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, // 7...8.......+...
	0x37, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x03, 0x00, // 7...<...........
	0x40, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x04, 0x00, 0x4c, 0x00, 0x00, 0x00, // @...........L...
	0x0e, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x4d, 0x00, 0x00, 0x00, // ........ ...M...
	0x02, 0x00, 0x00, 0x00, 0x4c, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x4d, 0x00, 0x00, 0x00, // ....L...;...M...
	0x4e, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x15, 0x00, 0x04, 0x00, 0x4f, 0x00, 0x00, 0x00, // N...........O...
	0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x4f, 0x00, 0x00, 0x00, //  .......+...O...
	0x50, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x51, 0x00, 0x00, 0x00, // P....... ...Q...
	0x02, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, // ........+.......
	0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x4f, 0x00, 0x00, 0x00, // T.......+...O...
	0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, // W.......+.......
	0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x17, 0x00, 0x04, 0x00, 0x67, 0x00, 0x00, 0x00, // `......?....g...
	0x19, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, // ........+.......
	0x73, 0x00, 0x00, 0x00, 0xfa, 0x7e, 0x2a, 0x3f, 0x2b, 0x00, 0x04, 0x00, 0x4f, 0x00, 0x00, 0x00, // s....~*?+...O...
	0x95, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, // ........+.......
	0x99, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x2b, 0x00, 0x04, 0x00, 0x4f, 0x00, 0x00, 0x00, // .......?+...O...
	0x9b, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, // ........+.......
	0x16, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x20, 0x00, 0x04, 0x00, 0x28, 0x01, 0x00, 0x00, // .......@ ...(...
	0x01, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x28, 0x01, 0x00, 0x00, // ........;...(...
	0x29, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x33, 0x01, 0x00, 0x00, // )....... ...3...
	0x03, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x33, 0x01, 0x00, 0x00, // ........;...3...
	0x34, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x36, 0x00, 0x05, 0x00, 0x02, 0x00, 0x00, 0x00, // 4.......6.......
	0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, // ................
	0x05, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, // ....=.......,...
	0x2b, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x08, 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x00, // +...=......./...
	0x2e, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, // ....=.......3...
	0x32, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x08, 0x00, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, // 2...=.......5...
	0x34, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x2a, 0x01, 0x00, 0x00, // 4...=.......*...
	0x29, 0x01, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x5e, 0x01, 0x00, 0x00, // )...Q.......^...
	0x2a, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // *.......Q.......
	0x60, 0x01, 0x00, 0x00, 0x2a, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, // `...*...........
	0x07, 0x00, 0x00, 0x00, 0x61, 0x01, 0x00, 0x00, 0x60, 0x01, 0x00, 0x00, 0x16, 0x01, 0x00, 0x00, // ....a...`.......
	0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x62, 0x01, 0x00, 0x00, 0x5e, 0x01, 0x00, 0x00, // P.......b...^...
	0x61, 0x01, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x64, 0x01, 0x00, 0x00, // a...Q.......d...
	0x2a, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xb8, 0x00, 0x05, 0x00, 0x19, 0x00, 0x00, 0x00, // *...............
	0x65, 0x01, 0x00, 0x00, 0x64, 0x01, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, // e...d...`.......
	0x27, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfb, 0x00, 0x03, 0x00, 0x57, 0x00, 0x00, 0x00, // '...........W...
	0x91, 0x01, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x91, 0x01, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, // ............A...
	0x51, 0x00, 0x00, 0x00, 0x92, 0x01, 0x00, 0x00, 0x4e, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, // Q.......N...<...
	0x50, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x93, 0x01, 0x00, 0x00, // P...=...........
	0x92, 0x01, 0x00, 0x00, 0xb7, 0x00, 0x05, 0x00, 0x19, 0x00, 0x00, 0x00, 0x94, 0x01, 0x00, 0x00, // ................
	0x93, 0x01, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x51, 0x00, 0x00, 0x00, // ....T...A...Q...
	0x95, 0x01, 0x00, 0x00, 0x4e, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, // ....N...<...W...
	0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x96, 0x01, 0x00, 0x00, 0x95, 0x01, 0x00, 0x00, // =...............
	0xf7, 0x00, 0x03, 0x00, 0x26, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, // ....&...........
	0x65, 0x01, 0x00, 0x00, 0x98, 0x01, 0x00, 0x00, 0xdf, 0x01, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, // e...............
	0xdf, 0x01, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xe3, 0x01, 0x00, 0x00, // ................
	0x60, 0x00, 0x00, 0x00, 0x96, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, // `.......P.......
	0xe4, 0x01, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0xe3, 0x01, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, // ....T...........
	0x07, 0x00, 0x00, 0x00, 0xe6, 0x01, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x96, 0x01, 0x00, 0x00, // ........`.......
	0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xe7, 0x01, 0x00, 0x00, 0xe6, 0x01, 0x00, 0x00, // P...............
	0x54, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x67, 0x00, 0x00, 0x00, 0xe8, 0x01, 0x00, 0x00, // T...P...g.......
	0x94, 0x01, 0x00, 0x00, 0x94, 0x01, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, // ................
	0xe9, 0x01, 0x00, 0x00, 0xe8, 0x01, 0x00, 0x00, 0xe4, 0x01, 0x00, 0x00, 0xe7, 0x01, 0x00, 0x00, // ................
	0x83, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xea, 0x01, 0x00, 0x00, 0x62, 0x01, 0x00, 0x00, // ............b...
	0xe9, 0x01, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, 0x40, 0x00, 0x00, 0x00, 0x57, 0x02, 0x00, 0x00, // ....V...@...W...
	0x35, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, // 5...3...X.......
	0x5a, 0x02, 0x00, 0x00, 0x57, 0x02, 0x00, 0x00, 0xea, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // Z...W...........
	0x54, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xed, 0x01, 0x00, 0x00, // T...Q...........
	0x5a, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // Z...............
	0xf1, 0x01, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00, 0x96, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, // ....s.......P...
	0x0b, 0x00, 0x00, 0x00, 0xf2, 0x01, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0xf1, 0x01, 0x00, 0x00, // ........T.......
	0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xf4, 0x01, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00, // ............s...
	0x96, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xf5, 0x01, 0x00, 0x00, // ....P...........
	0xf4, 0x01, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x67, 0x00, 0x00, 0x00, // ....T...P...g...
	0xf6, 0x01, 0x00, 0x00, 0x94, 0x01, 0x00, 0x00, 0x94, 0x01, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, // ................
	0x0b, 0x00, 0x00, 0x00, 0xf7, 0x01, 0x00, 0x00, 0xf6, 0x01, 0x00, 0x00, 0xf2, 0x01, 0x00, 0x00, // ................
	0xf5, 0x01, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xf8, 0x01, 0x00, 0x00, // ................
	0x62, 0x01, 0x00, 0x00, 0xf7, 0x01, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, 0x40, 0x00, 0x00, 0x00, // b.......V...@...
	0x61, 0x02, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, // a...5...3...X...
	0x0e, 0x00, 0x00, 0x00, 0x64, 0x02, 0x00, 0x00, 0x61, 0x02, 0x00, 0x00, 0xf8, 0x01, 0x00, 0x00, // ....d...a.......
	0x02, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // ....T...Q.......
	0xfb, 0x01, 0x00, 0x00, 0x64, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, // ....d...........
	0x07, 0x00, 0x00, 0x00, 0xfc, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, // ............%...
	0xed, 0x01, 0x00, 0x00, 0xfb, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, // ........P.......
	0x00, 0x02, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x96, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, // ....T.......P...
	0x0b, 0x00, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x96, 0x01, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, // ............T...
	0x50, 0x00, 0x05, 0x00, 0x67, 0x00, 0x00, 0x00, 0x03, 0x02, 0x00, 0x00, 0x94, 0x01, 0x00, 0x00, // P...g...........
	0x94, 0x01, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x04, 0x02, 0x00, 0x00, // ................
	0x03, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, // ................
	0x0b, 0x00, 0x00, 0x00, 0x05, 0x02, 0x00, 0x00, 0x62, 0x01, 0x00, 0x00, 0x04, 0x02, 0x00, 0x00, // ........b.......
	0x56, 0x00, 0x05, 0x00, 0x40, 0x00, 0x00, 0x00, 0x6b, 0x02, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, // V...@...k...5...
	0x33, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x6e, 0x02, 0x00, 0x00, // 3...X.......n...
	0x6b, 0x02, 0x00, 0x00, 0x05, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, // k...........T...
	0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x08, 0x02, 0x00, 0x00, 0x6e, 0x02, 0x00, 0x00, // Q...........n...
	0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x09, 0x02, 0x00, 0x00, // ................
	0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0xfc, 0x01, 0x00, 0x00, 0x08, 0x02, 0x00, 0x00, // ....%...........
	0x41, 0x00, 0x06, 0x00, 0x51, 0x00, 0x00, 0x00, 0x0a, 0x02, 0x00, 0x00, 0x4e, 0x00, 0x00, 0x00, // A...Q.......N...
	0x38, 0x00, 0x00, 0x00, 0x95, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, // 8.......=.......
	0x0b, 0x02, 0x00, 0x00, 0x0a, 0x02, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x51, 0x00, 0x00, 0x00, // ........A...Q...
	0x0e, 0x02, 0x00, 0x00, 0x4e, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x9b, 0x00, 0x00, 0x00, // ....N...<.......
	0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x0f, 0x02, 0x00, 0x00, 0x0e, 0x02, 0x00, 0x00, // =...............
	0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x10, 0x02, 0x00, 0x00, 0x99, 0x00, 0x00, 0x00, // ................
	0x0f, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x11, 0x02, 0x00, 0x00, // ................
	0x10, 0x02, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // ....`...........
	0x12, 0x02, 0x00, 0x00, 0x09, 0x02, 0x00, 0x00, 0x11, 0x02, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, // ................
	0x07, 0x00, 0x00, 0x00, 0x13, 0x02, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x12, 0x02, 0x00, 0x00, // ........`.......
	0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x14, 0x02, 0x00, 0x00, 0x99, 0x00, 0x00, 0x00, // ................
	0x13, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x15, 0x02, 0x00, 0x00, // ................
	0x99, 0x00, 0x00, 0x00, 0x14, 0x02, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // ................
	0x16, 0x02, 0x00, 0x00, 0x96, 0x01, 0x00, 0x00, 0x15, 0x02, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, // ................
	0x07, 0x00, 0x00, 0x00, 0x17, 0x02, 0x00, 0x00, 0x0b, 0x02, 0x00, 0x00, 0x16, 0x02, 0x00, 0x00, // ................
	0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x18, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // ................
	0x28, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x17, 0x02, 0x00, 0x00, 0x7f, 0x00, 0x04, 0x00, // (...T...........
	0x07, 0x00, 0x00, 0x00, 0x1c, 0x02, 0x00, 0x00, 0x18, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, // ............P...
	0x0b, 0x00, 0x00, 0x00, 0x1d, 0x02, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x1c, 0x02, 0x00, 0x00, // ........T.......
	0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x1f, 0x02, 0x00, 0x00, 0x18, 0x02, 0x00, 0x00, // P...............
	0x54, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x67, 0x00, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00, // T...P...g... ...
	0x94, 0x01, 0x00, 0x00, 0x94, 0x01, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, // ................
	0x21, 0x02, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00, 0x1d, 0x02, 0x00, 0x00, 0x1f, 0x02, 0x00, 0x00, // !... ...........
	0x83, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x22, 0x02, 0x00, 0x00, 0x62, 0x01, 0x00, 0x00, // ........"...b...
	0x21, 0x02, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, 0x40, 0x00, 0x00, 0x00, 0x75, 0x02, 0x00, 0x00, // !...V...@...u...
	0x2f, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, // /...,...X.......
	0x78, 0x02, 0x00, 0x00, 0x75, 0x02, 0x00, 0x00, 0x22, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // x...u...".......
	0x54, 0x00, 0x00, 0x00, 0x4f, 0x00, 0x08, 0x00, 0x1b, 0x00, 0x00, 0x00, 0x25, 0x02, 0x00, 0x00, // T...O.......%...
	0x78, 0x02, 0x00, 0x00, 0x78, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // x...x...........
	0x02, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x27, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, // ........'.......
	0x98, 0x01, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x9c, 0x01, 0x00, 0x00, // ................
	0x60, 0x00, 0x00, 0x00, 0x96, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, // `.......P.......
	0x9d, 0x01, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x9c, 0x01, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, // ....T...........
	0x07, 0x00, 0x00, 0x00, 0x9f, 0x01, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x96, 0x01, 0x00, 0x00, // ........`.......
	0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xa0, 0x01, 0x00, 0x00, 0x9f, 0x01, 0x00, 0x00, // P...............
	0x54, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x67, 0x00, 0x00, 0x00, 0xa1, 0x01, 0x00, 0x00, // T...P...g.......
	0x94, 0x01, 0x00, 0x00, 0x94, 0x01, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, // ................
	0xa2, 0x01, 0x00, 0x00, 0xa1, 0x01, 0x00, 0x00, 0x9d, 0x01, 0x00, 0x00, 0xa0, 0x01, 0x00, 0x00, // ................
	0x81, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xa3, 0x01, 0x00, 0x00, 0x62, 0x01, 0x00, 0x00, // ............b...
	0xa2, 0x01, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, 0x40, 0x00, 0x00, 0x00, 0x2f, 0x02, 0x00, 0x00, // ....V...@.../...
	0x35, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, // 5...3...X.......
	0x32, 0x02, 0x00, 0x00, 0x2f, 0x02, 0x00, 0x00, 0xa3, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // 2.../...........
	0x54, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xa6, 0x01, 0x00, 0x00, // T...Q...........
	0x32, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // 2...............
	0xaa, 0x01, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00, 0x96, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, // ....s.......P...
	0x0b, 0x00, 0x00, 0x00, 0xab, 0x01, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0xaa, 0x01, 0x00, 0x00, // ........T.......
	0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xad, 0x01, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00, // ............s...
	0x96, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xae, 0x01, 0x00, 0x00, // ....P...........
	0xad, 0x01, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x67, 0x00, 0x00, 0x00, // ....T...P...g...
	0xaf, 0x01, 0x00, 0x00, 0x94, 0x01, 0x00, 0x00, 0x94, 0x01, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, // ................
	0x0b, 0x00, 0x00, 0x00, 0xb0, 0x01, 0x00, 0x00, 0xaf, 0x01, 0x00, 0x00, 0xab, 0x01, 0x00, 0x00, // ................
	0xae, 0x01, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xb1, 0x01, 0x00, 0x00, // ................
	0x62, 0x01, 0x00, 0x00, 0xb0, 0x01, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, 0x40, 0x00, 0x00, 0x00, // b.......V...@...
	0x39, 0x02, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, // 9...5...3...X...
	0x0e, 0x00, 0x00, 0x00, 0x3c, 0x02, 0x00, 0x00, 0x39, 0x02, 0x00, 0x00, 0xb1, 0x01, 0x00, 0x00, // ....<...9.......
	0x02, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // ....T...Q.......
	0xb4, 0x01, 0x00, 0x00, 0x3c, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, // ....<...........
	0x07, 0x00, 0x00, 0x00, 0xb5, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, // ............%...
	0xa6, 0x01, 0x00, 0x00, 0xb4, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, // ........P.......
	0xb9, 0x01, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x96, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, // ....T.......P...
	0x0b, 0x00, 0x00, 0x00, 0xbb, 0x01, 0x00, 0x00, 0x96, 0x01, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, // ............T...
	0x50, 0x00, 0x05, 0x00, 0x67, 0x00, 0x00, 0x00, 0xbc, 0x01, 0x00, 0x00, 0x94, 0x01, 0x00, 0x00, // P...g...........
	0x94, 0x01, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xbd, 0x01, 0x00, 0x00, // ................
	0xbc, 0x01, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0xbb, 0x01, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, // ................
	0x0b, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x62, 0x01, 0x00, 0x00, 0xbd, 0x01, 0x00, 0x00, // ........b.......
	0x56, 0x00, 0x05, 0x00, 0x40, 0x00, 0x00, 0x00, 0x43, 0x02, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, // V...@...C...5...
	0x33, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x46, 0x02, 0x00, 0x00, // 3...X.......F...
	0x43, 0x02, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, // C...........T...
	0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xc1, 0x01, 0x00, 0x00, 0x46, 0x02, 0x00, 0x00, // Q...........F...
	0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0xc2, 0x01, 0x00, 0x00, // ................
	0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0xb5, 0x01, 0x00, 0x00, 0xc1, 0x01, 0x00, 0x00, // ....%...........
	0x41, 0x00, 0x06, 0x00, 0x51, 0x00, 0x00, 0x00, 0xc3, 0x01, 0x00, 0x00, 0x4e, 0x00, 0x00, 0x00, // A...Q.......N...
	0x38, 0x00, 0x00, 0x00, 0x95, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, // 8.......=.......
	0xc4, 0x01, 0x00, 0x00, 0xc3, 0x01, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x51, 0x00, 0x00, 0x00, // ........A...Q...
	0xc7, 0x01, 0x00, 0x00, 0x4e, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x9b, 0x00, 0x00, 0x00, // ....N...<.......
	0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0xc8, 0x01, 0x00, 0x00, 0xc7, 0x01, 0x00, 0x00, // =...............
	0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xc9, 0x01, 0x00, 0x00, 0x99, 0x00, 0x00, 0x00, // ................
	0xc8, 0x01, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xca, 0x01, 0x00, 0x00, // ................
	0xc9, 0x01, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // ....`...........
	0xcb, 0x01, 0x00, 0x00, 0xc2, 0x01, 0x00, 0x00, 0xca, 0x01, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, // ................
	0x07, 0x00, 0x00, 0x00, 0xcc, 0x01, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0xcb, 0x01, 0x00, 0x00, // ........`.......
	0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xcd, 0x01, 0x00, 0x00, 0x99, 0x00, 0x00, 0x00, // ................
	0xcc, 0x01, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xce, 0x01, 0x00, 0x00, // ................
	0x99, 0x00, 0x00, 0x00, 0xcd, 0x01, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // ................
	0xcf, 0x01, 0x00, 0x00, 0x96, 0x01, 0x00, 0x00, 0xce, 0x01, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, // ................
	0x07, 0x00, 0x00, 0x00, 0xd0, 0x01, 0x00, 0x00, 0xc4, 0x01, 0x00, 0x00, 0xcf, 0x01, 0x00, 0x00, // ................
	0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0xd1, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // ................
	0x28, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0xd0, 0x01, 0x00, 0x00, 0x7f, 0x00, 0x04, 0x00, // (...T...........
	0x07, 0x00, 0x00, 0x00, 0xd5, 0x01, 0x00, 0x00, 0xd1, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, // ............P...
	0x0b, 0x00, 0x00, 0x00, 0xd6, 0x01, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0xd5, 0x01, 0x00, 0x00, // ........T.......
	0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xd8, 0x01, 0x00, 0x00, 0xd1, 0x01, 0x00, 0x00, // P...............
	0x54, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x67, 0x00, 0x00, 0x00, 0xd9, 0x01, 0x00, 0x00, // T...P...g.......
	0x94, 0x01, 0x00, 0x00, 0x94, 0x01, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, // ................
	0xda, 0x01, 0x00, 0x00, 0xd9, 0x01, 0x00, 0x00, 0xd6, 0x01, 0x00, 0x00, 0xd8, 0x01, 0x00, 0x00, // ................
	0x81, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xdb, 0x01, 0x00, 0x00, 0x62, 0x01, 0x00, 0x00, // ............b...
	0xda, 0x01, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, 0x40, 0x00, 0x00, 0x00, 0x4d, 0x02, 0x00, 0x00, // ....V...@...M...
	0x2f, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, // /...,...X.......
	0x50, 0x02, 0x00, 0x00, 0x4d, 0x02, 0x00, 0x00, 0xdb, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // P...M...........
	0x54, 0x00, 0x00, 0x00, 0x4f, 0x00, 0x08, 0x00, 0x1b, 0x00, 0x00, 0x00, 0xde, 0x01, 0x00, 0x00, // T...O...........
	0x50, 0x02, 0x00, 0x00, 0x50, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // P...P...........
	0x02, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x27, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, // ........'.......
	0x26, 0x02, 0x00, 0x00, 0xff, 0x00, 0x01, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x27, 0x02, 0x00, 0x00, // &...........'...
	0xf5, 0x00, 0x07, 0x00, 0x1b, 0x00, 0x00, 0x00, 0x9d, 0x02, 0x00, 0x00, 0x25, 0x02, 0x00, 0x00, // ............%...
	0xdf, 0x01, 0x00, 0x00, 0xde, 0x01, 0x00, 0x00, 0x98, 0x01, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, // ............Q...
	0x07, 0x00, 0x00, 0x00, 0x67, 0x01, 0x00, 0x00, 0x9d, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ....g...........
	0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x68, 0x01, 0x00, 0x00, 0x9d, 0x02, 0x00, 0x00, // Q.......h.......
	0x01, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x69, 0x01, 0x00, 0x00, // ....Q.......i...
	0x9d, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x50, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, // ........P.......
	0x6a, 0x01, 0x00, 0x00, 0x67, 0x01, 0x00, 0x00, 0x68, 0x01, 0x00, 0x00, 0x69, 0x01, 0x00, 0x00, // j...g...h...i...
	0x99, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x03, 0x00, 0x34, 0x01, 0x00, 0x00, 0x6a, 0x01, 0x00, 0x00, // ....>...4...j...
	0xfd, 0x00, 0x01, 0x00, 0x38, 0x00, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00,                         // ....8..... .
};
static const bgfx::EmbeddedShader fs_pp_stereo_tb = BGFX_EMBEDDED_SHADER(fs_pp_stereo_tb);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Build of fragment shader from fs_pp_stereo.sc to fs_pp_stereo_int with options: INT NOSTEREO
static const uint8_t fs_pp_stereo_int_mtl[3227] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x14, 0x74, // FSH.o.><.......t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, // ex_stereo_fbSamp
	0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x74, 0x65, // ler...........te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x54, 0x65, 0x78, 0x74, 0x75, // x_stereo_fbTextu
	0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x74, 0x65, 0x78, // re...........tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, // _stereo_depthSam
	0x70, 0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x74, // pler...........t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x54, // ex_stereo_depthT
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, // exture..........
	0x13, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, // .Stereo_MS_ZPD_Y
	0x41, 0x78, 0x69, 0x73, 0x12, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x77, // Axis...........w
	0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x01, 0x10, 0x00, 0x01, 0x00, 0x00, // _h_height.......
	0x00, 0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, // ....tex_stereo_f
	0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x74, 0x65, 0x78, 0x5f, // b...........tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x10, 0x00, 0x00, 0x00, // stereo_depth....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9d, 0x0b, 0x00, 0x00, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, // ..........#inclu
	0x64, 0x65, 0x20, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x64, 0x6c, 0x69, 0x62, // de <metal_stdlib
	0x3e, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x73, 0x69, 0x6d, 0x64, // >.#include <simd
	0x2f, 0x73, 0x69, 0x6d, 0x64, 0x2e, 0x68, 0x3e, 0x0a, 0x0a, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, // /simd.h>..using 
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x3b, // namespace metal;
	0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, // ..struct _Global
	0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, // .{.    float4 St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, // ereo_MS_ZPD_YAxi
	0x73, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x77, 0x5f, // s;.    float4 w_
	0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, // h_height;.};..st
	0x72, 0x75, 0x63, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, // ruct xlatMtlMain
	0x5f, 0x6f, 0x75, 0x74, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // _out.{.    float
	0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, // 4 bgfx_FragData0
	0x20, 0x5b, 0x5b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, //  [[color(0)]];.}
	0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, // ;..struct xlatMt
	0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, // lMain_in.{.    f
	0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, // loat2 v_texcoord
	0x30, 0x20, 0x5b, 0x5b, 0x75, 0x73, 0x65, 0x72, 0x28, 0x6c, 0x6f, 0x63, 0x6e, 0x30, 0x29, 0x5d, // 0 [[user(locn0)]
	0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, // ];.};..fragment 
	0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x20, // xlatMtlMain_out 
	0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x28, 0x78, 0x6c, 0x61, 0x74, // xlatMtlMain(xlat
	0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x5b, 0x5b, // MtlMain_in in [[
	0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x5d, 0x5d, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, // stage_in]], cons
	0x74, 0x61, 0x6e, 0x74, 0x20, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x26, 0x20, 0x5f, 0x6d, // tant _Global& _m
	0x74, 0x6c, 0x5f, 0x75, 0x20, 0x5b, 0x5b, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x28, 0x30, 0x29, // tl_u [[buffer(0)
	0x5d, 0x5d, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, // ]], texture2d<fl
	0x6f, 0x61, 0x74, 0x3e, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // oat> tex_stereo_
	0x66, 0x62, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x30, 0x29, 0x5d, // fb [[texture(0)]
	0x5d, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, 0x6f, // ], texture2d<flo
	0x61, 0x74, 0x3e, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, // at> tex_stereo_d
	0x65, 0x70, 0x74, 0x68, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x31, // epth [[texture(1
	0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x74, 0x65, 0x78, // )]], sampler tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, // _stereo_fbSample
	0x72, 0x20, 0x5b, 0x5b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, // r [[sampler(0)]]
	0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // , sampler tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, // ereo_depthSample
	0x72, 0x20, 0x5b, 0x5b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x31, 0x29, 0x5d, 0x5d, // r [[sampler(1)]]
	0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, // , float4 gl_Frag
	0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x5b, 0x5b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, // Coord [[position
	0x5d, 0x5d, 0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, // ]]).{.    xlatMt
	0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x3d, 0x20, // lMain_out out = 
	0x7b, 0x7d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, // {};.    float3 _
	0x36, 0x36, 0x30, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x64, 0x6f, 0x0a, 0x20, 0x20, 0x20, 0x20, // 660;.    do.    
	0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x5f, // {.        bool _
	0x33, 0x39, 0x37, 0x20, 0x3d, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, // 397 = _mtl_u.Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, // reo_MS_ZPD_YAxis
	0x2e, 0x7a, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // .z != 0.0;.     
	0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x66, 0x72, 0x61, 0x63, 0x74, 0x28, 0x67, 0x6c, 0x5f, //    if (fract(gl_
	0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x30, 0x2e, // FragCoord.y * 0.
	0x35, 0x29, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 5) < 0.5).      
	0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //   {.            
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x34, 0x35, 0x38, 0x20, 0x3d, 0x20, 0x66, 0x61, 0x73, // float _458 = fas
	0x74, 0x3a, 0x3a, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, // t::max(0.0, _mtl
	0x5f, 0x75, 0x2e, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, // _u.w_h_height.w 
	0x2b, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // + (_mtl_u.Stereo
	0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x20, // _MS_ZPD_YAxis.x 
	0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, // * (1.0 - (1.0 / 
	0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, // (0.5 + (fast::mi
	0x6e, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x5f, // n(fast::min(tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, 0x6d, // stereo_depth.sam
	0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, // ple(tex_stereo_d
	0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, 0x6e, // epthSampler, (in
	0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2b, 0x20, 0x73, // .v_texcoord0 + s
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x35, // elect(float2(0.5
	0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, //  * _mtl_u.Stereo
	0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, // _MS_ZPD_YAxis.x,
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, //  0.0), float2(0.
	0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, // 0, 0.5 * _mtl_u.
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, // Stereo_MS_ZPD_YA
	0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x33, // xis.x), bool2(_3
	0x39, 0x37, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, // 97))), level(0.0
	0x29, 0x29, 0x2e, 0x78, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // )).x, tex_stereo
	0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, // _depth.sample(te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, // x_stereo_depthSa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, // mpler, (in.v_tex
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2b, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, // coord0 + select(
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x30, 0x30, 0x30, 0x30, // float2(0.6660000
	0x30, 0x38, 0x35, 0x38, 0x33, 0x30, 0x36, 0x38, 0x38, 0x34, 0x37, 0x36, 0x35, 0x36, 0x32, 0x35, // 0858306884765625
	0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, //  * _mtl_u.Stereo
	0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, // _MS_ZPD_YAxis.x,
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, //  0.0), float2(0.
	0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x30, 0x30, 0x30, 0x30, 0x30, 0x38, 0x35, 0x38, // 0, 0.66600000858
	0x33, 0x30, 0x36, 0x38, 0x38, 0x34, 0x37, 0x36, 0x35, 0x36, 0x32, 0x35, 0x20, 0x2a, 0x20, 0x5f, // 306884765625 * _
	0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, // mtl_u.Stereo_MS_
	0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, 0x6f, // ZPD_YAxis.x), bo
	0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x33, 0x39, 0x37, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, // ol2(_397))), lev
	0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x74, 0x65, 0x78, // el(0.0)).x), tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, // _stereo_depth.sa
	0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // mple(tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, // depthSampler, (i
	0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2b, 0x20, // n.v_texcoord0 + 
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x5f, 0x6d, // select(float2(_m
	0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, // tl_u.Stereo_MS_Z
	0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // PD_YAxis.x, 0.0)
	0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x5f, 0x6d, // , float2(0.0, _m
	0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, // tl_u.Stereo_MS_Z
	0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, // PD_YAxis.x), boo
	0x6c, 0x32, 0x28, 0x5f, 0x33, 0x39, 0x37, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, // l2(_397))), leve
	0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x31, // l(0.0)).x) * ((1
	0x2e, 0x30, 0x20, 0x2f, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, // .0 / _mtl_u.Ster
	0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, // eo_MS_ZPD_YAxis.
	0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x3b, // y) - 0.5)))))));
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x36, 0x36, // .            _66
	0x30, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, // 0 = tex_stereo_f
	0x62, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, // b.sample(tex_ste
	0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, // reo_fbSampler, (
	0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2b, // in.v_texcoord0 +
	0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x5f, //  select(float2(_
	0x34, 0x35, 0x38, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // 458, 0.0), float
	0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x5f, 0x34, 0x35, 0x38, 0x29, 0x2c, 0x20, 0x62, // 2(0.0, -_458), b
	0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x33, 0x39, 0x37, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, // ool2(_397))), le
	0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x20, // vel(0.0)).xyz;. 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, //            break
	0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, // ;.        }.    
	0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //     else.       
	0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, //  {.            f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x35, 0x32, 0x39, 0x20, 0x3d, 0x20, 0x66, 0x61, 0x73, 0x74, // loat _529 = fast
	0x3a, 0x3a, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, // ::max(0.0, _mtl_
	0x75, 0x2e, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, // u.w_h_height.w +
	0x20, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, //  (_mtl_u.Stereo_
	0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x20, 0x2a, // MS_ZPD_YAxis.x *
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, //  (1.0 - (1.0 / (
	0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, 0x6e, // 0.5 + (fast::min
	0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, // (fast::min(tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, 0x6d, 0x70, // tereo_depth.samp
	0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, // le(tex_stereo_de
	0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, 0x6e, 0x2e, // pthSampler, (in.
	0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2d, 0x20, 0x73, 0x65, // v_texcoord0 - se
	0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x20, // lect(float2(0.5 
	0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // * _mtl_u.Stereo_
	0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, 0x20, // MS_ZPD_YAxis.x, 
	0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, // 0.0), float2(0.0
	0x2c, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, // , 0.5 * _mtl_u.S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, // tereo_MS_ZPD_YAx
	0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x33, 0x39, // is.x), bool2(_39
	0x37, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, // 7))), level(0.0)
	0x29, 0x2e, 0x78, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // ).x, tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, // depth.sample(tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, // _stereo_depthSam
	0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, // pler, (in.v_texc
	0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2d, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, // oord0 - select(f
	0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x30, 0x30, 0x30, 0x30, 0x30, // loat2(0.66600000
	0x38, 0x35, 0x38, 0x33, 0x30, 0x36, 0x38, 0x38, 0x34, 0x37, 0x36, 0x35, 0x36, 0x32, 0x35, 0x20, // 858306884765625 
	0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // * _mtl_u.Stereo_
	0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, 0x20, // MS_ZPD_YAxis.x, 
	0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, // 0.0), float2(0.0
	0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x30, 0x30, 0x30, 0x30, 0x30, 0x38, 0x35, 0x38, 0x33, // , 0.666000008583
	0x30, 0x36, 0x38, 0x38, 0x34, 0x37, 0x36, 0x35, 0x36, 0x32, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, // 06884765625 * _m
	0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, // tl_u.Stereo_MS_Z
	0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, // PD_YAxis.x), boo
	0x6c, 0x32, 0x28, 0x5f, 0x33, 0x39, 0x37, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, // l2(_397))), leve
	0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x5f, // l(0.0)).x), tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, 0x6d, // stereo_depth.sam
	0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, // ple(tex_stereo_d
	0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, 0x6e, // epthSampler, (in
	0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2d, 0x20, 0x73, // .v_texcoord0 - s
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x5f, 0x6d, 0x74, // elect(float2(_mt
	0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, // l_u.Stereo_MS_ZP
	0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, // D_YAxis.x, 0.0),
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x5f, 0x6d, 0x74, //  float2(0.0, _mt
	0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, // l_u.Stereo_MS_ZP
	0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, // D_YAxis.x), bool
	0x32, 0x28, 0x5f, 0x33, 0x39, 0x37, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, // 2(_397))), level
	0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x31, 0x2e, // (0.0)).x) * ((1.
	0x30, 0x20, 0x2f, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, // 0 / _mtl_u.Stere
	0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, // o_MS_ZPD_YAxis.y
	0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, // ) - 0.5)))))));.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x36, 0x36, 0x30, //             _660
	0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, //  = tex_stereo_fb
	0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // .sample(tex_ster
	0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, // eo_fbSampler, (i
	0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2d, 0x20, // n.v_texcoord0 - 
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x5f, 0x35, // select(float2(_5
	0x32, 0x39, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, // 29, 0.0), float2
	0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x5f, 0x35, 0x32, 0x39, 0x29, 0x2c, 0x20, 0x62, 0x6f, // (0.0, -_529), bo
	0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x33, 0x39, 0x37, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, // ol2(_397))), lev
	0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x20, 0x20, // el(0.0)).xyz;.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, //           break;
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // .        }.     
	0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x20, 0x2f, 0x2f, 0x20, 0x75, 0x6e, 0x72, //    break; // unr
	0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x61, 0x72, 0x6f, // eachable workaro
	0x75, 0x6e, 0x64, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x28, // und.    } while(
	0x66, 0x61, 0x6c, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x6f, 0x75, 0x74, 0x2e, // false);.    out.
	0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x20, 0x3d, // bgfx_FragData0 =
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x36, 0x36, 0x30, 0x2c, 0x20, 0x31, 0x2e, //  float4(_660, 1.
	0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6f, // 0);.    return o
	0x75, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x0a, 0x00, 0x00, 0x60, 0x00,                               // ut;.}....`.
};
static const uint8_t fs_pp_stereo_int_essl[10551] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x29, // FSH.o.><......$)
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x33, 0x32, 0x30, 0x20, 0x65, // ..#version 320 e
	0x73, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, // s.#define attrib
	0x75, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x76, // ute in.#define v
	0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, // arying in.precis
	0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3b, // ion highp float;
	0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, // .precision highp
	0x20, 0x69, 0x6e, 0x74, 0x3b, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x73, 0x68, //  int;.#define sh
	0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, // adow2D(_sampler,
	0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, //  _coord) texture
	0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, // (_sampler, _coor
	0x64, 0x29, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x73, 0x68, 0x61, 0x64, 0x6f, // d).#define shado
	0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // w2DProj(_sampler
	0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // , _coord) textur
	0x65, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, // eProj(_sampler, 
	0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x0a, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x65, 0x64, 0x69, // _coord).out medi
	0x75, 0x6d, 0x70, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, // ump vec4 bgfx_Fr
	0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, // agColor;.varying
	0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, //  vec2 v_texcoord
	0x30, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, // 0;.vec3 instMul(
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x20, // vec3 _vec, mat3 
	0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // _mtx) { return (
	0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, //  (_vec) * (_mtx)
	0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, //  ); }.vec3 instM
	0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, // ul(mat3 _mtx, ve
	0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, // c3 _vec) { retur
	0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, // n ( (_mtx) * (_v
	0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, // ec) ); }.vec4 in
	0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, // stMul(vec4 _vec,
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, //  mat4 _mtx) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, // turn ( (_vec) * 
	0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, // (_mtx) ); }.vec4
	0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, //  instMul(mat4 _m
	0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, // tx, vec4 _vec) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, //  return ( (_mtx)
	0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, //  * (_vec) ); }.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, 0x70, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, // loat rcp(float _
	0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x2f, // a) { return 1.0/
	0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, // _a; }.vec2 rcp(v
	0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // ec2 _a) { return
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, //  vec2(1.0)/_a; }
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, // .vec3 rcp(vec3 _
	0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, // a) { return vec3
	0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, // (1.0)/_a; }.vec4
	0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, //  rcp(vec4 _a) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x31, 0x2e, 0x30, 0x29, // return vec4(1.0)
	0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x65, 0x63, 0x32, // /_a; }.vec2 vec2
	0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, // _splat(float _x)
	0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, //  { return vec2(_
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, // x, _x); }.vec3 v
	0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // ec3_splat(float 
	0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, // _x) { return vec
	0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, // 3(_x, _x, _x); }
	0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, // .vec4 vec4_splat
	0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // (float _x) { ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, // urn vec4(_x, _x,
	0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, //  _x, _x); }.uvec
	0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, // 2 uvec2_splat(ui
	0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // nt _x) { return 
	0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, // uvec2(_x, _x); }
	0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, // .uvec3 uvec3_spl
	0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // at(uint _x) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, // turn uvec3(_x, _
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x34, 0x20, // x, _x); }.uvec4 
	0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, // uvec4_splat(uint
	0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, //  _x) { return uv
	0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, // ec4(_x, _x, _x, 
	0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, // _x); }.mat4 mtxF
	0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, // romRows(vec4 _0,
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, //  vec4 _1, vec4 _
	0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // 2, vec4 _3).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, // turn transpose(m
	0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, // at4(_0, _1, _2, 
	0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, // _3) );.}.mat4 mt
	0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, // xFromCols(vec4 _
	0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // 0, vec4 _1, vec4
	0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, //  _2, vec4 _3).{.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, // return mat4(_0, 
	0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, // _1, _2, _3);.}.m
	0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, // at3 mtxFromRows(
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, // vec3 _0, vec3 _1
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // , vec3 _2).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, // urn transpose(ma
	0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x20, 0x29, // t3(_0, _1, _2) )
	0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, // ;.}.mat3 mtxFrom
	0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, // Cols(vec3 _0, ve
	0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, // c3 _1, vec3 _2).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, // {.return mat3(_0
	0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, // , _1, _2);.}.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, // form vec4 u_view
	0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, // Rect;.uniform ve
	0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x54, 0x65, 0x78, 0x65, 0x6c, 0x3b, 0x0a, // c4 u_viewTexel;.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, // uniform mat4 u_v
	0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, // iew;.uniform mat
	0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, // 4 u_invView;.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x70, 0x72, 0x6f, 0x6a, // form mat4 u_proj
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, // ;.uniform mat4 u
	0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // _invProj;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, // m mat4 u_viewPro
	0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, // j;.uniform mat4 
	0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, // u_invViewProj;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, // niform mat4 u_mo
	0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // del[32];.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, //  mat4 u_modelVie
	0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, // w;.uniform mat4 
	0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, // u_modelViewProj;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, // .uniform vec4 u_
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x66, 0x34, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // alphaRef4;.float
	0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, //  sqr( float v).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // .return v*v;.}.v
	0x65, 0x63, 0x32, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x29, // ec2 sqr( vec2 v)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, // .{.return v*v;.}
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // .vec3 sqr( vec3 
	0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, // v).{.return v*v;
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6d, 0x75, 0x6c, 0x5f, 0x77, 0x31, 0x28, 0x20, // .}.vec3 mul_w1( 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x29, 0x0a, // vec3 v, mat4 m).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2e, 0x78, 0x2a, 0x6d, 0x5b, 0x30, // {.return v.x*m[0
	0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x79, 0x2a, 0x6d, 0x5b, 0x31, // ].xyz + (v.y*m[1
	0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x7a, 0x2a, 0x6d, 0x5b, 0x32, // ].xyz + (v.z*m[2
	0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x6d, 0x5b, 0x33, 0x5d, 0x2e, 0x78, 0x79, 0x7a, // ].xyz + m[3].xyz
	0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x63, 0x6f, 0x73, // ));.}.float acos
	0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x20, 0x66, // _approx_divPI( f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // loat v).{.float 
	0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, // x = abs(v);.if(1
	0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, // . - x <= 0.00006
	0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // 103515625).retur
	0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, // n (v >= 0.) ? 0.
	0x20, 0x3a, 0x20, 0x31, 0x2e, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, //  : 1.;.float res
	0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, //  = ((-0.155972/3
	0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, // .141592653589793
	0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, // 2384626433832795
	0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, // ) * x + (1.56467
	0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, // /3.1415926535897
	0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, // 9323846264338327
	0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, // 95) ) * sqrt(1. 
	0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, // - x);.return (v 
	0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x31, // >= 0.) ? res : 1
	0x2e, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // . - res;.}.float
	0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, //  atan2_approx_di
	0x76, 0x32, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x79, 0x2c, 0x20, 0x66, // v2PI( float y, f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // loat x).{.float 
	0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x79, 0x29, 0x3b, 0x0a, // abs_y = abs(y);.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, // float abs_x = ab
	0x73, 0x28, 0x78, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3c, // s(x);.if(abs_x <
	0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, // = 0.000061035156
	0x32, 0x35, 0x20, 0x26, 0x26, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3c, 0x3d, 0x20, 0x30, // 25 && abs_y <= 0
	0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, // .00006103515625)
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x30, 0x2e, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // .return 0.;.floa
	0x74, 0x20, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2d, 0x20, 0x61, // t r = (abs_x - a
	0x62, 0x73, 0x5f, 0x79, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2b, // bs_y) / (abs_x +
	0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, //  abs_y);.float a
	0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, // ngle = ((x < 0.)
	0x20, 0x3f, 0x20, 0x28, 0x33, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x20, 0x3a, 0x20, 0x28, 0x31, 0x2e, //  ? (3./8.) : (1.
	0x2f, 0x38, 0x2e, 0x29, 0x29, 0x0a, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x32, 0x31, 0x31, 0x38, 0x36, // /8.)).+ (0.21186
	0x38, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, // 8 /(2.*3.1415926
	0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, // 5358979323846264
	0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x72, 0x20, 0x2a, 0x20, // 33832795) * r * 
	0x72, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x39, 0x38, 0x37, 0x33, 0x30, 0x35, 0x20, 0x2f, 0x28, 0x32, // r - 0.987305 /(2
	0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, // .*3.141592653589
	0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, // 7932384626433832
	0x37, 0x39, 0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, // 795)) * ((x < 0.
	0x29, 0x20, 0x3f, 0x20, 0x2d, 0x72, 0x20, 0x3a, 0x20, 0x72, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, // ) ? -r : r);.ret
	0x75, 0x72, 0x6e, 0x20, 0x28, 0x79, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, // urn (y < 0.) ? -
	0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3a, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x3b, 0x0a, 0x7d, // angle : angle;.}
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x73, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x72, // .float asin_appr
	0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // ox_divPI( float 
	0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, // v).{.float x = a
	0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, // bs(v);.if(1. - x
	0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, //  <= 0.0000610351
	0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, // 5625).return (v 
	0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x3a, 0x20, 0x2d, // >= 0.) ? 0.5 : -
	0x30, 0x2e, 0x35, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, // 0.5;.float res =
	0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, //  ((-0.155972/3.1
	0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, // 4159265358979323
	0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, // 84626433832795) 
	0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, // * x + (1.56467/3
	0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, // .141592653589793
	0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, // 2384626433832795
	0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, // ) ) * sqrt(1. - 
	0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, // x);.return (v >=
	0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, //  0.) ? 0.5 - res
	0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, //  : -0.5 + res;.}
	0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x61, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x71, 0x75, // .vec2 ray_to_equ
	0x69, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x75, 0x76, 0x28, // irectangular_uv(
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x61, 0x79, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, //  vec3 ray).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x0a, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, // urn vec2(.0.5 + 
	0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, // atan2_approx_div
	0x32, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x79, 0x2c, 0x20, 0x72, 0x61, 0x79, 0x2e, 0x78, // 2PI(ray.y, ray.x
	0x29, 0x2c, 0x0a, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, // ),.acos_approx_d
	0x69, 0x76, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // ivPI(ray.z));.}.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x20, 0x66, // float InvsRGB( f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, // loat color).{.if
	0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, //  (color <= 0.040
	0x34, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // 45).return color
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x29, 0x3b, 0x0a, //  * (1.0/12.92);.
	0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, // else.return pow(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, // color * (1.0/1.0
	0x35, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x2f, 0x31, 0x2e, 0x30, // 55) + (0.055/1.0
	0x35, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // 55), 2.4);.}.flo
	0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x20, 0x66, 0x6c, // at InvRec709( fl
	0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, // oat color).{.if 
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x38, 0x31, 0x29, // (color <= 0.081)
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, // .return color * 
	0x28, 0x31, 0x2e, 0x30, 0x2f, 0x34, 0x2e, 0x35, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, // (1.0/4.5);.else.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // return pow(color
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, 0x20, 0x2b, //  * (1.0/1.099) +
	0x20, 0x28, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, 0x2c, 0x20, //  (0.099/1.099), 
	0x31, 0x2e, 0x30, 0x2f, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // 1.0/0.45);.}.flo
	0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x66, 0x6c, 0x6f, // at InvGamma( flo
	0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, // at color).{.retu
	0x72, 0x6e, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // rn InvsRGB(color
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, // );.}.vec3 InvGam
	0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, // ma( vec3 color).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x49, 0x6e, // {.return vec3(In
	0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, // vGamma(color.x),
	0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, // InvGamma(color.y
	0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // ),InvGamma(color
	0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, // .z));.}.vec3 Inv
	0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, // ToneMap( vec3 co
	0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x69, 0x6e, 0x76, // lor).{.float inv
	0x5f, 0x32, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x30, 0x2e, 0x35, 0x2f, 0x30, 0x2e, 0x32, 0x35, 0x3b, // _2bh = 0.5/0.25;
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x34, 0x2e, 0x30, 0x2a, // .float bh = 4.0*
	0x30, 0x2e, 0x32, 0x35, 0x20, 0x2d, 0x20, 0x32, 0x2e, 0x30, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // 0.25 - 2.0;.retu
	0x72, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, // rn (color - 1.0 
	0x2b, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2a, 0x28, 0x63, 0x6f, // + sqrt(color*(co
	0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x20, 0x62, 0x68, 0x29, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, // lor + bh) + 1.0)
	0x29, 0x2a, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // )*inv_2bh;.}.flo
	0x61, 0x74, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, // at sRGB( float f
	0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, // ).{.float s;.if 
	0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x33, 0x31, 0x33, 0x30, 0x38, 0x29, // (f <= 0.0031308)
	0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, // .s = 12.92 * f;.
	0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x20, 0x2a, // else.s = 1.055 *
	0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x34, 0x29, //  pow(f, 1.0/2.4)
	0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, //  - 0.055;.return
	0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x52, 0x65, 0x63, 0x37, //  s;.}.float Rec7
	0x30, 0x39, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, // 09( float f).{.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, // loat s;.if (f <=
	0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x34, 0x2e, 0x35, 0x20, //  0.018).s = 4.5 
	0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, // * f;.else.s = 1.
	0x30, 0x39, 0x39, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x34, // 099 * pow(f, 0.4
	0x35, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // 5) - 0.099;.retu
	0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, // rn s;.}.float FB
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, // Gamma( float col
	0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x52, 0x47, // or).{.return sRG
	0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, // B(color);.}.vec2
	0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, //  FBGamma( vec2 c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // olor).{.return v
	0x65, 0x63, 0x32, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // ec2(FBGamma(colo
	0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, // r.x),FBGamma(col
	0x6f, 0x72, 0x2e, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, // or.y));.}.vec3 F
	0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, // BGamma( vec3 col
	0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, // or).{.return vec
	0x33, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, // 3(FBGamma(color.
	0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // x),FBGamma(color
	0x2e, 0x79, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // .y),FBGamma(colo
	0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, // r.z));.}.vec3 FB
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x32, 0x32, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, // Gamma22( vec3 co
	0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, // lor).{.return ve
	0x63, 0x33, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x2c, 0x20, // c3(pow(color.x, 
	0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, // 1.0/2.2),pow(col
	0x6f, 0x72, 0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, // or.y, 1.0/2.2),p
	0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, // ow(color.z, 1.0/
	0x32, 0x2e, 0x32, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, // 2.2));.}.float F
	0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // BToneMap( float 
	0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6c, 0x20, 0x2a, 0x20, // l).{.return l * 
	0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, // ((l*0.25 + 1.0) 
	0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // / (l + 1.0));.}.
	0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, // vec2 FBToneMap( 
	0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, // vec2 color).{.fl
	0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // oat l = dot(colo
	0x72, 0x2c, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2b, // r,vec2(0.176204+
	0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x2c, 0x30, 0x2e, // 0.0108109*0.5,0.
	0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, // 812985+0.0108109
	0x2a, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, // *0.5));.return c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, // olor * ((l*0.25 
	0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, // + 1.0) / (l + 1.
	0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x54, 0x6f, // 0));.}.vec3 FBTo
	0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // neMap( vec3 colo
	0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, // r).{.float l = d
	0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, // ot(color,vec3(0.
	0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2c, // 176204,0.812985,
	0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, // 0.0108109));.ret
	0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, // urn color * ((l*
	0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, // 0.25 + 1.0) / (l
	0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, //  + 1.0));.}.vec4
	0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, //  Additive( vec4 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, // cBase, vec4 cBle
	0x6e, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, // nd, float percen
	0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, // t).{.return cBas
	0x65, 0x20, 0x2b, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, // e + cBlend*perce
	0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, // nt;.}.vec3 Scree
	0x6e, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, // n ( vec3 cBase, 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, // vec3 cBlend).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, // eturn 1.0 - (1.0
	0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, //  - cBase) * (1.0
	0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, //  - cBlend);.}.ve
	0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, // c4 Screen ( vec4
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, //  cBase, vec4 cBl
	0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, // end).{.return 1.
	0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, // 0 - (1.0 - cBase
	0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // ) * (1.0 - cBlen
	0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, // d);.}.vec3 Scree
	0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, // nHDR ( vec3 cBas
	0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, // e, vec3 cBlend).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, // {.return max(1.0
	0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, //  - (1.0 - cBase)
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, //  * (1.0 - cBlend
	0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, // ), vec3(0.,0.,0.
	0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, // ));.}.vec4 Scree
	0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, // nHDR ( vec4 cBas
	0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, // e, vec4 cBlend).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, // {.return max(1.0
	0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, //  - (1.0 - cBase)
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, //  * (1.0 - cBlend
	0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, // ), vec4(0.,0.,0.
	0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4d, 0x75, // ,0.));.}.vec4 Mu
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // ltiply ( vec4 cB
	0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, // ase, vec4 cBlend
	0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, // , float percent)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, // .{.return cBase 
	0x2a, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, // * cBlend*percent
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, // ;.}.vec4 Overlay
	0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, //  ( vec4 cBase, v
	0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, // ec4 cBlend).{.ve
	0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, // c4 cNew = step(0
	0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, // .5, cBase);.cNew
	0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, //  = mix(cBase*cBl
	0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, // end*2.0, 1.0-2.0
	0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, // *(1.0-cBase)*(1.
	0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, // 0-cBlend), cNew)
	0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, // ;.return cNew;.}
	0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x48, 0x44, 0x52, // .vec4 OverlayHDR
	0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, //  ( vec4 cBase, v
	0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, // ec4 cBlend).{.ve
	0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, // c4 cNew = step(0
	0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, // .5, cBase);.cNew
	0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, //  = max(mix(cBase
	0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, // *cBlend*2.0, 1.0
	0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, // -2.0*(1.0-cBase)
	0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, // *(1.0-cBlend), c
	0x4e, 0x65, 0x77, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, // New), vec4(0.,0.
	0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // ,0.,0.));.return
	0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, //  cNew;.}.vec3 co
	0x73, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x5f, 0x73, 0x61, 0x6d, // s_hemisphere_sam
	0x70, 0x6c, 0x65, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x66, // ple( vec2 t).{.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x68, 0x69, 0x20, 0x3d, 0x20, 0x74, 0x2e, 0x79, 0x20, 0x2a, // loat phi = t.y *
	0x20, 0x28, 0x32, 0x2e, 0x30, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, //  (2.0*3.14159265
	0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, // 3589793238462643
	0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // 3832795);.float 
	0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, // cosTheta = sqrt(
	0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // 1.0 - t.x);.floa
	0x74, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, // t sinTheta = sqr
	0x74, 0x28, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x70, // t(t.x);.float sp
	0x2c, 0x63, 0x70, 0x3b, 0x0a, 0x7b, 0x73, 0x70, 0x3d, 0x73, 0x69, 0x6e, 0x28, 0x70, 0x68, 0x69, // ,cp;.{sp=sin(phi
	0x29, 0x3b, 0x63, 0x70, 0x3d, 0x63, 0x6f, 0x73, 0x28, 0x70, 0x68, 0x69, 0x29, 0x3b, 0x7d, 0x3b, // );cp=cos(phi);};
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x63, 0x70, 0x20, // .return vec3(cp 
	0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x63, 0x6f, 0x73, 0x54, // * sinTheta, cosT
	0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x73, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, // heta, sp * sinTh
	0x65, 0x74, 0x61, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x6f, 0x74, // eta);.}.vec3 rot
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x70, // ate_to_vector_up
	0x70, 0x65, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x76, // per( vec3 vec, v
	0x65, 0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, // ec3 normal).{.if
	0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x3e, 0x20, 0x2d, 0x30, 0x2e, 0x39, // (normal.y > -0.9
	0x39, 0x39, 0x39, 0x39, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x20, // 9999).{.float h 
	0x3d, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x28, 0x31, 0x2e, 0x30, 0x2b, 0x6e, 0x6f, 0x72, 0x6d, 0x61, // = 1.0/(1.0+norma
	0x6c, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x20, 0x3d, // l.y);.float hz =
	0x20, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, //  h*normal.z;.flo
	0x61, 0x74, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x3d, 0x20, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, // at hzx = hz*norm
	0x61, 0x6c, 0x2e, 0x78, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, // al.x;.return vec
	0x33, 0x28, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, // 3(.vec.x * (norm
	0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, // al.y+hz*normal.z
	0x29, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, // ) + vec.y * norm
	0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x68, // al.x - vec.z * h
	0x7a, 0x78, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, // zx,.vec.y * norm
	0x61, 0x6c, 0x2e, 0x79, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x6e, // al.y - vec.x * n
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, // ormal.x - vec.z 
	0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, // * normal.z,.vec.
	0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x20, 0x2d, 0x20, 0x76, // y * normal.z - v
	0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, // ec.x * hzx + vec
	0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, // .z * (normal.y+h
	0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, // *normal.x*normal
	0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x72, 0x65, 0x74, // .x));.}.else ret
	0x75, 0x72, 0x6e, 0x20, 0x2d, 0x76, 0x65, 0x63, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, // urn -vec;.}.unif
	0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // orm vec4 Stereo_
	0x53, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // Saturation;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // orm vec4 Stereo_
	0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x3b, 0x0a, 0x75, 0x6e, // MS_ZPD_YAxis;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x20, // iform sampler2D 
	0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x3b, 0x0a, 0x75, // tex_stereo_fb;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, // niform sampler2D
	0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, //  tex_stereo_dept
	0x68, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // h;.uniform vec4 
	0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, // w_h_height;.vec3
	0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x28, //  gatherEyeColor(
	0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x69, 0x73, 0x4c, // vec2 u, bool isL
	0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x79, 0x61, 0x78, 0x69, // eft).{.bool yaxi
	0x73, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, // s = (Stereo_MS_Z
	0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x7a, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, // PD_YAxis.z != 0.
	0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, // );.float MaxSepa
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // ration = (Stereo
	0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, // _MS_ZPD_YAxis.x)
	0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, 0x0a, // ;.if (isLeft).{.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, // float lminDepth 
	0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // = min(min(textur
	0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // eLod(tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, // depth, u + (yaxi
	0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, // s ? vec2(0.0, 0.
	0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // 500 * MaxSeparat
	0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, // ion) : vec2(0.50
	0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, // 0 * MaxSeparatio
	0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, // n, 0.0)), 0.0).x
	0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, // ,.textureLod(tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, // _stereo_depth, u
	0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, //  + (yaxis ? vec2
	0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, // (0.0, 0.666 * Ma
	0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, // xSeparation) : v
	0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, // ec2(0.666 * MaxS
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, // eparation, 0.0))
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, // , 0.0).x),.textu
	0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // reLod(tex_stereo
	0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, // _depth, u + (yax
	0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, // is ? vec2(0.0, M
	0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, // axSeparation) : 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // vec2( MaxSeparat
	0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // ion, 0.0)), 0.0)
	0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x70, 0x61, 0x72, 0x61, // .x);.float lpara
	0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, // llax = max(0.0, 
	0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, // w_h_height.w + M
	0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, // axSeparation * (
	0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, // 1.0 - 1.0 / (0.5
	0x20, 0x2b, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, //  + lminDepth * (
	0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, // 1.0 / (Stereo_MS
	0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, // _ZPD_YAxis.y) - 
	0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // 0.5))));.return 
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, // textureLod(tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, // tereo_fb, u + (y
	0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, // axis ? vec2(0.0,
	0x20, 0x2d, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, //  -lparallax) : v
	0x65, 0x63, 0x32, 0x28, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, // ec2(lparallax, 0
	0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, // .0)), 0.0).xyz;.
	0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, // }.else.{.float r
	0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, // minDepth = min(m
	0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, // in(textureLod(te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, // x_stereo_depth, 
	0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, // u - (yaxis ? vec
	0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, // 2(0.0, 0.500 * M
	0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, // axSeparation) : 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, // vec2(0.500 * Max
	0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // Separation, 0.0)
	0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, // ), 0.0).x,.textu
	0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // reLod(tex_stereo
	0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, // _depth, u - (yax
	0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, // is ? vec2(0.0, 0
	0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, // .666 * MaxSepara
	0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, // tion) : vec2(0.6
	0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // 66 * MaxSeparati
	0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, // on, 0.0)), 0.0).
	0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, // x),.textureLod(t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, // ex_stereo_depth,
	0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, //  u - (yaxis ? ve
	0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, // c2(0.0, MaxSepar
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, // ation) : vec2( M
	0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, // axSeparation, 0.
	0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, // 0)), 0.0).x);.fl
	0x6f, 0x61, 0x74, 0x20, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, // oat rparallax = 
	0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, // max(0.0, w_h_hei
	0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, // ght.w + MaxSepar
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, // ation * (1.0 - 1
	0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x6d, 0x69, 0x6e, // .0 / (0.5 + rmin
	0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, // Depth * (1.0 / (
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, // Stereo_MS_ZPD_YA
	0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, // xis.y) - 0.5))))
	0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // ;.return texture
	0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, // Lod(tex_stereo_f
	0x62, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, // b, u - (yaxis ? 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x72, 0x70, 0x61, 0x72, 0x61, // vec2(0.0, -rpara
	0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x72, 0x70, 0x61, // llax) : vec2(rpa
	0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, // rallax, 0.0)), 0
	0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, // .0).xyz;.}.}.voi
	0x64, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x69, 0x67, 0x68, // d gatherLeftRigh
	0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, // tColors(vec2 u, 
	0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x63, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, // out vec3 lcol, o
	0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, // ut vec3 rcol).{.
	0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, // bool yaxis = (St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, // ereo_MS_ZPD_YAxi
	0x73, 0x2e, 0x7a, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // s.z != 0.);.floa
	0x74, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, // t MaxSeparation 
	0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, // = (Stereo_MS_ZPD
	0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // _YAxis.x);.float
	0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, //  lminDepth = min
	0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, // (min(textureLod(
	0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, // tex_stereo_depth
	0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, // , u + (yaxis ? v
	0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, // ec2(0.0, 0.500 *
	0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, //  MaxSeparation) 
	0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, // : vec2(0.500 * M
	0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, // axSeparation, 0.
	0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, // 0)), 0.0).x,.tex
	0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // tureLod(tex_ster
	0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, // eo_depth, u + (y
	0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, // axis ? vec2(0.0,
	0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, //  0.666 * MaxSepa
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, // ration) : vec2(0
	0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, // .666 * MaxSepara
	0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, // tion, 0.0)), 0.0
	0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, // ).x),.textureLod
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, // (tex_stereo_dept
	0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, // h, u + (yaxis ? 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // vec2(0.0, MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // aration) : vec2(
	0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, //  MaxSeparation, 
	0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, // 0.0)), 0.0).x);.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, // float lparallax 
	0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, // = max(0.0, w_h_h
	0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // eight.w + MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, // aration * (1.0 -
	0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x6c, 0x6d, //  1.0 / (0.5 + lm
	0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, // inDepth * (1.0 /
	0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, //  (Stereo_MS_ZPD_
	0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, // YAxis.y) - 0.5))
	0x29, 0x29, 0x3b, 0x0a, 0x6c, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, // ));.lcol = textu
	0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // reLod(tex_stereo
	0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, // _fb, u + (yaxis 
	0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x6c, 0x70, 0x61, // ? vec2(0.0, -lpa
	0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x6c, // rallax) : vec2(l
	0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, // parallax, 0.0)),
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, //  0.0).xyz;.float
	0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, //  rminDepth = min
	0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, // (min(textureLod(
	0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, // tex_stereo_depth
	0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, // , u - (yaxis ? v
	0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, // ec2(0.0, 0.500 *
	0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, //  MaxSeparation) 
	0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, // : vec2(0.500 * M
	0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, // axSeparation, 0.
	0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, // 0)), 0.0).x,.tex
	0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // tureLod(tex_ster
	0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, // eo_depth, u - (y
	0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, // axis ? vec2(0.0,
	0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, //  0.666 * MaxSepa
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, // ration) : vec2(0
	0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, // .666 * MaxSepara
	0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, // tion, 0.0)), 0.0
	0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, // ).x),.textureLod
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, // (tex_stereo_dept
	0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, // h, u - (yaxis ? 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // vec2(0.0, MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // aration) : vec2(
	0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, //  MaxSeparation, 
	0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, // 0.0)), 0.0).x);.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, // float rparallax 
	0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, // = max(0.0, w_h_h
	0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // eight.w + MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, // aration * (1.0 -
	0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x6d, //  1.0 / (0.5 + rm
	0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, // inDepth * (1.0 /
	0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, //  (Stereo_MS_ZPD_
	0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, // YAxis.y) - 0.5))
	0x29, 0x29, 0x3b, 0x0a, 0x72, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, // ));.rcol = textu
	0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // reLod(tex_stereo
	0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, // _fb, u - (yaxis 
	0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x72, 0x70, 0x61, // ? vec2(0.0, -rpa
	0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x72, // rallax) : vec2(r
	0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, // parallax, 0.0)),
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, //  0.0).xyz;.}.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // form mat4 Stereo
	0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // _LeftMat;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, // m mat4 Stereo_Ri
	0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // ghtMat;.uniform 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, // vec4 Stereo_Left
	0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, // Luminance_Gamma;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, // .uniform vec4 St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, // ereo_RightLumina
	0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x3b, 0x0a, 0x76, 0x6f, // nce_DynDesat;.vo
	0x69, 0x64, 0x20, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x65, 0x73, 0x61, 0x74, 0x41, // id DynamicDesatA
	0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, // naglyph( vec3 lC
	0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, // ol, vec3 rCol, o
	0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, // ut vec3 lDesatCo
	0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x44, 0x65, 0x73, // l, out vec3 rDes
	0x61, 0x74, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, // atCol).{.float l
	0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, // eft2LeftLum = do
	0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, // t(lCol, Stereo_L
	0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, // eftLuminance_Gam
	0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, // ma.xyz);.float l
	0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, // eft2RightLum = d
	0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // ot(lCol, Stereo_
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, // RightLuminance_D
	0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, // ynDesat.xyz);.fl
	0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, // oat right2LeftLu
	0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, // m = dot(rCol, St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, // ereo_LeftLuminan
	0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, // ce_Gamma.xyz);.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, // loat right2Right
	0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // Lum = dot(rCol, 
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, // Stereo_RightLumi
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x78, // nance_DynDesat.x
	0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x4c, // yz);.float leftL
	0x75, 0x6d, 0x20, 0x3d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, // um = left2LeftLu
	0x6d, 0x20, 0x2b, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // m + left2RightLu
	0x6d, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // m;.float rightLu
	0x6d, 0x20, 0x3d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, // m = right2LeftLu
	0x6d, 0x20, 0x2b, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, // m + right2RightL
	0x75, 0x6d, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, // um;.float leftDe
	0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, // sat = Stereo_Rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, // htLuminance_DynD
	0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x6c, 0x65, // esat.w * abs((le
	0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x6c, 0x65, 0x66, // ft2LeftLum - lef
	0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, // t2RightLum) / (l
	0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, // eftLum + 0.0001)
	0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, // );.float rightDe
	0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, // sat = Stereo_Rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, // htLuminance_DynD
	0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x72, 0x69, // esat.w * abs((ri
	0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x72, 0x69, // ght2LeftLum - ri
	0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, // ght2RightLum) / 
	0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, // (rightLum + 0.00
	0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, // 01));.lDesatCol 
	0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, // = mix(lCol, vec3
	0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, // _splat(leftLum),
	0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x72, 0x44, 0x65, //  leftDesat);.rDe
	0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x72, 0x43, 0x6f, // satCol = mix(rCo
	0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x72, 0x69, // l, vec3_splat(ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, // ghtLum), rightDe
	0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x4c, 0x69, 0x6e, // sat);.}.vec3 Lin
	0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, 0x63, // earAnaglyph( vec
	0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, // 3 lCol, vec3 rCo
	0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, // l).{.vec3 color 
	0x3d, 0x20, 0x28, 0x28, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, // = (( (vec4(lCol,
	0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, //  1.)) * (Stereo_
	0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x20, 0x28, // LeftMat) ) + ( (
	0x76, 0x65, 0x63, 0x34, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, // vec4(rCol, 1.)) 
	0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, // * (Stereo_RightM
	0x61, 0x74, 0x29, 0x20, 0x29, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // at) )).rgb;.retu
	0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, // rn color;.}.unif
	0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // orm vec4 Stereo_
	0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, 0x6e, // DeghostGamma;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // iform mat4 Stere
	0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3b, // o_DeghostFilter;
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x6e, 0x61, // .vec3 DeghostAna
	0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, // glyph( vec3 lCol
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x76, // , vec3 rCol).{.v
	0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, 0x6e, 0x65, // ec3 color = Line
	0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, // arAnaglyph(lCol,
	0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, //  rCol);.return (
	0x20, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x53, 0x74, 0x65, //  (pow(color, Ste
	0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, // reo_DeghostGamma
	0x2e, 0x72, 0x67, 0x62, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x53, // .rgb)) * (mat3(S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, // tereo_DeghostFil
	0x74, 0x65, 0x72, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, // ter[0].xyz, Ster
	0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, // eo_DeghostFilter
	0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // [1].xyz, Stereo_
	0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x32, 0x5d, // DeghostFilter[2]
	0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, 0x64, // .xyz)) );.}.void
	0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, //  main().{.bgfx_F
	0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, // ragColor = vec4(
	0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x76, // gatherEyeColor(v
	0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2c, 0x20, 0x66, 0x72, 0x61, 0x63, // _texcoord0, frac
	0x74, 0x28, 0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x2e, 0x79, // t(gl_FragCoord.y
	0x2a, 0x30, 0x2e, 0x35, 0x29, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x2c, 0x20, 0x31, 0x2e, // *0.5) < 0.5), 1.
	0x30, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x00,                                                       // 0);.}..
};
static const uint8_t fs_pp_stereo_int_glsl[10921] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x96, 0x2a, // FSH.o.><.......*
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x34, 0x34, 0x30, 0x0a, 0x6f, // ..#version 440.o
	0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, // ut vec4 bgfx_Fra
	0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, // gColor;.#define 
	0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x62, 0x67, 0x66, // gl_FragColor bgf
	0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x0a, 0x23, 0x64, 0x65, 0x66, // x_FragColor.#def
	0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x20, 0x20, 0x20, // ine texture2D   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x0a, 0x23, //        texture.#
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, // define texture2D
	0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // Lod       textur
	0x65, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, // eLod.#define tex
	0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ture2DGrad      
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, // textureGrad.#def
	0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, // ine texture2DPro
	0x6a, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, // jLod   texturePr
	0x6f, 0x6a, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, // ojLod.#define te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, 0x20, // xture2DProjGrad 
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, //  textureProjGrad
	0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // .#define texture
	0x43, 0x75, 0x62, 0x65, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, // CubeLod     text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, // ureLod.#define t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, // extureCubeGrad  
	0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, //   textureGrad.#d
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x33, 0x44, 0x20, // efine texture3D 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, //          texture
	0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // .#define texture
	0x32, 0x44, 0x4c, 0x6f, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x20, 0x74, 0x65, 0x78, 0x74, // 2DLodOffset text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x0a, 0x23, 0x64, 0x65, // ureLodOffset.#de
	0x66, 0x69, 0x6e, 0x65, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x69, // fine attribute i
	0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, // n.#define varyin
	0x67, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x62, 0x67, 0x66, // g in.#define bgf
	0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, // xShadow2D(_sampl
	0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, // er, _coord)     
	0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, // vec4_splat(textu
	0x72, 0x65, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, // re(_sampler, _co
	0x6f, 0x72, 0x64, 0x29, 0x20, 0x29, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x62, // ord) ).#define b
	0x67, 0x66, 0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x28, // gfxShadow2DProj(
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, // _sampler, _coord
	0x29, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, // ) vec4_splat(tex
	0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // tureProj(_sample
	0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x29, 0x0a, 0x76, 0x61, 0x72, // r, _coord) ).var
	0x79, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, // ying vec2 v_texc
	0x6f, 0x6f, 0x72, 0x64, 0x30, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, // oord0;.vec3 inst
	0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, // Mul(vec3 _vec, m
	0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // at3 _mtx) { retu
	0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, // rn ( (_vec) * (_
	0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, // mtx) ); }.vec3 i
	0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, // nstMul(mat3 _mtx
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, // , vec3 _vec) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, // eturn ( (_mtx) *
	0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, //  (_vec) ); }.vec
	0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, // 4 instMul(vec4 _
	0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, // vec, mat4 _mtx) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, // { return ( (_vec
	0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, // ) * (_mtx) ); }.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, // vec4 instMul(mat
	0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, // 4 _mtx, vec4 _ve
	0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, // c) { return ( (_
	0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, // mtx) * (_vec) );
	0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, 0x70, 0x28, 0x66, 0x6c, 0x6f, //  }.float rcp(flo
	0x61, 0x74, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // at _a) { return 
	0x31, 0x2e, 0x30, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, // 1.0/_a; }.vec2 r
	0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // cp(vec2 _a) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, // turn vec2(1.0)/_
	0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, // a; }.vec3 rcp(ve
	0x63, 0x33, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // c3 _a) { return 
	0x76, 0x65, 0x63, 0x33, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, // vec3(1.0)/_a; }.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x61, // vec4 rcp(vec4 _a
	0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, // ) { return vec4(
	0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, // 1.0)/_a; }.vec2 
	0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, // vec2_splat(float
	0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, //  _x) { return ve
	0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, // c2(_x, _x); }.ve
	0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, // c3 vec3_splat(fl
	0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // oat _x) { return
	0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, //  vec3(_x, _x, _x
	0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, // ); }.vec4 vec4_s
	0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, // plat(float _x) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, //  return vec4(_x,
	0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, //  _x, _x, _x); }.
	0x75, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, // uvec2 uvec2_spla
	0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // t(uint _x) { ret
	0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, // urn uvec2(_x, _x
	0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, // ); }.uvec3 uvec3
	0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, // _splat(uint _x) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, // { return uvec3(_
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, // x, _x, _x); }.uv
	0x65, 0x63, 0x34, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, // ec4 uvec4_splat(
	0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, // uint _x) { retur
	0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, // n uvec4(_x, _x, 
	0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, // _x, _x); }.mat4 
	0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, // mtxFromRows(vec4
	0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, //  _0, vec4 _1, ve
	0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, // c4 _2, vec4 _3).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, // {.return transpo
	0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, // se(mat4(_0, _1, 
	0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, // _2, _3) );.}.mat
	0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, // 4 mtxFromCols(ve
	0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, // c4 _0, vec4 _1, 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, // vec4 _2, vec4 _3
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x28, // ).{.return mat4(
	0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x3b, // _0, _1, _2, _3);
	0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, // .}.mat3 mtxFromR
	0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, // ows(vec3 _0, vec
	0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, // 3 _1, vec3 _2).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, // .return transpos
	0x65, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, // e(mat3(_0, _1, _
	0x32, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, // 2) );.}.mat3 mtx
	0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, // FromCols(vec3 _0
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // , vec3 _1, vec3 
	0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, // _2).{.return mat
	0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x3b, 0x0a, 0x7d, // 3(_0, _1, _2);.}
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, // .uniform vec4 u_
	0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // viewRect;.unifor
	0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x54, 0x65, 0x78, // m vec4 u_viewTex
	0x65, 0x6c, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, // el;.uniform mat4
	0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, //  u_view;.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x3b, //  mat4 u_invView;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, // .uniform mat4 u_
	0x70, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, // proj;.uniform ma
	0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, // t4 u_invProj;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, // iform mat4 u_vie
	0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, // wProj;.uniform m
	0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, // at4 u_invViewPro
	0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, // j;.uniform mat4 
	0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, 0x3b, 0x0a, 0x75, 0x6e, 0x69, // u_model[32];.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, // form mat4 u_mode
	0x6c, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, // lView;.uniform m
	0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x50, // at4 u_modelViewP
	0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, // roj;.uniform vec
	0x34, 0x20, 0x75, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x66, 0x34, 0x3b, 0x0a, 0x66, // 4 u_alphaRef4;.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // loat sqr( float 
	0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, // v).{.return v*v;
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, // .}.vec2 sqr( vec
	0x32, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, // 2 v).{.return v*
	0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x76, // v;.}.vec3 sqr( v
	0x65, 0x63, 0x33, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // ec3 v).{.return 
	0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6d, 0x75, 0x6c, 0x5f, // v*v;.}.vec3 mul_
	0x77, 0x31, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, // w1( vec3 v, mat4
	0x20, 0x6d, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2e, 0x78, //  m).{.return v.x
	0x2a, 0x6d, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x79, // *m[0].xyz + (v.y
	0x2a, 0x6d, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x7a, // *m[1].xyz + (v.z
	0x2a, 0x6d, 0x5b, 0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x6d, 0x5b, 0x33, 0x5d, // *m[2].xyz + m[3]
	0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // .xyz));.}.float 
	0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, // acos_approx_divP
	0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, // I( float v).{.fl
	0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, // oat x = abs(v);.
	0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, // if(1. - x <= 0.0
	0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, // 0006103515625).r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, // eturn (v >= 0.) 
	0x3f, 0x20, 0x30, 0x2e, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // ? 0. : 1.;.float
	0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, //  res = ((-0.1559
	0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, // 72/3.14159265358
	0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, // 9793238462643383
	0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, // 2795) * x + (1.5
	0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, // 6467/3.141592653
	0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, // 5897932384626433
	0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, // 832795) ) * sqrt
	0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // (1. - x);.return
	0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x72, 0x65, 0x73, //  (v >= 0.) ? res
	0x20, 0x3a, 0x20, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, //  : 1. - res;.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, // loat atan2_appro
	0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // x_div2PI( float 
	0x79, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, // y, float x).{.fl
	0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, // oat abs_y = abs(
	0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, // y);.float abs_x 
	0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x78, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x61, 0x62, 0x73, // = abs(x);.if(abs
	0x5f, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, // _x <= 0.00006103
	0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x20, 0x26, 0x26, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, // 515625 && abs_y 
	0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, // <= 0.00006103515
	0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x30, 0x2e, 0x3b, 0x0a, // 625).return 0.;.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, // float r = (abs_x
	0x20, 0x2d, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x61, 0x62, 0x73, //  - abs_y) / (abs
	0x5f, 0x78, 0x20, 0x2b, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, // _x + abs_y);.flo
	0x61, 0x74, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, // at angle = ((x <
	0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x28, 0x33, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x20, 0x3a, //  0.) ? (3./8.) :
	0x20, 0x28, 0x31, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x29, 0x0a, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x32, //  (1./8.)).+ (0.2
	0x31, 0x31, 0x38, 0x36, 0x38, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, // 11868 /(2.*3.141
	0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, // 5926535897932384
	0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, // 626433832795) * 
	0x72, 0x20, 0x2a, 0x20, 0x72, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x39, 0x38, 0x37, 0x33, 0x30, 0x35, // r * r - 0.987305
	0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, //  /(2.*3.14159265
	0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, // 3589793238462643
	0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x78, 0x20, // 3832795)) * ((x 
	0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x72, 0x20, 0x3a, 0x20, 0x72, 0x29, 0x3b, // < 0.) ? -r : r);
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x79, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, // .return (y < 0.)
	0x20, 0x3f, 0x20, 0x2d, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3a, 0x20, 0x61, 0x6e, 0x67, 0x6c, //  ? -angle : angl
	0x65, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x73, 0x69, 0x6e, 0x5f, // e;.}.float asin_
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, // approx_divPI( fl
	0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, // oat v).{.float x
	0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, //  = abs(v);.if(1.
	0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, //  - x <= 0.000061
	0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // 03515625).return
	0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, //  (v >= 0.) ? 0.5
	0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, //  : -0.5;.float r
	0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, // es = ((-0.155972
	0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, // /3.1415926535897
	0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, // 9323846264338327
	0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, // 95) * x + (1.564
	0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, // 67/3.14159265358
	0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, // 9793238462643383
	0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, // 2795) ) * sqrt(1
	0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // . - x);.return (
	0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x2d, // v >= 0.) ? 0.5 -
	0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x65, //  res : -0.5 + re
	0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x61, 0x79, 0x5f, 0x74, 0x6f, // s;.}.vec2 ray_to
	0x5f, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, // _equirectangular
	0x5f, 0x75, 0x76, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x61, 0x79, 0x29, 0x0a, 0x7b, // _uv( vec3 ray).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x0a, 0x30, 0x2e, // .return vec2(.0.
	0x35, 0x20, 0x2b, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, // 5 + atan2_approx
	0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x79, 0x2c, 0x20, 0x72, // _div2PI(ray.y, r
	0x61, 0x79, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, // ay.x),.acos_appr
	0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x7a, 0x29, 0x29, // ox_divPI(ray.z))
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, // ;.}.float InvsRG
	0x42, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, // B( float color).
	0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, // {.if (color <= 0
	0x2e, 0x30, 0x34, 0x30, 0x34, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, // .04045).return c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x32, 0x2e, 0x39, // olor * (1.0/12.9
	0x32, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // 2);.else.return 
	0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, // pow(color * (1.0
	0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x35, 0x35, // /1.055) + (0.055
	0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x29, 0x3b, 0x0a, 0x7d, // /1.055), 2.4);.}
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, // .float InvRec709
	0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, // ( float color).{
	0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, // .if (color <= 0.
	0x30, 0x38, 0x31, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // 081).return colo
	0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x34, 0x2e, 0x35, 0x29, 0x3b, 0x0a, 0x65, // r * (1.0/4.5);.e
	0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, // lse.return pow(c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x39, // olor * (1.0/1.09
	0x39, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x2f, 0x31, 0x2e, 0x30, 0x39, // 9) + (0.099/1.09
	0x39, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x3b, 0x0a, 0x7d, // 9), 1.0/0.45);.}
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, // .float InvGamma(
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, //  float color).{.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, // return InvsRGB(c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, // olor);.}.vec3 In
	0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, // vGamma( vec3 col
	0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, // or).{.return vec
	0x33, 0x28, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // 3(InvGamma(color
	0x2e, 0x78, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, // .x),InvGamma(col
	0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, // or.y),InvGamma(c
	0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, // olor.z));.}.vec3
	0x20, 0x49, 0x6e, 0x76, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, //  InvToneMap( vec
	0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // 3 color).{.float
	0x20, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x30, 0x2e, 0x35, 0x2f, 0x30, //  inv_2bh = 0.5/0
	0x2e, 0x32, 0x35, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x68, 0x20, 0x3d, 0x20, // .25;.float bh = 
	0x34, 0x2e, 0x30, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2d, 0x20, 0x32, 0x2e, 0x30, 0x3b, 0x0a, // 4.0*0.25 - 2.0;.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2d, 0x20, // return (color - 
	0x31, 0x2e, 0x30, 0x20, 0x2b, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // 1.0 + sqrt(color
	0x2a, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x20, 0x62, 0x68, 0x29, 0x20, 0x2b, 0x20, // *(color + bh) + 
	0x31, 0x2e, 0x30, 0x29, 0x29, 0x2a, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x3b, 0x0a, 0x7d, // 1.0))*inv_2bh;.}
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x20, 0x66, 0x6c, 0x6f, // .float sRGB( flo
	0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, // at f).{.float s;
	0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x33, 0x31, // .if (f <= 0.0031
	0x33, 0x30, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x20, 0x2a, // 308).s = 12.92 *
	0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, //  f;.else.s = 1.0
	0x35, 0x35, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, // 55 * pow(f, 1.0/
	0x32, 0x2e, 0x34, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x3b, 0x0a, 0x72, 0x65, // 2.4) - 0.055;.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // turn s;.}.float 
	0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, // Rec709( float f)
	0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, // .{.float s;.if (
	0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, // f <= 0.018).s = 
	0x34, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, // 4.5 * f;.else.s 
	0x3d, 0x20, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, // = 1.099 * pow(f,
	0x20, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x3b, 0x0a, //  0.45) - 0.099;.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // return s;.}.floa
	0x74, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // t FBGamma( float
	0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, //  color).{.return
	0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, //  sRGB(color);.}.
	0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, // vec2 FBGamma( ve
	0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, // c2 color).{.retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, // rn vec2(FBGamma(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, // color.x),FBGamma
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // (color.y));.}.ve
	0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, // c3 FBGamma( vec3
	0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, //  color).{.return
	0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, //  vec3(FBGamma(co
	0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, // lor.x),FBGamma(c
	0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, // olor.y),FBGamma(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // color.z));.}.vec
	0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x32, 0x32, 0x28, 0x20, 0x76, 0x65, 0x63, // 3 FBGamma22( vec
	0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // 3 color).{.retur
	0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // n vec3(pow(color
	0x2e, 0x78, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, // .x, 1.0/2.2),pow
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, // (color.y, 1.0/2.
	0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x2c, 0x20, // 2),pow(color.z, 
	0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // 1.0/2.2));.}.flo
	0x61, 0x74, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x66, 0x6c, // at FBToneMap( fl
	0x6f, 0x61, 0x74, 0x20, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // oat l).{.return 
	0x6c, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, // l * ((l*0.25 + 1
	0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, // .0) / (l + 1.0))
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, // ;.}.vec2 FBToneM
	0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, // ap( vec2 color).
	0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, // {.float l = dot(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, // color,vec2(0.176
	0x32, 0x30, 0x34, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, // 204+0.0108109*0.
	0x35, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, // 5,0.812985+0.010
	0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // 8109*0.5));.retu
	0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, // rn color * ((l*0
	0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, // .25 + 1.0) / (l 
	0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // + 1.0));.}.vec3 
	0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // FBToneMap( vec3 
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, // color).{.float l
	0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, //  = dot(color,vec
	0x33, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, // 3(0.176204,0.812
	0x39, 0x38, 0x35, 0x2c, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x29, 0x29, 0x3b, // 985,0.0108109));
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, // .return color * 
	0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, // ((l*0.25 + 1.0) 
	0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // / (l + 1.0));.}.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x28, 0x20, 0x76, // vec4 Additive( v
	0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // ec4 cBase, vec4 
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, // cBlend, float pe
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // rcent).{.return 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2b, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, // cBase + cBlend*p
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, // ercent;.}.vec3 S
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, // creen ( vec3 cBa
	0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, // se, vec3 cBlend)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, // .{.return 1.0 - 
	0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, // (1.0 - cBase) * 
	0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, // (1.0 - cBlend);.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x20, // }.vec4 Screen ( 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // vec4 cBase, vec4
	0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, //  cBlend).{.retur
	0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, // n 1.0 - (1.0 - c
	0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, // Base) * (1.0 - c
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, // Blend);.}.vec3 S
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // creenHDR ( vec3 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, // cBase, vec3 cBle
	0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, // nd).{.return max
	0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, // (1.0 - (1.0 - cB
	0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, // ase) * (1.0 - cB
	0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x2c, 0x30, // lend), vec3(0.,0
	0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, // .,0.));.}.vec4 S
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // creenHDR ( vec4 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, // cBase, vec4 cBle
	0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, // nd).{.return max
	0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, // (1.0 - (1.0 - cB
	0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, // ase) * (1.0 - cB
	0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, // lend), vec4(0.,0
	0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // .,0.,0.));.}.vec
	0x34, 0x20, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, // 4 Multiply ( vec
	0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // 4 cBase, vec4 cB
	0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, // lend, float perc
	0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, // ent).{.return cB
	0x61, 0x73, 0x65, 0x20, 0x2a, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, // ase * cBlend*per
	0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, // cent;.}.vec4 Ove
	0x72, 0x6c, 0x61, 0x79, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, // rlay ( vec4 cBas
	0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, // e, vec4 cBlend).
	0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, // {.vec4 cNew = st
	0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, // ep(0.5, cBase);.
	0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, // cNew = mix(cBase
	0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, // *cBlend*2.0, 1.0
	0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, // -2.0*(1.0-cBase)
	0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, // *(1.0-cBlend), c
	0x4e, 0x65, 0x77, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, // New);.return cNe
	0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, // w;.}.vec4 Overla
	0x79, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, // yHDR ( vec4 cBas
	0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, // e, vec4 cBlend).
	0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, // {.vec4 cNew = st
	0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, // ep(0.5, cBase);.
	0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x6d, 0x69, 0x78, 0x28, 0x63, // cNew = max(mix(c
	0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, // Base*cBlend*2.0,
	0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, //  1.0-2.0*(1.0-cB
	0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, // ase)*(1.0-cBlend
	0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, // ), cNew), vec4(0
	0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, // .,0.,0.,0.));.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // turn cNew;.}.vec
	0x33, 0x20, 0x63, 0x6f, 0x73, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, // 3 cos_hemisphere
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x29, // _sample( vec2 t)
	0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x68, 0x69, 0x20, 0x3d, 0x20, 0x74, // .{.float phi = t
	0x2e, 0x79, 0x20, 0x2a, 0x20, 0x28, 0x32, 0x2e, 0x30, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, // .y * (2.0*3.1415
	0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, // 9265358979323846
	0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x3b, 0x0a, 0x66, 0x6c, // 26433832795);.fl
	0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, // oat cosTheta = s
	0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, // qrt(1.0 - t.x);.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, // float sinTheta =
	0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, //  sqrt(t.x);.floa
	0x74, 0x20, 0x73, 0x70, 0x2c, 0x63, 0x70, 0x3b, 0x0a, 0x7b, 0x73, 0x70, 0x3d, 0x73, 0x69, 0x6e, // t sp,cp;.{sp=sin
	0x28, 0x70, 0x68, 0x69, 0x29, 0x3b, 0x63, 0x70, 0x3d, 0x63, 0x6f, 0x73, 0x28, 0x70, 0x68, 0x69, // (phi);cp=cos(phi
	0x29, 0x3b, 0x7d, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, // );};.return vec3
	0x28, 0x63, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, // (cp * sinTheta, 
	0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x73, 0x70, 0x20, 0x2a, 0x20, 0x73, // cosTheta, sp * s
	0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, // inTheta);.}.vec3
	0x20, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, //  rotate_to_vecto
	0x72, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, // r_upper( vec3 ve
	0x63, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x29, 0x0a, // c, vec3 normal).
	0x7b, 0x0a, 0x69, 0x66, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x3e, 0x20, // {.if(normal.y > 
	0x2d, 0x30, 0x2e, 0x39, 0x39, 0x39, 0x39, 0x39, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // -0.99999).{.floa
	0x74, 0x20, 0x68, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x28, 0x31, 0x2e, 0x30, 0x2b, 0x6e, // t h = 1.0/(1.0+n
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // ormal.y);.float 
	0x68, 0x7a, 0x20, 0x3d, 0x20, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x3b, // hz = h*normal.z;
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x3d, 0x20, 0x68, 0x7a, 0x2a, // .float hzx = hz*
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // normal.x;.return
	0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x28, //  vec3(.vec.x * (
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, // normal.y+hz*norm
	0x61, 0x6c, 0x2e, 0x7a, 0x29, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, // al.z) + vec.y * 
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, // normal.x - vec.z
	0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, //  * hzx,.vec.y * 
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, // normal.y - vec.x
	0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, //  * normal.x - ve
	0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x2c, 0x0a, // c.z * normal.z,.
	0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, // vec.y * normal.z
	0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x2b, //  - vec.x * hzx +
	0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, //  vec.z * (normal
	0x2e, 0x79, 0x2b, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x2a, 0x6e, 0x6f, // .y+h*normal.x*no
	0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, // rmal.x));.}.else
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x2d, 0x76, 0x65, 0x63, 0x3b, 0x0a, 0x7d, 0x0a, //  return -vec;.}.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, // uniform vec4 Ste
	0x72, 0x65, 0x6f, 0x5f, 0x53, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x0a, // reo_Saturation;.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, // uniform vec4 Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, // reo_MS_ZPD_YAxis
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // ;.uniform sample
	0x72, 0x32, 0x44, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, // r2D tex_stereo_f
	0x62, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, // b;.uniform sampl
	0x65, 0x72, 0x32, 0x44, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // er2D tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, // depth;.uniform v
	0x65, 0x63, 0x34, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, // ec4 w_h_height;.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, // vec3 gatherEyeCo
	0x6c, 0x6f, 0x72, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, // lor(vec2 u, bool
	0x20, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x20, //  isLeft).{.bool 
	0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // yaxis = (Stereo_
	0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x7a, 0x20, 0x21, // MS_ZPD_YAxis.z !
	0x3d, 0x20, 0x30, 0x2e, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x4d, 0x61, 0x78, // = 0.);.float Max
	0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, // Separation = (St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, // ereo_MS_ZPD_YAxi
	0x73, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, // s.x);.if (isLeft
	0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, // ).{.float lminDe
	0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, // pth = min(min(te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, // xtureLod(tex_ste
	0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, // reo_depth, u + (
	0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, // yaxis ? vec2(0.0
	0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // , 0.500 * MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // aration) : vec2(
	0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, // 0.500 * MaxSepar
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, // ation, 0.0)), 0.
	0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, // 0).x,.textureLod
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, // (tex_stereo_dept
	0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, // h, u + (yaxis ? 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, // vec2(0.0, 0.666 
	0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, // * MaxSeparation)
	0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, //  : vec2(0.666 * 
	0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, // MaxSeparation, 0
	0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, // .0)), 0.0).x),.t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // extureLod(tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, // ereo_depth, u + 
	0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, // (yaxis ? vec2(0.
	0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, // 0, MaxSeparation
	0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // ) : vec2( MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, // aration, 0.0)), 
	0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, // 0.0).x);.float l
	0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, // parallax = max(0
	0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, // .0, w_h_height.w
	0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, //  + MaxSeparation
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, //  * (1.0 - 1.0 / 
	0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, // (0.5 + lminDepth
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, //  * (1.0 / (Stere
	0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, // o_MS_ZPD_YAxis.y
	0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, // ) - 0.5))));.ret
	0x75, 0x72, 0x6e, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, // urn textureLod(t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, // ex_stereo_fb, u 
	0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // + (yaxis ? vec2(
	0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, // 0.0, -lparallax)
	0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, //  : vec2(lparalla
	0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, // x, 0.0)), 0.0).x
	0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, // yz;.}.else.{.flo
	0x61, 0x74, 0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, // at rminDepth = m
	0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, // in(min(textureLo
	0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, // d(tex_stereo_dep
	0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, // th, u - (yaxis ?
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, //  vec2(0.0, 0.500
	0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, //  * MaxSeparation
	0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, // ) : vec2(0.500 *
	0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, //  MaxSeparation, 
	0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, // 0.0)), 0.0).x,.t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // extureLod(tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, // ereo_depth, u - 
	0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, // (yaxis ? vec2(0.
	0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, // 0, 0.666 * MaxSe
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, // paration) : vec2
	0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, // (0.666 * MaxSepa
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, // ration, 0.0)), 0
	0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, // .0).x),.textureL
	0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, // od(tex_stereo_de
	0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, // pth, u - (yaxis 
	0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, // ? vec2(0.0, MaxS
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, // eparation) : vec
	0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, // 2( MaxSeparation
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, // , 0.0)), 0.0).x)
	0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, // ;.float rparalla
	0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, // x = max(0.0, w_h
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, // _height.w + MaxS
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, // eparation * (1.0
	0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, //  - 1.0 / (0.5 + 
	0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, // rminDepth * (1.0
	0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, //  / (Stereo_MS_ZP
	0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, // D_YAxis.y) - 0.5
	0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x65, 0x78, // ))));.return tex
	0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // tureLod(tex_ster
	0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, // eo_fb, u - (yaxi
	0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x72, // s ? vec2(0.0, -r
	0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, // parallax) : vec2
	0x28, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // (rparallax, 0.0)
	0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x7d, // ), 0.0).xyz;.}.}
	0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, // .void gatherLeft
	0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x28, 0x76, 0x65, 0x63, 0x32, // RightColors(vec2
	0x20, 0x75, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x63, 0x6f, //  u, out vec3 lco
	0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x6f, 0x6c, // l, out vec3 rcol
	0x29, 0x0a, 0x7b, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3d, // ).{.bool yaxis =
	0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, //  (Stereo_MS_ZPD_
	0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x7a, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x3b, 0x0a, // YAxis.z != 0.);.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // float MaxSeparat
	0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, // ion = (Stereo_MS
	0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, // _ZPD_YAxis.x);.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, // loat lminDepth =
	0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, //  min(min(texture
	0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, // Lod(tex_stereo_d
	0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, // epth, u + (yaxis
	0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, //  ? vec2(0.0, 0.5
	0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // 00 * MaxSeparati
	0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, // on) : vec2(0.500
	0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, //  * MaxSeparation
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, // , 0.0)), 0.0).x,
	0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, // .textureLod(tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, // stereo_depth, u 
	0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // + (yaxis ? vec2(
	0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, // 0.0, 0.666 * Max
	0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, // Separation) : ve
	0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, // c2(0.666 * MaxSe
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, // paration, 0.0)),
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, //  0.0).x),.textur
	0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // eLod(tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, // depth, u + (yaxi
	0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, // s ? vec2(0.0, Ma
	0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, // xSeparation) : v
	0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // ec2( MaxSeparati
	0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, // on, 0.0)), 0.0).
	0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, // x);.float lparal
	0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, // lax = max(0.0, w
	0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, // _h_height.w + Ma
	0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, // xSeparation * (1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, // .0 - 1.0 / (0.5 
	0x2b, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, // + lminDepth * (1
	0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, // .0 / (Stereo_MS_
	0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, // ZPD_YAxis.y) - 0
	0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x6c, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, // .5))));.lcol = t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // extureLod(tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, // ereo_fb, u + (ya
	0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, // xis ? vec2(0.0, 
	0x2d, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, // -lparallax) : ve
	0x63, 0x32, 0x28, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, // c2(lparallax, 0.
	0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x66, // 0)), 0.0).xyz;.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, // loat rminDepth =
	0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, //  min(min(texture
	0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, // Lod(tex_stereo_d
	0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, // epth, u - (yaxis
	0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, //  ? vec2(0.0, 0.5
	0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // 00 * MaxSeparati
	0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, // on) : vec2(0.500
	0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, //  * MaxSeparation
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, // , 0.0)), 0.0).x,
	0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, // .textureLod(tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, // stereo_depth, u 
	0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // - (yaxis ? vec2(
	0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, // 0.0, 0.666 * Max
	0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, // Separation) : ve
	0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, // c2(0.666 * MaxSe
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, // paration, 0.0)),
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, //  0.0).x),.textur
	0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // eLod(tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, // depth, u - (yaxi
	0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, // s ? vec2(0.0, Ma
	0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, // xSeparation) : v
	0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // ec2( MaxSeparati
	0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, // on, 0.0)), 0.0).
	0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, // x);.float rparal
	0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, // lax = max(0.0, w
	0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, // _h_height.w + Ma
	0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, // xSeparation * (1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, // .0 - 1.0 / (0.5 
	0x2b, 0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, // + rminDepth * (1
	0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, // .0 / (Stereo_MS_
	0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, // ZPD_YAxis.y) - 0
	0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, // .5))));.rcol = t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // extureLod(tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, // ereo_fb, u - (ya
	0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, // xis ? vec2(0.0, 
	0x2d, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, // -rparallax) : ve
	0x63, 0x32, 0x28, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, // c2(rparallax, 0.
	0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, // 0)), 0.0).xyz;.}
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, // .uniform mat4 St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, // ereo_LeftMat;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // iform mat4 Stere
	0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // o_RightMat;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // orm vec4 Stereo_
	0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, // LeftLuminance_Ga
	0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, // mma;.uniform vec
	0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // 4 Stereo_RightLu
	0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, // minance_DynDesat
	0x3b, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x65, // ;.void DynamicDe
	0x73, 0x61, 0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, 0x63, // satAnaglyph( vec
	0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, // 3 lCol, vec3 rCo
	0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x44, 0x65, 0x73, // l, out vec3 lDes
	0x61, 0x74, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // atCol, out vec3 
	0x72, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, // rDesatCol).{.flo
	0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, // at left2LeftLum 
	0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, // = dot(lCol, Ster
	0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, // eo_LeftLuminance
	0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, // _Gamma.xyz);.flo
	0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, // at left2RightLum
	0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, //  = dot(lCol, Ste
	0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, // reo_RightLuminan
	0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, // ce_DynDesat.xyz)
	0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, // ;.float right2Le
	0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, // ftLum = dot(rCol
	0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // , Stereo_LeftLum
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, // inance_Gamma.xyz
	0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, // );.float right2R
	0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, // ightLum = dot(rC
	0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, // ol, Stereo_Right
	0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, // Luminance_DynDes
	0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, // at.xyz);.float l
	0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, // eftLum = left2Le
	0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, // ftLum + left2Rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, // htLum;.float rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, // htLum = right2Le
	0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, // ftLum + right2Ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, // ghtLum;.float le
	0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // ftDesat = Stereo
	0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, // _RightLuminance_
	0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, // DynDesat.w * abs
	0x28, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, // ((left2LeftLum -
	0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, //  left2RightLum) 
	0x2f, 0x20, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, // / (leftLum + 0.0
	0x30, 0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, // 001));.float rig
	0x68, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // htDesat = Stereo
	0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, // _RightLuminance_
	0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, // DynDesat.w * abs
	0x28, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, // ((right2LeftLum 
	0x2d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, // - right2RightLum
	0x29, 0x20, 0x2f, 0x20, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, // ) / (rightLum + 
	0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, // 0.0001));.lDesat
	0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // Col = mix(lCol, 
	0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, // vec3_splat(leftL
	0x75, 0x6d, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, // um), leftDesat);
	0x0a, 0x72, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, // .rDesatCol = mix
	0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, // (rCol, vec3_spla
	0x74, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, 0x72, 0x69, 0x67, // t(rightLum), rig
	0x68, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, // htDesat);.}.vec3
	0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, //  LinearAnaglyph(
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, //  vec3 lCol, vec3
	0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, //  rCol).{.vec3 co
	0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x6c, // lor = (( (vec4(l
	0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, // Col, 1.)) * (Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x20, 0x2b, // reo_LeftMat) ) +
	0x20, 0x28, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, //  ( (vec4(rCol, 1
	0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, // .)) * (Stereo_Ri
	0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, // ghtMat) )).rgb;.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x7d, 0x0a, // return color;.}.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, // uniform vec4 Ste
	0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, // reo_DeghostGamma
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, // ;.uniform mat4 S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, // tereo_DeghostFil
	0x74, 0x65, 0x72, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, // ter;.vec3 Deghos
	0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // tAnaglyph( vec3 
	0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, // lCol, vec3 rCol)
	0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, // .{.vec3 color = 
	0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, // LinearAnaglyph(l
	0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // Col, rCol);.retu
	0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, // rn ( (pow(color,
	0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, //  Stereo_DeghostG
	0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x72, 0x67, 0x62, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x6d, 0x61, // amma.rgb)) * (ma
	0x74, 0x33, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, // t3(Stereo_Deghos
	0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, // tFilter[0].xyz, 
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, // Stereo_DeghostFi
	0x6c, 0x74, 0x65, 0x72, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, // lter[1].xyz, Ste
	0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, // reo_DeghostFilte
	0x72, 0x5b, 0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // r[2].xyz)) );.}.
	0x76, 0x6f, 0x69, 0x64, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x67, 0x6c, // void main().{.gl
	0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, // _FragColor = vec
	0x34, 0x28, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, // 4(gatherEyeColor
	0x28, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2c, 0x20, 0x66, 0x72, // (v_texcoord0, fr
	0x61, 0x63, 0x74, 0x28, 0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6f, 0x72, 0x64, // act(gl_FragCoord
	0x2e, 0x79, 0x2a, 0x30, 0x2e, 0x35, 0x29, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x2c, 0x20, // .y*0.5) < 0.5), 
	0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x00,                                           // 1.0);.}..
};
static const uint8_t fs_pp_stereo_int_dx11[2451] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x13, 0x53, // FSH.o.><.......S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, // tereo_MS_ZPD_YAx
	0x69, 0x73, 0x12, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x77, 0x5f, 0x68, // is...........w_h
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, // _height.........
	0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x30, // ..tex_stereo_fb0
	0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // ..........tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x30, 0x01, 0x01, 0x00, 0x01, 0x00, // ereo_depth0.....
	0x00, 0x00, 0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // .....tex_stereo_
	0x66, 0x62, 0x30, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x74, 0x65, 0x78, // fb0..........tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x30, 0x01, 0x01, // _stereo_depth0..
	0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe4, 0x08, 0x00, 0x00, 0x44, 0x58, 0x42, 0x43, 0xd7, // ...........DXBC.
	0x39, 0xf6, 0x06, 0x40, 0x9c, 0x6a, 0xa6, 0x1b, 0x3f, 0xc5, 0x67, 0x71, 0xd8, 0xc0, 0x65, 0x01, // 9..@.j..?.gq..e.
	0x00, 0x00, 0x00, 0xe4, 0x08, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x84, // ...........,....
	0x00, 0x00, 0x00, 0xb8, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x4e, 0x50, 0x00, 0x00, 0x00, 0x02, // .......ISGNP....
	0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, // .......8........
	0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x02, 0x00, 0x00, 0x44, // ...............D
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, // .......SV_POSITI
	0x4f, 0x4e, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0xab, 0xab, 0xab, 0x4f, // ON.TEXCOORD....O
	0x53, 0x47, 0x4e, 0x2c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x20, // SGN,........... 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, // .......SV_TARGET
	0x00, 0xab, 0xab, 0x53, 0x48, 0x45, 0x58, 0x24, 0x08, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x09, // ...SHEX$...P....
	0x02, 0x00, 0x00, 0x6a, 0x08, 0x00, 0x01, 0x59, 0x00, 0x00, 0x04, 0x46, 0x8e, 0x20, 0x00, 0x00, // ...j...Y...F. ..
	0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x03, 0x00, 0x60, 0x10, 0x00, 0x00, // .......Z....`...
	0x00, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x03, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x58, // ...Z....`......X
	0x18, 0x00, 0x04, 0x00, 0x70, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x55, 0x00, 0x00, 0x58, // ....p......UU..X
	0x18, 0x00, 0x04, 0x00, 0x70, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x55, 0x55, 0x00, 0x00, 0x64, // ....p......UU..d
	0x20, 0x00, 0x04, 0x22, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x62, //  .."...........b
	0x10, 0x00, 0x03, 0x32, 0x10, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x03, 0xf2, // ...2.......e....
	0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x02, 0x03, 0x00, 0x00, 0x00, 0x38, //  ......h.......8
	0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x10, 0x10, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x1a, 0x00, 0x00, 0x05, 0x12, // ....@.....?.....
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, // ...............1
	0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x39, 0x00, 0x00, 0x08, 0x22, // ....@.....?9..."
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .......*. ......
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x04, 0x03, 0x0a, // ....@...........
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x08, 0x52, 0x00, 0x10, 0x00, 0x01, // .......6...R....
	0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ....@...........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x0b, 0xa2, 0x00, 0x10, 0x00, 0x01, // .......8........
	0x00, 0x00, 0x00, 0x06, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, // ..... ..........
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0xfa, // @.........?.....
	0x7e, 0x2a, 0x3f, 0x37, 0x00, 0x00, 0x09, 0xf2, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x56, // ~*?7...........V
	0x05, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x16, // .......F........
	0x0b, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf2, 0x00, 0x10, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x14, 0x10, 0x00, 0x01, // ...F.......F....
	0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x12, // ...H.......CU...
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, // .......F.......F
	0x7e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, // ~.......`.......
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, // @......H.......C
	0x55, 0x15, 0x00, 0x42, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x01, // U..B............
	0x00, 0x00, 0x00, 0x96, 0x7c, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, // ....|.......`...
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x07, 0x12, // ....@......3....
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, // .......*........
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x08, 0x52, 0x00, 0x10, 0x00, 0x01, // .......6...R....
	0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ....@...........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x06, 0x22, 0x00, 0x10, 0x00, 0x01, // .......6..."....
	0x00, 0x00, 0x00, 0x0a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, // ..... .........7
	0x00, 0x00, 0x09, 0xc2, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x56, 0x05, 0x10, 0x00, 0x00, // ...........V....
	0x00, 0x00, 0x00, 0x06, 0x04, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x56, 0x01, 0x10, 0x00, 0x01, // ...........V....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc2, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa6, // ................
	0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x14, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x48, // ...............H
	0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x42, 0x00, 0x10, 0x00, 0x00, // .......CU..B....
	0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x96, 0x7c, 0x10, 0x00, 0x01, // ............|...
	0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, // ....`.......@...
	0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, // ...3...........*
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, // ................
	0x00, 0x00, 0x0b, 0x42, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, // ...B........@...
	0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x1a, // ..?...?...?...?.
	0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x42, // . .............B
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, // .......*........
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0x32, 0x00, 0x00, 0x09, 0x12, 0x00, 0x10, 0x00, 0x00, // @......2........
	0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x00, // ...........*....
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x0e, 0x00, 0x00, 0x0a, 0x12, // ....@.....?.....
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, // ........@.....?.
	0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x0a, 0x00, 0x10, 0x00, 0x00, // ..?...?...?.....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, // ................
	0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, // ...A........@...
	0x00, 0x80, 0x3f, 0x32, 0x00, 0x00, 0x0b, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, // ..?2............
	0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, // . ..............
	0x00, 0x00, 0x00, 0x3a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x34, // ...:. .........4
	0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x06, 0x82, // ....@......6....
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x01, // ...........A....
	0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, // ...6..."........
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x09, 0x52, 0x00, 0x10, 0x00, 0x00, // @......7...R....
	0x00, 0x00, 0x00, 0x56, 0x05, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa6, 0x0b, 0x10, 0x00, 0x01, // ...V............
	0x00, 0x00, 0x00, 0x06, 0x01, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x52, // ...............R
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, // ................
	0x11, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, // .......H.......C
	0x55, 0x15, 0x00, 0xd2, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x00, 0x10, 0x00, 0x00, // U...............
	0x00, 0x00, 0x00, 0xc6, 0x79, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x00, // ....y.......`...
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x01, 0x36, // ....@..........6
	0x00, 0x00, 0x08, 0x52, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, // ...R........@...
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, // ...............8
	0x00, 0x00, 0x0b, 0xa2, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x80, 0x20, 0x00, 0x00, // ............. ..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........@.......
	0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x7e, 0x2a, 0x3f, 0x37, 0x00, 0x00, 0x09, 0xf2, // ..?.....~*?7....
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x56, 0x05, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, // .......V.......F
	0x0e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x16, 0x0b, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x08, 0xf2, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x80, 0x41, // ...........F...A
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x14, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x48, // .......F.......H
	0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x12, 0x00, 0x10, 0x00, 0x01, // .......CU.......
	0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, 0x01, // ...F.......F~...
	0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, // ....`.......@...
	0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x22, // ...H.......CU.."
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x16, // ................
	0x7e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, // ~.......`.......
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x01, // @......3........
	0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x08, 0x52, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, // ...6...R........
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // @...............
	0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x06, 0x22, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0a, // ...6..."........
	0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x09, 0x62, // . .........7...b
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x56, 0x05, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, // .......V........
	0x01, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x56, 0x04, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, // .......V........
	0x00, 0x00, 0x08, 0x62, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x56, 0x06, 0x10, 0x80, 0x41, // ...b.......V...A
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x11, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x48, // ...............H
	0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x22, 0x00, 0x10, 0x00, 0x01, // .......CU.."....
	0x00, 0x00, 0x00, 0x96, 0x05, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x16, 0x7e, 0x10, 0x00, 0x01, // ............~...
	0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, // ....`.......@...
	0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, // ...3............
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0e, // ................
	0x00, 0x00, 0x0b, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, // ..."........@...
	0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x1a, // ..?...?...?...?.
	0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x22, // . ............."
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, // ................
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0x32, 0x00, 0x00, 0x09, 0x12, 0x00, 0x10, 0x00, 0x01, // @......2........
	0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x0e, 0x00, 0x00, 0x0a, 0x12, // ....@.....?.....
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, // ........@.....?.
	0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x0a, 0x00, 0x10, 0x00, 0x01, // ..?...?...?.....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x12, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, // ................
	0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, // ...A........@...
	0x00, 0x80, 0x3f, 0x32, 0x00, 0x00, 0x0b, 0x12, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, // ..?2............
	0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x01, // . ..............
	0x00, 0x00, 0x00, 0x3a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x34, // ...:. .........4
	0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x06, 0x82, // ....@......6....
	0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x01, // ...........A....
	0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, // ...6..."........
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x09, 0x32, 0x00, 0x10, 0x00, 0x01, // @......7...2....
	0x00, 0x00, 0x00, 0x56, 0x05, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x02, // ...V............
	0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x32, // ...F...........2
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x01, // .......F...A....
	0x00, 0x00, 0x00, 0x46, 0x10, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, // ...F.......H....
	0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0xd2, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, // ...CU..........F
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0xc6, 0x79, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........y.......
	0x60, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, // `.......@.......
	0x00, 0x00, 0x01, 0x36, 0x00, 0x00, 0x05, 0x72, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, // ...6...r .......
	0x03, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x82, 0x20, 0x10, 0x00, 0x00, // .......6.... ...
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x3e, 0x00, 0x00, 0x01, 0x00, // ....@.....?>....
	0x00, 0x20, 0x00,                                                                               // . .
};
static const uint8_t fs_pp_stereo_int_spv[4212] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x13, 0x53, // FSH.o.><.......S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, // tereo_MS_ZPD_YAx
	0x69, 0x73, 0x12, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x77, 0x5f, 0x68, // is...........w_h
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x01, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, // _height.........
	0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x30, // ..tex_stereo_fb0
	0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x02, 0x22, 0x00, 0x10, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // ......."..tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x30, 0x00, 0x03, 0x00, 0x00, 0x00, // ereo_depth0.....
	0x00, 0x02, 0x22, 0x00, 0xf8, 0x0f, 0x00, 0x00, 0x03, 0x02, 0x23, 0x07, 0x00, 0x00, 0x01, 0x00, // ..".......#.....
	0x0b, 0x00, 0x08, 0x00, 0x95, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x02, 0x00, // ................
	0x01, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, 0x4c, 0x53, 0x4c, // ............GLSL
	0x2e, 0x73, 0x74, 0x64, 0x2e, 0x34, 0x35, 0x30, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x03, 0x00, // .std.450........
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x08, 0x00, 0x04, 0x00, 0x00, 0x00, // ................
	0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x21, 0x01, 0x00, 0x00, // ....main....!...
	0x25, 0x01, 0x00, 0x00, 0x30, 0x01, 0x00, 0x00, 0x10, 0x00, 0x03, 0x00, 0x04, 0x00, 0x00, 0x00, // %...0...........
	0x07, 0x00, 0x00, 0x00, 0x03, 0x00, 0x03, 0x00, 0x05, 0x00, 0x00, 0x00, 0xf4, 0x01, 0x00, 0x00, // ................
	0x05, 0x00, 0x04, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, 0x00, // ........main....
	0x05, 0x00, 0x08, 0x00, 0x2b, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // ....+...tex_ster
	0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x00, 0x00, 0x00, 0x00, // eo_fbSampler....
	0x05, 0x00, 0x08, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // ........tex_ster
	0x65, 0x6f, 0x5f, 0x66, 0x62, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x00, 0x00, 0x00, 0x00, // eo_fbTexture....
	0x05, 0x00, 0x08, 0x00, 0x32, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // ....2...tex_ster
	0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x00, // eo_depthSampler.
	0x05, 0x00, 0x08, 0x00, 0x34, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // ....4...tex_ster
	0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x00, // eo_depthTexture.
	0x05, 0x00, 0x06, 0x00, 0x4c, 0x00, 0x00, 0x00, 0x55, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x42, // ....L...UniformB
	0x6c, 0x6f, 0x63, 0x6b, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x08, 0x00, 0x4c, 0x00, 0x00, 0x00, // lock........L...
	0x00, 0x00, 0x00, 0x00, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, // ....Stereo_MS_ZP
	0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x00, 0x06, 0x00, 0x06, 0x00, 0x4c, 0x00, 0x00, 0x00, // D_YAxis.....L...
	0x01, 0x00, 0x00, 0x00, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x00, 0x00, // ....w_h_height..
	0x05, 0x00, 0x03, 0x00, 0x4e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x06, 0x00, // ....N...........
	0x21, 0x01, 0x00, 0x00, 0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6f, 0x72, 0x64, // !...gl_FragCoord
	0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x05, 0x00, 0x25, 0x01, 0x00, 0x00, 0x76, 0x5f, 0x74, 0x65, // ........%...v_te
	0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x00, 0x05, 0x00, 0x06, 0x00, 0x30, 0x01, 0x00, 0x00, // xcoord0.....0...
	0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x00, 0x00, // bgfx_FragData0..
	0x47, 0x00, 0x04, 0x00, 0x2b, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // G...+...".......
	0x47, 0x00, 0x04, 0x00, 0x2b, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, // G...+...!.......
	0x47, 0x00, 0x04, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // G.......".......
	0x47, 0x00, 0x04, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // G.......!.......
	0x47, 0x00, 0x04, 0x00, 0x32, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // G...2...".......
	0x47, 0x00, 0x04, 0x00, 0x32, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, // G...2...!.......
	0x47, 0x00, 0x04, 0x00, 0x34, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // G...4...".......
	0x47, 0x00, 0x04, 0x00, 0x34, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, // G...4...!.......
	0x48, 0x00, 0x05, 0x00, 0x4c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, // H...L.......#...
	0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0x4c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // ....H...L.......
	0x23, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x47, 0x00, 0x03, 0x00, 0x4c, 0x00, 0x00, 0x00, // #.......G...L...
	0x02, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x4e, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, // ....G...N..."...
	0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x4e, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, // ....G...N...!...
	0x01, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x21, 0x01, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, // ....G...!.......
	0x0f, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x25, 0x01, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, // ....G...%.......
	0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x30, 0x01, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, // ....G...0.......
	0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x21, 0x00, 0x03, 0x00, // ............!...
	0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x02, 0x00, 0x06, 0x00, 0x00, 0x00, // ................
	0x16, 0x00, 0x03, 0x00, 0x07, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x19, 0x00, 0x09, 0x00, // ........ .......
	0x08, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x17, 0x00, 0x04, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // ................
	0x17, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, // ................
	0x14, 0x00, 0x02, 0x00, 0x19, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x1b, 0x00, 0x00, 0x00, // ................
	0x07, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x2a, 0x00, 0x00, 0x00, // ........ ...*...
	0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x2a, 0x00, 0x00, 0x00, // ........;...*...
	0x2b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x2d, 0x00, 0x00, 0x00, // +....... ...-...
	0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x2d, 0x00, 0x00, 0x00, // ........;...-...
	0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x2a, 0x00, 0x00, 0x00, // ........;...*...
	0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x2d, 0x00, 0x00, 0x00, // 2.......;...-...
	0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x00, 0x04, 0x00, 0x37, 0x00, 0x00, 0x00, // 4...........7...
	0x20, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x37, 0x00, 0x00, 0x00, //  .......+...7...
	0x38, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x37, 0x00, 0x00, 0x00, // 8.......+...7...
	0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x03, 0x00, 0x40, 0x00, 0x00, 0x00, // <...........@...
	0x08, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x04, 0x00, 0x4c, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, // ........L.......
	0x0e, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x4d, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // .... ...M.......
	0x4c, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x4d, 0x00, 0x00, 0x00, 0x4e, 0x00, 0x00, 0x00, // L...;...M...N...
	0x02, 0x00, 0x00, 0x00, 0x15, 0x00, 0x04, 0x00, 0x4f, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, // ........O... ...
	0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x4f, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, // ....+...O...P...
	0x02, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x51, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // .... ...Q.......
	0x07, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, // ....+.......T...
	0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x4f, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, // ....+...O...W...
	0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, // ....+.......`...
	0x00, 0x00, 0x00, 0x3f, 0x17, 0x00, 0x04, 0x00, 0x67, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, // ...?....g.......
	0x02, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00, // ....+.......s...
	0xfa, 0x7e, 0x2a, 0x3f, 0x2b, 0x00, 0x04, 0x00, 0x4f, 0x00, 0x00, 0x00, 0x95, 0x00, 0x00, 0x00, // .~*?+...O.......
	0x03, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x99, 0x00, 0x00, 0x00, // ....+...........
	0x00, 0x00, 0x80, 0x3f, 0x2b, 0x00, 0x04, 0x00, 0x4f, 0x00, 0x00, 0x00, 0x9b, 0x00, 0x00, 0x00, // ...?+...O.......
	0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x20, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // .... ... .......
	0x0e, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x20, 0x01, 0x00, 0x00, 0x21, 0x01, 0x00, 0x00, // ....;... ...!...
	0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x24, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // .... ...$.......
	0x0b, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x24, 0x01, 0x00, 0x00, 0x25, 0x01, 0x00, 0x00, // ....;...$...%...
	0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x2f, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, // .... .../.......
	0x0e, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x2f, 0x01, 0x00, 0x00, 0x30, 0x01, 0x00, 0x00, // ....;.../...0...
	0x03, 0x00, 0x00, 0x00, 0x36, 0x00, 0x05, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, // ....6...........
	0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x05, 0x00, 0x00, 0x00, // ................
	0x3d, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x00, 0x00, // =.......,...+...
	0x3d, 0x00, 0x04, 0x00, 0x08, 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, // =......./.......
	0x3d, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, // =.......3...2...
	0x3d, 0x00, 0x04, 0x00, 0x08, 0x00, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, // =.......5...4...
	0x3d, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x22, 0x01, 0x00, 0x00, 0x21, 0x01, 0x00, 0x00, // =......."...!...
	0x3d, 0x00, 0x04, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x26, 0x01, 0x00, 0x00, 0x25, 0x01, 0x00, 0x00, // =.......&...%...
	0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x5a, 0x01, 0x00, 0x00, 0x22, 0x01, 0x00, 0x00, // Q.......Z..."...
	0x01, 0x00, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x5b, 0x01, 0x00, 0x00, // ............[...
	0x5a, 0x01, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x06, 0x00, 0x07, 0x00, 0x00, 0x00, // Z...`...........
	0x5c, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x5b, 0x01, 0x00, 0x00, // ............[...
	0xb8, 0x00, 0x05, 0x00, 0x19, 0x00, 0x00, 0x00, 0x5d, 0x01, 0x00, 0x00, 0x5c, 0x01, 0x00, 0x00, // ........].......
	0x60, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x20, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // `....... .......
	0xfb, 0x00, 0x03, 0x00, 0x57, 0x00, 0x00, 0x00, 0x8a, 0x01, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, // ....W...........
	0x8a, 0x01, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x51, 0x00, 0x00, 0x00, 0x8b, 0x01, 0x00, 0x00, // ....A...Q.......
	0x4e, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, // N...<...P...=...
	0x07, 0x00, 0x00, 0x00, 0x8c, 0x01, 0x00, 0x00, 0x8b, 0x01, 0x00, 0x00, 0xb7, 0x00, 0x05, 0x00, // ................
	0x19, 0x00, 0x00, 0x00, 0x8d, 0x01, 0x00, 0x00, 0x8c, 0x01, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, // ............T...
	0x41, 0x00, 0x06, 0x00, 0x51, 0x00, 0x00, 0x00, 0x8e, 0x01, 0x00, 0x00, 0x4e, 0x00, 0x00, 0x00, // A...Q.......N...
	0x3c, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, // <...W...=.......
	0x8f, 0x01, 0x00, 0x00, 0x8e, 0x01, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x1f, 0x02, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0x5d, 0x01, 0x00, 0x00, 0x91, 0x01, 0x00, 0x00, // ........].......
	0xd8, 0x01, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xd8, 0x01, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, // ................
	0x07, 0x00, 0x00, 0x00, 0xdc, 0x01, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x8f, 0x01, 0x00, 0x00, // ........`.......
	0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xdd, 0x01, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, // P...........T...
	0xdc, 0x01, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xdf, 0x01, 0x00, 0x00, // ................
	0x60, 0x00, 0x00, 0x00, 0x8f, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, // `.......P.......
	0xe0, 0x01, 0x00, 0x00, 0xdf, 0x01, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, // ........T...P...
	0x67, 0x00, 0x00, 0x00, 0xe1, 0x01, 0x00, 0x00, 0x8d, 0x01, 0x00, 0x00, 0x8d, 0x01, 0x00, 0x00, // g...............
	0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xe2, 0x01, 0x00, 0x00, 0xe1, 0x01, 0x00, 0x00, // ................
	0xdd, 0x01, 0x00, 0x00, 0xe0, 0x01, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, // ................
	0xe3, 0x01, 0x00, 0x00, 0x26, 0x01, 0x00, 0x00, 0xe2, 0x01, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, // ....&.......V...
	0x40, 0x00, 0x00, 0x00, 0x50, 0x02, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, // @...P...5...3...
	0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x53, 0x02, 0x00, 0x00, 0x50, 0x02, 0x00, 0x00, // X.......S...P...
	0xe3, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, // ........T...Q...
	0x07, 0x00, 0x00, 0x00, 0xe6, 0x01, 0x00, 0x00, 0x53, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........S.......
	0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xea, 0x01, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00, // ............s...
	0x8f, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xeb, 0x01, 0x00, 0x00, // ....P...........
	0x54, 0x00, 0x00, 0x00, 0xea, 0x01, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // T...............
	0xed, 0x01, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00, 0x8f, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, // ....s.......P...
	0x0b, 0x00, 0x00, 0x00, 0xee, 0x01, 0x00, 0x00, 0xed, 0x01, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, // ............T...
	0x50, 0x00, 0x05, 0x00, 0x67, 0x00, 0x00, 0x00, 0xef, 0x01, 0x00, 0x00, 0x8d, 0x01, 0x00, 0x00, // P...g...........
	0x8d, 0x01, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xf0, 0x01, 0x00, 0x00, // ................
	0xef, 0x01, 0x00, 0x00, 0xeb, 0x01, 0x00, 0x00, 0xee, 0x01, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, // ................
	0x0b, 0x00, 0x00, 0x00, 0xf1, 0x01, 0x00, 0x00, 0x26, 0x01, 0x00, 0x00, 0xf0, 0x01, 0x00, 0x00, // ........&.......
	0x56, 0x00, 0x05, 0x00, 0x40, 0x00, 0x00, 0x00, 0x5a, 0x02, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, // V...@...Z...5...
	0x33, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x5d, 0x02, 0x00, 0x00, // 3...X.......]...
	0x5a, 0x02, 0x00, 0x00, 0xf1, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, // Z...........T...
	0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xf4, 0x01, 0x00, 0x00, 0x5d, 0x02, 0x00, 0x00, // Q...........]...
	0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0xf5, 0x01, 0x00, 0x00, // ................
	0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0xe6, 0x01, 0x00, 0x00, 0xf4, 0x01, 0x00, 0x00, // ....%...........
	0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xf9, 0x01, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, // P...........T...
	0x8f, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xfb, 0x01, 0x00, 0x00, // ....P...........
	0x8f, 0x01, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x67, 0x00, 0x00, 0x00, // ....T...P...g...
	0xfc, 0x01, 0x00, 0x00, 0x8d, 0x01, 0x00, 0x00, 0x8d, 0x01, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, // ................
	0x0b, 0x00, 0x00, 0x00, 0xfd, 0x01, 0x00, 0x00, 0xfc, 0x01, 0x00, 0x00, 0xf9, 0x01, 0x00, 0x00, // ................
	0xfb, 0x01, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x00, 0x00, // ................
	0x26, 0x01, 0x00, 0x00, 0xfd, 0x01, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, 0x40, 0x00, 0x00, 0x00, // &.......V...@...
	0x64, 0x02, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, // d...5...3...X...
	0x0e, 0x00, 0x00, 0x00, 0x67, 0x02, 0x00, 0x00, 0x64, 0x02, 0x00, 0x00, 0xfe, 0x01, 0x00, 0x00, // ....g...d.......
	0x02, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // ....T...Q.......
	0x01, 0x02, 0x00, 0x00, 0x67, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, // ....g...........
	0x07, 0x00, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, // ............%...
	0xf5, 0x01, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x51, 0x00, 0x00, 0x00, // ........A...Q...
	0x03, 0x02, 0x00, 0x00, 0x4e, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x95, 0x00, 0x00, 0x00, // ....N...8.......
	0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x04, 0x02, 0x00, 0x00, 0x03, 0x02, 0x00, 0x00, // =...............
	0x41, 0x00, 0x06, 0x00, 0x51, 0x00, 0x00, 0x00, 0x07, 0x02, 0x00, 0x00, 0x4e, 0x00, 0x00, 0x00, // A...Q.......N...
	0x3c, 0x00, 0x00, 0x00, 0x9b, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, // <.......=.......
	0x08, 0x02, 0x00, 0x00, 0x07, 0x02, 0x00, 0x00, 0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // ................
	0x09, 0x02, 0x00, 0x00, 0x99, 0x00, 0x00, 0x00, 0x08, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, // ................
	0x07, 0x00, 0x00, 0x00, 0x0a, 0x02, 0x00, 0x00, 0x09, 0x02, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, // ............`...
	0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x0b, 0x02, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, // ................
	0x0a, 0x02, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x0c, 0x02, 0x00, 0x00, // ................
	0x60, 0x00, 0x00, 0x00, 0x0b, 0x02, 0x00, 0x00, 0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // `...............
	0x0d, 0x02, 0x00, 0x00, 0x99, 0x00, 0x00, 0x00, 0x0c, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, // ................
	0x07, 0x00, 0x00, 0x00, 0x0e, 0x02, 0x00, 0x00, 0x99, 0x00, 0x00, 0x00, 0x0d, 0x02, 0x00, 0x00, // ................
	0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x0f, 0x02, 0x00, 0x00, 0x8f, 0x01, 0x00, 0x00, // ................
	0x0e, 0x02, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x10, 0x02, 0x00, 0x00, // ................
	0x04, 0x02, 0x00, 0x00, 0x0f, 0x02, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, // ................
	0x11, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, // ........(...T...
	0x10, 0x02, 0x00, 0x00, 0x7f, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x15, 0x02, 0x00, 0x00, // ................
	0x11, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x16, 0x02, 0x00, 0x00, // ....P...........
	0x54, 0x00, 0x00, 0x00, 0x15, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, // T.......P.......
	0x18, 0x02, 0x00, 0x00, 0x11, 0x02, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, // ........T...P...
	0x67, 0x00, 0x00, 0x00, 0x19, 0x02, 0x00, 0x00, 0x8d, 0x01, 0x00, 0x00, 0x8d, 0x01, 0x00, 0x00, // g...............
	0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x1a, 0x02, 0x00, 0x00, 0x19, 0x02, 0x00, 0x00, // ................
	0x16, 0x02, 0x00, 0x00, 0x18, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, // ................
	0x1b, 0x02, 0x00, 0x00, 0x26, 0x01, 0x00, 0x00, 0x1a, 0x02, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, // ....&.......V...
	0x40, 0x00, 0x00, 0x00, 0x6e, 0x02, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, // @...n.../...,...
	0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x71, 0x02, 0x00, 0x00, 0x6e, 0x02, 0x00, 0x00, // X.......q...n...
	0x1b, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x4f, 0x00, 0x08, 0x00, // ........T...O...
	0x1b, 0x00, 0x00, 0x00, 0x1e, 0x02, 0x00, 0x00, 0x71, 0x02, 0x00, 0x00, 0x71, 0x02, 0x00, 0x00, // ........q...q...
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, // ................
	0x20, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x91, 0x01, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, //  ...............
	0x07, 0x00, 0x00, 0x00, 0x95, 0x01, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x8f, 0x01, 0x00, 0x00, // ........`.......
	0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x96, 0x01, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, // P...........T...
	0x95, 0x01, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x98, 0x01, 0x00, 0x00, // ................
	0x60, 0x00, 0x00, 0x00, 0x8f, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, // `.......P.......
	0x99, 0x01, 0x00, 0x00, 0x98, 0x01, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, // ........T...P...
	0x67, 0x00, 0x00, 0x00, 0x9a, 0x01, 0x00, 0x00, 0x8d, 0x01, 0x00, 0x00, 0x8d, 0x01, 0x00, 0x00, // g...............
	0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x9b, 0x01, 0x00, 0x00, 0x9a, 0x01, 0x00, 0x00, // ................
	0x96, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, // ................
	0x9c, 0x01, 0x00, 0x00, 0x26, 0x01, 0x00, 0x00, 0x9b, 0x01, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, // ....&.......V...
	0x40, 0x00, 0x00, 0x00, 0x28, 0x02, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, // @...(...5...3...
	0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x2b, 0x02, 0x00, 0x00, 0x28, 0x02, 0x00, 0x00, // X.......+...(...
	0x9c, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, // ........T...Q...
	0x07, 0x00, 0x00, 0x00, 0x9f, 0x01, 0x00, 0x00, 0x2b, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........+.......
	0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xa3, 0x01, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00, // ............s...
	0x8f, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xa4, 0x01, 0x00, 0x00, // ....P...........
	0x54, 0x00, 0x00, 0x00, 0xa3, 0x01, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // T...............
	0xa6, 0x01, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00, 0x8f, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, // ....s.......P...
	0x0b, 0x00, 0x00, 0x00, 0xa7, 0x01, 0x00, 0x00, 0xa6, 0x01, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, // ............T...
	0x50, 0x00, 0x05, 0x00, 0x67, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x00, 0x00, 0x8d, 0x01, 0x00, 0x00, // P...g...........
	0x8d, 0x01, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xa9, 0x01, 0x00, 0x00, // ................
	0xa8, 0x01, 0x00, 0x00, 0xa4, 0x01, 0x00, 0x00, 0xa7, 0x01, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, // ................
	0x0b, 0x00, 0x00, 0x00, 0xaa, 0x01, 0x00, 0x00, 0x26, 0x01, 0x00, 0x00, 0xa9, 0x01, 0x00, 0x00, // ........&.......
	0x56, 0x00, 0x05, 0x00, 0x40, 0x00, 0x00, 0x00, 0x32, 0x02, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, // V...@...2...5...
	0x33, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x35, 0x02, 0x00, 0x00, // 3...X.......5...
	0x32, 0x02, 0x00, 0x00, 0xaa, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, // 2...........T...
	0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xad, 0x01, 0x00, 0x00, 0x35, 0x02, 0x00, 0x00, // Q...........5...
	0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0xae, 0x01, 0x00, 0x00, // ................
	0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x9f, 0x01, 0x00, 0x00, 0xad, 0x01, 0x00, 0x00, // ....%...........
	0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xb2, 0x01, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, // P...........T...
	0x8f, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xb4, 0x01, 0x00, 0x00, // ....P...........
	0x8f, 0x01, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x67, 0x00, 0x00, 0x00, // ....T...P...g...
	0xb5, 0x01, 0x00, 0x00, 0x8d, 0x01, 0x00, 0x00, 0x8d, 0x01, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, // ................
	0x0b, 0x00, 0x00, 0x00, 0xb6, 0x01, 0x00, 0x00, 0xb5, 0x01, 0x00, 0x00, 0xb2, 0x01, 0x00, 0x00, // ................
	0xb4, 0x01, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xb7, 0x01, 0x00, 0x00, // ................
	0x26, 0x01, 0x00, 0x00, 0xb6, 0x01, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, 0x40, 0x00, 0x00, 0x00, // &.......V...@...
	0x3c, 0x02, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, // <...5...3...X...
	0x0e, 0x00, 0x00, 0x00, 0x3f, 0x02, 0x00, 0x00, 0x3c, 0x02, 0x00, 0x00, 0xb7, 0x01, 0x00, 0x00, // ....?...<.......
	0x02, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // ....T...Q.......
	0xba, 0x01, 0x00, 0x00, 0x3f, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, // ....?...........
	0x07, 0x00, 0x00, 0x00, 0xbb, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, // ............%...
	0xae, 0x01, 0x00, 0x00, 0xba, 0x01, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x51, 0x00, 0x00, 0x00, // ........A...Q...
	0xbc, 0x01, 0x00, 0x00, 0x4e, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x95, 0x00, 0x00, 0x00, // ....N...8.......
	0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0xbd, 0x01, 0x00, 0x00, 0xbc, 0x01, 0x00, 0x00, // =...............
	0x41, 0x00, 0x06, 0x00, 0x51, 0x00, 0x00, 0x00, 0xc0, 0x01, 0x00, 0x00, 0x4e, 0x00, 0x00, 0x00, // A...Q.......N...
	0x3c, 0x00, 0x00, 0x00, 0x9b, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, // <.......=.......
	0xc1, 0x01, 0x00, 0x00, 0xc0, 0x01, 0x00, 0x00, 0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // ................
	0xc2, 0x01, 0x00, 0x00, 0x99, 0x00, 0x00, 0x00, 0xc1, 0x01, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, // ................
	0x07, 0x00, 0x00, 0x00, 0xc3, 0x01, 0x00, 0x00, 0xc2, 0x01, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, // ............`...
	0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xc4, 0x01, 0x00, 0x00, 0xbb, 0x01, 0x00, 0x00, // ................
	0xc3, 0x01, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xc5, 0x01, 0x00, 0x00, // ................
	0x60, 0x00, 0x00, 0x00, 0xc4, 0x01, 0x00, 0x00, 0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // `...............
	0xc6, 0x01, 0x00, 0x00, 0x99, 0x00, 0x00, 0x00, 0xc5, 0x01, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, // ................
	0x07, 0x00, 0x00, 0x00, 0xc7, 0x01, 0x00, 0x00, 0x99, 0x00, 0x00, 0x00, 0xc6, 0x01, 0x00, 0x00, // ................
	0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xc8, 0x01, 0x00, 0x00, 0x8f, 0x01, 0x00, 0x00, // ................
	0xc7, 0x01, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xc9, 0x01, 0x00, 0x00, // ................
	0xbd, 0x01, 0x00, 0x00, 0xc8, 0x01, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, // ................
	0xca, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, // ........(...T...
	0xc9, 0x01, 0x00, 0x00, 0x7f, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0xce, 0x01, 0x00, 0x00, // ................
	0xca, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xcf, 0x01, 0x00, 0x00, // ....P...........
	0x54, 0x00, 0x00, 0x00, 0xce, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, // T.......P.......
	0xd1, 0x01, 0x00, 0x00, 0xca, 0x01, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, // ........T...P...
	0x67, 0x00, 0x00, 0x00, 0xd2, 0x01, 0x00, 0x00, 0x8d, 0x01, 0x00, 0x00, 0x8d, 0x01, 0x00, 0x00, // g...............
	0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xd3, 0x01, 0x00, 0x00, 0xd2, 0x01, 0x00, 0x00, // ................
	0xcf, 0x01, 0x00, 0x00, 0xd1, 0x01, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, // ................
	0xd4, 0x01, 0x00, 0x00, 0x26, 0x01, 0x00, 0x00, 0xd3, 0x01, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, // ....&.......V...
	0x40, 0x00, 0x00, 0x00, 0x46, 0x02, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, // @...F.../...,...
	0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x49, 0x02, 0x00, 0x00, 0x46, 0x02, 0x00, 0x00, // X.......I...F...
	0xd4, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x4f, 0x00, 0x08, 0x00, // ........T...O...
	0x1b, 0x00, 0x00, 0x00, 0xd7, 0x01, 0x00, 0x00, 0x49, 0x02, 0x00, 0x00, 0x49, 0x02, 0x00, 0x00, // ........I...I...
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, // ................
	0x20, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x1f, 0x02, 0x00, 0x00, 0xff, 0x00, 0x01, 0x00, //  ...............
	0xf8, 0x00, 0x02, 0x00, 0x20, 0x02, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x1b, 0x00, 0x00, 0x00, // .... ...........
	0x94, 0x02, 0x00, 0x00, 0x1e, 0x02, 0x00, 0x00, 0xd8, 0x01, 0x00, 0x00, 0xd7, 0x01, 0x00, 0x00, // ................
	0x91, 0x01, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x60, 0x01, 0x00, 0x00, // ....Q.......`...
	0x94, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // ........Q.......
	0x61, 0x01, 0x00, 0x00, 0x94, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, // a...........Q...
	0x07, 0x00, 0x00, 0x00, 0x62, 0x01, 0x00, 0x00, 0x94, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // ....b...........
	0x50, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x63, 0x01, 0x00, 0x00, 0x60, 0x01, 0x00, 0x00, // P.......c...`...
	0x61, 0x01, 0x00, 0x00, 0x62, 0x01, 0x00, 0x00, 0x99, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x03, 0x00, // a...b.......>...
	0x30, 0x01, 0x00, 0x00, 0x63, 0x01, 0x00, 0x00, 0xfd, 0x00, 0x01, 0x00, 0x38, 0x00, 0x01, 0x00, // 0...c.......8...
	0x00, 0x00, 0x20, 0x00,                                                                         // .. .
};
static const bgfx::EmbeddedShader fs_pp_stereo_int = BGFX_EMBEDDED_SHADER(fs_pp_stereo_int);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Build of fragment shader from fs_pp_stereo.sc to fs_pp_stereo_flipped_int with options: FLIPPED_INT NOSTEREO
static const uint8_t fs_pp_stereo_flipped_int_mtl[3228] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x14, 0x74, // FSH.o.><.......t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, // ex_stereo_fbSamp
	0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x74, 0x65, // ler...........te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x54, 0x65, 0x78, 0x74, 0x75, // x_stereo_fbTextu
	0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x74, 0x65, 0x78, // re...........tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, // _stereo_depthSam
	0x70, 0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x74, // pler...........t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x54, // ex_stereo_depthT
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, // exture..........
	0x13, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, // .Stereo_MS_ZPD_Y
	0x41, 0x78, 0x69, 0x73, 0x12, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x77, // Axis...........w
	0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x01, 0x10, 0x00, 0x01, 0x00, 0x00, // _h_height.......
	0x00, 0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, // ....tex_stereo_f
	0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x74, 0x65, 0x78, 0x5f, // b...........tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x10, 0x00, 0x00, 0x00, // stereo_depth....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9e, 0x0b, 0x00, 0x00, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, // ..........#inclu
	0x64, 0x65, 0x20, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x64, 0x6c, 0x69, 0x62, // de <metal_stdlib
	0x3e, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x73, 0x69, 0x6d, 0x64, // >.#include <simd
	0x2f, 0x73, 0x69, 0x6d, 0x64, 0x2e, 0x68, 0x3e, 0x0a, 0x0a, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, // /simd.h>..using 
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x3b, // namespace metal;
	0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, // ..struct _Global
	0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, // .{.    float4 St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, // ereo_MS_ZPD_YAxi
	0x73, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x77, 0x5f, // s;.    float4 w_
	0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, // h_height;.};..st
	0x72, 0x75, 0x63, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, // ruct xlatMtlMain
	0x5f, 0x6f, 0x75, 0x74, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // _out.{.    float
	0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, // 4 bgfx_FragData0
	0x20, 0x5b, 0x5b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, //  [[color(0)]];.}
	0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, // ;..struct xlatMt
	0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, // lMain_in.{.    f
	0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, // loat2 v_texcoord
	0x30, 0x20, 0x5b, 0x5b, 0x75, 0x73, 0x65, 0x72, 0x28, 0x6c, 0x6f, 0x63, 0x6e, 0x30, 0x29, 0x5d, // 0 [[user(locn0)]
	0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, // ];.};..fragment 
	0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x20, // xlatMtlMain_out 
	0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x28, 0x78, 0x6c, 0x61, 0x74, // xlatMtlMain(xlat
	0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x5b, 0x5b, // MtlMain_in in [[
	0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x5d, 0x5d, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, // stage_in]], cons
	0x74, 0x61, 0x6e, 0x74, 0x20, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x26, 0x20, 0x5f, 0x6d, // tant _Global& _m
	0x74, 0x6c, 0x5f, 0x75, 0x20, 0x5b, 0x5b, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x28, 0x30, 0x29, // tl_u [[buffer(0)
	0x5d, 0x5d, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, // ]], texture2d<fl
	0x6f, 0x61, 0x74, 0x3e, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // oat> tex_stereo_
	0x66, 0x62, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x30, 0x29, 0x5d, // fb [[texture(0)]
	0x5d, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, 0x6f, // ], texture2d<flo
	0x61, 0x74, 0x3e, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, // at> tex_stereo_d
	0x65, 0x70, 0x74, 0x68, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x31, // epth [[texture(1
	0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x74, 0x65, 0x78, // )]], sampler tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, // _stereo_fbSample
	0x72, 0x20, 0x5b, 0x5b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, // r [[sampler(0)]]
	0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // , sampler tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, // ereo_depthSample
	0x72, 0x20, 0x5b, 0x5b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x31, 0x29, 0x5d, 0x5d, // r [[sampler(1)]]
	0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, // , float4 gl_Frag
	0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x5b, 0x5b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, // Coord [[position
	0x5d, 0x5d, 0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, // ]]).{.    xlatMt
	0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x3d, 0x20, // lMain_out out = 
	0x7b, 0x7d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, // {};.    float3 _
	0x36, 0x36, 0x30, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x64, 0x6f, 0x0a, 0x20, 0x20, 0x20, 0x20, // 660;.    do.    
	0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x5f, // {.        bool _
	0x33, 0x39, 0x37, 0x20, 0x3d, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, // 397 = _mtl_u.Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, // reo_MS_ZPD_YAxis
	0x2e, 0x7a, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // .z != 0.0;.     
	0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x66, 0x72, 0x61, 0x63, 0x74, 0x28, 0x67, 0x6c, 0x5f, //    if (fract(gl_
	0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x30, 0x2e, // FragCoord.y * 0.
	0x35, 0x29, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // 5) >= 0.5).     
	0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //    {.           
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x34, 0x35, 0x38, 0x20, 0x3d, 0x20, 0x66, 0x61, //  float _458 = fa
	0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x5f, 0x6d, 0x74, // st::max(0.0, _mt
	0x6c, 0x5f, 0x75, 0x2e, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, // l_u.w_h_height.w
	0x20, 0x2b, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, //  + (_mtl_u.Stere
	0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, // o_MS_ZPD_YAxis.x
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, //  * (1.0 - (1.0 /
	0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, //  (0.5 + (fast::m
	0x69, 0x6e, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, // in(fast::min(tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, // _stereo_depth.sa
	0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // mple(tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, // depthSampler, (i
	0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2b, 0x20, // n.v_texcoord0 + 
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, // select(float2(0.
	0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, // 5 * _mtl_u.Stere
	0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, // o_MS_ZPD_YAxis.x
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, // , 0.0), float2(0
	0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, // .0, 0.5 * _mtl_u
	0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, // .Stereo_MS_ZPD_Y
	0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, // Axis.x), bool2(_
	0x33, 0x39, 0x37, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, // 397))), level(0.
	0x30, 0x29, 0x29, 0x2e, 0x78, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // 0)).x, tex_stere
	0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, // o_depth.sample(t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, // ex_stereo_depthS
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, // ampler, (in.v_te
	0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2b, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, // xcoord0 + select
	0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x30, 0x30, 0x30, // (float2(0.666000
	0x30, 0x30, 0x38, 0x35, 0x38, 0x33, 0x30, 0x36, 0x38, 0x38, 0x34, 0x37, 0x36, 0x35, 0x36, 0x32, // 0085830688476562
	0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, // 5 * _mtl_u.Stere
	0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, // o_MS_ZPD_YAxis.x
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, // , 0.0), float2(0
	0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x30, 0x30, 0x30, 0x30, 0x30, 0x38, 0x35, // .0, 0.6660000085
	0x38, 0x33, 0x30, 0x36, 0x38, 0x38, 0x34, 0x37, 0x36, 0x35, 0x36, 0x32, 0x35, 0x20, 0x2a, 0x20, // 8306884765625 * 
	0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, // _mtl_u.Stereo_MS
	0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, // _ZPD_YAxis.x), b
	0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x33, 0x39, 0x37, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, // ool2(_397))), le
	0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x74, 0x65, // vel(0.0)).x), te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, // x_stereo_depth.s
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // ample(tex_stereo
	0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, // _depthSampler, (
	0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2b, // in.v_texcoord0 +
	0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x5f, //  select(float2(_
	0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, // mtl_u.Stereo_MS_
	0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, // ZPD_YAxis.x, 0.0
	0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x5f, // ), float2(0.0, _
	0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, // mtl_u.Stereo_MS_
	0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, 0x6f, // ZPD_YAxis.x), bo
	0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x33, 0x39, 0x37, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, // ol2(_397))), lev
	0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x28, // el(0.0)).x) * ((
	0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, // 1.0 / _mtl_u.Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, // reo_MS_ZPD_YAxis
	0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, // .y) - 0.5)))))))
	0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x36, // ;.            _6
	0x36, 0x30, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // 60 = tex_stereo_
	0x66, 0x62, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // fb.sample(tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, // ereo_fbSampler, 
	0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, // (in.v_texcoord0 
	0x2b, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, // + select(float2(
	0x5f, 0x34, 0x35, 0x38, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, // _458, 0.0), floa
	0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x5f, 0x34, 0x35, 0x38, 0x29, 0x2c, 0x20, // t2(0.0, -_458), 
	0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x33, 0x39, 0x37, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, // bool2(_397))), l
	0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, // evel(0.0)).xyz;.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, //             brea
	0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, // k;.        }.   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //      else.      
	0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //   {.            
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x35, 0x32, 0x39, 0x20, 0x3d, 0x20, 0x66, 0x61, 0x73, // float _529 = fas
	0x74, 0x3a, 0x3a, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, // t::max(0.0, _mtl
	0x5f, 0x75, 0x2e, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, // _u.w_h_height.w 
	0x2b, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // + (_mtl_u.Stereo
	0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x20, // _MS_ZPD_YAxis.x 
	0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, // * (1.0 - (1.0 / 
	0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, // (0.5 + (fast::mi
	0x6e, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x5f, // n(fast::min(tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, 0x6d, // stereo_depth.sam
	0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, // ple(tex_stereo_d
	0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, 0x6e, // epthSampler, (in
	0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2d, 0x20, 0x73, // .v_texcoord0 - s
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x35, // elect(float2(0.5
	0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, //  * _mtl_u.Stereo
	0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, // _MS_ZPD_YAxis.x,
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, //  0.0), float2(0.
	0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, // 0, 0.5 * _mtl_u.
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, // Stereo_MS_ZPD_YA
	0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x33, // xis.x), bool2(_3
	0x39, 0x37, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, // 97))), level(0.0
	0x29, 0x29, 0x2e, 0x78, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // )).x, tex_stereo
	0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, // _depth.sample(te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, // x_stereo_depthSa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, // mpler, (in.v_tex
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2d, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, // coord0 - select(
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x30, 0x30, 0x30, 0x30, // float2(0.6660000
	0x30, 0x38, 0x35, 0x38, 0x33, 0x30, 0x36, 0x38, 0x38, 0x34, 0x37, 0x36, 0x35, 0x36, 0x32, 0x35, // 0858306884765625
	0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, //  * _mtl_u.Stereo
	0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, // _MS_ZPD_YAxis.x,
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, //  0.0), float2(0.
	0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x30, 0x30, 0x30, 0x30, 0x30, 0x38, 0x35, 0x38, // 0, 0.66600000858
	0x33, 0x30, 0x36, 0x38, 0x38, 0x34, 0x37, 0x36, 0x35, 0x36, 0x32, 0x35, 0x20, 0x2a, 0x20, 0x5f, // 306884765625 * _
	0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, // mtl_u.Stereo_MS_
	0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, 0x6f, // ZPD_YAxis.x), bo
	0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x33, 0x39, 0x37, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, // ol2(_397))), lev
	0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x74, 0x65, 0x78, // el(0.0)).x), tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, // _stereo_depth.sa
	0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // mple(tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, // depthSampler, (i
	0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2d, 0x20, // n.v_texcoord0 - 
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x5f, 0x6d, // select(float2(_m
	0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, // tl_u.Stereo_MS_Z
	0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // PD_YAxis.x, 0.0)
	0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x5f, 0x6d, // , float2(0.0, _m
	0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, // tl_u.Stereo_MS_Z
	0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, // PD_YAxis.x), boo
	0x6c, 0x32, 0x28, 0x5f, 0x33, 0x39, 0x37, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, // l2(_397))), leve
	0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x31, // l(0.0)).x) * ((1
	0x2e, 0x30, 0x20, 0x2f, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, // .0 / _mtl_u.Ster
	0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, // eo_MS_ZPD_YAxis.
	0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x3b, // y) - 0.5)))))));
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x36, 0x36, // .            _66
	0x30, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, // 0 = tex_stereo_f
	0x62, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, // b.sample(tex_ste
	0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, // reo_fbSampler, (
	0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2d, // in.v_texcoord0 -
	0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x5f, //  select(float2(_
	0x35, 0x32, 0x39, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // 529, 0.0), float
	0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x5f, 0x35, 0x32, 0x39, 0x29, 0x2c, 0x20, 0x62, // 2(0.0, -_529), b
	0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x33, 0x39, 0x37, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, // ool2(_397))), le
	0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x20, // vel(0.0)).xyz;. 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, //            break
	0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, // ;.        }.    
	0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x20, 0x2f, 0x2f, 0x20, 0x75, 0x6e, //     break; // un
	0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x61, 0x72, // reachable workar
	0x6f, 0x75, 0x6e, 0x64, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, // ound.    } while
	0x28, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x6f, 0x75, 0x74, // (false);.    out
	0x2e, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x20, // .bgfx_FragData0 
	0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x36, 0x36, 0x30, 0x2c, 0x20, 0x31, // = float4(_660, 1
	0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // .0);.    return 
	0x6f, 0x75, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x0a, 0x00, 0x00, 0x60, 0x00,                         // out;.}....`.
};
static const uint8_t fs_pp_stereo_flipped_int_essl[10552] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x25, 0x29, // FSH.o.><......%)
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x33, 0x32, 0x30, 0x20, 0x65, // ..#version 320 e
	0x73, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, // s.#define attrib
	0x75, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x76, // ute in.#define v
	0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, // arying in.precis
	0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3b, // ion highp float;
	0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, // .precision highp
	0x20, 0x69, 0x6e, 0x74, 0x3b, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x73, 0x68, //  int;.#define sh
	0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, // adow2D(_sampler,
	0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, //  _coord) texture
	0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, // (_sampler, _coor
	0x64, 0x29, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x73, 0x68, 0x61, 0x64, 0x6f, // d).#define shado
	0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // w2DProj(_sampler
	0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // , _coord) textur
	0x65, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, // eProj(_sampler, 
	0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x0a, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x65, 0x64, 0x69, // _coord).out medi
	0x75, 0x6d, 0x70, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, // ump vec4 bgfx_Fr
	0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, // agColor;.varying
	0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, //  vec2 v_texcoord
	0x30, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, // 0;.vec3 instMul(
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x20, // vec3 _vec, mat3 
	0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // _mtx) { return (
	0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, //  (_vec) * (_mtx)
	0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, //  ); }.vec3 instM
	0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, // ul(mat3 _mtx, ve
	0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, // c3 _vec) { retur
	0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, // n ( (_mtx) * (_v
	0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, // ec) ); }.vec4 in
	0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, // stMul(vec4 _vec,
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, //  mat4 _mtx) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, // turn ( (_vec) * 
	0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, // (_mtx) ); }.vec4
	0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, //  instMul(mat4 _m
	0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, // tx, vec4 _vec) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, //  return ( (_mtx)
	0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, //  * (_vec) ); }.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, 0x70, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, // loat rcp(float _
	0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x2f, // a) { return 1.0/
	0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, // _a; }.vec2 rcp(v
	0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // ec2 _a) { return
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, //  vec2(1.0)/_a; }
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, // .vec3 rcp(vec3 _
	0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, // a) { return vec3
	0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, // (1.0)/_a; }.vec4
	0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, //  rcp(vec4 _a) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x31, 0x2e, 0x30, 0x29, // return vec4(1.0)
	0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x65, 0x63, 0x32, // /_a; }.vec2 vec2
	0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, // _splat(float _x)
	0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, //  { return vec2(_
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, // x, _x); }.vec3 v
	0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // ec3_splat(float 
	0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, // _x) { return vec
	0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, // 3(_x, _x, _x); }
	0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, // .vec4 vec4_splat
	0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // (float _x) { ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, // urn vec4(_x, _x,
	0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, //  _x, _x); }.uvec
	0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, // 2 uvec2_splat(ui
	0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // nt _x) { return 
	0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, // uvec2(_x, _x); }
	0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, // .uvec3 uvec3_spl
	0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // at(uint _x) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, // turn uvec3(_x, _
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x34, 0x20, // x, _x); }.uvec4 
	0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, // uvec4_splat(uint
	0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, //  _x) { return uv
	0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, // ec4(_x, _x, _x, 
	0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, // _x); }.mat4 mtxF
	0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, // romRows(vec4 _0,
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, //  vec4 _1, vec4 _
	0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // 2, vec4 _3).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, // turn transpose(m
	0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, // at4(_0, _1, _2, 
	0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, // _3) );.}.mat4 mt
	0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, // xFromCols(vec4 _
	0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // 0, vec4 _1, vec4
	0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, //  _2, vec4 _3).{.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, // return mat4(_0, 
	0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, // _1, _2, _3);.}.m
	0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, // at3 mtxFromRows(
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, // vec3 _0, vec3 _1
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // , vec3 _2).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, // urn transpose(ma
	0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x20, 0x29, // t3(_0, _1, _2) )
	0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, // ;.}.mat3 mtxFrom
	0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, // Cols(vec3 _0, ve
	0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, // c3 _1, vec3 _2).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, // {.return mat3(_0
	0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, // , _1, _2);.}.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, // form vec4 u_view
	0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, // Rect;.uniform ve
	0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x54, 0x65, 0x78, 0x65, 0x6c, 0x3b, 0x0a, // c4 u_viewTexel;.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, // uniform mat4 u_v
	0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, // iew;.uniform mat
	0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, // 4 u_invView;.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x70, 0x72, 0x6f, 0x6a, // form mat4 u_proj
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, // ;.uniform mat4 u
	0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // _invProj;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, // m mat4 u_viewPro
	0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, // j;.uniform mat4 
	0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, // u_invViewProj;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, // niform mat4 u_mo
	0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // del[32];.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, //  mat4 u_modelVie
	0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, // w;.uniform mat4 
	0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, // u_modelViewProj;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, // .uniform vec4 u_
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x66, 0x34, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // alphaRef4;.float
	0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, //  sqr( float v).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // .return v*v;.}.v
	0x65, 0x63, 0x32, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x29, // ec2 sqr( vec2 v)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, // .{.return v*v;.}
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // .vec3 sqr( vec3 
	0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, // v).{.return v*v;
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6d, 0x75, 0x6c, 0x5f, 0x77, 0x31, 0x28, 0x20, // .}.vec3 mul_w1( 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x29, 0x0a, // vec3 v, mat4 m).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2e, 0x78, 0x2a, 0x6d, 0x5b, 0x30, // {.return v.x*m[0
	0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x79, 0x2a, 0x6d, 0x5b, 0x31, // ].xyz + (v.y*m[1
	0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x7a, 0x2a, 0x6d, 0x5b, 0x32, // ].xyz + (v.z*m[2
	0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x6d, 0x5b, 0x33, 0x5d, 0x2e, 0x78, 0x79, 0x7a, // ].xyz + m[3].xyz
	0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x63, 0x6f, 0x73, // ));.}.float acos
	0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x20, 0x66, // _approx_divPI( f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // loat v).{.float 
	0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, // x = abs(v);.if(1
	0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, // . - x <= 0.00006
	0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // 103515625).retur
	0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, // n (v >= 0.) ? 0.
	0x20, 0x3a, 0x20, 0x31, 0x2e, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, //  : 1.;.float res
	0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, //  = ((-0.155972/3
	0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, // .141592653589793
	0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, // 2384626433832795
	0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, // ) * x + (1.56467
	0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, // /3.1415926535897
	0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, // 9323846264338327
	0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, // 95) ) * sqrt(1. 
	0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, // - x);.return (v 
	0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x31, // >= 0.) ? res : 1
	0x2e, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // . - res;.}.float
	0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, //  atan2_approx_di
	0x76, 0x32, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x79, 0x2c, 0x20, 0x66, // v2PI( float y, f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // loat x).{.float 
	0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x79, 0x29, 0x3b, 0x0a, // abs_y = abs(y);.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, // float abs_x = ab
	0x73, 0x28, 0x78, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3c, // s(x);.if(abs_x <
	0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, // = 0.000061035156
	0x32, 0x35, 0x20, 0x26, 0x26, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3c, 0x3d, 0x20, 0x30, // 25 && abs_y <= 0
	0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, // .00006103515625)
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x30, 0x2e, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // .return 0.;.floa
	0x74, 0x20, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2d, 0x20, 0x61, // t r = (abs_x - a
	0x62, 0x73, 0x5f, 0x79, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2b, // bs_y) / (abs_x +
	0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, //  abs_y);.float a
	0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, // ngle = ((x < 0.)
	0x20, 0x3f, 0x20, 0x28, 0x33, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x20, 0x3a, 0x20, 0x28, 0x31, 0x2e, //  ? (3./8.) : (1.
	0x2f, 0x38, 0x2e, 0x29, 0x29, 0x0a, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x32, 0x31, 0x31, 0x38, 0x36, // /8.)).+ (0.21186
	0x38, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, // 8 /(2.*3.1415926
	0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, // 5358979323846264
	0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x72, 0x20, 0x2a, 0x20, // 33832795) * r * 
	0x72, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x39, 0x38, 0x37, 0x33, 0x30, 0x35, 0x20, 0x2f, 0x28, 0x32, // r - 0.987305 /(2
	0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, // .*3.141592653589
	0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, // 7932384626433832
	0x37, 0x39, 0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, // 795)) * ((x < 0.
	0x29, 0x20, 0x3f, 0x20, 0x2d, 0x72, 0x20, 0x3a, 0x20, 0x72, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, // ) ? -r : r);.ret
	0x75, 0x72, 0x6e, 0x20, 0x28, 0x79, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, // urn (y < 0.) ? -
	0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3a, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x3b, 0x0a, 0x7d, // angle : angle;.}
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x73, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x72, // .float asin_appr
	0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // ox_divPI( float 
	0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, // v).{.float x = a
	0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, // bs(v);.if(1. - x
	0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, //  <= 0.0000610351
	0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, // 5625).return (v 
	0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x3a, 0x20, 0x2d, // >= 0.) ? 0.5 : -
	0x30, 0x2e, 0x35, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, // 0.5;.float res =
	0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, //  ((-0.155972/3.1
	0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, // 4159265358979323
	0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, // 84626433832795) 
	0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, // * x + (1.56467/3
	0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, // .141592653589793
	0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, // 2384626433832795
	0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, // ) ) * sqrt(1. - 
	0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, // x);.return (v >=
	0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, //  0.) ? 0.5 - res
	0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, //  : -0.5 + res;.}
	0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x61, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x71, 0x75, // .vec2 ray_to_equ
	0x69, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x75, 0x76, 0x28, // irectangular_uv(
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x61, 0x79, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, //  vec3 ray).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x0a, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, // urn vec2(.0.5 + 
	0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, // atan2_approx_div
	0x32, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x79, 0x2c, 0x20, 0x72, 0x61, 0x79, 0x2e, 0x78, // 2PI(ray.y, ray.x
	0x29, 0x2c, 0x0a, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, // ),.acos_approx_d
	0x69, 0x76, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // ivPI(ray.z));.}.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x20, 0x66, // float InvsRGB( f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, // loat color).{.if
	0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, //  (color <= 0.040
	0x34, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // 45).return color
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x29, 0x3b, 0x0a, //  * (1.0/12.92);.
	0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, // else.return pow(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, // color * (1.0/1.0
	0x35, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x2f, 0x31, 0x2e, 0x30, // 55) + (0.055/1.0
	0x35, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // 55), 2.4);.}.flo
	0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x20, 0x66, 0x6c, // at InvRec709( fl
	0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, // oat color).{.if 
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x38, 0x31, 0x29, // (color <= 0.081)
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, // .return color * 
	0x28, 0x31, 0x2e, 0x30, 0x2f, 0x34, 0x2e, 0x35, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, // (1.0/4.5);.else.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // return pow(color
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, 0x20, 0x2b, //  * (1.0/1.099) +
	0x20, 0x28, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, 0x2c, 0x20, //  (0.099/1.099), 
	0x31, 0x2e, 0x30, 0x2f, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // 1.0/0.45);.}.flo
	0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x66, 0x6c, 0x6f, // at InvGamma( flo
	0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, // at color).{.retu
	0x72, 0x6e, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // rn InvsRGB(color
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, // );.}.vec3 InvGam
	0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, // ma( vec3 color).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x49, 0x6e, // {.return vec3(In
	0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, // vGamma(color.x),
	0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, // InvGamma(color.y
	0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // ),InvGamma(color
	0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, // .z));.}.vec3 Inv
	0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, // ToneMap( vec3 co
	0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x69, 0x6e, 0x76, // lor).{.float inv
	0x5f, 0x32, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x30, 0x2e, 0x35, 0x2f, 0x30, 0x2e, 0x32, 0x35, 0x3b, // _2bh = 0.5/0.25;
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x34, 0x2e, 0x30, 0x2a, // .float bh = 4.0*
	0x30, 0x2e, 0x32, 0x35, 0x20, 0x2d, 0x20, 0x32, 0x2e, 0x30, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // 0.25 - 2.0;.retu
	0x72, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, // rn (color - 1.0 
	0x2b, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2a, 0x28, 0x63, 0x6f, // + sqrt(color*(co
	0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x20, 0x62, 0x68, 0x29, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, // lor + bh) + 1.0)
	0x29, 0x2a, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // )*inv_2bh;.}.flo
	0x61, 0x74, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, // at sRGB( float f
	0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, // ).{.float s;.if 
	0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x33, 0x31, 0x33, 0x30, 0x38, 0x29, // (f <= 0.0031308)
	0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, // .s = 12.92 * f;.
	0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x20, 0x2a, // else.s = 1.055 *
	0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x34, 0x29, //  pow(f, 1.0/2.4)
	0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, //  - 0.055;.return
	0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x52, 0x65, 0x63, 0x37, //  s;.}.float Rec7
	0x30, 0x39, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, // 09( float f).{.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, // loat s;.if (f <=
	0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x34, 0x2e, 0x35, 0x20, //  0.018).s = 4.5 
	0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, // * f;.else.s = 1.
	0x30, 0x39, 0x39, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x34, // 099 * pow(f, 0.4
	0x35, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // 5) - 0.099;.retu
	0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, // rn s;.}.float FB
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, // Gamma( float col
	0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x52, 0x47, // or).{.return sRG
	0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, // B(color);.}.vec2
	0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, //  FBGamma( vec2 c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // olor).{.return v
	0x65, 0x63, 0x32, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // ec2(FBGamma(colo
	0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, // r.x),FBGamma(col
	0x6f, 0x72, 0x2e, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, // or.y));.}.vec3 F
	0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, // BGamma( vec3 col
	0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, // or).{.return vec
	0x33, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, // 3(FBGamma(color.
	0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // x),FBGamma(color
	0x2e, 0x79, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // .y),FBGamma(colo
	0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, // r.z));.}.vec3 FB
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x32, 0x32, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, // Gamma22( vec3 co
	0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, // lor).{.return ve
	0x63, 0x33, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x2c, 0x20, // c3(pow(color.x, 
	0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, // 1.0/2.2),pow(col
	0x6f, 0x72, 0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, // or.y, 1.0/2.2),p
	0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, // ow(color.z, 1.0/
	0x32, 0x2e, 0x32, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, // 2.2));.}.float F
	0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // BToneMap( float 
	0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6c, 0x20, 0x2a, 0x20, // l).{.return l * 
	0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, // ((l*0.25 + 1.0) 
	0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // / (l + 1.0));.}.
	0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, // vec2 FBToneMap( 
	0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, // vec2 color).{.fl
	0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // oat l = dot(colo
	0x72, 0x2c, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2b, // r,vec2(0.176204+
	0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x2c, 0x30, 0x2e, // 0.0108109*0.5,0.
	0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, // 812985+0.0108109
	0x2a, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, // *0.5));.return c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, // olor * ((l*0.25 
	0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, // + 1.0) / (l + 1.
	0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x54, 0x6f, // 0));.}.vec3 FBTo
	0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // neMap( vec3 colo
	0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, // r).{.float l = d
	0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, // ot(color,vec3(0.
	0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2c, // 176204,0.812985,
	0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, // 0.0108109));.ret
	0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, // urn color * ((l*
	0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, // 0.25 + 1.0) / (l
	0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, //  + 1.0));.}.vec4
	0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, //  Additive( vec4 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, // cBase, vec4 cBle
	0x6e, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, // nd, float percen
	0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, // t).{.return cBas
	0x65, 0x20, 0x2b, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, // e + cBlend*perce
	0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, // nt;.}.vec3 Scree
	0x6e, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, // n ( vec3 cBase, 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, // vec3 cBlend).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, // eturn 1.0 - (1.0
	0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, //  - cBase) * (1.0
	0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, //  - cBlend);.}.ve
	0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, // c4 Screen ( vec4
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, //  cBase, vec4 cBl
	0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, // end).{.return 1.
	0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, // 0 - (1.0 - cBase
	0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // ) * (1.0 - cBlen
	0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, // d);.}.vec3 Scree
	0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, // nHDR ( vec3 cBas
	0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, // e, vec3 cBlend).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, // {.return max(1.0
	0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, //  - (1.0 - cBase)
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, //  * (1.0 - cBlend
	0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, // ), vec3(0.,0.,0.
	0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, // ));.}.vec4 Scree
	0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, // nHDR ( vec4 cBas
	0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, // e, vec4 cBlend).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, // {.return max(1.0
	0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, //  - (1.0 - cBase)
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, //  * (1.0 - cBlend
	0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, // ), vec4(0.,0.,0.
	0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4d, 0x75, // ,0.));.}.vec4 Mu
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // ltiply ( vec4 cB
	0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, // ase, vec4 cBlend
	0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, // , float percent)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, // .{.return cBase 
	0x2a, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, // * cBlend*percent
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, // ;.}.vec4 Overlay
	0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, //  ( vec4 cBase, v
	0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, // ec4 cBlend).{.ve
	0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, // c4 cNew = step(0
	0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, // .5, cBase);.cNew
	0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, //  = mix(cBase*cBl
	0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, // end*2.0, 1.0-2.0
	0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, // *(1.0-cBase)*(1.
	0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, // 0-cBlend), cNew)
	0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, // ;.return cNew;.}
	0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x48, 0x44, 0x52, // .vec4 OverlayHDR
	0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, //  ( vec4 cBase, v
	0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, // ec4 cBlend).{.ve
	0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, // c4 cNew = step(0
	0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, // .5, cBase);.cNew
	0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, //  = max(mix(cBase
	0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, // *cBlend*2.0, 1.0
	0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, // -2.0*(1.0-cBase)
	0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, // *(1.0-cBlend), c
	0x4e, 0x65, 0x77, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, // New), vec4(0.,0.
	0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // ,0.,0.));.return
	0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, //  cNew;.}.vec3 co
	0x73, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x5f, 0x73, 0x61, 0x6d, // s_hemisphere_sam
	0x70, 0x6c, 0x65, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x66, // ple( vec2 t).{.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x68, 0x69, 0x20, 0x3d, 0x20, 0x74, 0x2e, 0x79, 0x20, 0x2a, // loat phi = t.y *
	0x20, 0x28, 0x32, 0x2e, 0x30, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, //  (2.0*3.14159265
	0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, // 3589793238462643
	0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // 3832795);.float 
	0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, // cosTheta = sqrt(
	0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // 1.0 - t.x);.floa
	0x74, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, // t sinTheta = sqr
	0x74, 0x28, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x70, // t(t.x);.float sp
	0x2c, 0x63, 0x70, 0x3b, 0x0a, 0x7b, 0x73, 0x70, 0x3d, 0x73, 0x69, 0x6e, 0x28, 0x70, 0x68, 0x69, // ,cp;.{sp=sin(phi
	0x29, 0x3b, 0x63, 0x70, 0x3d, 0x63, 0x6f, 0x73, 0x28, 0x70, 0x68, 0x69, 0x29, 0x3b, 0x7d, 0x3b, // );cp=cos(phi);};
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x63, 0x70, 0x20, // .return vec3(cp 
	0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x63, 0x6f, 0x73, 0x54, // * sinTheta, cosT
	0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x73, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, // heta, sp * sinTh
	0x65, 0x74, 0x61, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x6f, 0x74, // eta);.}.vec3 rot
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x70, // ate_to_vector_up
	0x70, 0x65, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x76, // per( vec3 vec, v
	0x65, 0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, // ec3 normal).{.if
	0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x3e, 0x20, 0x2d, 0x30, 0x2e, 0x39, // (normal.y > -0.9
	0x39, 0x39, 0x39, 0x39, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x20, // 9999).{.float h 
	0x3d, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x28, 0x31, 0x2e, 0x30, 0x2b, 0x6e, 0x6f, 0x72, 0x6d, 0x61, // = 1.0/(1.0+norma
	0x6c, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x20, 0x3d, // l.y);.float hz =
	0x20, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, //  h*normal.z;.flo
	0x61, 0x74, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x3d, 0x20, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, // at hzx = hz*norm
	0x61, 0x6c, 0x2e, 0x78, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, // al.x;.return vec
	0x33, 0x28, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, // 3(.vec.x * (norm
	0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, // al.y+hz*normal.z
	0x29, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, // ) + vec.y * norm
	0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x68, // al.x - vec.z * h
	0x7a, 0x78, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, // zx,.vec.y * norm
	0x61, 0x6c, 0x2e, 0x79, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x6e, // al.y - vec.x * n
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, // ormal.x - vec.z 
	0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, // * normal.z,.vec.
	0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x20, 0x2d, 0x20, 0x76, // y * normal.z - v
	0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, // ec.x * hzx + vec
	0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, // .z * (normal.y+h
	0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, // *normal.x*normal
	0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x72, 0x65, 0x74, // .x));.}.else ret
	0x75, 0x72, 0x6e, 0x20, 0x2d, 0x76, 0x65, 0x63, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, // urn -vec;.}.unif
	0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // orm vec4 Stereo_
	0x53, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // Saturation;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // orm vec4 Stereo_
	0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x3b, 0x0a, 0x75, 0x6e, // MS_ZPD_YAxis;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x20, // iform sampler2D 
	0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x3b, 0x0a, 0x75, // tex_stereo_fb;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, // niform sampler2D
	0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, //  tex_stereo_dept
	0x68, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // h;.uniform vec4 
	0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, // w_h_height;.vec3
	0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x28, //  gatherEyeColor(
	0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x69, 0x73, 0x4c, // vec2 u, bool isL
	0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x79, 0x61, 0x78, 0x69, // eft).{.bool yaxi
	0x73, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, // s = (Stereo_MS_Z
	0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x7a, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, // PD_YAxis.z != 0.
	0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, // );.float MaxSepa
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // ration = (Stereo
	0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, // _MS_ZPD_YAxis.x)
	0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, 0x0a, // ;.if (isLeft).{.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, // float lminDepth 
	0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // = min(min(textur
	0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // eLod(tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, // depth, u + (yaxi
	0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, // s ? vec2(0.0, 0.
	0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // 500 * MaxSeparat
	0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, // ion) : vec2(0.50
	0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, // 0 * MaxSeparatio
	0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, // n, 0.0)), 0.0).x
	0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, // ,.textureLod(tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, // _stereo_depth, u
	0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, //  + (yaxis ? vec2
	0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, // (0.0, 0.666 * Ma
	0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, // xSeparation) : v
	0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, // ec2(0.666 * MaxS
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, // eparation, 0.0))
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, // , 0.0).x),.textu
	0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // reLod(tex_stereo
	0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, // _depth, u + (yax
	0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, // is ? vec2(0.0, M
	0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, // axSeparation) : 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // vec2( MaxSeparat
	0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // ion, 0.0)), 0.0)
	0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x70, 0x61, 0x72, 0x61, // .x);.float lpara
	0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, // llax = max(0.0, 
	0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, // w_h_height.w + M
	0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, // axSeparation * (
	0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, // 1.0 - 1.0 / (0.5
	0x20, 0x2b, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, //  + lminDepth * (
	0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, // 1.0 / (Stereo_MS
	0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, // _ZPD_YAxis.y) - 
	0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // 0.5))));.return 
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, // textureLod(tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, // tereo_fb, u + (y
	0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, // axis ? vec2(0.0,
	0x20, 0x2d, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, //  -lparallax) : v
	0x65, 0x63, 0x32, 0x28, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, // ec2(lparallax, 0
	0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, // .0)), 0.0).xyz;.
	0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, // }.else.{.float r
	0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, // minDepth = min(m
	0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, // in(textureLod(te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, // x_stereo_depth, 
	0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, // u - (yaxis ? vec
	0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, // 2(0.0, 0.500 * M
	0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, // axSeparation) : 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, // vec2(0.500 * Max
	0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // Separation, 0.0)
	0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, // ), 0.0).x,.textu
	0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // reLod(tex_stereo
	0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, // _depth, u - (yax
	0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, // is ? vec2(0.0, 0
	0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, // .666 * MaxSepara
	0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, // tion) : vec2(0.6
	0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // 66 * MaxSeparati
	0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, // on, 0.0)), 0.0).
	0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, // x),.textureLod(t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, // ex_stereo_depth,
	0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, //  u - (yaxis ? ve
	0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, // c2(0.0, MaxSepar
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, // ation) : vec2( M
	0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, // axSeparation, 0.
	0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, // 0)), 0.0).x);.fl
	0x6f, 0x61, 0x74, 0x20, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, // oat rparallax = 
	0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, // max(0.0, w_h_hei
	0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, // ght.w + MaxSepar
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, // ation * (1.0 - 1
	0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x6d, 0x69, 0x6e, // .0 / (0.5 + rmin
	0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, // Depth * (1.0 / (
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, // Stereo_MS_ZPD_YA
	0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, // xis.y) - 0.5))))
	0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // ;.return texture
	0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, // Lod(tex_stereo_f
	0x62, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, // b, u - (yaxis ? 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x72, 0x70, 0x61, 0x72, 0x61, // vec2(0.0, -rpara
	0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x72, 0x70, 0x61, // llax) : vec2(rpa
	0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, // rallax, 0.0)), 0
	0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, // .0).xyz;.}.}.voi
	0x64, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x69, 0x67, 0x68, // d gatherLeftRigh
	0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, // tColors(vec2 u, 
	0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x63, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, // out vec3 lcol, o
	0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, // ut vec3 rcol).{.
	0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, // bool yaxis = (St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, // ereo_MS_ZPD_YAxi
	0x73, 0x2e, 0x7a, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // s.z != 0.);.floa
	0x74, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, // t MaxSeparation 
	0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, // = (Stereo_MS_ZPD
	0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // _YAxis.x);.float
	0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, //  lminDepth = min
	0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, // (min(textureLod(
	0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, // tex_stereo_depth
	0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, // , u + (yaxis ? v
	0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, // ec2(0.0, 0.500 *
	0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, //  MaxSeparation) 
	0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, // : vec2(0.500 * M
	0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, // axSeparation, 0.
	0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, // 0)), 0.0).x,.tex
	0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // tureLod(tex_ster
	0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, // eo_depth, u + (y
	0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, // axis ? vec2(0.0,
	0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, //  0.666 * MaxSepa
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, // ration) : vec2(0
	0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, // .666 * MaxSepara
	0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, // tion, 0.0)), 0.0
	0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, // ).x),.textureLod
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, // (tex_stereo_dept
	0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, // h, u + (yaxis ? 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // vec2(0.0, MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // aration) : vec2(
	0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, //  MaxSeparation, 
	0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, // 0.0)), 0.0).x);.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, // float lparallax 
	0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, // = max(0.0, w_h_h
	0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // eight.w + MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, // aration * (1.0 -
	0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x6c, 0x6d, //  1.0 / (0.5 + lm
	0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, // inDepth * (1.0 /
	0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, //  (Stereo_MS_ZPD_
	0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, // YAxis.y) - 0.5))
	0x29, 0x29, 0x3b, 0x0a, 0x6c, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, // ));.lcol = textu
	0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // reLod(tex_stereo
	0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, // _fb, u + (yaxis 
	0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x6c, 0x70, 0x61, // ? vec2(0.0, -lpa
	0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x6c, // rallax) : vec2(l
	0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, // parallax, 0.0)),
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, //  0.0).xyz;.float
	0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, //  rminDepth = min
	0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, // (min(textureLod(
	0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, // tex_stereo_depth
	0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, // , u - (yaxis ? v
	0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, // ec2(0.0, 0.500 *
	0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, //  MaxSeparation) 
	0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, // : vec2(0.500 * M
	0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, // axSeparation, 0.
	0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, // 0)), 0.0).x,.tex
	0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // tureLod(tex_ster
	0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, // eo_depth, u - (y
	0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, // axis ? vec2(0.0,
	0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, //  0.666 * MaxSepa
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, // ration) : vec2(0
	0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, // .666 * MaxSepara
	0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, // tion, 0.0)), 0.0
	0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, // ).x),.textureLod
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, // (tex_stereo_dept
	0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, // h, u - (yaxis ? 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // vec2(0.0, MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // aration) : vec2(
	0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, //  MaxSeparation, 
	0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, // 0.0)), 0.0).x);.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, // float rparallax 
	0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, // = max(0.0, w_h_h
	0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // eight.w + MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, // aration * (1.0 -
	0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x6d, //  1.0 / (0.5 + rm
	0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, // inDepth * (1.0 /
	0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, //  (Stereo_MS_ZPD_
	0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, // YAxis.y) - 0.5))
	0x29, 0x29, 0x3b, 0x0a, 0x72, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, // ));.rcol = textu
	0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // reLod(tex_stereo
	0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, // _fb, u - (yaxis 
	0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x72, 0x70, 0x61, // ? vec2(0.0, -rpa
	0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x72, // rallax) : vec2(r
	0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, // parallax, 0.0)),
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, //  0.0).xyz;.}.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // form mat4 Stereo
	0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // _LeftMat;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, // m mat4 Stereo_Ri
	0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // ghtMat;.uniform 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, // vec4 Stereo_Left
	0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, // Luminance_Gamma;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, // .uniform vec4 St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, // ereo_RightLumina
	0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x3b, 0x0a, 0x76, 0x6f, // nce_DynDesat;.vo
	0x69, 0x64, 0x20, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x65, 0x73, 0x61, 0x74, 0x41, // id DynamicDesatA
	0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, // naglyph( vec3 lC
	0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, // ol, vec3 rCol, o
	0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, // ut vec3 lDesatCo
	0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x44, 0x65, 0x73, // l, out vec3 rDes
	0x61, 0x74, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, // atCol).{.float l
	0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, // eft2LeftLum = do
	0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, // t(lCol, Stereo_L
	0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, // eftLuminance_Gam
	0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, // ma.xyz);.float l
	0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, // eft2RightLum = d
	0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // ot(lCol, Stereo_
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, // RightLuminance_D
	0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, // ynDesat.xyz);.fl
	0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, // oat right2LeftLu
	0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, // m = dot(rCol, St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, // ereo_LeftLuminan
	0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, // ce_Gamma.xyz);.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, // loat right2Right
	0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // Lum = dot(rCol, 
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, // Stereo_RightLumi
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x78, // nance_DynDesat.x
	0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x4c, // yz);.float leftL
	0x75, 0x6d, 0x20, 0x3d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, // um = left2LeftLu
	0x6d, 0x20, 0x2b, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // m + left2RightLu
	0x6d, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // m;.float rightLu
	0x6d, 0x20, 0x3d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, // m = right2LeftLu
	0x6d, 0x20, 0x2b, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, // m + right2RightL
	0x75, 0x6d, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, // um;.float leftDe
	0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, // sat = Stereo_Rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, // htLuminance_DynD
	0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x6c, 0x65, // esat.w * abs((le
	0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x6c, 0x65, 0x66, // ft2LeftLum - lef
	0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, // t2RightLum) / (l
	0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, // eftLum + 0.0001)
	0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, // );.float rightDe
	0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, // sat = Stereo_Rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, // htLuminance_DynD
	0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x72, 0x69, // esat.w * abs((ri
	0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x72, 0x69, // ght2LeftLum - ri
	0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, // ght2RightLum) / 
	0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, // (rightLum + 0.00
	0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, // 01));.lDesatCol 
	0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, // = mix(lCol, vec3
	0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, // _splat(leftLum),
	0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x72, 0x44, 0x65, //  leftDesat);.rDe
	0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x72, 0x43, 0x6f, // satCol = mix(rCo
	0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x72, 0x69, // l, vec3_splat(ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, // ghtLum), rightDe
	0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x4c, 0x69, 0x6e, // sat);.}.vec3 Lin
	0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, 0x63, // earAnaglyph( vec
	0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, // 3 lCol, vec3 rCo
	0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, // l).{.vec3 color 
	0x3d, 0x20, 0x28, 0x28, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, // = (( (vec4(lCol,
	0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, //  1.)) * (Stereo_
	0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x20, 0x28, // LeftMat) ) + ( (
	0x76, 0x65, 0x63, 0x34, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, // vec4(rCol, 1.)) 
	0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, // * (Stereo_RightM
	0x61, 0x74, 0x29, 0x20, 0x29, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // at) )).rgb;.retu
	0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, // rn color;.}.unif
	0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // orm vec4 Stereo_
	0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, 0x6e, // DeghostGamma;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // iform mat4 Stere
	0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3b, // o_DeghostFilter;
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x6e, 0x61, // .vec3 DeghostAna
	0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, // glyph( vec3 lCol
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x76, // , vec3 rCol).{.v
	0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, 0x6e, 0x65, // ec3 color = Line
	0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, // arAnaglyph(lCol,
	0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, //  rCol);.return (
	0x20, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x53, 0x74, 0x65, //  (pow(color, Ste
	0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, // reo_DeghostGamma
	0x2e, 0x72, 0x67, 0x62, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x53, // .rgb)) * (mat3(S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, // tereo_DeghostFil
	0x74, 0x65, 0x72, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, // ter[0].xyz, Ster
	0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, // eo_DeghostFilter
	0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // [1].xyz, Stereo_
	0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x32, 0x5d, // DeghostFilter[2]
	0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, 0x64, // .xyz)) );.}.void
	0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, //  main().{.bgfx_F
	0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, // ragColor = vec4(
	0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x76, // gatherEyeColor(v
	0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2c, 0x20, 0x66, 0x72, 0x61, 0x63, // _texcoord0, frac
	0x74, 0x28, 0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x2e, 0x79, // t(gl_FragCoord.y
	0x2a, 0x30, 0x2e, 0x35, 0x29, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x2c, 0x20, 0x31, // *0.5) >= 0.5), 1
	0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x00,                                                 // .0);.}..
};
static const uint8_t fs_pp_stereo_flipped_int_glsl[10922] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x97, 0x2a, // FSH.o.><.......*
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x34, 0x34, 0x30, 0x0a, 0x6f, // ..#version 440.o
	0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, // ut vec4 bgfx_Fra
	0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, // gColor;.#define 
	0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x62, 0x67, 0x66, // gl_FragColor bgf
	0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x0a, 0x23, 0x64, 0x65, 0x66, // x_FragColor.#def
	0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x20, 0x20, 0x20, // ine texture2D   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x0a, 0x23, //        texture.#
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, // define texture2D
	0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // Lod       textur
	0x65, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, // eLod.#define tex
	0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ture2DGrad      
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, // textureGrad.#def
	0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, // ine texture2DPro
	0x6a, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, // jLod   texturePr
	0x6f, 0x6a, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, // ojLod.#define te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, 0x20, // xture2DProjGrad 
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, //  textureProjGrad
	0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // .#define texture
	0x43, 0x75, 0x62, 0x65, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, // CubeLod     text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, // ureLod.#define t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, // extureCubeGrad  
	0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, //   textureGrad.#d
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x33, 0x44, 0x20, // efine texture3D 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, //          texture
	0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // .#define texture
	0x32, 0x44, 0x4c, 0x6f, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x20, 0x74, 0x65, 0x78, 0x74, // 2DLodOffset text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x0a, 0x23, 0x64, 0x65, // ureLodOffset.#de
	0x66, 0x69, 0x6e, 0x65, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x69, // fine attribute i
	0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, // n.#define varyin
	0x67, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x62, 0x67, 0x66, // g in.#define bgf
	0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, // xShadow2D(_sampl
	0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, // er, _coord)     
	0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, // vec4_splat(textu
	0x72, 0x65, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, // re(_sampler, _co
	0x6f, 0x72, 0x64, 0x29, 0x20, 0x29, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x62, // ord) ).#define b
	0x67, 0x66, 0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x28, // gfxShadow2DProj(
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, // _sampler, _coord
	0x29, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, // ) vec4_splat(tex
	0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // tureProj(_sample
	0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x29, 0x0a, 0x76, 0x61, 0x72, // r, _coord) ).var
	0x79, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, // ying vec2 v_texc
	0x6f, 0x6f, 0x72, 0x64, 0x30, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, // oord0;.vec3 inst
	0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, // Mul(vec3 _vec, m
	0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // at3 _mtx) { retu
	0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, // rn ( (_vec) * (_
	0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, // mtx) ); }.vec3 i
	0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, // nstMul(mat3 _mtx
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, // , vec3 _vec) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, // eturn ( (_mtx) *
	0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, //  (_vec) ); }.vec
	0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, // 4 instMul(vec4 _
	0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, // vec, mat4 _mtx) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, // { return ( (_vec
	0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, // ) * (_mtx) ); }.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, // vec4 instMul(mat
	0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, // 4 _mtx, vec4 _ve
	0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, // c) { return ( (_
	0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, // mtx) * (_vec) );
	0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, 0x70, 0x28, 0x66, 0x6c, 0x6f, //  }.float rcp(flo
	0x61, 0x74, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // at _a) { return 
	0x31, 0x2e, 0x30, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, // 1.0/_a; }.vec2 r
	0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // cp(vec2 _a) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, // turn vec2(1.0)/_
	0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, // a; }.vec3 rcp(ve
	0x63, 0x33, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // c3 _a) { return 
	0x76, 0x65, 0x63, 0x33, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, // vec3(1.0)/_a; }.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x61, // vec4 rcp(vec4 _a
	0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, // ) { return vec4(
	0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, // 1.0)/_a; }.vec2 
	0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, // vec2_splat(float
	0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, //  _x) { return ve
	0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, // c2(_x, _x); }.ve
	0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, // c3 vec3_splat(fl
	0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // oat _x) { return
	0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, //  vec3(_x, _x, _x
	0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, // ); }.vec4 vec4_s
	0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, // plat(float _x) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, //  return vec4(_x,
	0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, //  _x, _x, _x); }.
	0x75, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, // uvec2 uvec2_spla
	0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // t(uint _x) { ret
	0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, // urn uvec2(_x, _x
	0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, // ); }.uvec3 uvec3
	0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, // _splat(uint _x) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, // { return uvec3(_
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, // x, _x, _x); }.uv
	0x65, 0x63, 0x34, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, // ec4 uvec4_splat(
	0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, // uint _x) { retur
	0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, // n uvec4(_x, _x, 
	0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, // _x, _x); }.mat4 
	0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, // mtxFromRows(vec4
	0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, //  _0, vec4 _1, ve
	0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, // c4 _2, vec4 _3).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, // {.return transpo
	0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, // se(mat4(_0, _1, 
	0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, // _2, _3) );.}.mat
	0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, // 4 mtxFromCols(ve
	0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, // c4 _0, vec4 _1, 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, // vec4 _2, vec4 _3
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x28, // ).{.return mat4(
	0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x3b, // _0, _1, _2, _3);
	0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, // .}.mat3 mtxFromR
	0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, // ows(vec3 _0, vec
	0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, // 3 _1, vec3 _2).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, // .return transpos
	0x65, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, // e(mat3(_0, _1, _
	0x32, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, // 2) );.}.mat3 mtx
	0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, // FromCols(vec3 _0
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // , vec3 _1, vec3 
	0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, // _2).{.return mat
	0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x3b, 0x0a, 0x7d, // 3(_0, _1, _2);.}
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, // .uniform vec4 u_
	0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // viewRect;.unifor
	0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x54, 0x65, 0x78, // m vec4 u_viewTex
	0x65, 0x6c, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, // el;.uniform mat4
	0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, //  u_view;.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x3b, //  mat4 u_invView;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, // .uniform mat4 u_
	0x70, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, // proj;.uniform ma
	0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, // t4 u_invProj;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, // iform mat4 u_vie
	0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, // wProj;.uniform m
	0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, // at4 u_invViewPro
	0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, // j;.uniform mat4 
	0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, 0x3b, 0x0a, 0x75, 0x6e, 0x69, // u_model[32];.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, // form mat4 u_mode
	0x6c, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, // lView;.uniform m
	0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x50, // at4 u_modelViewP
	0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, // roj;.uniform vec
	0x34, 0x20, 0x75, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x66, 0x34, 0x3b, 0x0a, 0x66, // 4 u_alphaRef4;.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // loat sqr( float 
	0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, // v).{.return v*v;
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, // .}.vec2 sqr( vec
	0x32, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, // 2 v).{.return v*
	0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x76, // v;.}.vec3 sqr( v
	0x65, 0x63, 0x33, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // ec3 v).{.return 
	0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6d, 0x75, 0x6c, 0x5f, // v*v;.}.vec3 mul_
	0x77, 0x31, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, // w1( vec3 v, mat4
	0x20, 0x6d, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2e, 0x78, //  m).{.return v.x
	0x2a, 0x6d, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x79, // *m[0].xyz + (v.y
	0x2a, 0x6d, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x7a, // *m[1].xyz + (v.z
	0x2a, 0x6d, 0x5b, 0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x6d, 0x5b, 0x33, 0x5d, // *m[2].xyz + m[3]
	0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // .xyz));.}.float 
	0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, // acos_approx_divP
	0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, // I( float v).{.fl
	0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, // oat x = abs(v);.
	0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, // if(1. - x <= 0.0
	0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, // 0006103515625).r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, // eturn (v >= 0.) 
	0x3f, 0x20, 0x30, 0x2e, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // ? 0. : 1.;.float
	0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, //  res = ((-0.1559
	0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, // 72/3.14159265358
	0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, // 9793238462643383
	0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, // 2795) * x + (1.5
	0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, // 6467/3.141592653
	0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, // 5897932384626433
	0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, // 832795) ) * sqrt
	0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // (1. - x);.return
	0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x72, 0x65, 0x73, //  (v >= 0.) ? res
	0x20, 0x3a, 0x20, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, //  : 1. - res;.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, // loat atan2_appro
	0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // x_div2PI( float 
	0x79, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, // y, float x).{.fl
	0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, // oat abs_y = abs(
	0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, // y);.float abs_x 
	0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x78, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x61, 0x62, 0x73, // = abs(x);.if(abs
	0x5f, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, // _x <= 0.00006103
	0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x20, 0x26, 0x26, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, // 515625 && abs_y 
	0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, // <= 0.00006103515
	0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x30, 0x2e, 0x3b, 0x0a, // 625).return 0.;.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, // float r = (abs_x
	0x20, 0x2d, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x61, 0x62, 0x73, //  - abs_y) / (abs
	0x5f, 0x78, 0x20, 0x2b, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, // _x + abs_y);.flo
	0x61, 0x74, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, // at angle = ((x <
	0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x28, 0x33, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x20, 0x3a, //  0.) ? (3./8.) :
	0x20, 0x28, 0x31, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x29, 0x0a, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x32, //  (1./8.)).+ (0.2
	0x31, 0x31, 0x38, 0x36, 0x38, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, // 11868 /(2.*3.141
	0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, // 5926535897932384
	0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, // 626433832795) * 
	0x72, 0x20, 0x2a, 0x20, 0x72, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x39, 0x38, 0x37, 0x33, 0x30, 0x35, // r * r - 0.987305
	0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, //  /(2.*3.14159265
	0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, // 3589793238462643
	0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x78, 0x20, // 3832795)) * ((x 
	0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x72, 0x20, 0x3a, 0x20, 0x72, 0x29, 0x3b, // < 0.) ? -r : r);
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x79, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, // .return (y < 0.)
	0x20, 0x3f, 0x20, 0x2d, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3a, 0x20, 0x61, 0x6e, 0x67, 0x6c, //  ? -angle : angl
	0x65, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x73, 0x69, 0x6e, 0x5f, // e;.}.float asin_
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, // approx_divPI( fl
	0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, // oat v).{.float x
	0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, //  = abs(v);.if(1.
	0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, //  - x <= 0.000061
	0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // 03515625).return
	0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, //  (v >= 0.) ? 0.5
	0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, //  : -0.5;.float r
	0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, // es = ((-0.155972
	0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, // /3.1415926535897
	0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, // 9323846264338327
	0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, // 95) * x + (1.564
	0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, // 67/3.14159265358
	0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, // 9793238462643383
	0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, // 2795) ) * sqrt(1
	0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // . - x);.return (
	0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x2d, // v >= 0.) ? 0.5 -
	0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x65, //  res : -0.5 + re
	0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x61, 0x79, 0x5f, 0x74, 0x6f, // s;.}.vec2 ray_to
	0x5f, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, // _equirectangular
	0x5f, 0x75, 0x76, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x61, 0x79, 0x29, 0x0a, 0x7b, // _uv( vec3 ray).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x0a, 0x30, 0x2e, // .return vec2(.0.
	0x35, 0x20, 0x2b, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, // 5 + atan2_approx
	0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x79, 0x2c, 0x20, 0x72, // _div2PI(ray.y, r
	0x61, 0x79, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, // ay.x),.acos_appr
	0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x7a, 0x29, 0x29, // ox_divPI(ray.z))
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, // ;.}.float InvsRG
	0x42, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, // B( float color).
	0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, // {.if (color <= 0
	0x2e, 0x30, 0x34, 0x30, 0x34, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, // .04045).return c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x32, 0x2e, 0x39, // olor * (1.0/12.9
	0x32, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // 2);.else.return 
	0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, // pow(color * (1.0
	0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x35, 0x35, // /1.055) + (0.055
	0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x29, 0x3b, 0x0a, 0x7d, // /1.055), 2.4);.}
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, // .float InvRec709
	0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, // ( float color).{
	0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, // .if (color <= 0.
	0x30, 0x38, 0x31, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // 081).return colo
	0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x34, 0x2e, 0x35, 0x29, 0x3b, 0x0a, 0x65, // r * (1.0/4.5);.e
	0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, // lse.return pow(c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x39, // olor * (1.0/1.09
	0x39, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x2f, 0x31, 0x2e, 0x30, 0x39, // 9) + (0.099/1.09
	0x39, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x3b, 0x0a, 0x7d, // 9), 1.0/0.45);.}
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, // .float InvGamma(
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, //  float color).{.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, // return InvsRGB(c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, // olor);.}.vec3 In
	0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, // vGamma( vec3 col
	0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, // or).{.return vec
	0x33, 0x28, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // 3(InvGamma(color
	0x2e, 0x78, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, // .x),InvGamma(col
	0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, // or.y),InvGamma(c
	0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, // olor.z));.}.vec3
	0x20, 0x49, 0x6e, 0x76, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, //  InvToneMap( vec
	0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // 3 color).{.float
	0x20, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x30, 0x2e, 0x35, 0x2f, 0x30, //  inv_2bh = 0.5/0
	0x2e, 0x32, 0x35, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x68, 0x20, 0x3d, 0x20, // .25;.float bh = 
	0x34, 0x2e, 0x30, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2d, 0x20, 0x32, 0x2e, 0x30, 0x3b, 0x0a, // 4.0*0.25 - 2.0;.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2d, 0x20, // return (color - 
	0x31, 0x2e, 0x30, 0x20, 0x2b, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // 1.0 + sqrt(color
	0x2a, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x20, 0x62, 0x68, 0x29, 0x20, 0x2b, 0x20, // *(color + bh) + 
	0x31, 0x2e, 0x30, 0x29, 0x29, 0x2a, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x3b, 0x0a, 0x7d, // 1.0))*inv_2bh;.}
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x20, 0x66, 0x6c, 0x6f, // .float sRGB( flo
	0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, // at f).{.float s;
	0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x33, 0x31, // .if (f <= 0.0031
	0x33, 0x30, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x20, 0x2a, // 308).s = 12.92 *
	0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, //  f;.else.s = 1.0
	0x35, 0x35, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, // 55 * pow(f, 1.0/
	0x32, 0x2e, 0x34, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x3b, 0x0a, 0x72, 0x65, // 2.4) - 0.055;.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // turn s;.}.float 
	0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, // Rec709( float f)
	0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, // .{.float s;.if (
	0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, // f <= 0.018).s = 
	0x34, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, // 4.5 * f;.else.s 
	0x3d, 0x20, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, // = 1.099 * pow(f,
	0x20, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x3b, 0x0a, //  0.45) - 0.099;.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // return s;.}.floa
	0x74, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // t FBGamma( float
	0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, //  color).{.return
	0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, //  sRGB(color);.}.
	0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, // vec2 FBGamma( ve
	0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, // c2 color).{.retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, // rn vec2(FBGamma(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, // color.x),FBGamma
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // (color.y));.}.ve
	0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, // c3 FBGamma( vec3
	0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, //  color).{.return
	0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, //  vec3(FBGamma(co
	0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, // lor.x),FBGamma(c
	0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, // olor.y),FBGamma(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // color.z));.}.vec
	0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x32, 0x32, 0x28, 0x20, 0x76, 0x65, 0x63, // 3 FBGamma22( vec
	0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // 3 color).{.retur
	0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // n vec3(pow(color
	0x2e, 0x78, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, // .x, 1.0/2.2),pow
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, // (color.y, 1.0/2.
	0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x2c, 0x20, // 2),pow(color.z, 
	0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // 1.0/2.2));.}.flo
	0x61, 0x74, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x66, 0x6c, // at FBToneMap( fl
	0x6f, 0x61, 0x74, 0x20, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // oat l).{.return 
	0x6c, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, // l * ((l*0.25 + 1
	0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, // .0) / (l + 1.0))
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, // ;.}.vec2 FBToneM
	0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, // ap( vec2 color).
	0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, // {.float l = dot(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, // color,vec2(0.176
	0x32, 0x30, 0x34, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, // 204+0.0108109*0.
	0x35, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, // 5,0.812985+0.010
	0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // 8109*0.5));.retu
	0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, // rn color * ((l*0
	0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, // .25 + 1.0) / (l 
	0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // + 1.0));.}.vec3 
	0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // FBToneMap( vec3 
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, // color).{.float l
	0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, //  = dot(color,vec
	0x33, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, // 3(0.176204,0.812
	0x39, 0x38, 0x35, 0x2c, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x29, 0x29, 0x3b, // 985,0.0108109));
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, // .return color * 
	0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, // ((l*0.25 + 1.0) 
	0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // / (l + 1.0));.}.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x28, 0x20, 0x76, // vec4 Additive( v
	0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // ec4 cBase, vec4 
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, // cBlend, float pe
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // rcent).{.return 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2b, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, // cBase + cBlend*p
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, // ercent;.}.vec3 S
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, // creen ( vec3 cBa
	0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, // se, vec3 cBlend)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, // .{.return 1.0 - 
	0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, // (1.0 - cBase) * 
	0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, // (1.0 - cBlend);.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x20, // }.vec4 Screen ( 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // vec4 cBase, vec4
	0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, //  cBlend).{.retur
	0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, // n 1.0 - (1.0 - c
	0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, // Base) * (1.0 - c
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, // Blend);.}.vec3 S
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // creenHDR ( vec3 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, // cBase, vec3 cBle
	0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, // nd).{.return max
	0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, // (1.0 - (1.0 - cB
	0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, // ase) * (1.0 - cB
	0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x2c, 0x30, // lend), vec3(0.,0
	0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, // .,0.));.}.vec4 S
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // creenHDR ( vec4 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, // cBase, vec4 cBle
	0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, // nd).{.return max
	0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, // (1.0 - (1.0 - cB
	0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, // ase) * (1.0 - cB
	0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, // lend), vec4(0.,0
	0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // .,0.,0.));.}.vec
	0x34, 0x20, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, // 4 Multiply ( vec
	0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // 4 cBase, vec4 cB
	0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, // lend, float perc
	0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, // ent).{.return cB
	0x61, 0x73, 0x65, 0x20, 0x2a, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, // ase * cBlend*per
	0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, // cent;.}.vec4 Ove
	0x72, 0x6c, 0x61, 0x79, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, // rlay ( vec4 cBas
	0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, // e, vec4 cBlend).
	0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, // {.vec4 cNew = st
	0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, // ep(0.5, cBase);.
	0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, // cNew = mix(cBase
	0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, // *cBlend*2.0, 1.0
	0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, // -2.0*(1.0-cBase)
	0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, // *(1.0-cBlend), c
	0x4e, 0x65, 0x77, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, // New);.return cNe
	0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, // w;.}.vec4 Overla
	0x79, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, // yHDR ( vec4 cBas
	0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, // e, vec4 cBlend).
	0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, // {.vec4 cNew = st
	0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, // ep(0.5, cBase);.
	0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x6d, 0x69, 0x78, 0x28, 0x63, // cNew = max(mix(c
	0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, // Base*cBlend*2.0,
	0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, //  1.0-2.0*(1.0-cB
	0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, // ase)*(1.0-cBlend
	0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, // ), cNew), vec4(0
	0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, // .,0.,0.,0.));.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // turn cNew;.}.vec
	0x33, 0x20, 0x63, 0x6f, 0x73, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, // 3 cos_hemisphere
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x29, // _sample( vec2 t)
	0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x68, 0x69, 0x20, 0x3d, 0x20, 0x74, // .{.float phi = t
	0x2e, 0x79, 0x20, 0x2a, 0x20, 0x28, 0x32, 0x2e, 0x30, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, // .y * (2.0*3.1415
	0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, // 9265358979323846
	0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x3b, 0x0a, 0x66, 0x6c, // 26433832795);.fl
	0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, // oat cosTheta = s
	0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, // qrt(1.0 - t.x);.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, // float sinTheta =
	0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, //  sqrt(t.x);.floa
	0x74, 0x20, 0x73, 0x70, 0x2c, 0x63, 0x70, 0x3b, 0x0a, 0x7b, 0x73, 0x70, 0x3d, 0x73, 0x69, 0x6e, // t sp,cp;.{sp=sin
	0x28, 0x70, 0x68, 0x69, 0x29, 0x3b, 0x63, 0x70, 0x3d, 0x63, 0x6f, 0x73, 0x28, 0x70, 0x68, 0x69, // (phi);cp=cos(phi
	0x29, 0x3b, 0x7d, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, // );};.return vec3
	0x28, 0x63, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, // (cp * sinTheta, 
	0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x73, 0x70, 0x20, 0x2a, 0x20, 0x73, // cosTheta, sp * s
	0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, // inTheta);.}.vec3
	0x20, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, //  rotate_to_vecto
	0x72, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, // r_upper( vec3 ve
	0x63, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x29, 0x0a, // c, vec3 normal).
	0x7b, 0x0a, 0x69, 0x66, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x3e, 0x20, // {.if(normal.y > 
	0x2d, 0x30, 0x2e, 0x39, 0x39, 0x39, 0x39, 0x39, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // -0.99999).{.floa
	0x74, 0x20, 0x68, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x28, 0x31, 0x2e, 0x30, 0x2b, 0x6e, // t h = 1.0/(1.0+n
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // ormal.y);.float 
	0x68, 0x7a, 0x20, 0x3d, 0x20, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x3b, // hz = h*normal.z;
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x3d, 0x20, 0x68, 0x7a, 0x2a, // .float hzx = hz*
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // normal.x;.return
	0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x28, //  vec3(.vec.x * (
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, // normal.y+hz*norm
	0x61, 0x6c, 0x2e, 0x7a, 0x29, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, // al.z) + vec.y * 
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, // normal.x - vec.z
	0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, //  * hzx,.vec.y * 
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, // normal.y - vec.x
	0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, //  * normal.x - ve
	0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x2c, 0x0a, // c.z * normal.z,.
	0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, // vec.y * normal.z
	0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x2b, //  - vec.x * hzx +
	0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, //  vec.z * (normal
	0x2e, 0x79, 0x2b, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x2a, 0x6e, 0x6f, // .y+h*normal.x*no
	0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, // rmal.x));.}.else
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x2d, 0x76, 0x65, 0x63, 0x3b, 0x0a, 0x7d, 0x0a, //  return -vec;.}.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, // uniform vec4 Ste
	0x72, 0x65, 0x6f, 0x5f, 0x53, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x0a, // reo_Saturation;.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, // uniform vec4 Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, // reo_MS_ZPD_YAxis
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // ;.uniform sample
	0x72, 0x32, 0x44, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, // r2D tex_stereo_f
	0x62, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, // b;.uniform sampl
	0x65, 0x72, 0x32, 0x44, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // er2D tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, // depth;.uniform v
	0x65, 0x63, 0x34, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, // ec4 w_h_height;.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, // vec3 gatherEyeCo
	0x6c, 0x6f, 0x72, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, // lor(vec2 u, bool
	0x20, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x20, //  isLeft).{.bool 
	0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // yaxis = (Stereo_
	0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x7a, 0x20, 0x21, // MS_ZPD_YAxis.z !
	0x3d, 0x20, 0x30, 0x2e, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x4d, 0x61, 0x78, // = 0.);.float Max
	0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, // Separation = (St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, // ereo_MS_ZPD_YAxi
	0x73, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, // s.x);.if (isLeft
	0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, // ).{.float lminDe
	0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, // pth = min(min(te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, // xtureLod(tex_ste
	0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, // reo_depth, u + (
	0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, // yaxis ? vec2(0.0
	0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // , 0.500 * MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // aration) : vec2(
	0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, // 0.500 * MaxSepar
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, // ation, 0.0)), 0.
	0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, // 0).x,.textureLod
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, // (tex_stereo_dept
	0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, // h, u + (yaxis ? 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, // vec2(0.0, 0.666 
	0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, // * MaxSeparation)
	0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, //  : vec2(0.666 * 
	0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, // MaxSeparation, 0
	0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, // .0)), 0.0).x),.t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // extureLod(tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, // ereo_depth, u + 
	0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, // (yaxis ? vec2(0.
	0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, // 0, MaxSeparation
	0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // ) : vec2( MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, // aration, 0.0)), 
	0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, // 0.0).x);.float l
	0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, // parallax = max(0
	0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, // .0, w_h_height.w
	0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, //  + MaxSeparation
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, //  * (1.0 - 1.0 / 
	0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, // (0.5 + lminDepth
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, //  * (1.0 / (Stere
	0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, // o_MS_ZPD_YAxis.y
	0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, // ) - 0.5))));.ret
	0x75, 0x72, 0x6e, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, // urn textureLod(t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, // ex_stereo_fb, u 
	0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // + (yaxis ? vec2(
	0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, // 0.0, -lparallax)
	0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, //  : vec2(lparalla
	0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, // x, 0.0)), 0.0).x
	0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, // yz;.}.else.{.flo
	0x61, 0x74, 0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, // at rminDepth = m
	0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, // in(min(textureLo
	0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, // d(tex_stereo_dep
	0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, // th, u - (yaxis ?
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, //  vec2(0.0, 0.500
	0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, //  * MaxSeparation
	0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, // ) : vec2(0.500 *
	0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, //  MaxSeparation, 
	0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, // 0.0)), 0.0).x,.t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // extureLod(tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, // ereo_depth, u - 
	0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, // (yaxis ? vec2(0.
	0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, // 0, 0.666 * MaxSe
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, // paration) : vec2
	0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, // (0.666 * MaxSepa
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, // ration, 0.0)), 0
	0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, // .0).x),.textureL
	0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, // od(tex_stereo_de
	0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, // pth, u - (yaxis 
	0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, // ? vec2(0.0, MaxS
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, // eparation) : vec
	0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, // 2( MaxSeparation
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, // , 0.0)), 0.0).x)
	0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, // ;.float rparalla
	0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, // x = max(0.0, w_h
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, // _height.w + MaxS
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, // eparation * (1.0
	0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, //  - 1.0 / (0.5 + 
	0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, // rminDepth * (1.0
	0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, //  / (Stereo_MS_ZP
	0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, // D_YAxis.y) - 0.5
	0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x65, 0x78, // ))));.return tex
	0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // tureLod(tex_ster
	0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, // eo_fb, u - (yaxi
	0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x72, // s ? vec2(0.0, -r
	0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, // parallax) : vec2
	0x28, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // (rparallax, 0.0)
	0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x7d, // ), 0.0).xyz;.}.}
	0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, // .void gatherLeft
	0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x28, 0x76, 0x65, 0x63, 0x32, // RightColors(vec2
	0x20, 0x75, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x63, 0x6f, //  u, out vec3 lco
	0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x6f, 0x6c, // l, out vec3 rcol
	0x29, 0x0a, 0x7b, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3d, // ).{.bool yaxis =
	0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, //  (Stereo_MS_ZPD_
	0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x7a, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x3b, 0x0a, // YAxis.z != 0.);.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // float MaxSeparat
	0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, // ion = (Stereo_MS
	0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, // _ZPD_YAxis.x);.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, // loat lminDepth =
	0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, //  min(min(texture
	0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, // Lod(tex_stereo_d
	0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, // epth, u + (yaxis
	0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, //  ? vec2(0.0, 0.5
	0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // 00 * MaxSeparati
	0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, // on) : vec2(0.500
	0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, //  * MaxSeparation
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, // , 0.0)), 0.0).x,
	0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, // .textureLod(tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, // stereo_depth, u 
	0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // + (yaxis ? vec2(
	0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, // 0.0, 0.666 * Max
	0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, // Separation) : ve
	0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, // c2(0.666 * MaxSe
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, // paration, 0.0)),
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, //  0.0).x),.textur
	0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // eLod(tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, // depth, u + (yaxi
	0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, // s ? vec2(0.0, Ma
	0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, // xSeparation) : v
	0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // ec2( MaxSeparati
	0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, // on, 0.0)), 0.0).
	0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, // x);.float lparal
	0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, // lax = max(0.0, w
	0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, // _h_height.w + Ma
	0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, // xSeparation * (1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, // .0 - 1.0 / (0.5 
	0x2b, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, // + lminDepth * (1
	0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, // .0 / (Stereo_MS_
	0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, // ZPD_YAxis.y) - 0
	0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x6c, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, // .5))));.lcol = t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // extureLod(tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, // ereo_fb, u + (ya
	0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, // xis ? vec2(0.0, 
	0x2d, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, // -lparallax) : ve
	0x63, 0x32, 0x28, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, // c2(lparallax, 0.
	0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x66, // 0)), 0.0).xyz;.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, // loat rminDepth =
	0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, //  min(min(texture
	0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, // Lod(tex_stereo_d
	0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, // epth, u - (yaxis
	0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, //  ? vec2(0.0, 0.5
	0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // 00 * MaxSeparati
	0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, // on) : vec2(0.500
	0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, //  * MaxSeparation
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, // , 0.0)), 0.0).x,
	0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, // .textureLod(tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, // stereo_depth, u 
	0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // - (yaxis ? vec2(
	0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, // 0.0, 0.666 * Max
	0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, // Separation) : ve
	0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, // c2(0.666 * MaxSe
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, // paration, 0.0)),
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, //  0.0).x),.textur
	0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // eLod(tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, // depth, u - (yaxi
	0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, // s ? vec2(0.0, Ma
	0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, // xSeparation) : v
	0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // ec2( MaxSeparati
	0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, // on, 0.0)), 0.0).
	0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, // x);.float rparal
	0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, // lax = max(0.0, w
	0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, // _h_height.w + Ma
	0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, // xSeparation * (1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, // .0 - 1.0 / (0.5 
	0x2b, 0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, // + rminDepth * (1
	0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, // .0 / (Stereo_MS_
	0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, // ZPD_YAxis.y) - 0
	0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, // .5))));.rcol = t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // extureLod(tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, // ereo_fb, u - (ya
	0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, // xis ? vec2(0.0, 
	0x2d, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, // -rparallax) : ve
	0x63, 0x32, 0x28, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, // c2(rparallax, 0.
	0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, // 0)), 0.0).xyz;.}
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, // .uniform mat4 St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, // ereo_LeftMat;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // iform mat4 Stere
	0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // o_RightMat;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // orm vec4 Stereo_
	0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, // LeftLuminance_Ga
	0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, // mma;.uniform vec
	0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // 4 Stereo_RightLu
	0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, // minance_DynDesat
	0x3b, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x65, // ;.void DynamicDe
	0x73, 0x61, 0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, 0x63, // satAnaglyph( vec
	0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, // 3 lCol, vec3 rCo
	0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x44, 0x65, 0x73, // l, out vec3 lDes
	0x61, 0x74, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // atCol, out vec3 
	0x72, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, // rDesatCol).{.flo
	0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, // at left2LeftLum 
	0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, // = dot(lCol, Ster
	0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, // eo_LeftLuminance
	0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, // _Gamma.xyz);.flo
	0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, // at left2RightLum
	0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, //  = dot(lCol, Ste
	0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, // reo_RightLuminan
	0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, // ce_DynDesat.xyz)
	0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, // ;.float right2Le
	0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, // ftLum = dot(rCol
	0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // , Stereo_LeftLum
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, // inance_Gamma.xyz
	0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, // );.float right2R
	0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, // ightLum = dot(rC
	0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, // ol, Stereo_Right
	0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, // Luminance_DynDes
	0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, // at.xyz);.float l
	0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, // eftLum = left2Le
	0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, // ftLum + left2Rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, // htLum;.float rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, // htLum = right2Le
	0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, // ftLum + right2Ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, // ghtLum;.float le
	0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // ftDesat = Stereo
	0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, // _RightLuminance_
	0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, // DynDesat.w * abs
	0x28, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, // ((left2LeftLum -
	0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, //  left2RightLum) 
	0x2f, 0x20, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, // / (leftLum + 0.0
	0x30, 0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, // 001));.float rig
	0x68, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // htDesat = Stereo
	0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, // _RightLuminance_
	0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, // DynDesat.w * abs
	0x28, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, // ((right2LeftLum 
	0x2d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, // - right2RightLum
	0x29, 0x20, 0x2f, 0x20, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, // ) / (rightLum + 
	0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, // 0.0001));.lDesat
	0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // Col = mix(lCol, 
	0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, // vec3_splat(leftL
	0x75, 0x6d, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, // um), leftDesat);
	0x0a, 0x72, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, // .rDesatCol = mix
	0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, // (rCol, vec3_spla
	0x74, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, 0x72, 0x69, 0x67, // t(rightLum), rig
	0x68, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, // htDesat);.}.vec3
	0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, //  LinearAnaglyph(
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, //  vec3 lCol, vec3
	0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, //  rCol).{.vec3 co
	0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x6c, // lor = (( (vec4(l
	0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, // Col, 1.)) * (Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x20, 0x2b, // reo_LeftMat) ) +
	0x20, 0x28, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, //  ( (vec4(rCol, 1
	0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, // .)) * (Stereo_Ri
	0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, // ghtMat) )).rgb;.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x7d, 0x0a, // return color;.}.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, // uniform vec4 Ste
	0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, // reo_DeghostGamma
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, // ;.uniform mat4 S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, // tereo_DeghostFil
	0x74, 0x65, 0x72, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, // ter;.vec3 Deghos
	0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // tAnaglyph( vec3 
	0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, // lCol, vec3 rCol)
	0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, // .{.vec3 color = 
	0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, // LinearAnaglyph(l
	0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // Col, rCol);.retu
	0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, // rn ( (pow(color,
	0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, //  Stereo_DeghostG
	0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x72, 0x67, 0x62, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x6d, 0x61, // amma.rgb)) * (ma
	0x74, 0x33, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, // t3(Stereo_Deghos
	0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, // tFilter[0].xyz, 
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, // Stereo_DeghostFi
	0x6c, 0x74, 0x65, 0x72, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, // lter[1].xyz, Ste
	0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, // reo_DeghostFilte
	0x72, 0x5b, 0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // r[2].xyz)) );.}.
	0x76, 0x6f, 0x69, 0x64, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x67, 0x6c, // void main().{.gl
	0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, // _FragColor = vec
	0x34, 0x28, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, // 4(gatherEyeColor
	0x28, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2c, 0x20, 0x66, 0x72, // (v_texcoord0, fr
	0x61, 0x63, 0x74, 0x28, 0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6f, 0x72, 0x64, // act(gl_FragCoord
	0x2e, 0x79, 0x2a, 0x30, 0x2e, 0x35, 0x29, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x2c, // .y*0.5) >= 0.5),
	0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x00,                                     //  1.0);.}..
};
static const uint8_t fs_pp_stereo_flipped_int_dx11[2451] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x13, 0x53, // FSH.o.><.......S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, // tereo_MS_ZPD_YAx
	0x69, 0x73, 0x12, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x77, 0x5f, 0x68, // is...........w_h
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, // _height.........
	0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x30, // ..tex_stereo_fb0
	0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // ..........tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x30, 0x01, 0x01, 0x00, 0x01, 0x00, // ereo_depth0.....
	0x00, 0x00, 0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // .....tex_stereo_
	0x66, 0x62, 0x30, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x74, 0x65, 0x78, // fb0..........tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x30, 0x01, 0x01, // _stereo_depth0..
	0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe4, 0x08, 0x00, 0x00, 0x44, 0x58, 0x42, 0x43, 0xe1, // ...........DXBC.
	0xa4, 0x2f, 0xd7, 0x45, 0xb9, 0x0c, 0x36, 0x52, 0x65, 0x68, 0x19, 0x17, 0x62, 0x9a, 0x34, 0x01, // ./.E..6Reh..b.4.
	0x00, 0x00, 0x00, 0xe4, 0x08, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x84, // ...........,....
	0x00, 0x00, 0x00, 0xb8, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x4e, 0x50, 0x00, 0x00, 0x00, 0x02, // .......ISGNP....
	0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, // .......8........
	0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x02, 0x00, 0x00, 0x44, // ...............D
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, // .......SV_POSITI
	0x4f, 0x4e, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0xab, 0xab, 0xab, 0x4f, // ON.TEXCOORD....O
	0x53, 0x47, 0x4e, 0x2c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x20, // SGN,........... 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, // .......SV_TARGET
	0x00, 0xab, 0xab, 0x53, 0x48, 0x45, 0x58, 0x24, 0x08, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x09, // ...SHEX$...P....
	0x02, 0x00, 0x00, 0x6a, 0x08, 0x00, 0x01, 0x59, 0x00, 0x00, 0x04, 0x46, 0x8e, 0x20, 0x00, 0x00, // ...j...Y...F. ..
	0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x03, 0x00, 0x60, 0x10, 0x00, 0x00, // .......Z....`...
	0x00, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x03, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x58, // ...Z....`......X
	0x18, 0x00, 0x04, 0x00, 0x70, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x55, 0x00, 0x00, 0x58, // ....p......UU..X
	0x18, 0x00, 0x04, 0x00, 0x70, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x55, 0x55, 0x00, 0x00, 0x64, // ....p......UU..d
	0x20, 0x00, 0x04, 0x22, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x62, //  .."...........b
	0x10, 0x00, 0x03, 0x32, 0x10, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x03, 0xf2, // ...2.......e....
	0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x02, 0x03, 0x00, 0x00, 0x00, 0x38, //  ......h.......8
	0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x10, 0x10, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x1a, 0x00, 0x00, 0x05, 0x12, // ....@.....?.....
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1d, // ................
	0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x39, 0x00, 0x00, 0x08, 0x22, // ....@.....?9..."
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .......*. ......
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x04, 0x03, 0x0a, // ....@...........
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x08, 0x52, 0x00, 0x10, 0x00, 0x01, // .......6...R....
	0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ....@...........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x0b, 0xa2, 0x00, 0x10, 0x00, 0x01, // .......8........
	0x00, 0x00, 0x00, 0x06, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, // ..... ..........
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0xfa, // @.........?.....
	0x7e, 0x2a, 0x3f, 0x37, 0x00, 0x00, 0x09, 0xf2, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x56, // ~*?7...........V
	0x05, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x16, // .......F........
	0x0b, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf2, 0x00, 0x10, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x14, 0x10, 0x00, 0x01, // ...F.......F....
	0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x12, // ...H.......CU...
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, // .......F.......F
	0x7e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, // ~.......`.......
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, // @......H.......C
	0x55, 0x15, 0x00, 0x42, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x01, // U..B............
	0x00, 0x00, 0x00, 0x96, 0x7c, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, // ....|.......`...
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x07, 0x12, // ....@......3....
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, // .......*........
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x08, 0x52, 0x00, 0x10, 0x00, 0x01, // .......6...R....
	0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ....@...........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x06, 0x22, 0x00, 0x10, 0x00, 0x01, // .......6..."....
	0x00, 0x00, 0x00, 0x0a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, // ..... .........7
	0x00, 0x00, 0x09, 0xc2, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x56, 0x05, 0x10, 0x00, 0x00, // ...........V....
	0x00, 0x00, 0x00, 0x06, 0x04, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x56, 0x01, 0x10, 0x00, 0x01, // ...........V....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc2, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa6, // ................
	0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x14, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x48, // ...............H
	0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x42, 0x00, 0x10, 0x00, 0x00, // .......CU..B....
	0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x96, 0x7c, 0x10, 0x00, 0x01, // ............|...
	0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, // ....`.......@...
	0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, // ...3...........*
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, // ................
	0x00, 0x00, 0x0b, 0x42, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, // ...B........@...
	0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x1a, // ..?...?...?...?.
	0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x42, // . .............B
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, // .......*........
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0x32, 0x00, 0x00, 0x09, 0x12, 0x00, 0x10, 0x00, 0x00, // @......2........
	0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x00, // ...........*....
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x0e, 0x00, 0x00, 0x0a, 0x12, // ....@.....?.....
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, // ........@.....?.
	0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x0a, 0x00, 0x10, 0x00, 0x00, // ..?...?...?.....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, // ................
	0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, // ...A........@...
	0x00, 0x80, 0x3f, 0x32, 0x00, 0x00, 0x0b, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, // ..?2............
	0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, // . ..............
	0x00, 0x00, 0x00, 0x3a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x34, // ...:. .........4
	0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x06, 0x82, // ....@......6....
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x01, // ...........A....
	0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, // ...6..."........
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x09, 0x52, 0x00, 0x10, 0x00, 0x00, // @......7...R....
	0x00, 0x00, 0x00, 0x56, 0x05, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa6, 0x0b, 0x10, 0x00, 0x01, // ...V............
	0x00, 0x00, 0x00, 0x06, 0x01, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x52, // ...............R
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, // ................
	0x11, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, // .......H.......C
	0x55, 0x15, 0x00, 0xd2, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x00, 0x10, 0x00, 0x00, // U...............
	0x00, 0x00, 0x00, 0xc6, 0x79, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x00, // ....y.......`...
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x01, 0x36, // ....@..........6
	0x00, 0x00, 0x08, 0x52, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, // ...R........@...
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, // ...............8
	0x00, 0x00, 0x0b, 0xa2, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x80, 0x20, 0x00, 0x00, // ............. ..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........@.......
	0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x7e, 0x2a, 0x3f, 0x37, 0x00, 0x00, 0x09, 0xf2, // ..?.....~*?7....
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x56, 0x05, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, // .......V.......F
	0x0e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x16, 0x0b, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x08, 0xf2, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x80, 0x41, // ...........F...A
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x14, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x48, // .......F.......H
	0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x12, 0x00, 0x10, 0x00, 0x01, // .......CU.......
	0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, 0x01, // ...F.......F~...
	0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, // ....`.......@...
	0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x22, // ...H.......CU.."
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x16, // ................
	0x7e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, // ~.......`.......
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x01, // @......3........
	0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x08, 0x52, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, // ...6...R........
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // @...............
	0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x06, 0x22, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0a, // ...6..."........
	0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x09, 0x62, // . .........7...b
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x56, 0x05, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, // .......V........
	0x01, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x56, 0x04, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, // .......V........
	0x00, 0x00, 0x08, 0x62, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x56, 0x06, 0x10, 0x80, 0x41, // ...b.......V...A
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x11, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x48, // ...............H
	0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x22, 0x00, 0x10, 0x00, 0x01, // .......CU.."....
	0x00, 0x00, 0x00, 0x96, 0x05, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x16, 0x7e, 0x10, 0x00, 0x01, // ............~...
	0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, // ....`.......@...
	0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, // ...3............
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0e, // ................
	0x00, 0x00, 0x0b, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, // ..."........@...
	0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x1a, // ..?...?...?...?.
	0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x22, // . ............."
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, // ................
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0x32, 0x00, 0x00, 0x09, 0x12, 0x00, 0x10, 0x00, 0x01, // @......2........
	0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x0e, 0x00, 0x00, 0x0a, 0x12, // ....@.....?.....
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, // ........@.....?.
	0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x0a, 0x00, 0x10, 0x00, 0x01, // ..?...?...?.....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x12, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, // ................
	0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, // ...A........@...
	0x00, 0x80, 0x3f, 0x32, 0x00, 0x00, 0x0b, 0x12, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, // ..?2............
	0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x01, // . ..............
	0x00, 0x00, 0x00, 0x3a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x34, // ...:. .........4
	0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x06, 0x82, // ....@......6....
	0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x01, // ...........A....
	0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, // ...6..."........
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x09, 0x32, 0x00, 0x10, 0x00, 0x01, // @......7...2....
	0x00, 0x00, 0x00, 0x56, 0x05, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x02, // ...V............
	0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x32, // ...F...........2
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x01, // .......F...A....
	0x00, 0x00, 0x00, 0x46, 0x10, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, // ...F.......H....
	0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0xd2, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, // ...CU..........F
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0xc6, 0x79, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........y.......
	0x60, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, // `.......@.......
	0x00, 0x00, 0x01, 0x36, 0x00, 0x00, 0x05, 0x72, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, // ...6...r .......
	0x03, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x82, 0x20, 0x10, 0x00, 0x00, // .......6.... ...
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x3e, 0x00, 0x00, 0x01, 0x00, // ....@.....?>....
	0x00, 0x20, 0x00,                                                                               // . .
};
static const uint8_t fs_pp_stereo_flipped_int_spv[4212] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x13, 0x53, // FSH.o.><.......S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, // tereo_MS_ZPD_YAx
	0x69, 0x73, 0x12, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x77, 0x5f, 0x68, // is...........w_h
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x01, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, // _height.........
	0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x30, // ..tex_stereo_fb0
	0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x02, 0x22, 0x00, 0x10, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // ......."..tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x30, 0x00, 0x03, 0x00, 0x00, 0x00, // ereo_depth0.....
	0x00, 0x02, 0x22, 0x00, 0xf8, 0x0f, 0x00, 0x00, 0x03, 0x02, 0x23, 0x07, 0x00, 0x00, 0x01, 0x00, // ..".......#.....
	0x0b, 0x00, 0x08, 0x00, 0x95, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x02, 0x00, // ................
	0x01, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, 0x4c, 0x53, 0x4c, // ............GLSL
	0x2e, 0x73, 0x74, 0x64, 0x2e, 0x34, 0x35, 0x30, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x03, 0x00, // .std.450........
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x08, 0x00, 0x04, 0x00, 0x00, 0x00, // ................
	0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x21, 0x01, 0x00, 0x00, // ....main....!...
	0x25, 0x01, 0x00, 0x00, 0x30, 0x01, 0x00, 0x00, 0x10, 0x00, 0x03, 0x00, 0x04, 0x00, 0x00, 0x00, // %...0...........
	0x07, 0x00, 0x00, 0x00, 0x03, 0x00, 0x03, 0x00, 0x05, 0x00, 0x00, 0x00, 0xf4, 0x01, 0x00, 0x00, // ................
	0x05, 0x00, 0x04, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, 0x00, // ........main....
	0x05, 0x00, 0x08, 0x00, 0x2b, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // ....+...tex_ster
	0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x00, 0x00, 0x00, 0x00, // eo_fbSampler....
	0x05, 0x00, 0x08, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // ........tex_ster
	0x65, 0x6f, 0x5f, 0x66, 0x62, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x00, 0x00, 0x00, 0x00, // eo_fbTexture....
	0x05, 0x00, 0x08, 0x00, 0x32, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // ....2...tex_ster
	0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x00, // eo_depthSampler.
	0x05, 0x00, 0x08, 0x00, 0x34, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // ....4...tex_ster
	0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x00, // eo_depthTexture.
	0x05, 0x00, 0x06, 0x00, 0x4c, 0x00, 0x00, 0x00, 0x55, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x42, // ....L...UniformB
	0x6c, 0x6f, 0x63, 0x6b, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x08, 0x00, 0x4c, 0x00, 0x00, 0x00, // lock........L...
	0x00, 0x00, 0x00, 0x00, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, // ....Stereo_MS_ZP
	0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x00, 0x06, 0x00, 0x06, 0x00, 0x4c, 0x00, 0x00, 0x00, // D_YAxis.....L...
	0x01, 0x00, 0x00, 0x00, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x00, 0x00, // ....w_h_height..
	0x05, 0x00, 0x03, 0x00, 0x4e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x06, 0x00, // ....N...........
	0x21, 0x01, 0x00, 0x00, 0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6f, 0x72, 0x64, // !...gl_FragCoord
	0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x05, 0x00, 0x25, 0x01, 0x00, 0x00, 0x76, 0x5f, 0x74, 0x65, // ........%...v_te
	0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x00, 0x05, 0x00, 0x06, 0x00, 0x30, 0x01, 0x00, 0x00, // xcoord0.....0...
	0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x00, 0x00, // bgfx_FragData0..
	0x47, 0x00, 0x04, 0x00, 0x2b, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // G...+...".......
	0x47, 0x00, 0x04, 0x00, 0x2b, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, // G...+...!.......
	0x47, 0x00, 0x04, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // G.......".......
	0x47, 0x00, 0x04, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // G.......!.......
	0x47, 0x00, 0x04, 0x00, 0x32, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // G...2...".......
	0x47, 0x00, 0x04, 0x00, 0x32, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, // G...2...!.......
	0x47, 0x00, 0x04, 0x00, 0x34, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // G...4...".......
	0x47, 0x00, 0x04, 0x00, 0x34, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, // G...4...!.......
	0x48, 0x00, 0x05, 0x00, 0x4c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, // H...L.......#...
	0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0x4c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // ....H...L.......
	0x23, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x47, 0x00, 0x03, 0x00, 0x4c, 0x00, 0x00, 0x00, // #.......G...L...
	0x02, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x4e, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, // ....G...N..."...
	0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x4e, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, // ....G...N...!...
	0x01, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x21, 0x01, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, // ....G...!.......
	0x0f, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x25, 0x01, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, // ....G...%.......
	0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x30, 0x01, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, // ....G...0.......
	0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x21, 0x00, 0x03, 0x00, // ............!...
	0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x02, 0x00, 0x06, 0x00, 0x00, 0x00, // ................
	0x16, 0x00, 0x03, 0x00, 0x07, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x19, 0x00, 0x09, 0x00, // ........ .......
	0x08, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x17, 0x00, 0x04, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // ................
	0x17, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, // ................
	0x14, 0x00, 0x02, 0x00, 0x19, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x1b, 0x00, 0x00, 0x00, // ................
	0x07, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x2a, 0x00, 0x00, 0x00, // ........ ...*...
	0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x2a, 0x00, 0x00, 0x00, // ........;...*...
	0x2b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x2d, 0x00, 0x00, 0x00, // +....... ...-...
	0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x2d, 0x00, 0x00, 0x00, // ........;...-...
	0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x2a, 0x00, 0x00, 0x00, // ........;...*...
	0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x2d, 0x00, 0x00, 0x00, // 2.......;...-...
	0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x00, 0x04, 0x00, 0x37, 0x00, 0x00, 0x00, // 4...........7...
	0x20, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x37, 0x00, 0x00, 0x00, //  .......+...7...
	0x38, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x37, 0x00, 0x00, 0x00, // 8.......+...7...
	0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x03, 0x00, 0x40, 0x00, 0x00, 0x00, // <...........@...
	0x08, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x04, 0x00, 0x4c, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, // ........L.......
	0x0e, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x4d, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // .... ...M.......
	0x4c, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x4d, 0x00, 0x00, 0x00, 0x4e, 0x00, 0x00, 0x00, // L...;...M...N...
	0x02, 0x00, 0x00, 0x00, 0x15, 0x00, 0x04, 0x00, 0x4f, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, // ........O... ...
	0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x4f, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, // ....+...O...P...
	0x02, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x51, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // .... ...Q.......
	0x07, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, // ....+.......T...
	0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x4f, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, // ....+...O...W...
	0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, // ....+.......`...
	0x00, 0x00, 0x00, 0x3f, 0x17, 0x00, 0x04, 0x00, 0x67, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, // ...?....g.......
	0x02, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00, // ....+.......s...
	0xfa, 0x7e, 0x2a, 0x3f, 0x2b, 0x00, 0x04, 0x00, 0x4f, 0x00, 0x00, 0x00, 0x95, 0x00, 0x00, 0x00, // .~*?+...O.......
	0x03, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x99, 0x00, 0x00, 0x00, // ....+...........
	0x00, 0x00, 0x80, 0x3f, 0x2b, 0x00, 0x04, 0x00, 0x4f, 0x00, 0x00, 0x00, 0x9b, 0x00, 0x00, 0x00, // ...?+...O.......
	0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x20, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // .... ... .......
	0x0e, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x20, 0x01, 0x00, 0x00, 0x21, 0x01, 0x00, 0x00, // ....;... ...!...
	0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x24, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // .... ...$.......
	0x0b, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x24, 0x01, 0x00, 0x00, 0x25, 0x01, 0x00, 0x00, // ....;...$...%...
	0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x2f, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, // .... .../.......
	0x0e, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x2f, 0x01, 0x00, 0x00, 0x30, 0x01, 0x00, 0x00, // ....;.../...0...
	0x03, 0x00, 0x00, 0x00, 0x36, 0x00, 0x05, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, // ....6...........
	0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x05, 0x00, 0x00, 0x00, // ................
	0x3d, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x00, 0x00, // =.......,...+...
	0x3d, 0x00, 0x04, 0x00, 0x08, 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, // =......./.......
	0x3d, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, // =.......3...2...
	0x3d, 0x00, 0x04, 0x00, 0x08, 0x00, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, // =.......5...4...
	0x3d, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x22, 0x01, 0x00, 0x00, 0x21, 0x01, 0x00, 0x00, // =......."...!...
	0x3d, 0x00, 0x04, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x26, 0x01, 0x00, 0x00, 0x25, 0x01, 0x00, 0x00, // =.......&...%...
	0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x5a, 0x01, 0x00, 0x00, 0x22, 0x01, 0x00, 0x00, // Q.......Z..."...
	0x01, 0x00, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x5b, 0x01, 0x00, 0x00, // ............[...
	0x5a, 0x01, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x06, 0x00, 0x07, 0x00, 0x00, 0x00, // Z...`...........
	0x5c, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x5b, 0x01, 0x00, 0x00, // ............[...
	0xbe, 0x00, 0x05, 0x00, 0x19, 0x00, 0x00, 0x00, 0x5d, 0x01, 0x00, 0x00, 0x5c, 0x01, 0x00, 0x00, // ........].......
	0x60, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x20, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // `....... .......
	0xfb, 0x00, 0x03, 0x00, 0x57, 0x00, 0x00, 0x00, 0x8a, 0x01, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, // ....W...........
	0x8a, 0x01, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x51, 0x00, 0x00, 0x00, 0x8b, 0x01, 0x00, 0x00, // ....A...Q.......
	0x4e, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, // N...<...P...=...
	0x07, 0x00, 0x00, 0x00, 0x8c, 0x01, 0x00, 0x00, 0x8b, 0x01, 0x00, 0x00, 0xb7, 0x00, 0x05, 0x00, // ................
	0x19, 0x00, 0x00, 0x00, 0x8d, 0x01, 0x00, 0x00, 0x8c, 0x01, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, // ............T...
	0x41, 0x00, 0x06, 0x00, 0x51, 0x00, 0x00, 0x00, 0x8e, 0x01, 0x00, 0x00, 0x4e, 0x00, 0x00, 0x00, // A...Q.......N...
	0x3c, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, // <...W...=.......
	0x8f, 0x01, 0x00, 0x00, 0x8e, 0x01, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x1f, 0x02, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0x5d, 0x01, 0x00, 0x00, 0x91, 0x01, 0x00, 0x00, // ........].......
	0xd8, 0x01, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xd8, 0x01, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, // ................
	0x07, 0x00, 0x00, 0x00, 0xdc, 0x01, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x8f, 0x01, 0x00, 0x00, // ........`.......
	0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xdd, 0x01, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, // P...........T...
	0xdc, 0x01, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xdf, 0x01, 0x00, 0x00, // ................
	0x60, 0x00, 0x00, 0x00, 0x8f, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, // `.......P.......
	0xe0, 0x01, 0x00, 0x00, 0xdf, 0x01, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, // ........T...P...
	0x67, 0x00, 0x00, 0x00, 0xe1, 0x01, 0x00, 0x00, 0x8d, 0x01, 0x00, 0x00, 0x8d, 0x01, 0x00, 0x00, // g...............
	0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xe2, 0x01, 0x00, 0x00, 0xe1, 0x01, 0x00, 0x00, // ................
	0xdd, 0x01, 0x00, 0x00, 0xe0, 0x01, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, // ................
	0xe3, 0x01, 0x00, 0x00, 0x26, 0x01, 0x00, 0x00, 0xe2, 0x01, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, // ....&.......V...
	0x40, 0x00, 0x00, 0x00, 0x50, 0x02, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, // @...P...5...3...
	0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x53, 0x02, 0x00, 0x00, 0x50, 0x02, 0x00, 0x00, // X.......S...P...
	0xe3, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, // ........T...Q...
	0x07, 0x00, 0x00, 0x00, 0xe6, 0x01, 0x00, 0x00, 0x53, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........S.......
	0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xea, 0x01, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00, // ............s...
	0x8f, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xeb, 0x01, 0x00, 0x00, // ....P...........
	0x54, 0x00, 0x00, 0x00, 0xea, 0x01, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // T...............
	0xed, 0x01, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00, 0x8f, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, // ....s.......P...
	0x0b, 0x00, 0x00, 0x00, 0xee, 0x01, 0x00, 0x00, 0xed, 0x01, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, // ............T...
	0x50, 0x00, 0x05, 0x00, 0x67, 0x00, 0x00, 0x00, 0xef, 0x01, 0x00, 0x00, 0x8d, 0x01, 0x00, 0x00, // P...g...........
	0x8d, 0x01, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xf0, 0x01, 0x00, 0x00, // ................
	0xef, 0x01, 0x00, 0x00, 0xeb, 0x01, 0x00, 0x00, 0xee, 0x01, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, // ................
	0x0b, 0x00, 0x00, 0x00, 0xf1, 0x01, 0x00, 0x00, 0x26, 0x01, 0x00, 0x00, 0xf0, 0x01, 0x00, 0x00, // ........&.......
	0x56, 0x00, 0x05, 0x00, 0x40, 0x00, 0x00, 0x00, 0x5a, 0x02, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, // V...@...Z...5...
	0x33, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x5d, 0x02, 0x00, 0x00, // 3...X.......]...
	0x5a, 0x02, 0x00, 0x00, 0xf1, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, // Z...........T...
	0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xf4, 0x01, 0x00, 0x00, 0x5d, 0x02, 0x00, 0x00, // Q...........]...
	0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0xf5, 0x01, 0x00, 0x00, // ................
	0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0xe6, 0x01, 0x00, 0x00, 0xf4, 0x01, 0x00, 0x00, // ....%...........
	0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xf9, 0x01, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, // P...........T...
	0x8f, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xfb, 0x01, 0x00, 0x00, // ....P...........
	0x8f, 0x01, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x67, 0x00, 0x00, 0x00, // ....T...P...g...
	0xfc, 0x01, 0x00, 0x00, 0x8d, 0x01, 0x00, 0x00, 0x8d, 0x01, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, // ................
	0x0b, 0x00, 0x00, 0x00, 0xfd, 0x01, 0x00, 0x00, 0xfc, 0x01, 0x00, 0x00, 0xf9, 0x01, 0x00, 0x00, // ................
	0xfb, 0x01, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x00, 0x00, // ................
	0x26, 0x01, 0x00, 0x00, 0xfd, 0x01, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, 0x40, 0x00, 0x00, 0x00, // &.......V...@...
	0x64, 0x02, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, // d...5...3...X...
	0x0e, 0x00, 0x00, 0x00, 0x67, 0x02, 0x00, 0x00, 0x64, 0x02, 0x00, 0x00, 0xfe, 0x01, 0x00, 0x00, // ....g...d.......
	0x02, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // ....T...Q.......
	0x01, 0x02, 0x00, 0x00, 0x67, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, // ....g...........
	0x07, 0x00, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, // ............%...
	0xf5, 0x01, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x51, 0x00, 0x00, 0x00, // ........A...Q...
	0x03, 0x02, 0x00, 0x00, 0x4e, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x95, 0x00, 0x00, 0x00, // ....N...8.......
	0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x04, 0x02, 0x00, 0x00, 0x03, 0x02, 0x00, 0x00, // =...............
	0x41, 0x00, 0x06, 0x00, 0x51, 0x00, 0x00, 0x00, 0x07, 0x02, 0x00, 0x00, 0x4e, 0x00, 0x00, 0x00, // A...Q.......N...
	0x3c, 0x00, 0x00, 0x00, 0x9b, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, // <.......=.......
	0x08, 0x02, 0x00, 0x00, 0x07, 0x02, 0x00, 0x00, 0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // ................
	0x09, 0x02, 0x00, 0x00, 0x99, 0x00, 0x00, 0x00, 0x08, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, // ................
	0x07, 0x00, 0x00, 0x00, 0x0a, 0x02, 0x00, 0x00, 0x09, 0x02, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, // ............`...
	0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x0b, 0x02, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, // ................
	0x0a, 0x02, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x0c, 0x02, 0x00, 0x00, // ................
	0x60, 0x00, 0x00, 0x00, 0x0b, 0x02, 0x00, 0x00, 0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // `...............
	0x0d, 0x02, 0x00, 0x00, 0x99, 0x00, 0x00, 0x00, 0x0c, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, // ................
	0x07, 0x00, 0x00, 0x00, 0x0e, 0x02, 0x00, 0x00, 0x99, 0x00, 0x00, 0x00, 0x0d, 0x02, 0x00, 0x00, // ................
	0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x0f, 0x02, 0x00, 0x00, 0x8f, 0x01, 0x00, 0x00, // ................
	0x0e, 0x02, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x10, 0x02, 0x00, 0x00, // ................
	0x04, 0x02, 0x00, 0x00, 0x0f, 0x02, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, // ................
	0x11, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, // ........(...T...
	0x10, 0x02, 0x00, 0x00, 0x7f, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x15, 0x02, 0x00, 0x00, // ................
	0x11, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x16, 0x02, 0x00, 0x00, // ....P...........
	0x54, 0x00, 0x00, 0x00, 0x15, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, // T.......P.......
	0x18, 0x02, 0x00, 0x00, 0x11, 0x02, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, // ........T...P...
	0x67, 0x00, 0x00, 0x00, 0x19, 0x02, 0x00, 0x00, 0x8d, 0x01, 0x00, 0x00, 0x8d, 0x01, 0x00, 0x00, // g...............
	0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x1a, 0x02, 0x00, 0x00, 0x19, 0x02, 0x00, 0x00, // ................
	0x16, 0x02, 0x00, 0x00, 0x18, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, // ................
	0x1b, 0x02, 0x00, 0x00, 0x26, 0x01, 0x00, 0x00, 0x1a, 0x02, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, // ....&.......V...
	0x40, 0x00, 0x00, 0x00, 0x6e, 0x02, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, // @...n.../...,...
	0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x71, 0x02, 0x00, 0x00, 0x6e, 0x02, 0x00, 0x00, // X.......q...n...
	0x1b, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x4f, 0x00, 0x08, 0x00, // ........T...O...
	0x1b, 0x00, 0x00, 0x00, 0x1e, 0x02, 0x00, 0x00, 0x71, 0x02, 0x00, 0x00, 0x71, 0x02, 0x00, 0x00, // ........q...q...
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, // ................
	0x20, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x91, 0x01, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, //  ...............
	0x07, 0x00, 0x00, 0x00, 0x95, 0x01, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x8f, 0x01, 0x00, 0x00, // ........`.......
	0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x96, 0x01, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, // P...........T...
	0x95, 0x01, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x98, 0x01, 0x00, 0x00, // ................
	0x60, 0x00, 0x00, 0x00, 0x8f, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, // `.......P.......
	0x99, 0x01, 0x00, 0x00, 0x98, 0x01, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, // ........T...P...
	0x67, 0x00, 0x00, 0x00, 0x9a, 0x01, 0x00, 0x00, 0x8d, 0x01, 0x00, 0x00, 0x8d, 0x01, 0x00, 0x00, // g...............
	0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x9b, 0x01, 0x00, 0x00, 0x9a, 0x01, 0x00, 0x00, // ................
	0x96, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, // ................
	0x9c, 0x01, 0x00, 0x00, 0x26, 0x01, 0x00, 0x00, 0x9b, 0x01, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, // ....&.......V...
	0x40, 0x00, 0x00, 0x00, 0x28, 0x02, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, // @...(...5...3...
	0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x2b, 0x02, 0x00, 0x00, 0x28, 0x02, 0x00, 0x00, // X.......+...(...
	0x9c, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, // ........T...Q...
	0x07, 0x00, 0x00, 0x00, 0x9f, 0x01, 0x00, 0x00, 0x2b, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........+.......
	0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xa3, 0x01, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00, // ............s...
	0x8f, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xa4, 0x01, 0x00, 0x00, // ....P...........
	0x54, 0x00, 0x00, 0x00, 0xa3, 0x01, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // T...............
	0xa6, 0x01, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00, 0x8f, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, // ....s.......P...
	0x0b, 0x00, 0x00, 0x00, 0xa7, 0x01, 0x00, 0x00, 0xa6, 0x01, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, // ............T...
	0x50, 0x00, 0x05, 0x00, 0x67, 0x00, 0x00, 0x00, 0xa8, 0x01, 0x00, 0x00, 0x8d, 0x01, 0x00, 0x00, // P...g...........
	0x8d, 0x01, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xa9, 0x01, 0x00, 0x00, // ................
	0xa8, 0x01, 0x00, 0x00, 0xa4, 0x01, 0x00, 0x00, 0xa7, 0x01, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, // ................
	0x0b, 0x00, 0x00, 0x00, 0xaa, 0x01, 0x00, 0x00, 0x26, 0x01, 0x00, 0x00, 0xa9, 0x01, 0x00, 0x00, // ........&.......
	0x56, 0x00, 0x05, 0x00, 0x40, 0x00, 0x00, 0x00, 0x32, 0x02, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, // V...@...2...5...
	0x33, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x35, 0x02, 0x00, 0x00, // 3...X.......5...
	0x32, 0x02, 0x00, 0x00, 0xaa, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, // 2...........T...
	0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xad, 0x01, 0x00, 0x00, 0x35, 0x02, 0x00, 0x00, // Q...........5...
	0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0xae, 0x01, 0x00, 0x00, // ................
	0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x9f, 0x01, 0x00, 0x00, 0xad, 0x01, 0x00, 0x00, // ....%...........
	0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xb2, 0x01, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, // P...........T...
	0x8f, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xb4, 0x01, 0x00, 0x00, // ....P...........
	0x8f, 0x01, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x67, 0x00, 0x00, 0x00, // ....T...P...g...
	0xb5, 0x01, 0x00, 0x00, 0x8d, 0x01, 0x00, 0x00, 0x8d, 0x01, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, // ................
	0x0b, 0x00, 0x00, 0x00, 0xb6, 0x01, 0x00, 0x00, 0xb5, 0x01, 0x00, 0x00, 0xb2, 0x01, 0x00, 0x00, // ................
	0xb4, 0x01, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xb7, 0x01, 0x00, 0x00, // ................
	0x26, 0x01, 0x00, 0x00, 0xb6, 0x01, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, 0x40, 0x00, 0x00, 0x00, // &.......V...@...
	0x3c, 0x02, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, // <...5...3...X...
	0x0e, 0x00, 0x00, 0x00, 0x3f, 0x02, 0x00, 0x00, 0x3c, 0x02, 0x00, 0x00, 0xb7, 0x01, 0x00, 0x00, // ....?...<.......
	0x02, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // ....T...Q.......
	0xba, 0x01, 0x00, 0x00, 0x3f, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, // ....?...........
	0x07, 0x00, 0x00, 0x00, 0xbb, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, // ............%...
	0xae, 0x01, 0x00, 0x00, 0xba, 0x01, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x51, 0x00, 0x00, 0x00, // ........A...Q...
	0xbc, 0x01, 0x00, 0x00, 0x4e, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x95, 0x00, 0x00, 0x00, // ....N...8.......
	0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0xbd, 0x01, 0x00, 0x00, 0xbc, 0x01, 0x00, 0x00, // =...............
	0x41, 0x00, 0x06, 0x00, 0x51, 0x00, 0x00, 0x00, 0xc0, 0x01, 0x00, 0x00, 0x4e, 0x00, 0x00, 0x00, // A...Q.......N...
	0x3c, 0x00, 0x00, 0x00, 0x9b, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, // <.......=.......
	0xc1, 0x01, 0x00, 0x00, 0xc0, 0x01, 0x00, 0x00, 0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // ................
	0xc2, 0x01, 0x00, 0x00, 0x99, 0x00, 0x00, 0x00, 0xc1, 0x01, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, // ................
	0x07, 0x00, 0x00, 0x00, 0xc3, 0x01, 0x00, 0x00, 0xc2, 0x01, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, // ............`...
	0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xc4, 0x01, 0x00, 0x00, 0xbb, 0x01, 0x00, 0x00, // ................
	0xc3, 0x01, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xc5, 0x01, 0x00, 0x00, // ................
	0x60, 0x00, 0x00, 0x00, 0xc4, 0x01, 0x00, 0x00, 0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // `...............
	0xc6, 0x01, 0x00, 0x00, 0x99, 0x00, 0x00, 0x00, 0xc5, 0x01, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, // ................
	0x07, 0x00, 0x00, 0x00, 0xc7, 0x01, 0x00, 0x00, 0x99, 0x00, 0x00, 0x00, 0xc6, 0x01, 0x00, 0x00, // ................
	0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xc8, 0x01, 0x00, 0x00, 0x8f, 0x01, 0x00, 0x00, // ................
	0xc7, 0x01, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xc9, 0x01, 0x00, 0x00, // ................
	0xbd, 0x01, 0x00, 0x00, 0xc8, 0x01, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, // ................
	0xca, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, // ........(...T...
	0xc9, 0x01, 0x00, 0x00, 0x7f, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0xce, 0x01, 0x00, 0x00, // ................
	0xca, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xcf, 0x01, 0x00, 0x00, // ....P...........
	0x54, 0x00, 0x00, 0x00, 0xce, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, // T.......P.......
	0xd1, 0x01, 0x00, 0x00, 0xca, 0x01, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, // ........T...P...
	0x67, 0x00, 0x00, 0x00, 0xd2, 0x01, 0x00, 0x00, 0x8d, 0x01, 0x00, 0x00, 0x8d, 0x01, 0x00, 0x00, // g...............
	0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xd3, 0x01, 0x00, 0x00, 0xd2, 0x01, 0x00, 0x00, // ................
	0xcf, 0x01, 0x00, 0x00, 0xd1, 0x01, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, // ................
	0xd4, 0x01, 0x00, 0x00, 0x26, 0x01, 0x00, 0x00, 0xd3, 0x01, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, // ....&.......V...
	0x40, 0x00, 0x00, 0x00, 0x46, 0x02, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, // @...F.../...,...
	0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x49, 0x02, 0x00, 0x00, 0x46, 0x02, 0x00, 0x00, // X.......I...F...
	0xd4, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x4f, 0x00, 0x08, 0x00, // ........T...O...
	0x1b, 0x00, 0x00, 0x00, 0xd7, 0x01, 0x00, 0x00, 0x49, 0x02, 0x00, 0x00, 0x49, 0x02, 0x00, 0x00, // ........I...I...
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, // ................
	0x20, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x1f, 0x02, 0x00, 0x00, 0xff, 0x00, 0x01, 0x00, //  ...............
	0xf8, 0x00, 0x02, 0x00, 0x20, 0x02, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x1b, 0x00, 0x00, 0x00, // .... ...........
	0x94, 0x02, 0x00, 0x00, 0x1e, 0x02, 0x00, 0x00, 0xd8, 0x01, 0x00, 0x00, 0xd7, 0x01, 0x00, 0x00, // ................
	0x91, 0x01, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x60, 0x01, 0x00, 0x00, // ....Q.......`...
	0x94, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // ........Q.......
	0x61, 0x01, 0x00, 0x00, 0x94, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, // a...........Q...
	0x07, 0x00, 0x00, 0x00, 0x62, 0x01, 0x00, 0x00, 0x94, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // ....b...........
	0x50, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x63, 0x01, 0x00, 0x00, 0x60, 0x01, 0x00, 0x00, // P.......c...`...
	0x61, 0x01, 0x00, 0x00, 0x62, 0x01, 0x00, 0x00, 0x99, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x03, 0x00, // a...b.......>...
	0x30, 0x01, 0x00, 0x00, 0x63, 0x01, 0x00, 0x00, 0xfd, 0x00, 0x01, 0x00, 0x38, 0x00, 0x01, 0x00, // 0...c.......8...
	0x00, 0x00, 0x20, 0x00,                                                                         // .. .
};
static const bgfx::EmbeddedShader fs_pp_stereo_flipped_int = BGFX_EMBEDDED_SHADER(fs_pp_stereo_flipped_int);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Build of fragment shader from fs_pp_stereo.sc to fs_pp_stereo_anaglyph_deghost with options: ANAGLYPH DEGHOST NOSTEREO
static const uint8_t fs_pp_stereo_anaglyph_deghost_mtl[3612] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x14, 0x74, // FSH.o.><.......t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, // ex_stereo_fbSamp
	0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x74, 0x65, // ler...........te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x54, 0x65, 0x78, 0x74, 0x75, // x_stereo_fbTextu
	0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x74, 0x65, 0x78, // re...........tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, // _stereo_depthSam
	0x70, 0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x74, // pler...........t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x54, // ex_stereo_depthT
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, // exture..........
	0x13, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, // .Stereo_MS_ZPD_Y
	0x41, 0x78, 0x69, 0x73, 0x12, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x77, // Axis...........w
	0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x01, 0x10, 0x00, 0x01, 0x00, 0x00, // _h_height.......
	0x00, 0x00, 0x00, 0x0e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, // ....Stereo_LeftM
	0x61, 0x74, 0x14, 0x01, 0x20, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x53, 0x74, 0x65, // at.. ........Ste
	0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x01, 0x60, 0x00, // reo_RightMat..`.
	0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, // .......Stereo_De
	0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x14, 0x01, 0xb0, 0x00, 0x04, // ghostFilter.....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, // ......Stereo_Deg
	0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x12, 0x01, 0xa0, 0x00, 0x01, 0x00, 0x00, // hostGamma.......
	0x00, 0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, // ....tex_stereo_f
	0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x74, 0x65, 0x78, 0x5f, // b...........tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x10, 0x00, 0x00, 0x00, // stereo_depth....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xae, 0x0c, 0x00, 0x00, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, // ..........#inclu
	0x64, 0x65, 0x20, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x64, 0x6c, 0x69, 0x62, // de <metal_stdlib
	0x3e, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x73, 0x69, 0x6d, 0x64, // >.#include <simd
	0x2f, 0x73, 0x69, 0x6d, 0x64, 0x2e, 0x68, 0x3e, 0x0a, 0x0a, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, // /simd.h>..using 
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x3b, // namespace metal;
	0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, // ..struct _Global
	0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, // .{.    float4 St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, // ereo_MS_ZPD_YAxi
	0x73, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x77, 0x5f, // s;.    float4 w_
	0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, // h_height;.    fl
	0x6f, 0x61, 0x74, 0x34, 0x78, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, // oat4x4 Stereo_Le
	0x66, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // ftMat;.    float
	0x34, 0x78, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, // 4x4 Stereo_Right
	0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, // Mat;.    float4 
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, // Stereo_DeghostGa
	0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x78, // mma;.    float4x
	0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, // 4 Stereo_Deghost
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, // Filter;.};..stru
	0x63, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, // ct xlatMtlMain_o
	0x75, 0x74, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, // ut.{.    float4 
	0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x20, 0x5b, // bgfx_FragData0 [
	0x5b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, // [color(0)]];.};.
	0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, // .struct xlatMtlM
	0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, // ain_in.{.    flo
	0x61, 0x74, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, // at2 v_texcoord0 
	0x5b, 0x5b, 0x75, 0x73, 0x65, 0x72, 0x28, 0x6c, 0x6f, 0x63, 0x6e, 0x30, 0x29, 0x5d, 0x5d, 0x3b, // [[user(locn0)]];
	0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x78, 0x6c, // .};..fragment xl
	0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x78, 0x6c, // atMtlMain_out xl
	0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x28, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, // atMtlMain(xlatMt
	0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x5b, 0x5b, 0x73, 0x74, // lMain_in in [[st
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x5d, 0x5d, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, // age_in]], consta
	0x6e, 0x74, 0x20, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x26, 0x20, 0x5f, 0x6d, 0x74, 0x6c, // nt _Global& _mtl
	0x5f, 0x75, 0x20, 0x5b, 0x5b, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, // _u [[buffer(0)]]
	0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, 0x6f, 0x61, // , texture2d<floa
	0x74, 0x3e, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, // t> tex_stereo_fb
	0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x2c, //  [[texture(0)]],
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, //  texture2d<float
	0x3e, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, // > tex_stereo_dep
	0x74, 0x68, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x31, 0x29, 0x5d, // th [[texture(1)]
	0x5d, 0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, // ], sampler tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, // tereo_fbSampler 
	0x5b, 0x5b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x2c, 0x20, // [[sampler(0)]], 
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // sampler tex_ster
	0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, // eo_depthSampler 
	0x5b, 0x5b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x31, 0x29, 0x5d, 0x5d, 0x29, 0x0a, // [[sampler(1)]]).
	0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, // {.    xlatMtlMai
	0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x3d, 0x20, 0x7b, 0x7d, 0x3b, 0x0a, // n_out out = {};.
	0x20, 0x20, 0x20, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x5f, 0x34, 0x35, 0x30, 0x20, 0x3d, 0x20, //     bool _450 = 
	0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, // _mtl_u.Stereo_MS
	0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x7a, 0x20, 0x21, 0x3d, 0x20, // _ZPD_YAxis.z != 
	0x30, 0x2e, 0x30, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, // 0.0;.    float _
	0x35, 0x30, 0x39, 0x20, 0x3d, 0x20, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x61, 0x78, 0x28, // 509 = fast::max(
	0x30, 0x2e, 0x30, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x77, 0x5f, 0x68, 0x5f, // 0.0, _mtl_u.w_h_
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x6c, // height.w + (_mtl
	0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, // _u.Stereo_MS_ZPD
	0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, // _YAxis.x * (1.0 
	0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, // - (1.0 / (0.5 + 
	0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, 0x6e, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, // (fast::min(fast:
	0x3a, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // :min(tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, // depth.sample(tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, // _stereo_depthSam
	0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, // pler, (in.v_texc
	0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2b, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, // oord0 + select(f
	0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, // loat2(0.5 * _mtl
	0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, // _u.Stereo_MS_ZPD
	0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, // _YAxis.x, 0.0), 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x20, // float2(0.0, 0.5 
	0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // * _mtl_u.Stereo_
	0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, // MS_ZPD_YAxis.x),
	0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x34, 0x35, 0x30, 0x29, 0x29, 0x29, 0x2c, 0x20, //  bool2(_450))), 
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x2c, 0x20, 0x74, // level(0.0)).x, t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, // ex_stereo_depth.
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // sample(tex_stere
	0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, // o_depthSampler, 
	0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, // (in.v_texcoord0 
	0x2b, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, // + select(float2(
	0x30, 0x2e, 0x36, 0x36, 0x36, 0x30, 0x30, 0x30, 0x30, 0x30, 0x38, 0x35, 0x38, 0x33, 0x30, 0x36, // 0.66600000858306
	0x38, 0x38, 0x34, 0x37, 0x36, 0x35, 0x36, 0x32, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, // 884765625 * _mtl
	0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, // _u.Stereo_MS_ZPD
	0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, // _YAxis.x, 0.0), 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, // float2(0.0, 0.66
	0x36, 0x30, 0x30, 0x30, 0x30, 0x30, 0x38, 0x35, 0x38, 0x33, 0x30, 0x36, 0x38, 0x38, 0x34, 0x37, // 6000008583068847
	0x36, 0x35, 0x36, 0x32, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, // 65625 * _mtl_u.S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, // tereo_MS_ZPD_YAx
	0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x34, 0x35, // is.x), bool2(_45
	0x30, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, // 0))), level(0.0)
	0x29, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // ).x), tex_stereo
	0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, // _depth.sample(te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, // x_stereo_depthSa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, // mpler, (in.v_tex
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2b, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, // coord0 + select(
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, // float2(_mtl_u.St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, // ereo_MS_ZPD_YAxi
	0x73, 0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // s.x, 0.0), float
	0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, // 2(0.0, _mtl_u.St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, // ereo_MS_ZPD_YAxi
	0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x34, 0x35, 0x30, // s.x), bool2(_450
	0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, // ))), level(0.0))
	0x2e, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x5f, 0x6d, // .x) * ((1.0 / _m
	0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, // tl_u.Stereo_MS_Z
	0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, // PD_YAxis.y) - 0.
	0x35, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, // 5)))))));.    fl
	0x6f, 0x61, 0x74, 0x20, 0x5f, 0x35, 0x37, 0x39, 0x20, 0x3d, 0x20, 0x66, 0x61, 0x73, 0x74, 0x3a, // oat _579 = fast:
	0x3a, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, // :max(0.0, _mtl_u
	0x2e, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, // .w_h_height.w + 
	0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, // (_mtl_u.Stereo_M
	0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x20, 0x2a, 0x20, // S_ZPD_YAxis.x * 
	0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, // (1.0 - (1.0 / (0
	0x2e, 0x35, 0x20, 0x2b, 0x20, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, 0x6e, 0x28, // .5 + (fast::min(
	0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // fast::min(tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, // ereo_depth.sampl
	0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, // e(tex_stereo_dep
	0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, 0x6e, 0x2e, 0x76, // thSampler, (in.v
	0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2d, 0x20, 0x73, 0x65, 0x6c, // _texcoord0 - sel
	0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2a, // ect(float2(0.5 *
	0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, //  _mtl_u.Stereo_M
	0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, 0x20, 0x30, // S_ZPD_YAxis.x, 0
	0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, // .0), float2(0.0,
	0x20, 0x30, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, //  0.5 * _mtl_u.St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, // ereo_MS_ZPD_YAxi
	0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x34, 0x35, 0x30, // s.x), bool2(_450
	0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, // ))), level(0.0))
	0x2e, 0x78, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, // .x, tex_stereo_d
	0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, // epth.sample(tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, // stereo_depthSamp
	0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, // ler, (in.v_texco
	0x6f, 0x72, 0x64, 0x30, 0x20, 0x2d, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, // ord0 - select(fl
	0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x30, 0x30, 0x30, 0x30, 0x30, 0x38, // oat2(0.666000008
	0x35, 0x38, 0x33, 0x30, 0x36, 0x38, 0x38, 0x34, 0x37, 0x36, 0x35, 0x36, 0x32, 0x35, 0x20, 0x2a, // 58306884765625 *
	0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, //  _mtl_u.Stereo_M
	0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, 0x20, 0x30, // S_ZPD_YAxis.x, 0
	0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, // .0), float2(0.0,
	0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x30, 0x30, 0x30, 0x30, 0x30, 0x38, 0x35, 0x38, 0x33, 0x30, //  0.6660000085830
	0x36, 0x38, 0x38, 0x34, 0x37, 0x36, 0x35, 0x36, 0x32, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, // 6884765625 * _mt
	0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, // l_u.Stereo_MS_ZP
	0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, // D_YAxis.x), bool
	0x32, 0x28, 0x5f, 0x34, 0x35, 0x30, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, // 2(_450))), level
	0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, // (0.0)).x), tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, 0x6d, 0x70, // tereo_depth.samp
	0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, // le(tex_stereo_de
	0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, 0x6e, 0x2e, // pthSampler, (in.
	0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2d, 0x20, 0x73, 0x65, // v_texcoord0 - se
	0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x5f, 0x6d, 0x74, 0x6c, // lect(float2(_mtl
	0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, // _u.Stereo_MS_ZPD
	0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, // _YAxis.x, 0.0), 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, // float2(0.0, _mtl
	0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, // _u.Stereo_MS_ZPD
	0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, // _YAxis.x), bool2
	0x28, 0x5f, 0x34, 0x35, 0x30, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, // (_450))), level(
	0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x31, 0x2e, 0x30, // 0.0)).x) * ((1.0
	0x20, 0x2f, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, //  / _mtl_u.Stereo
	0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, // _MS_ZPD_YAxis.y)
	0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x20, //  - 0.5)))))));. 
	0x20, 0x20, 0x20, 0x6f, 0x75, 0x74, 0x2e, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, //    out.bgfx_Frag
	0x44, 0x61, 0x74, 0x61, 0x30, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x66, // Data0 = float4(f
	0x6c, 0x6f, 0x61, 0x74, 0x33, 0x78, 0x33, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x5f, // loat3x3(float3(_
	0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, // mtl_u.Stereo_Deg
	0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x30, 0x5d, 0x5b, 0x30, 0x5d, // hostFilter[0][0]
	0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // , _mtl_u.Stereo_
	0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x31, 0x5d, // DeghostFilter[1]
	0x5b, 0x30, 0x5d, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, // [0], _mtl_u.Ster
	0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, // eo_DeghostFilter
	0x5b, 0x32, 0x5d, 0x5b, 0x30, 0x5d, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, // [2][0]), float3(
	0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, // _mtl_u.Stereo_De
	0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x30, 0x5d, 0x5b, 0x31, // ghostFilter[0][1
	0x5d, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // ], _mtl_u.Stereo
	0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x31, // _DeghostFilter[1
	0x5d, 0x5b, 0x31, 0x5d, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, // ][1], _mtl_u.Ste
	0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, // reo_DeghostFilte
	0x72, 0x5b, 0x32, 0x5d, 0x5b, 0x31, 0x5d, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, // r[2][1]), float3
	0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, // (_mtl_u.Stereo_D
	0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x30, 0x5d, 0x5b, // eghostFilter[0][
	0x32, 0x5d, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, // 2], _mtl_u.Stere
	0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, // o_DeghostFilter[
	0x31, 0x5d, 0x5b, 0x32, 0x5d, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, // 1][2], _mtl_u.St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, // ereo_DeghostFilt
	0x65, 0x72, 0x5b, 0x32, 0x5d, 0x5b, 0x32, 0x5d, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, // er[2][2])) * pow
	0x72, 0x28, 0x28, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, // r(((float4(tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, // tereo_fb.sample(
	0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, // tex_stereo_fbSam
	0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, // pler, (in.v_texc
	0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2b, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, // oord0 + select(f
	0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x5f, 0x35, 0x30, 0x39, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // loat2(_509, 0.0)
	0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x5f, // , float2(0.0, -_
	0x35, 0x30, 0x39, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x34, 0x35, 0x30, // 509), bool2(_450
	0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, // ))), level(0.0))
	0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, // .xyz, 1.0) * _mt
	0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, // l_u.Stereo_LeftM
	0x61, 0x74, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x74, 0x65, // at) + (float4(te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2e, 0x73, 0x61, 0x6d, 0x70, // x_stereo_fb.samp
	0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, // le(tex_stereo_fb
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, // Sampler, (in.v_t
	0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2d, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, // excoord0 - selec
	0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x5f, 0x35, 0x37, 0x39, 0x2c, 0x20, 0x30, // t(float2(_579, 0
	0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, // .0), float2(0.0,
	0x20, 0x2d, 0x5f, 0x35, 0x37, 0x39, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, //  -_579), bool2(_
	0x34, 0x35, 0x30, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, // 450))), level(0.
	0x30, 0x29, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2a, 0x20, // 0)).xyz, 1.0) * 
	0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, // _mtl_u.Stereo_Ri
	0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x5f, 0x6d, // ghtMat)).xyz, _m
	0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, // tl_u.Stereo_Degh
	0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x2c, 0x20, 0x31, // ostGamma.xyz), 1
	0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // .0);.    return 
	0x6f, 0x75, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x0a, 0x00, 0x00, 0x30, 0x01,                         // out;.}....0.
};
static const uint8_t fs_pp_stereo_anaglyph_deghost_essl[10583] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x44, 0x29, // FSH.o.><......D)
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x33, 0x32, 0x30, 0x20, 0x65, // ..#version 320 e
	0x73, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, // s.#define attrib
	0x75, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x76, // ute in.#define v
	0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, // arying in.precis
	0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3b, // ion highp float;
	0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, // .precision highp
	0x20, 0x69, 0x6e, 0x74, 0x3b, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x73, 0x68, //  int;.#define sh
	0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, // adow2D(_sampler,
	0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, //  _coord) texture
	0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, // (_sampler, _coor
	0x64, 0x29, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x73, 0x68, 0x61, 0x64, 0x6f, // d).#define shado
	0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // w2DProj(_sampler
	0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // , _coord) textur
	0x65, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, // eProj(_sampler, 
	0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x0a, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x65, 0x64, 0x69, // _coord).out medi
	0x75, 0x6d, 0x70, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, // ump vec4 bgfx_Fr
	0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, // agColor;.varying
	0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, //  vec2 v_texcoord
	0x30, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, // 0;.vec3 instMul(
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x20, // vec3 _vec, mat3 
	0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // _mtx) { return (
	0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, //  (_vec) * (_mtx)
	0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, //  ); }.vec3 instM
	0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, // ul(mat3 _mtx, ve
	0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, // c3 _vec) { retur
	0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, // n ( (_mtx) * (_v
	0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, // ec) ); }.vec4 in
	0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, // stMul(vec4 _vec,
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, //  mat4 _mtx) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, // turn ( (_vec) * 
	0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, // (_mtx) ); }.vec4
	0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, //  instMul(mat4 _m
	0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, // tx, vec4 _vec) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, //  return ( (_mtx)
	0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, //  * (_vec) ); }.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, 0x70, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, // loat rcp(float _
	0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x2f, // a) { return 1.0/
	0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, // _a; }.vec2 rcp(v
	0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // ec2 _a) { return
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, //  vec2(1.0)/_a; }
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, // .vec3 rcp(vec3 _
	0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, // a) { return vec3
	0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, // (1.0)/_a; }.vec4
	0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, //  rcp(vec4 _a) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x31, 0x2e, 0x30, 0x29, // return vec4(1.0)
	0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x65, 0x63, 0x32, // /_a; }.vec2 vec2
	0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, // _splat(float _x)
	0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, //  { return vec2(_
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, // x, _x); }.vec3 v
	0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // ec3_splat(float 
	0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, // _x) { return vec
	0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, // 3(_x, _x, _x); }
	0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, // .vec4 vec4_splat
	0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // (float _x) { ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, // urn vec4(_x, _x,
	0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, //  _x, _x); }.uvec
	0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, // 2 uvec2_splat(ui
	0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // nt _x) { return 
	0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, // uvec2(_x, _x); }
	0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, // .uvec3 uvec3_spl
	0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // at(uint _x) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, // turn uvec3(_x, _
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x34, 0x20, // x, _x); }.uvec4 
	0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, // uvec4_splat(uint
	0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, //  _x) { return uv
	0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, // ec4(_x, _x, _x, 
	0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, // _x); }.mat4 mtxF
	0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, // romRows(vec4 _0,
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, //  vec4 _1, vec4 _
	0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // 2, vec4 _3).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, // turn transpose(m
	0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, // at4(_0, _1, _2, 
	0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, // _3) );.}.mat4 mt
	0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, // xFromCols(vec4 _
	0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // 0, vec4 _1, vec4
	0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, //  _2, vec4 _3).{.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, // return mat4(_0, 
	0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, // _1, _2, _3);.}.m
	0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, // at3 mtxFromRows(
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, // vec3 _0, vec3 _1
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // , vec3 _2).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, // urn transpose(ma
	0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x20, 0x29, // t3(_0, _1, _2) )
	0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, // ;.}.mat3 mtxFrom
	0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, // Cols(vec3 _0, ve
	0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, // c3 _1, vec3 _2).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, // {.return mat3(_0
	0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, // , _1, _2);.}.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, // form vec4 u_view
	0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, // Rect;.uniform ve
	0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x54, 0x65, 0x78, 0x65, 0x6c, 0x3b, 0x0a, // c4 u_viewTexel;.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, // uniform mat4 u_v
	0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, // iew;.uniform mat
	0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, // 4 u_invView;.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x70, 0x72, 0x6f, 0x6a, // form mat4 u_proj
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, // ;.uniform mat4 u
	0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // _invProj;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, // m mat4 u_viewPro
	0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, // j;.uniform mat4 
	0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, // u_invViewProj;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, // niform mat4 u_mo
	0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // del[32];.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, //  mat4 u_modelVie
	0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, // w;.uniform mat4 
	0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, // u_modelViewProj;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, // .uniform vec4 u_
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x66, 0x34, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // alphaRef4;.float
	0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, //  sqr( float v).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // .return v*v;.}.v
	0x65, 0x63, 0x32, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x29, // ec2 sqr( vec2 v)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, // .{.return v*v;.}
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // .vec3 sqr( vec3 
	0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, // v).{.return v*v;
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6d, 0x75, 0x6c, 0x5f, 0x77, 0x31, 0x28, 0x20, // .}.vec3 mul_w1( 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x29, 0x0a, // vec3 v, mat4 m).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2e, 0x78, 0x2a, 0x6d, 0x5b, 0x30, // {.return v.x*m[0
	0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x79, 0x2a, 0x6d, 0x5b, 0x31, // ].xyz + (v.y*m[1
	0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x7a, 0x2a, 0x6d, 0x5b, 0x32, // ].xyz + (v.z*m[2
	0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x6d, 0x5b, 0x33, 0x5d, 0x2e, 0x78, 0x79, 0x7a, // ].xyz + m[3].xyz
	0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x63, 0x6f, 0x73, // ));.}.float acos
	0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x20, 0x66, // _approx_divPI( f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // loat v).{.float 
	0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, // x = abs(v);.if(1
	0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, // . - x <= 0.00006
	0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // 103515625).retur
	0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, // n (v >= 0.) ? 0.
	0x20, 0x3a, 0x20, 0x31, 0x2e, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, //  : 1.;.float res
	0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, //  = ((-0.155972/3
	0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, // .141592653589793
	0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, // 2384626433832795
	0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, // ) * x + (1.56467
	0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, // /3.1415926535897
	0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, // 9323846264338327
	0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, // 95) ) * sqrt(1. 
	0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, // - x);.return (v 
	0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x31, // >= 0.) ? res : 1
	0x2e, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // . - res;.}.float
	0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, //  atan2_approx_di
	0x76, 0x32, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x79, 0x2c, 0x20, 0x66, // v2PI( float y, f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // loat x).{.float 
	0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x79, 0x29, 0x3b, 0x0a, // abs_y = abs(y);.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, // float abs_x = ab
	0x73, 0x28, 0x78, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3c, // s(x);.if(abs_x <
	0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, // = 0.000061035156
	0x32, 0x35, 0x20, 0x26, 0x26, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3c, 0x3d, 0x20, 0x30, // 25 && abs_y <= 0
	0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, // .00006103515625)
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x30, 0x2e, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // .return 0.;.floa
	0x74, 0x20, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2d, 0x20, 0x61, // t r = (abs_x - a
	0x62, 0x73, 0x5f, 0x79, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2b, // bs_y) / (abs_x +
	0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, //  abs_y);.float a
	0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, // ngle = ((x < 0.)
	0x20, 0x3f, 0x20, 0x28, 0x33, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x20, 0x3a, 0x20, 0x28, 0x31, 0x2e, //  ? (3./8.) : (1.
	0x2f, 0x38, 0x2e, 0x29, 0x29, 0x0a, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x32, 0x31, 0x31, 0x38, 0x36, // /8.)).+ (0.21186
	0x38, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, // 8 /(2.*3.1415926
	0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, // 5358979323846264
	0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x72, 0x20, 0x2a, 0x20, // 33832795) * r * 
	0x72, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x39, 0x38, 0x37, 0x33, 0x30, 0x35, 0x20, 0x2f, 0x28, 0x32, // r - 0.987305 /(2
	0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, // .*3.141592653589
	0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, // 7932384626433832
	0x37, 0x39, 0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, // 795)) * ((x < 0.
	0x29, 0x20, 0x3f, 0x20, 0x2d, 0x72, 0x20, 0x3a, 0x20, 0x72, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, // ) ? -r : r);.ret
	0x75, 0x72, 0x6e, 0x20, 0x28, 0x79, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, // urn (y < 0.) ? -
	0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3a, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x3b, 0x0a, 0x7d, // angle : angle;.}
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x73, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x72, // .float asin_appr
	0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // ox_divPI( float 
	0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, // v).{.float x = a
	0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, // bs(v);.if(1. - x
	0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, //  <= 0.0000610351
	0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, // 5625).return (v 
	0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x3a, 0x20, 0x2d, // >= 0.) ? 0.5 : -
	0x30, 0x2e, 0x35, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, // 0.5;.float res =
	0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, //  ((-0.155972/3.1
	0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, // 4159265358979323
	0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, // 84626433832795) 
	0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, // * x + (1.56467/3
	0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, // .141592653589793
	0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, // 2384626433832795
	0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, // ) ) * sqrt(1. - 
	0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, // x);.return (v >=
	0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, //  0.) ? 0.5 - res
	0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, //  : -0.5 + res;.}
	0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x61, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x71, 0x75, // .vec2 ray_to_equ
	0x69, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x75, 0x76, 0x28, // irectangular_uv(
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x61, 0x79, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, //  vec3 ray).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x0a, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, // urn vec2(.0.5 + 
	0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, // atan2_approx_div
	0x32, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x79, 0x2c, 0x20, 0x72, 0x61, 0x79, 0x2e, 0x78, // 2PI(ray.y, ray.x
	0x29, 0x2c, 0x0a, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, // ),.acos_approx_d
	0x69, 0x76, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // ivPI(ray.z));.}.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x20, 0x66, // float InvsRGB( f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, // loat color).{.if
	0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, //  (color <= 0.040
	0x34, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // 45).return color
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x29, 0x3b, 0x0a, //  * (1.0/12.92);.
	0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, // else.return pow(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, // color * (1.0/1.0
	0x35, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x2f, 0x31, 0x2e, 0x30, // 55) + (0.055/1.0
	0x35, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // 55), 2.4);.}.flo
	0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x20, 0x66, 0x6c, // at InvRec709( fl
	0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, // oat color).{.if 
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x38, 0x31, 0x29, // (color <= 0.081)
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, // .return color * 
	0x28, 0x31, 0x2e, 0x30, 0x2f, 0x34, 0x2e, 0x35, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, // (1.0/4.5);.else.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // return pow(color
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, 0x20, 0x2b, //  * (1.0/1.099) +
	0x20, 0x28, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, 0x2c, 0x20, //  (0.099/1.099), 
	0x31, 0x2e, 0x30, 0x2f, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // 1.0/0.45);.}.flo
	0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x66, 0x6c, 0x6f, // at InvGamma( flo
	0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, // at color).{.retu
	0x72, 0x6e, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // rn InvsRGB(color
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, // );.}.vec3 InvGam
	0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, // ma( vec3 color).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x49, 0x6e, // {.return vec3(In
	0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, // vGamma(color.x),
	0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, // InvGamma(color.y
	0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // ),InvGamma(color
	0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, // .z));.}.vec3 Inv
	0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, // ToneMap( vec3 co
	0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x69, 0x6e, 0x76, // lor).{.float inv
	0x5f, 0x32, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x30, 0x2e, 0x35, 0x2f, 0x30, 0x2e, 0x32, 0x35, 0x3b, // _2bh = 0.5/0.25;
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x34, 0x2e, 0x30, 0x2a, // .float bh = 4.0*
	0x30, 0x2e, 0x32, 0x35, 0x20, 0x2d, 0x20, 0x32, 0x2e, 0x30, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // 0.25 - 2.0;.retu
	0x72, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, // rn (color - 1.0 
	0x2b, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2a, 0x28, 0x63, 0x6f, // + sqrt(color*(co
	0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x20, 0x62, 0x68, 0x29, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, // lor + bh) + 1.0)
	0x29, 0x2a, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // )*inv_2bh;.}.flo
	0x61, 0x74, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, // at sRGB( float f
	0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, // ).{.float s;.if 
	0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x33, 0x31, 0x33, 0x30, 0x38, 0x29, // (f <= 0.0031308)
	0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, // .s = 12.92 * f;.
	0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x20, 0x2a, // else.s = 1.055 *
	0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x34, 0x29, //  pow(f, 1.0/2.4)
	0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, //  - 0.055;.return
	0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x52, 0x65, 0x63, 0x37, //  s;.}.float Rec7
	0x30, 0x39, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, // 09( float f).{.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, // loat s;.if (f <=
	0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x34, 0x2e, 0x35, 0x20, //  0.018).s = 4.5 
	0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, // * f;.else.s = 1.
	0x30, 0x39, 0x39, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x34, // 099 * pow(f, 0.4
	0x35, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // 5) - 0.099;.retu
	0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, // rn s;.}.float FB
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, // Gamma( float col
	0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x52, 0x47, // or).{.return sRG
	0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, // B(color);.}.vec2
	0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, //  FBGamma( vec2 c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // olor).{.return v
	0x65, 0x63, 0x32, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // ec2(FBGamma(colo
	0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, // r.x),FBGamma(col
	0x6f, 0x72, 0x2e, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, // or.y));.}.vec3 F
	0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, // BGamma( vec3 col
	0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, // or).{.return vec
	0x33, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, // 3(FBGamma(color.
	0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // x),FBGamma(color
	0x2e, 0x79, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // .y),FBGamma(colo
	0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, // r.z));.}.vec3 FB
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x32, 0x32, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, // Gamma22( vec3 co
	0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, // lor).{.return ve
	0x63, 0x33, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x2c, 0x20, // c3(pow(color.x, 
	0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, // 1.0/2.2),pow(col
	0x6f, 0x72, 0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, // or.y, 1.0/2.2),p
	0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, // ow(color.z, 1.0/
	0x32, 0x2e, 0x32, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, // 2.2));.}.float F
	0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // BToneMap( float 
	0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6c, 0x20, 0x2a, 0x20, // l).{.return l * 
	0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, // ((l*0.25 + 1.0) 
	0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // / (l + 1.0));.}.
	0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, // vec2 FBToneMap( 
	0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, // vec2 color).{.fl
	0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // oat l = dot(colo
	0x72, 0x2c, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2b, // r,vec2(0.176204+
	0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x2c, 0x30, 0x2e, // 0.0108109*0.5,0.
	0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, // 812985+0.0108109
	0x2a, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, // *0.5));.return c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, // olor * ((l*0.25 
	0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, // + 1.0) / (l + 1.
	0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x54, 0x6f, // 0));.}.vec3 FBTo
	0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // neMap( vec3 colo
	0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, // r).{.float l = d
	0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, // ot(color,vec3(0.
	0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2c, // 176204,0.812985,
	0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, // 0.0108109));.ret
	0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, // urn color * ((l*
	0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, // 0.25 + 1.0) / (l
	0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, //  + 1.0));.}.vec4
	0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, //  Additive( vec4 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, // cBase, vec4 cBle
	0x6e, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, // nd, float percen
	0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, // t).{.return cBas
	0x65, 0x20, 0x2b, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, // e + cBlend*perce
	0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, // nt;.}.vec3 Scree
	0x6e, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, // n ( vec3 cBase, 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, // vec3 cBlend).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, // eturn 1.0 - (1.0
	0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, //  - cBase) * (1.0
	0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, //  - cBlend);.}.ve
	0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, // c4 Screen ( vec4
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, //  cBase, vec4 cBl
	0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, // end).{.return 1.
	0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, // 0 - (1.0 - cBase
	0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // ) * (1.0 - cBlen
	0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, // d);.}.vec3 Scree
	0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, // nHDR ( vec3 cBas
	0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, // e, vec3 cBlend).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, // {.return max(1.0
	0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, //  - (1.0 - cBase)
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, //  * (1.0 - cBlend
	0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, // ), vec3(0.,0.,0.
	0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, // ));.}.vec4 Scree
	0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, // nHDR ( vec4 cBas
	0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, // e, vec4 cBlend).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, // {.return max(1.0
	0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, //  - (1.0 - cBase)
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, //  * (1.0 - cBlend
	0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, // ), vec4(0.,0.,0.
	0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4d, 0x75, // ,0.));.}.vec4 Mu
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // ltiply ( vec4 cB
	0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, // ase, vec4 cBlend
	0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, // , float percent)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, // .{.return cBase 
	0x2a, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, // * cBlend*percent
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, // ;.}.vec4 Overlay
	0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, //  ( vec4 cBase, v
	0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, // ec4 cBlend).{.ve
	0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, // c4 cNew = step(0
	0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, // .5, cBase);.cNew
	0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, //  = mix(cBase*cBl
	0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, // end*2.0, 1.0-2.0
	0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, // *(1.0-cBase)*(1.
	0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, // 0-cBlend), cNew)
	0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, // ;.return cNew;.}
	0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x48, 0x44, 0x52, // .vec4 OverlayHDR
	0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, //  ( vec4 cBase, v
	0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, // ec4 cBlend).{.ve
	0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, // c4 cNew = step(0
	0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, // .5, cBase);.cNew
	0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, //  = max(mix(cBase
	0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, // *cBlend*2.0, 1.0
	0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, // -2.0*(1.0-cBase)
	0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, // *(1.0-cBlend), c
	0x4e, 0x65, 0x77, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, // New), vec4(0.,0.
	0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // ,0.,0.));.return
	0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, //  cNew;.}.vec3 co
	0x73, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x5f, 0x73, 0x61, 0x6d, // s_hemisphere_sam
	0x70, 0x6c, 0x65, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x66, // ple( vec2 t).{.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x68, 0x69, 0x20, 0x3d, 0x20, 0x74, 0x2e, 0x79, 0x20, 0x2a, // loat phi = t.y *
	0x20, 0x28, 0x32, 0x2e, 0x30, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, //  (2.0*3.14159265
	0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, // 3589793238462643
	0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // 3832795);.float 
	0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, // cosTheta = sqrt(
	0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // 1.0 - t.x);.floa
	0x74, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, // t sinTheta = sqr
	0x74, 0x28, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x70, // t(t.x);.float sp
	0x2c, 0x63, 0x70, 0x3b, 0x0a, 0x7b, 0x73, 0x70, 0x3d, 0x73, 0x69, 0x6e, 0x28, 0x70, 0x68, 0x69, // ,cp;.{sp=sin(phi
	0x29, 0x3b, 0x63, 0x70, 0x3d, 0x63, 0x6f, 0x73, 0x28, 0x70, 0x68, 0x69, 0x29, 0x3b, 0x7d, 0x3b, // );cp=cos(phi);};
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x63, 0x70, 0x20, // .return vec3(cp 
	0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x63, 0x6f, 0x73, 0x54, // * sinTheta, cosT
	0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x73, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, // heta, sp * sinTh
	0x65, 0x74, 0x61, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x6f, 0x74, // eta);.}.vec3 rot
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x70, // ate_to_vector_up
	0x70, 0x65, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x76, // per( vec3 vec, v
	0x65, 0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, // ec3 normal).{.if
	0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x3e, 0x20, 0x2d, 0x30, 0x2e, 0x39, // (normal.y > -0.9
	0x39, 0x39, 0x39, 0x39, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x20, // 9999).{.float h 
	0x3d, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x28, 0x31, 0x2e, 0x30, 0x2b, 0x6e, 0x6f, 0x72, 0x6d, 0x61, // = 1.0/(1.0+norma
	0x6c, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x20, 0x3d, // l.y);.float hz =
	0x20, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, //  h*normal.z;.flo
	0x61, 0x74, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x3d, 0x20, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, // at hzx = hz*norm
	0x61, 0x6c, 0x2e, 0x78, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, // al.x;.return vec
	0x33, 0x28, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, // 3(.vec.x * (norm
	0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, // al.y+hz*normal.z
	0x29, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, // ) + vec.y * norm
	0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x68, // al.x - vec.z * h
	0x7a, 0x78, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, // zx,.vec.y * norm
	0x61, 0x6c, 0x2e, 0x79, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x6e, // al.y - vec.x * n
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, // ormal.x - vec.z 
	0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, // * normal.z,.vec.
	0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x20, 0x2d, 0x20, 0x76, // y * normal.z - v
	0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, // ec.x * hzx + vec
	0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, // .z * (normal.y+h
	0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, // *normal.x*normal
	0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x72, 0x65, 0x74, // .x));.}.else ret
	0x75, 0x72, 0x6e, 0x20, 0x2d, 0x76, 0x65, 0x63, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, // urn -vec;.}.unif
	0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // orm vec4 Stereo_
	0x53, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // Saturation;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // orm vec4 Stereo_
	0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x3b, 0x0a, 0x75, 0x6e, // MS_ZPD_YAxis;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x20, // iform sampler2D 
	0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x3b, 0x0a, 0x75, // tex_stereo_fb;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, // niform sampler2D
	0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, //  tex_stereo_dept
	0x68, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // h;.uniform vec4 
	0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, // w_h_height;.vec3
	0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x28, //  gatherEyeColor(
	0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x69, 0x73, 0x4c, // vec2 u, bool isL
	0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x79, 0x61, 0x78, 0x69, // eft).{.bool yaxi
	0x73, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, // s = (Stereo_MS_Z
	0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x7a, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, // PD_YAxis.z != 0.
	0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, // );.float MaxSepa
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // ration = (Stereo
	0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, // _MS_ZPD_YAxis.x)
	0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, 0x0a, // ;.if (isLeft).{.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, // float lminDepth 
	0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // = min(min(textur
	0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // eLod(tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, // depth, u + (yaxi
	0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, // s ? vec2(0.0, 0.
	0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // 500 * MaxSeparat
	0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, // ion) : vec2(0.50
	0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, // 0 * MaxSeparatio
	0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, // n, 0.0)), 0.0).x
	0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, // ,.textureLod(tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, // _stereo_depth, u
	0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, //  + (yaxis ? vec2
	0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, // (0.0, 0.666 * Ma
	0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, // xSeparation) : v
	0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, // ec2(0.666 * MaxS
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, // eparation, 0.0))
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, // , 0.0).x),.textu
	0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // reLod(tex_stereo
	0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, // _depth, u + (yax
	0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, // is ? vec2(0.0, M
	0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, // axSeparation) : 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // vec2( MaxSeparat
	0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // ion, 0.0)), 0.0)
	0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x70, 0x61, 0x72, 0x61, // .x);.float lpara
	0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, // llax = max(0.0, 
	0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, // w_h_height.w + M
	0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, // axSeparation * (
	0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, // 1.0 - 1.0 / (0.5
	0x20, 0x2b, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, //  + lminDepth * (
	0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, // 1.0 / (Stereo_MS
	0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, // _ZPD_YAxis.y) - 
	0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // 0.5))));.return 
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, // textureLod(tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, // tereo_fb, u + (y
	0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, // axis ? vec2(0.0,
	0x20, 0x2d, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, //  -lparallax) : v
	0x65, 0x63, 0x32, 0x28, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, // ec2(lparallax, 0
	0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, // .0)), 0.0).xyz;.
	0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, // }.else.{.float r
	0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, // minDepth = min(m
	0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, // in(textureLod(te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, // x_stereo_depth, 
	0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, // u - (yaxis ? vec
	0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, // 2(0.0, 0.500 * M
	0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, // axSeparation) : 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, // vec2(0.500 * Max
	0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // Separation, 0.0)
	0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, // ), 0.0).x,.textu
	0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // reLod(tex_stereo
	0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, // _depth, u - (yax
	0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, // is ? vec2(0.0, 0
	0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, // .666 * MaxSepara
	0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, // tion) : vec2(0.6
	0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // 66 * MaxSeparati
	0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, // on, 0.0)), 0.0).
	0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, // x),.textureLod(t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, // ex_stereo_depth,
	0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, //  u - (yaxis ? ve
	0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, // c2(0.0, MaxSepar
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, // ation) : vec2( M
	0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, // axSeparation, 0.
	0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, // 0)), 0.0).x);.fl
	0x6f, 0x61, 0x74, 0x20, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, // oat rparallax = 
	0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, // max(0.0, w_h_hei
	0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, // ght.w + MaxSepar
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, // ation * (1.0 - 1
	0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x6d, 0x69, 0x6e, // .0 / (0.5 + rmin
	0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, // Depth * (1.0 / (
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, // Stereo_MS_ZPD_YA
	0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, // xis.y) - 0.5))))
	0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // ;.return texture
	0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, // Lod(tex_stereo_f
	0x62, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, // b, u - (yaxis ? 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x72, 0x70, 0x61, 0x72, 0x61, // vec2(0.0, -rpara
	0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x72, 0x70, 0x61, // llax) : vec2(rpa
	0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, // rallax, 0.0)), 0
	0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, // .0).xyz;.}.}.voi
	0x64, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x69, 0x67, 0x68, // d gatherLeftRigh
	0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, // tColors(vec2 u, 
	0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x63, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, // out vec3 lcol, o
	0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, // ut vec3 rcol).{.
	0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, // bool yaxis = (St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, // ereo_MS_ZPD_YAxi
	0x73, 0x2e, 0x7a, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // s.z != 0.);.floa
	0x74, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, // t MaxSeparation 
	0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, // = (Stereo_MS_ZPD
	0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // _YAxis.x);.float
	0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, //  lminDepth = min
	0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, // (min(textureLod(
	0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, // tex_stereo_depth
	0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, // , u + (yaxis ? v
	0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, // ec2(0.0, 0.500 *
	0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, //  MaxSeparation) 
	0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, // : vec2(0.500 * M
	0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, // axSeparation, 0.
	0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, // 0)), 0.0).x,.tex
	0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // tureLod(tex_ster
	0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, // eo_depth, u + (y
	0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, // axis ? vec2(0.0,
	0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, //  0.666 * MaxSepa
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, // ration) : vec2(0
	0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, // .666 * MaxSepara
	0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, // tion, 0.0)), 0.0
	0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, // ).x),.textureLod
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, // (tex_stereo_dept
	0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, // h, u + (yaxis ? 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // vec2(0.0, MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // aration) : vec2(
	0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, //  MaxSeparation, 
	0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, // 0.0)), 0.0).x);.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, // float lparallax 
	0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, // = max(0.0, w_h_h
	0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // eight.w + MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, // aration * (1.0 -
	0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x6c, 0x6d, //  1.0 / (0.5 + lm
	0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, // inDepth * (1.0 /
	0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, //  (Stereo_MS_ZPD_
	0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, // YAxis.y) - 0.5))
	0x29, 0x29, 0x3b, 0x0a, 0x6c, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, // ));.lcol = textu
	0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // reLod(tex_stereo
	0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, // _fb, u + (yaxis 
	0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x6c, 0x70, 0x61, // ? vec2(0.0, -lpa
	0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x6c, // rallax) : vec2(l
	0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, // parallax, 0.0)),
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, //  0.0).xyz;.float
	0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, //  rminDepth = min
	0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, // (min(textureLod(
	0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, // tex_stereo_depth
	0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, // , u - (yaxis ? v
	0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, // ec2(0.0, 0.500 *
	0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, //  MaxSeparation) 
	0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, // : vec2(0.500 * M
	0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, // axSeparation, 0.
	0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, // 0)), 0.0).x,.tex
	0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // tureLod(tex_ster
	0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, // eo_depth, u - (y
	0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, // axis ? vec2(0.0,
	0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, //  0.666 * MaxSepa
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, // ration) : vec2(0
	0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, // .666 * MaxSepara
	0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, // tion, 0.0)), 0.0
	0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, // ).x),.textureLod
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, // (tex_stereo_dept
	0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, // h, u - (yaxis ? 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // vec2(0.0, MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // aration) : vec2(
	0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, //  MaxSeparation, 
	0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, // 0.0)), 0.0).x);.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, // float rparallax 
	0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, // = max(0.0, w_h_h
	0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // eight.w + MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, // aration * (1.0 -
	0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x6d, //  1.0 / (0.5 + rm
	0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, // inDepth * (1.0 /
	0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, //  (Stereo_MS_ZPD_
	0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, // YAxis.y) - 0.5))
	0x29, 0x29, 0x3b, 0x0a, 0x72, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, // ));.rcol = textu
	0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // reLod(tex_stereo
	0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, // _fb, u - (yaxis 
	0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x72, 0x70, 0x61, // ? vec2(0.0, -rpa
	0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x72, // rallax) : vec2(r
	0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, // parallax, 0.0)),
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, //  0.0).xyz;.}.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // form mat4 Stereo
	0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // _LeftMat;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, // m mat4 Stereo_Ri
	0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // ghtMat;.uniform 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, // vec4 Stereo_Left
	0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, // Luminance_Gamma;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, // .uniform vec4 St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, // ereo_RightLumina
	0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x3b, 0x0a, 0x76, 0x6f, // nce_DynDesat;.vo
	0x69, 0x64, 0x20, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x65, 0x73, 0x61, 0x74, 0x41, // id DynamicDesatA
	0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, // naglyph( vec3 lC
	0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, // ol, vec3 rCol, o
	0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, // ut vec3 lDesatCo
	0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x44, 0x65, 0x73, // l, out vec3 rDes
	0x61, 0x74, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, // atCol).{.float l
	0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, // eft2LeftLum = do
	0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, // t(lCol, Stereo_L
	0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, // eftLuminance_Gam
	0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, // ma.xyz);.float l
	0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, // eft2RightLum = d
	0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // ot(lCol, Stereo_
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, // RightLuminance_D
	0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, // ynDesat.xyz);.fl
	0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, // oat right2LeftLu
	0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, // m = dot(rCol, St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, // ereo_LeftLuminan
	0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, // ce_Gamma.xyz);.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, // loat right2Right
	0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // Lum = dot(rCol, 
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, // Stereo_RightLumi
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x78, // nance_DynDesat.x
	0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x4c, // yz);.float leftL
	0x75, 0x6d, 0x20, 0x3d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, // um = left2LeftLu
	0x6d, 0x20, 0x2b, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // m + left2RightLu
	0x6d, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // m;.float rightLu
	0x6d, 0x20, 0x3d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, // m = right2LeftLu
	0x6d, 0x20, 0x2b, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, // m + right2RightL
	0x75, 0x6d, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, // um;.float leftDe
	0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, // sat = Stereo_Rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, // htLuminance_DynD
	0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x6c, 0x65, // esat.w * abs((le
	0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x6c, 0x65, 0x66, // ft2LeftLum - lef
	0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, // t2RightLum) / (l
	0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, // eftLum + 0.0001)
	0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, // );.float rightDe
	0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, // sat = Stereo_Rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, // htLuminance_DynD
	0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x72, 0x69, // esat.w * abs((ri
	0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x72, 0x69, // ght2LeftLum - ri
	0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, // ght2RightLum) / 
	0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, // (rightLum + 0.00
	0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, // 01));.lDesatCol 
	0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, // = mix(lCol, vec3
	0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, // _splat(leftLum),
	0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x72, 0x44, 0x65, //  leftDesat);.rDe
	0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x72, 0x43, 0x6f, // satCol = mix(rCo
	0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x72, 0x69, // l, vec3_splat(ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, // ghtLum), rightDe
	0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x4c, 0x69, 0x6e, // sat);.}.vec3 Lin
	0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, 0x63, // earAnaglyph( vec
	0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, // 3 lCol, vec3 rCo
	0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, // l).{.vec3 color 
	0x3d, 0x20, 0x28, 0x28, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, // = (( (vec4(lCol,
	0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, //  1.)) * (Stereo_
	0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x20, 0x28, // LeftMat) ) + ( (
	0x76, 0x65, 0x63, 0x34, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, // vec4(rCol, 1.)) 
	0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, // * (Stereo_RightM
	0x61, 0x74, 0x29, 0x20, 0x29, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // at) )).rgb;.retu
	0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, // rn color;.}.unif
	0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // orm vec4 Stereo_
	0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, 0x6e, // DeghostGamma;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // iform mat4 Stere
	0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3b, // o_DeghostFilter;
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x6e, 0x61, // .vec3 DeghostAna
	0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, // glyph( vec3 lCol
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x76, // , vec3 rCol).{.v
	0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, 0x6e, 0x65, // ec3 color = Line
	0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, // arAnaglyph(lCol,
	0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, //  rCol);.return (
	0x20, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x53, 0x74, 0x65, //  (pow(color, Ste
	0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, // reo_DeghostGamma
	0x2e, 0x72, 0x67, 0x62, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x53, // .rgb)) * (mat3(S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, // tereo_DeghostFil
	0x74, 0x65, 0x72, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, // ter[0].xyz, Ster
	0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, // eo_DeghostFilter
	0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // [1].xyz, Stereo_
	0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x32, 0x5d, // DeghostFilter[2]
	0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, 0x64, // .xyz)) );.}.void
	0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, //  main().{.vec3 l
	0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x3b, 0x0a, 0x67, 0x61, 0x74, 0x68, 0x65, // Col, rCol;.gathe
	0x72, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, // rLeftRightColors
	0x28, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2c, 0x20, 0x6c, 0x43, // (v_texcoord0, lC
	0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x62, 0x67, 0x66, 0x78, 0x5f, // ol, rCol);.bgfx_
	0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, // FragColor = vec4
	0x28, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, // (DeghostAnaglyph
	0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x2c, 0x20, 0x31, 0x2e, // (lCol, rCol), 1.
	0x30, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x00,                                                       // 0);.}..
};
static const uint8_t fs_pp_stereo_anaglyph_deghost_glsl[10953] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb6, 0x2a, // FSH.o.><.......*
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x34, 0x34, 0x30, 0x0a, 0x6f, // ..#version 440.o
	0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, // ut vec4 bgfx_Fra
	0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, // gColor;.#define 
	0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x62, 0x67, 0x66, // gl_FragColor bgf
	0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x0a, 0x23, 0x64, 0x65, 0x66, // x_FragColor.#def
	0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x20, 0x20, 0x20, // ine texture2D   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x0a, 0x23, //        texture.#
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, // define texture2D
	0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // Lod       textur
	0x65, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, // eLod.#define tex
	0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ture2DGrad      
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, // textureGrad.#def
	0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, // ine texture2DPro
	0x6a, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, // jLod   texturePr
	0x6f, 0x6a, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, // ojLod.#define te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, 0x20, // xture2DProjGrad 
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, //  textureProjGrad
	0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // .#define texture
	0x43, 0x75, 0x62, 0x65, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, // CubeLod     text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, // ureLod.#define t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, // extureCubeGrad  
	0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, //   textureGrad.#d
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x33, 0x44, 0x20, // efine texture3D 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, //          texture
	0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // .#define texture
	0x32, 0x44, 0x4c, 0x6f, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x20, 0x74, 0x65, 0x78, 0x74, // 2DLodOffset text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x0a, 0x23, 0x64, 0x65, // ureLodOffset.#de
	0x66, 0x69, 0x6e, 0x65, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x69, // fine attribute i
	0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, // n.#define varyin
	0x67, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x62, 0x67, 0x66, // g in.#define bgf
	0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, // xShadow2D(_sampl
	0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, // er, _coord)     
	0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, // vec4_splat(textu
	0x72, 0x65, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, // re(_sampler, _co
	0x6f, 0x72, 0x64, 0x29, 0x20, 0x29, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x62, // ord) ).#define b
	0x67, 0x66, 0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x28, // gfxShadow2DProj(
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, // _sampler, _coord
	0x29, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, // ) vec4_splat(tex
	0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // tureProj(_sample
	0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x29, 0x0a, 0x76, 0x61, 0x72, // r, _coord) ).var
	0x79, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, // ying vec2 v_texc
	0x6f, 0x6f, 0x72, 0x64, 0x30, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, // oord0;.vec3 inst
	0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, // Mul(vec3 _vec, m
	0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // at3 _mtx) { retu
	0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, // rn ( (_vec) * (_
	0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, // mtx) ); }.vec3 i
	0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, // nstMul(mat3 _mtx
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, // , vec3 _vec) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, // eturn ( (_mtx) *
	0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, //  (_vec) ); }.vec
	0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, // 4 instMul(vec4 _
	0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, // vec, mat4 _mtx) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, // { return ( (_vec
	0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, // ) * (_mtx) ); }.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, // vec4 instMul(mat
	0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, // 4 _mtx, vec4 _ve
	0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, // c) { return ( (_
	0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, // mtx) * (_vec) );
	0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, 0x70, 0x28, 0x66, 0x6c, 0x6f, //  }.float rcp(flo
	0x61, 0x74, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // at _a) { return 
	0x31, 0x2e, 0x30, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, // 1.0/_a; }.vec2 r
	0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // cp(vec2 _a) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, // turn vec2(1.0)/_
	0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, // a; }.vec3 rcp(ve
	0x63, 0x33, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // c3 _a) { return 
	0x76, 0x65, 0x63, 0x33, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, // vec3(1.0)/_a; }.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x61, // vec4 rcp(vec4 _a
	0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, // ) { return vec4(
	0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, // 1.0)/_a; }.vec2 
	0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, // vec2_splat(float
	0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, //  _x) { return ve
	0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, // c2(_x, _x); }.ve
	0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, // c3 vec3_splat(fl
	0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // oat _x) { return
	0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, //  vec3(_x, _x, _x
	0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, // ); }.vec4 vec4_s
	0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, // plat(float _x) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, //  return vec4(_x,
	0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, //  _x, _x, _x); }.
	0x75, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, // uvec2 uvec2_spla
	0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // t(uint _x) { ret
	0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, // urn uvec2(_x, _x
	0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, // ); }.uvec3 uvec3
	0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, // _splat(uint _x) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, // { return uvec3(_
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, // x, _x, _x); }.uv
	0x65, 0x63, 0x34, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, // ec4 uvec4_splat(
	0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, // uint _x) { retur
	0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, // n uvec4(_x, _x, 
	0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, // _x, _x); }.mat4 
	0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, // mtxFromRows(vec4
	0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, //  _0, vec4 _1, ve
	0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, // c4 _2, vec4 _3).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, // {.return transpo
	0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, // se(mat4(_0, _1, 
	0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, // _2, _3) );.}.mat
	0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, // 4 mtxFromCols(ve
	0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, // c4 _0, vec4 _1, 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, // vec4 _2, vec4 _3
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x28, // ).{.return mat4(
	0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x3b, // _0, _1, _2, _3);
	0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, // .}.mat3 mtxFromR
	0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, // ows(vec3 _0, vec
	0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, // 3 _1, vec3 _2).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, // .return transpos
	0x65, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, // e(mat3(_0, _1, _
	0x32, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, // 2) );.}.mat3 mtx
	0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, // FromCols(vec3 _0
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // , vec3 _1, vec3 
	0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, // _2).{.return mat
	0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x3b, 0x0a, 0x7d, // 3(_0, _1, _2);.}
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, // .uniform vec4 u_
	0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // viewRect;.unifor
	0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x54, 0x65, 0x78, // m vec4 u_viewTex
	0x65, 0x6c, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, // el;.uniform mat4
	0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, //  u_view;.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x3b, //  mat4 u_invView;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, // .uniform mat4 u_
	0x70, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, // proj;.uniform ma
	0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, // t4 u_invProj;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, // iform mat4 u_vie
	0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, // wProj;.uniform m
	0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, // at4 u_invViewPro
	0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, // j;.uniform mat4 
	0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, 0x3b, 0x0a, 0x75, 0x6e, 0x69, // u_model[32];.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, // form mat4 u_mode
	0x6c, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, // lView;.uniform m
	0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x50, // at4 u_modelViewP
	0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, // roj;.uniform vec
	0x34, 0x20, 0x75, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x66, 0x34, 0x3b, 0x0a, 0x66, // 4 u_alphaRef4;.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // loat sqr( float 
	0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, // v).{.return v*v;
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, // .}.vec2 sqr( vec
	0x32, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, // 2 v).{.return v*
	0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x76, // v;.}.vec3 sqr( v
	0x65, 0x63, 0x33, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // ec3 v).{.return 
	0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6d, 0x75, 0x6c, 0x5f, // v*v;.}.vec3 mul_
	0x77, 0x31, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, // w1( vec3 v, mat4
	0x20, 0x6d, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2e, 0x78, //  m).{.return v.x
	0x2a, 0x6d, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x79, // *m[0].xyz + (v.y
	0x2a, 0x6d, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x7a, // *m[1].xyz + (v.z
	0x2a, 0x6d, 0x5b, 0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x6d, 0x5b, 0x33, 0x5d, // *m[2].xyz + m[3]
	0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // .xyz));.}.float 
	0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, // acos_approx_divP
	0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, // I( float v).{.fl
	0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, // oat x = abs(v);.
	0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, // if(1. - x <= 0.0
	0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, // 0006103515625).r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, // eturn (v >= 0.) 
	0x3f, 0x20, 0x30, 0x2e, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // ? 0. : 1.;.float
	0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, //  res = ((-0.1559
	0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, // 72/3.14159265358
	0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, // 9793238462643383
	0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, // 2795) * x + (1.5
	0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, // 6467/3.141592653
	0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, // 5897932384626433
	0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, // 832795) ) * sqrt
	0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // (1. - x);.return
	0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x72, 0x65, 0x73, //  (v >= 0.) ? res
	0x20, 0x3a, 0x20, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, //  : 1. - res;.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, // loat atan2_appro
	0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // x_div2PI( float 
	0x79, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, // y, float x).{.fl
	0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, // oat abs_y = abs(
	0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, // y);.float abs_x 
	0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x78, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x61, 0x62, 0x73, // = abs(x);.if(abs
	0x5f, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, // _x <= 0.00006103
	0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x20, 0x26, 0x26, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, // 515625 && abs_y 
	0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, // <= 0.00006103515
	0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x30, 0x2e, 0x3b, 0x0a, // 625).return 0.;.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, // float r = (abs_x
	0x20, 0x2d, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x61, 0x62, 0x73, //  - abs_y) / (abs
	0x5f, 0x78, 0x20, 0x2b, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, // _x + abs_y);.flo
	0x61, 0x74, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, // at angle = ((x <
	0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x28, 0x33, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x20, 0x3a, //  0.) ? (3./8.) :
	0x20, 0x28, 0x31, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x29, 0x0a, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x32, //  (1./8.)).+ (0.2
	0x31, 0x31, 0x38, 0x36, 0x38, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, // 11868 /(2.*3.141
	0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, // 5926535897932384
	0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, // 626433832795) * 
	0x72, 0x20, 0x2a, 0x20, 0x72, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x39, 0x38, 0x37, 0x33, 0x30, 0x35, // r * r - 0.987305
	0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, //  /(2.*3.14159265
	0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, // 3589793238462643
	0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x78, 0x20, // 3832795)) * ((x 
	0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x72, 0x20, 0x3a, 0x20, 0x72, 0x29, 0x3b, // < 0.) ? -r : r);
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x79, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, // .return (y < 0.)
	0x20, 0x3f, 0x20, 0x2d, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3a, 0x20, 0x61, 0x6e, 0x67, 0x6c, //  ? -angle : angl
	0x65, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x73, 0x69, 0x6e, 0x5f, // e;.}.float asin_
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, // approx_divPI( fl
	0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, // oat v).{.float x
	0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, //  = abs(v);.if(1.
	0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, //  - x <= 0.000061
	0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // 03515625).return
	0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, //  (v >= 0.) ? 0.5
	0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, //  : -0.5;.float r
	0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, // es = ((-0.155972
	0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, // /3.1415926535897
	0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, // 9323846264338327
	0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, // 95) * x + (1.564
	0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, // 67/3.14159265358
	0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, // 9793238462643383
	0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, // 2795) ) * sqrt(1
	0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // . - x);.return (
	0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x2d, // v >= 0.) ? 0.5 -
	0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x65, //  res : -0.5 + re
	0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x61, 0x79, 0x5f, 0x74, 0x6f, // s;.}.vec2 ray_to
	0x5f, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, // _equirectangular
	0x5f, 0x75, 0x76, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x61, 0x79, 0x29, 0x0a, 0x7b, // _uv( vec3 ray).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x0a, 0x30, 0x2e, // .return vec2(.0.
	0x35, 0x20, 0x2b, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, // 5 + atan2_approx
	0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x79, 0x2c, 0x20, 0x72, // _div2PI(ray.y, r
	0x61, 0x79, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, // ay.x),.acos_appr
	0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x7a, 0x29, 0x29, // ox_divPI(ray.z))
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, // ;.}.float InvsRG
	0x42, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, // B( float color).
	0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, // {.if (color <= 0
	0x2e, 0x30, 0x34, 0x30, 0x34, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, // .04045).return c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x32, 0x2e, 0x39, // olor * (1.0/12.9
	0x32, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // 2);.else.return 
	0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, // pow(color * (1.0
	0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x35, 0x35, // /1.055) + (0.055
	0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x29, 0x3b, 0x0a, 0x7d, // /1.055), 2.4);.}
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, // .float InvRec709
	0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, // ( float color).{
	0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, // .if (color <= 0.
	0x30, 0x38, 0x31, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // 081).return colo
	0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x34, 0x2e, 0x35, 0x29, 0x3b, 0x0a, 0x65, // r * (1.0/4.5);.e
	0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, // lse.return pow(c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x39, // olor * (1.0/1.09
	0x39, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x2f, 0x31, 0x2e, 0x30, 0x39, // 9) + (0.099/1.09
	0x39, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x3b, 0x0a, 0x7d, // 9), 1.0/0.45);.}
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, // .float InvGamma(
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, //  float color).{.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, // return InvsRGB(c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, // olor);.}.vec3 In
	0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, // vGamma( vec3 col
	0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, // or).{.return vec
	0x33, 0x28, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // 3(InvGamma(color
	0x2e, 0x78, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, // .x),InvGamma(col
	0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, // or.y),InvGamma(c
	0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, // olor.z));.}.vec3
	0x20, 0x49, 0x6e, 0x76, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, //  InvToneMap( vec
	0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // 3 color).{.float
	0x20, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x30, 0x2e, 0x35, 0x2f, 0x30, //  inv_2bh = 0.5/0
	0x2e, 0x32, 0x35, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x68, 0x20, 0x3d, 0x20, // .25;.float bh = 
	0x34, 0x2e, 0x30, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2d, 0x20, 0x32, 0x2e, 0x30, 0x3b, 0x0a, // 4.0*0.25 - 2.0;.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2d, 0x20, // return (color - 
	0x31, 0x2e, 0x30, 0x20, 0x2b, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // 1.0 + sqrt(color
	0x2a, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x20, 0x62, 0x68, 0x29, 0x20, 0x2b, 0x20, // *(color + bh) + 
	0x31, 0x2e, 0x30, 0x29, 0x29, 0x2a, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x3b, 0x0a, 0x7d, // 1.0))*inv_2bh;.}
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x20, 0x66, 0x6c, 0x6f, // .float sRGB( flo
	0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, // at f).{.float s;
	0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x33, 0x31, // .if (f <= 0.0031
	0x33, 0x30, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x20, 0x2a, // 308).s = 12.92 *
	0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, //  f;.else.s = 1.0
	0x35, 0x35, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, // 55 * pow(f, 1.0/
	0x32, 0x2e, 0x34, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x3b, 0x0a, 0x72, 0x65, // 2.4) - 0.055;.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // turn s;.}.float 
	0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, // Rec709( float f)
	0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, // .{.float s;.if (
	0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, // f <= 0.018).s = 
	0x34, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, // 4.5 * f;.else.s 
	0x3d, 0x20, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, // = 1.099 * pow(f,
	0x20, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x3b, 0x0a, //  0.45) - 0.099;.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // return s;.}.floa
	0x74, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // t FBGamma( float
	0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, //  color).{.return
	0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, //  sRGB(color);.}.
	0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, // vec2 FBGamma( ve
	0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, // c2 color).{.retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, // rn vec2(FBGamma(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, // color.x),FBGamma
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // (color.y));.}.ve
	0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, // c3 FBGamma( vec3
	0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, //  color).{.return
	0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, //  vec3(FBGamma(co
	0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, // lor.x),FBGamma(c
	0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, // olor.y),FBGamma(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // color.z));.}.vec
	0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x32, 0x32, 0x28, 0x20, 0x76, 0x65, 0x63, // 3 FBGamma22( vec
	0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // 3 color).{.retur
	0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // n vec3(pow(color
	0x2e, 0x78, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, // .x, 1.0/2.2),pow
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, // (color.y, 1.0/2.
	0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x2c, 0x20, // 2),pow(color.z, 
	0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // 1.0/2.2));.}.flo
	0x61, 0x74, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x66, 0x6c, // at FBToneMap( fl
	0x6f, 0x61, 0x74, 0x20, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // oat l).{.return 
	0x6c, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, // l * ((l*0.25 + 1
	0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, // .0) / (l + 1.0))
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, // ;.}.vec2 FBToneM
	0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, // ap( vec2 color).
	0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, // {.float l = dot(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, // color,vec2(0.176
	0x32, 0x30, 0x34, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, // 204+0.0108109*0.
	0x35, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, // 5,0.812985+0.010
	0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // 8109*0.5));.retu
	0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, // rn color * ((l*0
	0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, // .25 + 1.0) / (l 
	0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // + 1.0));.}.vec3 
	0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // FBToneMap( vec3 
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, // color).{.float l
	0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, //  = dot(color,vec
	0x33, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, // 3(0.176204,0.812
	0x39, 0x38, 0x35, 0x2c, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x29, 0x29, 0x3b, // 985,0.0108109));
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, // .return color * 
	0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, // ((l*0.25 + 1.0) 
	0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // / (l + 1.0));.}.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x28, 0x20, 0x76, // vec4 Additive( v
	0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // ec4 cBase, vec4 
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, // cBlend, float pe
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // rcent).{.return 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2b, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, // cBase + cBlend*p
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, // ercent;.}.vec3 S
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, // creen ( vec3 cBa
	0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, // se, vec3 cBlend)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, // .{.return 1.0 - 
	0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, // (1.0 - cBase) * 
	0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, // (1.0 - cBlend);.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x20, // }.vec4 Screen ( 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // vec4 cBase, vec4
	0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, //  cBlend).{.retur
	0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, // n 1.0 - (1.0 - c
	0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, // Base) * (1.0 - c
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, // Blend);.}.vec3 S
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // creenHDR ( vec3 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, // cBase, vec3 cBle
	0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, // nd).{.return max
	0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, // (1.0 - (1.0 - cB
	0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, // ase) * (1.0 - cB
	0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x2c, 0x30, // lend), vec3(0.,0
	0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, // .,0.));.}.vec4 S
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // creenHDR ( vec4 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, // cBase, vec4 cBle
	0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, // nd).{.return max
	0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, // (1.0 - (1.0 - cB
	0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, // ase) * (1.0 - cB
	0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, // lend), vec4(0.,0
	0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // .,0.,0.));.}.vec
	0x34, 0x20, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, // 4 Multiply ( vec
	0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // 4 cBase, vec4 cB
	0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, // lend, float perc
	0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, // ent).{.return cB
	0x61, 0x73, 0x65, 0x20, 0x2a, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, // ase * cBlend*per
	0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, // cent;.}.vec4 Ove
	0x72, 0x6c, 0x61, 0x79, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, // rlay ( vec4 cBas
	0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, // e, vec4 cBlend).
	0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, // {.vec4 cNew = st
	0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, // ep(0.5, cBase);.
	0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, // cNew = mix(cBase
	0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, // *cBlend*2.0, 1.0
	0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, // -2.0*(1.0-cBase)
	0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, // *(1.0-cBlend), c
	0x4e, 0x65, 0x77, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, // New);.return cNe
	0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, // w;.}.vec4 Overla
	0x79, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, // yHDR ( vec4 cBas
	0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, // e, vec4 cBlend).
	0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, // {.vec4 cNew = st
	0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, // ep(0.5, cBase);.
	0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x6d, 0x69, 0x78, 0x28, 0x63, // cNew = max(mix(c
	0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, // Base*cBlend*2.0,
	0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, //  1.0-2.0*(1.0-cB
	0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, // ase)*(1.0-cBlend
	0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, // ), cNew), vec4(0
	0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, // .,0.,0.,0.));.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // turn cNew;.}.vec
	0x33, 0x20, 0x63, 0x6f, 0x73, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, // 3 cos_hemisphere
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x29, // _sample( vec2 t)
	0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x68, 0x69, 0x20, 0x3d, 0x20, 0x74, // .{.float phi = t
	0x2e, 0x79, 0x20, 0x2a, 0x20, 0x28, 0x32, 0x2e, 0x30, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, // .y * (2.0*3.1415
	0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, // 9265358979323846
	0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x3b, 0x0a, 0x66, 0x6c, // 26433832795);.fl
	0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, // oat cosTheta = s
	0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, // qrt(1.0 - t.x);.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, // float sinTheta =
	0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, //  sqrt(t.x);.floa
	0x74, 0x20, 0x73, 0x70, 0x2c, 0x63, 0x70, 0x3b, 0x0a, 0x7b, 0x73, 0x70, 0x3d, 0x73, 0x69, 0x6e, // t sp,cp;.{sp=sin
	0x28, 0x70, 0x68, 0x69, 0x29, 0x3b, 0x63, 0x70, 0x3d, 0x63, 0x6f, 0x73, 0x28, 0x70, 0x68, 0x69, // (phi);cp=cos(phi
	0x29, 0x3b, 0x7d, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, // );};.return vec3
	0x28, 0x63, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, // (cp * sinTheta, 
	0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x73, 0x70, 0x20, 0x2a, 0x20, 0x73, // cosTheta, sp * s
	0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, // inTheta);.}.vec3
	0x20, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, //  rotate_to_vecto
	0x72, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, // r_upper( vec3 ve
	0x63, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x29, 0x0a, // c, vec3 normal).
	0x7b, 0x0a, 0x69, 0x66, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x3e, 0x20, // {.if(normal.y > 
	0x2d, 0x30, 0x2e, 0x39, 0x39, 0x39, 0x39, 0x39, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // -0.99999).{.floa
	0x74, 0x20, 0x68, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x28, 0x31, 0x2e, 0x30, 0x2b, 0x6e, // t h = 1.0/(1.0+n
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // ormal.y);.float 
	0x68, 0x7a, 0x20, 0x3d, 0x20, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x3b, // hz = h*normal.z;
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x3d, 0x20, 0x68, 0x7a, 0x2a, // .float hzx = hz*
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // normal.x;.return
	0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x28, //  vec3(.vec.x * (
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, // normal.y+hz*norm
	0x61, 0x6c, 0x2e, 0x7a, 0x29, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, // al.z) + vec.y * 
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, // normal.x - vec.z
	0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, //  * hzx,.vec.y * 
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, // normal.y - vec.x
	0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, //  * normal.x - ve
	0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x2c, 0x0a, // c.z * normal.z,.
	0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, // vec.y * normal.z
	0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x2b, //  - vec.x * hzx +
	0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, //  vec.z * (normal
	0x2e, 0x79, 0x2b, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x2a, 0x6e, 0x6f, // .y+h*normal.x*no
	0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, // rmal.x));.}.else
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x2d, 0x76, 0x65, 0x63, 0x3b, 0x0a, 0x7d, 0x0a, //  return -vec;.}.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, // uniform vec4 Ste
	0x72, 0x65, 0x6f, 0x5f, 0x53, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x0a, // reo_Saturation;.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, // uniform vec4 Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, // reo_MS_ZPD_YAxis
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // ;.uniform sample
	0x72, 0x32, 0x44, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, // r2D tex_stereo_f
	0x62, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, // b;.uniform sampl
	0x65, 0x72, 0x32, 0x44, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // er2D tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, // depth;.uniform v
	0x65, 0x63, 0x34, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, // ec4 w_h_height;.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, // vec3 gatherEyeCo
	0x6c, 0x6f, 0x72, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, // lor(vec2 u, bool
	0x20, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x20, //  isLeft).{.bool 
	0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // yaxis = (Stereo_
	0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x7a, 0x20, 0x21, // MS_ZPD_YAxis.z !
	0x3d, 0x20, 0x30, 0x2e, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x4d, 0x61, 0x78, // = 0.);.float Max
	0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, // Separation = (St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, // ereo_MS_ZPD_YAxi
	0x73, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, // s.x);.if (isLeft
	0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, // ).{.float lminDe
	0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, // pth = min(min(te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, // xtureLod(tex_ste
	0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, // reo_depth, u + (
	0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, // yaxis ? vec2(0.0
	0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // , 0.500 * MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // aration) : vec2(
	0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, // 0.500 * MaxSepar
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, // ation, 0.0)), 0.
	0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, // 0).x,.textureLod
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, // (tex_stereo_dept
	0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, // h, u + (yaxis ? 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, // vec2(0.0, 0.666 
	0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, // * MaxSeparation)
	0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, //  : vec2(0.666 * 
	0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, // MaxSeparation, 0
	0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, // .0)), 0.0).x),.t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // extureLod(tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, // ereo_depth, u + 
	0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, // (yaxis ? vec2(0.
	0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, // 0, MaxSeparation
	0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // ) : vec2( MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, // aration, 0.0)), 
	0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, // 0.0).x);.float l
	0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, // parallax = max(0
	0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, // .0, w_h_height.w
	0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, //  + MaxSeparation
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, //  * (1.0 - 1.0 / 
	0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, // (0.5 + lminDepth
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, //  * (1.0 / (Stere
	0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, // o_MS_ZPD_YAxis.y
	0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, // ) - 0.5))));.ret
	0x75, 0x72, 0x6e, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, // urn textureLod(t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, // ex_stereo_fb, u 
	0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // + (yaxis ? vec2(
	0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, // 0.0, -lparallax)
	0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, //  : vec2(lparalla
	0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, // x, 0.0)), 0.0).x
	0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, // yz;.}.else.{.flo
	0x61, 0x74, 0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, // at rminDepth = m
	0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, // in(min(textureLo
	0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, // d(tex_stereo_dep
	0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, // th, u - (yaxis ?
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, //  vec2(0.0, 0.500
	0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, //  * MaxSeparation
	0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, // ) : vec2(0.500 *
	0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, //  MaxSeparation, 
	0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, // 0.0)), 0.0).x,.t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // extureLod(tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, // ereo_depth, u - 
	0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, // (yaxis ? vec2(0.
	0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, // 0, 0.666 * MaxSe
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, // paration) : vec2
	0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, // (0.666 * MaxSepa
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, // ration, 0.0)), 0
	0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, // .0).x),.textureL
	0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, // od(tex_stereo_de
	0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, // pth, u - (yaxis 
	0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, // ? vec2(0.0, MaxS
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, // eparation) : vec
	0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, // 2( MaxSeparation
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, // , 0.0)), 0.0).x)
	0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, // ;.float rparalla
	0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, // x = max(0.0, w_h
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, // _height.w + MaxS
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, // eparation * (1.0
	0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, //  - 1.0 / (0.5 + 
	0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, // rminDepth * (1.0
	0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, //  / (Stereo_MS_ZP
	0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, // D_YAxis.y) - 0.5
	0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x65, 0x78, // ))));.return tex
	0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // tureLod(tex_ster
	0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, // eo_fb, u - (yaxi
	0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x72, // s ? vec2(0.0, -r
	0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, // parallax) : vec2
	0x28, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // (rparallax, 0.0)
	0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x7d, // ), 0.0).xyz;.}.}
	0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, // .void gatherLeft
	0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x28, 0x76, 0x65, 0x63, 0x32, // RightColors(vec2
	0x20, 0x75, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x63, 0x6f, //  u, out vec3 lco
	0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x6f, 0x6c, // l, out vec3 rcol
	0x29, 0x0a, 0x7b, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3d, // ).{.bool yaxis =
	0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, //  (Stereo_MS_ZPD_
	0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x7a, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x3b, 0x0a, // YAxis.z != 0.);.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // float MaxSeparat
	0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, // ion = (Stereo_MS
	0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, // _ZPD_YAxis.x);.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, // loat lminDepth =
	0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, //  min(min(texture
	0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, // Lod(tex_stereo_d
	0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, // epth, u + (yaxis
	0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, //  ? vec2(0.0, 0.5
	0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // 00 * MaxSeparati
	0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, // on) : vec2(0.500
	0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, //  * MaxSeparation
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, // , 0.0)), 0.0).x,
	0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, // .textureLod(tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, // stereo_depth, u 
	0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // + (yaxis ? vec2(
	0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, // 0.0, 0.666 * Max
	0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, // Separation) : ve
	0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, // c2(0.666 * MaxSe
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, // paration, 0.0)),
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, //  0.0).x),.textur
	0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // eLod(tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, // depth, u + (yaxi
	0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, // s ? vec2(0.0, Ma
	0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, // xSeparation) : v
	0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // ec2( MaxSeparati
	0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, // on, 0.0)), 0.0).
	0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, // x);.float lparal
	0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, // lax = max(0.0, w
	0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, // _h_height.w + Ma
	0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, // xSeparation * (1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, // .0 - 1.0 / (0.5 
	0x2b, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, // + lminDepth * (1
	0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, // .0 / (Stereo_MS_
	0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, // ZPD_YAxis.y) - 0
	0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x6c, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, // .5))));.lcol = t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // extureLod(tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, // ereo_fb, u + (ya
	0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, // xis ? vec2(0.0, 
	0x2d, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, // -lparallax) : ve
	0x63, 0x32, 0x28, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, // c2(lparallax, 0.
	0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x66, // 0)), 0.0).xyz;.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, // loat rminDepth =
	0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, //  min(min(texture
	0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, // Lod(tex_stereo_d
	0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, // epth, u - (yaxis
	0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, //  ? vec2(0.0, 0.5
	0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // 00 * MaxSeparati
	0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, // on) : vec2(0.500
	0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, //  * MaxSeparation
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, // , 0.0)), 0.0).x,
	0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, // .textureLod(tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, // stereo_depth, u 
	0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // - (yaxis ? vec2(
	0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, // 0.0, 0.666 * Max
	0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, // Separation) : ve
	0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, // c2(0.666 * MaxSe
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, // paration, 0.0)),
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, //  0.0).x),.textur
	0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // eLod(tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, // depth, u - (yaxi
	0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, // s ? vec2(0.0, Ma
	0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, // xSeparation) : v
	0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // ec2( MaxSeparati
	0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, // on, 0.0)), 0.0).
	0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, // x);.float rparal
	0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, // lax = max(0.0, w
	0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, // _h_height.w + Ma
	0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, // xSeparation * (1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, // .0 - 1.0 / (0.5 
	0x2b, 0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, // + rminDepth * (1
	0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, // .0 / (Stereo_MS_
	0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, // ZPD_YAxis.y) - 0
	0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, // .5))));.rcol = t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // extureLod(tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, // ereo_fb, u - (ya
	0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, // xis ? vec2(0.0, 
	0x2d, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, // -rparallax) : ve
	0x63, 0x32, 0x28, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, // c2(rparallax, 0.
	0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, // 0)), 0.0).xyz;.}
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, // .uniform mat4 St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, // ereo_LeftMat;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // iform mat4 Stere
	0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // o_RightMat;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // orm vec4 Stereo_
	0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, // LeftLuminance_Ga
	0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, // mma;.uniform vec
	0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // 4 Stereo_RightLu
	0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, // minance_DynDesat
	0x3b, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x65, // ;.void DynamicDe
	0x73, 0x61, 0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, 0x63, // satAnaglyph( vec
	0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, // 3 lCol, vec3 rCo
	0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x44, 0x65, 0x73, // l, out vec3 lDes
	0x61, 0x74, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // atCol, out vec3 
	0x72, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, // rDesatCol).{.flo
	0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, // at left2LeftLum 
	0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, // = dot(lCol, Ster
	0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, // eo_LeftLuminance
	0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, // _Gamma.xyz);.flo
	0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, // at left2RightLum
	0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, //  = dot(lCol, Ste
	0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, // reo_RightLuminan
	0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, // ce_DynDesat.xyz)
	0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, // ;.float right2Le
	0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, // ftLum = dot(rCol
	0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // , Stereo_LeftLum
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, // inance_Gamma.xyz
	0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, // );.float right2R
	0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, // ightLum = dot(rC
	0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, // ol, Stereo_Right
	0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, // Luminance_DynDes
	0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, // at.xyz);.float l
	0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, // eftLum = left2Le
	0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, // ftLum + left2Rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, // htLum;.float rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, // htLum = right2Le
	0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, // ftLum + right2Ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, // ghtLum;.float le
	0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // ftDesat = Stereo
	0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, // _RightLuminance_
	0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, // DynDesat.w * abs
	0x28, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, // ((left2LeftLum -
	0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, //  left2RightLum) 
	0x2f, 0x20, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, // / (leftLum + 0.0
	0x30, 0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, // 001));.float rig
	0x68, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // htDesat = Stereo
	0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, // _RightLuminance_
	0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, // DynDesat.w * abs
	0x28, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, // ((right2LeftLum 
	0x2d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, // - right2RightLum
	0x29, 0x20, 0x2f, 0x20, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, // ) / (rightLum + 
	0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, // 0.0001));.lDesat
	0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // Col = mix(lCol, 
	0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, // vec3_splat(leftL
	0x75, 0x6d, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, // um), leftDesat);
	0x0a, 0x72, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, // .rDesatCol = mix
	0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, // (rCol, vec3_spla
	0x74, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, 0x72, 0x69, 0x67, // t(rightLum), rig
	0x68, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, // htDesat);.}.vec3
	0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, //  LinearAnaglyph(
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, //  vec3 lCol, vec3
	0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, //  rCol).{.vec3 co
	0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x6c, // lor = (( (vec4(l
	0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, // Col, 1.)) * (Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x20, 0x2b, // reo_LeftMat) ) +
	0x20, 0x28, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, //  ( (vec4(rCol, 1
	0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, // .)) * (Stereo_Ri
	0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, // ghtMat) )).rgb;.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x7d, 0x0a, // return color;.}.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, // uniform vec4 Ste
	0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, // reo_DeghostGamma
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, // ;.uniform mat4 S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, // tereo_DeghostFil
	0x74, 0x65, 0x72, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, // ter;.vec3 Deghos
	0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // tAnaglyph( vec3 
	0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, // lCol, vec3 rCol)
	0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, // .{.vec3 color = 
	0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, // LinearAnaglyph(l
	0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // Col, rCol);.retu
	0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, // rn ( (pow(color,
	0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, //  Stereo_DeghostG
	0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x72, 0x67, 0x62, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x6d, 0x61, // amma.rgb)) * (ma
	0x74, 0x33, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, // t3(Stereo_Deghos
	0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, // tFilter[0].xyz, 
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, // Stereo_DeghostFi
	0x6c, 0x74, 0x65, 0x72, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, // lter[1].xyz, Ste
	0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, // reo_DeghostFilte
	0x72, 0x5b, 0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // r[2].xyz)) );.}.
	0x76, 0x6f, 0x69, 0x64, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, // void main().{.ve
	0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x3b, 0x0a, 0x67, // c3 lCol, rCol;.g
	0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, // atherLeftRightCo
	0x6c, 0x6f, 0x72, 0x73, 0x28, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, // lors(v_texcoord0
	0x2c, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x67, // , lCol, rCol);.g
	0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x76, 0x65, // l_FragColor = ve
	0x63, 0x34, 0x28, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, // c4(DeghostAnagly
	0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x2c, 0x20, // ph(lCol, rCol), 
	0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x00,                                           // 1.0);.}..
};
static const uint8_t fs_pp_stereo_anaglyph_deghost_dx11[2595] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x13, 0x53, // FSH.o.><.......S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, // tereo_MS_ZPD_YAx
	0x69, 0x73, 0x12, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x77, 0x5f, 0x68, // is...........w_h
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, // _height.........
	0x00, 0x0e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, // ..Stereo_LeftMat
	0x14, 0x00, 0x20, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x53, 0x74, 0x65, 0x72, 0x65, // .. ........Stere
	0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x00, 0x60, 0x00, 0x04, 0x00, // o_RightMat..`...
	0x00, 0x00, 0x00, 0x00, 0x13, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, // .....Stereo_Degh
	0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x12, 0x00, 0xa0, 0x00, 0x01, 0x00, 0x00, 0x00, // ostGamma........
	0x00, 0x00, 0x14, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, // ...Stereo_Deghos
	0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x14, 0x00, 0xb0, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, // tFilter.........
	0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x30, // ..tex_stereo_fb0
	0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // ..........tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x30, 0x01, 0x01, 0x00, 0x01, 0x00, // ereo_depth0.....
	0x00, 0x00, 0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // .....tex_stereo_
	0x66, 0x62, 0x30, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x74, 0x65, 0x78, // fb0..........tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x30, 0x01, 0x01, // _stereo_depth0..
	0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x09, 0x00, 0x00, 0x44, 0x58, 0x42, 0x43, 0x40, // ...........DXBC@
	0xc3, 0x36, 0x80, 0x8c, 0xfe, 0xd2, 0x70, 0xba, 0xfe, 0x91, 0x0e, 0x4d, 0xb6, 0xb3, 0xca, 0x01, // .6....p....M....
	0x00, 0x00, 0x00, 0x04, 0x09, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x84, // ...........,....
	0x00, 0x00, 0x00, 0xb8, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x4e, 0x50, 0x00, 0x00, 0x00, 0x02, // .......ISGNP....
	0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, // .......8........
	0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x44, // ...............D
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, // .......SV_POSITI
	0x4f, 0x4e, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0xab, 0xab, 0xab, 0x4f, // ON.TEXCOORD....O
	0x53, 0x47, 0x4e, 0x2c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x20, // SGN,........... 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, // .......SV_TARGET
	0x00, 0xab, 0xab, 0x53, 0x48, 0x45, 0x58, 0x44, 0x08, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x11, // ...SHEXD...P....
	0x02, 0x00, 0x00, 0x6a, 0x08, 0x00, 0x01, 0x59, 0x00, 0x00, 0x04, 0x46, 0x8e, 0x20, 0x00, 0x00, // ...j...Y...F. ..
	0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x03, 0x00, 0x60, 0x10, 0x00, 0x00, // .......Z....`...
	0x00, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x03, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x58, // ...Z....`......X
	0x18, 0x00, 0x04, 0x00, 0x70, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x55, 0x00, 0x00, 0x58, // ....p......UU..X
	0x18, 0x00, 0x04, 0x00, 0x70, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x55, 0x55, 0x00, 0x00, 0x62, // ....p......UU..b
	0x10, 0x00, 0x03, 0x32, 0x10, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x03, 0xf2, // ...2.......e....
	0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x02, 0x05, 0x00, 0x00, 0x00, 0x36, //  ......h.......6
	0x00, 0x00, 0x08, 0x52, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, // ...R........@...
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, // ...............8
	0x00, 0x00, 0x0b, 0xa2, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x80, 0x20, 0x00, 0x00, // ............. ..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........@.......
	0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x7e, 0x2a, 0x3f, 0x39, 0x00, 0x00, 0x08, 0x12, // ..?.....~*?9....
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .......*. ......
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x09, 0xf2, // ....@......7....
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, // ...............F
	0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x0b, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x07, 0xf2, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, // ...........F....
	0x00, 0x00, 0x00, 0x46, 0x14, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0xf2, // ...F............
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x00, // .......F...A....
	0x00, 0x00, 0x00, 0x46, 0x14, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, // ...F.......H....
	0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, // ...CU..".......F
	0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x16, 0x7e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, // ........~.......
	0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, // `.......@......H
	0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x42, 0x00, 0x10, 0x00, 0x01, // .......CU..B....
	0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x96, 0x7c, 0x10, 0x00, 0x01, // ............|...
	0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, // ....`.......@...
	0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x07, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2a, // ...3...".......*
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x36, // ...............6
	0x00, 0x00, 0x06, 0x22, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0a, 0x80, 0x20, 0x00, 0x00, // ..."......... ..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x08, 0x52, 0x00, 0x10, 0x00, 0x02, // .......6...R....
	0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ....@...........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x09, 0xc2, 0x00, 0x10, 0x00, 0x01, // .......7........
	0x00, 0x00, 0x00, 0x06, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x04, 0x10, 0x00, 0x02, // ................
	0x00, 0x00, 0x00, 0x56, 0x01, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x32, // ...V...........2
	0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, // ...............F
	0x10, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0xc2, 0x00, 0x10, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0xa6, 0x0e, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, // .......A........
	0x14, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, // .......H.......C
	0x55, 0x15, 0x00, 0x42, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x01, // U..B............
	0x00, 0x00, 0x00, 0x96, 0x7c, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, // ....|.......`...
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, // ....@......H....
	0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x82, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, // ...CU..........F
	0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x96, 0x73, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, // ........s.......
	0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, // `.......@......3
	0x00, 0x00, 0x07, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x01, // ...".......:....
	0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x0b, 0x82, // ................
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, // ........@.....?.
	0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x1a, 0x80, 0x20, 0x00, 0x00, // ..?...?...?.. ..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x82, 0x00, 0x10, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, // ...:........@...
	0x00, 0x00, 0xbf, 0x32, 0x00, 0x00, 0x09, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, // ...2..."........
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, // .......:........
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x0e, 0x00, 0x00, 0x0a, 0x22, 0x00, 0x10, 0x00, 0x01, // @.....?...."....
	0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, // ....@.....?...?.
	0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, // ..?...?.........
	0x00, 0x00, 0x08, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x80, 0x41, // ..."...........A
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x32, // ........@.....?2
	0x00, 0x00, 0x0b, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, 0x80, 0x20, 0x00, 0x00, // ..."......... ..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3a, // ...............:
	0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x07, 0x12, // . .........4....
	0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, // ................
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x06, 0x82, 0x00, 0x10, 0x00, 0x02, // @......6........
	0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x36, // .......A.......6
	0x00, 0x00, 0x08, 0x62, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, // ...b........@...
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, // ...............7
	0x00, 0x00, 0x09, 0x32, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x06, 0x00, 0x10, 0x00, 0x01, // ...2............
	0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x03, // ...........F....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x32, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, // .......2.......F
	0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x10, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x48, // .......F.......H
	0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x72, 0x00, 0x10, 0x00, 0x02, // .......CU..r....
	0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, 0x00, // ...F.......F~...
	0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, // ....`.......@...
	0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x82, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, // ...6............
	0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x11, 0x00, 0x00, 0x08, 0x12, 0x00, 0x10, 0x00, 0x04, // @.....?.........
	0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, // ...F.......F. ..
	0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x08, 0x22, 0x00, 0x10, 0x00, 0x04, // ..........."....
	0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, // ...F.......F. ..
	0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x08, 0x42, 0x00, 0x10, 0x00, 0x04, // ...........B....
	0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, // ...F.......F. ..
	0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, // .......H.......C
	0x55, 0x15, 0x00, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x00, // U..........F....
	0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, // ...F~.......`...
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, // ....@......H....
	0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x22, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe6, // ...CU.."........
	0x0a, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x7e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, // ........~.......
	0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, // `.......@......3
	0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x07, 0x12, // ...........3....
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, // .......*........
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x09, 0x12, 0x00, 0x10, 0x00, 0x00, // .......2........
	0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x01, // ...........:....
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x0e, 0x00, 0x00, 0x0a, 0x12, // ....@.....?.....
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, // ........@.....?.
	0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x0a, 0x00, 0x10, 0x00, 0x00, // ..?...?...?.....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, // ................
	0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, // ...A........@...
	0x00, 0x80, 0x3f, 0x32, 0x00, 0x00, 0x0b, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, // ..?2............
	0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, // . ..............
	0x00, 0x00, 0x00, 0x3a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x34, // ...:. .........4
	0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x06, 0x82, // ....@......6....
	0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x00, // ...........A....
	0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x22, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, // ...6..."........
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x09, 0x32, 0x00, 0x10, 0x00, 0x00, // @......7...2....
	0x00, 0x00, 0x00, 0x06, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x03, // ................
	0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x32, // ...F...........2
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x00, // .......F...A....
	0x00, 0x00, 0x00, 0x46, 0x10, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, // ...F.......H....
	0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, // ...CU..r.......F
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .......F~.......
	0x60, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, // `.......@......6
	0x00, 0x00, 0x05, 0x82, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, // ............@...
	0x00, 0x80, 0x3f, 0x11, 0x00, 0x00, 0x08, 0x12, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, // ..?............F
	0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, // .......F. ......
	0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x08, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, // .......".......F
	0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, // .......F. ......
	0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x08, 0x42, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, // .......B.......F
	0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, // .......F. ......
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, // .......r.......F
	0x02, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x2f, // .......F......./
	0x00, 0x00, 0x05, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, // ...r.......F....
	0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x08, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, // ...8...r.......F
	0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x82, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, // .......F. ......
	0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x05, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, // .......r.......F
	0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x08, 0x12, 0x20, 0x10, 0x00, 0x00, // ............ ...
	0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x82, 0x20, 0x00, 0x00, // ...F.......F. ..
	0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x08, 0x22, 0x20, 0x10, 0x00, 0x00, // ..........." ...
	0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x82, 0x20, 0x00, 0x00, // ...F.......F. ..
	0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x08, 0x42, 0x20, 0x10, 0x00, 0x00, // ...........B ...
	0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x82, 0x20, 0x00, 0x00, // ...F.......F. ..
	0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x82, 0x20, 0x10, 0x00, 0x00, // .......6.... ...
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x3e, 0x00, 0x00, 0x01, 0x00, // ....@.....?>....
	0x00, 0xf0, 0x00,                                                                               // ...
};
static const uint8_t fs_pp_stereo_anaglyph_deghost_spv[5252] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x13, 0x53, // FSH.o.><.......S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, // tereo_MS_ZPD_YAx
	0x69, 0x73, 0x12, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x77, 0x5f, 0x68, // is...........w_h
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x01, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, // _height.........
	0x00, 0x0e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, // ..Stereo_LeftMat
	0x14, 0x01, 0x20, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x53, 0x74, 0x65, 0x72, 0x65, // .. ........Stere
	0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x01, 0x60, 0x00, 0x04, 0x00, // o_RightMat..`...
	0x00, 0x00, 0x00, 0x00, 0x14, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, // .....Stereo_Degh
	0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x14, 0x01, 0xb0, 0x00, 0x04, 0x00, 0x00, // ostFilter.......
	0x00, 0x00, 0x00, 0x13, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, // ....Stereo_Degho
	0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x12, 0x01, 0xa0, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, // stGamma.........
	0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x30, // ..tex_stereo_fb0
	0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x02, 0x22, 0x00, 0x10, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // ......."..tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x30, 0x00, 0x03, 0x00, 0x00, 0x00, // ereo_depth0.....
	0x00, 0x02, 0x22, 0x00, 0x98, 0x13, 0x00, 0x00, 0x03, 0x02, 0x23, 0x07, 0x00, 0x00, 0x01, 0x00, // ..".......#.....
	0x0b, 0x00, 0x08, 0x00, 0xe4, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x02, 0x00, // ................
	0x01, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, 0x4c, 0x53, 0x4c, // ............GLSL
	0x2e, 0x73, 0x74, 0x64, 0x2e, 0x34, 0x35, 0x30, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x03, 0x00, // .std.450........
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x07, 0x00, 0x04, 0x00, 0x00, 0x00, // ................
	0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x70, 0x01, 0x00, 0x00, // ....main....p...
	0x7b, 0x01, 0x00, 0x00, 0x10, 0x00, 0x03, 0x00, 0x04, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, // {...............
	0x03, 0x00, 0x03, 0x00, 0x05, 0x00, 0x00, 0x00, 0xf4, 0x01, 0x00, 0x00, 0x05, 0x00, 0x04, 0x00, // ................
	0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x08, 0x00, // ....main........
	0x34, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, // 4...tex_stereo_f
	0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x08, 0x00, // bSampler........
	0x37, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, // 7...tex_stereo_f
	0x62, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x08, 0x00, // bTexture........
	0x3b, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, // ;...tex_stereo_d
	0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x00, 0x05, 0x00, 0x08, 0x00, // epthSampler.....
	0x3d, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, // =...tex_stereo_d
	0x65, 0x70, 0x74, 0x68, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x00, 0x05, 0x00, 0x06, 0x00, // epthTexture.....
	0x58, 0x00, 0x00, 0x00, 0x55, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, // X...UniformBlock
	0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x08, 0x00, 0x58, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........X.......
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, // Stereo_MS_ZPD_YA
	0x78, 0x69, 0x73, 0x00, 0x06, 0x00, 0x06, 0x00, 0x58, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // xis.....X.......
	0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x00, 0x00, 0x06, 0x00, 0x07, 0x00, // w_h_height......
	0x58, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, // X.......Stereo_L
	0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x00, 0x00, 0x06, 0x00, 0x07, 0x00, 0x58, 0x00, 0x00, 0x00, // eftMat......X...
	0x03, 0x00, 0x00, 0x00, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, // ....Stereo_Right
	0x4d, 0x61, 0x74, 0x00, 0x06, 0x00, 0x08, 0x00, 0x58, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, // Mat.....X.......
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, // Stereo_DeghostGa
	0x6d, 0x6d, 0x61, 0x00, 0x06, 0x00, 0x09, 0x00, 0x58, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, // mma.....X.......
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, // Stereo_DeghostFi
	0x6c, 0x74, 0x65, 0x72, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x03, 0x00, 0x5a, 0x00, 0x00, 0x00, // lter........Z...
	0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x05, 0x00, 0x70, 0x01, 0x00, 0x00, 0x76, 0x5f, 0x74, 0x65, // ........p...v_te
	0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x00, 0x05, 0x00, 0x06, 0x00, 0x7b, 0x01, 0x00, 0x00, // xcoord0.....{...
	0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x00, 0x00, // bgfx_FragData0..
	0x47, 0x00, 0x04, 0x00, 0x34, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // G...4...".......
	0x47, 0x00, 0x04, 0x00, 0x34, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, // G...4...!.......
	0x47, 0x00, 0x04, 0x00, 0x37, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // G...7...".......
	0x47, 0x00, 0x04, 0x00, 0x37, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // G...7...!.......
	0x47, 0x00, 0x04, 0x00, 0x3b, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // G...;...".......
	0x47, 0x00, 0x04, 0x00, 0x3b, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, // G...;...!.......
	0x47, 0x00, 0x04, 0x00, 0x3d, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // G...=...".......
	0x47, 0x00, 0x04, 0x00, 0x3d, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, // G...=...!.......
	0x48, 0x00, 0x05, 0x00, 0x58, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, // H...X.......#...
	0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0x58, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // ....H...X.......
	0x23, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x48, 0x00, 0x04, 0x00, 0x58, 0x00, 0x00, 0x00, // #.......H...X...
	0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0x58, 0x00, 0x00, 0x00, // ........H...X...
	0x02, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, // ....#... ...H...
	0x58, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, // X...............
	0x48, 0x00, 0x04, 0x00, 0x58, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, // H...X...........
	0x48, 0x00, 0x05, 0x00, 0x58, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, // H...X.......#...
	0x60, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0x58, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, // `...H...X.......
	0x07, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0x58, 0x00, 0x00, 0x00, // ........H...X...
	0x04, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x48, 0x00, 0x04, 0x00, // ....#.......H...
	0x58, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, // X...........H...
	0x58, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0xb0, 0x00, 0x00, 0x00, // X.......#.......
	0x48, 0x00, 0x05, 0x00, 0x58, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, // H...X...........
	0x10, 0x00, 0x00, 0x00, 0x47, 0x00, 0x03, 0x00, 0x58, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // ....G...X.......
	0x47, 0x00, 0x04, 0x00, 0x5a, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // G...Z...".......
	0x47, 0x00, 0x04, 0x00, 0x5a, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // G...Z...!.......
	0x47, 0x00, 0x04, 0x00, 0x70, 0x01, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // G...p...........
	0x47, 0x00, 0x04, 0x00, 0x7b, 0x01, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // G...{...........
	0x13, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x21, 0x00, 0x03, 0x00, 0x03, 0x00, 0x00, 0x00, // ........!.......
	0x02, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x02, 0x00, 0x06, 0x00, 0x00, 0x00, 0x16, 0x00, 0x03, 0x00, // ................
	0x07, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x19, 0x00, 0x09, 0x00, 0x08, 0x00, 0x00, 0x00, // .... ...........
	0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00, // ................
	0x0b, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00, // ................
	0x0e, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00, // ................
	0x19, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, // ............ ...
	0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, // 3...........;...
	0x33, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, // 3...4....... ...
	0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, // 6...........;...
	0x36, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, // 6...7.......;...
	0x33, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, // 3...;.......;...
	0x36, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x00, 0x04, 0x00, // 6...=...........
	0x40, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, // @... .......+...
	0x40, 0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, // @...A.......+...
	0x40, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x03, 0x00, // @...E...........
	0x49, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x14, 0x00, 0x02, 0x00, 0x54, 0x00, 0x00, 0x00, // I...........T...
	0x18, 0x00, 0x04, 0x00, 0x57, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, // ....W...........
	0x1e, 0x00, 0x08, 0x00, 0x58, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, // ....X...........
	0x57, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, // W...W.......W...
	0x20, 0x00, 0x04, 0x00, 0x59, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x58, 0x00, 0x00, 0x00, //  ...Y.......X...
	0x3b, 0x00, 0x04, 0x00, 0x59, 0x00, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // ;...Y...Z.......
	0x15, 0x00, 0x04, 0x00, 0x5b, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ....[... .......
	0x2b, 0x00, 0x04, 0x00, 0x5b, 0x00, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // +...[...........
	0x20, 0x00, 0x04, 0x00, 0x5d, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, //  ...]...........
	0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // +.......`.......
	0x2b, 0x00, 0x04, 0x00, 0x5b, 0x00, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // +...[...c.......
	0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, // +.......i......?
	0x17, 0x00, 0x04, 0x00, 0x70, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // ....p...T.......
	0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0xfa, 0x7e, 0x2a, 0x3f, // +.......|....~*?
	0x2b, 0x00, 0x04, 0x00, 0x5b, 0x00, 0x00, 0x00, 0x9e, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, // +...[...........
	0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0xa2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, // +..............?
	0x2b, 0x00, 0x04, 0x00, 0x5b, 0x00, 0x00, 0x00, 0xa4, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // +...[...........
	0x2b, 0x00, 0x04, 0x00, 0x40, 0x00, 0x00, 0x00, 0x15, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // +...@...........
	0x20, 0x00, 0x04, 0x00, 0x16, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, //  ...........W...
	0x2b, 0x00, 0x04, 0x00, 0x40, 0x00, 0x00, 0x00, 0x1f, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, // +...@...........
	0x2b, 0x00, 0x04, 0x00, 0x40, 0x00, 0x00, 0x00, 0x33, 0x01, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, // +...@...3.......
	0x20, 0x00, 0x04, 0x00, 0x34, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, //  ...4...........
	0x18, 0x00, 0x04, 0x00, 0x3e, 0x01, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, // ....>...........
	0x2b, 0x00, 0x04, 0x00, 0x40, 0x00, 0x00, 0x00, 0x4d, 0x01, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, // +...@...M.......
	0x20, 0x00, 0x04, 0x00, 0x6f, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, //  ...o...........
	0x3b, 0x00, 0x04, 0x00, 0x6f, 0x01, 0x00, 0x00, 0x70, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // ;...o...p.......
	0x20, 0x00, 0x04, 0x00, 0x7a, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, //  ...z...........
	0x3b, 0x00, 0x04, 0x00, 0x7a, 0x01, 0x00, 0x00, 0x7b, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, // ;...z...{.......
	0x36, 0x00, 0x05, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 6...............
	0x03, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x05, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, // ............=...
	0x06, 0x00, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, // ....5...4...=...
	0x08, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, // ....8...7...=...
	0x06, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, // ....<...;...=...
	0x08, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, // ....>...=...=...
	0x0b, 0x00, 0x00, 0x00, 0x71, 0x01, 0x00, 0x00, 0x70, 0x01, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, // ....q...p...A...
	0x5d, 0x00, 0x00, 0x00, 0xca, 0x01, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x00, // ].......Z...E...
	0x5c, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0xcb, 0x01, 0x00, 0x00, // ....=...........
	0xca, 0x01, 0x00, 0x00, 0xb7, 0x00, 0x05, 0x00, 0x54, 0x00, 0x00, 0x00, 0xcc, 0x01, 0x00, 0x00, // ........T.......
	0xcb, 0x01, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x5d, 0x00, 0x00, 0x00, // ....`...A...]...
	0xcd, 0x01, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, // ....Z...E...c...
	0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0xce, 0x01, 0x00, 0x00, 0xcd, 0x01, 0x00, 0x00, // =...............
	0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xd2, 0x01, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00, // ............i...
	0xce, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xd3, 0x01, 0x00, 0x00, // ....P...........
	0x60, 0x00, 0x00, 0x00, 0xd2, 0x01, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // `...............
	0xd5, 0x01, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00, 0xce, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, // ....i.......P...
	0x0b, 0x00, 0x00, 0x00, 0xd6, 0x01, 0x00, 0x00, 0xd5, 0x01, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, // ............`...
	0x50, 0x00, 0x05, 0x00, 0x70, 0x00, 0x00, 0x00, 0xd7, 0x01, 0x00, 0x00, 0xcc, 0x01, 0x00, 0x00, // P...p...........
	0xcc, 0x01, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xd8, 0x01, 0x00, 0x00, // ................
	0xd7, 0x01, 0x00, 0x00, 0xd3, 0x01, 0x00, 0x00, 0xd6, 0x01, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, // ................
	0x0b, 0x00, 0x00, 0x00, 0xd9, 0x01, 0x00, 0x00, 0x71, 0x01, 0x00, 0x00, 0xd8, 0x01, 0x00, 0x00, // ........q.......
	0x56, 0x00, 0x05, 0x00, 0x49, 0x00, 0x00, 0x00, 0x61, 0x02, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, // V...I...a...>...
	0x3c, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x64, 0x02, 0x00, 0x00, // <...X.......d...
	0x61, 0x02, 0x00, 0x00, 0xd9, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, // a...........`...
	0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xdc, 0x01, 0x00, 0x00, 0x64, 0x02, 0x00, 0x00, // Q...........d...
	0x00, 0x00, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xe0, 0x01, 0x00, 0x00, // ................
	0x7c, 0x00, 0x00, 0x00, 0xce, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, // |.......P.......
	0xe1, 0x01, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0xe0, 0x01, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, // ....`...........
	0x07, 0x00, 0x00, 0x00, 0xe3, 0x01, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0xce, 0x01, 0x00, 0x00, // ........|.......
	0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xe4, 0x01, 0x00, 0x00, 0xe3, 0x01, 0x00, 0x00, // P...............
	0x60, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x70, 0x00, 0x00, 0x00, 0xe5, 0x01, 0x00, 0x00, // `...P...p.......
	0xcc, 0x01, 0x00, 0x00, 0xcc, 0x01, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, // ................
	0xe6, 0x01, 0x00, 0x00, 0xe5, 0x01, 0x00, 0x00, 0xe1, 0x01, 0x00, 0x00, 0xe4, 0x01, 0x00, 0x00, // ................
	0x81, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xe7, 0x01, 0x00, 0x00, 0x71, 0x01, 0x00, 0x00, // ............q...
	0xe6, 0x01, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, 0x49, 0x00, 0x00, 0x00, 0x6b, 0x02, 0x00, 0x00, // ....V...I...k...
	0x3e, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, // >...<...X.......
	0x6e, 0x02, 0x00, 0x00, 0x6b, 0x02, 0x00, 0x00, 0xe7, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // n...k...........
	0x60, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xea, 0x01, 0x00, 0x00, // `...Q...........
	0x6e, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, // n...............
	0xeb, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0xdc, 0x01, 0x00, 0x00, // ........%.......
	0xea, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xef, 0x01, 0x00, 0x00, // ....P...........
	0x60, 0x00, 0x00, 0x00, 0xce, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, // `.......P.......
	0xf1, 0x01, 0x00, 0x00, 0xce, 0x01, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, // ........`...P...
	0x70, 0x00, 0x00, 0x00, 0xf2, 0x01, 0x00, 0x00, 0xcc, 0x01, 0x00, 0x00, 0xcc, 0x01, 0x00, 0x00, // p...............
	0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xf3, 0x01, 0x00, 0x00, 0xf2, 0x01, 0x00, 0x00, // ................
	0xef, 0x01, 0x00, 0x00, 0xf1, 0x01, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, // ................
	0xf4, 0x01, 0x00, 0x00, 0x71, 0x01, 0x00, 0x00, 0xf3, 0x01, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, // ....q.......V...
	0x49, 0x00, 0x00, 0x00, 0x75, 0x02, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, // I...u...>...<...
	0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x78, 0x02, 0x00, 0x00, 0x75, 0x02, 0x00, 0x00, // X.......x...u...
	0xf4, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, // ........`...Q...
	0x07, 0x00, 0x00, 0x00, 0xf7, 0x01, 0x00, 0x00, 0x78, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........x.......
	0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0xf8, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // ................
	0x25, 0x00, 0x00, 0x00, 0xeb, 0x01, 0x00, 0x00, 0xf7, 0x01, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, // %...........A...
	0x5d, 0x00, 0x00, 0x00, 0xf9, 0x01, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00, // ].......Z...A...
	0x9e, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0xfa, 0x01, 0x00, 0x00, // ....=...........
	0xf9, 0x01, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x5d, 0x00, 0x00, 0x00, 0xfd, 0x01, 0x00, 0x00, // ....A...].......
	0x5a, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x00, 0xa4, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, // Z...E.......=...
	0x07, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x00, 0x00, 0xfd, 0x01, 0x00, 0x00, 0x88, 0x00, 0x05, 0x00, // ................
	0x07, 0x00, 0x00, 0x00, 0xff, 0x01, 0x00, 0x00, 0xa2, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x00, 0x00, // ................
	0x83, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0xff, 0x01, 0x00, 0x00, // ................
	0x69, 0x00, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00, // i...............
	0xf8, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // ................
	0x02, 0x02, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00, 0x88, 0x00, 0x05, 0x00, // ....i...........
	0x07, 0x00, 0x00, 0x00, 0x03, 0x02, 0x00, 0x00, 0xa2, 0x00, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, // ................
	0x83, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x04, 0x02, 0x00, 0x00, 0xa2, 0x00, 0x00, 0x00, // ................
	0x03, 0x02, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x05, 0x02, 0x00, 0x00, // ................
	0xce, 0x01, 0x00, 0x00, 0x04, 0x02, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // ................
	0x06, 0x02, 0x00, 0x00, 0xfa, 0x01, 0x00, 0x00, 0x05, 0x02, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, // ................
	0x07, 0x00, 0x00, 0x00, 0x07, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, // ............(...
	0x60, 0x00, 0x00, 0x00, 0x06, 0x02, 0x00, 0x00, 0x7f, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, // `...............
	0x0b, 0x02, 0x00, 0x00, 0x07, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, // ........P.......
	0x0c, 0x02, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x0b, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, // ....`.......P...
	0x0b, 0x00, 0x00, 0x00, 0x0e, 0x02, 0x00, 0x00, 0x07, 0x02, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, // ............`...
	0x50, 0x00, 0x05, 0x00, 0x70, 0x00, 0x00, 0x00, 0x0f, 0x02, 0x00, 0x00, 0xcc, 0x01, 0x00, 0x00, // P...p...........
	0xcc, 0x01, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x10, 0x02, 0x00, 0x00, // ................
	0x0f, 0x02, 0x00, 0x00, 0x0c, 0x02, 0x00, 0x00, 0x0e, 0x02, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, // ................
	0x0b, 0x00, 0x00, 0x00, 0x11, 0x02, 0x00, 0x00, 0x71, 0x01, 0x00, 0x00, 0x10, 0x02, 0x00, 0x00, // ........q.......
	0x56, 0x00, 0x05, 0x00, 0x49, 0x00, 0x00, 0x00, 0x7f, 0x02, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, // V...I.......8...
	0x35, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x82, 0x02, 0x00, 0x00, // 5...X...........
	0x7f, 0x02, 0x00, 0x00, 0x11, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, // ............`...
	0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x18, 0x02, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00, // ............i...
	0xce, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x19, 0x02, 0x00, 0x00, // ....P...........
	0x60, 0x00, 0x00, 0x00, 0x18, 0x02, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // `...............
	0x1b, 0x02, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00, 0xce, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, // ....i.......P...
	0x0b, 0x00, 0x00, 0x00, 0x1c, 0x02, 0x00, 0x00, 0x1b, 0x02, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, // ............`...
	0x50, 0x00, 0x05, 0x00, 0x70, 0x00, 0x00, 0x00, 0x1d, 0x02, 0x00, 0x00, 0xcc, 0x01, 0x00, 0x00, // P...p...........
	0xcc, 0x01, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x1e, 0x02, 0x00, 0x00, // ................
	0x1d, 0x02, 0x00, 0x00, 0x19, 0x02, 0x00, 0x00, 0x1c, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, // ................
	0x0b, 0x00, 0x00, 0x00, 0x1f, 0x02, 0x00, 0x00, 0x71, 0x01, 0x00, 0x00, 0x1e, 0x02, 0x00, 0x00, // ........q.......
	0x56, 0x00, 0x05, 0x00, 0x49, 0x00, 0x00, 0x00, 0x89, 0x02, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, // V...I.......>...
	0x3c, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x8c, 0x02, 0x00, 0x00, // <...X...........
	0x89, 0x02, 0x00, 0x00, 0x1f, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, // ............`...
	0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x22, 0x02, 0x00, 0x00, 0x8c, 0x02, 0x00, 0x00, // Q.......".......
	0x00, 0x00, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x26, 0x02, 0x00, 0x00, // ............&...
	0x7c, 0x00, 0x00, 0x00, 0xce, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, // |.......P.......
	0x27, 0x02, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x26, 0x02, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, // '...`...&.......
	0x07, 0x00, 0x00, 0x00, 0x29, 0x02, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0xce, 0x01, 0x00, 0x00, // ....)...|.......
	0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x2a, 0x02, 0x00, 0x00, 0x29, 0x02, 0x00, 0x00, // P.......*...)...
	0x60, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x70, 0x00, 0x00, 0x00, 0x2b, 0x02, 0x00, 0x00, // `...P...p...+...
	0xcc, 0x01, 0x00, 0x00, 0xcc, 0x01, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, // ................
	0x2c, 0x02, 0x00, 0x00, 0x2b, 0x02, 0x00, 0x00, 0x27, 0x02, 0x00, 0x00, 0x2a, 0x02, 0x00, 0x00, // ,...+...'...*...
	0x83, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x2d, 0x02, 0x00, 0x00, 0x71, 0x01, 0x00, 0x00, // ........-...q...
	0x2c, 0x02, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, 0x49, 0x00, 0x00, 0x00, 0x93, 0x02, 0x00, 0x00, // ,...V...I.......
	0x3e, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, // >...<...X.......
	0x96, 0x02, 0x00, 0x00, 0x93, 0x02, 0x00, 0x00, 0x2d, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // ........-.......
	0x60, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x30, 0x02, 0x00, 0x00, // `...Q.......0...
	0x96, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, // ................
	0x31, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x22, 0x02, 0x00, 0x00, // 1.......%..."...
	0x30, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x35, 0x02, 0x00, 0x00, // 0...P.......5...
	0x60, 0x00, 0x00, 0x00, 0xce, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, // `.......P.......
	0x37, 0x02, 0x00, 0x00, 0xce, 0x01, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, // 7.......`...P...
	0x70, 0x00, 0x00, 0x00, 0x38, 0x02, 0x00, 0x00, 0xcc, 0x01, 0x00, 0x00, 0xcc, 0x01, 0x00, 0x00, // p...8...........
	0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x39, 0x02, 0x00, 0x00, 0x38, 0x02, 0x00, 0x00, // ........9...8...
	0x35, 0x02, 0x00, 0x00, 0x37, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, // 5...7...........
	0x3a, 0x02, 0x00, 0x00, 0x71, 0x01, 0x00, 0x00, 0x39, 0x02, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, // :...q...9...V...
	0x49, 0x00, 0x00, 0x00, 0x9d, 0x02, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, // I.......>...<...
	0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xa0, 0x02, 0x00, 0x00, 0x9d, 0x02, 0x00, 0x00, // X...............
	0x3a, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, // :.......`...Q...
	0x07, 0x00, 0x00, 0x00, 0x3d, 0x02, 0x00, 0x00, 0xa0, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ....=...........
	0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x3e, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // ........>.......
	0x25, 0x00, 0x00, 0x00, 0x31, 0x02, 0x00, 0x00, 0x3d, 0x02, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, // %...1...=...A...
	0x5d, 0x00, 0x00, 0x00, 0x3f, 0x02, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00, // ]...?...Z...A...
	0x9e, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00, // ....=.......@...
	0x3f, 0x02, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x5d, 0x00, 0x00, 0x00, 0x43, 0x02, 0x00, 0x00, // ?...A...]...C...
	0x5a, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x00, 0xa4, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, // Z...E.......=...
	0x07, 0x00, 0x00, 0x00, 0x44, 0x02, 0x00, 0x00, 0x43, 0x02, 0x00, 0x00, 0x88, 0x00, 0x05, 0x00, // ....D...C.......
	0x07, 0x00, 0x00, 0x00, 0x45, 0x02, 0x00, 0x00, 0xa2, 0x00, 0x00, 0x00, 0x44, 0x02, 0x00, 0x00, // ....E.......D...
	0x83, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x46, 0x02, 0x00, 0x00, 0x45, 0x02, 0x00, 0x00, // ........F...E...
	0x69, 0x00, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x47, 0x02, 0x00, 0x00, // i...........G...
	0x3e, 0x02, 0x00, 0x00, 0x46, 0x02, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // >...F...........
	0x48, 0x02, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00, 0x47, 0x02, 0x00, 0x00, 0x88, 0x00, 0x05, 0x00, // H...i...G.......
	0x07, 0x00, 0x00, 0x00, 0x49, 0x02, 0x00, 0x00, 0xa2, 0x00, 0x00, 0x00, 0x48, 0x02, 0x00, 0x00, // ....I.......H...
	0x83, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x4a, 0x02, 0x00, 0x00, 0xa2, 0x00, 0x00, 0x00, // ........J.......
	0x49, 0x02, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x4b, 0x02, 0x00, 0x00, // I...........K...
	0xce, 0x01, 0x00, 0x00, 0x4a, 0x02, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // ....J...........
	0x4c, 0x02, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0x4b, 0x02, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, // L...@...K.......
	0x07, 0x00, 0x00, 0x00, 0x4d, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, // ....M.......(...
	0x60, 0x00, 0x00, 0x00, 0x4c, 0x02, 0x00, 0x00, 0x7f, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, // `...L...........
	0x51, 0x02, 0x00, 0x00, 0x4d, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, // Q...M...P.......
	0x52, 0x02, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x51, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, // R...`...Q...P...
	0x0b, 0x00, 0x00, 0x00, 0x54, 0x02, 0x00, 0x00, 0x4d, 0x02, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, // ....T...M...`...
	0x50, 0x00, 0x05, 0x00, 0x70, 0x00, 0x00, 0x00, 0x55, 0x02, 0x00, 0x00, 0xcc, 0x01, 0x00, 0x00, // P...p...U.......
	0xcc, 0x01, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x56, 0x02, 0x00, 0x00, // ............V...
	0x55, 0x02, 0x00, 0x00, 0x52, 0x02, 0x00, 0x00, 0x54, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, // U...R...T.......
	0x0b, 0x00, 0x00, 0x00, 0x57, 0x02, 0x00, 0x00, 0x71, 0x01, 0x00, 0x00, 0x56, 0x02, 0x00, 0x00, // ....W...q...V...
	0x56, 0x00, 0x05, 0x00, 0x49, 0x00, 0x00, 0x00, 0xa7, 0x02, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, // V...I.......8...
	0x35, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xaa, 0x02, 0x00, 0x00, // 5...X...........
	0xa7, 0x02, 0x00, 0x00, 0x57, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, // ....W.......`...
	0x41, 0x00, 0x05, 0x00, 0x16, 0x01, 0x00, 0x00, 0xd2, 0x02, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x00, // A...........Z...
	0x15, 0x01, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x57, 0x00, 0x00, 0x00, 0xd3, 0x02, 0x00, 0x00, // ....=...W.......
	0xd2, 0x02, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xd5, 0x02, 0x00, 0x00, // ....Q...........
	0x82, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // ........Q.......
	0xd6, 0x02, 0x00, 0x00, 0x82, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, // ............Q...
	0x07, 0x00, 0x00, 0x00, 0xd7, 0x02, 0x00, 0x00, 0x82, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // ................
	0x50, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xd8, 0x02, 0x00, 0x00, 0xd5, 0x02, 0x00, 0x00, // P...............
	0xd6, 0x02, 0x00, 0x00, 0xd7, 0x02, 0x00, 0x00, 0xa2, 0x00, 0x00, 0x00, 0x91, 0x00, 0x05, 0x00, // ................
	0x0e, 0x00, 0x00, 0x00, 0xd9, 0x02, 0x00, 0x00, 0xd3, 0x02, 0x00, 0x00, 0xd8, 0x02, 0x00, 0x00, // ................
	0x41, 0x00, 0x05, 0x00, 0x16, 0x01, 0x00, 0x00, 0xda, 0x02, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x00, // A...........Z...
	0x1f, 0x01, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x57, 0x00, 0x00, 0x00, 0xdb, 0x02, 0x00, 0x00, // ....=...W.......
	0xda, 0x02, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xdd, 0x02, 0x00, 0x00, // ....Q...........
	0xaa, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // ........Q.......
	0xde, 0x02, 0x00, 0x00, 0xaa, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, // ............Q...
	0x07, 0x00, 0x00, 0x00, 0xdf, 0x02, 0x00, 0x00, 0xaa, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // ................
	0x50, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xe0, 0x02, 0x00, 0x00, 0xdd, 0x02, 0x00, 0x00, // P...............
	0xde, 0x02, 0x00, 0x00, 0xdf, 0x02, 0x00, 0x00, 0xa2, 0x00, 0x00, 0x00, 0x91, 0x00, 0x05, 0x00, // ................
	0x0e, 0x00, 0x00, 0x00, 0xe1, 0x02, 0x00, 0x00, 0xdb, 0x02, 0x00, 0x00, 0xe0, 0x02, 0x00, 0x00, // ................
	0x81, 0x00, 0x05, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xe2, 0x02, 0x00, 0x00, 0xd9, 0x02, 0x00, 0x00, // ................
	0xe1, 0x02, 0x00, 0x00, 0x4f, 0x00, 0x08, 0x00, 0x19, 0x00, 0x00, 0x00, 0xe3, 0x02, 0x00, 0x00, // ....O...........
	0xe2, 0x02, 0x00, 0x00, 0xe2, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // ................
	0x02, 0x00, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x34, 0x01, 0x00, 0x00, 0xb3, 0x02, 0x00, 0x00, // ....A...4.......
	0x5a, 0x00, 0x00, 0x00, 0x33, 0x01, 0x00, 0x00, 0x45, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, // Z...3...E...=...
	0x0e, 0x00, 0x00, 0x00, 0xb4, 0x02, 0x00, 0x00, 0xb3, 0x02, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, // ............A...
	0x34, 0x01, 0x00, 0x00, 0xb6, 0x02, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x00, 0x33, 0x01, 0x00, 0x00, // 4.......Z...3...
	0x41, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xb7, 0x02, 0x00, 0x00, // A...=...........
	0xb6, 0x02, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x34, 0x01, 0x00, 0x00, 0xb9, 0x02, 0x00, 0x00, // ....A...4.......
	0x5a, 0x00, 0x00, 0x00, 0x33, 0x01, 0x00, 0x00, 0x15, 0x01, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, // Z...3.......=...
	0x0e, 0x00, 0x00, 0x00, 0xba, 0x02, 0x00, 0x00, 0xb9, 0x02, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, // ............Q...
	0x07, 0x00, 0x00, 0x00, 0xbc, 0x02, 0x00, 0x00, 0xb4, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xbd, 0x02, 0x00, 0x00, 0xb4, 0x02, 0x00, 0x00, // Q...............
	0x01, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x00, 0x00, // ....Q...........
	0xb4, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // ........Q.......
	0xbf, 0x02, 0x00, 0x00, 0xb7, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, // ............Q...
	0x07, 0x00, 0x00, 0x00, 0xc0, 0x02, 0x00, 0x00, 0xb7, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // ................
	0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xc1, 0x02, 0x00, 0x00, 0xb7, 0x02, 0x00, 0x00, // Q...............
	0x02, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xc2, 0x02, 0x00, 0x00, // ....Q...........
	0xba, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // ........Q.......
	0xc3, 0x02, 0x00, 0x00, 0xba, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, // ............Q...
	0x07, 0x00, 0x00, 0x00, 0xc4, 0x02, 0x00, 0x00, 0xba, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // ................
	0x50, 0x00, 0x06, 0x00, 0x19, 0x00, 0x00, 0x00, 0xc5, 0x02, 0x00, 0x00, 0xbc, 0x02, 0x00, 0x00, // P...............
	0xbd, 0x02, 0x00, 0x00, 0xbe, 0x02, 0x00, 0x00, 0x50, 0x00, 0x06, 0x00, 0x19, 0x00, 0x00, 0x00, // ........P.......
	0xc6, 0x02, 0x00, 0x00, 0xbf, 0x02, 0x00, 0x00, 0xc0, 0x02, 0x00, 0x00, 0xc1, 0x02, 0x00, 0x00, // ................
	0x50, 0x00, 0x06, 0x00, 0x19, 0x00, 0x00, 0x00, 0xc7, 0x02, 0x00, 0x00, 0xc2, 0x02, 0x00, 0x00, // P...............
	0xc3, 0x02, 0x00, 0x00, 0xc4, 0x02, 0x00, 0x00, 0x50, 0x00, 0x06, 0x00, 0x3e, 0x01, 0x00, 0x00, // ........P...>...
	0xc8, 0x02, 0x00, 0x00, 0xc5, 0x02, 0x00, 0x00, 0xc6, 0x02, 0x00, 0x00, 0xc7, 0x02, 0x00, 0x00, // ................
	0x41, 0x00, 0x05, 0x00, 0x34, 0x01, 0x00, 0x00, 0xca, 0x02, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x00, // A...4.......Z...
	0x4d, 0x01, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xcb, 0x02, 0x00, 0x00, // M...=...........
	0xca, 0x02, 0x00, 0x00, 0x4f, 0x00, 0x08, 0x00, 0x19, 0x00, 0x00, 0x00, 0xcc, 0x02, 0x00, 0x00, // ....O...........
	0xcb, 0x02, 0x00, 0x00, 0xcb, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // ................
	0x02, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x19, 0x00, 0x00, 0x00, 0xcd, 0x02, 0x00, 0x00, // ................
	0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0xe3, 0x02, 0x00, 0x00, 0xcc, 0x02, 0x00, 0x00, // ................
	0x91, 0x00, 0x05, 0x00, 0x19, 0x00, 0x00, 0x00, 0xce, 0x02, 0x00, 0x00, 0xc8, 0x02, 0x00, 0x00, // ................
	0xcd, 0x02, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xa3, 0x01, 0x00, 0x00, // ....Q...........
	0xce, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // ........Q.......
	0xa4, 0x01, 0x00, 0x00, 0xce, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, // ............Q...
	0x07, 0x00, 0x00, 0x00, 0xa5, 0x01, 0x00, 0x00, 0xce, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // ................
	0x50, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xa6, 0x01, 0x00, 0x00, 0xa3, 0x01, 0x00, 0x00, // P...............
	0xa4, 0x01, 0x00, 0x00, 0xa5, 0x01, 0x00, 0x00, 0xa2, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x03, 0x00, // ............>...
	0x7b, 0x01, 0x00, 0x00, 0xa6, 0x01, 0x00, 0x00, 0xfd, 0x00, 0x01, 0x00, 0x38, 0x00, 0x01, 0x00, // {...........8...
	0x00, 0x00, 0xf0, 0x00,                                                                         // ....
};
static const bgfx::EmbeddedShader fs_pp_stereo_anaglyph_deghost = BGFX_EMBEDDED_SHADER(fs_pp_stereo_anaglyph_deghost);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Build of fragment shader from fs_pp_stereo.sc to fs_pp_stereo_anaglyph_lin_srgb_nodesat with options: ANAGLYPH NODESAT SRGB NOSTEREO
static const uint8_t fs_pp_stereo_anaglyph_lin_srgb_nodesat_mtl[6652] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x14, 0x74, // FSH.o.><.......t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, // ex_stereo_fbSamp
	0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x74, 0x65, // ler...........te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x54, 0x65, 0x78, 0x74, 0x75, // x_stereo_fbTextu
	0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x74, 0x65, 0x78, // re...........tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, // _stereo_depthSam
	0x70, 0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x74, // pler...........t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x54, // ex_stereo_depthT
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, // exture..........
	0x13, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, // .Stereo_MS_ZPD_Y
	0x41, 0x78, 0x69, 0x73, 0x12, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x77, // Axis...........w
	0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x01, 0x10, 0x00, 0x01, 0x00, 0x00, // _h_height.......
	0x00, 0x00, 0x00, 0x0e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, // ....Stereo_LeftM
	0x61, 0x74, 0x14, 0x01, 0x20, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x53, 0x74, 0x65, // at.. ........Ste
	0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x01, 0x60, 0x00, // reo_RightMat..`.
	0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // .......tex_stere
	0x6f, 0x5f, 0x66, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x74, // o_fb...........t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x10, // ex_stereo_depth.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcb, 0x18, 0x00, 0x00, 0x23, 0x69, 0x6e, // .............#in
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x64, // clude <metal_std
	0x6c, 0x69, 0x62, 0x3e, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x73, // lib>.#include <s
	0x69, 0x6d, 0x64, 0x2f, 0x73, 0x69, 0x6d, 0x64, 0x2e, 0x68, 0x3e, 0x0a, 0x0a, 0x75, 0x73, 0x69, // imd/simd.h>..usi
	0x6e, 0x67, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x6d, 0x65, 0x74, // ng namespace met
	0x61, 0x6c, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x5f, 0x47, 0x6c, 0x6f, // al;..struct _Glo
	0x62, 0x61, 0x6c, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, // bal.{.    float4
	0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, //  Stereo_MS_ZPD_Y
	0x41, 0x78, 0x69, 0x73, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, // Axis;.    float4
	0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, 0x20, 0x20, 0x20, //  w_h_height;.   
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x78, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, //  float4x4 Stereo
	0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, // _LeftMat;.    fl
	0x6f, 0x61, 0x74, 0x34, 0x78, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, // oat4x4 Stereo_Ri
	0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, // ghtMat;.};..stru
	0x63, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, // ct xlatMtlMain_o
	0x75, 0x74, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, // ut.{.    float4 
	0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x20, 0x5b, // bgfx_FragData0 [
	0x5b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, // [color(0)]];.};.
	0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, // .struct xlatMtlM
	0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, // ain_in.{.    flo
	0x61, 0x74, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, // at2 v_texcoord0 
	0x5b, 0x5b, 0x75, 0x73, 0x65, 0x72, 0x28, 0x6c, 0x6f, 0x63, 0x6e, 0x30, 0x29, 0x5d, 0x5d, 0x3b, // [[user(locn0)]];
	0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x78, 0x6c, // .};..fragment xl
	0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x78, 0x6c, // atMtlMain_out xl
	0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x28, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, // atMtlMain(xlatMt
	0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x5b, 0x5b, 0x73, 0x74, // lMain_in in [[st
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x5d, 0x5d, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, // age_in]], consta
	0x6e, 0x74, 0x20, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x26, 0x20, 0x5f, 0x6d, 0x74, 0x6c, // nt _Global& _mtl
	0x5f, 0x75, 0x20, 0x5b, 0x5b, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, // _u [[buffer(0)]]
	0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, 0x6f, 0x61, // , texture2d<floa
	0x74, 0x3e, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, // t> tex_stereo_fb
	0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x2c, //  [[texture(0)]],
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, //  texture2d<float
	0x3e, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, // > tex_stereo_dep
	0x74, 0x68, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x31, 0x29, 0x5d, // th [[texture(1)]
	0x5d, 0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, // ], sampler tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, // tereo_fbSampler 
	0x5b, 0x5b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x2c, 0x20, // [[sampler(0)]], 
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // sampler tex_ster
	0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, // eo_depthSampler 
	0x5b, 0x5b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x31, 0x29, 0x5d, 0x5d, 0x29, 0x0a, // [[sampler(1)]]).
	0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, // {.    xlatMtlMai
	0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x3d, 0x20, 0x7b, 0x7d, 0x3b, 0x0a, // n_out out = {};.
	0x20, 0x20, 0x20, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x5f, 0x35, 0x31, 0x30, 0x20, 0x3d, 0x20, //     bool _510 = 
	0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, // _mtl_u.Stereo_MS
	0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x7a, 0x20, 0x21, 0x3d, 0x20, // _ZPD_YAxis.z != 
	0x30, 0x2e, 0x30, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, // 0.0;.    float _
	0x35, 0x36, 0x39, 0x20, 0x3d, 0x20, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x61, 0x78, 0x28, // 569 = fast::max(
	0x30, 0x2e, 0x30, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x77, 0x5f, 0x68, 0x5f, // 0.0, _mtl_u.w_h_
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x6c, // height.w + (_mtl
	0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, // _u.Stereo_MS_ZPD
	0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, // _YAxis.x * (1.0 
	0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, // - (1.0 / (0.5 + 
	0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, 0x6e, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, // (fast::min(fast:
	0x3a, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // :min(tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, // depth.sample(tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, // _stereo_depthSam
	0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, // pler, (in.v_texc
	0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2b, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, // oord0 + select(f
	0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, // loat2(0.5 * _mtl
	0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, // _u.Stereo_MS_ZPD
	0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, // _YAxis.x, 0.0), 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x20, // float2(0.0, 0.5 
	0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // * _mtl_u.Stereo_
	0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, // MS_ZPD_YAxis.x),
	0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x35, 0x31, 0x30, 0x29, 0x29, 0x29, 0x2c, 0x20, //  bool2(_510))), 
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x2c, 0x20, 0x74, // level(0.0)).x, t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, // ex_stereo_depth.
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // sample(tex_stere
	0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, // o_depthSampler, 
	0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, // (in.v_texcoord0 
	0x2b, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, // + select(float2(
	0x30, 0x2e, 0x36, 0x36, 0x36, 0x30, 0x30, 0x30, 0x30, 0x30, 0x38, 0x35, 0x38, 0x33, 0x30, 0x36, // 0.66600000858306
	0x38, 0x38, 0x34, 0x37, 0x36, 0x35, 0x36, 0x32, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, // 884765625 * _mtl
	0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, // _u.Stereo_MS_ZPD
	0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, // _YAxis.x, 0.0), 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, // float2(0.0, 0.66
	0x36, 0x30, 0x30, 0x30, 0x30, 0x30, 0x38, 0x35, 0x38, 0x33, 0x30, 0x36, 0x38, 0x38, 0x34, 0x37, // 6000008583068847
	0x36, 0x35, 0x36, 0x32, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, // 65625 * _mtl_u.S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, // tereo_MS_ZPD_YAx
	0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x35, 0x31, // is.x), bool2(_51
	0x30, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, // 0))), level(0.0)
	0x29, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // ).x), tex_stereo
	0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, // _depth.sample(te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, // x_stereo_depthSa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, // mpler, (in.v_tex
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2b, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, // coord0 + select(
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, // float2(_mtl_u.St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, // ereo_MS_ZPD_YAxi
	0x73, 0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // s.x, 0.0), float
	0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, // 2(0.0, _mtl_u.St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, // ereo_MS_ZPD_YAxi
	0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x35, 0x31, 0x30, // s.x), bool2(_510
	0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, // ))), level(0.0))
	0x2e, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x5f, 0x6d, // .x) * ((1.0 / _m
	0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, // tl_u.Stereo_MS_Z
	0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, // PD_YAxis.y) - 0.
	0x35, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, // 5)))))));.    fl
	0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x36, 0x39, 0x32, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x5f, // oat4 _692 = tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // stereo_fb.sample
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, // (tex_stereo_fbSa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, // mpler, (in.v_tex
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2b, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, // coord0 + select(
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x5f, 0x35, 0x36, 0x39, 0x2c, 0x20, 0x30, 0x2e, 0x30, // float2(_569, 0.0
	0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, // ), float2(0.0, -
	0x5f, 0x35, 0x36, 0x39, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x35, 0x31, // _569), bool2(_51
	0x30, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, // 0))), level(0.0)
	0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x36, 0x33, // );.    float _63
	0x39, 0x20, 0x3d, 0x20, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, // 9 = fast::max(0.
	0x30, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, // 0, _mtl_u.w_h_he
	0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, // ight.w + (_mtl_u
	0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, // .Stereo_MS_ZPD_Y
	0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, // Axis.x * (1.0 - 
	0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x28, 0x66, // (1.0 / (0.5 + (f
	0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, 0x6e, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, // ast::min(fast::m
	0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, // in(tex_stereo_de
	0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, // pth.sample(tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, // tereo_depthSampl
	0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, // er, (in.v_texcoo
	0x72, 0x64, 0x30, 0x20, 0x2d, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, // rd0 - select(flo
	0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, // at2(0.5 * _mtl_u
	0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, // .Stereo_MS_ZPD_Y
	0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, // Axis.x, 0.0), fl
	0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x2a, 0x20, // oat2(0.0, 0.5 * 
	0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, // _mtl_u.Stereo_MS
	0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, // _ZPD_YAxis.x), b
	0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x35, 0x31, 0x30, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, // ool2(_510))), le
	0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x2c, 0x20, 0x74, 0x65, 0x78, // vel(0.0)).x, tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, // _stereo_depth.sa
	0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // mple(tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, // depthSampler, (i
	0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2d, 0x20, // n.v_texcoord0 - 
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, // select(float2(0.
	0x36, 0x36, 0x36, 0x30, 0x30, 0x30, 0x30, 0x30, 0x38, 0x35, 0x38, 0x33, 0x30, 0x36, 0x38, 0x38, // 6660000085830688
	0x34, 0x37, 0x36, 0x35, 0x36, 0x32, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, // 4765625 * _mtl_u
	0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, // .Stereo_MS_ZPD_Y
	0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, // Axis.x, 0.0), fl
	0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x30, // oat2(0.0, 0.6660
	0x30, 0x30, 0x30, 0x30, 0x38, 0x35, 0x38, 0x33, 0x30, 0x36, 0x38, 0x38, 0x34, 0x37, 0x36, 0x35, // 0000858306884765
	0x36, 0x32, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, // 625 * _mtl_u.Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, // reo_MS_ZPD_YAxis
	0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x35, 0x31, 0x30, 0x29, // .x), bool2(_510)
	0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, // )), level(0.0)).
	0x78, 0x29, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, // x), tex_stereo_d
	0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, // epth.sample(tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, // stereo_depthSamp
	0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, // ler, (in.v_texco
	0x6f, 0x72, 0x64, 0x30, 0x20, 0x2d, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, // ord0 - select(fl
	0x6f, 0x61, 0x74, 0x32, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, // oat2(_mtl_u.Ster
	0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, // eo_MS_ZPD_YAxis.
	0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, // x, 0.0), float2(
	0x30, 0x2e, 0x30, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, // 0.0, _mtl_u.Ster
	0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, // eo_MS_ZPD_YAxis.
	0x78, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x35, 0x31, 0x30, 0x29, 0x29, // x), bool2(_510))
	0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, // ), level(0.0)).x
	0x29, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x5f, 0x6d, 0x74, 0x6c, // ) * ((1.0 / _mtl
	0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, // _u.Stereo_MS_ZPD
	0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, // _YAxis.y) - 0.5)
	0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, // ))))));.    floa
	0x74, 0x34, 0x20, 0x5f, 0x37, 0x33, 0x32, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // t4 _732 = tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, // ereo_fb.sample(t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, // ex_stereo_fbSamp
	0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, // ler, (in.v_texco
	0x6f, 0x72, 0x64, 0x30, 0x20, 0x2d, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, // ord0 - select(fl
	0x6f, 0x61, 0x74, 0x32, 0x28, 0x5f, 0x36, 0x33, 0x39, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, // oat2(_639, 0.0),
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x5f, 0x36, //  float2(0.0, -_6
	0x33, 0x39, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x35, 0x31, 0x30, 0x29, // 39), bool2(_510)
	0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x3b, // )), level(0.0));
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x37, 0x33, 0x35, 0x20, // .    float _735 
	0x3d, 0x20, 0x5f, 0x36, 0x39, 0x32, 0x2e, 0x78, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, // = _692.x;.    fl
	0x6f, 0x61, 0x74, 0x20, 0x5f, 0x39, 0x36, 0x36, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x64, 0x6f, // oat _966;.    do
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, // .    {.        i
	0x66, 0x20, 0x28, 0x5f, 0x37, 0x33, 0x35, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, // f (_735 <= 0.040
	0x34, 0x34, 0x39, 0x39, 0x39, 0x39, 0x32, 0x37, 0x32, 0x38, 0x32, 0x33, 0x33, 0x33, 0x33, 0x37, // 4499992728233337
	0x34, 0x30, 0x32, 0x33, 0x34, 0x33, 0x37, 0x35, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 40234375).      
	0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //   {.            
	0x5f, 0x39, 0x36, 0x36, 0x20, 0x3d, 0x20, 0x5f, 0x37, 0x33, 0x35, 0x20, 0x2a, 0x20, 0x30, 0x2e, // _966 = _735 * 0.
	0x30, 0x37, 0x37, 0x33, 0x39, 0x39, 0x33, 0x38, 0x30, 0x35, 0x30, 0x35, 0x30, 0x38, 0x34, 0x39, // 0773993805050849
	0x39, 0x31, 0x34, 0x35, 0x35, 0x30, 0x37, 0x38, 0x31, 0x32, 0x35, 0x3b, 0x0a, 0x20, 0x20, 0x20, // 91455078125;.   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, //          break;.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //         }.      
	0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, //   else.        {
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x39, 0x36, // .            _96
	0x36, 0x20, 0x3d, 0x20, 0x70, 0x6f, 0x77, 0x72, 0x28, 0x28, 0x5f, 0x37, 0x33, 0x35, 0x20, 0x2a, // 6 = powr((_735 *
	0x20, 0x30, 0x2e, 0x39, 0x34, 0x37, 0x38, 0x36, 0x37, 0x32, 0x37, 0x34, 0x32, 0x38, 0x34, 0x33, //  0.9478672742843
	0x36, 0x32, 0x37, 0x39, 0x32, 0x39, 0x36, 0x38, 0x37, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x30, 0x2e, // 6279296875) + 0.
	0x30, 0x35, 0x32, 0x31, 0x33, 0x32, 0x36, 0x39, 0x39, 0x36, 0x33, 0x38, 0x36, 0x30, 0x35, 0x31, // 0521326996386051
	0x31, 0x37, 0x37, 0x39, 0x37, 0x38, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x2c, 0x20, 0x32, 0x2e, // 177978515625, 2.
	0x34, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x39, 0x35, 0x33, 0x36, 0x37, 0x34, 0x33, 0x31, 0x36, // 4000000953674316
	0x34, 0x30, 0x36, 0x32, 0x35, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 40625);.        
	0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, //     break;.     
	0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, //    }.        bre
	0x61, 0x6b, 0x3b, 0x20, 0x2f, 0x2f, 0x20, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, // ak; // unreachab
	0x6c, 0x65, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x61, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x0a, 0x20, 0x20, // le workaround.  
	0x20, 0x20, 0x7d, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x28, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x29, //   } while(false)
	0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x37, 0x33, 0x37, // ;.    float _737
	0x20, 0x3d, 0x20, 0x5f, 0x36, 0x39, 0x32, 0x2e, 0x79, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, //  = _692.y;.    f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x39, 0x36, 0x37, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x64, // loat _967;.    d
	0x6f, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // o.    {.        
	0x69, 0x66, 0x20, 0x28, 0x5f, 0x37, 0x33, 0x37, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, // if (_737 <= 0.04
	0x30, 0x34, 0x34, 0x39, 0x39, 0x39, 0x39, 0x32, 0x37, 0x32, 0x38, 0x32, 0x33, 0x33, 0x33, 0x33, // 0449999272823333
	0x37, 0x34, 0x30, 0x32, 0x33, 0x34, 0x33, 0x37, 0x35, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // 740234375).     
	0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //    {.           
	0x20, 0x5f, 0x39, 0x36, 0x37, 0x20, 0x3d, 0x20, 0x5f, 0x37, 0x33, 0x37, 0x20, 0x2a, 0x20, 0x30, //  _967 = _737 * 0
	0x2e, 0x30, 0x37, 0x37, 0x33, 0x39, 0x39, 0x33, 0x38, 0x30, 0x35, 0x30, 0x35, 0x30, 0x38, 0x34, // .077399380505084
	0x39, 0x39, 0x31, 0x34, 0x35, 0x35, 0x30, 0x37, 0x38, 0x31, 0x32, 0x35, 0x3b, 0x0a, 0x20, 0x20, // 991455078125;.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, //           break;
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // .        }.     
	0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //    else.        
	0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x39, // {.            _9
	0x36, 0x37, 0x20, 0x3d, 0x20, 0x70, 0x6f, 0x77, 0x72, 0x28, 0x28, 0x5f, 0x37, 0x33, 0x37, 0x20, // 67 = powr((_737 
	0x2a, 0x20, 0x30, 0x2e, 0x39, 0x34, 0x37, 0x38, 0x36, 0x37, 0x32, 0x37, 0x34, 0x32, 0x38, 0x34, // * 0.947867274284
	0x33, 0x36, 0x32, 0x37, 0x39, 0x32, 0x39, 0x36, 0x38, 0x37, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x30, // 36279296875) + 0
	0x2e, 0x30, 0x35, 0x32, 0x31, 0x33, 0x32, 0x36, 0x39, 0x39, 0x36, 0x33, 0x38, 0x36, 0x30, 0x35, // .052132699638605
	0x31, 0x31, 0x37, 0x37, 0x39, 0x37, 0x38, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x2c, 0x20, 0x32, // 1177978515625, 2
	0x2e, 0x34, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x39, 0x35, 0x33, 0x36, 0x37, 0x34, 0x33, 0x31, // .400000095367431
	0x36, 0x34, 0x30, 0x36, 0x32, 0x35, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 640625);.       
	0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, //      break;.    
	0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, //     }.        br
	0x65, 0x61, 0x6b, 0x3b, 0x20, 0x2f, 0x2f, 0x20, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, // eak; // unreacha
	0x62, 0x6c, 0x65, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x61, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x0a, 0x20, // ble workaround. 
	0x20, 0x20, 0x20, 0x7d, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x28, 0x66, 0x61, 0x6c, 0x73, 0x65, //    } while(false
	0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x37, 0x33, // );.    float _73
	0x39, 0x20, 0x3d, 0x20, 0x5f, 0x36, 0x39, 0x32, 0x2e, 0x7a, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, // 9 = _692.z;.    
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x39, 0x36, 0x38, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, // float _968;.    
	0x64, 0x6f, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // do.    {.       
	0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, 0x37, 0x33, 0x39, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, //  if (_739 <= 0.0
	0x34, 0x30, 0x34, 0x34, 0x39, 0x39, 0x39, 0x39, 0x32, 0x37, 0x32, 0x38, 0x32, 0x33, 0x33, 0x33, // 4044999927282333
	0x33, 0x37, 0x34, 0x30, 0x32, 0x33, 0x34, 0x33, 0x37, 0x35, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, // 3740234375).    
	0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //     {.          
	0x20, 0x20, 0x5f, 0x39, 0x36, 0x38, 0x20, 0x3d, 0x20, 0x5f, 0x37, 0x33, 0x39, 0x20, 0x2a, 0x20, //   _968 = _739 * 
	0x30, 0x2e, 0x30, 0x37, 0x37, 0x33, 0x39, 0x39, 0x33, 0x38, 0x30, 0x35, 0x30, 0x35, 0x30, 0x38, // 0.07739938050508
	0x34, 0x39, 0x39, 0x31, 0x34, 0x35, 0x35, 0x30, 0x37, 0x38, 0x31, 0x32, 0x35, 0x3b, 0x0a, 0x20, // 4991455078125;. 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, //            break
	0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, // ;.        }.    
	0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //     else.       
	0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, //  {.            _
	0x39, 0x36, 0x38, 0x20, 0x3d, 0x20, 0x70, 0x6f, 0x77, 0x72, 0x28, 0x28, 0x5f, 0x37, 0x33, 0x39, // 968 = powr((_739
	0x20, 0x2a, 0x20, 0x30, 0x2e, 0x39, 0x34, 0x37, 0x38, 0x36, 0x37, 0x32, 0x37, 0x34, 0x32, 0x38, //  * 0.94786727428
	0x34, 0x33, 0x36, 0x32, 0x37, 0x39, 0x32, 0x39, 0x36, 0x38, 0x37, 0x35, 0x29, 0x20, 0x2b, 0x20, // 436279296875) + 
	0x30, 0x2e, 0x30, 0x35, 0x32, 0x31, 0x33, 0x32, 0x36, 0x39, 0x39, 0x36, 0x33, 0x38, 0x36, 0x30, // 0.05213269963860
	0x35, 0x31, 0x31, 0x37, 0x37, 0x39, 0x37, 0x38, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x2c, 0x20, // 51177978515625, 
	0x32, 0x2e, 0x34, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x39, 0x35, 0x33, 0x36, 0x37, 0x34, 0x33, // 2.40000009536743
	0x31, 0x36, 0x34, 0x30, 0x36, 0x32, 0x35, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 1640625);.      
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, //       break;.   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, //      }.        b
	0x72, 0x65, 0x61, 0x6b, 0x3b, 0x20, 0x2f, 0x2f, 0x20, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, // reak; // unreach
	0x61, 0x62, 0x6c, 0x65, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x61, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x0a, // able workaround.
	0x20, 0x20, 0x20, 0x20, 0x7d, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x28, 0x66, 0x61, 0x6c, 0x73, //     } while(fals
	0x65, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x37, // e);.    float _7
	0x39, 0x38, 0x20, 0x3d, 0x20, 0x5f, 0x37, 0x33, 0x32, 0x2e, 0x78, 0x3b, 0x0a, 0x20, 0x20, 0x20, // 98 = _732.x;.   
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x39, 0x37, 0x32, 0x3b, 0x0a, 0x20, 0x20, 0x20, //  float _972;.   
	0x20, 0x64, 0x6f, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //  do.    {.      
	0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, 0x37, 0x39, 0x38, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, //   if (_798 <= 0.
	0x30, 0x34, 0x30, 0x34, 0x34, 0x39, 0x39, 0x39, 0x39, 0x32, 0x37, 0x32, 0x38, 0x32, 0x33, 0x33, // 0404499992728233
	0x33, 0x33, 0x37, 0x34, 0x30, 0x32, 0x33, 0x34, 0x33, 0x37, 0x35, 0x29, 0x0a, 0x20, 0x20, 0x20, // 33740234375).   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //      {.         
	0x20, 0x20, 0x20, 0x5f, 0x39, 0x37, 0x32, 0x20, 0x3d, 0x20, 0x5f, 0x37, 0x39, 0x38, 0x20, 0x2a, //    _972 = _798 *
	0x20, 0x30, 0x2e, 0x30, 0x37, 0x37, 0x33, 0x39, 0x39, 0x33, 0x38, 0x30, 0x35, 0x30, 0x35, 0x30, //  0.0773993805050
	0x38, 0x34, 0x39, 0x39, 0x31, 0x34, 0x35, 0x35, 0x30, 0x37, 0x38, 0x31, 0x32, 0x35, 0x3b, 0x0a, // 84991455078125;.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, //             brea
	0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, // k;.        }.   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //      else.      
	0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //   {.            
	0x5f, 0x39, 0x37, 0x32, 0x20, 0x3d, 0x20, 0x70, 0x6f, 0x77, 0x72, 0x28, 0x28, 0x5f, 0x37, 0x39, // _972 = powr((_79
	0x38, 0x20, 0x2a, 0x20, 0x30, 0x2e, 0x39, 0x34, 0x37, 0x38, 0x36, 0x37, 0x32, 0x37, 0x34, 0x32, // 8 * 0.9478672742
	0x38, 0x34, 0x33, 0x36, 0x32, 0x37, 0x39, 0x32, 0x39, 0x36, 0x38, 0x37, 0x35, 0x29, 0x20, 0x2b, // 8436279296875) +
	0x20, 0x30, 0x2e, 0x30, 0x35, 0x32, 0x31, 0x33, 0x32, 0x36, 0x39, 0x39, 0x36, 0x33, 0x38, 0x36, //  0.0521326996386
	0x30, 0x35, 0x31, 0x31, 0x37, 0x37, 0x39, 0x37, 0x38, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x2c, // 051177978515625,
	0x20, 0x32, 0x2e, 0x34, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x39, 0x35, 0x33, 0x36, 0x37, 0x34, //  2.4000000953674
	0x33, 0x31, 0x36, 0x34, 0x30, 0x36, 0x32, 0x35, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // 31640625);.     
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, //        break;.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //       }.        
	0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x20, 0x2f, 0x2f, 0x20, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, // break; // unreac
	0x68, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x61, 0x72, 0x6f, 0x75, 0x6e, 0x64, // hable workaround
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x28, 0x66, 0x61, 0x6c, // .    } while(fal
	0x73, 0x65, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, // se);.    float _
	0x38, 0x30, 0x30, 0x20, 0x3d, 0x20, 0x5f, 0x37, 0x33, 0x32, 0x2e, 0x79, 0x3b, 0x0a, 0x20, 0x20, // 800 = _732.y;.  
	0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x39, 0x37, 0x33, 0x3b, 0x0a, 0x20, 0x20, //   float _973;.  
	0x20, 0x20, 0x64, 0x6f, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, //   do.    {.     
	0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, 0x38, 0x30, 0x30, 0x20, 0x3c, 0x3d, 0x20, 0x30, //    if (_800 <= 0
	0x2e, 0x30, 0x34, 0x30, 0x34, 0x34, 0x39, 0x39, 0x39, 0x39, 0x32, 0x37, 0x32, 0x38, 0x32, 0x33, // .040449999272823
	0x33, 0x33, 0x33, 0x37, 0x34, 0x30, 0x32, 0x33, 0x34, 0x33, 0x37, 0x35, 0x29, 0x0a, 0x20, 0x20, // 333740234375).  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //       {.        
	0x20, 0x20, 0x20, 0x20, 0x5f, 0x39, 0x37, 0x33, 0x20, 0x3d, 0x20, 0x5f, 0x38, 0x30, 0x30, 0x20, //     _973 = _800 
	0x2a, 0x20, 0x30, 0x2e, 0x30, 0x37, 0x37, 0x33, 0x39, 0x39, 0x33, 0x38, 0x30, 0x35, 0x30, 0x35, // * 0.077399380505
	0x30, 0x38, 0x34, 0x39, 0x39, 0x31, 0x34, 0x35, 0x35, 0x30, 0x37, 0x38, 0x31, 0x32, 0x35, 0x3b, // 084991455078125;
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, // .            bre
	0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, // ak;.        }.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, //       else.     
	0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //    {.           
	0x20, 0x5f, 0x39, 0x37, 0x33, 0x20, 0x3d, 0x20, 0x70, 0x6f, 0x77, 0x72, 0x28, 0x28, 0x5f, 0x38, //  _973 = powr((_8
	0x30, 0x30, 0x20, 0x2a, 0x20, 0x30, 0x2e, 0x39, 0x34, 0x37, 0x38, 0x36, 0x37, 0x32, 0x37, 0x34, // 00 * 0.947867274
	0x32, 0x38, 0x34, 0x33, 0x36, 0x32, 0x37, 0x39, 0x32, 0x39, 0x36, 0x38, 0x37, 0x35, 0x29, 0x20, // 28436279296875) 
	0x2b, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x32, 0x31, 0x33, 0x32, 0x36, 0x39, 0x39, 0x36, 0x33, 0x38, // + 0.052132699638
	0x36, 0x30, 0x35, 0x31, 0x31, 0x37, 0x37, 0x39, 0x37, 0x38, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, // 6051177978515625
	0x2c, 0x20, 0x32, 0x2e, 0x34, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x39, 0x35, 0x33, 0x36, 0x37, // , 2.400000095367
	0x34, 0x33, 0x31, 0x36, 0x34, 0x30, 0x36, 0x32, 0x35, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, // 431640625);.    
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, //         break;. 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //        }.       
	0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x20, 0x2f, 0x2f, 0x20, 0x75, 0x6e, 0x72, 0x65, 0x61, //  break; // unrea
	0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x61, 0x72, 0x6f, 0x75, 0x6e, // chable workaroun
	0x64, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x28, 0x66, 0x61, // d.    } while(fa
	0x6c, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // lse);.    float 
	0x5f, 0x38, 0x30, 0x32, 0x20, 0x3d, 0x20, 0x5f, 0x37, 0x33, 0x32, 0x2e, 0x7a, 0x3b, 0x0a, 0x20, // _802 = _732.z;. 
	0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x39, 0x37, 0x34, 0x3b, 0x0a, 0x20, //    float _974;. 
	0x20, 0x20, 0x20, 0x64, 0x6f, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, //    do.    {.    
	0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, 0x38, 0x30, 0x32, 0x20, 0x3c, 0x3d, 0x20, //     if (_802 <= 
	0x30, 0x2e, 0x30, 0x34, 0x30, 0x34, 0x34, 0x39, 0x39, 0x39, 0x39, 0x32, 0x37, 0x32, 0x38, 0x32, // 0.04044999927282
	0x33, 0x33, 0x33, 0x33, 0x37, 0x34, 0x30, 0x32, 0x33, 0x34, 0x33, 0x37, 0x35, 0x29, 0x0a, 0x20, // 3333740234375). 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //        {.       
	0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x39, 0x37, 0x34, 0x20, 0x3d, 0x20, 0x5f, 0x38, 0x30, 0x32, //      _974 = _802
	0x20, 0x2a, 0x20, 0x30, 0x2e, 0x30, 0x37, 0x37, 0x33, 0x39, 0x39, 0x33, 0x38, 0x30, 0x35, 0x30, //  * 0.07739938050
	0x35, 0x30, 0x38, 0x34, 0x39, 0x39, 0x31, 0x34, 0x35, 0x35, 0x30, 0x37, 0x38, 0x31, 0x32, 0x35, // 5084991455078125
	0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, // ;.            br
	0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, // eak;.        }. 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, //        else.    
	0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //     {.          
	0x20, 0x20, 0x5f, 0x39, 0x37, 0x34, 0x20, 0x3d, 0x20, 0x70, 0x6f, 0x77, 0x72, 0x28, 0x28, 0x5f, //   _974 = powr((_
	0x38, 0x30, 0x32, 0x20, 0x2a, 0x20, 0x30, 0x2e, 0x39, 0x34, 0x37, 0x38, 0x36, 0x37, 0x32, 0x37, // 802 * 0.94786727
	0x34, 0x32, 0x38, 0x34, 0x33, 0x36, 0x32, 0x37, 0x39, 0x32, 0x39, 0x36, 0x38, 0x37, 0x35, 0x29, // 428436279296875)
	0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x32, 0x31, 0x33, 0x32, 0x36, 0x39, 0x39, 0x36, 0x33, //  + 0.05213269963
	0x38, 0x36, 0x30, 0x35, 0x31, 0x31, 0x37, 0x37, 0x39, 0x37, 0x38, 0x35, 0x31, 0x35, 0x36, 0x32, // 8605117797851562
	0x35, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x39, 0x35, 0x33, 0x36, // 5, 2.40000009536
	0x37, 0x34, 0x33, 0x31, 0x36, 0x34, 0x30, 0x36, 0x32, 0x35, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, // 7431640625);.   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, //          break;.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //         }.      
	0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x20, 0x2f, 0x2f, 0x20, 0x75, 0x6e, 0x72, 0x65, //   break; // unre
	0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x61, 0x72, 0x6f, 0x75, // achable workarou
	0x6e, 0x64, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x28, 0x66, // nd.    } while(f
	0x61, 0x6c, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // alse);.    float
	0x34, 0x20, 0x5f, 0x38, 0x37, 0x36, 0x20, 0x3d, 0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, // 4 _876 = (float4
	0x28, 0x5f, 0x39, 0x36, 0x36, 0x2c, 0x20, 0x5f, 0x39, 0x36, 0x37, 0x2c, 0x20, 0x5f, 0x39, 0x36, // (_966, _967, _96
	0x38, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, // 8, 1.0) * _mtl_u
	0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x29, // .Stereo_LeftMat)
	0x20, 0x2b, 0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x39, 0x37, 0x32, 0x2c, //  + (float4(_972,
	0x20, 0x5f, 0x39, 0x37, 0x33, 0x2c, 0x20, 0x5f, 0x39, 0x37, 0x34, 0x2c, 0x20, 0x31, 0x2e, 0x30, //  _973, _974, 1.0
	0x29, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, // ) * _mtl_u.Stere
	0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, // o_RightMat);.   
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x38, 0x38, 0x31, 0x20, 0x3d, 0x20, 0x5f, 0x38, //  float _881 = _8
	0x37, 0x36, 0x2e, 0x78, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // 76.x;.    float 
	0x5f, 0x39, 0x37, 0x38, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, 0x38, // _978;.    if (_8
	0x38, 0x31, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x33, 0x31, 0x33, 0x30, 0x38, 0x30, // 81 <= 0.00313080
	0x30, 0x30, 0x39, 0x30, 0x37, 0x33, 0x30, 0x31, 0x39, 0x30, 0x32, 0x37, 0x37, 0x30, 0x39, 0x39, // 0090730190277099
	0x36, 0x30, 0x39, 0x33, 0x37, 0x35, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, // 609375).    {.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x39, 0x37, 0x38, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, //       _978 = 12.
	0x39, 0x32, 0x30, 0x30, 0x30, 0x30, 0x30, 0x37, 0x36, 0x32, 0x39, 0x33, 0x39, 0x34, 0x35, 0x33, // 9200000762939453
	0x31, 0x32, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x38, 0x38, 0x31, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, // 125 * _881;.    
	0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, // }.    else.    {
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x39, 0x37, 0x38, 0x20, 0x3d, 0x20, // .        _978 = 
	0x28, 0x31, 0x2e, 0x30, 0x35, 0x34, 0x39, 0x39, 0x39, 0x39, 0x34, 0x37, 0x35, 0x34, 0x37, 0x39, // (1.0549999475479
	0x31, 0x32, 0x35, 0x39, 0x37, 0x36, 0x35, 0x36, 0x32, 0x35, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, // 1259765625 * pow
	0x72, 0x28, 0x5f, 0x38, 0x38, 0x31, 0x2c, 0x20, 0x30, 0x2e, 0x34, 0x31, 0x36, 0x36, 0x36, 0x36, // r(_881, 0.416666
	0x36, 0x35, 0x36, 0x37, 0x33, 0x32, 0x35, 0x35, 0x39, 0x32, 0x30, 0x34, 0x31, 0x30, 0x31, 0x35, // 6567325592041015
	0x36, 0x32, 0x35, 0x29, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x34, 0x39, 0x39, 0x39, // 625)) - 0.054999
	0x39, 0x39, 0x39, 0x37, 0x30, 0x31, 0x39, 0x37, 0x36, 0x37, 0x37, 0x36, 0x31, 0x32, 0x33, 0x30, // 9997019767761230
	0x34, 0x36, 0x38, 0x37, 0x35, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, // 46875;.    }.   
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x38, 0x38, 0x33, 0x20, 0x3d, 0x20, 0x5f, 0x38, //  float _883 = _8
	0x37, 0x36, 0x2e, 0x79, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // 76.y;.    float 
	0x5f, 0x39, 0x37, 0x39, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, 0x38, // _979;.    if (_8
	0x38, 0x33, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x33, 0x31, 0x33, 0x30, 0x38, 0x30, // 83 <= 0.00313080
	0x30, 0x30, 0x39, 0x30, 0x37, 0x33, 0x30, 0x31, 0x39, 0x30, 0x32, 0x37, 0x37, 0x30, 0x39, 0x39, // 0090730190277099
	0x36, 0x30, 0x39, 0x33, 0x37, 0x35, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, // 609375).    {.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x39, 0x37, 0x39, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, //       _979 = 12.
	0x39, 0x32, 0x30, 0x30, 0x30, 0x30, 0x30, 0x37, 0x36, 0x32, 0x39, 0x33, 0x39, 0x34, 0x35, 0x33, // 9200000762939453
	0x31, 0x32, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x38, 0x38, 0x33, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, // 125 * _883;.    
	0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, // }.    else.    {
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x39, 0x37, 0x39, 0x20, 0x3d, 0x20, // .        _979 = 
	0x28, 0x31, 0x2e, 0x30, 0x35, 0x34, 0x39, 0x39, 0x39, 0x39, 0x34, 0x37, 0x35, 0x34, 0x37, 0x39, // (1.0549999475479
	0x31, 0x32, 0x35, 0x39, 0x37, 0x36, 0x35, 0x36, 0x32, 0x35, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, // 1259765625 * pow
	0x72, 0x28, 0x5f, 0x38, 0x38, 0x33, 0x2c, 0x20, 0x30, 0x2e, 0x34, 0x31, 0x36, 0x36, 0x36, 0x36, // r(_883, 0.416666
	0x36, 0x35, 0x36, 0x37, 0x33, 0x32, 0x35, 0x35, 0x39, 0x32, 0x30, 0x34, 0x31, 0x30, 0x31, 0x35, // 6567325592041015
	0x36, 0x32, 0x35, 0x29, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x34, 0x39, 0x39, 0x39, // 625)) - 0.054999
	0x39, 0x39, 0x39, 0x37, 0x30, 0x31, 0x39, 0x37, 0x36, 0x37, 0x37, 0x36, 0x31, 0x32, 0x33, 0x30, // 9997019767761230
	0x34, 0x36, 0x38, 0x37, 0x35, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, // 46875;.    }.   
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x38, 0x38, 0x35, 0x20, 0x3d, 0x20, 0x5f, 0x38, //  float _885 = _8
	0x37, 0x36, 0x2e, 0x7a, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // 76.z;.    float 
	0x5f, 0x39, 0x38, 0x30, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, 0x38, // _980;.    if (_8
	0x38, 0x35, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x33, 0x31, 0x33, 0x30, 0x38, 0x30, // 85 <= 0.00313080
	0x30, 0x30, 0x39, 0x30, 0x37, 0x33, 0x30, 0x31, 0x39, 0x30, 0x32, 0x37, 0x37, 0x30, 0x39, 0x39, // 0090730190277099
	0x36, 0x30, 0x39, 0x33, 0x37, 0x35, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, // 609375).    {.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x39, 0x38, 0x30, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, //       _980 = 12.
	0x39, 0x32, 0x30, 0x30, 0x30, 0x30, 0x30, 0x37, 0x36, 0x32, 0x39, 0x33, 0x39, 0x34, 0x35, 0x33, // 9200000762939453
	0x31, 0x32, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x38, 0x38, 0x35, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, // 125 * _885;.    
	0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, // }.    else.    {
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x39, 0x38, 0x30, 0x20, 0x3d, 0x20, // .        _980 = 
	0x28, 0x31, 0x2e, 0x30, 0x35, 0x34, 0x39, 0x39, 0x39, 0x39, 0x34, 0x37, 0x35, 0x34, 0x37, 0x39, // (1.0549999475479
	0x31, 0x32, 0x35, 0x39, 0x37, 0x36, 0x35, 0x36, 0x32, 0x35, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, // 1259765625 * pow
	0x72, 0x28, 0x5f, 0x38, 0x38, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x34, 0x31, 0x36, 0x36, 0x36, 0x36, // r(_885, 0.416666
	0x36, 0x35, 0x36, 0x37, 0x33, 0x32, 0x35, 0x35, 0x39, 0x32, 0x30, 0x34, 0x31, 0x30, 0x31, 0x35, // 6567325592041015
	0x36, 0x32, 0x35, 0x29, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x34, 0x39, 0x39, 0x39, // 625)) - 0.054999
	0x39, 0x39, 0x39, 0x37, 0x30, 0x31, 0x39, 0x37, 0x36, 0x37, 0x37, 0x36, 0x31, 0x32, 0x33, 0x30, // 9997019767761230
	0x34, 0x36, 0x38, 0x37, 0x35, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, // 46875;.    }.   
	0x20, 0x6f, 0x75, 0x74, 0x2e, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, 0x61, //  out.bgfx_FragDa
	0x74, 0x61, 0x30, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x39, 0x37, // ta0 = float4(_97
	0x38, 0x2c, 0x20, 0x5f, 0x39, 0x37, 0x39, 0x2c, 0x20, 0x5f, 0x39, 0x38, 0x30, 0x2c, 0x20, 0x31, // 8, _979, _980, 1
	0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // .0);.    return 
	0x6f, 0x75, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x0a, 0x00, 0x00, 0xe0, 0x00,                         // out;.}......
};
static const uint8_t fs_pp_stereo_anaglyph_lin_srgb_nodesat_essl[10657] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8e, 0x29, // FSH.o.><.......)
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x33, 0x32, 0x30, 0x20, 0x65, // ..#version 320 e
	0x73, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, // s.#define attrib
	0x75, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x76, // ute in.#define v
	0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, // arying in.precis
	0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3b, // ion highp float;
	0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, // .precision highp
	0x20, 0x69, 0x6e, 0x74, 0x3b, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x73, 0x68, //  int;.#define sh
	0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, // adow2D(_sampler,
	0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, //  _coord) texture
	0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, // (_sampler, _coor
	0x64, 0x29, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x73, 0x68, 0x61, 0x64, 0x6f, // d).#define shado
	0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // w2DProj(_sampler
	0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // , _coord) textur
	0x65, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, // eProj(_sampler, 
	0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x0a, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x65, 0x64, 0x69, // _coord).out medi
	0x75, 0x6d, 0x70, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, // ump vec4 bgfx_Fr
	0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, // agColor;.varying
	0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, //  vec2 v_texcoord
	0x30, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, // 0;.vec3 instMul(
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x20, // vec3 _vec, mat3 
	0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // _mtx) { return (
	0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, //  (_vec) * (_mtx)
	0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, //  ); }.vec3 instM
	0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, // ul(mat3 _mtx, ve
	0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, // c3 _vec) { retur
	0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, // n ( (_mtx) * (_v
	0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, // ec) ); }.vec4 in
	0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, // stMul(vec4 _vec,
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, //  mat4 _mtx) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, // turn ( (_vec) * 
	0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, // (_mtx) ); }.vec4
	0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, //  instMul(mat4 _m
	0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, // tx, vec4 _vec) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, //  return ( (_mtx)
	0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, //  * (_vec) ); }.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, 0x70, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, // loat rcp(float _
	0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x2f, // a) { return 1.0/
	0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, // _a; }.vec2 rcp(v
	0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // ec2 _a) { return
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, //  vec2(1.0)/_a; }
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, // .vec3 rcp(vec3 _
	0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, // a) { return vec3
	0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, // (1.0)/_a; }.vec4
	0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, //  rcp(vec4 _a) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x31, 0x2e, 0x30, 0x29, // return vec4(1.0)
	0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x65, 0x63, 0x32, // /_a; }.vec2 vec2
	0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, // _splat(float _x)
	0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, //  { return vec2(_
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, // x, _x); }.vec3 v
	0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // ec3_splat(float 
	0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, // _x) { return vec
	0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, // 3(_x, _x, _x); }
	0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, // .vec4 vec4_splat
	0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // (float _x) { ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, // urn vec4(_x, _x,
	0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, //  _x, _x); }.uvec
	0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, // 2 uvec2_splat(ui
	0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // nt _x) { return 
	0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, // uvec2(_x, _x); }
	0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, // .uvec3 uvec3_spl
	0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // at(uint _x) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, // turn uvec3(_x, _
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x34, 0x20, // x, _x); }.uvec4 
	0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, // uvec4_splat(uint
	0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, //  _x) { return uv
	0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, // ec4(_x, _x, _x, 
	0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, // _x); }.mat4 mtxF
	0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, // romRows(vec4 _0,
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, //  vec4 _1, vec4 _
	0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // 2, vec4 _3).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, // turn transpose(m
	0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, // at4(_0, _1, _2, 
	0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, // _3) );.}.mat4 mt
	0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, // xFromCols(vec4 _
	0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // 0, vec4 _1, vec4
	0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, //  _2, vec4 _3).{.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, // return mat4(_0, 
	0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, // _1, _2, _3);.}.m
	0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, // at3 mtxFromRows(
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, // vec3 _0, vec3 _1
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // , vec3 _2).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, // urn transpose(ma
	0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x20, 0x29, // t3(_0, _1, _2) )
	0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, // ;.}.mat3 mtxFrom
	0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, // Cols(vec3 _0, ve
	0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, // c3 _1, vec3 _2).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, // {.return mat3(_0
	0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, // , _1, _2);.}.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, // form vec4 u_view
	0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, // Rect;.uniform ve
	0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x54, 0x65, 0x78, 0x65, 0x6c, 0x3b, 0x0a, // c4 u_viewTexel;.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, // uniform mat4 u_v
	0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, // iew;.uniform mat
	0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, // 4 u_invView;.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x70, 0x72, 0x6f, 0x6a, // form mat4 u_proj
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, // ;.uniform mat4 u
	0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // _invProj;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, // m mat4 u_viewPro
	0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, // j;.uniform mat4 
	0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, // u_invViewProj;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, // niform mat4 u_mo
	0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // del[32];.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, //  mat4 u_modelVie
	0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, // w;.uniform mat4 
	0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, // u_modelViewProj;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, // .uniform vec4 u_
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x66, 0x34, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // alphaRef4;.float
	0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, //  sqr( float v).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // .return v*v;.}.v
	0x65, 0x63, 0x32, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x29, // ec2 sqr( vec2 v)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, // .{.return v*v;.}
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // .vec3 sqr( vec3 
	0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, // v).{.return v*v;
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6d, 0x75, 0x6c, 0x5f, 0x77, 0x31, 0x28, 0x20, // .}.vec3 mul_w1( 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x29, 0x0a, // vec3 v, mat4 m).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2e, 0x78, 0x2a, 0x6d, 0x5b, 0x30, // {.return v.x*m[0
	0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x79, 0x2a, 0x6d, 0x5b, 0x31, // ].xyz + (v.y*m[1
	0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x7a, 0x2a, 0x6d, 0x5b, 0x32, // ].xyz + (v.z*m[2
	0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x6d, 0x5b, 0x33, 0x5d, 0x2e, 0x78, 0x79, 0x7a, // ].xyz + m[3].xyz
	0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x63, 0x6f, 0x73, // ));.}.float acos
	0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x20, 0x66, // _approx_divPI( f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // loat v).{.float 
	0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, // x = abs(v);.if(1
	0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, // . - x <= 0.00006
	0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // 103515625).retur
	0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, // n (v >= 0.) ? 0.
	0x20, 0x3a, 0x20, 0x31, 0x2e, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, //  : 1.;.float res
	0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, //  = ((-0.155972/3
	0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, // .141592653589793
	0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, // 2384626433832795
	0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, // ) * x + (1.56467
	0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, // /3.1415926535897
	0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, // 9323846264338327
	0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, // 95) ) * sqrt(1. 
	0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, // - x);.return (v 
	0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x31, // >= 0.) ? res : 1
	0x2e, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // . - res;.}.float
	0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, //  atan2_approx_di
	0x76, 0x32, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x79, 0x2c, 0x20, 0x66, // v2PI( float y, f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // loat x).{.float 
	0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x79, 0x29, 0x3b, 0x0a, // abs_y = abs(y);.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, // float abs_x = ab
	0x73, 0x28, 0x78, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3c, // s(x);.if(abs_x <
	0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, // = 0.000061035156
	0x32, 0x35, 0x20, 0x26, 0x26, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3c, 0x3d, 0x20, 0x30, // 25 && abs_y <= 0
	0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, // .00006103515625)
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x30, 0x2e, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // .return 0.;.floa
	0x74, 0x20, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2d, 0x20, 0x61, // t r = (abs_x - a
	0x62, 0x73, 0x5f, 0x79, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2b, // bs_y) / (abs_x +
	0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, //  abs_y);.float a
	0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, // ngle = ((x < 0.)
	0x20, 0x3f, 0x20, 0x28, 0x33, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x20, 0x3a, 0x20, 0x28, 0x31, 0x2e, //  ? (3./8.) : (1.
	0x2f, 0x38, 0x2e, 0x29, 0x29, 0x0a, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x32, 0x31, 0x31, 0x38, 0x36, // /8.)).+ (0.21186
	0x38, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, // 8 /(2.*3.1415926
	0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, // 5358979323846264
	0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x72, 0x20, 0x2a, 0x20, // 33832795) * r * 
	0x72, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x39, 0x38, 0x37, 0x33, 0x30, 0x35, 0x20, 0x2f, 0x28, 0x32, // r - 0.987305 /(2
	0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, // .*3.141592653589
	0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, // 7932384626433832
	0x37, 0x39, 0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, // 795)) * ((x < 0.
	0x29, 0x20, 0x3f, 0x20, 0x2d, 0x72, 0x20, 0x3a, 0x20, 0x72, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, // ) ? -r : r);.ret
	0x75, 0x72, 0x6e, 0x20, 0x28, 0x79, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, // urn (y < 0.) ? -
	0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3a, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x3b, 0x0a, 0x7d, // angle : angle;.}
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x73, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x72, // .float asin_appr
	0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // ox_divPI( float 
	0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, // v).{.float x = a
	0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, // bs(v);.if(1. - x
	0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, //  <= 0.0000610351
	0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, // 5625).return (v 
	0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x3a, 0x20, 0x2d, // >= 0.) ? 0.5 : -
	0x30, 0x2e, 0x35, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, // 0.5;.float res =
	0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, //  ((-0.155972/3.1
	0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, // 4159265358979323
	0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, // 84626433832795) 
	0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, // * x + (1.56467/3
	0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, // .141592653589793
	0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, // 2384626433832795
	0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, // ) ) * sqrt(1. - 
	0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, // x);.return (v >=
	0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, //  0.) ? 0.5 - res
	0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, //  : -0.5 + res;.}
	0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x61, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x71, 0x75, // .vec2 ray_to_equ
	0x69, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x75, 0x76, 0x28, // irectangular_uv(
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x61, 0x79, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, //  vec3 ray).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x0a, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, // urn vec2(.0.5 + 
	0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, // atan2_approx_div
	0x32, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x79, 0x2c, 0x20, 0x72, 0x61, 0x79, 0x2e, 0x78, // 2PI(ray.y, ray.x
	0x29, 0x2c, 0x0a, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, // ),.acos_approx_d
	0x69, 0x76, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // ivPI(ray.z));.}.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x20, 0x66, // float InvsRGB( f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, // loat color).{.if
	0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, //  (color <= 0.040
	0x34, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // 45).return color
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x29, 0x3b, 0x0a, //  * (1.0/12.92);.
	0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, // else.return pow(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, // color * (1.0/1.0
	0x35, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x2f, 0x31, 0x2e, 0x30, // 55) + (0.055/1.0
	0x35, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // 55), 2.4);.}.flo
	0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x20, 0x66, 0x6c, // at InvRec709( fl
	0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, // oat color).{.if 
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x38, 0x31, 0x29, // (color <= 0.081)
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, // .return color * 
	0x28, 0x31, 0x2e, 0x30, 0x2f, 0x34, 0x2e, 0x35, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, // (1.0/4.5);.else.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // return pow(color
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, 0x20, 0x2b, //  * (1.0/1.099) +
	0x20, 0x28, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, 0x2c, 0x20, //  (0.099/1.099), 
	0x31, 0x2e, 0x30, 0x2f, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // 1.0/0.45);.}.flo
	0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x66, 0x6c, 0x6f, // at InvGamma( flo
	0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, // at color).{.retu
	0x72, 0x6e, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // rn InvsRGB(color
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, // );.}.vec3 InvGam
	0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, // ma( vec3 color).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x49, 0x6e, // {.return vec3(In
	0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, // vGamma(color.x),
	0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, // InvGamma(color.y
	0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // ),InvGamma(color
	0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, // .z));.}.vec3 Inv
	0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, // ToneMap( vec3 co
	0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x69, 0x6e, 0x76, // lor).{.float inv
	0x5f, 0x32, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x30, 0x2e, 0x35, 0x2f, 0x30, 0x2e, 0x32, 0x35, 0x3b, // _2bh = 0.5/0.25;
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x34, 0x2e, 0x30, 0x2a, // .float bh = 4.0*
	0x30, 0x2e, 0x32, 0x35, 0x20, 0x2d, 0x20, 0x32, 0x2e, 0x30, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // 0.25 - 2.0;.retu
	0x72, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, // rn (color - 1.0 
	0x2b, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2a, 0x28, 0x63, 0x6f, // + sqrt(color*(co
	0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x20, 0x62, 0x68, 0x29, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, // lor + bh) + 1.0)
	0x29, 0x2a, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // )*inv_2bh;.}.flo
	0x61, 0x74, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, // at sRGB( float f
	0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, // ).{.float s;.if 
	0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x33, 0x31, 0x33, 0x30, 0x38, 0x29, // (f <= 0.0031308)
	0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, // .s = 12.92 * f;.
	0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x20, 0x2a, // else.s = 1.055 *
	0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x34, 0x29, //  pow(f, 1.0/2.4)
	0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, //  - 0.055;.return
	0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x52, 0x65, 0x63, 0x37, //  s;.}.float Rec7
	0x30, 0x39, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, // 09( float f).{.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, // loat s;.if (f <=
	0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x34, 0x2e, 0x35, 0x20, //  0.018).s = 4.5 
	0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, // * f;.else.s = 1.
	0x30, 0x39, 0x39, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x34, // 099 * pow(f, 0.4
	0x35, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // 5) - 0.099;.retu
	0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, // rn s;.}.float FB
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, // Gamma( float col
	0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x52, 0x47, // or).{.return sRG
	0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, // B(color);.}.vec2
	0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, //  FBGamma( vec2 c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // olor).{.return v
	0x65, 0x63, 0x32, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // ec2(FBGamma(colo
	0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, // r.x),FBGamma(col
	0x6f, 0x72, 0x2e, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, // or.y));.}.vec3 F
	0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, // BGamma( vec3 col
	0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, // or).{.return vec
	0x33, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, // 3(FBGamma(color.
	0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // x),FBGamma(color
	0x2e, 0x79, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // .y),FBGamma(colo
	0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, // r.z));.}.vec3 FB
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x32, 0x32, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, // Gamma22( vec3 co
	0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, // lor).{.return ve
	0x63, 0x33, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x2c, 0x20, // c3(pow(color.x, 
	0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, // 1.0/2.2),pow(col
	0x6f, 0x72, 0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, // or.y, 1.0/2.2),p
	0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, // ow(color.z, 1.0/
	0x32, 0x2e, 0x32, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, // 2.2));.}.float F
	0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // BToneMap( float 
	0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6c, 0x20, 0x2a, 0x20, // l).{.return l * 
	0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, // ((l*0.25 + 1.0) 
	0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // / (l + 1.0));.}.
	0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, // vec2 FBToneMap( 
	0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, // vec2 color).{.fl
	0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // oat l = dot(colo
	0x72, 0x2c, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2b, // r,vec2(0.176204+
	0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x2c, 0x30, 0x2e, // 0.0108109*0.5,0.
	0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, // 812985+0.0108109
	0x2a, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, // *0.5));.return c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, // olor * ((l*0.25 
	0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, // + 1.0) / (l + 1.
	0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x54, 0x6f, // 0));.}.vec3 FBTo
	0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // neMap( vec3 colo
	0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, // r).{.float l = d
	0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, // ot(color,vec3(0.
	0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2c, // 176204,0.812985,
	0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, // 0.0108109));.ret
	0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, // urn color * ((l*
	0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, // 0.25 + 1.0) / (l
	0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, //  + 1.0));.}.vec4
	0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, //  Additive( vec4 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, // cBase, vec4 cBle
	0x6e, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, // nd, float percen
	0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, // t).{.return cBas
	0x65, 0x20, 0x2b, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, // e + cBlend*perce
	0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, // nt;.}.vec3 Scree
	0x6e, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, // n ( vec3 cBase, 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, // vec3 cBlend).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, // eturn 1.0 - (1.0
	0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, //  - cBase) * (1.0
	0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, //  - cBlend);.}.ve
	0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, // c4 Screen ( vec4
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, //  cBase, vec4 cBl
	0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, // end).{.return 1.
	0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, // 0 - (1.0 - cBase
	0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // ) * (1.0 - cBlen
	0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, // d);.}.vec3 Scree
	0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, // nHDR ( vec3 cBas
	0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, // e, vec3 cBlend).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, // {.return max(1.0
	0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, //  - (1.0 - cBase)
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, //  * (1.0 - cBlend
	0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, // ), vec3(0.,0.,0.
	0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, // ));.}.vec4 Scree
	0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, // nHDR ( vec4 cBas
	0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, // e, vec4 cBlend).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, // {.return max(1.0
	0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, //  - (1.0 - cBase)
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, //  * (1.0 - cBlend
	0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, // ), vec4(0.,0.,0.
	0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4d, 0x75, // ,0.));.}.vec4 Mu
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // ltiply ( vec4 cB
	0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, // ase, vec4 cBlend
	0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, // , float percent)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, // .{.return cBase 
	0x2a, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, // * cBlend*percent
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, // ;.}.vec4 Overlay
	0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, //  ( vec4 cBase, v
	0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, // ec4 cBlend).{.ve
	0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, // c4 cNew = step(0
	0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, // .5, cBase);.cNew
	0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, //  = mix(cBase*cBl
	0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, // end*2.0, 1.0-2.0
	0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, // *(1.0-cBase)*(1.
	0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, // 0-cBlend), cNew)
	0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, // ;.return cNew;.}
	0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x48, 0x44, 0x52, // .vec4 OverlayHDR
	0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, //  ( vec4 cBase, v
	0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, // ec4 cBlend).{.ve
	0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, // c4 cNew = step(0
	0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, // .5, cBase);.cNew
	0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, //  = max(mix(cBase
	0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, // *cBlend*2.0, 1.0
	0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, // -2.0*(1.0-cBase)
	0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, // *(1.0-cBlend), c
	0x4e, 0x65, 0x77, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, // New), vec4(0.,0.
	0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // ,0.,0.));.return
	0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, //  cNew;.}.vec3 co
	0x73, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x5f, 0x73, 0x61, 0x6d, // s_hemisphere_sam
	0x70, 0x6c, 0x65, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x66, // ple( vec2 t).{.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x68, 0x69, 0x20, 0x3d, 0x20, 0x74, 0x2e, 0x79, 0x20, 0x2a, // loat phi = t.y *
	0x20, 0x28, 0x32, 0x2e, 0x30, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, //  (2.0*3.14159265
	0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, // 3589793238462643
	0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // 3832795);.float 
	0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, // cosTheta = sqrt(
	0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // 1.0 - t.x);.floa
	0x74, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, // t sinTheta = sqr
	0x74, 0x28, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x70, // t(t.x);.float sp
	0x2c, 0x63, 0x70, 0x3b, 0x0a, 0x7b, 0x73, 0x70, 0x3d, 0x73, 0x69, 0x6e, 0x28, 0x70, 0x68, 0x69, // ,cp;.{sp=sin(phi
	0x29, 0x3b, 0x63, 0x70, 0x3d, 0x63, 0x6f, 0x73, 0x28, 0x70, 0x68, 0x69, 0x29, 0x3b, 0x7d, 0x3b, // );cp=cos(phi);};
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x63, 0x70, 0x20, // .return vec3(cp 
	0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x63, 0x6f, 0x73, 0x54, // * sinTheta, cosT
	0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x73, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, // heta, sp * sinTh
	0x65, 0x74, 0x61, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x6f, 0x74, // eta);.}.vec3 rot
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x70, // ate_to_vector_up
	0x70, 0x65, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x76, // per( vec3 vec, v
	0x65, 0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, // ec3 normal).{.if
	0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x3e, 0x20, 0x2d, 0x30, 0x2e, 0x39, // (normal.y > -0.9
	0x39, 0x39, 0x39, 0x39, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x20, // 9999).{.float h 
	0x3d, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x28, 0x31, 0x2e, 0x30, 0x2b, 0x6e, 0x6f, 0x72, 0x6d, 0x61, // = 1.0/(1.0+norma
	0x6c, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x20, 0x3d, // l.y);.float hz =
	0x20, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, //  h*normal.z;.flo
	0x61, 0x74, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x3d, 0x20, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, // at hzx = hz*norm
	0x61, 0x6c, 0x2e, 0x78, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, // al.x;.return vec
	0x33, 0x28, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, // 3(.vec.x * (norm
	0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, // al.y+hz*normal.z
	0x29, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, // ) + vec.y * norm
	0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x68, // al.x - vec.z * h
	0x7a, 0x78, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, // zx,.vec.y * norm
	0x61, 0x6c, 0x2e, 0x79, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x6e, // al.y - vec.x * n
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, // ormal.x - vec.z 
	0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, // * normal.z,.vec.
	0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x20, 0x2d, 0x20, 0x76, // y * normal.z - v
	0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, // ec.x * hzx + vec
	0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, // .z * (normal.y+h
	0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, // *normal.x*normal
	0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x72, 0x65, 0x74, // .x));.}.else ret
	0x75, 0x72, 0x6e, 0x20, 0x2d, 0x76, 0x65, 0x63, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, // urn -vec;.}.unif
	0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // orm vec4 Stereo_
	0x53, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // Saturation;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // orm vec4 Stereo_
	0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x3b, 0x0a, 0x75, 0x6e, // MS_ZPD_YAxis;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x20, // iform sampler2D 
	0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x3b, 0x0a, 0x75, // tex_stereo_fb;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, // niform sampler2D
	0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, //  tex_stereo_dept
	0x68, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // h;.uniform vec4 
	0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, // w_h_height;.vec3
	0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x28, //  gatherEyeColor(
	0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x69, 0x73, 0x4c, // vec2 u, bool isL
	0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x79, 0x61, 0x78, 0x69, // eft).{.bool yaxi
	0x73, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, // s = (Stereo_MS_Z
	0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x7a, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, // PD_YAxis.z != 0.
	0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, // );.float MaxSepa
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // ration = (Stereo
	0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, // _MS_ZPD_YAxis.x)
	0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, 0x0a, // ;.if (isLeft).{.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, // float lminDepth 
	0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // = min(min(textur
	0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // eLod(tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, // depth, u + (yaxi
	0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, // s ? vec2(0.0, 0.
	0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // 500 * MaxSeparat
	0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, // ion) : vec2(0.50
	0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, // 0 * MaxSeparatio
	0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, // n, 0.0)), 0.0).x
	0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, // ,.textureLod(tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, // _stereo_depth, u
	0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, //  + (yaxis ? vec2
	0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, // (0.0, 0.666 * Ma
	0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, // xSeparation) : v
	0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, // ec2(0.666 * MaxS
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, // eparation, 0.0))
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, // , 0.0).x),.textu
	0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // reLod(tex_stereo
	0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, // _depth, u + (yax
	0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, // is ? vec2(0.0, M
	0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, // axSeparation) : 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // vec2( MaxSeparat
	0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // ion, 0.0)), 0.0)
	0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x70, 0x61, 0x72, 0x61, // .x);.float lpara
	0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, // llax = max(0.0, 
	0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, // w_h_height.w + M
	0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, // axSeparation * (
	0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, // 1.0 - 1.0 / (0.5
	0x20, 0x2b, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, //  + lminDepth * (
	0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, // 1.0 / (Stereo_MS
	0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, // _ZPD_YAxis.y) - 
	0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // 0.5))));.return 
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, // textureLod(tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, // tereo_fb, u + (y
	0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, // axis ? vec2(0.0,
	0x20, 0x2d, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, //  -lparallax) : v
	0x65, 0x63, 0x32, 0x28, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, // ec2(lparallax, 0
	0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, // .0)), 0.0).xyz;.
	0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, // }.else.{.float r
	0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, // minDepth = min(m
	0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, // in(textureLod(te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, // x_stereo_depth, 
	0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, // u - (yaxis ? vec
	0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, // 2(0.0, 0.500 * M
	0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, // axSeparation) : 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, // vec2(0.500 * Max
	0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // Separation, 0.0)
	0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, // ), 0.0).x,.textu
	0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // reLod(tex_stereo
	0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, // _depth, u - (yax
	0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, // is ? vec2(0.0, 0
	0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, // .666 * MaxSepara
	0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, // tion) : vec2(0.6
	0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // 66 * MaxSeparati
	0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, // on, 0.0)), 0.0).
	0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, // x),.textureLod(t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, // ex_stereo_depth,
	0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, //  u - (yaxis ? ve
	0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, // c2(0.0, MaxSepar
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, // ation) : vec2( M
	0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, // axSeparation, 0.
	0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, // 0)), 0.0).x);.fl
	0x6f, 0x61, 0x74, 0x20, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, // oat rparallax = 
	0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, // max(0.0, w_h_hei
	0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, // ght.w + MaxSepar
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, // ation * (1.0 - 1
	0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x6d, 0x69, 0x6e, // .0 / (0.5 + rmin
	0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, // Depth * (1.0 / (
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, // Stereo_MS_ZPD_YA
	0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, // xis.y) - 0.5))))
	0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // ;.return texture
	0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, // Lod(tex_stereo_f
	0x62, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, // b, u - (yaxis ? 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x72, 0x70, 0x61, 0x72, 0x61, // vec2(0.0, -rpara
	0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x72, 0x70, 0x61, // llax) : vec2(rpa
	0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, // rallax, 0.0)), 0
	0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, // .0).xyz;.}.}.voi
	0x64, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x69, 0x67, 0x68, // d gatherLeftRigh
	0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, // tColors(vec2 u, 
	0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x63, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, // out vec3 lcol, o
	0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, // ut vec3 rcol).{.
	0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, // bool yaxis = (St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, // ereo_MS_ZPD_YAxi
	0x73, 0x2e, 0x7a, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // s.z != 0.);.floa
	0x74, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, // t MaxSeparation 
	0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, // = (Stereo_MS_ZPD
	0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // _YAxis.x);.float
	0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, //  lminDepth = min
	0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, // (min(textureLod(
	0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, // tex_stereo_depth
	0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, // , u + (yaxis ? v
	0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, // ec2(0.0, 0.500 *
	0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, //  MaxSeparation) 
	0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, // : vec2(0.500 * M
	0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, // axSeparation, 0.
	0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, // 0)), 0.0).x,.tex
	0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // tureLod(tex_ster
	0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, // eo_depth, u + (y
	0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, // axis ? vec2(0.0,
	0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, //  0.666 * MaxSepa
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, // ration) : vec2(0
	0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, // .666 * MaxSepara
	0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, // tion, 0.0)), 0.0
	0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, // ).x),.textureLod
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, // (tex_stereo_dept
	0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, // h, u + (yaxis ? 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // vec2(0.0, MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // aration) : vec2(
	0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, //  MaxSeparation, 
	0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, // 0.0)), 0.0).x);.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, // float lparallax 
	0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, // = max(0.0, w_h_h
	0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // eight.w + MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, // aration * (1.0 -
	0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x6c, 0x6d, //  1.0 / (0.5 + lm
	0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, // inDepth * (1.0 /
	0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, //  (Stereo_MS_ZPD_
	0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, // YAxis.y) - 0.5))
	0x29, 0x29, 0x3b, 0x0a, 0x6c, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, // ));.lcol = textu
	0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // reLod(tex_stereo
	0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, // _fb, u + (yaxis 
	0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x6c, 0x70, 0x61, // ? vec2(0.0, -lpa
	0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x6c, // rallax) : vec2(l
	0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, // parallax, 0.0)),
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, //  0.0).xyz;.float
	0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, //  rminDepth = min
	0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, // (min(textureLod(
	0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, // tex_stereo_depth
	0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, // , u - (yaxis ? v
	0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, // ec2(0.0, 0.500 *
	0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, //  MaxSeparation) 
	0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, // : vec2(0.500 * M
	0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, // axSeparation, 0.
	0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, // 0)), 0.0).x,.tex
	0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // tureLod(tex_ster
	0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, // eo_depth, u - (y
	0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, // axis ? vec2(0.0,
	0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, //  0.666 * MaxSepa
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, // ration) : vec2(0
	0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, // .666 * MaxSepara
	0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, // tion, 0.0)), 0.0
	0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, // ).x),.textureLod
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, // (tex_stereo_dept
	0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, // h, u - (yaxis ? 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // vec2(0.0, MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // aration) : vec2(
	0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, //  MaxSeparation, 
	0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, // 0.0)), 0.0).x);.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, // float rparallax 
	0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, // = max(0.0, w_h_h
	0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // eight.w + MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, // aration * (1.0 -
	0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x6d, //  1.0 / (0.5 + rm
	0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, // inDepth * (1.0 /
	0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, //  (Stereo_MS_ZPD_
	0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, // YAxis.y) - 0.5))
	0x29, 0x29, 0x3b, 0x0a, 0x72, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, // ));.rcol = textu
	0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // reLod(tex_stereo
	0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, // _fb, u - (yaxis 
	0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x72, 0x70, 0x61, // ? vec2(0.0, -rpa
	0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x72, // rallax) : vec2(r
	0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, // parallax, 0.0)),
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, //  0.0).xyz;.}.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // form mat4 Stereo
	0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // _LeftMat;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, // m mat4 Stereo_Ri
	0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // ghtMat;.uniform 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, // vec4 Stereo_Left
	0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, // Luminance_Gamma;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, // .uniform vec4 St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, // ereo_RightLumina
	0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x3b, 0x0a, 0x76, 0x6f, // nce_DynDesat;.vo
	0x69, 0x64, 0x20, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x65, 0x73, 0x61, 0x74, 0x41, // id DynamicDesatA
	0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, // naglyph( vec3 lC
	0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, // ol, vec3 rCol, o
	0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, // ut vec3 lDesatCo
	0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x44, 0x65, 0x73, // l, out vec3 rDes
	0x61, 0x74, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, // atCol).{.float l
	0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, // eft2LeftLum = do
	0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, // t(lCol, Stereo_L
	0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, // eftLuminance_Gam
	0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, // ma.xyz);.float l
	0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, // eft2RightLum = d
	0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // ot(lCol, Stereo_
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, // RightLuminance_D
	0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, // ynDesat.xyz);.fl
	0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, // oat right2LeftLu
	0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, // m = dot(rCol, St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, // ereo_LeftLuminan
	0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, // ce_Gamma.xyz);.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, // loat right2Right
	0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // Lum = dot(rCol, 
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, // Stereo_RightLumi
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x78, // nance_DynDesat.x
	0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x4c, // yz);.float leftL
	0x75, 0x6d, 0x20, 0x3d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, // um = left2LeftLu
	0x6d, 0x20, 0x2b, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // m + left2RightLu
	0x6d, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // m;.float rightLu
	0x6d, 0x20, 0x3d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, // m = right2LeftLu
	0x6d, 0x20, 0x2b, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, // m + right2RightL
	0x75, 0x6d, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, // um;.float leftDe
	0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, // sat = Stereo_Rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, // htLuminance_DynD
	0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x6c, 0x65, // esat.w * abs((le
	0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x6c, 0x65, 0x66, // ft2LeftLum - lef
	0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, // t2RightLum) / (l
	0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, // eftLum + 0.0001)
	0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, // );.float rightDe
	0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, // sat = Stereo_Rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, // htLuminance_DynD
	0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x72, 0x69, // esat.w * abs((ri
	0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x72, 0x69, // ght2LeftLum - ri
	0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, // ght2RightLum) / 
	0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, // (rightLum + 0.00
	0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, // 01));.lDesatCol 
	0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, // = mix(lCol, vec3
	0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, // _splat(leftLum),
	0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x72, 0x44, 0x65, //  leftDesat);.rDe
	0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x72, 0x43, 0x6f, // satCol = mix(rCo
	0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x72, 0x69, // l, vec3_splat(ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, // ghtLum), rightDe
	0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x4c, 0x69, 0x6e, // sat);.}.vec3 Lin
	0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, 0x63, // earAnaglyph( vec
	0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, // 3 lCol, vec3 rCo
	0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, // l).{.vec3 color 
	0x3d, 0x20, 0x28, 0x28, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, // = (( (vec4(lCol,
	0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, //  1.)) * (Stereo_
	0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x20, 0x28, // LeftMat) ) + ( (
	0x76, 0x65, 0x63, 0x34, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, // vec4(rCol, 1.)) 
	0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, // * (Stereo_RightM
	0x61, 0x74, 0x29, 0x20, 0x29, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // at) )).rgb;.retu
	0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, // rn color;.}.unif
	0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // orm vec4 Stereo_
	0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, 0x6e, // DeghostGamma;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // iform mat4 Stere
	0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3b, // o_DeghostFilter;
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x6e, 0x61, // .vec3 DeghostAna
	0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, // glyph( vec3 lCol
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x76, // , vec3 rCol).{.v
	0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, 0x6e, 0x65, // ec3 color = Line
	0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, // arAnaglyph(lCol,
	0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, //  rCol);.return (
	0x20, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x53, 0x74, 0x65, //  (pow(color, Ste
	0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, // reo_DeghostGamma
	0x2e, 0x72, 0x67, 0x62, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x53, // .rgb)) * (mat3(S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, // tereo_DeghostFil
	0x74, 0x65, 0x72, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, // ter[0].xyz, Ster
	0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, // eo_DeghostFilter
	0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // [1].xyz, Stereo_
	0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x32, 0x5d, // DeghostFilter[2]
	0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, 0x64, // .xyz)) );.}.void
	0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, //  main().{.vec3 l
	0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x3b, 0x0a, 0x67, 0x61, 0x74, 0x68, 0x65, // Col, rCol;.gathe
	0x72, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, // rLeftRightColors
	0x28, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2c, 0x20, 0x6c, 0x43, // (v_texcoord0, lC
	0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x6c, 0x43, 0x6f, 0x6c, 0x20, // ol, rCol);.lCol 
	0x3d, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x29, // = InvGamma(lCol)
	0x3b, 0x0a, 0x72, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, // ;.rCol = InvGamm
	0x61, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, // a(rCol);.vec3 co
	0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, // lor = LinearAnag
	0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, // lyph(lCol, rCol)
	0x3b, 0x0a, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, // ;.bgfx_FragColor
	0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, //  = vec4(FBGamma(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // color), 1.0);.}.
	0x00,                                                                                           // .
};
static const uint8_t fs_pp_stereo_anaglyph_lin_srgb_nodesat_glsl[11027] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, // FSH.o.><.......+
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x34, 0x34, 0x30, 0x0a, 0x6f, // ..#version 440.o
	0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, // ut vec4 bgfx_Fra
	0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, // gColor;.#define 
	0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x62, 0x67, 0x66, // gl_FragColor bgf
	0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x0a, 0x23, 0x64, 0x65, 0x66, // x_FragColor.#def
	0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x20, 0x20, 0x20, // ine texture2D   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x0a, 0x23, //        texture.#
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, // define texture2D
	0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // Lod       textur
	0x65, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, // eLod.#define tex
	0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ture2DGrad      
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, // textureGrad.#def
	0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, // ine texture2DPro
	0x6a, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, // jLod   texturePr
	0x6f, 0x6a, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, // ojLod.#define te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, 0x20, // xture2DProjGrad 
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, //  textureProjGrad
	0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // .#define texture
	0x43, 0x75, 0x62, 0x65, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, // CubeLod     text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, // ureLod.#define t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, // extureCubeGrad  
	0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, //   textureGrad.#d
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x33, 0x44, 0x20, // efine texture3D 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, //          texture
	0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // .#define texture
	0x32, 0x44, 0x4c, 0x6f, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x20, 0x74, 0x65, 0x78, 0x74, // 2DLodOffset text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x0a, 0x23, 0x64, 0x65, // ureLodOffset.#de
	0x66, 0x69, 0x6e, 0x65, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x69, // fine attribute i
	0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, // n.#define varyin
	0x67, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x62, 0x67, 0x66, // g in.#define bgf
	0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, // xShadow2D(_sampl
	0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, // er, _coord)     
	0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, // vec4_splat(textu
	0x72, 0x65, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, // re(_sampler, _co
	0x6f, 0x72, 0x64, 0x29, 0x20, 0x29, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x62, // ord) ).#define b
	0x67, 0x66, 0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x28, // gfxShadow2DProj(
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, // _sampler, _coord
	0x29, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, // ) vec4_splat(tex
	0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // tureProj(_sample
	0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x29, 0x0a, 0x76, 0x61, 0x72, // r, _coord) ).var
	0x79, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, // ying vec2 v_texc
	0x6f, 0x6f, 0x72, 0x64, 0x30, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, // oord0;.vec3 inst
	0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, // Mul(vec3 _vec, m
	0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // at3 _mtx) { retu
	0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, // rn ( (_vec) * (_
	0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, // mtx) ); }.vec3 i
	0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, // nstMul(mat3 _mtx
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, // , vec3 _vec) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, // eturn ( (_mtx) *
	0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, //  (_vec) ); }.vec
	0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, // 4 instMul(vec4 _
	0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, // vec, mat4 _mtx) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, // { return ( (_vec
	0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, // ) * (_mtx) ); }.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, // vec4 instMul(mat
	0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, // 4 _mtx, vec4 _ve
	0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, // c) { return ( (_
	0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, // mtx) * (_vec) );
	0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, 0x70, 0x28, 0x66, 0x6c, 0x6f, //  }.float rcp(flo
	0x61, 0x74, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // at _a) { return 
	0x31, 0x2e, 0x30, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, // 1.0/_a; }.vec2 r
	0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // cp(vec2 _a) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, // turn vec2(1.0)/_
	0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, // a; }.vec3 rcp(ve
	0x63, 0x33, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // c3 _a) { return 
	0x76, 0x65, 0x63, 0x33, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, // vec3(1.0)/_a; }.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x61, // vec4 rcp(vec4 _a
	0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, // ) { return vec4(
	0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, // 1.0)/_a; }.vec2 
	0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, // vec2_splat(float
	0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, //  _x) { return ve
	0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, // c2(_x, _x); }.ve
	0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, // c3 vec3_splat(fl
	0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // oat _x) { return
	0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, //  vec3(_x, _x, _x
	0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, // ); }.vec4 vec4_s
	0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, // plat(float _x) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, //  return vec4(_x,
	0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, //  _x, _x, _x); }.
	0x75, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, // uvec2 uvec2_spla
	0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // t(uint _x) { ret
	0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, // urn uvec2(_x, _x
	0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, // ); }.uvec3 uvec3
	0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, // _splat(uint _x) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, // { return uvec3(_
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, // x, _x, _x); }.uv
	0x65, 0x63, 0x34, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, // ec4 uvec4_splat(
	0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, // uint _x) { retur
	0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, // n uvec4(_x, _x, 
	0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, // _x, _x); }.mat4 
	0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, // mtxFromRows(vec4
	0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, //  _0, vec4 _1, ve
	0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, // c4 _2, vec4 _3).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, // {.return transpo
	0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, // se(mat4(_0, _1, 
	0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, // _2, _3) );.}.mat
	0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, // 4 mtxFromCols(ve
	0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, // c4 _0, vec4 _1, 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, // vec4 _2, vec4 _3
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x28, // ).{.return mat4(
	0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x3b, // _0, _1, _2, _3);
	0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, // .}.mat3 mtxFromR
	0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, // ows(vec3 _0, vec
	0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, // 3 _1, vec3 _2).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, // .return transpos
	0x65, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, // e(mat3(_0, _1, _
	0x32, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, // 2) );.}.mat3 mtx
	0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, // FromCols(vec3 _0
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // , vec3 _1, vec3 
	0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, // _2).{.return mat
	0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x3b, 0x0a, 0x7d, // 3(_0, _1, _2);.}
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, // .uniform vec4 u_
	0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // viewRect;.unifor
	0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x54, 0x65, 0x78, // m vec4 u_viewTex
	0x65, 0x6c, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, // el;.uniform mat4
	0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, //  u_view;.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x3b, //  mat4 u_invView;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, // .uniform mat4 u_
	0x70, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, // proj;.uniform ma
	0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, // t4 u_invProj;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, // iform mat4 u_vie
	0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, // wProj;.uniform m
	0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, // at4 u_invViewPro
	0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, // j;.uniform mat4 
	0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, 0x3b, 0x0a, 0x75, 0x6e, 0x69, // u_model[32];.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, // form mat4 u_mode
	0x6c, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, // lView;.uniform m
	0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x50, // at4 u_modelViewP
	0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, // roj;.uniform vec
	0x34, 0x20, 0x75, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x66, 0x34, 0x3b, 0x0a, 0x66, // 4 u_alphaRef4;.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // loat sqr( float 
	0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, // v).{.return v*v;
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, // .}.vec2 sqr( vec
	0x32, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, // 2 v).{.return v*
	0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x76, // v;.}.vec3 sqr( v
	0x65, 0x63, 0x33, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // ec3 v).{.return 
	0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6d, 0x75, 0x6c, 0x5f, // v*v;.}.vec3 mul_
	0x77, 0x31, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, // w1( vec3 v, mat4
	0x20, 0x6d, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2e, 0x78, //  m).{.return v.x
	0x2a, 0x6d, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x79, // *m[0].xyz + (v.y
	0x2a, 0x6d, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x7a, // *m[1].xyz + (v.z
	0x2a, 0x6d, 0x5b, 0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x6d, 0x5b, 0x33, 0x5d, // *m[2].xyz + m[3]
	0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // .xyz));.}.float 
	0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, // acos_approx_divP
	0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, // I( float v).{.fl
	0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, // oat x = abs(v);.
	0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, // if(1. - x <= 0.0
	0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, // 0006103515625).r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, // eturn (v >= 0.) 
	0x3f, 0x20, 0x30, 0x2e, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // ? 0. : 1.;.float
	0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, //  res = ((-0.1559
	0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, // 72/3.14159265358
	0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, // 9793238462643383
	0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, // 2795) * x + (1.5
	0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, // 6467/3.141592653
	0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, // 5897932384626433
	0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, // 832795) ) * sqrt
	0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // (1. - x);.return
	0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x72, 0x65, 0x73, //  (v >= 0.) ? res
	0x20, 0x3a, 0x20, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, //  : 1. - res;.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, // loat atan2_appro
	0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // x_div2PI( float 
	0x79, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, // y, float x).{.fl
	0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, // oat abs_y = abs(
	0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, // y);.float abs_x 
	0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x78, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x61, 0x62, 0x73, // = abs(x);.if(abs
	0x5f, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, // _x <= 0.00006103
	0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x20, 0x26, 0x26, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, // 515625 && abs_y 
	0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, // <= 0.00006103515
	0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x30, 0x2e, 0x3b, 0x0a, // 625).return 0.;.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, // float r = (abs_x
	0x20, 0x2d, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x61, 0x62, 0x73, //  - abs_y) / (abs
	0x5f, 0x78, 0x20, 0x2b, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, // _x + abs_y);.flo
	0x61, 0x74, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, // at angle = ((x <
	0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x28, 0x33, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x20, 0x3a, //  0.) ? (3./8.) :
	0x20, 0x28, 0x31, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x29, 0x0a, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x32, //  (1./8.)).+ (0.2
	0x31, 0x31, 0x38, 0x36, 0x38, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, // 11868 /(2.*3.141
	0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, // 5926535897932384
	0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, // 626433832795) * 
	0x72, 0x20, 0x2a, 0x20, 0x72, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x39, 0x38, 0x37, 0x33, 0x30, 0x35, // r * r - 0.987305
	0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, //  /(2.*3.14159265
	0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, // 3589793238462643
	0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x78, 0x20, // 3832795)) * ((x 
	0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x72, 0x20, 0x3a, 0x20, 0x72, 0x29, 0x3b, // < 0.) ? -r : r);
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x79, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, // .return (y < 0.)
	0x20, 0x3f, 0x20, 0x2d, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3a, 0x20, 0x61, 0x6e, 0x67, 0x6c, //  ? -angle : angl
	0x65, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x73, 0x69, 0x6e, 0x5f, // e;.}.float asin_
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, // approx_divPI( fl
	0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, // oat v).{.float x
	0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, //  = abs(v);.if(1.
	0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, //  - x <= 0.000061
	0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // 03515625).return
	0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, //  (v >= 0.) ? 0.5
	0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, //  : -0.5;.float r
	0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, // es = ((-0.155972
	0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, // /3.1415926535897
	0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, // 9323846264338327
	0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, // 95) * x + (1.564
	0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, // 67/3.14159265358
	0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, // 9793238462643383
	0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, // 2795) ) * sqrt(1
	0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // . - x);.return (
	0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x2d, // v >= 0.) ? 0.5 -
	0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x65, //  res : -0.5 + re
	0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x61, 0x79, 0x5f, 0x74, 0x6f, // s;.}.vec2 ray_to
	0x5f, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, // _equirectangular
	0x5f, 0x75, 0x76, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x61, 0x79, 0x29, 0x0a, 0x7b, // _uv( vec3 ray).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x0a, 0x30, 0x2e, // .return vec2(.0.
	0x35, 0x20, 0x2b, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, // 5 + atan2_approx
	0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x79, 0x2c, 0x20, 0x72, // _div2PI(ray.y, r
	0x61, 0x79, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, // ay.x),.acos_appr
	0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x7a, 0x29, 0x29, // ox_divPI(ray.z))
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, // ;.}.float InvsRG
	0x42, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, // B( float color).
	0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, // {.if (color <= 0
	0x2e, 0x30, 0x34, 0x30, 0x34, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, // .04045).return c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x32, 0x2e, 0x39, // olor * (1.0/12.9
	0x32, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // 2);.else.return 
	0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, // pow(color * (1.0
	0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x35, 0x35, // /1.055) + (0.055
	0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x29, 0x3b, 0x0a, 0x7d, // /1.055), 2.4);.}
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, // .float InvRec709
	0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, // ( float color).{
	0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, // .if (color <= 0.
	0x30, 0x38, 0x31, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // 081).return colo
	0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x34, 0x2e, 0x35, 0x29, 0x3b, 0x0a, 0x65, // r * (1.0/4.5);.e
	0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, // lse.return pow(c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x39, // olor * (1.0/1.09
	0x39, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x2f, 0x31, 0x2e, 0x30, 0x39, // 9) + (0.099/1.09
	0x39, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x3b, 0x0a, 0x7d, // 9), 1.0/0.45);.}
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, // .float InvGamma(
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, //  float color).{.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, // return InvsRGB(c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, // olor);.}.vec3 In
	0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, // vGamma( vec3 col
	0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, // or).{.return vec
	0x33, 0x28, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // 3(InvGamma(color
	0x2e, 0x78, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, // .x),InvGamma(col
	0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, // or.y),InvGamma(c
	0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, // olor.z));.}.vec3
	0x20, 0x49, 0x6e, 0x76, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, //  InvToneMap( vec
	0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // 3 color).{.float
	0x20, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x30, 0x2e, 0x35, 0x2f, 0x30, //  inv_2bh = 0.5/0
	0x2e, 0x32, 0x35, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x68, 0x20, 0x3d, 0x20, // .25;.float bh = 
	0x34, 0x2e, 0x30, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2d, 0x20, 0x32, 0x2e, 0x30, 0x3b, 0x0a, // 4.0*0.25 - 2.0;.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2d, 0x20, // return (color - 
	0x31, 0x2e, 0x30, 0x20, 0x2b, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // 1.0 + sqrt(color
	0x2a, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x20, 0x62, 0x68, 0x29, 0x20, 0x2b, 0x20, // *(color + bh) + 
	0x31, 0x2e, 0x30, 0x29, 0x29, 0x2a, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x3b, 0x0a, 0x7d, // 1.0))*inv_2bh;.}
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x20, 0x66, 0x6c, 0x6f, // .float sRGB( flo
	0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, // at f).{.float s;
	0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x33, 0x31, // .if (f <= 0.0031
	0x33, 0x30, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x20, 0x2a, // 308).s = 12.92 *
	0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, //  f;.else.s = 1.0
	0x35, 0x35, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, // 55 * pow(f, 1.0/
	0x32, 0x2e, 0x34, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x3b, 0x0a, 0x72, 0x65, // 2.4) - 0.055;.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // turn s;.}.float 
	0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, // Rec709( float f)
	0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, // .{.float s;.if (
	0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, // f <= 0.018).s = 
	0x34, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, // 4.5 * f;.else.s 
	0x3d, 0x20, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, // = 1.099 * pow(f,
	0x20, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x3b, 0x0a, //  0.45) - 0.099;.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // return s;.}.floa
	0x74, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // t FBGamma( float
	0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, //  color).{.return
	0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, //  sRGB(color);.}.
	0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, // vec2 FBGamma( ve
	0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, // c2 color).{.retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, // rn vec2(FBGamma(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, // color.x),FBGamma
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // (color.y));.}.ve
	0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, // c3 FBGamma( vec3
	0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, //  color).{.return
	0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, //  vec3(FBGamma(co
	0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, // lor.x),FBGamma(c
	0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, // olor.y),FBGamma(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // color.z));.}.vec
	0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x32, 0x32, 0x28, 0x20, 0x76, 0x65, 0x63, // 3 FBGamma22( vec
	0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // 3 color).{.retur
	0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // n vec3(pow(color
	0x2e, 0x78, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, // .x, 1.0/2.2),pow
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, // (color.y, 1.0/2.
	0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x2c, 0x20, // 2),pow(color.z, 
	0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // 1.0/2.2));.}.flo
	0x61, 0x74, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x66, 0x6c, // at FBToneMap( fl
	0x6f, 0x61, 0x74, 0x20, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // oat l).{.return 
	0x6c, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, // l * ((l*0.25 + 1
	0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, // .0) / (l + 1.0))
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, // ;.}.vec2 FBToneM
	0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, // ap( vec2 color).
	0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, // {.float l = dot(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, // color,vec2(0.176
	0x32, 0x30, 0x34, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, // 204+0.0108109*0.
	0x35, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, // 5,0.812985+0.010
	0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // 8109*0.5));.retu
	0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, // rn color * ((l*0
	0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, // .25 + 1.0) / (l 
	0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // + 1.0));.}.vec3 
	0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // FBToneMap( vec3 
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, // color).{.float l
	0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, //  = dot(color,vec
	0x33, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, // 3(0.176204,0.812
	0x39, 0x38, 0x35, 0x2c, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x29, 0x29, 0x3b, // 985,0.0108109));
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, // .return color * 
	0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, // ((l*0.25 + 1.0) 
	0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // / (l + 1.0));.}.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x28, 0x20, 0x76, // vec4 Additive( v
	0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // ec4 cBase, vec4 
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, // cBlend, float pe
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // rcent).{.return 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2b, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, // cBase + cBlend*p
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, // ercent;.}.vec3 S
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, // creen ( vec3 cBa
	0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, // se, vec3 cBlend)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, // .{.return 1.0 - 
	0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, // (1.0 - cBase) * 
	0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, // (1.0 - cBlend);.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x20, // }.vec4 Screen ( 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // vec4 cBase, vec4
	0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, //  cBlend).{.retur
	0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, // n 1.0 - (1.0 - c
	0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, // Base) * (1.0 - c
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, // Blend);.}.vec3 S
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // creenHDR ( vec3 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, // cBase, vec3 cBle
	0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, // nd).{.return max
	0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, // (1.0 - (1.0 - cB
	0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, // ase) * (1.0 - cB
	0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x2c, 0x30, // lend), vec3(0.,0
	0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, // .,0.));.}.vec4 S
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // creenHDR ( vec4 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, // cBase, vec4 cBle
	0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, // nd).{.return max
	0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, // (1.0 - (1.0 - cB
	0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, // ase) * (1.0 - cB
	0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, // lend), vec4(0.,0
	0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // .,0.,0.));.}.vec
	0x34, 0x20, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, // 4 Multiply ( vec
	0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // 4 cBase, vec4 cB
	0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, // lend, float perc
	0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, // ent).{.return cB
	0x61, 0x73, 0x65, 0x20, 0x2a, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, // ase * cBlend*per
	0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, // cent;.}.vec4 Ove
	0x72, 0x6c, 0x61, 0x79, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, // rlay ( vec4 cBas
	0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, // e, vec4 cBlend).
	0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, // {.vec4 cNew = st
	0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, // ep(0.5, cBase);.
	0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, // cNew = mix(cBase
	0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, // *cBlend*2.0, 1.0
	0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, // -2.0*(1.0-cBase)
	0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, // *(1.0-cBlend), c
	0x4e, 0x65, 0x77, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, // New);.return cNe
	0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, // w;.}.vec4 Overla
	0x79, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, // yHDR ( vec4 cBas
	0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, // e, vec4 cBlend).
	0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, // {.vec4 cNew = st
	0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, // ep(0.5, cBase);.
	0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x6d, 0x69, 0x78, 0x28, 0x63, // cNew = max(mix(c
	0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, // Base*cBlend*2.0,
	0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, //  1.0-2.0*(1.0-cB
	0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, // ase)*(1.0-cBlend
	0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, // ), cNew), vec4(0
	0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, // .,0.,0.,0.));.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // turn cNew;.}.vec
	0x33, 0x20, 0x63, 0x6f, 0x73, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, // 3 cos_hemisphere
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x29, // _sample( vec2 t)
	0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x68, 0x69, 0x20, 0x3d, 0x20, 0x74, // .{.float phi = t
	0x2e, 0x79, 0x20, 0x2a, 0x20, 0x28, 0x32, 0x2e, 0x30, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, // .y * (2.0*3.1415
	0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, // 9265358979323846
	0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x3b, 0x0a, 0x66, 0x6c, // 26433832795);.fl
	0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, // oat cosTheta = s
	0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, // qrt(1.0 - t.x);.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, // float sinTheta =
	0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, //  sqrt(t.x);.floa
	0x74, 0x20, 0x73, 0x70, 0x2c, 0x63, 0x70, 0x3b, 0x0a, 0x7b, 0x73, 0x70, 0x3d, 0x73, 0x69, 0x6e, // t sp,cp;.{sp=sin
	0x28, 0x70, 0x68, 0x69, 0x29, 0x3b, 0x63, 0x70, 0x3d, 0x63, 0x6f, 0x73, 0x28, 0x70, 0x68, 0x69, // (phi);cp=cos(phi
	0x29, 0x3b, 0x7d, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, // );};.return vec3
	0x28, 0x63, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, // (cp * sinTheta, 
	0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x73, 0x70, 0x20, 0x2a, 0x20, 0x73, // cosTheta, sp * s
	0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, // inTheta);.}.vec3
	0x20, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, //  rotate_to_vecto
	0x72, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, // r_upper( vec3 ve
	0x63, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x29, 0x0a, // c, vec3 normal).
	0x7b, 0x0a, 0x69, 0x66, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x3e, 0x20, // {.if(normal.y > 
	0x2d, 0x30, 0x2e, 0x39, 0x39, 0x39, 0x39, 0x39, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // -0.99999).{.floa
	0x74, 0x20, 0x68, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x28, 0x31, 0x2e, 0x30, 0x2b, 0x6e, // t h = 1.0/(1.0+n
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // ormal.y);.float 
	0x68, 0x7a, 0x20, 0x3d, 0x20, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x3b, // hz = h*normal.z;
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x3d, 0x20, 0x68, 0x7a, 0x2a, // .float hzx = hz*
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // normal.x;.return
	0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x28, //  vec3(.vec.x * (
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, // normal.y+hz*norm
	0x61, 0x6c, 0x2e, 0x7a, 0x29, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, // al.z) + vec.y * 
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, // normal.x - vec.z
	0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, //  * hzx,.vec.y * 
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, // normal.y - vec.x
	0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, //  * normal.x - ve
	0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x2c, 0x0a, // c.z * normal.z,.
	0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, // vec.y * normal.z
	0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x2b, //  - vec.x * hzx +
	0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, //  vec.z * (normal
	0x2e, 0x79, 0x2b, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x2a, 0x6e, 0x6f, // .y+h*normal.x*no
	0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, // rmal.x));.}.else
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x2d, 0x76, 0x65, 0x63, 0x3b, 0x0a, 0x7d, 0x0a, //  return -vec;.}.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, // uniform vec4 Ste
	0x72, 0x65, 0x6f, 0x5f, 0x53, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x0a, // reo_Saturation;.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, // uniform vec4 Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, // reo_MS_ZPD_YAxis
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // ;.uniform sample
	0x72, 0x32, 0x44, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, // r2D tex_stereo_f
	0x62, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, // b;.uniform sampl
	0x65, 0x72, 0x32, 0x44, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // er2D tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, // depth;.uniform v
	0x65, 0x63, 0x34, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, // ec4 w_h_height;.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, // vec3 gatherEyeCo
	0x6c, 0x6f, 0x72, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, // lor(vec2 u, bool
	0x20, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x20, //  isLeft).{.bool 
	0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // yaxis = (Stereo_
	0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x7a, 0x20, 0x21, // MS_ZPD_YAxis.z !
	0x3d, 0x20, 0x30, 0x2e, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x4d, 0x61, 0x78, // = 0.);.float Max
	0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, // Separation = (St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, // ereo_MS_ZPD_YAxi
	0x73, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, // s.x);.if (isLeft
	0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, // ).{.float lminDe
	0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, // pth = min(min(te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, // xtureLod(tex_ste
	0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, // reo_depth, u + (
	0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, // yaxis ? vec2(0.0
	0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // , 0.500 * MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // aration) : vec2(
	0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, // 0.500 * MaxSepar
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, // ation, 0.0)), 0.
	0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, // 0).x,.textureLod
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, // (tex_stereo_dept
	0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, // h, u + (yaxis ? 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, // vec2(0.0, 0.666 
	0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, // * MaxSeparation)
	0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, //  : vec2(0.666 * 
	0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, // MaxSeparation, 0
	0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, // .0)), 0.0).x),.t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // extureLod(tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, // ereo_depth, u + 
	0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, // (yaxis ? vec2(0.
	0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, // 0, MaxSeparation
	0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // ) : vec2( MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, // aration, 0.0)), 
	0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, // 0.0).x);.float l
	0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, // parallax = max(0
	0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, // .0, w_h_height.w
	0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, //  + MaxSeparation
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, //  * (1.0 - 1.0 / 
	0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, // (0.5 + lminDepth
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, //  * (1.0 / (Stere
	0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, // o_MS_ZPD_YAxis.y
	0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, // ) - 0.5))));.ret
	0x75, 0x72, 0x6e, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, // urn textureLod(t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, // ex_stereo_fb, u 
	0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // + (yaxis ? vec2(
	0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, // 0.0, -lparallax)
	0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, //  : vec2(lparalla
	0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, // x, 0.0)), 0.0).x
	0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, // yz;.}.else.{.flo
	0x61, 0x74, 0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, // at rminDepth = m
	0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, // in(min(textureLo
	0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, // d(tex_stereo_dep
	0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, // th, u - (yaxis ?
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, //  vec2(0.0, 0.500
	0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, //  * MaxSeparation
	0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, // ) : vec2(0.500 *
	0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, //  MaxSeparation, 
	0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, // 0.0)), 0.0).x,.t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // extureLod(tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, // ereo_depth, u - 
	0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, // (yaxis ? vec2(0.
	0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, // 0, 0.666 * MaxSe
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, // paration) : vec2
	0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, // (0.666 * MaxSepa
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, // ration, 0.0)), 0
	0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, // .0).x),.textureL
	0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, // od(tex_stereo_de
	0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, // pth, u - (yaxis 
	0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, // ? vec2(0.0, MaxS
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, // eparation) : vec
	0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, // 2( MaxSeparation
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, // , 0.0)), 0.0).x)
	0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, // ;.float rparalla
	0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, // x = max(0.0, w_h
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, // _height.w + MaxS
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, // eparation * (1.0
	0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, //  - 1.0 / (0.5 + 
	0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, // rminDepth * (1.0
	0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, //  / (Stereo_MS_ZP
	0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, // D_YAxis.y) - 0.5
	0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x65, 0x78, // ))));.return tex
	0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // tureLod(tex_ster
	0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, // eo_fb, u - (yaxi
	0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x72, // s ? vec2(0.0, -r
	0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, // parallax) : vec2
	0x28, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // (rparallax, 0.0)
	0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x7d, // ), 0.0).xyz;.}.}
	0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, // .void gatherLeft
	0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x28, 0x76, 0x65, 0x63, 0x32, // RightColors(vec2
	0x20, 0x75, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x63, 0x6f, //  u, out vec3 lco
	0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x6f, 0x6c, // l, out vec3 rcol
	0x29, 0x0a, 0x7b, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3d, // ).{.bool yaxis =
	0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, //  (Stereo_MS_ZPD_
	0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x7a, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x3b, 0x0a, // YAxis.z != 0.);.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // float MaxSeparat
	0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, // ion = (Stereo_MS
	0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, // _ZPD_YAxis.x);.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, // loat lminDepth =
	0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, //  min(min(texture
	0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, // Lod(tex_stereo_d
	0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, // epth, u + (yaxis
	0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, //  ? vec2(0.0, 0.5
	0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // 00 * MaxSeparati
	0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, // on) : vec2(0.500
	0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, //  * MaxSeparation
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, // , 0.0)), 0.0).x,
	0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, // .textureLod(tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, // stereo_depth, u 
	0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // + (yaxis ? vec2(
	0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, // 0.0, 0.666 * Max
	0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, // Separation) : ve
	0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, // c2(0.666 * MaxSe
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, // paration, 0.0)),
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, //  0.0).x),.textur
	0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // eLod(tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, // depth, u + (yaxi
	0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, // s ? vec2(0.0, Ma
	0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, // xSeparation) : v
	0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // ec2( MaxSeparati
	0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, // on, 0.0)), 0.0).
	0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, // x);.float lparal
	0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, // lax = max(0.0, w
	0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, // _h_height.w + Ma
	0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, // xSeparation * (1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, // .0 - 1.0 / (0.5 
	0x2b, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, // + lminDepth * (1
	0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, // .0 / (Stereo_MS_
	0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, // ZPD_YAxis.y) - 0
	0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x6c, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, // .5))));.lcol = t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // extureLod(tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, // ereo_fb, u + (ya
	0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, // xis ? vec2(0.0, 
	0x2d, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, // -lparallax) : ve
	0x63, 0x32, 0x28, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, // c2(lparallax, 0.
	0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x66, // 0)), 0.0).xyz;.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, // loat rminDepth =
	0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, //  min(min(texture
	0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, // Lod(tex_stereo_d
	0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, // epth, u - (yaxis
	0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, //  ? vec2(0.0, 0.5
	0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // 00 * MaxSeparati
	0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, // on) : vec2(0.500
	0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, //  * MaxSeparation
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, // , 0.0)), 0.0).x,
	0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, // .textureLod(tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, // stereo_depth, u 
	0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // - (yaxis ? vec2(
	0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, // 0.0, 0.666 * Max
	0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, // Separation) : ve
	0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, // c2(0.666 * MaxSe
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, // paration, 0.0)),
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, //  0.0).x),.textur
	0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // eLod(tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, // depth, u - (yaxi
	0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, // s ? vec2(0.0, Ma
	0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, // xSeparation) : v
	0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // ec2( MaxSeparati
	0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, // on, 0.0)), 0.0).
	0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, // x);.float rparal
	0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, // lax = max(0.0, w
	0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, // _h_height.w + Ma
	0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, // xSeparation * (1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, // .0 - 1.0 / (0.5 
	0x2b, 0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, // + rminDepth * (1
	0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, // .0 / (Stereo_MS_
	0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, // ZPD_YAxis.y) - 0
	0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, // .5))));.rcol = t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // extureLod(tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, // ereo_fb, u - (ya
	0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, // xis ? vec2(0.0, 
	0x2d, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, // -rparallax) : ve
	0x63, 0x32, 0x28, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, // c2(rparallax, 0.
	0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, // 0)), 0.0).xyz;.}
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, // .uniform mat4 St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, // ereo_LeftMat;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // iform mat4 Stere
	0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // o_RightMat;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // orm vec4 Stereo_
	0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, // LeftLuminance_Ga
	0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, // mma;.uniform vec
	0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // 4 Stereo_RightLu
	0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, // minance_DynDesat
	0x3b, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x65, // ;.void DynamicDe
	0x73, 0x61, 0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, 0x63, // satAnaglyph( vec
	0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, // 3 lCol, vec3 rCo
	0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x44, 0x65, 0x73, // l, out vec3 lDes
	0x61, 0x74, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // atCol, out vec3 
	0x72, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, // rDesatCol).{.flo
	0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, // at left2LeftLum 
	0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, // = dot(lCol, Ster
	0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, // eo_LeftLuminance
	0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, // _Gamma.xyz);.flo
	0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, // at left2RightLum
	0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, //  = dot(lCol, Ste
	0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, // reo_RightLuminan
	0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, // ce_DynDesat.xyz)
	0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, // ;.float right2Le
	0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, // ftLum = dot(rCol
	0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // , Stereo_LeftLum
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, // inance_Gamma.xyz
	0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, // );.float right2R
	0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, // ightLum = dot(rC
	0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, // ol, Stereo_Right
	0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, // Luminance_DynDes
	0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, // at.xyz);.float l
	0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, // eftLum = left2Le
	0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, // ftLum + left2Rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, // htLum;.float rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, // htLum = right2Le
	0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, // ftLum + right2Ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, // ghtLum;.float le
	0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // ftDesat = Stereo
	0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, // _RightLuminance_
	0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, // DynDesat.w * abs
	0x28, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, // ((left2LeftLum -
	0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, //  left2RightLum) 
	0x2f, 0x20, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, // / (leftLum + 0.0
	0x30, 0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, // 001));.float rig
	0x68, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // htDesat = Stereo
	0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, // _RightLuminance_
	0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, // DynDesat.w * abs
	0x28, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, // ((right2LeftLum 
	0x2d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, // - right2RightLum
	0x29, 0x20, 0x2f, 0x20, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, // ) / (rightLum + 
	0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, // 0.0001));.lDesat
	0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // Col = mix(lCol, 
	0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, // vec3_splat(leftL
	0x75, 0x6d, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, // um), leftDesat);
	0x0a, 0x72, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, // .rDesatCol = mix
	0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, // (rCol, vec3_spla
	0x74, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, 0x72, 0x69, 0x67, // t(rightLum), rig
	0x68, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, // htDesat);.}.vec3
	0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, //  LinearAnaglyph(
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, //  vec3 lCol, vec3
	0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, //  rCol).{.vec3 co
	0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x6c, // lor = (( (vec4(l
	0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, // Col, 1.)) * (Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x20, 0x2b, // reo_LeftMat) ) +
	0x20, 0x28, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, //  ( (vec4(rCol, 1
	0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, // .)) * (Stereo_Ri
	0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, // ghtMat) )).rgb;.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x7d, 0x0a, // return color;.}.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, // uniform vec4 Ste
	0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, // reo_DeghostGamma
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, // ;.uniform mat4 S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, // tereo_DeghostFil
	0x74, 0x65, 0x72, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, // ter;.vec3 Deghos
	0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // tAnaglyph( vec3 
	0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, // lCol, vec3 rCol)
	0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, // .{.vec3 color = 
	0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, // LinearAnaglyph(l
	0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // Col, rCol);.retu
	0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, // rn ( (pow(color,
	0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, //  Stereo_DeghostG
	0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x72, 0x67, 0x62, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x6d, 0x61, // amma.rgb)) * (ma
	0x74, 0x33, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, // t3(Stereo_Deghos
	0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, // tFilter[0].xyz, 
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, // Stereo_DeghostFi
	0x6c, 0x74, 0x65, 0x72, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, // lter[1].xyz, Ste
	0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, // reo_DeghostFilte
	0x72, 0x5b, 0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // r[2].xyz)) );.}.
	0x76, 0x6f, 0x69, 0x64, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, // void main().{.ve
	0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x3b, 0x0a, 0x67, // c3 lCol, rCol;.g
	0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, // atherLeftRightCo
	0x6c, 0x6f, 0x72, 0x73, 0x28, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, // lors(v_texcoord0
	0x2c, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x6c, // , lCol, rCol);.l
	0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x6c, // Col = InvGamma(l
	0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x72, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x49, 0x6e, 0x76, // Col);.rCol = Inv
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x76, 0x65, 0x63, // Gamma(rCol);.vec
	0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, // 3 color = Linear
	0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, // Anaglyph(lCol, r
	0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, // Col);.gl_FragCol
	0x6f, 0x72, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, // or = vec4(FBGamm
	0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, // a(color), 1.0);.
	0x7d, 0x0a, 0x00,                                                                               // }..
};
static const uint8_t fs_pp_stereo_anaglyph_lin_srgb_nodesat_dx11[3454] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x13, 0x53, // FSH.o.><.......S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, // tereo_MS_ZPD_YAx
	0x69, 0x73, 0x12, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x77, 0x5f, 0x68, // is...........w_h
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, // _height.........
	0x00, 0x0e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, // ..Stereo_LeftMat
	0x14, 0x00, 0x20, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x53, 0x74, 0x65, 0x72, 0x65, // .. ........Stere
	0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x00, 0x60, 0x00, 0x04, 0x00, // o_RightMat..`...
	0x00, 0x00, 0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // .....tex_stereo_
	0x66, 0x62, 0x30, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x74, 0x65, 0x78, // fb0..........tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x30, 0x01, 0x01, // _stereo_depth0..
	0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // ........tex_ster
	0x65, 0x6f, 0x5f, 0x66, 0x62, 0x30, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, // eo_fb0..........
	0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, // tex_stereo_depth
	0x30, 0x01, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9c, 0x0c, 0x00, 0x00, 0x44, 0x58, // 0.............DX
	0x42, 0x43, 0xbb, 0x72, 0xc5, 0x2a, 0xc2, 0xca, 0x19, 0x6d, 0xb5, 0x3f, 0x5d, 0xba, 0x24, 0x9c, // BC.r.*...m.?].$.
	0xca, 0x7a, 0x01, 0x00, 0x00, 0x00, 0x9c, 0x0c, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x2c, 0x00, // .z............,.
	0x00, 0x00, 0x84, 0x00, 0x00, 0x00, 0xb8, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x4e, 0x50, 0x00, // ..........ISGNP.
	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, // ..........8.....
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, // ................
	0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, // ..D.............
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x4f, 0x53, // ..........SV_POS
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0xab, // ITION.TEXCOORD..
	0xab, 0xab, 0x4f, 0x53, 0x47, 0x4e, 0x2c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, // ..OSGN,.........
	0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, // .. .............
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x54, 0x41, 0x52, // ..........SV_TAR
	0x47, 0x45, 0x54, 0x00, 0xab, 0xab, 0x53, 0x48, 0x45, 0x58, 0xdc, 0x0b, 0x00, 0x00, 0x50, 0x00, // GET...SHEX....P.
	0x00, 0x00, 0xf7, 0x02, 0x00, 0x00, 0x6a, 0x08, 0x00, 0x01, 0x59, 0x00, 0x00, 0x04, 0x46, 0x8e, // ......j...Y...F.
	0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x03, 0x00, 0x60, //  .........Z....`
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x03, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, // ......Z....`....
	0x00, 0x00, 0x58, 0x18, 0x00, 0x04, 0x00, 0x70, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x55, // ..X....p......UU
	0x00, 0x00, 0x58, 0x18, 0x00, 0x04, 0x00, 0x70, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x55, 0x55, // ..X....p......UU
	0x00, 0x00, 0x62, 0x10, 0x00, 0x03, 0x32, 0x10, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x65, 0x00, // ..b...2.......e.
	0x00, 0x03, 0xf2, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x02, 0x05, 0x00, // ... ......h.....
	0x00, 0x00, 0x36, 0x00, 0x00, 0x08, 0x52, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, // ..6...R........@
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x38, 0x00, 0x00, 0x0b, 0xa2, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x80, // ..8.............
	0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, //  ..........@....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x7e, 0x2a, 0x3f, 0x39, 0x00, // .....?.....~*?9.
	0x00, 0x08, 0x12, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2a, 0x80, 0x20, 0x00, 0x00, 0x00, // ..........*. ...
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, // .......@......7.
	0x00, 0x09, 0xf2, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x10, 0x00, 0x01, 0x00, // ................
	0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x0b, 0x10, 0x00, 0x00, 0x00, // ..F.............
	0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf2, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x0e, // ..............F.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x14, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, // ......F.........
	0x00, 0x08, 0xf2, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x80, 0x41, 0x00, // ..........F...A.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x14, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x48, 0x00, // ......F.......H.
	0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, // ......CU..".....
	0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x16, 0x7e, 0x10, 0x00, 0x01, 0x00, // ..F........~....
	0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, // ...`.......@....
	0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x42, 0x00, // ..H.......CU..B.
	0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x96, 0x7c, // ...............|
	0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, // .......`.......@
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x07, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, // ......3...".....
	0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, // ..*.............
	0x00, 0x00, 0x36, 0x00, 0x00, 0x06, 0x22, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0a, 0x80, // ..6...".........
	0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x08, 0x52, 0x00, //  .........6...R.
	0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .......@........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x09, 0xc2, 0x00, // ..........7.....
	0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x04, // ................
	0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x56, 0x01, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, // ......V.........
	0x00, 0x07, 0x32, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x01, 0x00, // ..2.............
	0x00, 0x00, 0x46, 0x10, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0xc2, 0x00, // ..F.............
	0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0xa6, 0x0e, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x01, 0x00, // ..........A.....
	0x00, 0x00, 0x06, 0x14, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, // ..........H.....
	0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x42, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0xe6, 0x0a, // ..CU..B.........
	0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x96, 0x7c, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x60, // .......|.......`
	0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, // .......@......H.
	0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x82, 0x00, 0x10, 0x00, 0x01, 0x00, // ......CU........
	0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x96, 0x73, 0x10, 0x00, 0x01, 0x00, // ..F........s....
	0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, // ...`.......@....
	0x00, 0x00, 0x33, 0x00, 0x00, 0x07, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3a, 0x00, // ..3...".......:.
	0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0e, 0x00, // ................
	0x00, 0x0b, 0x82, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, // ...........@....
	0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x1a, 0x80, // .?...?...?...?..
	0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x82, 0x00, //  ...............
	0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, // ......:........@
	0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0x32, 0x00, 0x00, 0x09, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, // ......2...".....
	0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x01, 0x00, // ..........:.....
	0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x0e, 0x00, 0x00, 0x0a, 0x22, 0x00, // ...@.....?....".
	0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, // .......@.....?..
	0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, // .?...?...?......
	0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, // ......".........
	0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, // ..A........@....
	0x80, 0x3f, 0x32, 0x00, 0x00, 0x0b, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, 0x80, // .?2...".........
	0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, //  ...............
	0x00, 0x00, 0x3a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x34, 0x00, // ..:. .........4.
	0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, // ................
	0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x06, 0x82, 0x00, // ...@......6.....
	0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x03, 0x00, // ..........A.....
	0x00, 0x00, 0x36, 0x00, 0x00, 0x08, 0x62, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x40, // ..6...b........@
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x37, 0x00, 0x00, 0x09, 0x32, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x06, 0x00, // ..7...2.........
	0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x00, // ..............F.
	0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x32, 0x00, 0x10, 0x00, 0x02, 0x00, // ..........2.....
	0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x10, 0x10, 0x00, 0x01, 0x00, // ..F.......F.....
	0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x72, 0x00, // ..H.......CU..r.
	0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x7e, // ......F.......F~
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, // .......`.......@
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x0f, 0x32, 0x00, 0x10, 0x00, 0x03, 0x00, // ......2...2.....
	0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x6e, 0xa7, // ..F........@..n.
	0x72, 0x3f, 0x6e, 0xa7, 0x72, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, // r?n.r?.........@
	0x00, 0x00, 0x19, 0x89, 0x55, 0x3d, 0x19, 0x89, 0x55, 0x3d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ....U=..U=......
	0x00, 0x00, 0x2f, 0x00, 0x00, 0x05, 0x32, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x46, 0x00, // ../...2.......F.
	0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x0a, 0x32, 0x00, 0x10, 0x00, 0x03, 0x00, // ......8...2.....
	0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x9a, 0x99, // ..F........@....
	0x19, 0x40, 0x9a, 0x99, 0x19, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x00, // .@...@..........
	0x00, 0x05, 0x32, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x03, 0x00, // ..2.......F.....
	0x00, 0x00, 0x38, 0x00, 0x00, 0x0a, 0x32, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x46, 0x00, // ..8...2.......F.
	0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x91, 0x83, 0x9e, 0x3d, 0x91, 0x83, // .......@.....=..
	0x9e, 0x3d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x0a, 0xb2, 0x00, // .=..............
	0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0xe6, 0xae, 0x25, 0x3d, 0xe6, 0xae, // .......@....%=..
	0x25, 0x3d, 0x00, 0x00, 0x00, 0x00, 0xe6, 0xae, 0x25, 0x3d, 0x46, 0x08, 0x10, 0x00, 0x02, 0x00, // %=......%=F.....
	0x00, 0x00, 0x37, 0x00, 0x00, 0x09, 0x32, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x46, 0x00, // ..7...2.......F.
	0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x46, 0x00, // ......F.......F.
	0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x09, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, // ......2...".....
	0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x6e, 0xa7, // ..*........@..n.
	0x72, 0x3f, 0x01, 0x40, 0x00, 0x00, 0x19, 0x89, 0x55, 0x3d, 0x38, 0x00, 0x00, 0x07, 0x12, 0x00, // r?.@....U=8.....
	0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x40, // ......*........@
	0x00, 0x00, 0x91, 0x83, 0x9e, 0x3d, 0x2f, 0x00, 0x00, 0x05, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, // .....=/...".....
	0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x07, 0x22, 0x00, // ..........8...".
	0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, // ...............@
	0x00, 0x00, 0x9a, 0x99, 0x19, 0x40, 0x19, 0x00, 0x00, 0x05, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, // .....@....".....
	0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x09, 0x42, 0x00, // ..........7...B.
	0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0a, 0x00, // ......:.........
	0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x36, 0x00, // ..............6.
	0x00, 0x05, 0x82, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, // ...........@....
	0x80, 0x3f, 0x11, 0x00, 0x00, 0x08, 0x12, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x0e, // .?............F.
	0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, // ......F. .......
	0x00, 0x00, 0x11, 0x00, 0x00, 0x08, 0x22, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x0e, // ......".......F.
	0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, // ......F. .......
	0x00, 0x00, 0x11, 0x00, 0x00, 0x08, 0x42, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x0e, // ......B.......F.
	0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, // ......F. .......
	0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x12, 0x00, // ..H.......CU....
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x7e, // ......F.......F~
	0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, // .......`.......@
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, // ......H.......CU
	0x15, 0x00, 0x22, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x00, 0x00, // ..".............
	0x00, 0x00, 0x16, 0x7e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, // ...~.......`....
	0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x07, 0x12, 0x00, // ...@......3.....
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, // ................
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, // ......3.........
	0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, // ..*.............
	0x00, 0x00, 0x32, 0x00, 0x00, 0x09, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, // ..2.............
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, // ......:........@
	0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x0e, 0x00, 0x00, 0x0a, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, // .....?..........
	0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, // ...@.....?...?..
	0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .?...?..........
	0x00, 0x08, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x80, 0x41, 0x00, // ..............A.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x32, 0x00, // .......@.....?2.
	0x00, 0x0b, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x80, 0x20, 0x00, 0x00, 0x00, // ............ ...
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, 0x80, // ..............:.
	0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x07, 0x12, 0x00, //  .........4.....
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, // ...............@
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x06, 0x82, 0x00, 0x10, 0x00, 0x03, 0x00, // ......6.........
	0x00, 0x00, 0x0a, 0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, // ......A.......6.
	0x00, 0x05, 0x22, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, // .."........@....
	0x00, 0x00, 0x37, 0x00, 0x00, 0x09, 0x32, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, // ..7...2.........
	0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x46, 0x00, // ..............F.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x32, 0x00, 0x10, 0x00, 0x00, 0x00, // ..........2.....
	0x00, 0x00, 0x46, 0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x10, // ..F...A.......F.
	0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, // ......H.......CU
	0x15, 0x00, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x00, 0x00, // ..r.......F.....
	0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x00, 0x00, // ..F~.......`....
	0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x0a, 0x32, 0x00, // ...@......8...2.
	0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, // ......F........@
	0x00, 0x00, 0x91, 0x83, 0x9e, 0x3d, 0x91, 0x83, 0x9e, 0x3d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .....=...=......
	0x00, 0x00, 0x32, 0x00, 0x00, 0x0f, 0xc2, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x04, // ..2.............
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .......@........
	0x00, 0x00, 0x6e, 0xa7, 0x72, 0x3f, 0x6e, 0xa7, 0x72, 0x3f, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, // ..n.r?n.r?.@....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x89, 0x55, 0x3d, 0x19, 0x89, 0x55, 0x3d, 0x2f, 0x00, // ........U=..U=/.
	0x00, 0x05, 0xc2, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0xa6, 0x0e, 0x10, 0x00, 0x01, 0x00, // ................
	0x00, 0x00, 0x38, 0x00, 0x00, 0x0a, 0xc2, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0xa6, 0x0e, // ..8.............
	0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .......@........
	0x00, 0x00, 0x9a, 0x99, 0x19, 0x40, 0x9a, 0x99, 0x19, 0x40, 0x19, 0x00, 0x00, 0x05, 0xc2, 0x00, // .....@...@......
	0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0xa6, 0x0e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1d, 0x00, // ................
	0x00, 0x0a, 0xb2, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0xe6, 0xae, // ...........@....
	0x25, 0x3d, 0xe6, 0xae, 0x25, 0x3d, 0x00, 0x00, 0x00, 0x00, 0xe6, 0xae, 0x25, 0x3d, 0x46, 0x08, // %=..%=......%=F.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x09, 0x32, 0x00, 0x10, 0x00, 0x01, 0x00, // ......7...2.....
	0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x01, 0x00, // ..F.......F.....
	0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x09, 0x12, 0x00, // ..........2.....
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, // ......*........@
	0x00, 0x00, 0x6e, 0xa7, 0x72, 0x3f, 0x01, 0x40, 0x00, 0x00, 0x19, 0x89, 0x55, 0x3d, 0x2f, 0x00, // ..n.r?.@....U=/.
	0x00, 0x05, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x38, 0x00, 0x00, 0x0a, 0x32, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x00, // ..8...2.........
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x9a, 0x99, 0x19, 0x40, 0x91, 0x83, // .......@.....@..
	0x9e, 0x3d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x05, 0x12, 0x00, // .=..............
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, // ..............7.
	0x00, 0x09, 0x42, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x00, 0x00, // ..B.......:.....
	0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x82, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, // ..6............@
	0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x11, 0x00, 0x00, 0x08, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, // .....?..........
	0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, // ..F.......F. ...
	0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x08, 0x22, 0x00, 0x10, 0x00, 0x00, 0x00, // ..........".....
	0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, // ..F.......F. ...
	0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x08, 0x42, 0x00, 0x10, 0x00, 0x00, 0x00, // ..........B.....
	0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, // ..F.......F. ...
	0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, // ..........r.....
	0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x02, 0x00, // ..F.......F.....
	0x00, 0x00, 0x2f, 0x00, 0x00, 0x05, 0x72, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x02, // ../...r.......F.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x0a, 0x72, 0x00, 0x10, 0x00, 0x01, 0x00, // ......8...r.....
	0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x55, 0x55, // ..F........@..UU
	0xd5, 0x3e, 0x55, 0x55, 0xd5, 0x3e, 0x55, 0x55, 0xd5, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x19, 0x00, // .>UU.>UU.>......
	0x00, 0x05, 0x72, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x01, 0x00, // ..r.......F.....
	0x00, 0x00, 0x32, 0x00, 0x00, 0x0f, 0x72, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x02, // ..2...r.......F.
	0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x3d, 0x0a, 0x87, 0x3f, 0x3d, 0x0a, // .......@..=..?=.
	0x87, 0x3f, 0x3d, 0x0a, 0x87, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0xae, 0x47, // .?=..?.....@...G
	0x61, 0xbd, 0xae, 0x47, 0x61, 0xbd, 0xae, 0x47, 0x61, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x1d, 0x00, // a..Ga..Ga.......
	0x00, 0x0a, 0x72, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x1c, 0x2e, // ..r........@....
	0x4d, 0x3b, 0x1c, 0x2e, 0x4d, 0x3b, 0x1c, 0x2e, 0x4d, 0x3b, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, // M;..M;..M;....F.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x0a, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, // ......8...r.....
	0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x52, 0xb8, // ..F........@..R.
	0x4e, 0x41, 0x52, 0xb8, 0x4e, 0x41, 0x52, 0xb8, 0x4e, 0x41, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, // NAR.NAR.NA....7.
	0x00, 0x09, 0x72, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x02, 0x00, // ..r ......F.....
	0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x01, 0x00, // ..F.......F.....
	0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x82, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, // ..6.... .......@
	0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x3e, 0x00, 0x00, 0x01, 0x00, 0x00, 0xa0, 0x00,             // .....?>.......
};
static const uint8_t fs_pp_stereo_anaglyph_lin_srgb_nodesat_spv[6675] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x13, 0x53, // FSH.o.><.......S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, // tereo_MS_ZPD_YAx
	0x69, 0x73, 0x12, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x77, 0x5f, 0x68, // is...........w_h
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x01, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, // _height.........
	0x00, 0x0e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, // ..Stereo_LeftMat
	0x14, 0x01, 0x20, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x53, 0x74, 0x65, 0x72, 0x65, // .. ........Stere
	0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x01, 0x60, 0x00, 0x04, 0x00, // o_RightMat..`...
	0x00, 0x00, 0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // .....tex_stereo_
	0x66, 0x62, 0x30, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x02, 0x22, 0x00, 0x10, 0x74, 0x65, 0x78, // fb0......."..tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x30, 0x00, 0x03, // _stereo_depth0..
	0x00, 0x00, 0x00, 0x00, 0x02, 0x22, 0x00, 0x64, 0x19, 0x00, 0x00, 0x03, 0x02, 0x23, 0x07, 0x00, // .....".d.....#..
	0x00, 0x01, 0x00, 0x0b, 0x00, 0x08, 0x00, 0x41, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, // .......A........
	0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, // ...............G
	0x4c, 0x53, 0x4c, 0x2e, 0x73, 0x74, 0x64, 0x2e, 0x34, 0x35, 0x30, 0x00, 0x00, 0x00, 0x00, 0x0e, // LSL.std.450.....
	0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x07, 0x00, 0x04, // ................
	0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, 0x00, 0xb1, // .......main.....
	0x01, 0x00, 0x00, 0xbc, 0x01, 0x00, 0x00, 0x10, 0x00, 0x03, 0x00, 0x04, 0x00, 0x00, 0x00, 0x07, // ................
	0x00, 0x00, 0x00, 0x03, 0x00, 0x03, 0x00, 0x05, 0x00, 0x00, 0x00, 0xf4, 0x01, 0x00, 0x00, 0x05, // ................
	0x00, 0x04, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x05, // .......main.....
	0x00, 0x08, 0x00, 0x44, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // ...D...tex_stere
	0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x00, 0x00, 0x00, 0x00, 0x05, // o_fbSampler.....
	0x00, 0x08, 0x00, 0x47, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // ...G...tex_stere
	0x6f, 0x5f, 0x66, 0x62, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x00, 0x00, 0x00, 0x00, 0x05, // o_fbTexture.....
	0x00, 0x08, 0x00, 0x4b, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // ...K...tex_stere
	0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x00, 0x05, // o_depthSampler..
	0x00, 0x08, 0x00, 0x4d, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // ...M...tex_stere
	0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x00, 0x05, // o_depthTexture..
	0x00, 0x06, 0x00, 0xbb, 0x00, 0x00, 0x00, 0x55, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x6c, // .......UniformBl
	0x6f, 0x63, 0x6b, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x08, 0x00, 0xbb, 0x00, 0x00, 0x00, 0x00, // ock.............
	0x00, 0x00, 0x00, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, // ...Stereo_MS_ZPD
	0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x00, 0x06, 0x00, 0x06, 0x00, 0xbb, 0x00, 0x00, 0x00, 0x01, // _YAxis..........
	0x00, 0x00, 0x00, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x00, 0x00, 0x06, // ...w_h_height...
	0x00, 0x07, 0x00, 0xbb, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x53, 0x74, 0x65, 0x72, 0x65, // ...........Stere
	0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x00, 0x00, 0x06, 0x00, 0x07, 0x00, 0xbb, // o_LeftMat.......
	0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, // .......Stereo_Ri
	0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x00, 0x05, 0x00, 0x03, 0x00, 0xbd, 0x00, 0x00, 0x00, 0x00, // ghtMat..........
	0x00, 0x00, 0x00, 0x05, 0x00, 0x05, 0x00, 0xb1, 0x01, 0x00, 0x00, 0x76, 0x5f, 0x74, 0x65, 0x78, // ...........v_tex
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x00, 0x05, 0x00, 0x06, 0x00, 0xbc, 0x01, 0x00, 0x00, 0x62, // coord0.........b
	0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x00, 0x00, 0x47, // gfx_FragData0..G
	0x00, 0x04, 0x00, 0x44, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, // ...D...".......G
	0x00, 0x04, 0x00, 0x44, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x47, // ...D...!.......G
	0x00, 0x04, 0x00, 0x47, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, // ...G...".......G
	0x00, 0x04, 0x00, 0x47, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x47, // ...G...!.......G
	0x00, 0x04, 0x00, 0x4b, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, // ...K...".......G
	0x00, 0x04, 0x00, 0x4b, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x47, // ...K...!.......G
	0x00, 0x04, 0x00, 0x4d, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, // ...M...".......G
	0x00, 0x04, 0x00, 0x4d, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x48, // ...M...!.......H
	0x00, 0x05, 0x00, 0xbb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x00, // ...........#....
	0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0xbb, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x23, // ...H...........#
	0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x48, 0x00, 0x04, 0x00, 0xbb, 0x00, 0x00, 0x00, 0x02, // .......H........
	0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0xbb, 0x00, 0x00, 0x00, 0x02, // .......H........
	0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0xbb, // ...#... ...H....
	0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x48, // ...............H
	0x00, 0x04, 0x00, 0xbb, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x48, // ...............H
	0x00, 0x05, 0x00, 0xbb, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x60, // ...........#...`
	0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0xbb, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x07, // ...H............
	0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x47, 0x00, 0x03, 0x00, 0xbb, 0x00, 0x00, 0x00, 0x02, // .......G........
	0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0xbd, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, // ...G......."....
	0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0xbd, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x01, // ...G.......!....
	0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0xb1, 0x01, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, // ...G............
	0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0xbc, 0x01, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, // ...G............
	0x00, 0x00, 0x00, 0x13, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x21, 0x00, 0x03, 0x00, 0x03, // ...........!....
	0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x02, 0x00, 0x06, 0x00, 0x00, 0x00, 0x16, // ................
	0x00, 0x03, 0x00, 0x07, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x19, 0x00, 0x09, 0x00, 0x08, // ....... ........
	0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, // ................
	0x00, 0x04, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x17, // ................
	0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x20, // ............... 
	0x00, 0x04, 0x00, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x3b, // ...C...........;
	0x00, 0x04, 0x00, 0x43, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, // ...C...D....... 
	0x00, 0x04, 0x00, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x3b, // ...F...........;
	0x00, 0x04, 0x00, 0x46, 0x00, 0x00, 0x00, 0x47, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3b, // ...F...G.......;
	0x00, 0x04, 0x00, 0x43, 0x00, 0x00, 0x00, 0x4b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3b, // ...C...K.......;
	0x00, 0x04, 0x00, 0x46, 0x00, 0x00, 0x00, 0x4d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, // ...F...M........
	0x00, 0x04, 0x00, 0x50, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2b, // ...P... .......+
	0x00, 0x04, 0x00, 0x50, 0x00, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2b, // ...P...Q.......+
	0x00, 0x04, 0x00, 0x50, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, // ...P...U........
	0x00, 0x03, 0x00, 0x59, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, // ...Y.......+....
	0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0xe6, 0xae, 0x25, 0x3d, 0x14, 0x00, 0x02, 0x00, 0x66, // ...e.....%=....f
	0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x6b, 0x00, 0x00, 0x00, 0x91, // ...+.......k....
	0x83, 0x9e, 0x3d, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x6e, // ..=+.......p...n
	0xa7, 0x72, 0x3f, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x72, 0x00, 0x00, 0x00, 0x19, // .r?+.......r....
	0x89, 0x55, 0x3d, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0x9a, // .U=+.......t....
	0x99, 0x19, 0x40, 0x15, 0x00, 0x04, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, // ..@....~... ....
	0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, // ...+...~........
	0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x84, 0x00, 0x00, 0x00, 0x01, // ...+...~........
	0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x89, 0x00, 0x00, 0x00, 0x02, // ...+...~........
	0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00, 0x1c, // ...+............
	0x2e, 0x4d, 0x3b, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x96, 0x00, 0x00, 0x00, 0x52, // .M;+...........R
	0xb8, 0x4e, 0x41, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x9a, 0x00, 0x00, 0x00, 0x3d, // .NA+...........=
	0x0a, 0x87, 0x3f, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x9c, 0x00, 0x00, 0x00, 0x55, // ..?+...........U
	0x55, 0xd5, 0x3e, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x9f, 0x00, 0x00, 0x00, 0xae, // U.>+............
	0x47, 0x61, 0x3d, 0x18, 0x00, 0x04, 0x00, 0xba, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x04, // Ga=.............
	0x00, 0x00, 0x00, 0x1e, 0x00, 0x06, 0x00, 0xbb, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, // ................
	0x00, 0x00, 0x00, 0xba, 0x00, 0x00, 0x00, 0xba, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0xbc, // ........... ....
	0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xbb, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0xbc, // ...........;....
	0x00, 0x00, 0x00, 0xbd, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0xbe, // ........... ....
	0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, // ...........+....
	0x00, 0x00, 0x00, 0xc1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, // ...........+....
	0x00, 0x00, 0x00, 0xc9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x17, 0x00, 0x04, 0x00, 0xd0, // ..........?.....
	0x00, 0x00, 0x00, 0x66, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, // ...f.......+....
	0x00, 0x00, 0x00, 0xdc, 0x00, 0x00, 0x00, 0xfa, 0x7e, 0x2a, 0x3f, 0x2b, 0x00, 0x04, 0x00, 0x7e, // ........~*?+...~
	0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, // ...........+....
	0x00, 0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x2b, 0x00, 0x04, 0x00, 0x50, // ..........?+...P
	0x00, 0x00, 0x00, 0x74, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x75, // ...t....... ...u
	0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xba, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x50, // ...........+...P
	0x00, 0x00, 0x00, 0x7e, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0xb0, // ...~....... ....
	0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0xb0, // ...........;....
	0x01, 0x00, 0x00, 0xb1, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0xbb, // ........... ....
	0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0xbb, // ...........;....
	0x01, 0x00, 0x00, 0xbc, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x36, 0x00, 0x05, 0x00, 0x02, // ...........6....
	0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0xf8, // ................
	0x00, 0x02, 0x00, 0x05, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0x45, // .......=.......E
	0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x08, 0x00, 0x00, 0x00, 0x48, // ...D...=.......H
	0x00, 0x00, 0x00, 0x47, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0x4c, // ...G...=.......L
	0x00, 0x00, 0x00, 0x4b, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x08, 0x00, 0x00, 0x00, 0x4e, // ...K...=.......N
	0x00, 0x00, 0x00, 0x4d, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xb2, // ...M...=........
	0x01, 0x00, 0x00, 0xb1, 0x01, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0xbe, 0x00, 0x00, 0x00, 0x1e, // .......A........
	0x02, 0x00, 0x00, 0xbd, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00, 0x89, 0x00, 0x00, 0x00, 0x3d, // .......U.......=
	0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x1f, 0x02, 0x00, 0x00, 0x1e, 0x02, 0x00, 0x00, 0xb7, // ................
	0x00, 0x05, 0x00, 0x66, 0x00, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00, 0x1f, 0x02, 0x00, 0x00, 0xc1, // ...f... ........
	0x00, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0xbe, 0x00, 0x00, 0x00, 0x21, 0x02, 0x00, 0x00, 0xbd, // ...A.......!....
	0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, // ...U.......=....
	0x00, 0x00, 0x00, 0x22, 0x02, 0x00, 0x00, 0x21, 0x02, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, // ..."...!........
	0x00, 0x00, 0x00, 0x26, 0x02, 0x00, 0x00, 0xc9, 0x00, 0x00, 0x00, 0x22, 0x02, 0x00, 0x00, 0x50, // ...&......."...P
	0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x27, 0x02, 0x00, 0x00, 0xc1, 0x00, 0x00, 0x00, 0x26, // .......'.......&
	0x02, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x29, 0x02, 0x00, 0x00, 0xc9, // ...........)....
	0x00, 0x00, 0x00, 0x22, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x2a, // ..."...P.......*
	0x02, 0x00, 0x00, 0x29, 0x02, 0x00, 0x00, 0xc1, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0xd0, // ...).......P....
	0x00, 0x00, 0x00, 0x2b, 0x02, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00, 0xa9, // ...+... ... ....
	0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x2c, 0x02, 0x00, 0x00, 0x2b, 0x02, 0x00, 0x00, 0x27, // .......,...+...'
	0x02, 0x00, 0x00, 0x2a, 0x02, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x2d, // ...*...........-
	0x02, 0x00, 0x00, 0xb2, 0x01, 0x00, 0x00, 0x2c, 0x02, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, 0x59, // .......,...V...Y
	0x00, 0x00, 0x00, 0xb5, 0x02, 0x00, 0x00, 0x4e, 0x00, 0x00, 0x00, 0x4c, 0x00, 0x00, 0x00, 0x58, // .......N...L...X
	0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xb8, 0x02, 0x00, 0x00, 0xb5, 0x02, 0x00, 0x00, 0x2d, // ...............-
	0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xc1, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, // ...........Q....
	0x00, 0x00, 0x00, 0x30, 0x02, 0x00, 0x00, 0xb8, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, // ...0............
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x34, 0x02, 0x00, 0x00, 0xdc, 0x00, 0x00, 0x00, 0x22, // .......4......."
	0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x35, 0x02, 0x00, 0x00, 0xc1, // ...P.......5....
	0x00, 0x00, 0x00, 0x34, 0x02, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x37, // ...4...........7
	0x02, 0x00, 0x00, 0xdc, 0x00, 0x00, 0x00, 0x22, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, // ......."...P....
	0x00, 0x00, 0x00, 0x38, 0x02, 0x00, 0x00, 0x37, 0x02, 0x00, 0x00, 0xc1, 0x00, 0x00, 0x00, 0x50, // ...8...7.......P
	0x00, 0x05, 0x00, 0xd0, 0x00, 0x00, 0x00, 0x39, 0x02, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00, 0x20, // .......9... ... 
	0x02, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x3a, 0x02, 0x00, 0x00, 0x39, // ...........:...9
	0x02, 0x00, 0x00, 0x35, 0x02, 0x00, 0x00, 0x38, 0x02, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x0b, // ...5...8........
	0x00, 0x00, 0x00, 0x3b, 0x02, 0x00, 0x00, 0xb2, 0x01, 0x00, 0x00, 0x3a, 0x02, 0x00, 0x00, 0x56, // ...;.......:...V
	0x00, 0x05, 0x00, 0x59, 0x00, 0x00, 0x00, 0xbf, 0x02, 0x00, 0x00, 0x4e, 0x00, 0x00, 0x00, 0x4c, // ...Y.......N...L
	0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xc2, 0x02, 0x00, 0x00, 0xbf, // ...X............
	0x02, 0x00, 0x00, 0x3b, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xc1, 0x00, 0x00, 0x00, 0x51, // ...;...........Q
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x3e, 0x02, 0x00, 0x00, 0xc2, 0x02, 0x00, 0x00, 0x00, // .......>........
	0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x3f, 0x02, 0x00, 0x00, 0x01, // ...........?....
	0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x30, 0x02, 0x00, 0x00, 0x3e, 0x02, 0x00, 0x00, 0x50, // ...%...0...>...P
	0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x43, 0x02, 0x00, 0x00, 0xc1, 0x00, 0x00, 0x00, 0x22, // .......C......."
	0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x45, 0x02, 0x00, 0x00, 0x22, // ...P.......E..."
	0x02, 0x00, 0x00, 0xc1, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0xd0, 0x00, 0x00, 0x00, 0x46, // .......P.......F
	0x02, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, // ... ... ........
	0x00, 0x00, 0x00, 0x47, 0x02, 0x00, 0x00, 0x46, 0x02, 0x00, 0x00, 0x43, 0x02, 0x00, 0x00, 0x45, // ...G...F...C...E
	0x02, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x48, 0x02, 0x00, 0x00, 0xb2, // ...........H....
	0x01, 0x00, 0x00, 0x47, 0x02, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, 0x59, 0x00, 0x00, 0x00, 0xc9, // ...G...V...Y....
	0x02, 0x00, 0x00, 0x4e, 0x00, 0x00, 0x00, 0x4c, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, // ...N...L...X....
	0x00, 0x00, 0x00, 0xcc, 0x02, 0x00, 0x00, 0xc9, 0x02, 0x00, 0x00, 0x48, 0x02, 0x00, 0x00, 0x02, // ...........H....
	0x00, 0x00, 0x00, 0xc1, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x4b, // .......Q.......K
	0x02, 0x00, 0x00, 0xcc, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, // ................
	0x00, 0x00, 0x00, 0x4c, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x3f, // ...L.......%...?
	0x02, 0x00, 0x00, 0x4b, 0x02, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0xbe, 0x00, 0x00, 0x00, 0x4d, // ...K...A.......M
	0x02, 0x00, 0x00, 0xbd, 0x00, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x3d, // .......Q.......=
	0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x4e, 0x02, 0x00, 0x00, 0x4d, 0x02, 0x00, 0x00, 0x41, // .......N...M...A
	0x00, 0x06, 0x00, 0xbe, 0x00, 0x00, 0x00, 0x51, 0x02, 0x00, 0x00, 0xbd, 0x00, 0x00, 0x00, 0x55, // .......Q.......U
	0x00, 0x00, 0x00, 0x84, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x52, // .......=.......R
	0x02, 0x00, 0x00, 0x51, 0x02, 0x00, 0x00, 0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x53, // ...Q...........S
	0x02, 0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x52, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x07, // .......R........
	0x00, 0x00, 0x00, 0x54, 0x02, 0x00, 0x00, 0x53, 0x02, 0x00, 0x00, 0xc9, 0x00, 0x00, 0x00, 0x85, // ...T...S........
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x55, 0x02, 0x00, 0x00, 0x4c, 0x02, 0x00, 0x00, 0x54, // .......U...L...T
	0x02, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x56, 0x02, 0x00, 0x00, 0xc9, // ...........V....
	0x00, 0x00, 0x00, 0x55, 0x02, 0x00, 0x00, 0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x57, // ...U...........W
	0x02, 0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x56, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x07, // .......V........
	0x00, 0x00, 0x00, 0x58, 0x02, 0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x57, 0x02, 0x00, 0x00, 0x85, // ...X.......W....
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x59, 0x02, 0x00, 0x00, 0x22, 0x02, 0x00, 0x00, 0x58, // .......Y..."...X
	0x02, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x5a, 0x02, 0x00, 0x00, 0x4e, // ...........Z...N
	0x02, 0x00, 0x00, 0x59, 0x02, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x5b, // ...Y...........[
	0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0xc1, 0x00, 0x00, 0x00, 0x5a, // .......(.......Z
	0x02, 0x00, 0x00, 0x7f, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x5f, 0x02, 0x00, 0x00, 0x5b, // ..........._...[
	0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x60, 0x02, 0x00, 0x00, 0xc1, // ...P.......`....
	0x00, 0x00, 0x00, 0x5f, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x62, // ..._...P.......b
	0x02, 0x00, 0x00, 0x5b, 0x02, 0x00, 0x00, 0xc1, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0xd0, // ...[.......P....
	0x00, 0x00, 0x00, 0x63, 0x02, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00, 0xa9, // ...c... ... ....
	0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x64, 0x02, 0x00, 0x00, 0x63, 0x02, 0x00, 0x00, 0x60, // .......d...c...`
	0x02, 0x00, 0x00, 0x62, 0x02, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x65, // ...b...........e
	0x02, 0x00, 0x00, 0xb2, 0x01, 0x00, 0x00, 0x64, 0x02, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, 0x59, // .......d...V...Y
	0x00, 0x00, 0x00, 0xd3, 0x02, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x00, 0x58, // .......H...E...X
	0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xd6, 0x02, 0x00, 0x00, 0xd3, 0x02, 0x00, 0x00, 0x65, // ...............e
	0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xc1, 0x00, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, // ................
	0x00, 0x00, 0x00, 0x6c, 0x02, 0x00, 0x00, 0xc9, 0x00, 0x00, 0x00, 0x22, 0x02, 0x00, 0x00, 0x50, // ...l......."...P
	0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x6d, 0x02, 0x00, 0x00, 0xc1, 0x00, 0x00, 0x00, 0x6c, // .......m.......l
	0x02, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x6f, 0x02, 0x00, 0x00, 0xc9, // ...........o....
	0x00, 0x00, 0x00, 0x22, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x70, // ..."...P.......p
	0x02, 0x00, 0x00, 0x6f, 0x02, 0x00, 0x00, 0xc1, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0xd0, // ...o.......P....
	0x00, 0x00, 0x00, 0x71, 0x02, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00, 0xa9, // ...q... ... ....
	0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x72, 0x02, 0x00, 0x00, 0x71, 0x02, 0x00, 0x00, 0x6d, // .......r...q...m
	0x02, 0x00, 0x00, 0x70, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x73, // ...p...........s
	0x02, 0x00, 0x00, 0xb2, 0x01, 0x00, 0x00, 0x72, 0x02, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, 0x59, // .......r...V...Y
	0x00, 0x00, 0x00, 0xdd, 0x02, 0x00, 0x00, 0x4e, 0x00, 0x00, 0x00, 0x4c, 0x00, 0x00, 0x00, 0x58, // .......N...L...X
	0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xe0, 0x02, 0x00, 0x00, 0xdd, 0x02, 0x00, 0x00, 0x73, // ...............s
	0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xc1, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, // ...........Q....
	0x00, 0x00, 0x00, 0x76, 0x02, 0x00, 0x00, 0xe0, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, // ...v............
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x7a, 0x02, 0x00, 0x00, 0xdc, 0x00, 0x00, 0x00, 0x22, // .......z......."
	0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x7b, 0x02, 0x00, 0x00, 0xc1, // ...P.......{....
	0x00, 0x00, 0x00, 0x7a, 0x02, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x7d, // ...z...........}
	0x02, 0x00, 0x00, 0xdc, 0x00, 0x00, 0x00, 0x22, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, // ......."...P....
	0x00, 0x00, 0x00, 0x7e, 0x02, 0x00, 0x00, 0x7d, 0x02, 0x00, 0x00, 0xc1, 0x00, 0x00, 0x00, 0x50, // ...~...}.......P
	0x00, 0x05, 0x00, 0xd0, 0x00, 0x00, 0x00, 0x7f, 0x02, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00, 0x20, // ........... ... 
	0x02, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x80, 0x02, 0x00, 0x00, 0x7f, // ................
	0x02, 0x00, 0x00, 0x7b, 0x02, 0x00, 0x00, 0x7e, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x0b, // ...{...~........
	0x00, 0x00, 0x00, 0x81, 0x02, 0x00, 0x00, 0xb2, 0x01, 0x00, 0x00, 0x80, 0x02, 0x00, 0x00, 0x56, // ...............V
	0x00, 0x05, 0x00, 0x59, 0x00, 0x00, 0x00, 0xe7, 0x02, 0x00, 0x00, 0x4e, 0x00, 0x00, 0x00, 0x4c, // ...Y.......N...L
	0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xea, 0x02, 0x00, 0x00, 0xe7, // ...X............
	0x02, 0x00, 0x00, 0x81, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xc1, 0x00, 0x00, 0x00, 0x51, // ...............Q
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x84, 0x02, 0x00, 0x00, 0xea, 0x02, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x85, 0x02, 0x00, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x76, 0x02, 0x00, 0x00, 0x84, 0x02, 0x00, 0x00, 0x50, // ...%...v.......P
	0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x89, 0x02, 0x00, 0x00, 0xc1, 0x00, 0x00, 0x00, 0x22, // ..............."
	0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x8b, 0x02, 0x00, 0x00, 0x22, // ...P..........."
	0x02, 0x00, 0x00, 0xc1, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0xd0, 0x00, 0x00, 0x00, 0x8c, // .......P........
	0x02, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, // ... ... ........
	0x00, 0x00, 0x00, 0x8d, 0x02, 0x00, 0x00, 0x8c, 0x02, 0x00, 0x00, 0x89, 0x02, 0x00, 0x00, 0x8b, // ................
	0x02, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x8e, 0x02, 0x00, 0x00, 0xb2, // ................
	0x01, 0x00, 0x00, 0x8d, 0x02, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, 0x59, 0x00, 0x00, 0x00, 0xf1, // .......V...Y....
	0x02, 0x00, 0x00, 0x4e, 0x00, 0x00, 0x00, 0x4c, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, // ...N...L...X....
	0x00, 0x00, 0x00, 0xf4, 0x02, 0x00, 0x00, 0xf1, 0x02, 0x00, 0x00, 0x8e, 0x02, 0x00, 0x00, 0x02, // ................
	0x00, 0x00, 0x00, 0xc1, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x91, // .......Q........
	0x02, 0x00, 0x00, 0xf4, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, // ................
	0x00, 0x00, 0x00, 0x92, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x85, // ...........%....
	0x02, 0x00, 0x00, 0x91, 0x02, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0xbe, 0x00, 0x00, 0x00, 0x93, // .......A........
	0x02, 0x00, 0x00, 0xbd, 0x00, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x3d, // .......Q.......=
	0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x94, 0x02, 0x00, 0x00, 0x93, 0x02, 0x00, 0x00, 0x41, // ...............A
	0x00, 0x06, 0x00, 0xbe, 0x00, 0x00, 0x00, 0x97, 0x02, 0x00, 0x00, 0xbd, 0x00, 0x00, 0x00, 0x55, // ...............U
	0x00, 0x00, 0x00, 0x84, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x98, // .......=........
	0x02, 0x00, 0x00, 0x97, 0x02, 0x00, 0x00, 0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x99, // ................
	0x02, 0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x98, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x07, // ................
	0x00, 0x00, 0x00, 0x9a, 0x02, 0x00, 0x00, 0x99, 0x02, 0x00, 0x00, 0xc9, 0x00, 0x00, 0x00, 0x85, // ................
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x9b, 0x02, 0x00, 0x00, 0x92, 0x02, 0x00, 0x00, 0x9a, // ................
	0x02, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x9c, 0x02, 0x00, 0x00, 0xc9, // ................
	0x00, 0x00, 0x00, 0x9b, 0x02, 0x00, 0x00, 0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x9d, // ................
	0x02, 0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x9c, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x07, // ................
	0x00, 0x00, 0x00, 0x9e, 0x02, 0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x9d, 0x02, 0x00, 0x00, 0x85, // ................
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x9f, 0x02, 0x00, 0x00, 0x22, 0x02, 0x00, 0x00, 0x9e, // ..........."....
	0x02, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xa0, 0x02, 0x00, 0x00, 0x94, // ................
	0x02, 0x00, 0x00, 0x9f, 0x02, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0xa1, // ................
	0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0xc1, 0x00, 0x00, 0x00, 0xa0, // .......(........
	0x02, 0x00, 0x00, 0x7f, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0xa5, 0x02, 0x00, 0x00, 0xa1, // ................
	0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xa6, 0x02, 0x00, 0x00, 0xc1, // ...P............
	0x00, 0x00, 0x00, 0xa5, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xa8, // .......P........
	0x02, 0x00, 0x00, 0xa1, 0x02, 0x00, 0x00, 0xc1, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0xd0, // ...........P....
	0x00, 0x00, 0x00, 0xa9, 0x02, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00, 0xa9, // ....... ... ....
	0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xaa, 0x02, 0x00, 0x00, 0xa9, 0x02, 0x00, 0x00, 0xa6, // ................
	0x02, 0x00, 0x00, 0xa8, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xab, // ................
	0x02, 0x00, 0x00, 0xb2, 0x01, 0x00, 0x00, 0xaa, 0x02, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, 0x59, // ...........V...Y
	0x00, 0x00, 0x00, 0xfb, 0x02, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x00, 0x58, // .......H...E...X
	0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xfe, 0x02, 0x00, 0x00, 0xfb, 0x02, 0x00, 0x00, 0xab, // ................
	0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xc1, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, // ...........Q....
	0x00, 0x00, 0x00, 0x05, 0x03, 0x00, 0x00, 0xd6, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, // ................
	0x00, 0x03, 0x00, 0x23, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfb, 0x00, 0x03, 0x00, 0x7f, // ...#............
	0x00, 0x00, 0x00, 0x17, 0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x17, 0x03, 0x00, 0x00, 0xbc, // ................
	0x00, 0x05, 0x00, 0x66, 0x00, 0x00, 0x00, 0x19, 0x03, 0x00, 0x00, 0x05, 0x03, 0x00, 0x00, 0x65, // ...f...........e
	0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x22, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, // ......."........
	0x00, 0x04, 0x00, 0x19, 0x03, 0x00, 0x00, 0x1a, 0x03, 0x00, 0x00, 0x1d, 0x03, 0x00, 0x00, 0xf8, // ................
	0x00, 0x02, 0x00, 0x1d, 0x03, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x1f, // ................
	0x03, 0x00, 0x00, 0x05, 0x03, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x07, // .......p........
	0x00, 0x00, 0x00, 0x20, 0x03, 0x00, 0x00, 0x1f, 0x03, 0x00, 0x00, 0x72, 0x00, 0x00, 0x00, 0x0c, // ... .......r....
	0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x21, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, // .......!........
	0x00, 0x00, 0x00, 0x20, 0x03, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x23, // ... ...t.......#
	0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x1a, 0x03, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, // ................
	0x00, 0x00, 0x00, 0x1c, 0x03, 0x00, 0x00, 0x05, 0x03, 0x00, 0x00, 0x6b, 0x00, 0x00, 0x00, 0xf9, // ...........k....
	0x00, 0x02, 0x00, 0x23, 0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x22, 0x03, 0x00, 0x00, 0xff, // ...#......."....
	0x00, 0x01, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x23, 0x03, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x07, // .......#........
	0x00, 0x00, 0x00, 0x32, 0x04, 0x00, 0x00, 0x21, 0x03, 0x00, 0x00, 0x1d, 0x03, 0x00, 0x00, 0x1c, // ...2...!........
	0x03, 0x00, 0x00, 0x1a, 0x03, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x08, // .......Q........
	0x03, 0x00, 0x00, 0xd6, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x3a, // ...............:
	0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfb, 0x00, 0x03, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x2e, // ................
	0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x2e, 0x03, 0x00, 0x00, 0xbc, 0x00, 0x05, 0x00, 0x66, // ...............f
	0x00, 0x00, 0x00, 0x30, 0x03, 0x00, 0x00, 0x08, 0x03, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0xf7, // ...0.......e....
	0x00, 0x03, 0x00, 0x39, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0x30, // ...9...........0
	0x03, 0x00, 0x00, 0x31, 0x03, 0x00, 0x00, 0x34, 0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x34, // ...1...4.......4
	0x03, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x36, 0x03, 0x00, 0x00, 0x08, // ...........6....
	0x03, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x37, // ...p...........7
	0x03, 0x00, 0x00, 0x36, 0x03, 0x00, 0x00, 0x72, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, // ...6...r........
	0x00, 0x00, 0x00, 0x38, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x37, // ...8...........7
	0x03, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x3a, 0x03, 0x00, 0x00, 0xf8, // ...t.......:....
	0x00, 0x02, 0x00, 0x31, 0x03, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x33, // ...1...........3
	0x03, 0x00, 0x00, 0x08, 0x03, 0x00, 0x00, 0x6b, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x3a, // .......k.......:
	0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x39, 0x03, 0x00, 0x00, 0xff, 0x00, 0x01, 0x00, 0xf8, // .......9........
	0x00, 0x02, 0x00, 0x3a, 0x03, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x33, // ...:...........3
	0x04, 0x00, 0x00, 0x38, 0x03, 0x00, 0x00, 0x34, 0x03, 0x00, 0x00, 0x33, 0x03, 0x00, 0x00, 0x31, // ...8...4...3...1
	0x03, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x0b, 0x03, 0x00, 0x00, 0xd6, // ...Q............
	0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x51, 0x03, 0x00, 0x00, 0x00, // ...........Q....
	0x00, 0x00, 0x00, 0xfb, 0x00, 0x03, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x45, 0x03, 0x00, 0x00, 0xf8, // ...........E....
	0x00, 0x02, 0x00, 0x45, 0x03, 0x00, 0x00, 0xbc, 0x00, 0x05, 0x00, 0x66, 0x00, 0x00, 0x00, 0x47, // ...E.......f...G
	0x03, 0x00, 0x00, 0x0b, 0x03, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x50, // .......e.......P
	0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0x47, 0x03, 0x00, 0x00, 0x48, // ...........G...H
	0x03, 0x00, 0x00, 0x4b, 0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x4b, 0x03, 0x00, 0x00, 0x85, // ...K.......K....
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x4d, 0x03, 0x00, 0x00, 0x0b, 0x03, 0x00, 0x00, 0x70, // .......M.......p
	0x00, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x4e, 0x03, 0x00, 0x00, 0x4d, // ...........N...M
	0x03, 0x00, 0x00, 0x72, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x4f, // ...r...........O
	0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x4e, 0x03, 0x00, 0x00, 0x74, // ...........N...t
	0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x51, 0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x48, // .......Q.......H
	0x03, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x4a, 0x03, 0x00, 0x00, 0x0b, // ...........J....
	0x03, 0x00, 0x00, 0x6b, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x51, 0x03, 0x00, 0x00, 0xf8, // ...k.......Q....
	0x00, 0x02, 0x00, 0x50, 0x03, 0x00, 0x00, 0xff, 0x00, 0x01, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x51, // ...P...........Q
	0x03, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x34, 0x04, 0x00, 0x00, 0x4f, // ...........4...O
	0x03, 0x00, 0x00, 0x4b, 0x03, 0x00, 0x00, 0x4a, 0x03, 0x00, 0x00, 0x48, 0x03, 0x00, 0x00, 0x51, // ...K...J...H...Q
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x59, 0x03, 0x00, 0x00, 0xfe, 0x02, 0x00, 0x00, 0x00, // .......Y........
	0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x77, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfb, // .......w........
	0x00, 0x03, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x6b, 0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x6b, // .......k.......k
	0x03, 0x00, 0x00, 0xbc, 0x00, 0x05, 0x00, 0x66, 0x00, 0x00, 0x00, 0x6d, 0x03, 0x00, 0x00, 0x59, // .......f...m...Y
	0x03, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x76, 0x03, 0x00, 0x00, 0x00, // ...e.......v....
	0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0x6d, 0x03, 0x00, 0x00, 0x6e, 0x03, 0x00, 0x00, 0x71, // .......m...n...q
	0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x71, 0x03, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, // .......q........
	0x00, 0x00, 0x00, 0x73, 0x03, 0x00, 0x00, 0x59, 0x03, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x81, // ...s...Y...p....
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x74, 0x03, 0x00, 0x00, 0x73, 0x03, 0x00, 0x00, 0x72, // .......t...s...r
	0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x75, 0x03, 0x00, 0x00, 0x01, // ...........u....
	0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x74, 0x03, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0xf9, // .......t...t....
	0x00, 0x02, 0x00, 0x77, 0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x6e, 0x03, 0x00, 0x00, 0x85, // ...w.......n....
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x70, 0x03, 0x00, 0x00, 0x59, 0x03, 0x00, 0x00, 0x6b, // .......p...Y...k
	0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x77, 0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x76, // .......w.......v
	0x03, 0x00, 0x00, 0xff, 0x00, 0x01, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x77, 0x03, 0x00, 0x00, 0xf5, // ...........w....
	0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x38, 0x04, 0x00, 0x00, 0x75, 0x03, 0x00, 0x00, 0x71, // .......8...u...q
	0x03, 0x00, 0x00, 0x70, 0x03, 0x00, 0x00, 0x6e, 0x03, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, // ...p...n...Q....
	0x00, 0x00, 0x00, 0x5c, 0x03, 0x00, 0x00, 0xfe, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xf7, // ................
	0x00, 0x03, 0x00, 0x8e, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfb, 0x00, 0x03, 0x00, 0x7f, // ................
	0x00, 0x00, 0x00, 0x82, 0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x82, 0x03, 0x00, 0x00, 0xbc, // ................
	0x00, 0x05, 0x00, 0x66, 0x00, 0x00, 0x00, 0x84, 0x03, 0x00, 0x00, 0x5c, 0x03, 0x00, 0x00, 0x65, // ...f...........e
	0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x8d, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, // ................
	0x00, 0x04, 0x00, 0x84, 0x03, 0x00, 0x00, 0x85, 0x03, 0x00, 0x00, 0x88, 0x03, 0x00, 0x00, 0xf8, // ................
	0x00, 0x02, 0x00, 0x88, 0x03, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x8a, // ................
	0x03, 0x00, 0x00, 0x5c, 0x03, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x07, // .......p........
	0x00, 0x00, 0x00, 0x8b, 0x03, 0x00, 0x00, 0x8a, 0x03, 0x00, 0x00, 0x72, 0x00, 0x00, 0x00, 0x0c, // ...........r....
	0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x8c, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, // ................
	0x00, 0x00, 0x00, 0x8b, 0x03, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x8e, // .......t........
	0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x85, 0x03, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, // ................
	0x00, 0x00, 0x00, 0x87, 0x03, 0x00, 0x00, 0x5c, 0x03, 0x00, 0x00, 0x6b, 0x00, 0x00, 0x00, 0xf9, // ...........k....
	0x00, 0x02, 0x00, 0x8e, 0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x8d, 0x03, 0x00, 0x00, 0xff, // ................
	0x00, 0x01, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x8e, 0x03, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x07, // ................
	0x00, 0x00, 0x00, 0x39, 0x04, 0x00, 0x00, 0x8c, 0x03, 0x00, 0x00, 0x88, 0x03, 0x00, 0x00, 0x87, // ...9............
	0x03, 0x00, 0x00, 0x85, 0x03, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x5f, // .......Q......._
	0x03, 0x00, 0x00, 0xfe, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0xa5, // ................
	0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfb, 0x00, 0x03, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x99, // ................
	0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x99, 0x03, 0x00, 0x00, 0xbc, 0x00, 0x05, 0x00, 0x66, // ...............f
	0x00, 0x00, 0x00, 0x9b, 0x03, 0x00, 0x00, 0x5f, 0x03, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0xf7, // ......._...e....
	0x00, 0x03, 0x00, 0xa4, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0x9b, // ................
	0x03, 0x00, 0x00, 0x9c, 0x03, 0x00, 0x00, 0x9f, 0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x9f, // ................
	0x03, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xa1, 0x03, 0x00, 0x00, 0x5f, // ..............._
	0x03, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xa2, // ...p............
	0x03, 0x00, 0x00, 0xa1, 0x03, 0x00, 0x00, 0x72, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, // .......r........
	0x00, 0x00, 0x00, 0xa3, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0xa2, // ................
	0x03, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0xa5, 0x03, 0x00, 0x00, 0xf8, // ...t............
	0x00, 0x02, 0x00, 0x9c, 0x03, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x9e, // ................
	0x03, 0x00, 0x00, 0x5f, 0x03, 0x00, 0x00, 0x6b, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0xa5, // ..._...k........
	0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xa4, 0x03, 0x00, 0x00, 0xff, 0x00, 0x01, 0x00, 0xf8, // ................
	0x00, 0x02, 0x00, 0xa5, 0x03, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x3a, // ...............:
	0x04, 0x00, 0x00, 0xa3, 0x03, 0x00, 0x00, 0x9f, 0x03, 0x00, 0x00, 0x9e, 0x03, 0x00, 0x00, 0x9c, // ................
	0x03, 0x00, 0x00, 0x41, 0x00, 0x05, 0x00, 0x75, 0x01, 0x00, 0x00, 0xaa, 0x03, 0x00, 0x00, 0xbd, // ...A...u........
	0x00, 0x00, 0x00, 0x74, 0x01, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0xba, 0x00, 0x00, 0x00, 0xab, // ...t...=........
	0x03, 0x00, 0x00, 0xaa, 0x03, 0x00, 0x00, 0x50, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xb0, // .......P........
	0x03, 0x00, 0x00, 0x32, 0x04, 0x00, 0x00, 0x33, 0x04, 0x00, 0x00, 0x34, 0x04, 0x00, 0x00, 0x02, // ...2...3...4....
	0x01, 0x00, 0x00, 0x91, 0x00, 0x05, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xb1, 0x03, 0x00, 0x00, 0xab, // ................
	0x03, 0x00, 0x00, 0xb0, 0x03, 0x00, 0x00, 0x41, 0x00, 0x05, 0x00, 0x75, 0x01, 0x00, 0x00, 0xb2, // .......A...u....
	0x03, 0x00, 0x00, 0xbd, 0x00, 0x00, 0x00, 0x7e, 0x01, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0xba, // .......~...=....
	0x00, 0x00, 0x00, 0xb3, 0x03, 0x00, 0x00, 0xb2, 0x03, 0x00, 0x00, 0x50, 0x00, 0x07, 0x00, 0x0e, // ...........P....
	0x00, 0x00, 0x00, 0xb8, 0x03, 0x00, 0x00, 0x38, 0x04, 0x00, 0x00, 0x39, 0x04, 0x00, 0x00, 0x3a, // .......8...9...:
	0x04, 0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x91, 0x00, 0x05, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xb9, // ................
	0x03, 0x00, 0x00, 0xb3, 0x03, 0x00, 0x00, 0xb8, 0x03, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x0e, // ................
	0x00, 0x00, 0x00, 0xba, 0x03, 0x00, 0x00, 0xb1, 0x03, 0x00, 0x00, 0xb9, 0x03, 0x00, 0x00, 0x51, // ...............Q
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xc3, 0x03, 0x00, 0x00, 0xba, 0x03, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0xbc, 0x00, 0x05, 0x00, 0x66, 0x00, 0x00, 0x00, 0xd5, 0x03, 0x00, 0x00, 0xc3, // .......f........
	0x03, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0xde, 0x03, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0xd5, 0x03, 0x00, 0x00, 0xd6, 0x03, 0x00, 0x00, 0xd9, // ................
	0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xd9, 0x03, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, // ................
	0x00, 0x00, 0x00, 0xdb, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0xc3, // ................
	0x03, 0x00, 0x00, 0x9c, 0x00, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xdc, // ................
	0x03, 0x00, 0x00, 0x9a, 0x00, 0x00, 0x00, 0xdb, 0x03, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x07, // ................
	0x00, 0x00, 0x00, 0xdd, 0x03, 0x00, 0x00, 0xdc, 0x03, 0x00, 0x00, 0x9f, 0x00, 0x00, 0x00, 0xf9, // ................
	0x00, 0x02, 0x00, 0xde, 0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xd6, 0x03, 0x00, 0x00, 0x85, // ................
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xd8, 0x03, 0x00, 0x00, 0x96, 0x00, 0x00, 0x00, 0xc3, // ................
	0x03, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0xde, 0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xde, // ................
	0x03, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x3e, 0x04, 0x00, 0x00, 0xdd, // ...........>....
	0x03, 0x00, 0x00, 0xd9, 0x03, 0x00, 0x00, 0xd8, 0x03, 0x00, 0x00, 0xd6, 0x03, 0x00, 0x00, 0x51, // ...............Q
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xc6, 0x03, 0x00, 0x00, 0xba, 0x03, 0x00, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0xbc, 0x00, 0x05, 0x00, 0x66, 0x00, 0x00, 0x00, 0xe9, 0x03, 0x00, 0x00, 0xc6, // .......f........
	0x03, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0xf2, 0x03, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0xe9, 0x03, 0x00, 0x00, 0xea, 0x03, 0x00, 0x00, 0xed, // ................
	0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xed, 0x03, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, // ................
	0x00, 0x00, 0x00, 0xef, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0xc6, // ................
	0x03, 0x00, 0x00, 0x9c, 0x00, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xf0, // ................
	0x03, 0x00, 0x00, 0x9a, 0x00, 0x00, 0x00, 0xef, 0x03, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x07, // ................
	0x00, 0x00, 0x00, 0xf1, 0x03, 0x00, 0x00, 0xf0, 0x03, 0x00, 0x00, 0x9f, 0x00, 0x00, 0x00, 0xf9, // ................
	0x00, 0x02, 0x00, 0xf2, 0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xea, 0x03, 0x00, 0x00, 0x85, // ................
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xec, 0x03, 0x00, 0x00, 0x96, 0x00, 0x00, 0x00, 0xc6, // ................
	0x03, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0xf2, 0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xf2, // ................
	0x03, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x3f, 0x04, 0x00, 0x00, 0xf1, // ...........?....
	0x03, 0x00, 0x00, 0xed, 0x03, 0x00, 0x00, 0xec, 0x03, 0x00, 0x00, 0xea, 0x03, 0x00, 0x00, 0x51, // ...............Q
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xc9, 0x03, 0x00, 0x00, 0xba, 0x03, 0x00, 0x00, 0x02, // ................
	0x00, 0x00, 0x00, 0xbc, 0x00, 0x05, 0x00, 0x66, 0x00, 0x00, 0x00, 0xfd, 0x03, 0x00, 0x00, 0xc9, // .......f........
	0x03, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x06, 0x04, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0xfd, 0x03, 0x00, 0x00, 0xfe, 0x03, 0x00, 0x00, 0x01, // ................
	0x04, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x01, 0x04, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, // ................
	0x00, 0x00, 0x00, 0x03, 0x04, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0xc9, // ................
	0x03, 0x00, 0x00, 0x9c, 0x00, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x04, // ................
	0x04, 0x00, 0x00, 0x9a, 0x00, 0x00, 0x00, 0x03, 0x04, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x07, // ................
	0x00, 0x00, 0x00, 0x05, 0x04, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x9f, 0x00, 0x00, 0x00, 0xf9, // ................
	0x00, 0x02, 0x00, 0x06, 0x04, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xfe, 0x03, 0x00, 0x00, 0x85, // ................
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x96, 0x00, 0x00, 0x00, 0xc9, // ................
	0x03, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x06, 0x04, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x06, // ................
	0x04, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x40, 0x04, 0x00, 0x00, 0x05, // ...........@....
	0x04, 0x00, 0x00, 0x01, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0xfe, 0x03, 0x00, 0x00, 0x50, // ...............P
	0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xfa, 0x01, 0x00, 0x00, 0x3e, 0x04, 0x00, 0x00, 0x3f, // ...........>...?
	0x04, 0x00, 0x00, 0x40, 0x04, 0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x3e, 0x00, 0x03, 0x00, 0xbc, // ...@.......>....
	0x01, 0x00, 0x00, 0xfa, 0x01, 0x00, 0x00, 0xfd, 0x00, 0x01, 0x00, 0x38, 0x00, 0x01, 0x00, 0x00, // ...........8....
	0x00, 0xa0, 0x00,                                                                               // ...
};
static const bgfx::EmbeddedShader fs_pp_stereo_anaglyph_lin_srgb_nodesat = BGFX_EMBEDDED_SHADER(fs_pp_stereo_anaglyph_lin_srgb_nodesat);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Build of fragment shader from fs_pp_stereo.sc to fs_pp_stereo_anaglyph_lin_srgb_dyndesat with options: ANAGLYPH DYNDESAT SRGB NOSTEREO
static const uint8_t fs_pp_stereo_anaglyph_lin_srgb_dyndesat_mtl[7555] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x14, 0x74, // FSH.o.><.......t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, // ex_stereo_fbSamp
	0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x74, 0x65, // ler...........te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x54, 0x65, 0x78, 0x74, 0x75, // x_stereo_fbTextu
	0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x74, 0x65, 0x78, // re...........tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, // _stereo_depthSam
	0x70, 0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x74, // pler...........t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x54, // ex_stereo_depthT
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, // exture..........
	0x13, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, // .Stereo_MS_ZPD_Y
	0x41, 0x78, 0x69, 0x73, 0x12, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x77, // Axis...........w
	0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x01, 0x10, 0x00, 0x01, 0x00, 0x00, // _h_height.......
	0x00, 0x00, 0x00, 0x1a, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, // ....Stereo_LeftL
	0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x12, 0x01, // uminance_Gamma..
	0xa0, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // .........Stereo_
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, // RightLuminance_D
	0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x12, 0x01, 0xb0, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, // ynDesat.........
	0x00, 0x0e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, // ..Stereo_LeftMat
	0x14, 0x01, 0x20, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x53, 0x74, 0x65, 0x72, 0x65, // .. ........Stere
	0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x01, 0x60, 0x00, 0x04, 0x00, // o_RightMat..`...
	0x00, 0x00, 0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // .....tex_stereo_
	0x66, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x74, 0x65, 0x78, // fb...........tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x10, 0x00, 0x00, // _stereo_depth...
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x1c, 0x00, 0x00, 0x23, 0x69, 0x6e, 0x63, 0x6c, // ...........#incl
	0x75, 0x64, 0x65, 0x20, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x64, 0x6c, 0x69, // ude <metal_stdli
	0x62, 0x3e, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x73, 0x69, 0x6d, // b>.#include <sim
	0x64, 0x2f, 0x73, 0x69, 0x6d, 0x64, 0x2e, 0x68, 0x3e, 0x0a, 0x0a, 0x75, 0x73, 0x69, 0x6e, 0x67, // d/simd.h>..using
	0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x6d, 0x65, 0x74, 0x61, 0x6c, //  namespace metal
	0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, // ;..struct _Globa
	0x6c, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x53, // l.{.    float4 S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, // tereo_MS_ZPD_YAx
	0x69, 0x73, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x77, // is;.    float4 w
	0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, // _h_height;.    f
	0x6c, 0x6f, 0x61, 0x74, 0x34, 0x78, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, // loat4x4 Stereo_L
	0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, // eftMat;.    floa
	0x74, 0x34, 0x78, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, // t4x4 Stereo_Righ
	0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, // tMat;.    float4
	0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, //  Stereo_LeftLumi
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x20, 0x20, 0x20, // nance_Gamma;.   
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, //  float4 Stereo_R
	0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, // ightLuminance_Dy
	0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, // nDesat;.};..stru
	0x63, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, // ct xlatMtlMain_o
	0x75, 0x74, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, // ut.{.    float4 
	0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x20, 0x5b, // bgfx_FragData0 [
	0x5b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, // [color(0)]];.};.
	0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, // .struct xlatMtlM
	0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, // ain_in.{.    flo
	0x61, 0x74, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, // at2 v_texcoord0 
	0x5b, 0x5b, 0x75, 0x73, 0x65, 0x72, 0x28, 0x6c, 0x6f, 0x63, 0x6e, 0x30, 0x29, 0x5d, 0x5d, 0x3b, // [[user(locn0)]];
	0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x78, 0x6c, // .};..fragment xl
	0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x78, 0x6c, // atMtlMain_out xl
	0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x28, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, // atMtlMain(xlatMt
	0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x5b, 0x5b, 0x73, 0x74, // lMain_in in [[st
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x5d, 0x5d, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, // age_in]], consta
	0x6e, 0x74, 0x20, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x26, 0x20, 0x5f, 0x6d, 0x74, 0x6c, // nt _Global& _mtl
	0x5f, 0x75, 0x20, 0x5b, 0x5b, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, // _u [[buffer(0)]]
	0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, 0x6f, 0x61, // , texture2d<floa
	0x74, 0x3e, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, // t> tex_stereo_fb
	0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x2c, //  [[texture(0)]],
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, //  texture2d<float
	0x3e, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, // > tex_stereo_dep
	0x74, 0x68, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x31, 0x29, 0x5d, // th [[texture(1)]
	0x5d, 0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, // ], sampler tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, // tereo_fbSampler 
	0x5b, 0x5b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x2c, 0x20, // [[sampler(0)]], 
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // sampler tex_ster
	0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, // eo_depthSampler 
	0x5b, 0x5b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x31, 0x29, 0x5d, 0x5d, 0x29, 0x0a, // [[sampler(1)]]).
	0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, // {.    xlatMtlMai
	0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x3d, 0x20, 0x7b, 0x7d, 0x3b, 0x0a, // n_out out = {};.
	0x20, 0x20, 0x20, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x5f, 0x36, 0x32, 0x39, 0x20, 0x3d, 0x20, //     bool _629 = 
	0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, // _mtl_u.Stereo_MS
	0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x7a, 0x20, 0x21, 0x3d, 0x20, // _ZPD_YAxis.z != 
	0x30, 0x2e, 0x30, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, // 0.0;.    float _
	0x36, 0x38, 0x38, 0x20, 0x3d, 0x20, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x61, 0x78, 0x28, // 688 = fast::max(
	0x30, 0x2e, 0x30, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x77, 0x5f, 0x68, 0x5f, // 0.0, _mtl_u.w_h_
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x6c, // height.w + (_mtl
	0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, // _u.Stereo_MS_ZPD
	0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, // _YAxis.x * (1.0 
	0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, // - (1.0 / (0.5 + 
	0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, 0x6e, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, // (fast::min(fast:
	0x3a, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // :min(tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, // depth.sample(tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, // _stereo_depthSam
	0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, // pler, (in.v_texc
	0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2b, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, // oord0 + select(f
	0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, // loat2(0.5 * _mtl
	0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, // _u.Stereo_MS_ZPD
	0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, // _YAxis.x, 0.0), 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x20, // float2(0.0, 0.5 
	0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // * _mtl_u.Stereo_
	0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, // MS_ZPD_YAxis.x),
	0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x36, 0x32, 0x39, 0x29, 0x29, 0x29, 0x2c, 0x20, //  bool2(_629))), 
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x2c, 0x20, 0x74, // level(0.0)).x, t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, // ex_stereo_depth.
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // sample(tex_stere
	0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, // o_depthSampler, 
	0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, // (in.v_texcoord0 
	0x2b, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, // + select(float2(
	0x30, 0x2e, 0x36, 0x36, 0x36, 0x30, 0x30, 0x30, 0x30, 0x30, 0x38, 0x35, 0x38, 0x33, 0x30, 0x36, // 0.66600000858306
	0x38, 0x38, 0x34, 0x37, 0x36, 0x35, 0x36, 0x32, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, // 884765625 * _mtl
	0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, // _u.Stereo_MS_ZPD
	0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, // _YAxis.x, 0.0), 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, // float2(0.0, 0.66
	0x36, 0x30, 0x30, 0x30, 0x30, 0x30, 0x38, 0x35, 0x38, 0x33, 0x30, 0x36, 0x38, 0x38, 0x34, 0x37, // 6000008583068847
	0x36, 0x35, 0x36, 0x32, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, // 65625 * _mtl_u.S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, // tereo_MS_ZPD_YAx
	0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x36, 0x32, // is.x), bool2(_62
	0x39, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, // 9))), level(0.0)
	0x29, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // ).x), tex_stereo
	0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, // _depth.sample(te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, // x_stereo_depthSa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, // mpler, (in.v_tex
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2b, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, // coord0 + select(
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, // float2(_mtl_u.St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, // ereo_MS_ZPD_YAxi
	0x73, 0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // s.x, 0.0), float
	0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, // 2(0.0, _mtl_u.St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, // ereo_MS_ZPD_YAxi
	0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x36, 0x32, 0x39, // s.x), bool2(_629
	0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, // ))), level(0.0))
	0x2e, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x5f, 0x6d, // .x) * ((1.0 / _m
	0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, // tl_u.Stereo_MS_Z
	0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, // PD_YAxis.y) - 0.
	0x35, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, // 5)))))));.    fl
	0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x38, 0x31, 0x31, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x5f, // oat4 _811 = tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // stereo_fb.sample
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, // (tex_stereo_fbSa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, // mpler, (in.v_tex
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2b, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, // coord0 + select(
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x5f, 0x36, 0x38, 0x38, 0x2c, 0x20, 0x30, 0x2e, 0x30, // float2(_688, 0.0
	0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, // ), float2(0.0, -
	0x5f, 0x36, 0x38, 0x38, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x36, 0x32, // _688), bool2(_62
	0x39, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, // 9))), level(0.0)
	0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x37, 0x35, // );.    float _75
	0x38, 0x20, 0x3d, 0x20, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, // 8 = fast::max(0.
	0x30, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, // 0, _mtl_u.w_h_he
	0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, // ight.w + (_mtl_u
	0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, // .Stereo_MS_ZPD_Y
	0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, // Axis.x * (1.0 - 
	0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x28, 0x66, // (1.0 / (0.5 + (f
	0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, 0x6e, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, // ast::min(fast::m
	0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, // in(tex_stereo_de
	0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, // pth.sample(tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, // tereo_depthSampl
	0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, // er, (in.v_texcoo
	0x72, 0x64, 0x30, 0x20, 0x2d, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, // rd0 - select(flo
	0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, // at2(0.5 * _mtl_u
	0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, // .Stereo_MS_ZPD_Y
	0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, // Axis.x, 0.0), fl
	0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x2a, 0x20, // oat2(0.0, 0.5 * 
	0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, // _mtl_u.Stereo_MS
	0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, // _ZPD_YAxis.x), b
	0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x36, 0x32, 0x39, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, // ool2(_629))), le
	0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x2c, 0x20, 0x74, 0x65, 0x78, // vel(0.0)).x, tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, // _stereo_depth.sa
	0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // mple(tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, // depthSampler, (i
	0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2d, 0x20, // n.v_texcoord0 - 
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, // select(float2(0.
	0x36, 0x36, 0x36, 0x30, 0x30, 0x30, 0x30, 0x30, 0x38, 0x35, 0x38, 0x33, 0x30, 0x36, 0x38, 0x38, // 6660000085830688
	0x34, 0x37, 0x36, 0x35, 0x36, 0x32, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, // 4765625 * _mtl_u
	0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, // .Stereo_MS_ZPD_Y
	0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, // Axis.x, 0.0), fl
	0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x30, // oat2(0.0, 0.6660
	0x30, 0x30, 0x30, 0x30, 0x38, 0x35, 0x38, 0x33, 0x30, 0x36, 0x38, 0x38, 0x34, 0x37, 0x36, 0x35, // 0000858306884765
	0x36, 0x32, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, // 625 * _mtl_u.Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, // reo_MS_ZPD_YAxis
	0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x36, 0x32, 0x39, 0x29, // .x), bool2(_629)
	0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, // )), level(0.0)).
	0x78, 0x29, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, // x), tex_stereo_d
	0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, // epth.sample(tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, // stereo_depthSamp
	0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, // ler, (in.v_texco
	0x6f, 0x72, 0x64, 0x30, 0x20, 0x2d, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, // ord0 - select(fl
	0x6f, 0x61, 0x74, 0x32, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, // oat2(_mtl_u.Ster
	0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, // eo_MS_ZPD_YAxis.
	0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, // x, 0.0), float2(
	0x30, 0x2e, 0x30, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, // 0.0, _mtl_u.Ster
	0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, // eo_MS_ZPD_YAxis.
	0x78, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x36, 0x32, 0x39, 0x29, 0x29, // x), bool2(_629))
	0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, // ), level(0.0)).x
	0x29, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x5f, 0x6d, 0x74, 0x6c, // ) * ((1.0 / _mtl
	0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, // _u.Stereo_MS_ZPD
	0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, // _YAxis.y) - 0.5)
	0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, // ))))));.    floa
	0x74, 0x34, 0x20, 0x5f, 0x38, 0x35, 0x31, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // t4 _851 = tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, // ereo_fb.sample(t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, // ex_stereo_fbSamp
	0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, // ler, (in.v_texco
	0x6f, 0x72, 0x64, 0x30, 0x20, 0x2d, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, // ord0 - select(fl
	0x6f, 0x61, 0x74, 0x32, 0x28, 0x5f, 0x37, 0x35, 0x38, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, // oat2(_758, 0.0),
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x5f, 0x37, //  float2(0.0, -_7
	0x35, 0x38, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x36, 0x32, 0x39, 0x29, // 58), bool2(_629)
	0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x3b, // )), level(0.0));
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x38, 0x35, 0x34, 0x20, // .    float _854 
	0x3d, 0x20, 0x5f, 0x38, 0x31, 0x31, 0x2e, 0x78, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, // = _811.x;.    fl
	0x6f, 0x61, 0x74, 0x20, 0x5f, 0x31, 0x31, 0x37, 0x34, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x64, // oat _1174;.    d
	0x6f, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // o.    {.        
	0x69, 0x66, 0x20, 0x28, 0x5f, 0x38, 0x35, 0x34, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, // if (_854 <= 0.04
	0x30, 0x34, 0x34, 0x39, 0x39, 0x39, 0x39, 0x32, 0x37, 0x32, 0x38, 0x32, 0x33, 0x33, 0x33, 0x33, // 0449999272823333
	0x37, 0x34, 0x30, 0x32, 0x33, 0x34, 0x33, 0x37, 0x35, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // 740234375).     
	0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //    {.           
	0x20, 0x5f, 0x31, 0x31, 0x37, 0x34, 0x20, 0x3d, 0x20, 0x5f, 0x38, 0x35, 0x34, 0x20, 0x2a, 0x20, //  _1174 = _854 * 
	0x30, 0x2e, 0x30, 0x37, 0x37, 0x33, 0x39, 0x39, 0x33, 0x38, 0x30, 0x35, 0x30, 0x35, 0x30, 0x38, // 0.07739938050508
	0x34, 0x39, 0x39, 0x31, 0x34, 0x35, 0x35, 0x30, 0x37, 0x38, 0x31, 0x32, 0x35, 0x3b, 0x0a, 0x20, // 4991455078125;. 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, //            break
	0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, // ;.        }.    
	0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //     else.       
	0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, //  {.            _
	0x31, 0x31, 0x37, 0x34, 0x20, 0x3d, 0x20, 0x70, 0x6f, 0x77, 0x72, 0x28, 0x28, 0x5f, 0x38, 0x35, // 1174 = powr((_85
	0x34, 0x20, 0x2a, 0x20, 0x30, 0x2e, 0x39, 0x34, 0x37, 0x38, 0x36, 0x37, 0x32, 0x37, 0x34, 0x32, // 4 * 0.9478672742
	0x38, 0x34, 0x33, 0x36, 0x32, 0x37, 0x39, 0x32, 0x39, 0x36, 0x38, 0x37, 0x35, 0x29, 0x20, 0x2b, // 8436279296875) +
	0x20, 0x30, 0x2e, 0x30, 0x35, 0x32, 0x31, 0x33, 0x32, 0x36, 0x39, 0x39, 0x36, 0x33, 0x38, 0x36, //  0.0521326996386
	0x30, 0x35, 0x31, 0x31, 0x37, 0x37, 0x39, 0x37, 0x38, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x2c, // 051177978515625,
	0x20, 0x32, 0x2e, 0x34, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x39, 0x35, 0x33, 0x36, 0x37, 0x34, //  2.4000000953674
	0x33, 0x31, 0x36, 0x34, 0x30, 0x36, 0x32, 0x35, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // 31640625);.     
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, //        break;.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //       }.        
	0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x20, 0x2f, 0x2f, 0x20, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, // break; // unreac
	0x68, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x61, 0x72, 0x6f, 0x75, 0x6e, 0x64, // hable workaround
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x28, 0x66, 0x61, 0x6c, // .    } while(fal
	0x73, 0x65, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, // se);.    float _
	0x38, 0x35, 0x36, 0x20, 0x3d, 0x20, 0x5f, 0x38, 0x31, 0x31, 0x2e, 0x79, 0x3b, 0x0a, 0x20, 0x20, // 856 = _811.y;.  
	0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x31, 0x31, 0x37, 0x35, 0x3b, 0x0a, 0x20, //   float _1175;. 
	0x20, 0x20, 0x20, 0x64, 0x6f, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, //    do.    {.    
	0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, 0x38, 0x35, 0x36, 0x20, 0x3c, 0x3d, 0x20, //     if (_856 <= 
	0x30, 0x2e, 0x30, 0x34, 0x30, 0x34, 0x34, 0x39, 0x39, 0x39, 0x39, 0x32, 0x37, 0x32, 0x38, 0x32, // 0.04044999927282
	0x33, 0x33, 0x33, 0x33, 0x37, 0x34, 0x30, 0x32, 0x33, 0x34, 0x33, 0x37, 0x35, 0x29, 0x0a, 0x20, // 3333740234375). 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //        {.       
	0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x31, 0x31, 0x37, 0x35, 0x20, 0x3d, 0x20, 0x5f, 0x38, 0x35, //      _1175 = _85
	0x36, 0x20, 0x2a, 0x20, 0x30, 0x2e, 0x30, 0x37, 0x37, 0x33, 0x39, 0x39, 0x33, 0x38, 0x30, 0x35, // 6 * 0.0773993805
	0x30, 0x35, 0x30, 0x38, 0x34, 0x39, 0x39, 0x31, 0x34, 0x35, 0x35, 0x30, 0x37, 0x38, 0x31, 0x32, // 0508499145507812
	0x35, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, // 5;.            b
	0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, // reak;.        }.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, //         else.   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //      {.         
	0x20, 0x20, 0x20, 0x5f, 0x31, 0x31, 0x37, 0x35, 0x20, 0x3d, 0x20, 0x70, 0x6f, 0x77, 0x72, 0x28, //    _1175 = powr(
	0x28, 0x5f, 0x38, 0x35, 0x36, 0x20, 0x2a, 0x20, 0x30, 0x2e, 0x39, 0x34, 0x37, 0x38, 0x36, 0x37, // (_856 * 0.947867
	0x32, 0x37, 0x34, 0x32, 0x38, 0x34, 0x33, 0x36, 0x32, 0x37, 0x39, 0x32, 0x39, 0x36, 0x38, 0x37, // 2742843627929687
	0x35, 0x29, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x32, 0x31, 0x33, 0x32, 0x36, 0x39, 0x39, // 5) + 0.052132699
	0x36, 0x33, 0x38, 0x36, 0x30, 0x35, 0x31, 0x31, 0x37, 0x37, 0x39, 0x37, 0x38, 0x35, 0x31, 0x35, // 6386051177978515
	0x36, 0x32, 0x35, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x39, 0x35, // 625, 2.400000095
	0x33, 0x36, 0x37, 0x34, 0x33, 0x31, 0x36, 0x34, 0x30, 0x36, 0x32, 0x35, 0x29, 0x3b, 0x0a, 0x20, // 367431640625);. 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, //            break
	0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, // ;.        }.    
	0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x20, 0x2f, 0x2f, 0x20, 0x75, 0x6e, //     break; // un
	0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x61, 0x72, // reachable workar
	0x6f, 0x75, 0x6e, 0x64, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, // ound.    } while
	0x28, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, // (false);.    flo
	0x61, 0x74, 0x20, 0x5f, 0x38, 0x35, 0x38, 0x20, 0x3d, 0x20, 0x5f, 0x38, 0x31, 0x31, 0x2e, 0x7a, // at _858 = _811.z
	0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x31, 0x31, 0x37, // ;.    float _117
	0x36, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x64, 0x6f, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, // 6;.    do.    {.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, 0x38, 0x35, 0x38, //         if (_858
	0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, 0x34, 0x34, 0x39, 0x39, 0x39, 0x39, 0x32, //  <= 0.0404499992
	0x37, 0x32, 0x38, 0x32, 0x33, 0x33, 0x33, 0x33, 0x37, 0x34, 0x30, 0x32, 0x33, 0x34, 0x33, 0x37, // 7282333374023437
	0x35, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, // 5).        {.   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x31, 0x31, 0x37, 0x36, 0x20, 0x3d, //          _1176 =
	0x20, 0x5f, 0x38, 0x35, 0x38, 0x20, 0x2a, 0x20, 0x30, 0x2e, 0x30, 0x37, 0x37, 0x33, 0x39, 0x39, //  _858 * 0.077399
	0x33, 0x38, 0x30, 0x35, 0x30, 0x35, 0x30, 0x38, 0x34, 0x39, 0x39, 0x31, 0x34, 0x35, 0x35, 0x30, // 3805050849914550
	0x37, 0x38, 0x31, 0x32, 0x35, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 78125;.         
	0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //    break;.      
	0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, //   }.        else
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // .        {.     
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x31, 0x31, 0x37, 0x36, 0x20, 0x3d, 0x20, 0x70, //        _1176 = p
	0x6f, 0x77, 0x72, 0x28, 0x28, 0x5f, 0x38, 0x35, 0x38, 0x20, 0x2a, 0x20, 0x30, 0x2e, 0x39, 0x34, // owr((_858 * 0.94
	0x37, 0x38, 0x36, 0x37, 0x32, 0x37, 0x34, 0x32, 0x38, 0x34, 0x33, 0x36, 0x32, 0x37, 0x39, 0x32, // 7867274284362792
	0x39, 0x36, 0x38, 0x37, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x32, 0x31, 0x33, // 96875) + 0.05213
	0x32, 0x36, 0x39, 0x39, 0x36, 0x33, 0x38, 0x36, 0x30, 0x35, 0x31, 0x31, 0x37, 0x37, 0x39, 0x37, // 2699638605117797
	0x38, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x30, 0x30, 0x30, 0x30, // 8515625, 2.40000
	0x30, 0x30, 0x39, 0x35, 0x33, 0x36, 0x37, 0x34, 0x33, 0x31, 0x36, 0x34, 0x30, 0x36, 0x32, 0x35, // 0095367431640625
	0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, // );.            b
	0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, // reak;.        }.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x20, 0x2f, //         break; /
	0x2f, 0x20, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x77, 0x6f, // / unreachable wo
	0x72, 0x6b, 0x61, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x20, 0x77, // rkaround.    } w
	0x68, 0x69, 0x6c, 0x65, 0x28, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, // hile(false);.   
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x38, 0x36, 0x30, 0x20, 0x3d, 0x20, 0x66, //  float3 _860 = f
	0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x31, 0x31, 0x37, 0x34, 0x2c, 0x20, 0x5f, 0x31, 0x31, // loat3(_1174, _11
	0x37, 0x35, 0x2c, 0x20, 0x5f, 0x31, 0x31, 0x37, 0x36, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, // 75, _1176);.    
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x39, 0x31, 0x37, 0x20, 0x3d, 0x20, 0x5f, 0x38, 0x35, // float _917 = _85
	0x31, 0x2e, 0x78, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, // 1.x;.    float _
	0x31, 0x31, 0x38, 0x30, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x64, 0x6f, 0x0a, 0x20, 0x20, 0x20, // 1180;.    do.   
	0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, //  {.        if (_
	0x39, 0x31, 0x37, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, 0x34, 0x34, 0x39, 0x39, // 917 <= 0.0404499
	0x39, 0x39, 0x32, 0x37, 0x32, 0x38, 0x32, 0x33, 0x33, 0x33, 0x33, 0x37, 0x34, 0x30, 0x32, 0x33, // 9927282333374023
	0x34, 0x33, 0x37, 0x35, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, // 4375).        {.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x31, 0x31, 0x38, //             _118
	0x30, 0x20, 0x3d, 0x20, 0x5f, 0x39, 0x31, 0x37, 0x20, 0x2a, 0x20, 0x30, 0x2e, 0x30, 0x37, 0x37, // 0 = _917 * 0.077
	0x33, 0x39, 0x39, 0x33, 0x38, 0x30, 0x35, 0x30, 0x35, 0x30, 0x38, 0x34, 0x39, 0x39, 0x31, 0x34, // 3993805050849914
	0x35, 0x35, 0x30, 0x37, 0x38, 0x31, 0x32, 0x35, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 55078125;.      
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, //       break;.   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x65, //      }.        e
	0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, // lse.        {.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x31, 0x31, 0x38, 0x30, 0x20, //           _1180 
	0x3d, 0x20, 0x70, 0x6f, 0x77, 0x72, 0x28, 0x28, 0x5f, 0x39, 0x31, 0x37, 0x20, 0x2a, 0x20, 0x30, // = powr((_917 * 0
	0x2e, 0x39, 0x34, 0x37, 0x38, 0x36, 0x37, 0x32, 0x37, 0x34, 0x32, 0x38, 0x34, 0x33, 0x36, 0x32, // .947867274284362
	0x37, 0x39, 0x32, 0x39, 0x36, 0x38, 0x37, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x35, // 79296875) + 0.05
	0x32, 0x31, 0x33, 0x32, 0x36, 0x39, 0x39, 0x36, 0x33, 0x38, 0x36, 0x30, 0x35, 0x31, 0x31, 0x37, // 2132699638605117
	0x37, 0x39, 0x37, 0x38, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x30, // 7978515625, 2.40
	0x30, 0x30, 0x30, 0x30, 0x30, 0x39, 0x35, 0x33, 0x36, 0x37, 0x34, 0x33, 0x31, 0x36, 0x34, 0x30, // 0000095367431640
	0x36, 0x32, 0x35, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 625);.          
	0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //   break;.       
	0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, //  }.        break
	0x3b, 0x20, 0x2f, 0x2f, 0x20, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, // ; // unreachable
	0x20, 0x77, 0x6f, 0x72, 0x6b, 0x61, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x0a, 0x20, 0x20, 0x20, 0x20, //  workaround.    
	0x7d, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x28, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x29, 0x3b, 0x0a, // } while(false);.
	0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x39, 0x31, 0x39, 0x20, 0x3d, //     float _919 =
	0x20, 0x5f, 0x38, 0x35, 0x31, 0x2e, 0x79, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, //  _851.y;.    flo
	0x61, 0x74, 0x20, 0x5f, 0x31, 0x31, 0x38, 0x31, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x64, 0x6f, // at _1181;.    do
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, // .    {.        i
	0x66, 0x20, 0x28, 0x5f, 0x39, 0x31, 0x39, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, // f (_919 <= 0.040
	0x34, 0x34, 0x39, 0x39, 0x39, 0x39, 0x32, 0x37, 0x32, 0x38, 0x32, 0x33, 0x33, 0x33, 0x33, 0x37, // 4499992728233337
	0x34, 0x30, 0x32, 0x33, 0x34, 0x33, 0x37, 0x35, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 40234375).      
	0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //   {.            
	0x5f, 0x31, 0x31, 0x38, 0x31, 0x20, 0x3d, 0x20, 0x5f, 0x39, 0x31, 0x39, 0x20, 0x2a, 0x20, 0x30, // _1181 = _919 * 0
	0x2e, 0x30, 0x37, 0x37, 0x33, 0x39, 0x39, 0x33, 0x38, 0x30, 0x35, 0x30, 0x35, 0x30, 0x38, 0x34, // .077399380505084
	0x39, 0x39, 0x31, 0x34, 0x35, 0x35, 0x30, 0x37, 0x38, 0x31, 0x32, 0x35, 0x3b, 0x0a, 0x20, 0x20, // 991455078125;.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, //           break;
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // .        }.     
	0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //    else.        
	0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x31, // {.            _1
	0x31, 0x38, 0x31, 0x20, 0x3d, 0x20, 0x70, 0x6f, 0x77, 0x72, 0x28, 0x28, 0x5f, 0x39, 0x31, 0x39, // 181 = powr((_919
	0x20, 0x2a, 0x20, 0x30, 0x2e, 0x39, 0x34, 0x37, 0x38, 0x36, 0x37, 0x32, 0x37, 0x34, 0x32, 0x38, //  * 0.94786727428
	0x34, 0x33, 0x36, 0x32, 0x37, 0x39, 0x32, 0x39, 0x36, 0x38, 0x37, 0x35, 0x29, 0x20, 0x2b, 0x20, // 436279296875) + 
	0x30, 0x2e, 0x30, 0x35, 0x32, 0x31, 0x33, 0x32, 0x36, 0x39, 0x39, 0x36, 0x33, 0x38, 0x36, 0x30, // 0.05213269963860
	0x35, 0x31, 0x31, 0x37, 0x37, 0x39, 0x37, 0x38, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x2c, 0x20, // 51177978515625, 
	0x32, 0x2e, 0x34, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x39, 0x35, 0x33, 0x36, 0x37, 0x34, 0x33, // 2.40000009536743
	0x31, 0x36, 0x34, 0x30, 0x36, 0x32, 0x35, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 1640625);.      
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, //       break;.   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, //      }.        b
	0x72, 0x65, 0x61, 0x6b, 0x3b, 0x20, 0x2f, 0x2f, 0x20, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, // reak; // unreach
	0x61, 0x62, 0x6c, 0x65, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x61, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x0a, // able workaround.
	0x20, 0x20, 0x20, 0x20, 0x7d, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x28, 0x66, 0x61, 0x6c, 0x73, //     } while(fals
	0x65, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x39, // e);.    float _9
	0x32, 0x31, 0x20, 0x3d, 0x20, 0x5f, 0x38, 0x35, 0x31, 0x2e, 0x7a, 0x3b, 0x0a, 0x20, 0x20, 0x20, // 21 = _851.z;.   
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x31, 0x31, 0x38, 0x32, 0x3b, 0x0a, 0x20, 0x20, //  float _1182;.  
	0x20, 0x20, 0x64, 0x6f, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, //   do.    {.     
	0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, 0x39, 0x32, 0x31, 0x20, 0x3c, 0x3d, 0x20, 0x30, //    if (_921 <= 0
	0x2e, 0x30, 0x34, 0x30, 0x34, 0x34, 0x39, 0x39, 0x39, 0x39, 0x32, 0x37, 0x32, 0x38, 0x32, 0x33, // .040449999272823
	0x33, 0x33, 0x33, 0x37, 0x34, 0x30, 0x32, 0x33, 0x34, 0x33, 0x37, 0x35, 0x29, 0x0a, 0x20, 0x20, // 333740234375).  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //       {.        
	0x20, 0x20, 0x20, 0x20, 0x5f, 0x31, 0x31, 0x38, 0x32, 0x20, 0x3d, 0x20, 0x5f, 0x39, 0x32, 0x31, //     _1182 = _921
	0x20, 0x2a, 0x20, 0x30, 0x2e, 0x30, 0x37, 0x37, 0x33, 0x39, 0x39, 0x33, 0x38, 0x30, 0x35, 0x30, //  * 0.07739938050
	0x35, 0x30, 0x38, 0x34, 0x39, 0x39, 0x31, 0x34, 0x35, 0x35, 0x30, 0x37, 0x38, 0x31, 0x32, 0x35, // 5084991455078125
	0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, // ;.            br
	0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, // eak;.        }. 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, //        else.    
	0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //     {.          
	0x20, 0x20, 0x5f, 0x31, 0x31, 0x38, 0x32, 0x20, 0x3d, 0x20, 0x70, 0x6f, 0x77, 0x72, 0x28, 0x28, //   _1182 = powr((
	0x5f, 0x39, 0x32, 0x31, 0x20, 0x2a, 0x20, 0x30, 0x2e, 0x39, 0x34, 0x37, 0x38, 0x36, 0x37, 0x32, // _921 * 0.9478672
	0x37, 0x34, 0x32, 0x38, 0x34, 0x33, 0x36, 0x32, 0x37, 0x39, 0x32, 0x39, 0x36, 0x38, 0x37, 0x35, // 7428436279296875
	0x29, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x32, 0x31, 0x33, 0x32, 0x36, 0x39, 0x39, 0x36, // ) + 0.0521326996
	0x33, 0x38, 0x36, 0x30, 0x35, 0x31, 0x31, 0x37, 0x37, 0x39, 0x37, 0x38, 0x35, 0x31, 0x35, 0x36, // 3860511779785156
	0x32, 0x35, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x39, 0x35, 0x33, // 25, 2.4000000953
	0x36, 0x37, 0x34, 0x33, 0x31, 0x36, 0x34, 0x30, 0x36, 0x32, 0x35, 0x29, 0x3b, 0x0a, 0x20, 0x20, // 67431640625);.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, //           break;
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // .        }.     
	0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x20, 0x2f, 0x2f, 0x20, 0x75, 0x6e, 0x72, //    break; // unr
	0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x61, 0x72, 0x6f, // eachable workaro
	0x75, 0x6e, 0x64, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x28, // und.    } while(
	0x66, 0x61, 0x6c, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, // false);.    floa
	0x74, 0x33, 0x20, 0x5f, 0x39, 0x32, 0x33, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, // t3 _923 = float3
	0x28, 0x5f, 0x31, 0x31, 0x38, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x31, 0x38, 0x31, 0x2c, 0x20, 0x5f, // (_1180, _1181, _
	0x31, 0x31, 0x38, 0x32, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // 1182);.    float
	0x20, 0x5f, 0x39, 0x39, 0x38, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x5f, 0x38, 0x36, 0x30, //  _998 = dot(_860
	0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // , _mtl_u.Stereo_
	0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, // LeftLuminance_Ga
	0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, // mma.xyz);.    fl
	0x6f, 0x61, 0x74, 0x20, 0x5f, 0x31, 0x30, 0x30, 0x32, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, // oat _1002 = dot(
	0x5f, 0x38, 0x36, 0x30, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, // _860, _mtl_u.Ste
	0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, // reo_RightLuminan
	0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, // ce_DynDesat.xyz)
	0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x31, 0x30, 0x30, // ;.    float _100
	0x36, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x5f, 0x39, 0x32, 0x33, 0x2c, 0x20, 0x5f, 0x6d, // 6 = dot(_923, _m
	0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, // tl_u.Stereo_Left
	0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, // Luminance_Gamma.
	0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // xyz);.    float 
	0x5f, 0x31, 0x30, 0x31, 0x30, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x5f, 0x39, 0x32, 0x33, // _1010 = dot(_923
	0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // , _mtl_u.Stereo_
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, // RightLuminance_D
	0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x20, 0x20, // ynDesat.xyz);.  
	0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x31, 0x30, 0x31, 0x33, 0x20, 0x3d, 0x20, //   float _1013 = 
	0x5f, 0x39, 0x39, 0x38, 0x20, 0x2b, 0x20, 0x5f, 0x31, 0x30, 0x30, 0x32, 0x3b, 0x0a, 0x20, 0x20, // _998 + _1002;.  
	0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x31, 0x30, 0x31, 0x36, 0x20, 0x3d, 0x20, //   float _1016 = 
	0x5f, 0x31, 0x30, 0x30, 0x36, 0x20, 0x2b, 0x20, 0x5f, 0x31, 0x30, 0x31, 0x30, 0x3b, 0x0a, 0x20, // _1006 + _1010;. 
	0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x31, 0x30, 0x38, 0x34, 0x20, //    float4 _1084 
	0x3d, 0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x6d, 0x69, 0x78, 0x28, 0x5f, 0x38, // = (float4(mix(_8
	0x36, 0x30, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x31, 0x30, 0x31, 0x33, // 60, float3(_1013
	0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, // ), float3(_mtl_u
	0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, // .Stereo_RightLum
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, // inance_DynDesat.
	0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x5f, 0x39, 0x39, 0x38, 0x20, 0x2d, 0x20, // w * abs((_998 - 
	0x5f, 0x31, 0x30, 0x30, 0x32, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x5f, 0x31, 0x30, 0x31, 0x33, 0x20, // _1002) / (_1013 
	0x2b, 0x20, 0x39, 0x2e, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x37, 0x34, 0x37, 0x33, 0x37, 0x38, // + 9.999999747378
	0x37, 0x35, 0x31, 0x36, 0x33, 0x35, 0x35, 0x35, 0x31, 0x34, 0x35, 0x32, 0x36, 0x33, 0x36, 0x37, // 7516355514526367
	0x31, 0x38, 0x38, 0x65, 0x2d, 0x30, 0x35, 0x29, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, // 188e-05)))), 1.0
	0x29, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, // ) * _mtl_u.Stere
	0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x66, 0x6c, // o_LeftMat) + (fl
	0x6f, 0x61, 0x74, 0x34, 0x28, 0x6d, 0x69, 0x78, 0x28, 0x5f, 0x39, 0x32, 0x33, 0x2c, 0x20, 0x66, // oat4(mix(_923, f
	0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x31, 0x30, 0x31, 0x36, 0x29, 0x2c, 0x20, 0x66, 0x6c, // loat3(_1016), fl
	0x6f, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, // oat3(_mtl_u.Ster
	0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, // eo_RightLuminanc
	0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, // e_DynDesat.w * a
	0x62, 0x73, 0x28, 0x28, 0x5f, 0x31, 0x30, 0x30, 0x36, 0x20, 0x2d, 0x20, 0x5f, 0x31, 0x30, 0x31, // bs((_1006 - _101
	0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x5f, 0x31, 0x30, 0x31, 0x36, 0x20, 0x2b, 0x20, 0x39, 0x2e, // 0) / (_1016 + 9.
	0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x37, 0x34, 0x37, 0x33, 0x37, 0x38, 0x37, 0x35, 0x31, 0x36, // 9999997473787516
	0x33, 0x35, 0x35, 0x35, 0x31, 0x34, 0x35, 0x32, 0x36, 0x33, 0x36, 0x37, 0x31, 0x38, 0x38, 0x65, // 355514526367188e
	0x2d, 0x30, 0x35, 0x29, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2a, 0x20, // -05)))), 1.0) * 
	0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, // _mtl_u.Stereo_Ri
	0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, // ghtMat);.    flo
	0x61, 0x74, 0x20, 0x5f, 0x31, 0x30, 0x38, 0x39, 0x20, 0x3d, 0x20, 0x5f, 0x31, 0x30, 0x38, 0x34, // at _1089 = _1084
	0x2e, 0x78, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x31, // .x;.    float _1
	0x31, 0x38, 0x36, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, 0x31, 0x30, // 186;.    if (_10
	0x38, 0x39, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x33, 0x31, 0x33, 0x30, 0x38, 0x30, // 89 <= 0.00313080
	0x30, 0x30, 0x39, 0x30, 0x37, 0x33, 0x30, 0x31, 0x39, 0x30, 0x32, 0x37, 0x37, 0x30, 0x39, 0x39, // 0090730190277099
	0x36, 0x30, 0x39, 0x33, 0x37, 0x35, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, // 609375).    {.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x31, 0x31, 0x38, 0x36, 0x20, 0x3d, 0x20, 0x31, 0x32, //       _1186 = 12
	0x2e, 0x39, 0x32, 0x30, 0x30, 0x30, 0x30, 0x30, 0x37, 0x36, 0x32, 0x39, 0x33, 0x39, 0x34, 0x35, // .920000076293945
	0x33, 0x31, 0x32, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x31, 0x30, 0x38, 0x39, 0x3b, 0x0a, 0x20, 0x20, // 3125 * _1089;.  
	0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, //   }.    else.   
	0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x31, 0x31, 0x38, 0x36, //  {.        _1186
	0x20, 0x3d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x35, 0x34, 0x39, 0x39, 0x39, 0x39, 0x34, 0x37, 0x35, //  = (1.0549999475
	0x34, 0x37, 0x39, 0x31, 0x32, 0x35, 0x39, 0x37, 0x36, 0x35, 0x36, 0x32, 0x35, 0x20, 0x2a, 0x20, // 4791259765625 * 
	0x70, 0x6f, 0x77, 0x72, 0x28, 0x5f, 0x31, 0x30, 0x38, 0x39, 0x2c, 0x20, 0x30, 0x2e, 0x34, 0x31, // powr(_1089, 0.41
	0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x37, 0x33, 0x32, 0x35, 0x35, 0x39, 0x32, 0x30, 0x34, // 6666656732559204
	0x31, 0x30, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, // 1015625)) - 0.05
	0x34, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x37, 0x30, 0x31, 0x39, 0x37, 0x36, 0x37, 0x37, 0x36, // 4999999701976776
	0x31, 0x32, 0x33, 0x30, 0x34, 0x36, 0x38, 0x37, 0x35, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, // 123046875;.    }
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x31, 0x30, 0x39, 0x31, // .    float _1091
	0x20, 0x3d, 0x20, 0x5f, 0x31, 0x30, 0x38, 0x34, 0x2e, 0x79, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, //  = _1084.y;.    
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x31, 0x31, 0x38, 0x37, 0x3b, 0x0a, 0x20, 0x20, 0x20, // float _1187;.   
	0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, 0x31, 0x30, 0x39, 0x31, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, //  if (_1091 <= 0.
	0x30, 0x30, 0x33, 0x31, 0x33, 0x30, 0x38, 0x30, 0x30, 0x30, 0x39, 0x30, 0x37, 0x33, 0x30, 0x31, // 0031308000907301
	0x39, 0x30, 0x32, 0x37, 0x37, 0x30, 0x39, 0x39, 0x36, 0x30, 0x39, 0x33, 0x37, 0x35, 0x29, 0x0a, // 90277099609375).
	0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x31, //     {.        _1
	0x31, 0x38, 0x37, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x30, 0x30, 0x30, 0x30, 0x30, // 187 = 12.9200000
	0x37, 0x36, 0x32, 0x39, 0x33, 0x39, 0x34, 0x35, 0x33, 0x31, 0x32, 0x35, 0x20, 0x2a, 0x20, 0x5f, // 762939453125 * _
	0x31, 0x30, 0x39, 0x31, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, // 1091;.    }.    
	0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // else.    {.     
	0x20, 0x20, 0x20, 0x5f, 0x31, 0x31, 0x38, 0x37, 0x20, 0x3d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x35, //    _1187 = (1.05
	0x34, 0x39, 0x39, 0x39, 0x39, 0x34, 0x37, 0x35, 0x34, 0x37, 0x39, 0x31, 0x32, 0x35, 0x39, 0x37, // 4999947547912597
	0x36, 0x35, 0x36, 0x32, 0x35, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x72, 0x28, 0x5f, 0x31, 0x30, // 65625 * powr(_10
	0x39, 0x31, 0x2c, 0x20, 0x30, 0x2e, 0x34, 0x31, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x37, // 91, 0.4166666567
	0x33, 0x32, 0x35, 0x35, 0x39, 0x32, 0x30, 0x34, 0x31, 0x30, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, // 325592041015625)
	0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x34, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x37, // ) - 0.0549999997
	0x30, 0x31, 0x39, 0x37, 0x36, 0x37, 0x37, 0x36, 0x31, 0x32, 0x33, 0x30, 0x34, 0x36, 0x38, 0x37, // 0197677612304687
	0x35, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, // 5;.    }.    flo
	0x61, 0x74, 0x20, 0x5f, 0x31, 0x30, 0x39, 0x33, 0x20, 0x3d, 0x20, 0x5f, 0x31, 0x30, 0x38, 0x34, // at _1093 = _1084
	0x2e, 0x7a, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x31, // .z;.    float _1
	0x31, 0x38, 0x38, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, 0x31, 0x30, // 188;.    if (_10
	0x39, 0x33, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x33, 0x31, 0x33, 0x30, 0x38, 0x30, // 93 <= 0.00313080
	0x30, 0x30, 0x39, 0x30, 0x37, 0x33, 0x30, 0x31, 0x39, 0x30, 0x32, 0x37, 0x37, 0x30, 0x39, 0x39, // 0090730190277099
	0x36, 0x30, 0x39, 0x33, 0x37, 0x35, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, // 609375).    {.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x31, 0x31, 0x38, 0x38, 0x20, 0x3d, 0x20, 0x31, 0x32, //       _1188 = 12
	0x2e, 0x39, 0x32, 0x30, 0x30, 0x30, 0x30, 0x30, 0x37, 0x36, 0x32, 0x39, 0x33, 0x39, 0x34, 0x35, // .920000076293945
	0x33, 0x31, 0x32, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x31, 0x30, 0x39, 0x33, 0x3b, 0x0a, 0x20, 0x20, // 3125 * _1093;.  
	0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, //   }.    else.   
	0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x31, 0x31, 0x38, 0x38, //  {.        _1188
	0x20, 0x3d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x35, 0x34, 0x39, 0x39, 0x39, 0x39, 0x34, 0x37, 0x35, //  = (1.0549999475
	0x34, 0x37, 0x39, 0x31, 0x32, 0x35, 0x39, 0x37, 0x36, 0x35, 0x36, 0x32, 0x35, 0x20, 0x2a, 0x20, // 4791259765625 * 
	0x70, 0x6f, 0x77, 0x72, 0x28, 0x5f, 0x31, 0x30, 0x39, 0x33, 0x2c, 0x20, 0x30, 0x2e, 0x34, 0x31, // powr(_1093, 0.41
	0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x37, 0x33, 0x32, 0x35, 0x35, 0x39, 0x32, 0x30, 0x34, // 6666656732559204
	0x31, 0x30, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, // 1015625)) - 0.05
	0x34, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x37, 0x30, 0x31, 0x39, 0x37, 0x36, 0x37, 0x37, 0x36, // 4999999701976776
	0x31, 0x32, 0x33, 0x30, 0x34, 0x36, 0x38, 0x37, 0x35, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, // 123046875;.    }
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x6f, 0x75, 0x74, 0x2e, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, // .    out.bgfx_Fr
	0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, // agData0 = float4
	0x28, 0x5f, 0x31, 0x31, 0x38, 0x36, 0x2c, 0x20, 0x5f, 0x31, 0x31, 0x38, 0x37, 0x2c, 0x20, 0x5f, // (_1186, _1187, _
	0x31, 0x31, 0x38, 0x38, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, // 1188, 1.0);.    
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6f, 0x75, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x0a, 0x00, // return out;.}...
	0x00, 0x00, 0x01,                                                                               // ...
};
static const uint8_t fs_pp_stereo_anaglyph_lin_srgb_dyndesat_essl[10776] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x2a, // FSH.o.><.......*
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x33, 0x32, 0x30, 0x20, 0x65, // ..#version 320 e
	0x73, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, // s.#define attrib
	0x75, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x76, // ute in.#define v
	0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, // arying in.precis
	0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3b, // ion highp float;
	0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, // .precision highp
	0x20, 0x69, 0x6e, 0x74, 0x3b, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x73, 0x68, //  int;.#define sh
	0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, // adow2D(_sampler,
	0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, //  _coord) texture
	0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, // (_sampler, _coor
	0x64, 0x29, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x73, 0x68, 0x61, 0x64, 0x6f, // d).#define shado
	0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // w2DProj(_sampler
	0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // , _coord) textur
	0x65, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, // eProj(_sampler, 
	0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x0a, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x65, 0x64, 0x69, // _coord).out medi
	0x75, 0x6d, 0x70, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, // ump vec4 bgfx_Fr
	0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, // agColor;.varying
	0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, //  vec2 v_texcoord
	0x30, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, // 0;.vec3 instMul(
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x20, // vec3 _vec, mat3 
	0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // _mtx) { return (
	0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, //  (_vec) * (_mtx)
	0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, //  ); }.vec3 instM
	0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, // ul(mat3 _mtx, ve
	0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, // c3 _vec) { retur
	0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, // n ( (_mtx) * (_v
	0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, // ec) ); }.vec4 in
	0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, // stMul(vec4 _vec,
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, //  mat4 _mtx) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, // turn ( (_vec) * 
	0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, // (_mtx) ); }.vec4
	0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, //  instMul(mat4 _m
	0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, // tx, vec4 _vec) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, //  return ( (_mtx)
	0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, //  * (_vec) ); }.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, 0x70, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, // loat rcp(float _
	0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x2f, // a) { return 1.0/
	0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, // _a; }.vec2 rcp(v
	0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // ec2 _a) { return
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, //  vec2(1.0)/_a; }
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, // .vec3 rcp(vec3 _
	0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, // a) { return vec3
	0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, // (1.0)/_a; }.vec4
	0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, //  rcp(vec4 _a) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x31, 0x2e, 0x30, 0x29, // return vec4(1.0)
	0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x65, 0x63, 0x32, // /_a; }.vec2 vec2
	0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, // _splat(float _x)
	0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, //  { return vec2(_
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, // x, _x); }.vec3 v
	0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // ec3_splat(float 
	0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, // _x) { return vec
	0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, // 3(_x, _x, _x); }
	0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, // .vec4 vec4_splat
	0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // (float _x) { ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, // urn vec4(_x, _x,
	0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, //  _x, _x); }.uvec
	0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, // 2 uvec2_splat(ui
	0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // nt _x) { return 
	0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, // uvec2(_x, _x); }
	0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, // .uvec3 uvec3_spl
	0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // at(uint _x) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, // turn uvec3(_x, _
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x34, 0x20, // x, _x); }.uvec4 
	0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, // uvec4_splat(uint
	0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, //  _x) { return uv
	0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, // ec4(_x, _x, _x, 
	0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, // _x); }.mat4 mtxF
	0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, // romRows(vec4 _0,
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, //  vec4 _1, vec4 _
	0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // 2, vec4 _3).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, // turn transpose(m
	0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, // at4(_0, _1, _2, 
	0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, // _3) );.}.mat4 mt
	0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, // xFromCols(vec4 _
	0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // 0, vec4 _1, vec4
	0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, //  _2, vec4 _3).{.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, // return mat4(_0, 
	0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, // _1, _2, _3);.}.m
	0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, // at3 mtxFromRows(
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, // vec3 _0, vec3 _1
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // , vec3 _2).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, // urn transpose(ma
	0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x20, 0x29, // t3(_0, _1, _2) )
	0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, // ;.}.mat3 mtxFrom
	0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, // Cols(vec3 _0, ve
	0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, // c3 _1, vec3 _2).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, // {.return mat3(_0
	0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, // , _1, _2);.}.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, // form vec4 u_view
	0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, // Rect;.uniform ve
	0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x54, 0x65, 0x78, 0x65, 0x6c, 0x3b, 0x0a, // c4 u_viewTexel;.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, // uniform mat4 u_v
	0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, // iew;.uniform mat
	0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, // 4 u_invView;.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x70, 0x72, 0x6f, 0x6a, // form mat4 u_proj
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, // ;.uniform mat4 u
	0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // _invProj;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, // m mat4 u_viewPro
	0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, // j;.uniform mat4 
	0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, // u_invViewProj;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, // niform mat4 u_mo
	0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // del[32];.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, //  mat4 u_modelVie
	0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, // w;.uniform mat4 
	0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, // u_modelViewProj;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, // .uniform vec4 u_
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x66, 0x34, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // alphaRef4;.float
	0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, //  sqr( float v).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // .return v*v;.}.v
	0x65, 0x63, 0x32, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x29, // ec2 sqr( vec2 v)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, // .{.return v*v;.}
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // .vec3 sqr( vec3 
	0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, // v).{.return v*v;
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6d, 0x75, 0x6c, 0x5f, 0x77, 0x31, 0x28, 0x20, // .}.vec3 mul_w1( 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x29, 0x0a, // vec3 v, mat4 m).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2e, 0x78, 0x2a, 0x6d, 0x5b, 0x30, // {.return v.x*m[0
	0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x79, 0x2a, 0x6d, 0x5b, 0x31, // ].xyz + (v.y*m[1
	0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x7a, 0x2a, 0x6d, 0x5b, 0x32, // ].xyz + (v.z*m[2
	0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x6d, 0x5b, 0x33, 0x5d, 0x2e, 0x78, 0x79, 0x7a, // ].xyz + m[3].xyz
	0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x63, 0x6f, 0x73, // ));.}.float acos
	0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x20, 0x66, // _approx_divPI( f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // loat v).{.float 
	0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, // x = abs(v);.if(1
	0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, // . - x <= 0.00006
	0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // 103515625).retur
	0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, // n (v >= 0.) ? 0.
	0x20, 0x3a, 0x20, 0x31, 0x2e, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, //  : 1.;.float res
	0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, //  = ((-0.155972/3
	0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, // .141592653589793
	0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, // 2384626433832795
	0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, // ) * x + (1.56467
	0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, // /3.1415926535897
	0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, // 9323846264338327
	0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, // 95) ) * sqrt(1. 
	0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, // - x);.return (v 
	0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x31, // >= 0.) ? res : 1
	0x2e, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // . - res;.}.float
	0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, //  atan2_approx_di
	0x76, 0x32, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x79, 0x2c, 0x20, 0x66, // v2PI( float y, f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // loat x).{.float 
	0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x79, 0x29, 0x3b, 0x0a, // abs_y = abs(y);.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, // float abs_x = ab
	0x73, 0x28, 0x78, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3c, // s(x);.if(abs_x <
	0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, // = 0.000061035156
	0x32, 0x35, 0x20, 0x26, 0x26, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3c, 0x3d, 0x20, 0x30, // 25 && abs_y <= 0
	0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, // .00006103515625)
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x30, 0x2e, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // .return 0.;.floa
	0x74, 0x20, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2d, 0x20, 0x61, // t r = (abs_x - a
	0x62, 0x73, 0x5f, 0x79, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2b, // bs_y) / (abs_x +
	0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, //  abs_y);.float a
	0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, // ngle = ((x < 0.)
	0x20, 0x3f, 0x20, 0x28, 0x33, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x20, 0x3a, 0x20, 0x28, 0x31, 0x2e, //  ? (3./8.) : (1.
	0x2f, 0x38, 0x2e, 0x29, 0x29, 0x0a, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x32, 0x31, 0x31, 0x38, 0x36, // /8.)).+ (0.21186
	0x38, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, // 8 /(2.*3.1415926
	0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, // 5358979323846264
	0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x72, 0x20, 0x2a, 0x20, // 33832795) * r * 
	0x72, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x39, 0x38, 0x37, 0x33, 0x30, 0x35, 0x20, 0x2f, 0x28, 0x32, // r - 0.987305 /(2
	0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, // .*3.141592653589
	0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, // 7932384626433832
	0x37, 0x39, 0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, // 795)) * ((x < 0.
	0x29, 0x20, 0x3f, 0x20, 0x2d, 0x72, 0x20, 0x3a, 0x20, 0x72, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, // ) ? -r : r);.ret
	0x75, 0x72, 0x6e, 0x20, 0x28, 0x79, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, // urn (y < 0.) ? -
	0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3a, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x3b, 0x0a, 0x7d, // angle : angle;.}
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x73, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x72, // .float asin_appr
	0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // ox_divPI( float 
	0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, // v).{.float x = a
	0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, // bs(v);.if(1. - x
	0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, //  <= 0.0000610351
	0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, // 5625).return (v 
	0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x3a, 0x20, 0x2d, // >= 0.) ? 0.5 : -
	0x30, 0x2e, 0x35, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, // 0.5;.float res =
	0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, //  ((-0.155972/3.1
	0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, // 4159265358979323
	0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, // 84626433832795) 
	0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, // * x + (1.56467/3
	0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, // .141592653589793
	0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, // 2384626433832795
	0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, // ) ) * sqrt(1. - 
	0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, // x);.return (v >=
	0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, //  0.) ? 0.5 - res
	0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, //  : -0.5 + res;.}
	0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x61, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x71, 0x75, // .vec2 ray_to_equ
	0x69, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x75, 0x76, 0x28, // irectangular_uv(
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x61, 0x79, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, //  vec3 ray).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x0a, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, // urn vec2(.0.5 + 
	0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, // atan2_approx_div
	0x32, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x79, 0x2c, 0x20, 0x72, 0x61, 0x79, 0x2e, 0x78, // 2PI(ray.y, ray.x
	0x29, 0x2c, 0x0a, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, // ),.acos_approx_d
	0x69, 0x76, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // ivPI(ray.z));.}.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x20, 0x66, // float InvsRGB( f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, // loat color).{.if
	0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, //  (color <= 0.040
	0x34, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // 45).return color
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x29, 0x3b, 0x0a, //  * (1.0/12.92);.
	0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, // else.return pow(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, // color * (1.0/1.0
	0x35, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x2f, 0x31, 0x2e, 0x30, // 55) + (0.055/1.0
	0x35, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // 55), 2.4);.}.flo
	0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x20, 0x66, 0x6c, // at InvRec709( fl
	0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, // oat color).{.if 
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x38, 0x31, 0x29, // (color <= 0.081)
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, // .return color * 
	0x28, 0x31, 0x2e, 0x30, 0x2f, 0x34, 0x2e, 0x35, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, // (1.0/4.5);.else.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // return pow(color
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, 0x20, 0x2b, //  * (1.0/1.099) +
	0x20, 0x28, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, 0x2c, 0x20, //  (0.099/1.099), 
	0x31, 0x2e, 0x30, 0x2f, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // 1.0/0.45);.}.flo
	0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x66, 0x6c, 0x6f, // at InvGamma( flo
	0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, // at color).{.retu
	0x72, 0x6e, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // rn InvsRGB(color
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, // );.}.vec3 InvGam
	0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, // ma( vec3 color).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x49, 0x6e, // {.return vec3(In
	0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, // vGamma(color.x),
	0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, // InvGamma(color.y
	0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // ),InvGamma(color
	0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, // .z));.}.vec3 Inv
	0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, // ToneMap( vec3 co
	0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x69, 0x6e, 0x76, // lor).{.float inv
	0x5f, 0x32, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x30, 0x2e, 0x35, 0x2f, 0x30, 0x2e, 0x32, 0x35, 0x3b, // _2bh = 0.5/0.25;
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x34, 0x2e, 0x30, 0x2a, // .float bh = 4.0*
	0x30, 0x2e, 0x32, 0x35, 0x20, 0x2d, 0x20, 0x32, 0x2e, 0x30, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // 0.25 - 2.0;.retu
	0x72, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, // rn (color - 1.0 
	0x2b, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2a, 0x28, 0x63, 0x6f, // + sqrt(color*(co
	0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x20, 0x62, 0x68, 0x29, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, // lor + bh) + 1.0)
	0x29, 0x2a, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // )*inv_2bh;.}.flo
	0x61, 0x74, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, // at sRGB( float f
	0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, // ).{.float s;.if 
	0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x33, 0x31, 0x33, 0x30, 0x38, 0x29, // (f <= 0.0031308)
	0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, // .s = 12.92 * f;.
	0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x20, 0x2a, // else.s = 1.055 *
	0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x34, 0x29, //  pow(f, 1.0/2.4)
	0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, //  - 0.055;.return
	0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x52, 0x65, 0x63, 0x37, //  s;.}.float Rec7
	0x30, 0x39, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, // 09( float f).{.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, // loat s;.if (f <=
	0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x34, 0x2e, 0x35, 0x20, //  0.018).s = 4.5 
	0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, // * f;.else.s = 1.
	0x30, 0x39, 0x39, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x34, // 099 * pow(f, 0.4
	0x35, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // 5) - 0.099;.retu
	0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, // rn s;.}.float FB
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, // Gamma( float col
	0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x52, 0x47, // or).{.return sRG
	0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, // B(color);.}.vec2
	0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, //  FBGamma( vec2 c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // olor).{.return v
	0x65, 0x63, 0x32, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // ec2(FBGamma(colo
	0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, // r.x),FBGamma(col
	0x6f, 0x72, 0x2e, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, // or.y));.}.vec3 F
	0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, // BGamma( vec3 col
	0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, // or).{.return vec
	0x33, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, // 3(FBGamma(color.
	0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // x),FBGamma(color
	0x2e, 0x79, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // .y),FBGamma(colo
	0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, // r.z));.}.vec3 FB
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x32, 0x32, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, // Gamma22( vec3 co
	0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, // lor).{.return ve
	0x63, 0x33, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x2c, 0x20, // c3(pow(color.x, 
	0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, // 1.0/2.2),pow(col
	0x6f, 0x72, 0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, // or.y, 1.0/2.2),p
	0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, // ow(color.z, 1.0/
	0x32, 0x2e, 0x32, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, // 2.2));.}.float F
	0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // BToneMap( float 
	0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6c, 0x20, 0x2a, 0x20, // l).{.return l * 
	0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, // ((l*0.25 + 1.0) 
	0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // / (l + 1.0));.}.
	0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, // vec2 FBToneMap( 
	0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, // vec2 color).{.fl
	0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // oat l = dot(colo
	0x72, 0x2c, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2b, // r,vec2(0.176204+
	0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x2c, 0x30, 0x2e, // 0.0108109*0.5,0.
	0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, // 812985+0.0108109
	0x2a, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, // *0.5));.return c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, // olor * ((l*0.25 
	0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, // + 1.0) / (l + 1.
	0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x54, 0x6f, // 0));.}.vec3 FBTo
	0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // neMap( vec3 colo
	0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, // r).{.float l = d
	0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, // ot(color,vec3(0.
	0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2c, // 176204,0.812985,
	0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, // 0.0108109));.ret
	0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, // urn color * ((l*
	0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, // 0.25 + 1.0) / (l
	0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, //  + 1.0));.}.vec4
	0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, //  Additive( vec4 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, // cBase, vec4 cBle
	0x6e, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, // nd, float percen
	0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, // t).{.return cBas
	0x65, 0x20, 0x2b, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, // e + cBlend*perce
	0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, // nt;.}.vec3 Scree
	0x6e, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, // n ( vec3 cBase, 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, // vec3 cBlend).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, // eturn 1.0 - (1.0
	0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, //  - cBase) * (1.0
	0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, //  - cBlend);.}.ve
	0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, // c4 Screen ( vec4
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, //  cBase, vec4 cBl
	0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, // end).{.return 1.
	0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, // 0 - (1.0 - cBase
	0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // ) * (1.0 - cBlen
	0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, // d);.}.vec3 Scree
	0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, // nHDR ( vec3 cBas
	0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, // e, vec3 cBlend).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, // {.return max(1.0
	0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, //  - (1.0 - cBase)
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, //  * (1.0 - cBlend
	0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, // ), vec3(0.,0.,0.
	0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, // ));.}.vec4 Scree
	0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, // nHDR ( vec4 cBas
	0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, // e, vec4 cBlend).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, // {.return max(1.0
	0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, //  - (1.0 - cBase)
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, //  * (1.0 - cBlend
	0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, // ), vec4(0.,0.,0.
	0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4d, 0x75, // ,0.));.}.vec4 Mu
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // ltiply ( vec4 cB
	0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, // ase, vec4 cBlend
	0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, // , float percent)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, // .{.return cBase 
	0x2a, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, // * cBlend*percent
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, // ;.}.vec4 Overlay
	0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, //  ( vec4 cBase, v
	0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, // ec4 cBlend).{.ve
	0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, // c4 cNew = step(0
	0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, // .5, cBase);.cNew
	0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, //  = mix(cBase*cBl
	0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, // end*2.0, 1.0-2.0
	0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, // *(1.0-cBase)*(1.
	0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, // 0-cBlend), cNew)
	0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, // ;.return cNew;.}
	0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x48, 0x44, 0x52, // .vec4 OverlayHDR
	0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, //  ( vec4 cBase, v
	0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, // ec4 cBlend).{.ve
	0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, // c4 cNew = step(0
	0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, // .5, cBase);.cNew
	0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, //  = max(mix(cBase
	0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, // *cBlend*2.0, 1.0
	0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, // -2.0*(1.0-cBase)
	0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, // *(1.0-cBlend), c
	0x4e, 0x65, 0x77, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, // New), vec4(0.,0.
	0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // ,0.,0.));.return
	0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, //  cNew;.}.vec3 co
	0x73, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x5f, 0x73, 0x61, 0x6d, // s_hemisphere_sam
	0x70, 0x6c, 0x65, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x66, // ple( vec2 t).{.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x68, 0x69, 0x20, 0x3d, 0x20, 0x74, 0x2e, 0x79, 0x20, 0x2a, // loat phi = t.y *
	0x20, 0x28, 0x32, 0x2e, 0x30, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, //  (2.0*3.14159265
	0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, // 3589793238462643
	0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // 3832795);.float 
	0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, // cosTheta = sqrt(
	0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // 1.0 - t.x);.floa
	0x74, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, // t sinTheta = sqr
	0x74, 0x28, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x70, // t(t.x);.float sp
	0x2c, 0x63, 0x70, 0x3b, 0x0a, 0x7b, 0x73, 0x70, 0x3d, 0x73, 0x69, 0x6e, 0x28, 0x70, 0x68, 0x69, // ,cp;.{sp=sin(phi
	0x29, 0x3b, 0x63, 0x70, 0x3d, 0x63, 0x6f, 0x73, 0x28, 0x70, 0x68, 0x69, 0x29, 0x3b, 0x7d, 0x3b, // );cp=cos(phi);};
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x63, 0x70, 0x20, // .return vec3(cp 
	0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x63, 0x6f, 0x73, 0x54, // * sinTheta, cosT
	0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x73, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, // heta, sp * sinTh
	0x65, 0x74, 0x61, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x6f, 0x74, // eta);.}.vec3 rot
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x70, // ate_to_vector_up
	0x70, 0x65, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x76, // per( vec3 vec, v
	0x65, 0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, // ec3 normal).{.if
	0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x3e, 0x20, 0x2d, 0x30, 0x2e, 0x39, // (normal.y > -0.9
	0x39, 0x39, 0x39, 0x39, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x20, // 9999).{.float h 
	0x3d, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x28, 0x31, 0x2e, 0x30, 0x2b, 0x6e, 0x6f, 0x72, 0x6d, 0x61, // = 1.0/(1.0+norma
	0x6c, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x20, 0x3d, // l.y);.float hz =
	0x20, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, //  h*normal.z;.flo
	0x61, 0x74, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x3d, 0x20, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, // at hzx = hz*norm
	0x61, 0x6c, 0x2e, 0x78, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, // al.x;.return vec
	0x33, 0x28, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, // 3(.vec.x * (norm
	0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, // al.y+hz*normal.z
	0x29, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, // ) + vec.y * norm
	0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x68, // al.x - vec.z * h
	0x7a, 0x78, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, // zx,.vec.y * norm
	0x61, 0x6c, 0x2e, 0x79, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x6e, // al.y - vec.x * n
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, // ormal.x - vec.z 
	0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, // * normal.z,.vec.
	0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x20, 0x2d, 0x20, 0x76, // y * normal.z - v
	0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, // ec.x * hzx + vec
	0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, // .z * (normal.y+h
	0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, // *normal.x*normal
	0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x72, 0x65, 0x74, // .x));.}.else ret
	0x75, 0x72, 0x6e, 0x20, 0x2d, 0x76, 0x65, 0x63, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, // urn -vec;.}.unif
	0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // orm vec4 Stereo_
	0x53, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // Saturation;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // orm vec4 Stereo_
	0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x3b, 0x0a, 0x75, 0x6e, // MS_ZPD_YAxis;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x20, // iform sampler2D 
	0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x3b, 0x0a, 0x75, // tex_stereo_fb;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, // niform sampler2D
	0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, //  tex_stereo_dept
	0x68, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // h;.uniform vec4 
	0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, // w_h_height;.vec3
	0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x28, //  gatherEyeColor(
	0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x69, 0x73, 0x4c, // vec2 u, bool isL
	0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x79, 0x61, 0x78, 0x69, // eft).{.bool yaxi
	0x73, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, // s = (Stereo_MS_Z
	0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x7a, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, // PD_YAxis.z != 0.
	0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, // );.float MaxSepa
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // ration = (Stereo
	0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, // _MS_ZPD_YAxis.x)
	0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, 0x0a, // ;.if (isLeft).{.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, // float lminDepth 
	0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // = min(min(textur
	0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // eLod(tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, // depth, u + (yaxi
	0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, // s ? vec2(0.0, 0.
	0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // 500 * MaxSeparat
	0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, // ion) : vec2(0.50
	0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, // 0 * MaxSeparatio
	0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, // n, 0.0)), 0.0).x
	0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, // ,.textureLod(tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, // _stereo_depth, u
	0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, //  + (yaxis ? vec2
	0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, // (0.0, 0.666 * Ma
	0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, // xSeparation) : v
	0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, // ec2(0.666 * MaxS
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, // eparation, 0.0))
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, // , 0.0).x),.textu
	0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // reLod(tex_stereo
	0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, // _depth, u + (yax
	0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, // is ? vec2(0.0, M
	0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, // axSeparation) : 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // vec2( MaxSeparat
	0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // ion, 0.0)), 0.0)
	0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x70, 0x61, 0x72, 0x61, // .x);.float lpara
	0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, // llax = max(0.0, 
	0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, // w_h_height.w + M
	0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, // axSeparation * (
	0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, // 1.0 - 1.0 / (0.5
	0x20, 0x2b, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, //  + lminDepth * (
	0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, // 1.0 / (Stereo_MS
	0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, // _ZPD_YAxis.y) - 
	0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // 0.5))));.return 
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, // textureLod(tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, // tereo_fb, u + (y
	0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, // axis ? vec2(0.0,
	0x20, 0x2d, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, //  -lparallax) : v
	0x65, 0x63, 0x32, 0x28, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, // ec2(lparallax, 0
	0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, // .0)), 0.0).xyz;.
	0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, // }.else.{.float r
	0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, // minDepth = min(m
	0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, // in(textureLod(te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, // x_stereo_depth, 
	0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, // u - (yaxis ? vec
	0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, // 2(0.0, 0.500 * M
	0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, // axSeparation) : 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, // vec2(0.500 * Max
	0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // Separation, 0.0)
	0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, // ), 0.0).x,.textu
	0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // reLod(tex_stereo
	0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, // _depth, u - (yax
	0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, // is ? vec2(0.0, 0
	0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, // .666 * MaxSepara
	0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, // tion) : vec2(0.6
	0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // 66 * MaxSeparati
	0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, // on, 0.0)), 0.0).
	0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, // x),.textureLod(t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, // ex_stereo_depth,
	0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, //  u - (yaxis ? ve
	0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, // c2(0.0, MaxSepar
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, // ation) : vec2( M
	0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, // axSeparation, 0.
	0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, // 0)), 0.0).x);.fl
	0x6f, 0x61, 0x74, 0x20, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, // oat rparallax = 
	0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, // max(0.0, w_h_hei
	0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, // ght.w + MaxSepar
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, // ation * (1.0 - 1
	0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x6d, 0x69, 0x6e, // .0 / (0.5 + rmin
	0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, // Depth * (1.0 / (
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, // Stereo_MS_ZPD_YA
	0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, // xis.y) - 0.5))))
	0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // ;.return texture
	0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, // Lod(tex_stereo_f
	0x62, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, // b, u - (yaxis ? 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x72, 0x70, 0x61, 0x72, 0x61, // vec2(0.0, -rpara
	0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x72, 0x70, 0x61, // llax) : vec2(rpa
	0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, // rallax, 0.0)), 0
	0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, // .0).xyz;.}.}.voi
	0x64, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x69, 0x67, 0x68, // d gatherLeftRigh
	0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, // tColors(vec2 u, 
	0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x63, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, // out vec3 lcol, o
	0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, // ut vec3 rcol).{.
	0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, // bool yaxis = (St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, // ereo_MS_ZPD_YAxi
	0x73, 0x2e, 0x7a, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // s.z != 0.);.floa
	0x74, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, // t MaxSeparation 
	0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, // = (Stereo_MS_ZPD
	0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // _YAxis.x);.float
	0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, //  lminDepth = min
	0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, // (min(textureLod(
	0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, // tex_stereo_depth
	0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, // , u + (yaxis ? v
	0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, // ec2(0.0, 0.500 *
	0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, //  MaxSeparation) 
	0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, // : vec2(0.500 * M
	0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, // axSeparation, 0.
	0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, // 0)), 0.0).x,.tex
	0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // tureLod(tex_ster
	0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, // eo_depth, u + (y
	0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, // axis ? vec2(0.0,
	0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, //  0.666 * MaxSepa
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, // ration) : vec2(0
	0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, // .666 * MaxSepara
	0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, // tion, 0.0)), 0.0
	0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, // ).x),.textureLod
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, // (tex_stereo_dept
	0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, // h, u + (yaxis ? 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // vec2(0.0, MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // aration) : vec2(
	0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, //  MaxSeparation, 
	0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, // 0.0)), 0.0).x);.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, // float lparallax 
	0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, // = max(0.0, w_h_h
	0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // eight.w + MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, // aration * (1.0 -
	0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x6c, 0x6d, //  1.0 / (0.5 + lm
	0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, // inDepth * (1.0 /
	0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, //  (Stereo_MS_ZPD_
	0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, // YAxis.y) - 0.5))
	0x29, 0x29, 0x3b, 0x0a, 0x6c, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, // ));.lcol = textu
	0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // reLod(tex_stereo
	0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, // _fb, u + (yaxis 
	0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x6c, 0x70, 0x61, // ? vec2(0.0, -lpa
	0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x6c, // rallax) : vec2(l
	0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, // parallax, 0.0)),
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, //  0.0).xyz;.float
	0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, //  rminDepth = min
	0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, // (min(textureLod(
	0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, // tex_stereo_depth
	0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, // , u - (yaxis ? v
	0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, // ec2(0.0, 0.500 *
	0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, //  MaxSeparation) 
	0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, // : vec2(0.500 * M
	0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, // axSeparation, 0.
	0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, // 0)), 0.0).x,.tex
	0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // tureLod(tex_ster
	0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, // eo_depth, u - (y
	0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, // axis ? vec2(0.0,
	0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, //  0.666 * MaxSepa
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, // ration) : vec2(0
	0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, // .666 * MaxSepara
	0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, // tion, 0.0)), 0.0
	0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, // ).x),.textureLod
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, // (tex_stereo_dept
	0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, // h, u - (yaxis ? 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // vec2(0.0, MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // aration) : vec2(
	0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, //  MaxSeparation, 
	0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, // 0.0)), 0.0).x);.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, // float rparallax 
	0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, // = max(0.0, w_h_h
	0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // eight.w + MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, // aration * (1.0 -
	0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x6d, //  1.0 / (0.5 + rm
	0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, // inDepth * (1.0 /
	0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, //  (Stereo_MS_ZPD_
	0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, // YAxis.y) - 0.5))
	0x29, 0x29, 0x3b, 0x0a, 0x72, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, // ));.rcol = textu
	0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // reLod(tex_stereo
	0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, // _fb, u - (yaxis 
	0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x72, 0x70, 0x61, // ? vec2(0.0, -rpa
	0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x72, // rallax) : vec2(r
	0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, // parallax, 0.0)),
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, //  0.0).xyz;.}.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // form mat4 Stereo
	0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // _LeftMat;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, // m mat4 Stereo_Ri
	0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // ghtMat;.uniform 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, // vec4 Stereo_Left
	0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, // Luminance_Gamma;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, // .uniform vec4 St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, // ereo_RightLumina
	0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x3b, 0x0a, 0x76, 0x6f, // nce_DynDesat;.vo
	0x69, 0x64, 0x20, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x65, 0x73, 0x61, 0x74, 0x41, // id DynamicDesatA
	0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, // naglyph( vec3 lC
	0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, // ol, vec3 rCol, o
	0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, // ut vec3 lDesatCo
	0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x44, 0x65, 0x73, // l, out vec3 rDes
	0x61, 0x74, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, // atCol).{.float l
	0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, // eft2LeftLum = do
	0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, // t(lCol, Stereo_L
	0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, // eftLuminance_Gam
	0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, // ma.xyz);.float l
	0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, // eft2RightLum = d
	0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // ot(lCol, Stereo_
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, // RightLuminance_D
	0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, // ynDesat.xyz);.fl
	0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, // oat right2LeftLu
	0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, // m = dot(rCol, St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, // ereo_LeftLuminan
	0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, // ce_Gamma.xyz);.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, // loat right2Right
	0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // Lum = dot(rCol, 
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, // Stereo_RightLumi
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x78, // nance_DynDesat.x
	0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x4c, // yz);.float leftL
	0x75, 0x6d, 0x20, 0x3d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, // um = left2LeftLu
	0x6d, 0x20, 0x2b, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // m + left2RightLu
	0x6d, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // m;.float rightLu
	0x6d, 0x20, 0x3d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, // m = right2LeftLu
	0x6d, 0x20, 0x2b, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, // m + right2RightL
	0x75, 0x6d, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, // um;.float leftDe
	0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, // sat = Stereo_Rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, // htLuminance_DynD
	0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x6c, 0x65, // esat.w * abs((le
	0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x6c, 0x65, 0x66, // ft2LeftLum - lef
	0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, // t2RightLum) / (l
	0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, // eftLum + 0.0001)
	0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, // );.float rightDe
	0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, // sat = Stereo_Rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, // htLuminance_DynD
	0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x72, 0x69, // esat.w * abs((ri
	0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x72, 0x69, // ght2LeftLum - ri
	0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, // ght2RightLum) / 
	0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, // (rightLum + 0.00
	0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, // 01));.lDesatCol 
	0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, // = mix(lCol, vec3
	0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, // _splat(leftLum),
	0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x72, 0x44, 0x65, //  leftDesat);.rDe
	0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x72, 0x43, 0x6f, // satCol = mix(rCo
	0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x72, 0x69, // l, vec3_splat(ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, // ghtLum), rightDe
	0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x4c, 0x69, 0x6e, // sat);.}.vec3 Lin
	0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, 0x63, // earAnaglyph( vec
	0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, // 3 lCol, vec3 rCo
	0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, // l).{.vec3 color 
	0x3d, 0x20, 0x28, 0x28, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, // = (( (vec4(lCol,
	0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, //  1.)) * (Stereo_
	0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x20, 0x28, // LeftMat) ) + ( (
	0x76, 0x65, 0x63, 0x34, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, // vec4(rCol, 1.)) 
	0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, // * (Stereo_RightM
	0x61, 0x74, 0x29, 0x20, 0x29, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // at) )).rgb;.retu
	0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, // rn color;.}.unif
	0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // orm vec4 Stereo_
	0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, 0x6e, // DeghostGamma;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // iform mat4 Stere
	0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3b, // o_DeghostFilter;
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x6e, 0x61, // .vec3 DeghostAna
	0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, // glyph( vec3 lCol
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x76, // , vec3 rCol).{.v
	0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, 0x6e, 0x65, // ec3 color = Line
	0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, // arAnaglyph(lCol,
	0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, //  rCol);.return (
	0x20, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x53, 0x74, 0x65, //  (pow(color, Ste
	0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, // reo_DeghostGamma
	0x2e, 0x72, 0x67, 0x62, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x53, // .rgb)) * (mat3(S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, // tereo_DeghostFil
	0x74, 0x65, 0x72, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, // ter[0].xyz, Ster
	0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, // eo_DeghostFilter
	0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // [1].xyz, Stereo_
	0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x32, 0x5d, // DeghostFilter[2]
	0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, 0x64, // .xyz)) );.}.void
	0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, //  main().{.vec3 l
	0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x3b, 0x0a, 0x67, 0x61, 0x74, 0x68, 0x65, // Col, rCol;.gathe
	0x72, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, // rLeftRightColors
	0x28, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2c, 0x20, 0x6c, 0x43, // (v_texcoord0, lC
	0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x6c, 0x43, 0x6f, 0x6c, 0x20, // ol, rCol);.lCol 
	0x3d, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x29, // = InvGamma(lCol)
	0x3b, 0x0a, 0x72, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, // ;.rCol = InvGamm
	0x61, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, // a(rCol);.vec3 lC
	0x6f, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x44, 0x65, 0x73, // olDesat, rColDes
	0x61, 0x74, 0x3b, 0x0a, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x65, 0x73, 0x61, 0x74, // at;.DynamicDesat
	0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, // Anaglyph(lCol, r
	0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2c, 0x20, // Col, lColDesat, 
	0x72, 0x43, 0x6f, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x6c, 0x43, 0x6f, 0x6c, // rColDesat);.lCol
	0x20, 0x3d, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x3b, 0x0a, 0x72, 0x43, //  = lColDesat;.rC
	0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x3b, 0x0a, // ol = rColDesat;.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, 0x6e, // vec3 color = Lin
	0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, // earAnaglyph(lCol
	0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, // , rCol);.bgfx_Fr
	0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x46, // agColor = vec4(F
	0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x2c, 0x20, 0x31, // BGamma(color), 1
	0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x00,                                                 // .0);.}..
};
static const uint8_t fs_pp_stereo_anaglyph_lin_srgb_dyndesat_glsl[11146] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x77, 0x2b, // FSH.o.><......w+
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x34, 0x34, 0x30, 0x0a, 0x6f, // ..#version 440.o
	0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, // ut vec4 bgfx_Fra
	0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, // gColor;.#define 
	0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x62, 0x67, 0x66, // gl_FragColor bgf
	0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x0a, 0x23, 0x64, 0x65, 0x66, // x_FragColor.#def
	0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x20, 0x20, 0x20, // ine texture2D   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x0a, 0x23, //        texture.#
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, // define texture2D
	0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // Lod       textur
	0x65, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, // eLod.#define tex
	0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ture2DGrad      
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, // textureGrad.#def
	0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, // ine texture2DPro
	0x6a, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, // jLod   texturePr
	0x6f, 0x6a, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, // ojLod.#define te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, 0x20, // xture2DProjGrad 
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, //  textureProjGrad
	0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // .#define texture
	0x43, 0x75, 0x62, 0x65, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, // CubeLod     text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, // ureLod.#define t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, // extureCubeGrad  
	0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, //   textureGrad.#d
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x33, 0x44, 0x20, // efine texture3D 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, //          texture
	0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // .#define texture
	0x32, 0x44, 0x4c, 0x6f, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x20, 0x74, 0x65, 0x78, 0x74, // 2DLodOffset text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x0a, 0x23, 0x64, 0x65, // ureLodOffset.#de
	0x66, 0x69, 0x6e, 0x65, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x69, // fine attribute i
	0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, // n.#define varyin
	0x67, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x62, 0x67, 0x66, // g in.#define bgf
	0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, // xShadow2D(_sampl
	0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, // er, _coord)     
	0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, // vec4_splat(textu
	0x72, 0x65, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, // re(_sampler, _co
	0x6f, 0x72, 0x64, 0x29, 0x20, 0x29, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x62, // ord) ).#define b
	0x67, 0x66, 0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x28, // gfxShadow2DProj(
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, // _sampler, _coord
	0x29, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, // ) vec4_splat(tex
	0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // tureProj(_sample
	0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x29, 0x0a, 0x76, 0x61, 0x72, // r, _coord) ).var
	0x79, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, // ying vec2 v_texc
	0x6f, 0x6f, 0x72, 0x64, 0x30, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, // oord0;.vec3 inst
	0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, // Mul(vec3 _vec, m
	0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // at3 _mtx) { retu
	0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, // rn ( (_vec) * (_
	0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, // mtx) ); }.vec3 i
	0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, // nstMul(mat3 _mtx
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, // , vec3 _vec) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, // eturn ( (_mtx) *
	0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, //  (_vec) ); }.vec
	0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, // 4 instMul(vec4 _
	0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, // vec, mat4 _mtx) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, // { return ( (_vec
	0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, // ) * (_mtx) ); }.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, // vec4 instMul(mat
	0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, // 4 _mtx, vec4 _ve
	0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, // c) { return ( (_
	0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, // mtx) * (_vec) );
	0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, 0x70, 0x28, 0x66, 0x6c, 0x6f, //  }.float rcp(flo
	0x61, 0x74, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // at _a) { return 
	0x31, 0x2e, 0x30, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, // 1.0/_a; }.vec2 r
	0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // cp(vec2 _a) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, // turn vec2(1.0)/_
	0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, // a; }.vec3 rcp(ve
	0x63, 0x33, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // c3 _a) { return 
	0x76, 0x65, 0x63, 0x33, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, // vec3(1.0)/_a; }.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x61, // vec4 rcp(vec4 _a
	0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, // ) { return vec4(
	0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, // 1.0)/_a; }.vec2 
	0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, // vec2_splat(float
	0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, //  _x) { return ve
	0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, // c2(_x, _x); }.ve
	0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, // c3 vec3_splat(fl
	0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // oat _x) { return
	0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, //  vec3(_x, _x, _x
	0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, // ); }.vec4 vec4_s
	0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, // plat(float _x) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, //  return vec4(_x,
	0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, //  _x, _x, _x); }.
	0x75, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, // uvec2 uvec2_spla
	0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // t(uint _x) { ret
	0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, // urn uvec2(_x, _x
	0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, // ); }.uvec3 uvec3
	0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, // _splat(uint _x) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, // { return uvec3(_
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, // x, _x, _x); }.uv
	0x65, 0x63, 0x34, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, // ec4 uvec4_splat(
	0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, // uint _x) { retur
	0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, // n uvec4(_x, _x, 
	0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, // _x, _x); }.mat4 
	0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, // mtxFromRows(vec4
	0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, //  _0, vec4 _1, ve
	0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, // c4 _2, vec4 _3).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, // {.return transpo
	0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, // se(mat4(_0, _1, 
	0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, // _2, _3) );.}.mat
	0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, // 4 mtxFromCols(ve
	0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, // c4 _0, vec4 _1, 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, // vec4 _2, vec4 _3
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x28, // ).{.return mat4(
	0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x3b, // _0, _1, _2, _3);
	0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, // .}.mat3 mtxFromR
	0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, // ows(vec3 _0, vec
	0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, // 3 _1, vec3 _2).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, // .return transpos
	0x65, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, // e(mat3(_0, _1, _
	0x32, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, // 2) );.}.mat3 mtx
	0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, // FromCols(vec3 _0
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // , vec3 _1, vec3 
	0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, // _2).{.return mat
	0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x3b, 0x0a, 0x7d, // 3(_0, _1, _2);.}
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, // .uniform vec4 u_
	0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // viewRect;.unifor
	0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x54, 0x65, 0x78, // m vec4 u_viewTex
	0x65, 0x6c, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, // el;.uniform mat4
	0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, //  u_view;.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x3b, //  mat4 u_invView;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, // .uniform mat4 u_
	0x70, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, // proj;.uniform ma
	0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, // t4 u_invProj;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, // iform mat4 u_vie
	0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, // wProj;.uniform m
	0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, // at4 u_invViewPro
	0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, // j;.uniform mat4 
	0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, 0x3b, 0x0a, 0x75, 0x6e, 0x69, // u_model[32];.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, // form mat4 u_mode
	0x6c, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, // lView;.uniform m
	0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x50, // at4 u_modelViewP
	0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, // roj;.uniform vec
	0x34, 0x20, 0x75, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x66, 0x34, 0x3b, 0x0a, 0x66, // 4 u_alphaRef4;.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // loat sqr( float 
	0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, // v).{.return v*v;
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, // .}.vec2 sqr( vec
	0x32, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, // 2 v).{.return v*
	0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x76, // v;.}.vec3 sqr( v
	0x65, 0x63, 0x33, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // ec3 v).{.return 
	0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6d, 0x75, 0x6c, 0x5f, // v*v;.}.vec3 mul_
	0x77, 0x31, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, // w1( vec3 v, mat4
	0x20, 0x6d, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2e, 0x78, //  m).{.return v.x
	0x2a, 0x6d, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x79, // *m[0].xyz + (v.y
	0x2a, 0x6d, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x7a, // *m[1].xyz + (v.z
	0x2a, 0x6d, 0x5b, 0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x6d, 0x5b, 0x33, 0x5d, // *m[2].xyz + m[3]
	0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // .xyz));.}.float 
	0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, // acos_approx_divP
	0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, // I( float v).{.fl
	0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, // oat x = abs(v);.
	0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, // if(1. - x <= 0.0
	0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, // 0006103515625).r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, // eturn (v >= 0.) 
	0x3f, 0x20, 0x30, 0x2e, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // ? 0. : 1.;.float
	0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, //  res = ((-0.1559
	0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, // 72/3.14159265358
	0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, // 9793238462643383
	0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, // 2795) * x + (1.5
	0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, // 6467/3.141592653
	0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, // 5897932384626433
	0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, // 832795) ) * sqrt
	0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // (1. - x);.return
	0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x72, 0x65, 0x73, //  (v >= 0.) ? res
	0x20, 0x3a, 0x20, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, //  : 1. - res;.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, // loat atan2_appro
	0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // x_div2PI( float 
	0x79, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, // y, float x).{.fl
	0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, // oat abs_y = abs(
	0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, // y);.float abs_x 
	0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x78, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x61, 0x62, 0x73, // = abs(x);.if(abs
	0x5f, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, // _x <= 0.00006103
	0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x20, 0x26, 0x26, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, // 515625 && abs_y 
	0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, // <= 0.00006103515
	0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x30, 0x2e, 0x3b, 0x0a, // 625).return 0.;.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, // float r = (abs_x
	0x20, 0x2d, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x61, 0x62, 0x73, //  - abs_y) / (abs
	0x5f, 0x78, 0x20, 0x2b, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, // _x + abs_y);.flo
	0x61, 0x74, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, // at angle = ((x <
	0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x28, 0x33, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x20, 0x3a, //  0.) ? (3./8.) :
	0x20, 0x28, 0x31, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x29, 0x0a, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x32, //  (1./8.)).+ (0.2
	0x31, 0x31, 0x38, 0x36, 0x38, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, // 11868 /(2.*3.141
	0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, // 5926535897932384
	0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, // 626433832795) * 
	0x72, 0x20, 0x2a, 0x20, 0x72, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x39, 0x38, 0x37, 0x33, 0x30, 0x35, // r * r - 0.987305
	0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, //  /(2.*3.14159265
	0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, // 3589793238462643
	0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x78, 0x20, // 3832795)) * ((x 
	0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x72, 0x20, 0x3a, 0x20, 0x72, 0x29, 0x3b, // < 0.) ? -r : r);
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x79, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, // .return (y < 0.)
	0x20, 0x3f, 0x20, 0x2d, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3a, 0x20, 0x61, 0x6e, 0x67, 0x6c, //  ? -angle : angl
	0x65, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x73, 0x69, 0x6e, 0x5f, // e;.}.float asin_
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, // approx_divPI( fl
	0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, // oat v).{.float x
	0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, //  = abs(v);.if(1.
	0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, //  - x <= 0.000061
	0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // 03515625).return
	0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, //  (v >= 0.) ? 0.5
	0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, //  : -0.5;.float r
	0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, // es = ((-0.155972
	0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, // /3.1415926535897
	0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, // 9323846264338327
	0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, // 95) * x + (1.564
	0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, // 67/3.14159265358
	0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, // 9793238462643383
	0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, // 2795) ) * sqrt(1
	0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // . - x);.return (
	0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x2d, // v >= 0.) ? 0.5 -
	0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x65, //  res : -0.5 + re
	0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x61, 0x79, 0x5f, 0x74, 0x6f, // s;.}.vec2 ray_to
	0x5f, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, // _equirectangular
	0x5f, 0x75, 0x76, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x61, 0x79, 0x29, 0x0a, 0x7b, // _uv( vec3 ray).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x0a, 0x30, 0x2e, // .return vec2(.0.
	0x35, 0x20, 0x2b, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, // 5 + atan2_approx
	0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x79, 0x2c, 0x20, 0x72, // _div2PI(ray.y, r
	0x61, 0x79, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, // ay.x),.acos_appr
	0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x7a, 0x29, 0x29, // ox_divPI(ray.z))
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, // ;.}.float InvsRG
	0x42, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, // B( float color).
	0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, // {.if (color <= 0
	0x2e, 0x30, 0x34, 0x30, 0x34, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, // .04045).return c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x32, 0x2e, 0x39, // olor * (1.0/12.9
	0x32, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // 2);.else.return 
	0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, // pow(color * (1.0
	0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x35, 0x35, // /1.055) + (0.055
	0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x29, 0x3b, 0x0a, 0x7d, // /1.055), 2.4);.}
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, // .float InvRec709
	0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, // ( float color).{
	0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, // .if (color <= 0.
	0x30, 0x38, 0x31, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // 081).return colo
	0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x34, 0x2e, 0x35, 0x29, 0x3b, 0x0a, 0x65, // r * (1.0/4.5);.e
	0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, // lse.return pow(c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x39, // olor * (1.0/1.09
	0x39, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x2f, 0x31, 0x2e, 0x30, 0x39, // 9) + (0.099/1.09
	0x39, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x3b, 0x0a, 0x7d, // 9), 1.0/0.45);.}
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, // .float InvGamma(
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, //  float color).{.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, // return InvsRGB(c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, // olor);.}.vec3 In
	0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, // vGamma( vec3 col
	0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, // or).{.return vec
	0x33, 0x28, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // 3(InvGamma(color
	0x2e, 0x78, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, // .x),InvGamma(col
	0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, // or.y),InvGamma(c
	0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, // olor.z));.}.vec3
	0x20, 0x49, 0x6e, 0x76, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, //  InvToneMap( vec
	0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // 3 color).{.float
	0x20, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x30, 0x2e, 0x35, 0x2f, 0x30, //  inv_2bh = 0.5/0
	0x2e, 0x32, 0x35, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x68, 0x20, 0x3d, 0x20, // .25;.float bh = 
	0x34, 0x2e, 0x30, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2d, 0x20, 0x32, 0x2e, 0x30, 0x3b, 0x0a, // 4.0*0.25 - 2.0;.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2d, 0x20, // return (color - 
	0x31, 0x2e, 0x30, 0x20, 0x2b, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // 1.0 + sqrt(color
	0x2a, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x20, 0x62, 0x68, 0x29, 0x20, 0x2b, 0x20, // *(color + bh) + 
	0x31, 0x2e, 0x30, 0x29, 0x29, 0x2a, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x3b, 0x0a, 0x7d, // 1.0))*inv_2bh;.}
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x20, 0x66, 0x6c, 0x6f, // .float sRGB( flo
	0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, // at f).{.float s;
	0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x33, 0x31, // .if (f <= 0.0031
	0x33, 0x30, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x20, 0x2a, // 308).s = 12.92 *
	0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, //  f;.else.s = 1.0
	0x35, 0x35, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, // 55 * pow(f, 1.0/
	0x32, 0x2e, 0x34, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x3b, 0x0a, 0x72, 0x65, // 2.4) - 0.055;.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // turn s;.}.float 
	0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, // Rec709( float f)
	0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, // .{.float s;.if (
	0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, // f <= 0.018).s = 
	0x34, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, // 4.5 * f;.else.s 
	0x3d, 0x20, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, // = 1.099 * pow(f,
	0x20, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x3b, 0x0a, //  0.45) - 0.099;.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // return s;.}.floa
	0x74, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // t FBGamma( float
	0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, //  color).{.return
	0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, //  sRGB(color);.}.
	0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, // vec2 FBGamma( ve
	0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, // c2 color).{.retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, // rn vec2(FBGamma(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, // color.x),FBGamma
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // (color.y));.}.ve
	0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, // c3 FBGamma( vec3
	0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, //  color).{.return
	0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, //  vec3(FBGamma(co
	0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, // lor.x),FBGamma(c
	0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, // olor.y),FBGamma(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // color.z));.}.vec
	0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x32, 0x32, 0x28, 0x20, 0x76, 0x65, 0x63, // 3 FBGamma22( vec
	0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // 3 color).{.retur
	0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // n vec3(pow(color
	0x2e, 0x78, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, // .x, 1.0/2.2),pow
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, // (color.y, 1.0/2.
	0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x2c, 0x20, // 2),pow(color.z, 
	0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // 1.0/2.2));.}.flo
	0x61, 0x74, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x66, 0x6c, // at FBToneMap( fl
	0x6f, 0x61, 0x74, 0x20, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // oat l).{.return 
	0x6c, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, // l * ((l*0.25 + 1
	0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, // .0) / (l + 1.0))
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, // ;.}.vec2 FBToneM
	0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, // ap( vec2 color).
	0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, // {.float l = dot(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, // color,vec2(0.176
	0x32, 0x30, 0x34, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, // 204+0.0108109*0.
	0x35, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, // 5,0.812985+0.010
	0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // 8109*0.5));.retu
	0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, // rn color * ((l*0
	0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, // .25 + 1.0) / (l 
	0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // + 1.0));.}.vec3 
	0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // FBToneMap( vec3 
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, // color).{.float l
	0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, //  = dot(color,vec
	0x33, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, // 3(0.176204,0.812
	0x39, 0x38, 0x35, 0x2c, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x29, 0x29, 0x3b, // 985,0.0108109));
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, // .return color * 
	0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, // ((l*0.25 + 1.0) 
	0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // / (l + 1.0));.}.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x28, 0x20, 0x76, // vec4 Additive( v
	0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // ec4 cBase, vec4 
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, // cBlend, float pe
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // rcent).{.return 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2b, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, // cBase + cBlend*p
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, // ercent;.}.vec3 S
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, // creen ( vec3 cBa
	0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, // se, vec3 cBlend)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, // .{.return 1.0 - 
	0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, // (1.0 - cBase) * 
	0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, // (1.0 - cBlend);.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x20, // }.vec4 Screen ( 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // vec4 cBase, vec4
	0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, //  cBlend).{.retur
	0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, // n 1.0 - (1.0 - c
	0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, // Base) * (1.0 - c
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, // Blend);.}.vec3 S
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // creenHDR ( vec3 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, // cBase, vec3 cBle
	0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, // nd).{.return max
	0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, // (1.0 - (1.0 - cB
	0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, // ase) * (1.0 - cB
	0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x2c, 0x30, // lend), vec3(0.,0
	0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, // .,0.));.}.vec4 S
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // creenHDR ( vec4 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, // cBase, vec4 cBle
	0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, // nd).{.return max
	0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, // (1.0 - (1.0 - cB
	0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, // ase) * (1.0 - cB
	0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, // lend), vec4(0.,0
	0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // .,0.,0.));.}.vec
	0x34, 0x20, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, // 4 Multiply ( vec
	0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // 4 cBase, vec4 cB
	0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, // lend, float perc
	0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, // ent).{.return cB
	0x61, 0x73, 0x65, 0x20, 0x2a, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, // ase * cBlend*per
	0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, // cent;.}.vec4 Ove
	0x72, 0x6c, 0x61, 0x79, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, // rlay ( vec4 cBas
	0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, // e, vec4 cBlend).
	0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, // {.vec4 cNew = st
	0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, // ep(0.5, cBase);.
	0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, // cNew = mix(cBase
	0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, // *cBlend*2.0, 1.0
	0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, // -2.0*(1.0-cBase)
	0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, // *(1.0-cBlend), c
	0x4e, 0x65, 0x77, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, // New);.return cNe
	0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, // w;.}.vec4 Overla
	0x79, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, // yHDR ( vec4 cBas
	0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, // e, vec4 cBlend).
	0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, // {.vec4 cNew = st
	0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, // ep(0.5, cBase);.
	0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x6d, 0x69, 0x78, 0x28, 0x63, // cNew = max(mix(c
	0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, // Base*cBlend*2.0,
	0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, //  1.0-2.0*(1.0-cB
	0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, // ase)*(1.0-cBlend
	0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, // ), cNew), vec4(0
	0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, // .,0.,0.,0.));.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // turn cNew;.}.vec
	0x33, 0x20, 0x63, 0x6f, 0x73, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, // 3 cos_hemisphere
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x29, // _sample( vec2 t)
	0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x68, 0x69, 0x20, 0x3d, 0x20, 0x74, // .{.float phi = t
	0x2e, 0x79, 0x20, 0x2a, 0x20, 0x28, 0x32, 0x2e, 0x30, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, // .y * (2.0*3.1415
	0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, // 9265358979323846
	0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x3b, 0x0a, 0x66, 0x6c, // 26433832795);.fl
	0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, // oat cosTheta = s
	0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, // qrt(1.0 - t.x);.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, // float sinTheta =
	0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, //  sqrt(t.x);.floa
	0x74, 0x20, 0x73, 0x70, 0x2c, 0x63, 0x70, 0x3b, 0x0a, 0x7b, 0x73, 0x70, 0x3d, 0x73, 0x69, 0x6e, // t sp,cp;.{sp=sin
	0x28, 0x70, 0x68, 0x69, 0x29, 0x3b, 0x63, 0x70, 0x3d, 0x63, 0x6f, 0x73, 0x28, 0x70, 0x68, 0x69, // (phi);cp=cos(phi
	0x29, 0x3b, 0x7d, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, // );};.return vec3
	0x28, 0x63, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, // (cp * sinTheta, 
	0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x73, 0x70, 0x20, 0x2a, 0x20, 0x73, // cosTheta, sp * s
	0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, // inTheta);.}.vec3
	0x20, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, //  rotate_to_vecto
	0x72, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, // r_upper( vec3 ve
	0x63, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x29, 0x0a, // c, vec3 normal).
	0x7b, 0x0a, 0x69, 0x66, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x3e, 0x20, // {.if(normal.y > 
	0x2d, 0x30, 0x2e, 0x39, 0x39, 0x39, 0x39, 0x39, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // -0.99999).{.floa
	0x74, 0x20, 0x68, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x28, 0x31, 0x2e, 0x30, 0x2b, 0x6e, // t h = 1.0/(1.0+n
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // ormal.y);.float 
	0x68, 0x7a, 0x20, 0x3d, 0x20, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x3b, // hz = h*normal.z;
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x3d, 0x20, 0x68, 0x7a, 0x2a, // .float hzx = hz*
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // normal.x;.return
	0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x28, //  vec3(.vec.x * (
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, // normal.y+hz*norm
	0x61, 0x6c, 0x2e, 0x7a, 0x29, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, // al.z) + vec.y * 
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, // normal.x - vec.z
	0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, //  * hzx,.vec.y * 
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, // normal.y - vec.x
	0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, //  * normal.x - ve
	0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x2c, 0x0a, // c.z * normal.z,.
	0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, // vec.y * normal.z
	0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x2b, //  - vec.x * hzx +
	0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, //  vec.z * (normal
	0x2e, 0x79, 0x2b, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x2a, 0x6e, 0x6f, // .y+h*normal.x*no
	0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, // rmal.x));.}.else
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x2d, 0x76, 0x65, 0x63, 0x3b, 0x0a, 0x7d, 0x0a, //  return -vec;.}.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, // uniform vec4 Ste
	0x72, 0x65, 0x6f, 0x5f, 0x53, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x0a, // reo_Saturation;.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, // uniform vec4 Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, // reo_MS_ZPD_YAxis
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // ;.uniform sample
	0x72, 0x32, 0x44, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, // r2D tex_stereo_f
	0x62, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, // b;.uniform sampl
	0x65, 0x72, 0x32, 0x44, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // er2D tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, // depth;.uniform v
	0x65, 0x63, 0x34, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, // ec4 w_h_height;.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, // vec3 gatherEyeCo
	0x6c, 0x6f, 0x72, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, // lor(vec2 u, bool
	0x20, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x20, //  isLeft).{.bool 
	0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // yaxis = (Stereo_
	0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x7a, 0x20, 0x21, // MS_ZPD_YAxis.z !
	0x3d, 0x20, 0x30, 0x2e, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x4d, 0x61, 0x78, // = 0.);.float Max
	0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, // Separation = (St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, // ereo_MS_ZPD_YAxi
	0x73, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, // s.x);.if (isLeft
	0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, // ).{.float lminDe
	0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, // pth = min(min(te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, // xtureLod(tex_ste
	0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, // reo_depth, u + (
	0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, // yaxis ? vec2(0.0
	0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // , 0.500 * MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // aration) : vec2(
	0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, // 0.500 * MaxSepar
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, // ation, 0.0)), 0.
	0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, // 0).x,.textureLod
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, // (tex_stereo_dept
	0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, // h, u + (yaxis ? 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, // vec2(0.0, 0.666 
	0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, // * MaxSeparation)
	0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, //  : vec2(0.666 * 
	0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, // MaxSeparation, 0
	0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, // .0)), 0.0).x),.t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // extureLod(tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, // ereo_depth, u + 
	0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, // (yaxis ? vec2(0.
	0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, // 0, MaxSeparation
	0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // ) : vec2( MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, // aration, 0.0)), 
	0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, // 0.0).x);.float l
	0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, // parallax = max(0
	0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, // .0, w_h_height.w
	0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, //  + MaxSeparation
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, //  * (1.0 - 1.0 / 
	0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, // (0.5 + lminDepth
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, //  * (1.0 / (Stere
	0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, // o_MS_ZPD_YAxis.y
	0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, // ) - 0.5))));.ret
	0x75, 0x72, 0x6e, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, // urn textureLod(t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, // ex_stereo_fb, u 
	0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // + (yaxis ? vec2(
	0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, // 0.0, -lparallax)
	0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, //  : vec2(lparalla
	0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, // x, 0.0)), 0.0).x
	0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, // yz;.}.else.{.flo
	0x61, 0x74, 0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, // at rminDepth = m
	0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, // in(min(textureLo
	0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, // d(tex_stereo_dep
	0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, // th, u - (yaxis ?
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, //  vec2(0.0, 0.500
	0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, //  * MaxSeparation
	0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, // ) : vec2(0.500 *
	0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, //  MaxSeparation, 
	0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, // 0.0)), 0.0).x,.t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // extureLod(tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, // ereo_depth, u - 
	0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, // (yaxis ? vec2(0.
	0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, // 0, 0.666 * MaxSe
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, // paration) : vec2
	0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, // (0.666 * MaxSepa
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, // ration, 0.0)), 0
	0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, // .0).x),.textureL
	0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, // od(tex_stereo_de
	0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, // pth, u - (yaxis 
	0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, // ? vec2(0.0, MaxS
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, // eparation) : vec
	0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, // 2( MaxSeparation
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, // , 0.0)), 0.0).x)
	0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, // ;.float rparalla
	0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, // x = max(0.0, w_h
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, // _height.w + MaxS
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, // eparation * (1.0
	0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, //  - 1.0 / (0.5 + 
	0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, // rminDepth * (1.0
	0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, //  / (Stereo_MS_ZP
	0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, // D_YAxis.y) - 0.5
	0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x65, 0x78, // ))));.return tex
	0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // tureLod(tex_ster
	0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, // eo_fb, u - (yaxi
	0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x72, // s ? vec2(0.0, -r
	0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, // parallax) : vec2
	0x28, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // (rparallax, 0.0)
	0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x7d, // ), 0.0).xyz;.}.}
	0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, // .void gatherLeft
	0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x28, 0x76, 0x65, 0x63, 0x32, // RightColors(vec2
	0x20, 0x75, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x63, 0x6f, //  u, out vec3 lco
	0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x6f, 0x6c, // l, out vec3 rcol
	0x29, 0x0a, 0x7b, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3d, // ).{.bool yaxis =
	0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, //  (Stereo_MS_ZPD_
	0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x7a, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x3b, 0x0a, // YAxis.z != 0.);.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // float MaxSeparat
	0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, // ion = (Stereo_MS
	0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, // _ZPD_YAxis.x);.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, // loat lminDepth =
	0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, //  min(min(texture
	0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, // Lod(tex_stereo_d
	0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, // epth, u + (yaxis
	0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, //  ? vec2(0.0, 0.5
	0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // 00 * MaxSeparati
	0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, // on) : vec2(0.500
	0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, //  * MaxSeparation
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, // , 0.0)), 0.0).x,
	0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, // .textureLod(tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, // stereo_depth, u 
	0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // + (yaxis ? vec2(
	0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, // 0.0, 0.666 * Max
	0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, // Separation) : ve
	0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, // c2(0.666 * MaxSe
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, // paration, 0.0)),
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, //  0.0).x),.textur
	0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // eLod(tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, // depth, u + (yaxi
	0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, // s ? vec2(0.0, Ma
	0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, // xSeparation) : v
	0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // ec2( MaxSeparati
	0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, // on, 0.0)), 0.0).
	0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, // x);.float lparal
	0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, // lax = max(0.0, w
	0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, // _h_height.w + Ma
	0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, // xSeparation * (1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, // .0 - 1.0 / (0.5 
	0x2b, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, // + lminDepth * (1
	0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, // .0 / (Stereo_MS_
	0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, // ZPD_YAxis.y) - 0
	0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x6c, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, // .5))));.lcol = t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // extureLod(tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, // ereo_fb, u + (ya
	0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, // xis ? vec2(0.0, 
	0x2d, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, // -lparallax) : ve
	0x63, 0x32, 0x28, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, // c2(lparallax, 0.
	0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x66, // 0)), 0.0).xyz;.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, // loat rminDepth =
	0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, //  min(min(texture
	0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, // Lod(tex_stereo_d
	0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, // epth, u - (yaxis
	0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, //  ? vec2(0.0, 0.5
	0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // 00 * MaxSeparati
	0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, // on) : vec2(0.500
	0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, //  * MaxSeparation
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, // , 0.0)), 0.0).x,
	0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, // .textureLod(tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, // stereo_depth, u 
	0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // - (yaxis ? vec2(
	0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, // 0.0, 0.666 * Max
	0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, // Separation) : ve
	0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, // c2(0.666 * MaxSe
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, // paration, 0.0)),
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, //  0.0).x),.textur
	0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // eLod(tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, // depth, u - (yaxi
	0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, // s ? vec2(0.0, Ma
	0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, // xSeparation) : v
	0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // ec2( MaxSeparati
	0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, // on, 0.0)), 0.0).
	0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, // x);.float rparal
	0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, // lax = max(0.0, w
	0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, // _h_height.w + Ma
	0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, // xSeparation * (1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, // .0 - 1.0 / (0.5 
	0x2b, 0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, // + rminDepth * (1
	0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, // .0 / (Stereo_MS_
	0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, // ZPD_YAxis.y) - 0
	0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, // .5))));.rcol = t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // extureLod(tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, // ereo_fb, u - (ya
	0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, // xis ? vec2(0.0, 
	0x2d, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, // -rparallax) : ve
	0x63, 0x32, 0x28, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, // c2(rparallax, 0.
	0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, // 0)), 0.0).xyz;.}
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, // .uniform mat4 St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, // ereo_LeftMat;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // iform mat4 Stere
	0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // o_RightMat;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // orm vec4 Stereo_
	0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, // LeftLuminance_Ga
	0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, // mma;.uniform vec
	0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // 4 Stereo_RightLu
	0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, // minance_DynDesat
	0x3b, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x65, // ;.void DynamicDe
	0x73, 0x61, 0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, 0x63, // satAnaglyph( vec
	0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, // 3 lCol, vec3 rCo
	0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x44, 0x65, 0x73, // l, out vec3 lDes
	0x61, 0x74, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // atCol, out vec3 
	0x72, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, // rDesatCol).{.flo
	0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, // at left2LeftLum 
	0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, // = dot(lCol, Ster
	0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, // eo_LeftLuminance
	0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, // _Gamma.xyz);.flo
	0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, // at left2RightLum
	0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, //  = dot(lCol, Ste
	0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, // reo_RightLuminan
	0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, // ce_DynDesat.xyz)
	0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, // ;.float right2Le
	0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, // ftLum = dot(rCol
	0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // , Stereo_LeftLum
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, // inance_Gamma.xyz
	0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, // );.float right2R
	0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, // ightLum = dot(rC
	0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, // ol, Stereo_Right
	0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, // Luminance_DynDes
	0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, // at.xyz);.float l
	0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, // eftLum = left2Le
	0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, // ftLum + left2Rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, // htLum;.float rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, // htLum = right2Le
	0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, // ftLum + right2Ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, // ghtLum;.float le
	0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // ftDesat = Stereo
	0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, // _RightLuminance_
	0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, // DynDesat.w * abs
	0x28, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, // ((left2LeftLum -
	0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, //  left2RightLum) 
	0x2f, 0x20, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, // / (leftLum + 0.0
	0x30, 0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, // 001));.float rig
	0x68, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // htDesat = Stereo
	0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, // _RightLuminance_
	0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, // DynDesat.w * abs
	0x28, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, // ((right2LeftLum 
	0x2d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, // - right2RightLum
	0x29, 0x20, 0x2f, 0x20, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, // ) / (rightLum + 
	0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, // 0.0001));.lDesat
	0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // Col = mix(lCol, 
	0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, // vec3_splat(leftL
	0x75, 0x6d, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, // um), leftDesat);
	0x0a, 0x72, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, // .rDesatCol = mix
	0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, // (rCol, vec3_spla
	0x74, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, 0x72, 0x69, 0x67, // t(rightLum), rig
	0x68, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, // htDesat);.}.vec3
	0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, //  LinearAnaglyph(
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, //  vec3 lCol, vec3
	0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, //  rCol).{.vec3 co
	0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x6c, // lor = (( (vec4(l
	0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, // Col, 1.)) * (Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x20, 0x2b, // reo_LeftMat) ) +
	0x20, 0x28, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, //  ( (vec4(rCol, 1
	0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, // .)) * (Stereo_Ri
	0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, // ghtMat) )).rgb;.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x7d, 0x0a, // return color;.}.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, // uniform vec4 Ste
	0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, // reo_DeghostGamma
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, // ;.uniform mat4 S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, // tereo_DeghostFil
	0x74, 0x65, 0x72, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, // ter;.vec3 Deghos
	0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // tAnaglyph( vec3 
	0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, // lCol, vec3 rCol)
	0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, // .{.vec3 color = 
	0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, // LinearAnaglyph(l
	0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // Col, rCol);.retu
	0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, // rn ( (pow(color,
	0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, //  Stereo_DeghostG
	0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x72, 0x67, 0x62, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x6d, 0x61, // amma.rgb)) * (ma
	0x74, 0x33, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, // t3(Stereo_Deghos
	0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, // tFilter[0].xyz, 
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, // Stereo_DeghostFi
	0x6c, 0x74, 0x65, 0x72, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, // lter[1].xyz, Ste
	0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, // reo_DeghostFilte
	0x72, 0x5b, 0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // r[2].xyz)) );.}.
	0x76, 0x6f, 0x69, 0x64, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, // void main().{.ve
	0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x3b, 0x0a, 0x67, // c3 lCol, rCol;.g
	0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, // atherLeftRightCo
	0x6c, 0x6f, 0x72, 0x73, 0x28, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, // lors(v_texcoord0
	0x2c, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x6c, // , lCol, rCol);.l
	0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x6c, // Col = InvGamma(l
	0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x72, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x49, 0x6e, 0x76, // Col);.rCol = Inv
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x76, 0x65, 0x63, // Gamma(rCol);.vec
	0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2c, 0x20, 0x72, 0x43, 0x6f, // 3 lColDesat, rCo
	0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x3b, 0x0a, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, // lDesat;.DynamicD
	0x65, 0x73, 0x61, 0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, // esatAnaglyph(lCo
	0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x44, 0x65, 0x73, // l, rCol, lColDes
	0x61, 0x74, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, // at, rColDesat);.
	0x6c, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, // lCol = lColDesat
	0x3b, 0x0a, 0x72, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x44, 0x65, 0x73, // ;.rCol = rColDes
	0x61, 0x74, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, // at;.vec3 color =
	0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, //  LinearAnaglyph(
	0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x67, 0x6c, 0x5f, // lCol, rCol);.gl_
	0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, // FragColor = vec4
	0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x2c, // (FBGamma(color),
	0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x00,                                     //  1.0);.}..
};
static const uint8_t fs_pp_stereo_anaglyph_lin_srgb_dyndesat_dx11[4100] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x13, 0x53, // FSH.o.><.......S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, // tereo_MS_ZPD_YAx
	0x69, 0x73, 0x12, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x77, 0x5f, 0x68, // is...........w_h
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, // _height.........
	0x00, 0x0e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, // ..Stereo_LeftMat
	0x14, 0x00, 0x20, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x53, 0x74, 0x65, 0x72, 0x65, // .. ........Stere
	0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x00, 0x60, 0x00, 0x04, 0x00, // o_RightMat..`...
	0x00, 0x00, 0x00, 0x00, 0x1a, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, // .....Stereo_Left
	0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x12, // Luminance_Gamma.
	0x00, 0xa0, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // ..........Stereo
	0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, // _RightLuminance_
	0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x12, 0x00, 0xb0, 0x00, 0x01, 0x00, 0x00, 0x00, // DynDesat........
	0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, // ...tex_stereo_fb
	0x30, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x74, 0x65, 0x78, 0x5f, 0x73, // 0..........tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x30, 0x01, 0x01, 0x00, 0x01, // tereo_depth0....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // ......tex_stereo
	0x5f, 0x66, 0x62, 0x30, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x74, 0x65, // _fb0..........te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x30, 0x01, // x_stereo_depth0.
	0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd4, 0x0e, 0x00, 0x00, 0x44, 0x58, 0x42, 0x43, // ............DXBC
	0x86, 0x74, 0x15, 0x89, 0x9b, 0x26, 0x1a, 0x8b, 0xee, 0x29, 0x34, 0x30, 0x83, 0x77, 0x3b, 0xfa, // .t...&...)40.w;.
	0x01, 0x00, 0x00, 0x00, 0xd4, 0x0e, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, // ............,...
	0x84, 0x00, 0x00, 0x00, 0xb8, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x4e, 0x50, 0x00, 0x00, 0x00, // ........ISGNP...
	0x02, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........8.......
	0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, // ................
	0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, // D...............
	0x01, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, // ........SV_POSIT
	0x49, 0x4f, 0x4e, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0xab, 0xab, 0xab, // ION.TEXCOORD....
	0x4f, 0x53, 0x47, 0x4e, 0x2c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, // OSGN,...........
	0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, //  ...............
	0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, // ........SV_TARGE
	0x54, 0x00, 0xab, 0xab, 0x53, 0x48, 0x45, 0x58, 0x14, 0x0e, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, // T...SHEX....P...
	0x85, 0x03, 0x00, 0x00, 0x6a, 0x08, 0x00, 0x01, 0x59, 0x00, 0x00, 0x04, 0x46, 0x8e, 0x20, 0x00, // ....j...Y...F. .
	0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x03, 0x00, 0x60, 0x10, 0x00, // ........Z....`..
	0x00, 0x00, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x03, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // ....Z....`......
	0x58, 0x18, 0x00, 0x04, 0x00, 0x70, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x55, 0x00, 0x00, // X....p......UU..
	0x58, 0x18, 0x00, 0x04, 0x00, 0x70, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x55, 0x55, 0x00, 0x00, // X....p......UU..
	0x62, 0x10, 0x00, 0x03, 0x32, 0x10, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x03, // b...2.......e...
	0xf2, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x02, 0x06, 0x00, 0x00, 0x00, // . ......h.......
	0x36, 0x00, 0x00, 0x08, 0x52, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, // 6...R........@..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x38, 0x00, 0x00, 0x0b, 0xa2, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x80, 0x20, 0x00, // 8............. .
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .........@......
	0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x7e, 0x2a, 0x3f, 0x39, 0x00, 0x00, 0x08, // ...?.....~*?9...
	0x12, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, // ........*. .....
	0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x09, // .....@......7...
	0xf2, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // ................
	0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x0b, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // F...............
	0x00, 0x00, 0x00, 0x07, 0xf2, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, // ............F...
	0x00, 0x00, 0x00, 0x00, 0x46, 0x14, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, // ....F...........
	0xf2, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, // ........F...A...
	0x00, 0x00, 0x00, 0x00, 0x46, 0x14, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, // ....F.......H...
	0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // ....CU..".......
	0x46, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x16, 0x7e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // F........~......
	0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .`.......@......
	0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x42, 0x00, 0x10, 0x00, // H.......CU..B...
	0x01, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x96, 0x7c, 0x10, 0x00, // .............|..
	0x01, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, // .....`.......@..
	0x00, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x07, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // ....3...".......
	0x2a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // *...............
	0x36, 0x00, 0x00, 0x06, 0x22, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0a, 0x80, 0x20, 0x00, // 6..."......... .
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x08, 0x52, 0x00, 0x10, 0x00, // ........6...R...
	0x02, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .....@..........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x09, 0xc2, 0x00, 0x10, 0x00, // ........7.......
	0x01, 0x00, 0x00, 0x00, 0x06, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x04, 0x10, 0x00, // ................
	0x02, 0x00, 0x00, 0x00, 0x56, 0x01, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, // ....V...........
	0x32, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // 2...............
	0x46, 0x10, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0xc2, 0x00, 0x10, 0x00, // F...............
	0x01, 0x00, 0x00, 0x00, 0xa6, 0x0e, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // ........A.......
	0x06, 0x14, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, // ........H.......
	0x43, 0x55, 0x15, 0x00, 0x42, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, // CU..B...........
	0x01, 0x00, 0x00, 0x00, 0x96, 0x7c, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, // .....|.......`..
	0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, // .....@......H...
	0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x82, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // ....CU..........
	0x46, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x96, 0x73, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // F........s......
	0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .`.......@......
	0x33, 0x00, 0x00, 0x07, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, // 3...".......:...
	0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x0b, // ................
	0x82, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, // .........@.....?
	0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x1a, 0x80, 0x20, 0x00, // ...?...?...?.. .
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x82, 0x00, 0x10, 0x00, // ................
	0x01, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, // ....:........@..
	0x00, 0x00, 0x00, 0xbf, 0x32, 0x00, 0x00, 0x09, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // ....2...".......
	0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // ........:.......
	0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x0e, 0x00, 0x00, 0x0a, 0x22, 0x00, 0x10, 0x00, // .@.....?...."...
	0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, // .....@.....?...?
	0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // ...?...?........
	0x00, 0x00, 0x00, 0x08, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x80, // ...."...........
	0x41, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, // A........@.....?
	0x32, 0x00, 0x00, 0x0b, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, 0x80, 0x20, 0x00, // 2..."......... .
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // ................
	0x3a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x07, // :. .........4...
	0x12, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // ................
	0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x06, 0x82, 0x00, 0x10, 0x00, // .@......6.......
	0x02, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, // ........A.......
	0x36, 0x00, 0x00, 0x08, 0x62, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, // 6...b........@..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x37, 0x00, 0x00, 0x09, 0x32, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x06, 0x00, 0x10, 0x00, // 7...2...........
	0x01, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, // ............F...
	0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x32, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, // ........2.......
	0x46, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x10, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // F.......F.......
	0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x72, 0x00, 0x10, 0x00, // H.......CU..r...
	0x02, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, // ....F.......F~..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, // .....`.......@..
	0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x0f, 0x32, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, // ....2...2.......
	0x46, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x6e, 0xa7, 0x72, 0x3f, // F........@..n.r?
	0x6e, 0xa7, 0x72, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, // n.r?.........@..
	0x19, 0x89, 0x55, 0x3d, 0x19, 0x89, 0x55, 0x3d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ..U=..U=........
	0x2f, 0x00, 0x00, 0x05, 0x32, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, // /...2.......F...
	0x03, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x0a, 0x32, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, // ....8...2.......
	0x46, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x9a, 0x99, 0x19, 0x40, // F........@.....@
	0x9a, 0x99, 0x19, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x05, // ...@............
	0x32, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, // 2.......F.......
	0x38, 0x00, 0x00, 0x0a, 0x32, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, // 8...2.......F...
	0x02, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x91, 0x83, 0x9e, 0x3d, 0x91, 0x83, 0x9e, 0x3d, // .....@.....=...=
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x0a, 0xb2, 0x00, 0x10, 0x00, // ................
	0x02, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0xe6, 0xae, 0x25, 0x3d, 0xe6, 0xae, 0x25, 0x3d, // .....@....%=..%=
	0x00, 0x00, 0x00, 0x00, 0xe6, 0xae, 0x25, 0x3d, 0x46, 0x08, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, // ......%=F.......
	0x37, 0x00, 0x00, 0x09, 0x32, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, // 7...2.......F...
	0x02, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, // ....F.......F...
	0x03, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x09, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // ....2...".......
	0x2a, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x6e, 0xa7, 0x72, 0x3f, // *........@..n.r?
	0x01, 0x40, 0x00, 0x00, 0x19, 0x89, 0x55, 0x3d, 0x38, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, // .@....U=8.......
	0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, // ....*........@..
	0x91, 0x83, 0x9e, 0x3d, 0x2f, 0x00, 0x00, 0x05, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // ...=/...".......
	0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x07, 0x22, 0x00, 0x10, 0x00, // ........8..."...
	0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, // .............@..
	0x9a, 0x99, 0x19, 0x40, 0x19, 0x00, 0x00, 0x05, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // ...@....".......
	0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x09, 0x42, 0x00, 0x10, 0x00, // ........7...B...
	0x04, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, // ....:...........
	0x02, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x08, // ................
	0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, // ".......F.......
	0x46, 0x82, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x08, // F. .............
	0x12, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, // ........F.......
	0x46, 0x82, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, // F. .............
	0x22, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // "...............
	0x0a, 0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, // ....A...........
	0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // "...............
	0x0a, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, // ................
	0x02, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, // .............@..
	0x17, 0xb7, 0xd1, 0x38, 0x00, 0x00, 0x00, 0x08, 0x72, 0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, // ...8....r.......
	0x46, 0x02, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x56, 0x05, 0x10, 0x00, // F...A.......V...
	0x01, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x07, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // ........".......
	0x1a, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, // ................
	0x38, 0x00, 0x00, 0x09, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x80, // 8..."...........
	0x81, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, // ........:. .....
	0x0b, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x09, 0x72, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, // ....2...r.......
	0x56, 0x05, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, // V.......F.......
	0x46, 0x02, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x82, 0x00, 0x10, 0x00, // F.......6.......
	0x02, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x11, 0x00, 0x00, 0x08, // .....@.....?....
	0x12, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, // ........F.......
	0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x08, // F. .............
	0x22, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, // ".......F.......
	0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x08, // F. .............
	0x42, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, // B.......F.......
	0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, // F. .........H...
	0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // ....CU..........
	0x46, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // F.......F~......
	0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .`.......@......
	0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x22, 0x00, 0x10, 0x00, // H.......CU.."...
	0x00, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x7e, 0x10, 0x00, // .............~..
	0x01, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, // .....`.......@..
	0x00, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // ....3...........
	0x1a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x33, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, // 3...........*...
	0x01, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x09, // ............2...
	0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x3a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, // :........@.....?
	0x0e, 0x00, 0x00, 0x0a, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, // .............@..
	0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, // ...?...?...?...?
	0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x12, 0x00, 0x10, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........A.......
	0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x32, 0x00, 0x00, 0x0b, 0x12, 0x00, 0x10, 0x00, // .@.....?2.......
	0x00, 0x00, 0x00, 0x00, 0x0a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ...... .........
	0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, // ........:. .....
	0x01, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // ....4...........
	0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .........@......
	0x36, 0x00, 0x00, 0x06, 0x82, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x80, // 6...............
	0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x22, 0x00, 0x10, 0x00, // A.......6..."...
	0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x09, // .....@......7...
	0x32, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // 2...............
	0xe6, 0x0a, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // ........F.......
	0x00, 0x00, 0x00, 0x08, 0x32, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x80, // ....2.......F...
	0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x10, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // A.......F.......
	0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x72, 0x00, 0x10, 0x00, // H.......CU..r...
	0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, // ....F.......F~..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, // .....`.......@..
	0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x0a, 0x32, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // ....8...2.......
	0x46, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x91, 0x83, 0x9e, 0x3d, // F........@.....=
	0x91, 0x83, 0x9e, 0x3d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x0f, // ...=........2...
	0xc2, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x04, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6e, 0xa7, 0x72, 0x3f, // .@..........n.r?
	0x6e, 0xa7, 0x72, 0x3f, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // n.r?.@..........
	0x19, 0x89, 0x55, 0x3d, 0x19, 0x89, 0x55, 0x3d, 0x2f, 0x00, 0x00, 0x05, 0xc2, 0x00, 0x10, 0x00, // ..U=..U=/.......
	0x01, 0x00, 0x00, 0x00, 0xa6, 0x0e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x0a, // ............8...
	0xc2, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0xa6, 0x0e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // ................
	0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9a, 0x99, 0x19, 0x40, // .@.............@
	0x9a, 0x99, 0x19, 0x40, 0x19, 0x00, 0x00, 0x05, 0xc2, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // ...@............
	0xa6, 0x0e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x0a, 0xb2, 0x00, 0x10, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0xe6, 0xae, 0x25, 0x3d, 0xe6, 0xae, 0x25, 0x3d, // .....@....%=..%=
	0x00, 0x00, 0x00, 0x00, 0xe6, 0xae, 0x25, 0x3d, 0x46, 0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // ......%=F.......
	0x37, 0x00, 0x00, 0x09, 0x32, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, // 7...2.......F...
	0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, // ....F...........
	0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x09, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // ....2...........
	0x2a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x6e, 0xa7, 0x72, 0x3f, // *........@..n.r?
	0x01, 0x40, 0x00, 0x00, 0x19, 0x89, 0x55, 0x3d, 0x2f, 0x00, 0x00, 0x05, 0x12, 0x00, 0x10, 0x00, // .@....U=/.......
	0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x0a, // ............8...
	0x32, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // 2...............
	0x02, 0x40, 0x00, 0x00, 0x9a, 0x99, 0x19, 0x40, 0x91, 0x83, 0x9e, 0x3d, 0x00, 0x00, 0x00, 0x00, // .@.....@...=....
	0x00, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x05, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x09, 0x42, 0x00, 0x10, 0x00, // ........7...B...
	0x01, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, // ....:...........
	0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x08, // ................
	0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // ........F.......
	0x46, 0x82, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x08, // F. .............
	0x22, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // ".......F.......
	0x46, 0x82, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, // F. .............
	0x42, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, // B...........A...
	0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, // ................
	0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x22, 0x00, 0x10, 0x00, // ............"...
	0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, // .............@..
	0x17, 0xb7, 0xd1, 0x38, 0x00, 0x00, 0x00, 0x08, 0x72, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, // ...8....r.......
	0x46, 0x02, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x00, 0x10, 0x00, // F...A...........
	0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x2a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // *...............
	0x38, 0x00, 0x00, 0x09, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x80, // 8...............
	0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, // ........:. .....
	0x0b, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x09, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // ....2...r.......
	0x06, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, // ........F.......
	0x46, 0x02, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x82, 0x00, 0x10, 0x00, // F.......6.......
	0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x11, 0x00, 0x00, 0x08, // .....@.....?....
	0x12, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // ........F.......
	0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x08, // F. .............
	0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // ".......F.......
	0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x08, // F. .............
	0x42, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // B.......F.......
	0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, // F. .............
	0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // r.......F.......
	0x46, 0x02, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x05, 0x72, 0x00, 0x10, 0x00, // F......./...r...
	0x01, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x0a, // ....F.......8...
	0x72, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // r.......F.......
	0x02, 0x40, 0x00, 0x00, 0x55, 0x55, 0xd5, 0x3e, 0x55, 0x55, 0xd5, 0x3e, 0x55, 0x55, 0xd5, 0x3e, // .@..UU.>UU.>UU.>
	0x00, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x05, 0x72, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // ........r.......
	0x46, 0x02, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x0f, 0x72, 0x00, 0x10, 0x00, // F.......2...r...
	0x01, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, // ....F........@..
	0x3d, 0x0a, 0x87, 0x3f, 0x3d, 0x0a, 0x87, 0x3f, 0x3d, 0x0a, 0x87, 0x3f, 0x00, 0x00, 0x00, 0x00, // =..?=..?=..?....
	0x02, 0x40, 0x00, 0x00, 0xae, 0x47, 0x61, 0xbd, 0xae, 0x47, 0x61, 0xbd, 0xae, 0x47, 0x61, 0xbd, // .@...Ga..Ga..Ga.
	0x00, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x0a, 0x72, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, // ........r.......
	0x02, 0x40, 0x00, 0x00, 0x1c, 0x2e, 0x4d, 0x3b, 0x1c, 0x2e, 0x4d, 0x3b, 0x1c, 0x2e, 0x4d, 0x3b, // .@....M;..M;..M;
	0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x0a, // ....F.......8...
	0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // r.......F.......
	0x02, 0x40, 0x00, 0x00, 0x52, 0xb8, 0x4e, 0x41, 0x52, 0xb8, 0x4e, 0x41, 0x52, 0xb8, 0x4e, 0x41, // .@..R.NAR.NAR.NA
	0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x09, 0x72, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // ....7...r ......
	0x46, 0x02, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // F.......F.......
	0x46, 0x02, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x82, 0x20, 0x10, 0x00, // F.......6.... ..
	0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x3e, 0x00, 0x00, 0x01, // .....@.....?>...
	0x00, 0x00, 0xc0, 0x00,                                                                         // ....
};
static const uint8_t fs_pp_stereo_anaglyph_lin_srgb_dyndesat_spv[7973] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x13, 0x53, // FSH.o.><.......S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, // tereo_MS_ZPD_YAx
	0x69, 0x73, 0x12, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x77, 0x5f, 0x68, // is...........w_h
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x01, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, // _height.........
	0x00, 0x1a, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // ..Stereo_LeftLum
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x12, 0x01, 0xa0, 0x00, // inance_Gamma....
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, // .......Stereo_Ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, // ghtLuminance_Dyn
	0x44, 0x65, 0x73, 0x61, 0x74, 0x12, 0x01, 0xb0, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, // Desat...........
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x01, // Stereo_LeftMat..
	0x20, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, //  ........Stereo_
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x01, 0x60, 0x00, 0x04, 0x00, 0x00, 0x00, // RightMat..`.....
	0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, // ...tex_stereo_fb
	0x30, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x02, 0x22, 0x00, 0x10, 0x74, 0x65, 0x78, 0x5f, 0x73, // 0......."..tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x30, 0x00, 0x03, 0x00, 0x00, // tereo_depth0....
	0x00, 0x00, 0x02, 0x22, 0x00, 0x28, 0x1e, 0x00, 0x00, 0x03, 0x02, 0x23, 0x07, 0x00, 0x00, 0x01, // ...".(.....#....
	0x00, 0x0b, 0x00, 0x08, 0x00, 0x21, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x02, // .....!..........
	0x00, 0x01, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, 0x4c, 0x53, // .............GLS
	0x4c, 0x2e, 0x73, 0x74, 0x64, 0x2e, 0x34, 0x35, 0x30, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x03, // L.std.450.......
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x07, 0x00, 0x04, 0x00, 0x00, // ................
	0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x27, 0x02, 0x00, // .....main....'..
	0x00, 0x32, 0x02, 0x00, 0x00, 0x10, 0x00, 0x03, 0x00, 0x04, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, // .2..............
	0x00, 0x03, 0x00, 0x03, 0x00, 0x05, 0x00, 0x00, 0x00, 0xf4, 0x01, 0x00, 0x00, 0x05, 0x00, 0x04, // ................
	0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x08, // .....main.......
	0x00, 0x55, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // .U...tex_stereo_
	0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x08, // fbSampler.......
	0x00, 0x58, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // .X...tex_stereo_
	0x66, 0x62, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x08, // fbTexture.......
	0x00, 0x5c, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // .....tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x00, 0x05, 0x00, 0x08, // depthSampler....
	0x00, 0x5e, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // .^...tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x00, 0x05, 0x00, 0x06, // depthTexture....
	0x00, 0xd6, 0x00, 0x00, 0x00, 0x55, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x6c, 0x6f, 0x63, // .....UniformBloc
	0x6b, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x08, 0x00, 0xd6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // k...............
	0x00, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, // .Stereo_MS_ZPD_Y
	0x41, 0x78, 0x69, 0x73, 0x00, 0x06, 0x00, 0x06, 0x00, 0xd6, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, // Axis............
	0x00, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x00, 0x00, 0x06, 0x00, 0x07, // .w_h_height.....
	0x00, 0xd6, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // .........Stereo_
	0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x00, 0x00, 0x06, 0x00, 0x07, 0x00, 0xd6, 0x00, 0x00, // LeftMat.........
	0x00, 0x03, 0x00, 0x00, 0x00, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, // .....Stereo_Righ
	0x74, 0x4d, 0x61, 0x74, 0x00, 0x06, 0x00, 0x0a, 0x00, 0xd6, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, // tMat............
	0x00, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, // .Stereo_LeftLumi
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x00, 0x00, 0x06, 0x00, 0x0b, // nance_Gamma.....
	0x00, 0xd6, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // .........Stereo_
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, // RightLuminance_D
	0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x00, 0x00, 0x05, 0x00, 0x03, 0x00, 0xd8, 0x00, 0x00, // ynDesat.........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x05, 0x00, 0x27, 0x02, 0x00, 0x00, 0x76, 0x5f, 0x74, // .........'...v_t
	0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x00, 0x05, 0x00, 0x06, 0x00, 0x32, 0x02, 0x00, // excoord0.....2..
	0x00, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x00, // .bgfx_FragData0.
	0x00, 0x47, 0x00, 0x04, 0x00, 0x55, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .G...U..."......
	0x00, 0x47, 0x00, 0x04, 0x00, 0x55, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, // .G...U...!......
	0x00, 0x47, 0x00, 0x04, 0x00, 0x58, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .G...X..."......
	0x00, 0x47, 0x00, 0x04, 0x00, 0x58, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, // .G...X...!......
	0x00, 0x47, 0x00, 0x04, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .G......."......
	0x00, 0x47, 0x00, 0x04, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, // .G.......!......
	0x00, 0x47, 0x00, 0x04, 0x00, 0x5e, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .G...^..."......
	0x00, 0x47, 0x00, 0x04, 0x00, 0x5e, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, // .G...^...!......
	0x00, 0x48, 0x00, 0x05, 0x00, 0xd6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, // .H...........#..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0xd6, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, // .....H..........
	0x00, 0x23, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x48, 0x00, 0x04, 0x00, 0xd6, 0x00, 0x00, // .#.......H......
	0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0xd6, 0x00, 0x00, // .........H......
	0x00, 0x02, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, // .....#... ...H..
	0x00, 0xd6, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, // ................
	0x00, 0x48, 0x00, 0x04, 0x00, 0xd6, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, // .H..............
	0x00, 0x48, 0x00, 0x05, 0x00, 0xd6, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, // .H...........#..
	0x00, 0x60, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0xd6, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, // .`...H..........
	0x00, 0x07, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0xd6, 0x00, 0x00, // .........H......
	0x00, 0x04, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, // .....#.......H..
	0x00, 0xd6, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0xb0, 0x00, 0x00, // .........#......
	0x00, 0x47, 0x00, 0x03, 0x00, 0xd6, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, // .G...........G..
	0x00, 0xd8, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, // .....".......G..
	0x00, 0xd8, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, // .....!.......G..
	0x00, 0x27, 0x02, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, // .'...........G..
	0x00, 0x32, 0x02, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x02, // .2..............
	0x00, 0x02, 0x00, 0x00, 0x00, 0x21, 0x00, 0x03, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, // .....!..........
	0x00, 0x1a, 0x00, 0x02, 0x00, 0x06, 0x00, 0x00, 0x00, 0x16, 0x00, 0x03, 0x00, 0x07, 0x00, 0x00, // ................
	0x00, 0x20, 0x00, 0x00, 0x00, 0x19, 0x00, 0x09, 0x00, 0x08, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, // . ..............
	0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x0b, 0x00, 0x00, // ................
	0x00, 0x07, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, // ................
	0x00, 0x07, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x15, 0x00, 0x00, // ................
	0x00, 0x07, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x54, 0x00, 0x00, // ......... ...T..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x54, 0x00, 0x00, // .........;...T..
	0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x57, 0x00, 0x00, // .U....... ...W..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x57, 0x00, 0x00, // .........;...W..
	0x00, 0x58, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x54, 0x00, 0x00, // .X.......;...T..
	0x00, 0x5c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x57, 0x00, 0x00, // .........;...W..
	0x00, 0x5e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x00, 0x04, 0x00, 0x61, 0x00, 0x00, // .^...........a..
	0x00, 0x20, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x61, 0x00, 0x00, // . .......+...a..
	0x00, 0x62, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x61, 0x00, 0x00, // .b.......+...a..
	0x00, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x03, 0x00, 0x6a, 0x00, 0x00, // .f...........j..
	0x00, 0x08, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, // .....+..........
	0x00, 0xe6, 0xae, 0x25, 0x3d, 0x14, 0x00, 0x02, 0x00, 0x81, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, // ...%=........+..
	0x00, 0x07, 0x00, 0x00, 0x00, 0x86, 0x00, 0x00, 0x00, 0x91, 0x83, 0x9e, 0x3d, 0x2b, 0x00, 0x04, // ............=+..
	0x00, 0x07, 0x00, 0x00, 0x00, 0x8b, 0x00, 0x00, 0x00, 0x6e, 0xa7, 0x72, 0x3f, 0x2b, 0x00, 0x04, // .........n.r?+..
	0x00, 0x07, 0x00, 0x00, 0x00, 0x8d, 0x00, 0x00, 0x00, 0x19, 0x89, 0x55, 0x3d, 0x2b, 0x00, 0x04, // ...........U=+..
	0x00, 0x07, 0x00, 0x00, 0x00, 0x8f, 0x00, 0x00, 0x00, 0x9a, 0x99, 0x19, 0x40, 0x15, 0x00, 0x04, // ............@...
	0x00, 0x99, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, // ..... .......+..
	0x00, 0x99, 0x00, 0x00, 0x00, 0x9a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, // .............+..
	0x00, 0x99, 0x00, 0x00, 0x00, 0x9f, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, // .............+..
	0x00, 0x99, 0x00, 0x00, 0x00, 0xa4, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, // .............+..
	0x00, 0x07, 0x00, 0x00, 0x00, 0xac, 0x00, 0x00, 0x00, 0x1c, 0x2e, 0x4d, 0x3b, 0x2b, 0x00, 0x04, // ...........M;+..
	0x00, 0x07, 0x00, 0x00, 0x00, 0xb1, 0x00, 0x00, 0x00, 0x52, 0xb8, 0x4e, 0x41, 0x2b, 0x00, 0x04, // .........R.NA+..
	0x00, 0x07, 0x00, 0x00, 0x00, 0xb5, 0x00, 0x00, 0x00, 0x3d, 0x0a, 0x87, 0x3f, 0x2b, 0x00, 0x04, // .........=..?+..
	0x00, 0x07, 0x00, 0x00, 0x00, 0xb7, 0x00, 0x00, 0x00, 0x55, 0x55, 0xd5, 0x3e, 0x2b, 0x00, 0x04, // .........UU.>+..
	0x00, 0x07, 0x00, 0x00, 0x00, 0xba, 0x00, 0x00, 0x00, 0xae, 0x47, 0x61, 0x3d, 0x18, 0x00, 0x04, // ..........Ga=...
	0x00, 0xd5, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x08, // ................
	0x00, 0xd6, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xd5, 0x00, 0x00, // ................
	0x00, 0xd5, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, // ............. ..
	0x00, 0xd7, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xd6, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, // .............;..
	0x00, 0xd7, 0x00, 0x00, 0x00, 0xd8, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, // ............. ..
	0x00, 0xd9, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, // .............+..
	0x00, 0x07, 0x00, 0x00, 0x00, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, // .............+..
	0x00, 0x07, 0x00, 0x00, 0x00, 0xe4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x17, 0x00, 0x04, // ............?...
	0x00, 0xeb, 0x00, 0x00, 0x00, 0x81, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, // .............+..
	0x00, 0x07, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x00, 0x00, 0xfa, 0x7e, 0x2a, 0x3f, 0x2b, 0x00, 0x04, // ..........~*?+..
	0x00, 0x99, 0x00, 0x00, 0x00, 0x19, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, // .............+..
	0x00, 0x07, 0x00, 0x00, 0x00, 0x1d, 0x01, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x2b, 0x00, 0x04, // ............?+..
	0x00, 0x61, 0x00, 0x00, 0x00, 0x90, 0x01, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, // .a........... ..
	0x00, 0x91, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, // .............+..
	0x00, 0x61, 0x00, 0x00, 0x00, 0x98, 0x01, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, // .a...........+..
	0x00, 0x07, 0x00, 0x00, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x17, 0xb7, 0xd1, 0x38, 0x2b, 0x00, 0x04, // ............8+..
	0x00, 0x61, 0x00, 0x00, 0x00, 0xdd, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, // .a........... ..
	0x00, 0xde, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xd5, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, // .............+..
	0x00, 0x61, 0x00, 0x00, 0x00, 0xe7, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, // .a........... ..
	0x00, 0x26, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, // .&...........;..
	0x00, 0x26, 0x02, 0x00, 0x00, 0x27, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, // .&...'....... ..
	0x00, 0x31, 0x02, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, // .1...........;..
	0x00, 0x31, 0x02, 0x00, 0x00, 0x32, 0x02, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x36, 0x00, 0x05, // .1...2.......6..
	0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, // ................
	0x00, 0xf8, 0x00, 0x02, 0x00, 0x05, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, // .........=......
	0x00, 0x56, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x08, 0x00, 0x00, // .V...U...=......
	0x00, 0x59, 0x00, 0x00, 0x00, 0x58, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, // .Y...X...=......
	0x00, 0x5d, 0x00, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x08, 0x00, 0x00, // .].......=......
	0x00, 0x5f, 0x00, 0x00, 0x00, 0x5e, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x0b, 0x00, 0x00, // ._...^...=......
	0x00, 0x28, 0x02, 0x00, 0x00, 0x27, 0x02, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0xd9, 0x00, 0x00, // .(...'...A......
	0x00, 0x9f, 0x02, 0x00, 0x00, 0xd8, 0x00, 0x00, 0x00, 0x66, 0x00, 0x00, 0x00, 0xa4, 0x00, 0x00, // .........f......
	0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0xa0, 0x02, 0x00, 0x00, 0x9f, 0x02, 0x00, // .=..............
	0x00, 0xb7, 0x00, 0x05, 0x00, 0x81, 0x00, 0x00, 0x00, 0xa1, 0x02, 0x00, 0x00, 0xa0, 0x02, 0x00, // ................
	0x00, 0xdc, 0x00, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0xd9, 0x00, 0x00, 0x00, 0xa2, 0x02, 0x00, // .....A..........
	0x00, 0xd8, 0x00, 0x00, 0x00, 0x66, 0x00, 0x00, 0x00, 0x9a, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, // .....f.......=..
	0x00, 0x07, 0x00, 0x00, 0x00, 0xa3, 0x02, 0x00, 0x00, 0xa2, 0x02, 0x00, 0x00, 0x85, 0x00, 0x05, // ................
	0x00, 0x07, 0x00, 0x00, 0x00, 0xa7, 0x02, 0x00, 0x00, 0xe4, 0x00, 0x00, 0x00, 0xa3, 0x02, 0x00, // ................
	0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xa8, 0x02, 0x00, 0x00, 0xdc, 0x00, 0x00, // .P..............
	0x00, 0xa7, 0x02, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xaa, 0x02, 0x00, // ................
	0x00, 0xe4, 0x00, 0x00, 0x00, 0xa3, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, // .........P......
	0x00, 0xab, 0x02, 0x00, 0x00, 0xaa, 0x02, 0x00, 0x00, 0xdc, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, // .............P..
	0x00, 0xeb, 0x00, 0x00, 0x00, 0xac, 0x02, 0x00, 0x00, 0xa1, 0x02, 0x00, 0x00, 0xa1, 0x02, 0x00, // ................
	0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xad, 0x02, 0x00, 0x00, 0xac, 0x02, 0x00, // ................
	0x00, 0xa8, 0x02, 0x00, 0x00, 0xab, 0x02, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, // ................
	0x00, 0xae, 0x02, 0x00, 0x00, 0x28, 0x02, 0x00, 0x00, 0xad, 0x02, 0x00, 0x00, 0x56, 0x00, 0x05, // .....(.......V..
	0x00, 0x6a, 0x00, 0x00, 0x00, 0x36, 0x03, 0x00, 0x00, 0x5f, 0x00, 0x00, 0x00, 0x5d, 0x00, 0x00, // .j...6..._...]..
	0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x39, 0x03, 0x00, 0x00, 0x36, 0x03, 0x00, // .X.......9...6..
	0x00, 0xae, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xdc, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, // .............Q..
	0x00, 0x07, 0x00, 0x00, 0x00, 0xb1, 0x02, 0x00, 0x00, 0x39, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, // .........9......
	0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xb5, 0x02, 0x00, 0x00, 0xf7, 0x00, 0x00, // ................
	0x00, 0xa3, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xb6, 0x02, 0x00, // .....P..........
	0x00, 0xdc, 0x00, 0x00, 0x00, 0xb5, 0x02, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // ................
	0x00, 0xb8, 0x02, 0x00, 0x00, 0xf7, 0x00, 0x00, 0x00, 0xa3, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, // .............P..
	0x00, 0x0b, 0x00, 0x00, 0x00, 0xb9, 0x02, 0x00, 0x00, 0xb8, 0x02, 0x00, 0x00, 0xdc, 0x00, 0x00, // ................
	0x00, 0x50, 0x00, 0x05, 0x00, 0xeb, 0x00, 0x00, 0x00, 0xba, 0x02, 0x00, 0x00, 0xa1, 0x02, 0x00, // .P..............
	0x00, 0xa1, 0x02, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xbb, 0x02, 0x00, // ................
	0x00, 0xba, 0x02, 0x00, 0x00, 0xb6, 0x02, 0x00, 0x00, 0xb9, 0x02, 0x00, 0x00, 0x81, 0x00, 0x05, // ................
	0x00, 0x0b, 0x00, 0x00, 0x00, 0xbc, 0x02, 0x00, 0x00, 0x28, 0x02, 0x00, 0x00, 0xbb, 0x02, 0x00, // .........(......
	0x00, 0x56, 0x00, 0x05, 0x00, 0x6a, 0x00, 0x00, 0x00, 0x40, 0x03, 0x00, 0x00, 0x5f, 0x00, 0x00, // .V...j...@..._..
	0x00, 0x5d, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x43, 0x03, 0x00, // .]...X.......C..
	0x00, 0x40, 0x03, 0x00, 0x00, 0xbc, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xdc, 0x00, 0x00, // .@..............
	0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xbf, 0x02, 0x00, 0x00, 0x43, 0x03, 0x00, // .Q...........C..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0xc0, 0x02, 0x00, // ................
	0x00, 0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0xb1, 0x02, 0x00, 0x00, 0xbf, 0x02, 0x00, // .....%..........
	0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xc4, 0x02, 0x00, 0x00, 0xdc, 0x00, 0x00, // .P..............
	0x00, 0xa3, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xc6, 0x02, 0x00, // .....P..........
	0x00, 0xa3, 0x02, 0x00, 0x00, 0xdc, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0xeb, 0x00, 0x00, // .........P......
	0x00, 0xc7, 0x02, 0x00, 0x00, 0xa1, 0x02, 0x00, 0x00, 0xa1, 0x02, 0x00, 0x00, 0xa9, 0x00, 0x06, // ................
	0x00, 0x0b, 0x00, 0x00, 0x00, 0xc8, 0x02, 0x00, 0x00, 0xc7, 0x02, 0x00, 0x00, 0xc4, 0x02, 0x00, // ................
	0x00, 0xc6, 0x02, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xc9, 0x02, 0x00, // ................
	0x00, 0x28, 0x02, 0x00, 0x00, 0xc8, 0x02, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, 0x6a, 0x00, 0x00, // .(.......V...j..
	0x00, 0x4a, 0x03, 0x00, 0x00, 0x5f, 0x00, 0x00, 0x00, 0x5d, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, // .J..._...]...X..
	0x00, 0x0e, 0x00, 0x00, 0x00, 0x4d, 0x03, 0x00, 0x00, 0x4a, 0x03, 0x00, 0x00, 0xc9, 0x02, 0x00, // .....M...J......
	0x00, 0x02, 0x00, 0x00, 0x00, 0xdc, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // .........Q......
	0x00, 0xcc, 0x02, 0x00, 0x00, 0x4d, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, // .....M..........
	0x00, 0x07, 0x00, 0x00, 0x00, 0xcd, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, // .............%..
	0x00, 0xc0, 0x02, 0x00, 0x00, 0xcc, 0x02, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0xd9, 0x00, 0x00, // .........A......
	0x00, 0xce, 0x02, 0x00, 0x00, 0xd8, 0x00, 0x00, 0x00, 0x62, 0x00, 0x00, 0x00, 0x19, 0x01, 0x00, // .........b......
	0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0xcf, 0x02, 0x00, 0x00, 0xce, 0x02, 0x00, // .=..............
	0x00, 0x41, 0x00, 0x06, 0x00, 0xd9, 0x00, 0x00, 0x00, 0xd2, 0x02, 0x00, 0x00, 0xd8, 0x00, 0x00, // .A..............
	0x00, 0x66, 0x00, 0x00, 0x00, 0x9f, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, // .f.......=......
	0x00, 0xd3, 0x02, 0x00, 0x00, 0xd2, 0x02, 0x00, 0x00, 0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // ................
	0x00, 0xd4, 0x02, 0x00, 0x00, 0x1d, 0x01, 0x00, 0x00, 0xd3, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, // ................
	0x00, 0x07, 0x00, 0x00, 0x00, 0xd5, 0x02, 0x00, 0x00, 0xd4, 0x02, 0x00, 0x00, 0xe4, 0x00, 0x00, // ................
	0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xd6, 0x02, 0x00, 0x00, 0xcd, 0x02, 0x00, // ................
	0x00, 0xd5, 0x02, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xd7, 0x02, 0x00, // ................
	0x00, 0xe4, 0x00, 0x00, 0x00, 0xd6, 0x02, 0x00, 0x00, 0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // ................
	0x00, 0xd8, 0x02, 0x00, 0x00, 0x1d, 0x01, 0x00, 0x00, 0xd7, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, // ................
	0x00, 0x07, 0x00, 0x00, 0x00, 0xd9, 0x02, 0x00, 0x00, 0x1d, 0x01, 0x00, 0x00, 0xd8, 0x02, 0x00, // ................
	0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xda, 0x02, 0x00, 0x00, 0xa3, 0x02, 0x00, // ................
	0x00, 0xd9, 0x02, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xdb, 0x02, 0x00, // ................
	0x00, 0xcf, 0x02, 0x00, 0x00, 0xda, 0x02, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, // ................
	0x00, 0xdc, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0xdc, 0x00, 0x00, // .........(......
	0x00, 0xdb, 0x02, 0x00, 0x00, 0x7f, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0xe0, 0x02, 0x00, // ................
	0x00, 0xdc, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xe1, 0x02, 0x00, // .....P..........
	0x00, 0xdc, 0x00, 0x00, 0x00, 0xe0, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, // .........P......
	0x00, 0xe3, 0x02, 0x00, 0x00, 0xdc, 0x02, 0x00, 0x00, 0xdc, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, // .............P..
	0x00, 0xeb, 0x00, 0x00, 0x00, 0xe4, 0x02, 0x00, 0x00, 0xa1, 0x02, 0x00, 0x00, 0xa1, 0x02, 0x00, // ................
	0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xe5, 0x02, 0x00, 0x00, 0xe4, 0x02, 0x00, // ................
	0x00, 0xe1, 0x02, 0x00, 0x00, 0xe3, 0x02, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, // ................
	0x00, 0xe6, 0x02, 0x00, 0x00, 0x28, 0x02, 0x00, 0x00, 0xe5, 0x02, 0x00, 0x00, 0x56, 0x00, 0x05, // .....(.......V..
	0x00, 0x6a, 0x00, 0x00, 0x00, 0x54, 0x03, 0x00, 0x00, 0x59, 0x00, 0x00, 0x00, 0x56, 0x00, 0x00, // .j...T...Y...V..
	0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x57, 0x03, 0x00, 0x00, 0x54, 0x03, 0x00, // .X.......W...T..
	0x00, 0xe6, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xdc, 0x00, 0x00, 0x00, 0x85, 0x00, 0x05, // ................
	0x00, 0x07, 0x00, 0x00, 0x00, 0xed, 0x02, 0x00, 0x00, 0xe4, 0x00, 0x00, 0x00, 0xa3, 0x02, 0x00, // ................
	0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xee, 0x02, 0x00, 0x00, 0xdc, 0x00, 0x00, // .P..............
	0x00, 0xed, 0x02, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xf0, 0x02, 0x00, // ................
	0x00, 0xe4, 0x00, 0x00, 0x00, 0xa3, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, // .........P......
	0x00, 0xf1, 0x02, 0x00, 0x00, 0xf0, 0x02, 0x00, 0x00, 0xdc, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, // .............P..
	0x00, 0xeb, 0x00, 0x00, 0x00, 0xf2, 0x02, 0x00, 0x00, 0xa1, 0x02, 0x00, 0x00, 0xa1, 0x02, 0x00, // ................
	0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xf3, 0x02, 0x00, 0x00, 0xf2, 0x02, 0x00, // ................
	0x00, 0xee, 0x02, 0x00, 0x00, 0xf1, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, // ................
	0x00, 0xf4, 0x02, 0x00, 0x00, 0x28, 0x02, 0x00, 0x00, 0xf3, 0x02, 0x00, 0x00, 0x56, 0x00, 0x05, // .....(.......V..
	0x00, 0x6a, 0x00, 0x00, 0x00, 0x5e, 0x03, 0x00, 0x00, 0x5f, 0x00, 0x00, 0x00, 0x5d, 0x00, 0x00, // .j...^..._...]..
	0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x61, 0x03, 0x00, 0x00, 0x5e, 0x03, 0x00, // .X.......a...^..
	0x00, 0xf4, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xdc, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, // .............Q..
	0x00, 0x07, 0x00, 0x00, 0x00, 0xf7, 0x02, 0x00, 0x00, 0x61, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, // .........a......
	0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xfb, 0x02, 0x00, 0x00, 0xf7, 0x00, 0x00, // ................
	0x00, 0xa3, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xfc, 0x02, 0x00, // .....P..........
	0x00, 0xdc, 0x00, 0x00, 0x00, 0xfb, 0x02, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // ................
	0x00, 0xfe, 0x02, 0x00, 0x00, 0xf7, 0x00, 0x00, 0x00, 0xa3, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, // .............P..
	0x00, 0x0b, 0x00, 0x00, 0x00, 0xff, 0x02, 0x00, 0x00, 0xfe, 0x02, 0x00, 0x00, 0xdc, 0x00, 0x00, // ................
	0x00, 0x50, 0x00, 0x05, 0x00, 0xeb, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0xa1, 0x02, 0x00, // .P..............
	0x00, 0xa1, 0x02, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x01, 0x03, 0x00, // ................
	0x00, 0x00, 0x03, 0x00, 0x00, 0xfc, 0x02, 0x00, 0x00, 0xff, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, // ................
	0x00, 0x0b, 0x00, 0x00, 0x00, 0x02, 0x03, 0x00, 0x00, 0x28, 0x02, 0x00, 0x00, 0x01, 0x03, 0x00, // .........(......
	0x00, 0x56, 0x00, 0x05, 0x00, 0x6a, 0x00, 0x00, 0x00, 0x68, 0x03, 0x00, 0x00, 0x5f, 0x00, 0x00, // .V...j...h..._..
	0x00, 0x5d, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x6b, 0x03, 0x00, // .]...X.......k..
	0x00, 0x68, 0x03, 0x00, 0x00, 0x02, 0x03, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xdc, 0x00, 0x00, // .h..............
	0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x05, 0x03, 0x00, 0x00, 0x6b, 0x03, 0x00, // .Q...........k..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x06, 0x03, 0x00, // ................
	0x00, 0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0xf7, 0x02, 0x00, 0x00, 0x05, 0x03, 0x00, // .....%..........
	0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x0a, 0x03, 0x00, 0x00, 0xdc, 0x00, 0x00, // .P..............
	0x00, 0xa3, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x0c, 0x03, 0x00, // .....P..........
	0x00, 0xa3, 0x02, 0x00, 0x00, 0xdc, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0xeb, 0x00, 0x00, // .........P......
	0x00, 0x0d, 0x03, 0x00, 0x00, 0xa1, 0x02, 0x00, 0x00, 0xa1, 0x02, 0x00, 0x00, 0xa9, 0x00, 0x06, // ................
	0x00, 0x0b, 0x00, 0x00, 0x00, 0x0e, 0x03, 0x00, 0x00, 0x0d, 0x03, 0x00, 0x00, 0x0a, 0x03, 0x00, // ................
	0x00, 0x0c, 0x03, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x0f, 0x03, 0x00, // ................
	0x00, 0x28, 0x02, 0x00, 0x00, 0x0e, 0x03, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, 0x6a, 0x00, 0x00, // .(.......V...j..
	0x00, 0x72, 0x03, 0x00, 0x00, 0x5f, 0x00, 0x00, 0x00, 0x5d, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, // .r..._...]...X..
	0x00, 0x0e, 0x00, 0x00, 0x00, 0x75, 0x03, 0x00, 0x00, 0x72, 0x03, 0x00, 0x00, 0x0f, 0x03, 0x00, // .....u...r......
	0x00, 0x02, 0x00, 0x00, 0x00, 0xdc, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // .........Q......
	0x00, 0x12, 0x03, 0x00, 0x00, 0x75, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, // .....u..........
	0x00, 0x07, 0x00, 0x00, 0x00, 0x13, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, // .............%..
	0x00, 0x06, 0x03, 0x00, 0x00, 0x12, 0x03, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0xd9, 0x00, 0x00, // .........A......
	0x00, 0x14, 0x03, 0x00, 0x00, 0xd8, 0x00, 0x00, 0x00, 0x62, 0x00, 0x00, 0x00, 0x19, 0x01, 0x00, // .........b......
	0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x15, 0x03, 0x00, 0x00, 0x14, 0x03, 0x00, // .=..............
	0x00, 0x41, 0x00, 0x06, 0x00, 0xd9, 0x00, 0x00, 0x00, 0x18, 0x03, 0x00, 0x00, 0xd8, 0x00, 0x00, // .A..............
	0x00, 0x66, 0x00, 0x00, 0x00, 0x9f, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, // .f.......=......
	0x00, 0x19, 0x03, 0x00, 0x00, 0x18, 0x03, 0x00, 0x00, 0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // ................
	0x00, 0x1a, 0x03, 0x00, 0x00, 0x1d, 0x01, 0x00, 0x00, 0x19, 0x03, 0x00, 0x00, 0x83, 0x00, 0x05, // ................
	0x00, 0x07, 0x00, 0x00, 0x00, 0x1b, 0x03, 0x00, 0x00, 0x1a, 0x03, 0x00, 0x00, 0xe4, 0x00, 0x00, // ................
	0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x1c, 0x03, 0x00, 0x00, 0x13, 0x03, 0x00, // ................
	0x00, 0x1b, 0x03, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x1d, 0x03, 0x00, // ................
	0x00, 0xe4, 0x00, 0x00, 0x00, 0x1c, 0x03, 0x00, 0x00, 0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // ................
	0x00, 0x1e, 0x03, 0x00, 0x00, 0x1d, 0x01, 0x00, 0x00, 0x1d, 0x03, 0x00, 0x00, 0x83, 0x00, 0x05, // ................
	0x00, 0x07, 0x00, 0x00, 0x00, 0x1f, 0x03, 0x00, 0x00, 0x1d, 0x01, 0x00, 0x00, 0x1e, 0x03, 0x00, // ................
	0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x20, 0x03, 0x00, 0x00, 0xa3, 0x02, 0x00, // ......... ......
	0x00, 0x1f, 0x03, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x21, 0x03, 0x00, // .............!..
	0x00, 0x15, 0x03, 0x00, 0x00, 0x20, 0x03, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, // ..... ..........
	0x00, 0x22, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0xdc, 0x00, 0x00, // .".......(......
	0x00, 0x21, 0x03, 0x00, 0x00, 0x7f, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x26, 0x03, 0x00, // .!...........&..
	0x00, 0x22, 0x03, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x27, 0x03, 0x00, // ."...P.......'..
	0x00, 0xdc, 0x00, 0x00, 0x00, 0x26, 0x03, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, // .....&...P......
	0x00, 0x29, 0x03, 0x00, 0x00, 0x22, 0x03, 0x00, 0x00, 0xdc, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, // .)...".......P..
	0x00, 0xeb, 0x00, 0x00, 0x00, 0x2a, 0x03, 0x00, 0x00, 0xa1, 0x02, 0x00, 0x00, 0xa1, 0x02, 0x00, // .....*..........
	0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x2b, 0x03, 0x00, 0x00, 0x2a, 0x03, 0x00, // .........+...*..
	0x00, 0x27, 0x03, 0x00, 0x00, 0x29, 0x03, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, // .'...)..........
	0x00, 0x2c, 0x03, 0x00, 0x00, 0x28, 0x02, 0x00, 0x00, 0x2b, 0x03, 0x00, 0x00, 0x56, 0x00, 0x05, // .,...(...+...V..
	0x00, 0x6a, 0x00, 0x00, 0x00, 0x7c, 0x03, 0x00, 0x00, 0x59, 0x00, 0x00, 0x00, 0x56, 0x00, 0x00, // .j...|...Y...V..
	0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x7f, 0x03, 0x00, 0x00, 0x7c, 0x03, 0x00, // .X...........|..
	0x00, 0x2c, 0x03, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xdc, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, // .,...........Q..
	0x00, 0x07, 0x00, 0x00, 0x00, 0x86, 0x03, 0x00, 0x00, 0x57, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, // .........W......
	0x00, 0xf7, 0x00, 0x03, 0x00, 0xa4, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfb, 0x00, 0x03, // ................
	0x00, 0x9a, 0x00, 0x00, 0x00, 0x98, 0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x98, 0x03, 0x00, // ................
	0x00, 0xbc, 0x00, 0x05, 0x00, 0x81, 0x00, 0x00, 0x00, 0x9a, 0x03, 0x00, 0x00, 0x86, 0x03, 0x00, // ................
	0x00, 0x80, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0xa3, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0xfa, 0x00, 0x04, 0x00, 0x9a, 0x03, 0x00, 0x00, 0x9b, 0x03, 0x00, 0x00, 0x9e, 0x03, 0x00, // ................
	0x00, 0xf8, 0x00, 0x02, 0x00, 0x9e, 0x03, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // ................
	0x00, 0xa0, 0x03, 0x00, 0x00, 0x86, 0x03, 0x00, 0x00, 0x8b, 0x00, 0x00, 0x00, 0x81, 0x00, 0x05, // ................
	0x00, 0x07, 0x00, 0x00, 0x00, 0xa1, 0x03, 0x00, 0x00, 0xa0, 0x03, 0x00, 0x00, 0x8d, 0x00, 0x00, // ................
	0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0xa2, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, // ................
	0x00, 0x1a, 0x00, 0x00, 0x00, 0xa1, 0x03, 0x00, 0x00, 0x8f, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, // ................
	0x00, 0xa4, 0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x9b, 0x03, 0x00, 0x00, 0x85, 0x00, 0x05, // ................
	0x00, 0x07, 0x00, 0x00, 0x00, 0x9d, 0x03, 0x00, 0x00, 0x86, 0x03, 0x00, 0x00, 0x86, 0x00, 0x00, // ................
	0x00, 0xf9, 0x00, 0x02, 0x00, 0xa4, 0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xa3, 0x03, 0x00, // ................
	0x00, 0xff, 0x00, 0x01, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xa4, 0x03, 0x00, 0x00, 0xf5, 0x00, 0x07, // ................
	0x00, 0x07, 0x00, 0x00, 0x00, 0x12, 0x05, 0x00, 0x00, 0xa2, 0x03, 0x00, 0x00, 0x9e, 0x03, 0x00, // ................
	0x00, 0x9d, 0x03, 0x00, 0x00, 0x9b, 0x03, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // .........Q......
	0x00, 0x89, 0x03, 0x00, 0x00, 0x57, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, // .....W..........
	0x00, 0xbb, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfb, 0x00, 0x03, 0x00, 0x9a, 0x00, 0x00, // ................
	0x00, 0xaf, 0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xaf, 0x03, 0x00, 0x00, 0xbc, 0x00, 0x05, // ................
	0x00, 0x81, 0x00, 0x00, 0x00, 0xb1, 0x03, 0x00, 0x00, 0x89, 0x03, 0x00, 0x00, 0x80, 0x00, 0x00, // ................
	0x00, 0xf7, 0x00, 0x03, 0x00, 0xba, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, // ................
	0x00, 0xb1, 0x03, 0x00, 0x00, 0xb2, 0x03, 0x00, 0x00, 0xb5, 0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, // ................
	0x00, 0xb5, 0x03, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xb7, 0x03, 0x00, // ................
	0x00, 0x89, 0x03, 0x00, 0x00, 0x8b, 0x00, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // ................
	0x00, 0xb8, 0x03, 0x00, 0x00, 0xb7, 0x03, 0x00, 0x00, 0x8d, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, // ................
	0x00, 0x07, 0x00, 0x00, 0x00, 0xb9, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, // ................
	0x00, 0xb8, 0x03, 0x00, 0x00, 0x8f, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0xbb, 0x03, 0x00, // ................
	0x00, 0xf8, 0x00, 0x02, 0x00, 0xb2, 0x03, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // ................
	0x00, 0xb4, 0x03, 0x00, 0x00, 0x89, 0x03, 0x00, 0x00, 0x86, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, // ................
	0x00, 0xbb, 0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xba, 0x03, 0x00, 0x00, 0xff, 0x00, 0x01, // ................
	0x00, 0xf8, 0x00, 0x02, 0x00, 0xbb, 0x03, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, // ................
	0x00, 0x13, 0x05, 0x00, 0x00, 0xb9, 0x03, 0x00, 0x00, 0xb5, 0x03, 0x00, 0x00, 0xb4, 0x03, 0x00, // ................
	0x00, 0xb2, 0x03, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x8c, 0x03, 0x00, // .....Q..........
	0x00, 0x57, 0x03, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0xd2, 0x03, 0x00, // .W..............
	0x00, 0x00, 0x00, 0x00, 0x00, 0xfb, 0x00, 0x03, 0x00, 0x9a, 0x00, 0x00, 0x00, 0xc6, 0x03, 0x00, // ................
	0x00, 0xf8, 0x00, 0x02, 0x00, 0xc6, 0x03, 0x00, 0x00, 0xbc, 0x00, 0x05, 0x00, 0x81, 0x00, 0x00, // ................
	0x00, 0xc8, 0x03, 0x00, 0x00, 0x8c, 0x03, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, // ................
	0x00, 0xd1, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0xc8, 0x03, 0x00, // ................
	0x00, 0xc9, 0x03, 0x00, 0x00, 0xcc, 0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xcc, 0x03, 0x00, // ................
	0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xce, 0x03, 0x00, 0x00, 0x8c, 0x03, 0x00, // ................
	0x00, 0x8b, 0x00, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xcf, 0x03, 0x00, // ................
	0x00, 0xce, 0x03, 0x00, 0x00, 0x8d, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, // ................
	0x00, 0xd0, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0xcf, 0x03, 0x00, // ................
	0x00, 0x8f, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0xd2, 0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, // ................
	0x00, 0xc9, 0x03, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xcb, 0x03, 0x00, // ................
	0x00, 0x8c, 0x03, 0x00, 0x00, 0x86, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0xd2, 0x03, 0x00, // ................
	0x00, 0xf8, 0x00, 0x02, 0x00, 0xd1, 0x03, 0x00, 0x00, 0xff, 0x00, 0x01, 0x00, 0xf8, 0x00, 0x02, // ................
	0x00, 0xd2, 0x03, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x14, 0x05, 0x00, // ................
	0x00, 0xd0, 0x03, 0x00, 0x00, 0xcc, 0x03, 0x00, 0x00, 0xcb, 0x03, 0x00, 0x00, 0xc9, 0x03, 0x00, // ................
	0x00, 0x50, 0x00, 0x06, 0x00, 0x15, 0x00, 0x00, 0x00, 0x8e, 0x03, 0x00, 0x00, 0x12, 0x05, 0x00, // .P..............
	0x00, 0x13, 0x05, 0x00, 0x00, 0x14, 0x05, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // .........Q......
	0x00, 0xda, 0x03, 0x00, 0x00, 0x7f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, // ................
	0x00, 0xf8, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfb, 0x00, 0x03, 0x00, 0x9a, 0x00, 0x00, // ................
	0x00, 0xec, 0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xec, 0x03, 0x00, 0x00, 0xbc, 0x00, 0x05, // ................
	0x00, 0x81, 0x00, 0x00, 0x00, 0xee, 0x03, 0x00, 0x00, 0xda, 0x03, 0x00, 0x00, 0x80, 0x00, 0x00, // ................
	0x00, 0xf7, 0x00, 0x03, 0x00, 0xf7, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, // ................
	0x00, 0xee, 0x03, 0x00, 0x00, 0xef, 0x03, 0x00, 0x00, 0xf2, 0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, // ................
	0x00, 0xf2, 0x03, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xf4, 0x03, 0x00, // ................
	0x00, 0xda, 0x03, 0x00, 0x00, 0x8b, 0x00, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // ................
	0x00, 0xf5, 0x03, 0x00, 0x00, 0xf4, 0x03, 0x00, 0x00, 0x8d, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, // ................
	0x00, 0x07, 0x00, 0x00, 0x00, 0xf6, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, // ................
	0x00, 0xf5, 0x03, 0x00, 0x00, 0x8f, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0xf8, 0x03, 0x00, // ................
	0x00, 0xf8, 0x00, 0x02, 0x00, 0xef, 0x03, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // ................
	0x00, 0xf1, 0x03, 0x00, 0x00, 0xda, 0x03, 0x00, 0x00, 0x86, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, // ................
	0x00, 0xf8, 0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xf7, 0x03, 0x00, 0x00, 0xff, 0x00, 0x01, // ................
	0x00, 0xf8, 0x00, 0x02, 0x00, 0xf8, 0x03, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, // ................
	0x00, 0x18, 0x05, 0x00, 0x00, 0xf6, 0x03, 0x00, 0x00, 0xf2, 0x03, 0x00, 0x00, 0xf1, 0x03, 0x00, // ................
	0x00, 0xef, 0x03, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xdd, 0x03, 0x00, // .....Q..........
	0x00, 0x7f, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x0f, 0x04, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0xfb, 0x00, 0x03, 0x00, 0x9a, 0x00, 0x00, 0x00, 0x03, 0x04, 0x00, // ................
	0x00, 0xf8, 0x00, 0x02, 0x00, 0x03, 0x04, 0x00, 0x00, 0xbc, 0x00, 0x05, 0x00, 0x81, 0x00, 0x00, // ................
	0x00, 0x05, 0x04, 0x00, 0x00, 0xdd, 0x03, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, // ................
	0x00, 0x0e, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0x05, 0x04, 0x00, // ................
	0x00, 0x06, 0x04, 0x00, 0x00, 0x09, 0x04, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x09, 0x04, 0x00, // ................
	0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x0b, 0x04, 0x00, 0x00, 0xdd, 0x03, 0x00, // ................
	0x00, 0x8b, 0x00, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x0c, 0x04, 0x00, // ................
	0x00, 0x0b, 0x04, 0x00, 0x00, 0x8d, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, // ................
	0x00, 0x0d, 0x04, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x0c, 0x04, 0x00, // ................
	0x00, 0x8f, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x0f, 0x04, 0x00, 0x00, 0xf8, 0x00, 0x02, // ................
	0x00, 0x06, 0x04, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x08, 0x04, 0x00, // ................
	0x00, 0xdd, 0x03, 0x00, 0x00, 0x86, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x0f, 0x04, 0x00, // ................
	0x00, 0xf8, 0x00, 0x02, 0x00, 0x0e, 0x04, 0x00, 0x00, 0xff, 0x00, 0x01, 0x00, 0xf8, 0x00, 0x02, // ................
	0x00, 0x0f, 0x04, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x19, 0x05, 0x00, // ................
	0x00, 0x0d, 0x04, 0x00, 0x00, 0x09, 0x04, 0x00, 0x00, 0x08, 0x04, 0x00, 0x00, 0x06, 0x04, 0x00, // ................
	0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xe0, 0x03, 0x00, 0x00, 0x7f, 0x03, 0x00, // .Q..............
	0x00, 0x02, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x26, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, // .........&......
	0x00, 0xfb, 0x00, 0x03, 0x00, 0x9a, 0x00, 0x00, 0x00, 0x1a, 0x04, 0x00, 0x00, 0xf8, 0x00, 0x02, // ................
	0x00, 0x1a, 0x04, 0x00, 0x00, 0xbc, 0x00, 0x05, 0x00, 0x81, 0x00, 0x00, 0x00, 0x1c, 0x04, 0x00, // ................
	0x00, 0xe0, 0x03, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x25, 0x04, 0x00, // .............%..
	0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0x1c, 0x04, 0x00, 0x00, 0x1d, 0x04, 0x00, // ................
	0x00, 0x20, 0x04, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x20, 0x04, 0x00, 0x00, 0x85, 0x00, 0x05, // . ....... ......
	0x00, 0x07, 0x00, 0x00, 0x00, 0x22, 0x04, 0x00, 0x00, 0xe0, 0x03, 0x00, 0x00, 0x8b, 0x00, 0x00, // ....."..........
	0x00, 0x81, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x23, 0x04, 0x00, 0x00, 0x22, 0x04, 0x00, // .........#..."..
	0x00, 0x8d, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x24, 0x04, 0x00, // .............$..
	0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x23, 0x04, 0x00, 0x00, 0x8f, 0x00, 0x00, // .........#......
	0x00, 0xf9, 0x00, 0x02, 0x00, 0x26, 0x04, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x1d, 0x04, 0x00, // .....&..........
	0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x1f, 0x04, 0x00, 0x00, 0xe0, 0x03, 0x00, // ................
	0x00, 0x86, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x26, 0x04, 0x00, 0x00, 0xf8, 0x00, 0x02, // .........&......
	0x00, 0x25, 0x04, 0x00, 0x00, 0xff, 0x00, 0x01, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x26, 0x04, 0x00, // .%...........&..
	0x00, 0xf5, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x1a, 0x05, 0x00, 0x00, 0x24, 0x04, 0x00, // .............$..
	0x00, 0x20, 0x04, 0x00, 0x00, 0x1f, 0x04, 0x00, 0x00, 0x1d, 0x04, 0x00, 0x00, 0x50, 0x00, 0x06, // . ...........P..
	0x00, 0x15, 0x00, 0x00, 0x00, 0xe2, 0x03, 0x00, 0x00, 0x18, 0x05, 0x00, 0x00, 0x19, 0x05, 0x00, // ................
	0x00, 0x1a, 0x05, 0x00, 0x00, 0x41, 0x00, 0x05, 0x00, 0x91, 0x01, 0x00, 0x00, 0x3a, 0x04, 0x00, // .....A.......:..
	0x00, 0xd8, 0x00, 0x00, 0x00, 0x90, 0x01, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, // .........=......
	0x00, 0x3b, 0x04, 0x00, 0x00, 0x3a, 0x04, 0x00, 0x00, 0x4f, 0x00, 0x08, 0x00, 0x15, 0x00, 0x00, // .;...:...O......
	0x00, 0x3c, 0x04, 0x00, 0x00, 0x3b, 0x04, 0x00, 0x00, 0x3b, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, // .<...;...;......
	0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x94, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // ................
	0x00, 0x3d, 0x04, 0x00, 0x00, 0x8e, 0x03, 0x00, 0x00, 0x3c, 0x04, 0x00, 0x00, 0x41, 0x00, 0x05, // .=.......<...A..
	0x00, 0x91, 0x01, 0x00, 0x00, 0x3f, 0x04, 0x00, 0x00, 0xd8, 0x00, 0x00, 0x00, 0x98, 0x01, 0x00, // .....?..........
	0x00, 0x3d, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x40, 0x04, 0x00, 0x00, 0x3f, 0x04, 0x00, // .=.......@...?..
	0x00, 0x4f, 0x00, 0x08, 0x00, 0x15, 0x00, 0x00, 0x00, 0x41, 0x04, 0x00, 0x00, 0x40, 0x04, 0x00, // .O.......A...@..
	0x00, 0x40, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, // .@..............
	0x00, 0x94, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x42, 0x04, 0x00, 0x00, 0x8e, 0x03, 0x00, // .........B......
	0x00, 0x41, 0x04, 0x00, 0x00, 0x41, 0x00, 0x05, 0x00, 0x91, 0x01, 0x00, 0x00, 0x44, 0x04, 0x00, // .A...A.......D..
	0x00, 0xd8, 0x00, 0x00, 0x00, 0x90, 0x01, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, // .........=......
	0x00, 0x45, 0x04, 0x00, 0x00, 0x44, 0x04, 0x00, 0x00, 0x4f, 0x00, 0x08, 0x00, 0x15, 0x00, 0x00, // .E...D...O......
	0x00, 0x46, 0x04, 0x00, 0x00, 0x45, 0x04, 0x00, 0x00, 0x45, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, // .F...E...E......
	0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x94, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // ................
	0x00, 0x47, 0x04, 0x00, 0x00, 0xe2, 0x03, 0x00, 0x00, 0x46, 0x04, 0x00, 0x00, 0x41, 0x00, 0x05, // .G.......F...A..
	0x00, 0x91, 0x01, 0x00, 0x00, 0x49, 0x04, 0x00, 0x00, 0xd8, 0x00, 0x00, 0x00, 0x98, 0x01, 0x00, // .....I..........
	0x00, 0x3d, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x4a, 0x04, 0x00, 0x00, 0x49, 0x04, 0x00, // .=.......J...I..
	0x00, 0x4f, 0x00, 0x08, 0x00, 0x15, 0x00, 0x00, 0x00, 0x4b, 0x04, 0x00, 0x00, 0x4a, 0x04, 0x00, // .O.......K...J..
	0x00, 0x4a, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, // .J..............
	0x00, 0x94, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x4c, 0x04, 0x00, 0x00, 0xe2, 0x03, 0x00, // .........L......
	0x00, 0x4b, 0x04, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x4f, 0x04, 0x00, // .K...........O..
	0x00, 0x3d, 0x04, 0x00, 0x00, 0x42, 0x04, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // .=...B..........
	0x00, 0x52, 0x04, 0x00, 0x00, 0x47, 0x04, 0x00, 0x00, 0x4c, 0x04, 0x00, 0x00, 0x41, 0x00, 0x06, // .R...G...L...A..
	0x00, 0xd9, 0x00, 0x00, 0x00, 0x53, 0x04, 0x00, 0x00, 0xd8, 0x00, 0x00, 0x00, 0x98, 0x01, 0x00, // .....S..........
	0x00, 0x19, 0x01, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x54, 0x04, 0x00, // .....=.......T..
	0x00, 0x53, 0x04, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x57, 0x04, 0x00, // .S...........W..
	0x00, 0x3d, 0x04, 0x00, 0x00, 0x42, 0x04, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // .=...B..........
	0x00, 0x59, 0x04, 0x00, 0x00, 0x4f, 0x04, 0x00, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x88, 0x00, 0x05, // .Y...O..........
	0x00, 0x07, 0x00, 0x00, 0x00, 0x5a, 0x04, 0x00, 0x00, 0x57, 0x04, 0x00, 0x00, 0x59, 0x04, 0x00, // .....Z...W...Y..
	0x00, 0x0c, 0x00, 0x06, 0x00, 0x07, 0x00, 0x00, 0x00, 0x5b, 0x04, 0x00, 0x00, 0x01, 0x00, 0x00, // .........[......
	0x00, 0x04, 0x00, 0x00, 0x00, 0x5a, 0x04, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // .....Z..........
	0x00, 0x5c, 0x04, 0x00, 0x00, 0x54, 0x04, 0x00, 0x00, 0x5b, 0x04, 0x00, 0x00, 0x41, 0x00, 0x06, // .....T...[...A..
	0x00, 0xd9, 0x00, 0x00, 0x00, 0x5d, 0x04, 0x00, 0x00, 0xd8, 0x00, 0x00, 0x00, 0x98, 0x01, 0x00, // .....]..........
	0x00, 0x19, 0x01, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x5e, 0x04, 0x00, // .....=.......^..
	0x00, 0x5d, 0x04, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x61, 0x04, 0x00, // .]...........a..
	0x00, 0x47, 0x04, 0x00, 0x00, 0x4c, 0x04, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // .G...L..........
	0x00, 0x63, 0x04, 0x00, 0x00, 0x52, 0x04, 0x00, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x88, 0x00, 0x05, // .c...R..........
	0x00, 0x07, 0x00, 0x00, 0x00, 0x64, 0x04, 0x00, 0x00, 0x61, 0x04, 0x00, 0x00, 0x63, 0x04, 0x00, // .....d...a...c..
	0x00, 0x0c, 0x00, 0x06, 0x00, 0x07, 0x00, 0x00, 0x00, 0x65, 0x04, 0x00, 0x00, 0x01, 0x00, 0x00, // .........e......
	0x00, 0x04, 0x00, 0x00, 0x00, 0x64, 0x04, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // .....d..........
	0x00, 0x66, 0x04, 0x00, 0x00, 0x5e, 0x04, 0x00, 0x00, 0x65, 0x04, 0x00, 0x00, 0x50, 0x00, 0x06, // .f...^...e...P..
	0x00, 0x15, 0x00, 0x00, 0x00, 0x76, 0x04, 0x00, 0x00, 0x4f, 0x04, 0x00, 0x00, 0x4f, 0x04, 0x00, // .....v...O...O..
	0x00, 0x4f, 0x04, 0x00, 0x00, 0x50, 0x00, 0x06, 0x00, 0x15, 0x00, 0x00, 0x00, 0x6a, 0x04, 0x00, // .O...P.......j..
	0x00, 0x5c, 0x04, 0x00, 0x00, 0x5c, 0x04, 0x00, 0x00, 0x5c, 0x04, 0x00, 0x00, 0x0c, 0x00, 0x08, // ................
	0x00, 0x15, 0x00, 0x00, 0x00, 0x7c, 0x04, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, // .....|..........
	0x00, 0x8e, 0x03, 0x00, 0x00, 0x76, 0x04, 0x00, 0x00, 0x6a, 0x04, 0x00, 0x00, 0x50, 0x00, 0x06, // .....v...j...P..
	0x00, 0x15, 0x00, 0x00, 0x00, 0x80, 0x04, 0x00, 0x00, 0x52, 0x04, 0x00, 0x00, 0x52, 0x04, 0x00, // .........R...R..
	0x00, 0x52, 0x04, 0x00, 0x00, 0x50, 0x00, 0x06, 0x00, 0x15, 0x00, 0x00, 0x00, 0x70, 0x04, 0x00, // .R...P.......p..
	0x00, 0x66, 0x04, 0x00, 0x00, 0x66, 0x04, 0x00, 0x00, 0x66, 0x04, 0x00, 0x00, 0x0c, 0x00, 0x08, // .f...f...f......
	0x00, 0x15, 0x00, 0x00, 0x00, 0x86, 0x04, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, // ................
	0x00, 0xe2, 0x03, 0x00, 0x00, 0x80, 0x04, 0x00, 0x00, 0x70, 0x04, 0x00, 0x00, 0x41, 0x00, 0x05, // .........p...A..
	0x00, 0xde, 0x01, 0x00, 0x00, 0x8a, 0x04, 0x00, 0x00, 0xd8, 0x00, 0x00, 0x00, 0xdd, 0x01, 0x00, // ................
	0x00, 0x3d, 0x00, 0x04, 0x00, 0xd5, 0x00, 0x00, 0x00, 0x8b, 0x04, 0x00, 0x00, 0x8a, 0x04, 0x00, // .=..............
	0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x8d, 0x04, 0x00, 0x00, 0x7c, 0x04, 0x00, // .Q...........|..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x8e, 0x04, 0x00, // .....Q..........
	0x00, 0x7c, 0x04, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // .|.......Q......
	0x00, 0x8f, 0x04, 0x00, 0x00, 0x7c, 0x04, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x50, 0x00, 0x07, // .....|.......P..
	0x00, 0x0e, 0x00, 0x00, 0x00, 0x90, 0x04, 0x00, 0x00, 0x8d, 0x04, 0x00, 0x00, 0x8e, 0x04, 0x00, // ................
	0x00, 0x8f, 0x04, 0x00, 0x00, 0x1d, 0x01, 0x00, 0x00, 0x91, 0x00, 0x05, 0x00, 0x0e, 0x00, 0x00, // ................
	0x00, 0x91, 0x04, 0x00, 0x00, 0x8b, 0x04, 0x00, 0x00, 0x90, 0x04, 0x00, 0x00, 0x41, 0x00, 0x05, // .............A..
	0x00, 0xde, 0x01, 0x00, 0x00, 0x92, 0x04, 0x00, 0x00, 0xd8, 0x00, 0x00, 0x00, 0xe7, 0x01, 0x00, // ................
	0x00, 0x3d, 0x00, 0x04, 0x00, 0xd5, 0x00, 0x00, 0x00, 0x93, 0x04, 0x00, 0x00, 0x92, 0x04, 0x00, // .=..............
	0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x95, 0x04, 0x00, 0x00, 0x86, 0x04, 0x00, // .Q..............
	0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x96, 0x04, 0x00, // .....Q..........
	0x00, 0x86, 0x04, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // .........Q......
	0x00, 0x97, 0x04, 0x00, 0x00, 0x86, 0x04, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x50, 0x00, 0x07, // .............P..
	0x00, 0x0e, 0x00, 0x00, 0x00, 0x98, 0x04, 0x00, 0x00, 0x95, 0x04, 0x00, 0x00, 0x96, 0x04, 0x00, // ................
	0x00, 0x97, 0x04, 0x00, 0x00, 0x1d, 0x01, 0x00, 0x00, 0x91, 0x00, 0x05, 0x00, 0x0e, 0x00, 0x00, // ................
	0x00, 0x99, 0x04, 0x00, 0x00, 0x93, 0x04, 0x00, 0x00, 0x98, 0x04, 0x00, 0x00, 0x81, 0x00, 0x05, // ................
	0x00, 0x0e, 0x00, 0x00, 0x00, 0x9a, 0x04, 0x00, 0x00, 0x91, 0x04, 0x00, 0x00, 0x99, 0x04, 0x00, // ................
	0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xa3, 0x04, 0x00, 0x00, 0x9a, 0x04, 0x00, // .Q..............
	0x00, 0x00, 0x00, 0x00, 0x00, 0xbc, 0x00, 0x05, 0x00, 0x81, 0x00, 0x00, 0x00, 0xb5, 0x04, 0x00, // ................
	0x00, 0xa3, 0x04, 0x00, 0x00, 0xac, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0xbe, 0x04, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0xb5, 0x04, 0x00, 0x00, 0xb6, 0x04, 0x00, // ................
	0x00, 0xb9, 0x04, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xb9, 0x04, 0x00, 0x00, 0x0c, 0x00, 0x07, // ................
	0x00, 0x07, 0x00, 0x00, 0x00, 0xbb, 0x04, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, // ................
	0x00, 0xa3, 0x04, 0x00, 0x00, 0xb7, 0x00, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // ................
	0x00, 0xbc, 0x04, 0x00, 0x00, 0xb5, 0x00, 0x00, 0x00, 0xbb, 0x04, 0x00, 0x00, 0x83, 0x00, 0x05, // ................
	0x00, 0x07, 0x00, 0x00, 0x00, 0xbd, 0x04, 0x00, 0x00, 0xbc, 0x04, 0x00, 0x00, 0xba, 0x00, 0x00, // ................
	0x00, 0xf9, 0x00, 0x02, 0x00, 0xbe, 0x04, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xb6, 0x04, 0x00, // ................
	0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xb8, 0x04, 0x00, 0x00, 0xb1, 0x00, 0x00, // ................
	0x00, 0xa3, 0x04, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0xbe, 0x04, 0x00, 0x00, 0xf8, 0x00, 0x02, // ................
	0x00, 0xbe, 0x04, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x1e, 0x05, 0x00, // ................
	0x00, 0xbd, 0x04, 0x00, 0x00, 0xb9, 0x04, 0x00, 0x00, 0xb8, 0x04, 0x00, 0x00, 0xb6, 0x04, 0x00, // ................
	0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xa6, 0x04, 0x00, 0x00, 0x9a, 0x04, 0x00, // .Q..............
	0x00, 0x01, 0x00, 0x00, 0x00, 0xbc, 0x00, 0x05, 0x00, 0x81, 0x00, 0x00, 0x00, 0xc9, 0x04, 0x00, // ................
	0x00, 0xa6, 0x04, 0x00, 0x00, 0xac, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0xd2, 0x04, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0xc9, 0x04, 0x00, 0x00, 0xca, 0x04, 0x00, // ................
	0x00, 0xcd, 0x04, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xcd, 0x04, 0x00, 0x00, 0x0c, 0x00, 0x07, // ................
	0x00, 0x07, 0x00, 0x00, 0x00, 0xcf, 0x04, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, // ................
	0x00, 0xa6, 0x04, 0x00, 0x00, 0xb7, 0x00, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // ................
	0x00, 0xd0, 0x04, 0x00, 0x00, 0xb5, 0x00, 0x00, 0x00, 0xcf, 0x04, 0x00, 0x00, 0x83, 0x00, 0x05, // ................
	0x00, 0x07, 0x00, 0x00, 0x00, 0xd1, 0x04, 0x00, 0x00, 0xd0, 0x04, 0x00, 0x00, 0xba, 0x00, 0x00, // ................
	0x00, 0xf9, 0x00, 0x02, 0x00, 0xd2, 0x04, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xca, 0x04, 0x00, // ................
	0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xcc, 0x04, 0x00, 0x00, 0xb1, 0x00, 0x00, // ................
	0x00, 0xa6, 0x04, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0xd2, 0x04, 0x00, 0x00, 0xf8, 0x00, 0x02, // ................
	0x00, 0xd2, 0x04, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x1f, 0x05, 0x00, // ................
	0x00, 0xd1, 0x04, 0x00, 0x00, 0xcd, 0x04, 0x00, 0x00, 0xcc, 0x04, 0x00, 0x00, 0xca, 0x04, 0x00, // ................
	0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xa9, 0x04, 0x00, 0x00, 0x9a, 0x04, 0x00, // .Q..............
	0x00, 0x02, 0x00, 0x00, 0x00, 0xbc, 0x00, 0x05, 0x00, 0x81, 0x00, 0x00, 0x00, 0xdd, 0x04, 0x00, // ................
	0x00, 0xa9, 0x04, 0x00, 0x00, 0xac, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0xe6, 0x04, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0xdd, 0x04, 0x00, 0x00, 0xde, 0x04, 0x00, // ................
	0x00, 0xe1, 0x04, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xe1, 0x04, 0x00, 0x00, 0x0c, 0x00, 0x07, // ................
	0x00, 0x07, 0x00, 0x00, 0x00, 0xe3, 0x04, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, // ................
	0x00, 0xa9, 0x04, 0x00, 0x00, 0xb7, 0x00, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // ................
	0x00, 0xe4, 0x04, 0x00, 0x00, 0xb5, 0x00, 0x00, 0x00, 0xe3, 0x04, 0x00, 0x00, 0x83, 0x00, 0x05, // ................
	0x00, 0x07, 0x00, 0x00, 0x00, 0xe5, 0x04, 0x00, 0x00, 0xe4, 0x04, 0x00, 0x00, 0xba, 0x00, 0x00, // ................
	0x00, 0xf9, 0x00, 0x02, 0x00, 0xe6, 0x04, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xde, 0x04, 0x00, // ................
	0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xe0, 0x04, 0x00, 0x00, 0xb1, 0x00, 0x00, // ................
	0x00, 0xa9, 0x04, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0xe6, 0x04, 0x00, 0x00, 0xf8, 0x00, 0x02, // ................
	0x00, 0xe6, 0x04, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x20, 0x05, 0x00, // ............. ..
	0x00, 0xe5, 0x04, 0x00, 0x00, 0xe1, 0x04, 0x00, 0x00, 0xe0, 0x04, 0x00, 0x00, 0xde, 0x04, 0x00, // ................
	0x00, 0x50, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x7b, 0x02, 0x00, 0x00, 0x1e, 0x05, 0x00, // .P.......{......
	0x00, 0x1f, 0x05, 0x00, 0x00, 0x20, 0x05, 0x00, 0x00, 0x1d, 0x01, 0x00, 0x00, 0x3e, 0x00, 0x03, // ..... .......>..
	0x00, 0x32, 0x02, 0x00, 0x00, 0x7b, 0x02, 0x00, 0x00, 0xfd, 0x00, 0x01, 0x00, 0x38, 0x00, 0x01, // .2...{.......8..
	0x00, 0x00, 0x00, 0xc0, 0x00,                                                                   // .....
};
static const bgfx::EmbeddedShader fs_pp_stereo_anaglyph_lin_srgb_dyndesat = BGFX_EMBEDDED_SHADER(fs_pp_stereo_anaglyph_lin_srgb_dyndesat);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Build of fragment shader from fs_pp_stereo.sc to fs_pp_stereo_anaglyph_lin_gamma_nodesat with options: ANAGLYPH NODESAT GAMMA NOSTEREO
static const uint8_t fs_pp_stereo_anaglyph_lin_gamma_nodesat_mtl[3565] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x14, 0x74, // FSH.o.><.......t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, // ex_stereo_fbSamp
	0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x74, 0x65, // ler...........te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x54, 0x65, 0x78, 0x74, 0x75, // x_stereo_fbTextu
	0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x74, 0x65, 0x78, // re...........tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, // _stereo_depthSam
	0x70, 0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x74, // pler...........t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x54, // ex_stereo_depthT
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, // exture..........
	0x13, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, // .Stereo_MS_ZPD_Y
	0x41, 0x78, 0x69, 0x73, 0x12, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x77, // Axis...........w
	0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x01, 0x10, 0x00, 0x01, 0x00, 0x00, // _h_height.......
	0x00, 0x00, 0x00, 0x0e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, // ....Stereo_LeftM
	0x61, 0x74, 0x14, 0x01, 0x20, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x53, 0x74, 0x65, // at.. ........Ste
	0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x01, 0x60, 0x00, // reo_RightMat..`.
	0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, // .......Stereo_Le
	0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, // ftLuminance_Gamm
	0x61, 0x12, 0x01, 0xa0, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, // a...........tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // stereo_fb.......
	0x00, 0x00, 0x00, 0x10, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, // ....tex_stereo_d
	0x65, 0x70, 0x74, 0x68, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x97, 0x0c, // epth............
	0x00, 0x00, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x6d, 0x65, 0x74, 0x61, // ..#include <meta
	0x6c, 0x5f, 0x73, 0x74, 0x64, 0x6c, 0x69, 0x62, 0x3e, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, // l_stdlib>.#inclu
	0x64, 0x65, 0x20, 0x3c, 0x73, 0x69, 0x6d, 0x64, 0x2f, 0x73, 0x69, 0x6d, 0x64, 0x2e, 0x68, 0x3e, // de <simd/simd.h>
	0x0a, 0x0a, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, // ..using namespac
	0x65, 0x20, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, // e metal;..struct
	0x20, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, //  _Global.{.    f
	0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, // loat4 Stereo_MS_
	0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, // ZPD_YAxis;.    f
	0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, // loat4 w_h_height
	0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x78, 0x34, 0x20, 0x53, // ;.    float4x4 S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x20, // tereo_LeftMat;. 
	0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x78, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, //    float4x4 Ster
	0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x20, 0x20, 0x20, // eo_RightMat;.   
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, //  float4 Stereo_L
	0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, // eftLuminance_Gam
	0x6d, 0x61, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x78, // ma;.};..struct x
	0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x0a, 0x7b, // latMtlMain_out.{
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, // .    float4 bgfx
	0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x20, 0x5b, 0x5b, 0x63, 0x6f, 0x6c, // _FragData0 [[col
	0x6f, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, // or(0)]];.};..str
	0x75, 0x63, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, // uct xlatMtlMain_
	0x69, 0x6e, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, // in.{.    float2 
	0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x5b, 0x5b, 0x75, 0x73, // v_texcoord0 [[us
	0x65, 0x72, 0x28, 0x6c, 0x6f, 0x63, 0x6e, 0x30, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, // er(locn0)]];.};.
	0x0a, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, // .fragment xlatMt
	0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, // lMain_out xlatMt
	0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x28, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, // lMain(xlatMtlMai
	0x6e, 0x5f, 0x69, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x5b, 0x5b, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, // n_in in [[stage_
	0x69, 0x6e, 0x5d, 0x5d, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x20, 0x5f, // in]], constant _
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x26, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x20, 0x5b, // Global& _mtl_u [
	0x5b, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x74, 0x65, // [buffer(0)]], te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3e, 0x20, 0x74, // xture2d<float> t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x20, 0x5b, 0x5b, 0x74, // ex_stereo_fb [[t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x74, 0x65, 0x78, // exture(0)]], tex
	0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3e, 0x20, 0x74, 0x65, // ture2d<float> te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x20, 0x5b, // x_stereo_depth [
	0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x31, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x73, // [texture(1)]], s
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // ampler tex_stere
	0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x5b, 0x5b, 0x73, 0x61, // o_fbSampler [[sa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, // mpler(0)]], samp
	0x6c, 0x65, 0x72, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, // ler tex_stereo_d
	0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x5b, 0x5b, 0x73, 0x61, // epthSampler [[sa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x31, 0x29, 0x5d, 0x5d, 0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, // mpler(1)]]).{.  
	0x20, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, //   xlatMtlMain_ou
	0x74, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x3d, 0x20, 0x7b, 0x7d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, // t out = {};.    
	0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x5f, 0x34, 0x37, 0x34, 0x20, 0x3d, 0x20, 0x5f, 0x6d, 0x74, 0x6c, // bool _474 = _mtl
	0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, // _u.Stereo_MS_ZPD
	0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x7a, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x3b, // _YAxis.z != 0.0;
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x35, 0x33, 0x33, 0x20, // .    float _533 
	0x3d, 0x20, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, // = fast::max(0.0,
	0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, //  _mtl_u.w_h_heig
	0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, // ht.w + (_mtl_u.S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, // tereo_MS_ZPD_YAx
	0x69, 0x73, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, // is.x * (1.0 - (1
	0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x28, 0x66, 0x61, 0x73, // .0 / (0.5 + (fas
	0x74, 0x3a, 0x3a, 0x6d, 0x69, 0x6e, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, 0x6e, // t::min(fast::min
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, // (tex_stereo_dept
	0x68, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, // h.sample(tex_ste
	0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // reo_depthSampler
	0x2c, 0x20, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, // , (in.v_texcoord
	0x30, 0x20, 0x2b, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, // 0 + select(float
	0x32, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, // 2(0.5 * _mtl_u.S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, // tereo_MS_ZPD_YAx
	0x69, 0x73, 0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, // is.x, 0.0), floa
	0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, // t2(0.0, 0.5 * _m
	0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, // tl_u.Stereo_MS_Z
	0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, // PD_YAxis.x), boo
	0x6c, 0x32, 0x28, 0x5f, 0x34, 0x37, 0x34, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, // l2(_474))), leve
	0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, // l(0.0)).x, tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, 0x6d, 0x70, // tereo_depth.samp
	0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, // le(tex_stereo_de
	0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, 0x6e, 0x2e, // pthSampler, (in.
	0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2b, 0x20, 0x73, 0x65, // v_texcoord0 + se
	0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, // lect(float2(0.66
	0x36, 0x30, 0x30, 0x30, 0x30, 0x30, 0x38, 0x35, 0x38, 0x33, 0x30, 0x36, 0x38, 0x38, 0x34, 0x37, // 6000008583068847
	0x36, 0x35, 0x36, 0x32, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, // 65625 * _mtl_u.S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, // tereo_MS_ZPD_YAx
	0x69, 0x73, 0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, // is.x, 0.0), floa
	0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x30, 0x30, 0x30, // t2(0.0, 0.666000
	0x30, 0x30, 0x38, 0x35, 0x38, 0x33, 0x30, 0x36, 0x38, 0x38, 0x34, 0x37, 0x36, 0x35, 0x36, 0x32, // 0085830688476562
	0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, // 5 * _mtl_u.Stere
	0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, // o_MS_ZPD_YAxis.x
	0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x34, 0x37, 0x34, 0x29, 0x29, 0x29, // ), bool2(_474)))
	0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x29, // , level(0.0)).x)
	0x2c, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, // , tex_stereo_dep
	0x74, 0x68, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // th.sample(tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, // ereo_depthSample
	0x72, 0x2c, 0x20, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, // r, (in.v_texcoor
	0x64, 0x30, 0x20, 0x2b, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, // d0 + select(floa
	0x74, 0x32, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // t2(_mtl_u.Stereo
	0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, // _MS_ZPD_YAxis.x,
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, //  0.0), float2(0.
	0x30, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // 0, _mtl_u.Stereo
	0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, // _MS_ZPD_YAxis.x)
	0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x34, 0x37, 0x34, 0x29, 0x29, 0x29, 0x2c, // , bool2(_474))),
	0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x20, //  level(0.0)).x) 
	0x2a, 0x20, 0x28, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, // * ((1.0 / _mtl_u
	0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, // .Stereo_MS_ZPD_Y
	0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, // Axis.y) - 0.5)))
	0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // ))));.    float 
	0x5f, 0x36, 0x30, 0x33, 0x20, 0x3d, 0x20, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x61, 0x78, // _603 = fast::max
	0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x77, 0x5f, 0x68, // (0.0, _mtl_u.w_h
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x28, 0x5f, 0x6d, 0x74, // _height.w + (_mt
	0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, // l_u.Stereo_MS_ZP
	0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, // D_YAxis.x * (1.0
	0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, //  - (1.0 / (0.5 +
	0x20, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, 0x6e, 0x28, 0x66, 0x61, 0x73, 0x74, //  (fast::min(fast
	0x3a, 0x3a, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // ::min(tex_stereo
	0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, // _depth.sample(te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, // x_stereo_depthSa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, // mpler, (in.v_tex
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2d, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, // coord0 - select(
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, // float2(0.5 * _mt
	0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, // l_u.Stereo_MS_ZP
	0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, // D_YAxis.x, 0.0),
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, //  float2(0.0, 0.5
	0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, //  * _mtl_u.Stereo
	0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, // _MS_ZPD_YAxis.x)
	0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x34, 0x37, 0x34, 0x29, 0x29, 0x29, 0x2c, // , bool2(_474))),
	0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x2c, 0x20, //  level(0.0)).x, 
	0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, // tex_stereo_depth
	0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // .sample(tex_ster
	0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, // eo_depthSampler,
	0x20, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, //  (in.v_texcoord0
	0x20, 0x2d, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, //  - select(float2
	0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x30, 0x30, 0x30, 0x30, 0x30, 0x38, 0x35, 0x38, 0x33, 0x30, // (0.6660000085830
	0x36, 0x38, 0x38, 0x34, 0x37, 0x36, 0x35, 0x36, 0x32, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, // 6884765625 * _mt
	0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, // l_u.Stereo_MS_ZP
	0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, // D_YAxis.x, 0.0),
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, //  float2(0.0, 0.6
	0x36, 0x36, 0x30, 0x30, 0x30, 0x30, 0x30, 0x38, 0x35, 0x38, 0x33, 0x30, 0x36, 0x38, 0x38, 0x34, // 6600000858306884
	0x37, 0x36, 0x35, 0x36, 0x32, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, // 765625 * _mtl_u.
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, // Stereo_MS_ZPD_YA
	0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x34, // xis.x), bool2(_4
	0x37, 0x34, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, // 74))), level(0.0
	0x29, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // )).x), tex_stere
	0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, // o_depth.sample(t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, // ex_stereo_depthS
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, // ampler, (in.v_te
	0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2d, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, // xcoord0 - select
	0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, // (float2(_mtl_u.S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, // tereo_MS_ZPD_YAx
	0x69, 0x73, 0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, // is.x, 0.0), floa
	0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, // t2(0.0, _mtl_u.S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, // tereo_MS_ZPD_YAx
	0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x34, 0x37, // is.x), bool2(_47
	0x34, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, // 4))), level(0.0)
	0x29, 0x2e, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x5f, // ).x) * ((1.0 / _
	0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, // mtl_u.Stereo_MS_
	0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, // ZPD_YAxis.y) - 0
	0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x6f, // .5)))))));.    o
	0x75, 0x74, 0x2e, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, // ut.bgfx_FragData
	0x30, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x70, 0x6f, 0x77, 0x72, 0x28, // 0 = float4(powr(
	0x28, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x70, 0x6f, 0x77, 0x72, 0x28, 0x74, 0x65, // ((float4(powr(te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2e, 0x73, 0x61, 0x6d, 0x70, // x_stereo_fb.samp
	0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, // le(tex_stereo_fb
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, // Sampler, (in.v_t
	0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2b, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, // excoord0 + selec
	0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x5f, 0x35, 0x33, 0x33, 0x2c, 0x20, 0x30, // t(float2(_533, 0
	0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, // .0), float2(0.0,
	0x20, 0x2d, 0x5f, 0x35, 0x33, 0x33, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, //  -_533), bool2(_
	0x34, 0x37, 0x34, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, // 474))), level(0.
	0x30, 0x29, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, // 0)).xyz, float3(
	0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, // _mtl_u.Stereo_Le
	0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, // ftLuminance_Gamm
	0x61, 0x2e, 0x77, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, // a.w, _mtl_u.Ster
	0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, // eo_LeftLuminance
	0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, // _Gamma.w, _mtl_u
	0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, // .Stereo_LeftLumi
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x29, 0x29, 0x2c, // nance_Gamma.w)),
	0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, //  1.0) * _mtl_u.S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x2b, // tereo_LeftMat) +
	0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x70, 0x6f, 0x77, 0x72, 0x28, 0x74, 0x65, //  (float4(powr(te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2e, 0x73, 0x61, 0x6d, 0x70, // x_stereo_fb.samp
	0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, // le(tex_stereo_fb
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, // Sampler, (in.v_t
	0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2d, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, // excoord0 - selec
	0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x5f, 0x36, 0x30, 0x33, 0x2c, 0x20, 0x30, // t(float2(_603, 0
	0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, // .0), float2(0.0,
	0x20, 0x2d, 0x5f, 0x36, 0x30, 0x33, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, //  -_603), bool2(_
	0x34, 0x37, 0x34, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, // 474))), level(0.
	0x30, 0x29, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, // 0)).xyz, float3(
	0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, // _mtl_u.Stereo_Le
	0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, // ftLuminance_Gamm
	0x61, 0x2e, 0x77, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, // a.w, _mtl_u.Ster
	0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, // eo_LeftLuminance
	0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, // _Gamma.w, _mtl_u
	0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, // .Stereo_LeftLumi
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x29, 0x29, 0x2c, // nance_Gamma.w)),
	0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, //  1.0) * _mtl_u.S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x29, // tereo_RightMat))
	0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x31, 0x2e, 0x30, // .xyz, float3(1.0
	0x20, 0x2f, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, //  / _mtl_u.Stereo
	0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, // _LeftLuminance_G
	0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x5f, 0x6d, // amma.w, 1.0 / _m
	0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, // tl_u.Stereo_Left
	0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, // Luminance_Gamma.
	0x77, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, // w, 1.0 / _mtl_u.
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, // Stereo_LeftLumin
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x29, 0x29, 0x2c, 0x20, // ance_Gamma.w)), 
	0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // 1.0);.    return
	0x20, 0x6f, 0x75, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x0a, 0x00, 0x00, 0xf0, 0x00,                   //  out;.}......
};
static const uint8_t fs_pp_stereo_anaglyph_lin_gamma_nodesat_essl[10940] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa9, 0x2a, // FSH.o.><.......*
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x33, 0x32, 0x30, 0x20, 0x65, // ..#version 320 e
	0x73, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, // s.#define attrib
	0x75, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x76, // ute in.#define v
	0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, // arying in.precis
	0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3b, // ion highp float;
	0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, // .precision highp
	0x20, 0x69, 0x6e, 0x74, 0x3b, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x73, 0x68, //  int;.#define sh
	0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, // adow2D(_sampler,
	0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, //  _coord) texture
	0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, // (_sampler, _coor
	0x64, 0x29, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x73, 0x68, 0x61, 0x64, 0x6f, // d).#define shado
	0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // w2DProj(_sampler
	0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // , _coord) textur
	0x65, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, // eProj(_sampler, 
	0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x0a, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x65, 0x64, 0x69, // _coord).out medi
	0x75, 0x6d, 0x70, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, // ump vec4 bgfx_Fr
	0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, // agColor;.varying
	0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, //  vec2 v_texcoord
	0x30, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, // 0;.vec3 instMul(
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x20, // vec3 _vec, mat3 
	0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // _mtx) { return (
	0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, //  (_vec) * (_mtx)
	0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, //  ); }.vec3 instM
	0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, // ul(mat3 _mtx, ve
	0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, // c3 _vec) { retur
	0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, // n ( (_mtx) * (_v
	0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, // ec) ); }.vec4 in
	0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, // stMul(vec4 _vec,
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, //  mat4 _mtx) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, // turn ( (_vec) * 
	0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, // (_mtx) ); }.vec4
	0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, //  instMul(mat4 _m
	0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, // tx, vec4 _vec) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, //  return ( (_mtx)
	0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, //  * (_vec) ); }.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, 0x70, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, // loat rcp(float _
	0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x2f, // a) { return 1.0/
	0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, // _a; }.vec2 rcp(v
	0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // ec2 _a) { return
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, //  vec2(1.0)/_a; }
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, // .vec3 rcp(vec3 _
	0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, // a) { return vec3
	0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, // (1.0)/_a; }.vec4
	0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, //  rcp(vec4 _a) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x31, 0x2e, 0x30, 0x29, // return vec4(1.0)
	0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x65, 0x63, 0x32, // /_a; }.vec2 vec2
	0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, // _splat(float _x)
	0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, //  { return vec2(_
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, // x, _x); }.vec3 v
	0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // ec3_splat(float 
	0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, // _x) { return vec
	0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, // 3(_x, _x, _x); }
	0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, // .vec4 vec4_splat
	0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // (float _x) { ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, // urn vec4(_x, _x,
	0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, //  _x, _x); }.uvec
	0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, // 2 uvec2_splat(ui
	0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // nt _x) { return 
	0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, // uvec2(_x, _x); }
	0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, // .uvec3 uvec3_spl
	0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // at(uint _x) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, // turn uvec3(_x, _
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x34, 0x20, // x, _x); }.uvec4 
	0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, // uvec4_splat(uint
	0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, //  _x) { return uv
	0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, // ec4(_x, _x, _x, 
	0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, // _x); }.mat4 mtxF
	0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, // romRows(vec4 _0,
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, //  vec4 _1, vec4 _
	0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // 2, vec4 _3).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, // turn transpose(m
	0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, // at4(_0, _1, _2, 
	0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, // _3) );.}.mat4 mt
	0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, // xFromCols(vec4 _
	0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // 0, vec4 _1, vec4
	0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, //  _2, vec4 _3).{.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, // return mat4(_0, 
	0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, // _1, _2, _3);.}.m
	0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, // at3 mtxFromRows(
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, // vec3 _0, vec3 _1
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // , vec3 _2).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, // urn transpose(ma
	0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x20, 0x29, // t3(_0, _1, _2) )
	0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, // ;.}.mat3 mtxFrom
	0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, // Cols(vec3 _0, ve
	0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, // c3 _1, vec3 _2).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, // {.return mat3(_0
	0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, // , _1, _2);.}.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, // form vec4 u_view
	0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, // Rect;.uniform ve
	0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x54, 0x65, 0x78, 0x65, 0x6c, 0x3b, 0x0a, // c4 u_viewTexel;.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, // uniform mat4 u_v
	0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, // iew;.uniform mat
	0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, // 4 u_invView;.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x70, 0x72, 0x6f, 0x6a, // form mat4 u_proj
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, // ;.uniform mat4 u
	0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // _invProj;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, // m mat4 u_viewPro
	0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, // j;.uniform mat4 
	0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, // u_invViewProj;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, // niform mat4 u_mo
	0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // del[32];.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, //  mat4 u_modelVie
	0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, // w;.uniform mat4 
	0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, // u_modelViewProj;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, // .uniform vec4 u_
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x66, 0x34, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // alphaRef4;.float
	0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, //  sqr( float v).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // .return v*v;.}.v
	0x65, 0x63, 0x32, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x29, // ec2 sqr( vec2 v)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, // .{.return v*v;.}
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // .vec3 sqr( vec3 
	0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, // v).{.return v*v;
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6d, 0x75, 0x6c, 0x5f, 0x77, 0x31, 0x28, 0x20, // .}.vec3 mul_w1( 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x29, 0x0a, // vec3 v, mat4 m).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2e, 0x78, 0x2a, 0x6d, 0x5b, 0x30, // {.return v.x*m[0
	0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x79, 0x2a, 0x6d, 0x5b, 0x31, // ].xyz + (v.y*m[1
	0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x7a, 0x2a, 0x6d, 0x5b, 0x32, // ].xyz + (v.z*m[2
	0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x6d, 0x5b, 0x33, 0x5d, 0x2e, 0x78, 0x79, 0x7a, // ].xyz + m[3].xyz
	0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x63, 0x6f, 0x73, // ));.}.float acos
	0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x20, 0x66, // _approx_divPI( f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // loat v).{.float 
	0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, // x = abs(v);.if(1
	0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, // . - x <= 0.00006
	0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // 103515625).retur
	0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, // n (v >= 0.) ? 0.
	0x20, 0x3a, 0x20, 0x31, 0x2e, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, //  : 1.;.float res
	0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, //  = ((-0.155972/3
	0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, // .141592653589793
	0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, // 2384626433832795
	0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, // ) * x + (1.56467
	0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, // /3.1415926535897
	0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, // 9323846264338327
	0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, // 95) ) * sqrt(1. 
	0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, // - x);.return (v 
	0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x31, // >= 0.) ? res : 1
	0x2e, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // . - res;.}.float
	0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, //  atan2_approx_di
	0x76, 0x32, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x79, 0x2c, 0x20, 0x66, // v2PI( float y, f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // loat x).{.float 
	0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x79, 0x29, 0x3b, 0x0a, // abs_y = abs(y);.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, // float abs_x = ab
	0x73, 0x28, 0x78, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3c, // s(x);.if(abs_x <
	0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, // = 0.000061035156
	0x32, 0x35, 0x20, 0x26, 0x26, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3c, 0x3d, 0x20, 0x30, // 25 && abs_y <= 0
	0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, // .00006103515625)
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x30, 0x2e, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // .return 0.;.floa
	0x74, 0x20, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2d, 0x20, 0x61, // t r = (abs_x - a
	0x62, 0x73, 0x5f, 0x79, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2b, // bs_y) / (abs_x +
	0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, //  abs_y);.float a
	0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, // ngle = ((x < 0.)
	0x20, 0x3f, 0x20, 0x28, 0x33, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x20, 0x3a, 0x20, 0x28, 0x31, 0x2e, //  ? (3./8.) : (1.
	0x2f, 0x38, 0x2e, 0x29, 0x29, 0x0a, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x32, 0x31, 0x31, 0x38, 0x36, // /8.)).+ (0.21186
	0x38, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, // 8 /(2.*3.1415926
	0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, // 5358979323846264
	0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x72, 0x20, 0x2a, 0x20, // 33832795) * r * 
	0x72, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x39, 0x38, 0x37, 0x33, 0x30, 0x35, 0x20, 0x2f, 0x28, 0x32, // r - 0.987305 /(2
	0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, // .*3.141592653589
	0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, // 7932384626433832
	0x37, 0x39, 0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, // 795)) * ((x < 0.
	0x29, 0x20, 0x3f, 0x20, 0x2d, 0x72, 0x20, 0x3a, 0x20, 0x72, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, // ) ? -r : r);.ret
	0x75, 0x72, 0x6e, 0x20, 0x28, 0x79, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, // urn (y < 0.) ? -
	0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3a, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x3b, 0x0a, 0x7d, // angle : angle;.}
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x73, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x72, // .float asin_appr
	0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // ox_divPI( float 
	0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, // v).{.float x = a
	0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, // bs(v);.if(1. - x
	0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, //  <= 0.0000610351
	0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, // 5625).return (v 
	0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x3a, 0x20, 0x2d, // >= 0.) ? 0.5 : -
	0x30, 0x2e, 0x35, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, // 0.5;.float res =
	0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, //  ((-0.155972/3.1
	0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, // 4159265358979323
	0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, // 84626433832795) 
	0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, // * x + (1.56467/3
	0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, // .141592653589793
	0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, // 2384626433832795
	0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, // ) ) * sqrt(1. - 
	0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, // x);.return (v >=
	0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, //  0.) ? 0.5 - res
	0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, //  : -0.5 + res;.}
	0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x61, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x71, 0x75, // .vec2 ray_to_equ
	0x69, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x75, 0x76, 0x28, // irectangular_uv(
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x61, 0x79, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, //  vec3 ray).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x0a, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, // urn vec2(.0.5 + 
	0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, // atan2_approx_div
	0x32, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x79, 0x2c, 0x20, 0x72, 0x61, 0x79, 0x2e, 0x78, // 2PI(ray.y, ray.x
	0x29, 0x2c, 0x0a, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, // ),.acos_approx_d
	0x69, 0x76, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // ivPI(ray.z));.}.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x20, 0x66, // float InvsRGB( f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, // loat color).{.if
	0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, //  (color <= 0.040
	0x34, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // 45).return color
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x29, 0x3b, 0x0a, //  * (1.0/12.92);.
	0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, // else.return pow(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, // color * (1.0/1.0
	0x35, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x2f, 0x31, 0x2e, 0x30, // 55) + (0.055/1.0
	0x35, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // 55), 2.4);.}.flo
	0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x20, 0x66, 0x6c, // at InvRec709( fl
	0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, // oat color).{.if 
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x38, 0x31, 0x29, // (color <= 0.081)
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, // .return color * 
	0x28, 0x31, 0x2e, 0x30, 0x2f, 0x34, 0x2e, 0x35, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, // (1.0/4.5);.else.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // return pow(color
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, 0x20, 0x2b, //  * (1.0/1.099) +
	0x20, 0x28, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, 0x2c, 0x20, //  (0.099/1.099), 
	0x31, 0x2e, 0x30, 0x2f, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // 1.0/0.45);.}.flo
	0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x66, 0x6c, 0x6f, // at InvGamma( flo
	0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, // at color).{.retu
	0x72, 0x6e, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // rn InvsRGB(color
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, // );.}.vec3 InvGam
	0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, // ma( vec3 color).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x49, 0x6e, // {.return vec3(In
	0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, // vGamma(color.x),
	0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, // InvGamma(color.y
	0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // ),InvGamma(color
	0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, // .z));.}.vec3 Inv
	0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, // ToneMap( vec3 co
	0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x69, 0x6e, 0x76, // lor).{.float inv
	0x5f, 0x32, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x30, 0x2e, 0x35, 0x2f, 0x30, 0x2e, 0x32, 0x35, 0x3b, // _2bh = 0.5/0.25;
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x34, 0x2e, 0x30, 0x2a, // .float bh = 4.0*
	0x30, 0x2e, 0x32, 0x35, 0x20, 0x2d, 0x20, 0x32, 0x2e, 0x30, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // 0.25 - 2.0;.retu
	0x72, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, // rn (color - 1.0 
	0x2b, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2a, 0x28, 0x63, 0x6f, // + sqrt(color*(co
	0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x20, 0x62, 0x68, 0x29, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, // lor + bh) + 1.0)
	0x29, 0x2a, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // )*inv_2bh;.}.flo
	0x61, 0x74, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, // at sRGB( float f
	0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, // ).{.float s;.if 
	0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x33, 0x31, 0x33, 0x30, 0x38, 0x29, // (f <= 0.0031308)
	0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, // .s = 12.92 * f;.
	0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x20, 0x2a, // else.s = 1.055 *
	0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x34, 0x29, //  pow(f, 1.0/2.4)
	0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, //  - 0.055;.return
	0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x52, 0x65, 0x63, 0x37, //  s;.}.float Rec7
	0x30, 0x39, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, // 09( float f).{.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, // loat s;.if (f <=
	0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x34, 0x2e, 0x35, 0x20, //  0.018).s = 4.5 
	0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, // * f;.else.s = 1.
	0x30, 0x39, 0x39, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x34, // 099 * pow(f, 0.4
	0x35, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // 5) - 0.099;.retu
	0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, // rn s;.}.float FB
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, // Gamma( float col
	0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x52, 0x47, // or).{.return sRG
	0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, // B(color);.}.vec2
	0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, //  FBGamma( vec2 c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // olor).{.return v
	0x65, 0x63, 0x32, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // ec2(FBGamma(colo
	0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, // r.x),FBGamma(col
	0x6f, 0x72, 0x2e, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, // or.y));.}.vec3 F
	0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, // BGamma( vec3 col
	0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, // or).{.return vec
	0x33, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, // 3(FBGamma(color.
	0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // x),FBGamma(color
	0x2e, 0x79, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // .y),FBGamma(colo
	0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, // r.z));.}.vec3 FB
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x32, 0x32, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, // Gamma22( vec3 co
	0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, // lor).{.return ve
	0x63, 0x33, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x2c, 0x20, // c3(pow(color.x, 
	0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, // 1.0/2.2),pow(col
	0x6f, 0x72, 0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, // or.y, 1.0/2.2),p
	0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, // ow(color.z, 1.0/
	0x32, 0x2e, 0x32, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, // 2.2));.}.float F
	0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // BToneMap( float 
	0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6c, 0x20, 0x2a, 0x20, // l).{.return l * 
	0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, // ((l*0.25 + 1.0) 
	0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // / (l + 1.0));.}.
	0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, // vec2 FBToneMap( 
	0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, // vec2 color).{.fl
	0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // oat l = dot(colo
	0x72, 0x2c, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2b, // r,vec2(0.176204+
	0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x2c, 0x30, 0x2e, // 0.0108109*0.5,0.
	0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, // 812985+0.0108109
	0x2a, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, // *0.5));.return c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, // olor * ((l*0.25 
	0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, // + 1.0) / (l + 1.
	0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x54, 0x6f, // 0));.}.vec3 FBTo
	0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // neMap( vec3 colo
	0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, // r).{.float l = d
	0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, // ot(color,vec3(0.
	0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2c, // 176204,0.812985,
	0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, // 0.0108109));.ret
	0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, // urn color * ((l*
	0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, // 0.25 + 1.0) / (l
	0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, //  + 1.0));.}.vec4
	0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, //  Additive( vec4 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, // cBase, vec4 cBle
	0x6e, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, // nd, float percen
	0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, // t).{.return cBas
	0x65, 0x20, 0x2b, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, // e + cBlend*perce
	0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, // nt;.}.vec3 Scree
	0x6e, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, // n ( vec3 cBase, 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, // vec3 cBlend).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, // eturn 1.0 - (1.0
	0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, //  - cBase) * (1.0
	0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, //  - cBlend);.}.ve
	0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, // c4 Screen ( vec4
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, //  cBase, vec4 cBl
	0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, // end).{.return 1.
	0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, // 0 - (1.0 - cBase
	0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // ) * (1.0 - cBlen
	0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, // d);.}.vec3 Scree
	0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, // nHDR ( vec3 cBas
	0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, // e, vec3 cBlend).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, // {.return max(1.0
	0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, //  - (1.0 - cBase)
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, //  * (1.0 - cBlend
	0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, // ), vec3(0.,0.,0.
	0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, // ));.}.vec4 Scree
	0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, // nHDR ( vec4 cBas
	0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, // e, vec4 cBlend).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, // {.return max(1.0
	0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, //  - (1.0 - cBase)
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, //  * (1.0 - cBlend
	0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, // ), vec4(0.,0.,0.
	0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4d, 0x75, // ,0.));.}.vec4 Mu
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // ltiply ( vec4 cB
	0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, // ase, vec4 cBlend
	0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, // , float percent)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, // .{.return cBase 
	0x2a, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, // * cBlend*percent
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, // ;.}.vec4 Overlay
	0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, //  ( vec4 cBase, v
	0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, // ec4 cBlend).{.ve
	0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, // c4 cNew = step(0
	0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, // .5, cBase);.cNew
	0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, //  = mix(cBase*cBl
	0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, // end*2.0, 1.0-2.0
	0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, // *(1.0-cBase)*(1.
	0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, // 0-cBlend), cNew)
	0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, // ;.return cNew;.}
	0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x48, 0x44, 0x52, // .vec4 OverlayHDR
	0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, //  ( vec4 cBase, v
	0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, // ec4 cBlend).{.ve
	0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, // c4 cNew = step(0
	0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, // .5, cBase);.cNew
	0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, //  = max(mix(cBase
	0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, // *cBlend*2.0, 1.0
	0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, // -2.0*(1.0-cBase)
	0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, // *(1.0-cBlend), c
	0x4e, 0x65, 0x77, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, // New), vec4(0.,0.
	0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // ,0.,0.));.return
	0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, //  cNew;.}.vec3 co
	0x73, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x5f, 0x73, 0x61, 0x6d, // s_hemisphere_sam
	0x70, 0x6c, 0x65, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x66, // ple( vec2 t).{.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x68, 0x69, 0x20, 0x3d, 0x20, 0x74, 0x2e, 0x79, 0x20, 0x2a, // loat phi = t.y *
	0x20, 0x28, 0x32, 0x2e, 0x30, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, //  (2.0*3.14159265
	0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, // 3589793238462643
	0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // 3832795);.float 
	0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, // cosTheta = sqrt(
	0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // 1.0 - t.x);.floa
	0x74, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, // t sinTheta = sqr
	0x74, 0x28, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x70, // t(t.x);.float sp
	0x2c, 0x63, 0x70, 0x3b, 0x0a, 0x7b, 0x73, 0x70, 0x3d, 0x73, 0x69, 0x6e, 0x28, 0x70, 0x68, 0x69, // ,cp;.{sp=sin(phi
	0x29, 0x3b, 0x63, 0x70, 0x3d, 0x63, 0x6f, 0x73, 0x28, 0x70, 0x68, 0x69, 0x29, 0x3b, 0x7d, 0x3b, // );cp=cos(phi);};
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x63, 0x70, 0x20, // .return vec3(cp 
	0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x63, 0x6f, 0x73, 0x54, // * sinTheta, cosT
	0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x73, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, // heta, sp * sinTh
	0x65, 0x74, 0x61, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x6f, 0x74, // eta);.}.vec3 rot
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x70, // ate_to_vector_up
	0x70, 0x65, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x76, // per( vec3 vec, v
	0x65, 0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, // ec3 normal).{.if
	0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x3e, 0x20, 0x2d, 0x30, 0x2e, 0x39, // (normal.y > -0.9
	0x39, 0x39, 0x39, 0x39, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x20, // 9999).{.float h 
	0x3d, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x28, 0x31, 0x2e, 0x30, 0x2b, 0x6e, 0x6f, 0x72, 0x6d, 0x61, // = 1.0/(1.0+norma
	0x6c, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x20, 0x3d, // l.y);.float hz =
	0x20, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, //  h*normal.z;.flo
	0x61, 0x74, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x3d, 0x20, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, // at hzx = hz*norm
	0x61, 0x6c, 0x2e, 0x78, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, // al.x;.return vec
	0x33, 0x28, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, // 3(.vec.x * (norm
	0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, // al.y+hz*normal.z
	0x29, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, // ) + vec.y * norm
	0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x68, // al.x - vec.z * h
	0x7a, 0x78, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, // zx,.vec.y * norm
	0x61, 0x6c, 0x2e, 0x79, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x6e, // al.y - vec.x * n
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, // ormal.x - vec.z 
	0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, // * normal.z,.vec.
	0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x20, 0x2d, 0x20, 0x76, // y * normal.z - v
	0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, // ec.x * hzx + vec
	0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, // .z * (normal.y+h
	0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, // *normal.x*normal
	0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x72, 0x65, 0x74, // .x));.}.else ret
	0x75, 0x72, 0x6e, 0x20, 0x2d, 0x76, 0x65, 0x63, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, // urn -vec;.}.unif
	0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // orm vec4 Stereo_
	0x53, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // Saturation;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // orm vec4 Stereo_
	0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x3b, 0x0a, 0x75, 0x6e, // MS_ZPD_YAxis;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x20, // iform sampler2D 
	0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x3b, 0x0a, 0x75, // tex_stereo_fb;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, // niform sampler2D
	0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, //  tex_stereo_dept
	0x68, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // h;.uniform vec4 
	0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, // w_h_height;.vec3
	0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x28, //  gatherEyeColor(
	0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x69, 0x73, 0x4c, // vec2 u, bool isL
	0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x79, 0x61, 0x78, 0x69, // eft).{.bool yaxi
	0x73, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, // s = (Stereo_MS_Z
	0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x7a, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, // PD_YAxis.z != 0.
	0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, // );.float MaxSepa
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // ration = (Stereo
	0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, // _MS_ZPD_YAxis.x)
	0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, 0x0a, // ;.if (isLeft).{.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, // float lminDepth 
	0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // = min(min(textur
	0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // eLod(tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, // depth, u + (yaxi
	0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, // s ? vec2(0.0, 0.
	0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // 500 * MaxSeparat
	0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, // ion) : vec2(0.50
	0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, // 0 * MaxSeparatio
	0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, // n, 0.0)), 0.0).x
	0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, // ,.textureLod(tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, // _stereo_depth, u
	0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, //  + (yaxis ? vec2
	0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, // (0.0, 0.666 * Ma
	0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, // xSeparation) : v
	0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, // ec2(0.666 * MaxS
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, // eparation, 0.0))
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, // , 0.0).x),.textu
	0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // reLod(tex_stereo
	0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, // _depth, u + (yax
	0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, // is ? vec2(0.0, M
	0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, // axSeparation) : 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // vec2( MaxSeparat
	0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // ion, 0.0)), 0.0)
	0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x70, 0x61, 0x72, 0x61, // .x);.float lpara
	0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, // llax = max(0.0, 
	0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, // w_h_height.w + M
	0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, // axSeparation * (
	0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, // 1.0 - 1.0 / (0.5
	0x20, 0x2b, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, //  + lminDepth * (
	0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, // 1.0 / (Stereo_MS
	0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, // _ZPD_YAxis.y) - 
	0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // 0.5))));.return 
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, // textureLod(tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, // tereo_fb, u + (y
	0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, // axis ? vec2(0.0,
	0x20, 0x2d, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, //  -lparallax) : v
	0x65, 0x63, 0x32, 0x28, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, // ec2(lparallax, 0
	0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, // .0)), 0.0).xyz;.
	0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, // }.else.{.float r
	0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, // minDepth = min(m
	0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, // in(textureLod(te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, // x_stereo_depth, 
	0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, // u - (yaxis ? vec
	0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, // 2(0.0, 0.500 * M
	0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, // axSeparation) : 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, // vec2(0.500 * Max
	0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // Separation, 0.0)
	0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, // ), 0.0).x,.textu
	0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // reLod(tex_stereo
	0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, // _depth, u - (yax
	0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, // is ? vec2(0.0, 0
	0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, // .666 * MaxSepara
	0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, // tion) : vec2(0.6
	0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // 66 * MaxSeparati
	0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, // on, 0.0)), 0.0).
	0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, // x),.textureLod(t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, // ex_stereo_depth,
	0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, //  u - (yaxis ? ve
	0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, // c2(0.0, MaxSepar
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, // ation) : vec2( M
	0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, // axSeparation, 0.
	0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, // 0)), 0.0).x);.fl
	0x6f, 0x61, 0x74, 0x20, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, // oat rparallax = 
	0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, // max(0.0, w_h_hei
	0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, // ght.w + MaxSepar
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, // ation * (1.0 - 1
	0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x6d, 0x69, 0x6e, // .0 / (0.5 + rmin
	0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, // Depth * (1.0 / (
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, // Stereo_MS_ZPD_YA
	0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, // xis.y) - 0.5))))
	0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // ;.return texture
	0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, // Lod(tex_stereo_f
	0x62, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, // b, u - (yaxis ? 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x72, 0x70, 0x61, 0x72, 0x61, // vec2(0.0, -rpara
	0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x72, 0x70, 0x61, // llax) : vec2(rpa
	0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, // rallax, 0.0)), 0
	0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, // .0).xyz;.}.}.voi
	0x64, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x69, 0x67, 0x68, // d gatherLeftRigh
	0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, // tColors(vec2 u, 
	0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x63, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, // out vec3 lcol, o
	0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, // ut vec3 rcol).{.
	0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, // bool yaxis = (St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, // ereo_MS_ZPD_YAxi
	0x73, 0x2e, 0x7a, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // s.z != 0.);.floa
	0x74, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, // t MaxSeparation 
	0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, // = (Stereo_MS_ZPD
	0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // _YAxis.x);.float
	0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, //  lminDepth = min
	0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, // (min(textureLod(
	0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, // tex_stereo_depth
	0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, // , u + (yaxis ? v
	0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, // ec2(0.0, 0.500 *
	0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, //  MaxSeparation) 
	0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, // : vec2(0.500 * M
	0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, // axSeparation, 0.
	0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, // 0)), 0.0).x,.tex
	0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // tureLod(tex_ster
	0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, // eo_depth, u + (y
	0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, // axis ? vec2(0.0,
	0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, //  0.666 * MaxSepa
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, // ration) : vec2(0
	0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, // .666 * MaxSepara
	0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, // tion, 0.0)), 0.0
	0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, // ).x),.textureLod
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, // (tex_stereo_dept
	0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, // h, u + (yaxis ? 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // vec2(0.0, MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // aration) : vec2(
	0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, //  MaxSeparation, 
	0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, // 0.0)), 0.0).x);.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, // float lparallax 
	0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, // = max(0.0, w_h_h
	0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // eight.w + MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, // aration * (1.0 -
	0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x6c, 0x6d, //  1.0 / (0.5 + lm
	0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, // inDepth * (1.0 /
	0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, //  (Stereo_MS_ZPD_
	0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, // YAxis.y) - 0.5))
	0x29, 0x29, 0x3b, 0x0a, 0x6c, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, // ));.lcol = textu
	0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // reLod(tex_stereo
	0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, // _fb, u + (yaxis 
	0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x6c, 0x70, 0x61, // ? vec2(0.0, -lpa
	0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x6c, // rallax) : vec2(l
	0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, // parallax, 0.0)),
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, //  0.0).xyz;.float
	0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, //  rminDepth = min
	0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, // (min(textureLod(
	0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, // tex_stereo_depth
	0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, // , u - (yaxis ? v
	0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, // ec2(0.0, 0.500 *
	0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, //  MaxSeparation) 
	0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, // : vec2(0.500 * M
	0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, // axSeparation, 0.
	0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, // 0)), 0.0).x,.tex
	0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // tureLod(tex_ster
	0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, // eo_depth, u - (y
	0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, // axis ? vec2(0.0,
	0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, //  0.666 * MaxSepa
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, // ration) : vec2(0
	0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, // .666 * MaxSepara
	0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, // tion, 0.0)), 0.0
	0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, // ).x),.textureLod
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, // (tex_stereo_dept
	0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, // h, u - (yaxis ? 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // vec2(0.0, MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // aration) : vec2(
	0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, //  MaxSeparation, 
	0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, // 0.0)), 0.0).x);.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, // float rparallax 
	0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, // = max(0.0, w_h_h
	0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // eight.w + MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, // aration * (1.0 -
	0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x6d, //  1.0 / (0.5 + rm
	0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, // inDepth * (1.0 /
	0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, //  (Stereo_MS_ZPD_
	0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, // YAxis.y) - 0.5))
	0x29, 0x29, 0x3b, 0x0a, 0x72, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, // ));.rcol = textu
	0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // reLod(tex_stereo
	0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, // _fb, u - (yaxis 
	0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x72, 0x70, 0x61, // ? vec2(0.0, -rpa
	0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x72, // rallax) : vec2(r
	0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, // parallax, 0.0)),
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, //  0.0).xyz;.}.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // form mat4 Stereo
	0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // _LeftMat;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, // m mat4 Stereo_Ri
	0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // ghtMat;.uniform 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, // vec4 Stereo_Left
	0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, // Luminance_Gamma;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, // .uniform vec4 St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, // ereo_RightLumina
	0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x3b, 0x0a, 0x76, 0x6f, // nce_DynDesat;.vo
	0x69, 0x64, 0x20, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x65, 0x73, 0x61, 0x74, 0x41, // id DynamicDesatA
	0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, // naglyph( vec3 lC
	0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, // ol, vec3 rCol, o
	0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, // ut vec3 lDesatCo
	0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x44, 0x65, 0x73, // l, out vec3 rDes
	0x61, 0x74, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, // atCol).{.float l
	0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, // eft2LeftLum = do
	0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, // t(lCol, Stereo_L
	0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, // eftLuminance_Gam
	0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, // ma.xyz);.float l
	0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, // eft2RightLum = d
	0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // ot(lCol, Stereo_
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, // RightLuminance_D
	0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, // ynDesat.xyz);.fl
	0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, // oat right2LeftLu
	0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, // m = dot(rCol, St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, // ereo_LeftLuminan
	0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, // ce_Gamma.xyz);.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, // loat right2Right
	0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // Lum = dot(rCol, 
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, // Stereo_RightLumi
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x78, // nance_DynDesat.x
	0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x4c, // yz);.float leftL
	0x75, 0x6d, 0x20, 0x3d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, // um = left2LeftLu
	0x6d, 0x20, 0x2b, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // m + left2RightLu
	0x6d, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // m;.float rightLu
	0x6d, 0x20, 0x3d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, // m = right2LeftLu
	0x6d, 0x20, 0x2b, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, // m + right2RightL
	0x75, 0x6d, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, // um;.float leftDe
	0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, // sat = Stereo_Rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, // htLuminance_DynD
	0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x6c, 0x65, // esat.w * abs((le
	0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x6c, 0x65, 0x66, // ft2LeftLum - lef
	0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, // t2RightLum) / (l
	0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, // eftLum + 0.0001)
	0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, // );.float rightDe
	0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, // sat = Stereo_Rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, // htLuminance_DynD
	0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x72, 0x69, // esat.w * abs((ri
	0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x72, 0x69, // ght2LeftLum - ri
	0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, // ght2RightLum) / 
	0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, // (rightLum + 0.00
	0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, // 01));.lDesatCol 
	0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, // = mix(lCol, vec3
	0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, // _splat(leftLum),
	0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x72, 0x44, 0x65, //  leftDesat);.rDe
	0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x72, 0x43, 0x6f, // satCol = mix(rCo
	0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x72, 0x69, // l, vec3_splat(ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, // ghtLum), rightDe
	0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x4c, 0x69, 0x6e, // sat);.}.vec3 Lin
	0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, 0x63, // earAnaglyph( vec
	0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, // 3 lCol, vec3 rCo
	0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, // l).{.vec3 color 
	0x3d, 0x20, 0x28, 0x28, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, // = (( (vec4(lCol,
	0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, //  1.)) * (Stereo_
	0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x20, 0x28, // LeftMat) ) + ( (
	0x76, 0x65, 0x63, 0x34, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, // vec4(rCol, 1.)) 
	0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, // * (Stereo_RightM
	0x61, 0x74, 0x29, 0x20, 0x29, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // at) )).rgb;.retu
	0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, // rn color;.}.unif
	0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // orm vec4 Stereo_
	0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, 0x6e, // DeghostGamma;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // iform mat4 Stere
	0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3b, // o_DeghostFilter;
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x6e, 0x61, // .vec3 DeghostAna
	0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, // glyph( vec3 lCol
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x76, // , vec3 rCol).{.v
	0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, 0x6e, 0x65, // ec3 color = Line
	0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, // arAnaglyph(lCol,
	0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, //  rCol);.return (
	0x20, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x53, 0x74, 0x65, //  (pow(color, Ste
	0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, // reo_DeghostGamma
	0x2e, 0x72, 0x67, 0x62, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x53, // .rgb)) * (mat3(S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, // tereo_DeghostFil
	0x74, 0x65, 0x72, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, // ter[0].xyz, Ster
	0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, // eo_DeghostFilter
	0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // [1].xyz, Stereo_
	0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x32, 0x5d, // DeghostFilter[2]
	0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, 0x64, // .xyz)) );.}.void
	0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, //  main().{.vec3 l
	0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x3b, 0x0a, 0x67, 0x61, 0x74, 0x68, 0x65, // Col, rCol;.gathe
	0x72, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, // rLeftRightColors
	0x28, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2c, 0x20, 0x6c, 0x43, // (v_texcoord0, lC
	0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x6c, 0x43, 0x6f, 0x6c, 0x20, // ol, rCol);.lCol 
	0x3d, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, // = pow(lCol, vec3
	0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, // (Stereo_LeftLumi
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, 0x53, // nance_Gamma.w, S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, // tereo_LeftLumina
	0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, 0x53, 0x74, 0x65, // nce_Gamma.w, Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, // reo_LeftLuminanc
	0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x43, 0x6f, // e_Gamma.w));.rCo
	0x6c, 0x20, 0x3d, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, // l = pow(rCol, ve
	0x63, 0x33, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, // c3(Stereo_LeftLu
	0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, // minance_Gamma.w,
	0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, //  Stereo_LeftLumi
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, 0x53, // nance_Gamma.w, S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, // tereo_LeftLumina
	0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x29, 0x29, 0x3b, 0x0a, 0x76, // nce_Gamma.w));.v
	0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, 0x6e, 0x65, // ec3 color = Line
	0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, // arAnaglyph(lCol,
	0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, //  rCol);.bgfx_Fra
	0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x70, 0x6f, // gColor = vec4(po
	0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x31, 0x2e, // w(color, vec3(1.
	0x2f, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, // /Stereo_LeftLumi
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, 0x31, // nance_Gamma.w, 1
	0x2e, 0x2f, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // ./Stereo_LeftLum
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, // inance_Gamma.w, 
	0x31, 0x2e, 0x2f, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, // 1./Stereo_LeftLu
	0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x29, // minance_Gamma.w)
	0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x00,                         // ), 1.0);.}..
};
static const uint8_t fs_pp_stereo_anaglyph_lin_gamma_nodesat_glsl[11310] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x2c, // FSH.o.><.......,
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x34, 0x34, 0x30, 0x0a, 0x6f, // ..#version 440.o
	0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, // ut vec4 bgfx_Fra
	0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, // gColor;.#define 
	0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x62, 0x67, 0x66, // gl_FragColor bgf
	0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x0a, 0x23, 0x64, 0x65, 0x66, // x_FragColor.#def
	0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x20, 0x20, 0x20, // ine texture2D   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x0a, 0x23, //        texture.#
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, // define texture2D
	0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // Lod       textur
	0x65, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, // eLod.#define tex
	0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ture2DGrad      
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, // textureGrad.#def
	0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, // ine texture2DPro
	0x6a, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, // jLod   texturePr
	0x6f, 0x6a, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, // ojLod.#define te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, 0x20, // xture2DProjGrad 
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, //  textureProjGrad
	0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // .#define texture
	0x43, 0x75, 0x62, 0x65, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, // CubeLod     text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, // ureLod.#define t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, // extureCubeGrad  
	0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, //   textureGrad.#d
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x33, 0x44, 0x20, // efine texture3D 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, //          texture
	0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // .#define texture
	0x32, 0x44, 0x4c, 0x6f, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x20, 0x74, 0x65, 0x78, 0x74, // 2DLodOffset text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x0a, 0x23, 0x64, 0x65, // ureLodOffset.#de
	0x66, 0x69, 0x6e, 0x65, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x69, // fine attribute i
	0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, // n.#define varyin
	0x67, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x62, 0x67, 0x66, // g in.#define bgf
	0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, // xShadow2D(_sampl
	0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, // er, _coord)     
	0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, // vec4_splat(textu
	0x72, 0x65, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, // re(_sampler, _co
	0x6f, 0x72, 0x64, 0x29, 0x20, 0x29, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x62, // ord) ).#define b
	0x67, 0x66, 0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x28, // gfxShadow2DProj(
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, // _sampler, _coord
	0x29, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, // ) vec4_splat(tex
	0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // tureProj(_sample
	0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x29, 0x0a, 0x76, 0x61, 0x72, // r, _coord) ).var
	0x79, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, // ying vec2 v_texc
	0x6f, 0x6f, 0x72, 0x64, 0x30, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, // oord0;.vec3 inst
	0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, // Mul(vec3 _vec, m
	0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // at3 _mtx) { retu
	0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, // rn ( (_vec) * (_
	0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, // mtx) ); }.vec3 i
	0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, // nstMul(mat3 _mtx
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, // , vec3 _vec) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, // eturn ( (_mtx) *
	0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, //  (_vec) ); }.vec
	0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, // 4 instMul(vec4 _
	0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, // vec, mat4 _mtx) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, // { return ( (_vec
	0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, // ) * (_mtx) ); }.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, // vec4 instMul(mat
	0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, // 4 _mtx, vec4 _ve
	0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, // c) { return ( (_
	0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, // mtx) * (_vec) );
	0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, 0x70, 0x28, 0x66, 0x6c, 0x6f, //  }.float rcp(flo
	0x61, 0x74, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // at _a) { return 
	0x31, 0x2e, 0x30, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, // 1.0/_a; }.vec2 r
	0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // cp(vec2 _a) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, // turn vec2(1.0)/_
	0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, // a; }.vec3 rcp(ve
	0x63, 0x33, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // c3 _a) { return 
	0x76, 0x65, 0x63, 0x33, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, // vec3(1.0)/_a; }.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x61, // vec4 rcp(vec4 _a
	0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, // ) { return vec4(
	0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, // 1.0)/_a; }.vec2 
	0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, // vec2_splat(float
	0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, //  _x) { return ve
	0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, // c2(_x, _x); }.ve
	0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, // c3 vec3_splat(fl
	0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // oat _x) { return
	0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, //  vec3(_x, _x, _x
	0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, // ); }.vec4 vec4_s
	0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, // plat(float _x) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, //  return vec4(_x,
	0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, //  _x, _x, _x); }.
	0x75, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, // uvec2 uvec2_spla
	0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // t(uint _x) { ret
	0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, // urn uvec2(_x, _x
	0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, // ); }.uvec3 uvec3
	0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, // _splat(uint _x) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, // { return uvec3(_
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, // x, _x, _x); }.uv
	0x65, 0x63, 0x34, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, // ec4 uvec4_splat(
	0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, // uint _x) { retur
	0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, // n uvec4(_x, _x, 
	0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, // _x, _x); }.mat4 
	0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, // mtxFromRows(vec4
	0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, //  _0, vec4 _1, ve
	0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, // c4 _2, vec4 _3).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, // {.return transpo
	0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, // se(mat4(_0, _1, 
	0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, // _2, _3) );.}.mat
	0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, // 4 mtxFromCols(ve
	0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, // c4 _0, vec4 _1, 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, // vec4 _2, vec4 _3
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x28, // ).{.return mat4(
	0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x3b, // _0, _1, _2, _3);
	0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, // .}.mat3 mtxFromR
	0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, // ows(vec3 _0, vec
	0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, // 3 _1, vec3 _2).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, // .return transpos
	0x65, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, // e(mat3(_0, _1, _
	0x32, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, // 2) );.}.mat3 mtx
	0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, // FromCols(vec3 _0
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // , vec3 _1, vec3 
	0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, // _2).{.return mat
	0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x3b, 0x0a, 0x7d, // 3(_0, _1, _2);.}
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, // .uniform vec4 u_
	0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // viewRect;.unifor
	0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x54, 0x65, 0x78, // m vec4 u_viewTex
	0x65, 0x6c, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, // el;.uniform mat4
	0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, //  u_view;.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x3b, //  mat4 u_invView;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, // .uniform mat4 u_
	0x70, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, // proj;.uniform ma
	0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, // t4 u_invProj;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, // iform mat4 u_vie
	0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, // wProj;.uniform m
	0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, // at4 u_invViewPro
	0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, // j;.uniform mat4 
	0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, 0x3b, 0x0a, 0x75, 0x6e, 0x69, // u_model[32];.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, // form mat4 u_mode
	0x6c, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, // lView;.uniform m
	0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x50, // at4 u_modelViewP
	0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, // roj;.uniform vec
	0x34, 0x20, 0x75, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x66, 0x34, 0x3b, 0x0a, 0x66, // 4 u_alphaRef4;.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // loat sqr( float 
	0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, // v).{.return v*v;
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, // .}.vec2 sqr( vec
	0x32, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, // 2 v).{.return v*
	0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x76, // v;.}.vec3 sqr( v
	0x65, 0x63, 0x33, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // ec3 v).{.return 
	0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6d, 0x75, 0x6c, 0x5f, // v*v;.}.vec3 mul_
	0x77, 0x31, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, // w1( vec3 v, mat4
	0x20, 0x6d, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2e, 0x78, //  m).{.return v.x
	0x2a, 0x6d, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x79, // *m[0].xyz + (v.y
	0x2a, 0x6d, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x7a, // *m[1].xyz + (v.z
	0x2a, 0x6d, 0x5b, 0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x6d, 0x5b, 0x33, 0x5d, // *m[2].xyz + m[3]
	0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // .xyz));.}.float 
	0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, // acos_approx_divP
	0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, // I( float v).{.fl
	0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, // oat x = abs(v);.
	0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, // if(1. - x <= 0.0
	0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, // 0006103515625).r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, // eturn (v >= 0.) 
	0x3f, 0x20, 0x30, 0x2e, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // ? 0. : 1.;.float
	0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, //  res = ((-0.1559
	0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, // 72/3.14159265358
	0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, // 9793238462643383
	0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, // 2795) * x + (1.5
	0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, // 6467/3.141592653
	0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, // 5897932384626433
	0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, // 832795) ) * sqrt
	0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // (1. - x);.return
	0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x72, 0x65, 0x73, //  (v >= 0.) ? res
	0x20, 0x3a, 0x20, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, //  : 1. - res;.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, // loat atan2_appro
	0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // x_div2PI( float 
	0x79, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, // y, float x).{.fl
	0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, // oat abs_y = abs(
	0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, // y);.float abs_x 
	0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x78, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x61, 0x62, 0x73, // = abs(x);.if(abs
	0x5f, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, // _x <= 0.00006103
	0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x20, 0x26, 0x26, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, // 515625 && abs_y 
	0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, // <= 0.00006103515
	0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x30, 0x2e, 0x3b, 0x0a, // 625).return 0.;.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, // float r = (abs_x
	0x20, 0x2d, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x61, 0x62, 0x73, //  - abs_y) / (abs
	0x5f, 0x78, 0x20, 0x2b, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, // _x + abs_y);.flo
	0x61, 0x74, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, // at angle = ((x <
	0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x28, 0x33, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x20, 0x3a, //  0.) ? (3./8.) :
	0x20, 0x28, 0x31, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x29, 0x0a, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x32, //  (1./8.)).+ (0.2
	0x31, 0x31, 0x38, 0x36, 0x38, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, // 11868 /(2.*3.141
	0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, // 5926535897932384
	0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, // 626433832795) * 
	0x72, 0x20, 0x2a, 0x20, 0x72, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x39, 0x38, 0x37, 0x33, 0x30, 0x35, // r * r - 0.987305
	0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, //  /(2.*3.14159265
	0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, // 3589793238462643
	0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x78, 0x20, // 3832795)) * ((x 
	0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x72, 0x20, 0x3a, 0x20, 0x72, 0x29, 0x3b, // < 0.) ? -r : r);
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x79, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, // .return (y < 0.)
	0x20, 0x3f, 0x20, 0x2d, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3a, 0x20, 0x61, 0x6e, 0x67, 0x6c, //  ? -angle : angl
	0x65, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x73, 0x69, 0x6e, 0x5f, // e;.}.float asin_
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, // approx_divPI( fl
	0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, // oat v).{.float x
	0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, //  = abs(v);.if(1.
	0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, //  - x <= 0.000061
	0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // 03515625).return
	0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, //  (v >= 0.) ? 0.5
	0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, //  : -0.5;.float r
	0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, // es = ((-0.155972
	0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, // /3.1415926535897
	0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, // 9323846264338327
	0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, // 95) * x + (1.564
	0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, // 67/3.14159265358
	0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, // 9793238462643383
	0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, // 2795) ) * sqrt(1
	0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // . - x);.return (
	0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x2d, // v >= 0.) ? 0.5 -
	0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x65, //  res : -0.5 + re
	0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x61, 0x79, 0x5f, 0x74, 0x6f, // s;.}.vec2 ray_to
	0x5f, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, // _equirectangular
	0x5f, 0x75, 0x76, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x61, 0x79, 0x29, 0x0a, 0x7b, // _uv( vec3 ray).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x0a, 0x30, 0x2e, // .return vec2(.0.
	0x35, 0x20, 0x2b, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, // 5 + atan2_approx
	0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x79, 0x2c, 0x20, 0x72, // _div2PI(ray.y, r
	0x61, 0x79, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, // ay.x),.acos_appr
	0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x7a, 0x29, 0x29, // ox_divPI(ray.z))
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, // ;.}.float InvsRG
	0x42, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, // B( float color).
	0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, // {.if (color <= 0
	0x2e, 0x30, 0x34, 0x30, 0x34, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, // .04045).return c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x32, 0x2e, 0x39, // olor * (1.0/12.9
	0x32, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // 2);.else.return 
	0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, // pow(color * (1.0
	0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x35, 0x35, // /1.055) + (0.055
	0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x29, 0x3b, 0x0a, 0x7d, // /1.055), 2.4);.}
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, // .float InvRec709
	0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, // ( float color).{
	0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, // .if (color <= 0.
	0x30, 0x38, 0x31, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // 081).return colo
	0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x34, 0x2e, 0x35, 0x29, 0x3b, 0x0a, 0x65, // r * (1.0/4.5);.e
	0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, // lse.return pow(c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x39, // olor * (1.0/1.09
	0x39, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x2f, 0x31, 0x2e, 0x30, 0x39, // 9) + (0.099/1.09
	0x39, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x3b, 0x0a, 0x7d, // 9), 1.0/0.45);.}
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, // .float InvGamma(
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, //  float color).{.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, // return InvsRGB(c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, // olor);.}.vec3 In
	0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, // vGamma( vec3 col
	0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, // or).{.return vec
	0x33, 0x28, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // 3(InvGamma(color
	0x2e, 0x78, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, // .x),InvGamma(col
	0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, // or.y),InvGamma(c
	0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, // olor.z));.}.vec3
	0x20, 0x49, 0x6e, 0x76, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, //  InvToneMap( vec
	0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // 3 color).{.float
	0x20, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x30, 0x2e, 0x35, 0x2f, 0x30, //  inv_2bh = 0.5/0
	0x2e, 0x32, 0x35, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x68, 0x20, 0x3d, 0x20, // .25;.float bh = 
	0x34, 0x2e, 0x30, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2d, 0x20, 0x32, 0x2e, 0x30, 0x3b, 0x0a, // 4.0*0.25 - 2.0;.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2d, 0x20, // return (color - 
	0x31, 0x2e, 0x30, 0x20, 0x2b, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // 1.0 + sqrt(color
	0x2a, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x20, 0x62, 0x68, 0x29, 0x20, 0x2b, 0x20, // *(color + bh) + 
	0x31, 0x2e, 0x30, 0x29, 0x29, 0x2a, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x3b, 0x0a, 0x7d, // 1.0))*inv_2bh;.}
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x20, 0x66, 0x6c, 0x6f, // .float sRGB( flo
	0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, // at f).{.float s;
	0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x33, 0x31, // .if (f <= 0.0031
	0x33, 0x30, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x20, 0x2a, // 308).s = 12.92 *
	0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, //  f;.else.s = 1.0
	0x35, 0x35, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, // 55 * pow(f, 1.0/
	0x32, 0x2e, 0x34, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x3b, 0x0a, 0x72, 0x65, // 2.4) - 0.055;.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // turn s;.}.float 
	0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, // Rec709( float f)
	0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, // .{.float s;.if (
	0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, // f <= 0.018).s = 
	0x34, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, // 4.5 * f;.else.s 
	0x3d, 0x20, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, // = 1.099 * pow(f,
	0x20, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x3b, 0x0a, //  0.45) - 0.099;.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // return s;.}.floa
	0x74, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // t FBGamma( float
	0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, //  color).{.return
	0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, //  sRGB(color);.}.
	0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, // vec2 FBGamma( ve
	0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, // c2 color).{.retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, // rn vec2(FBGamma(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, // color.x),FBGamma
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // (color.y));.}.ve
	0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, // c3 FBGamma( vec3
	0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, //  color).{.return
	0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, //  vec3(FBGamma(co
	0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, // lor.x),FBGamma(c
	0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, // olor.y),FBGamma(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // color.z));.}.vec
	0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x32, 0x32, 0x28, 0x20, 0x76, 0x65, 0x63, // 3 FBGamma22( vec
	0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // 3 color).{.retur
	0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // n vec3(pow(color
	0x2e, 0x78, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, // .x, 1.0/2.2),pow
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, // (color.y, 1.0/2.
	0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x2c, 0x20, // 2),pow(color.z, 
	0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // 1.0/2.2));.}.flo
	0x61, 0x74, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x66, 0x6c, // at FBToneMap( fl
	0x6f, 0x61, 0x74, 0x20, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // oat l).{.return 
	0x6c, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, // l * ((l*0.25 + 1
	0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, // .0) / (l + 1.0))
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, // ;.}.vec2 FBToneM
	0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, // ap( vec2 color).
	0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, // {.float l = dot(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, // color,vec2(0.176
	0x32, 0x30, 0x34, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, // 204+0.0108109*0.
	0x35, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, // 5,0.812985+0.010
	0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // 8109*0.5));.retu
	0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, // rn color * ((l*0
	0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, // .25 + 1.0) / (l 
	0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // + 1.0));.}.vec3 
	0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // FBToneMap( vec3 
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, // color).{.float l
	0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, //  = dot(color,vec
	0x33, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, // 3(0.176204,0.812
	0x39, 0x38, 0x35, 0x2c, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x29, 0x29, 0x3b, // 985,0.0108109));
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, // .return color * 
	0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, // ((l*0.25 + 1.0) 
	0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // / (l + 1.0));.}.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x28, 0x20, 0x76, // vec4 Additive( v
	0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // ec4 cBase, vec4 
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, // cBlend, float pe
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // rcent).{.return 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2b, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, // cBase + cBlend*p
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, // ercent;.}.vec3 S
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, // creen ( vec3 cBa
	0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, // se, vec3 cBlend)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, // .{.return 1.0 - 
	0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, // (1.0 - cBase) * 
	0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, // (1.0 - cBlend);.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x20, // }.vec4 Screen ( 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // vec4 cBase, vec4
	0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, //  cBlend).{.retur
	0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, // n 1.0 - (1.0 - c
	0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, // Base) * (1.0 - c
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, // Blend);.}.vec3 S
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // creenHDR ( vec3 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, // cBase, vec3 cBle
	0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, // nd).{.return max
	0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, // (1.0 - (1.0 - cB
	0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, // ase) * (1.0 - cB
	0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x2c, 0x30, // lend), vec3(0.,0
	0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, // .,0.));.}.vec4 S
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // creenHDR ( vec4 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, // cBase, vec4 cBle
	0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, // nd).{.return max
	0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, // (1.0 - (1.0 - cB
	0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, // ase) * (1.0 - cB
	0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, // lend), vec4(0.,0
	0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // .,0.,0.));.}.vec
	0x34, 0x20, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, // 4 Multiply ( vec
	0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // 4 cBase, vec4 cB
	0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, // lend, float perc
	0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, // ent).{.return cB
	0x61, 0x73, 0x65, 0x20, 0x2a, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, // ase * cBlend*per
	0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, // cent;.}.vec4 Ove
	0x72, 0x6c, 0x61, 0x79, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, // rlay ( vec4 cBas
	0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, // e, vec4 cBlend).
	0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, // {.vec4 cNew = st
	0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, // ep(0.5, cBase);.
	0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, // cNew = mix(cBase
	0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, // *cBlend*2.0, 1.0
	0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, // -2.0*(1.0-cBase)
	0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, // *(1.0-cBlend), c
	0x4e, 0x65, 0x77, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, // New);.return cNe
	0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, // w;.}.vec4 Overla
	0x79, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, // yHDR ( vec4 cBas
	0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, // e, vec4 cBlend).
	0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, // {.vec4 cNew = st
	0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, // ep(0.5, cBase);.
	0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x6d, 0x69, 0x78, 0x28, 0x63, // cNew = max(mix(c
	0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, // Base*cBlend*2.0,
	0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, //  1.0-2.0*(1.0-cB
	0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, // ase)*(1.0-cBlend
	0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, // ), cNew), vec4(0
	0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, // .,0.,0.,0.));.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // turn cNew;.}.vec
	0x33, 0x20, 0x63, 0x6f, 0x73, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, // 3 cos_hemisphere
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x29, // _sample( vec2 t)
	0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x68, 0x69, 0x20, 0x3d, 0x20, 0x74, // .{.float phi = t
	0x2e, 0x79, 0x20, 0x2a, 0x20, 0x28, 0x32, 0x2e, 0x30, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, // .y * (2.0*3.1415
	0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, // 9265358979323846
	0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x3b, 0x0a, 0x66, 0x6c, // 26433832795);.fl
	0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, // oat cosTheta = s
	0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, // qrt(1.0 - t.x);.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, // float sinTheta =
	0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, //  sqrt(t.x);.floa
	0x74, 0x20, 0x73, 0x70, 0x2c, 0x63, 0x70, 0x3b, 0x0a, 0x7b, 0x73, 0x70, 0x3d, 0x73, 0x69, 0x6e, // t sp,cp;.{sp=sin
	0x28, 0x70, 0x68, 0x69, 0x29, 0x3b, 0x63, 0x70, 0x3d, 0x63, 0x6f, 0x73, 0x28, 0x70, 0x68, 0x69, // (phi);cp=cos(phi
	0x29, 0x3b, 0x7d, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, // );};.return vec3
	0x28, 0x63, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, // (cp * sinTheta, 
	0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x73, 0x70, 0x20, 0x2a, 0x20, 0x73, // cosTheta, sp * s
	0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, // inTheta);.}.vec3
	0x20, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, //  rotate_to_vecto
	0x72, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, // r_upper( vec3 ve
	0x63, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x29, 0x0a, // c, vec3 normal).
	0x7b, 0x0a, 0x69, 0x66, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x3e, 0x20, // {.if(normal.y > 
	0x2d, 0x30, 0x2e, 0x39, 0x39, 0x39, 0x39, 0x39, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // -0.99999).{.floa
	0x74, 0x20, 0x68, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x28, 0x31, 0x2e, 0x30, 0x2b, 0x6e, // t h = 1.0/(1.0+n
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // ormal.y);.float 
	0x68, 0x7a, 0x20, 0x3d, 0x20, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x3b, // hz = h*normal.z;
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x3d, 0x20, 0x68, 0x7a, 0x2a, // .float hzx = hz*
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // normal.x;.return
	0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x28, //  vec3(.vec.x * (
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, // normal.y+hz*norm
	0x61, 0x6c, 0x2e, 0x7a, 0x29, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, // al.z) + vec.y * 
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, // normal.x - vec.z
	0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, //  * hzx,.vec.y * 
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, // normal.y - vec.x
	0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, //  * normal.x - ve
	0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x2c, 0x0a, // c.z * normal.z,.
	0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, // vec.y * normal.z
	0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x2b, //  - vec.x * hzx +
	0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, //  vec.z * (normal
	0x2e, 0x79, 0x2b, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x2a, 0x6e, 0x6f, // .y+h*normal.x*no
	0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, // rmal.x));.}.else
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x2d, 0x76, 0x65, 0x63, 0x3b, 0x0a, 0x7d, 0x0a, //  return -vec;.}.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, // uniform vec4 Ste
	0x72, 0x65, 0x6f, 0x5f, 0x53, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x0a, // reo_Saturation;.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, // uniform vec4 Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, // reo_MS_ZPD_YAxis
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // ;.uniform sample
	0x72, 0x32, 0x44, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, // r2D tex_stereo_f
	0x62, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, // b;.uniform sampl
	0x65, 0x72, 0x32, 0x44, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // er2D tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, // depth;.uniform v
	0x65, 0x63, 0x34, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, // ec4 w_h_height;.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, // vec3 gatherEyeCo
	0x6c, 0x6f, 0x72, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, // lor(vec2 u, bool
	0x20, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x20, //  isLeft).{.bool 
	0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // yaxis = (Stereo_
	0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x7a, 0x20, 0x21, // MS_ZPD_YAxis.z !
	0x3d, 0x20, 0x30, 0x2e, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x4d, 0x61, 0x78, // = 0.);.float Max
	0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, // Separation = (St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, // ereo_MS_ZPD_YAxi
	0x73, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, // s.x);.if (isLeft
	0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, // ).{.float lminDe
	0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, // pth = min(min(te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, // xtureLod(tex_ste
	0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, // reo_depth, u + (
	0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, // yaxis ? vec2(0.0
	0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // , 0.500 * MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // aration) : vec2(
	0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, // 0.500 * MaxSepar
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, // ation, 0.0)), 0.
	0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, // 0).x,.textureLod
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, // (tex_stereo_dept
	0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, // h, u + (yaxis ? 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, // vec2(0.0, 0.666 
	0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, // * MaxSeparation)
	0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, //  : vec2(0.666 * 
	0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, // MaxSeparation, 0
	0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, // .0)), 0.0).x),.t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // extureLod(tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, // ereo_depth, u + 
	0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, // (yaxis ? vec2(0.
	0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, // 0, MaxSeparation
	0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // ) : vec2( MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, // aration, 0.0)), 
	0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, // 0.0).x);.float l
	0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, // parallax = max(0
	0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, // .0, w_h_height.w
	0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, //  + MaxSeparation
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, //  * (1.0 - 1.0 / 
	0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, // (0.5 + lminDepth
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, //  * (1.0 / (Stere
	0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, // o_MS_ZPD_YAxis.y
	0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, // ) - 0.5))));.ret
	0x75, 0x72, 0x6e, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, // urn textureLod(t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, // ex_stereo_fb, u 
	0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // + (yaxis ? vec2(
	0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, // 0.0, -lparallax)
	0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, //  : vec2(lparalla
	0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, // x, 0.0)), 0.0).x
	0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, // yz;.}.else.{.flo
	0x61, 0x74, 0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, // at rminDepth = m
	0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, // in(min(textureLo
	0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, // d(tex_stereo_dep
	0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, // th, u - (yaxis ?
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, //  vec2(0.0, 0.500
	0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, //  * MaxSeparation
	0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, // ) : vec2(0.500 *
	0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, //  MaxSeparation, 
	0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, // 0.0)), 0.0).x,.t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // extureLod(tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, // ereo_depth, u - 
	0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, // (yaxis ? vec2(0.
	0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, // 0, 0.666 * MaxSe
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, // paration) : vec2
	0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, // (0.666 * MaxSepa
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, // ration, 0.0)), 0
	0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, // .0).x),.textureL
	0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, // od(tex_stereo_de
	0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, // pth, u - (yaxis 
	0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, // ? vec2(0.0, MaxS
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, // eparation) : vec
	0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, // 2( MaxSeparation
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, // , 0.0)), 0.0).x)
	0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, // ;.float rparalla
	0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, // x = max(0.0, w_h
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, // _height.w + MaxS
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, // eparation * (1.0
	0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, //  - 1.0 / (0.5 + 
	0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, // rminDepth * (1.0
	0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, //  / (Stereo_MS_ZP
	0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, // D_YAxis.y) - 0.5
	0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x65, 0x78, // ))));.return tex
	0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // tureLod(tex_ster
	0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, // eo_fb, u - (yaxi
	0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x72, // s ? vec2(0.0, -r
	0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, // parallax) : vec2
	0x28, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // (rparallax, 0.0)
	0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x7d, // ), 0.0).xyz;.}.}
	0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, // .void gatherLeft
	0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x28, 0x76, 0x65, 0x63, 0x32, // RightColors(vec2
	0x20, 0x75, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x63, 0x6f, //  u, out vec3 lco
	0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x6f, 0x6c, // l, out vec3 rcol
	0x29, 0x0a, 0x7b, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3d, // ).{.bool yaxis =
	0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, //  (Stereo_MS_ZPD_
	0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x7a, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x3b, 0x0a, // YAxis.z != 0.);.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // float MaxSeparat
	0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, // ion = (Stereo_MS
	0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, // _ZPD_YAxis.x);.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, // loat lminDepth =
	0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, //  min(min(texture
	0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, // Lod(tex_stereo_d
	0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, // epth, u + (yaxis
	0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, //  ? vec2(0.0, 0.5
	0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // 00 * MaxSeparati
	0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, // on) : vec2(0.500
	0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, //  * MaxSeparation
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, // , 0.0)), 0.0).x,
	0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, // .textureLod(tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, // stereo_depth, u 
	0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // + (yaxis ? vec2(
	0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, // 0.0, 0.666 * Max
	0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, // Separation) : ve
	0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, // c2(0.666 * MaxSe
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, // paration, 0.0)),
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, //  0.0).x),.textur
	0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // eLod(tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, // depth, u + (yaxi
	0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, // s ? vec2(0.0, Ma
	0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, // xSeparation) : v
	0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // ec2( MaxSeparati
	0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, // on, 0.0)), 0.0).
	0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, // x);.float lparal
	0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, // lax = max(0.0, w
	0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, // _h_height.w + Ma
	0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, // xSeparation * (1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, // .0 - 1.0 / (0.5 
	0x2b, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, // + lminDepth * (1
	0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, // .0 / (Stereo_MS_
	0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, // ZPD_YAxis.y) - 0
	0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x6c, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, // .5))));.lcol = t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // extureLod(tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, // ereo_fb, u + (ya
	0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, // xis ? vec2(0.0, 
	0x2d, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, // -lparallax) : ve
	0x63, 0x32, 0x28, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, // c2(lparallax, 0.
	0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x66, // 0)), 0.0).xyz;.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, // loat rminDepth =
	0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, //  min(min(texture
	0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, // Lod(tex_stereo_d
	0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, // epth, u - (yaxis
	0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, //  ? vec2(0.0, 0.5
	0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // 00 * MaxSeparati
	0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, // on) : vec2(0.500
	0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, //  * MaxSeparation
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, // , 0.0)), 0.0).x,
	0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, // .textureLod(tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, // stereo_depth, u 
	0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // - (yaxis ? vec2(
	0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, // 0.0, 0.666 * Max
	0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, // Separation) : ve
	0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, // c2(0.666 * MaxSe
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, // paration, 0.0)),
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, //  0.0).x),.textur
	0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // eLod(tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, // depth, u - (yaxi
	0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, // s ? vec2(0.0, Ma
	0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, // xSeparation) : v
	0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // ec2( MaxSeparati
	0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, // on, 0.0)), 0.0).
	0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, // x);.float rparal
	0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, // lax = max(0.0, w
	0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, // _h_height.w + Ma
	0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, // xSeparation * (1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, // .0 - 1.0 / (0.5 
	0x2b, 0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, // + rminDepth * (1
	0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, // .0 / (Stereo_MS_
	0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, // ZPD_YAxis.y) - 0
	0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, // .5))));.rcol = t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // extureLod(tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, // ereo_fb, u - (ya
	0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, // xis ? vec2(0.0, 
	0x2d, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, // -rparallax) : ve
	0x63, 0x32, 0x28, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, // c2(rparallax, 0.
	0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, // 0)), 0.0).xyz;.}
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, // .uniform mat4 St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, // ereo_LeftMat;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // iform mat4 Stere
	0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // o_RightMat;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // orm vec4 Stereo_
	0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, // LeftLuminance_Ga
	0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, // mma;.uniform vec
	0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // 4 Stereo_RightLu
	0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, // minance_DynDesat
	0x3b, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x65, // ;.void DynamicDe
	0x73, 0x61, 0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, 0x63, // satAnaglyph( vec
	0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, // 3 lCol, vec3 rCo
	0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x44, 0x65, 0x73, // l, out vec3 lDes
	0x61, 0x74, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // atCol, out vec3 
	0x72, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, // rDesatCol).{.flo
	0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, // at left2LeftLum 
	0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, // = dot(lCol, Ster
	0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, // eo_LeftLuminance
	0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, // _Gamma.xyz);.flo
	0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, // at left2RightLum
	0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, //  = dot(lCol, Ste
	0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, // reo_RightLuminan
	0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, // ce_DynDesat.xyz)
	0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, // ;.float right2Le
	0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, // ftLum = dot(rCol
	0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // , Stereo_LeftLum
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, // inance_Gamma.xyz
	0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, // );.float right2R
	0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, // ightLum = dot(rC
	0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, // ol, Stereo_Right
	0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, // Luminance_DynDes
	0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, // at.xyz);.float l
	0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, // eftLum = left2Le
	0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, // ftLum + left2Rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, // htLum;.float rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, // htLum = right2Le
	0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, // ftLum + right2Ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, // ghtLum;.float le
	0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // ftDesat = Stereo
	0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, // _RightLuminance_
	0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, // DynDesat.w * abs
	0x28, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, // ((left2LeftLum -
	0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, //  left2RightLum) 
	0x2f, 0x20, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, // / (leftLum + 0.0
	0x30, 0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, // 001));.float rig
	0x68, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // htDesat = Stereo
	0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, // _RightLuminance_
	0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, // DynDesat.w * abs
	0x28, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, // ((right2LeftLum 
	0x2d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, // - right2RightLum
	0x29, 0x20, 0x2f, 0x20, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, // ) / (rightLum + 
	0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, // 0.0001));.lDesat
	0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // Col = mix(lCol, 
	0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, // vec3_splat(leftL
	0x75, 0x6d, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, // um), leftDesat);
	0x0a, 0x72, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, // .rDesatCol = mix
	0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, // (rCol, vec3_spla
	0x74, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, 0x72, 0x69, 0x67, // t(rightLum), rig
	0x68, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, // htDesat);.}.vec3
	0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, //  LinearAnaglyph(
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, //  vec3 lCol, vec3
	0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, //  rCol).{.vec3 co
	0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x6c, // lor = (( (vec4(l
	0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, // Col, 1.)) * (Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x20, 0x2b, // reo_LeftMat) ) +
	0x20, 0x28, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, //  ( (vec4(rCol, 1
	0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, // .)) * (Stereo_Ri
	0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, // ghtMat) )).rgb;.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x7d, 0x0a, // return color;.}.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, // uniform vec4 Ste
	0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, // reo_DeghostGamma
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, // ;.uniform mat4 S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, // tereo_DeghostFil
	0x74, 0x65, 0x72, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, // ter;.vec3 Deghos
	0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // tAnaglyph( vec3 
	0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, // lCol, vec3 rCol)
	0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, // .{.vec3 color = 
	0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, // LinearAnaglyph(l
	0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // Col, rCol);.retu
	0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, // rn ( (pow(color,
	0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, //  Stereo_DeghostG
	0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x72, 0x67, 0x62, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x6d, 0x61, // amma.rgb)) * (ma
	0x74, 0x33, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, // t3(Stereo_Deghos
	0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, // tFilter[0].xyz, 
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, // Stereo_DeghostFi
	0x6c, 0x74, 0x65, 0x72, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, // lter[1].xyz, Ste
	0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, // reo_DeghostFilte
	0x72, 0x5b, 0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // r[2].xyz)) );.}.
	0x76, 0x6f, 0x69, 0x64, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, // void main().{.ve
	0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x3b, 0x0a, 0x67, // c3 lCol, rCol;.g
	0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, // atherLeftRightCo
	0x6c, 0x6f, 0x72, 0x73, 0x28, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, // lors(v_texcoord0
	0x2c, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x6c, // , lCol, rCol);.l
	0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // Col = pow(lCol, 
	0x76, 0x65, 0x63, 0x33, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, // vec3(Stereo_Left
	0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, // Luminance_Gamma.
	0x77, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, // w, Stereo_LeftLu
	0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, // minance_Gamma.w,
	0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, //  Stereo_LeftLumi
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x29, 0x29, 0x3b, // nance_Gamma.w));
	0x0a, 0x72, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x72, 0x43, 0x6f, 0x6c, // .rCol = pow(rCol
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, // , vec3(Stereo_Le
	0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, // ftLuminance_Gamm
	0x61, 0x2e, 0x77, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, // a.w, Stereo_Left
	0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, // Luminance_Gamma.
	0x77, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, // w, Stereo_LeftLu
	0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x29, // minance_Gamma.w)
	0x29, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, // );.vec3 color = 
	0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, // LinearAnaglyph(l
	0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x67, 0x6c, 0x5f, 0x46, // Col, rCol);.gl_F
	0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, // ragColor = vec4(
	0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, // pow(color, vec3(
	0x31, 0x2e, 0x2f, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, // 1./Stereo_LeftLu
	0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, // minance_Gamma.w,
	0x20, 0x31, 0x2e, 0x2f, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, //  1./Stereo_LeftL
	0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, // uminance_Gamma.w
	0x2c, 0x20, 0x31, 0x2e, 0x2f, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, // , 1./Stereo_Left
	0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, // Luminance_Gamma.
	0x77, 0x29, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x00,             // w)), 1.0);.}..
};
static const uint8_t fs_pp_stereo_anaglyph_lin_gamma_nodesat_dx11[2659] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x13, 0x53, // FSH.o.><.......S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, // tereo_MS_ZPD_YAx
	0x69, 0x73, 0x12, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x77, 0x5f, 0x68, // is...........w_h
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, // _height.........
	0x00, 0x0e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, // ..Stereo_LeftMat
	0x14, 0x00, 0x20, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x53, 0x74, 0x65, 0x72, 0x65, // .. ........Stere
	0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x00, 0x60, 0x00, 0x04, 0x00, // o_RightMat..`...
	0x00, 0x00, 0x00, 0x00, 0x1a, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, // .....Stereo_Left
	0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x12, // Luminance_Gamma.
	0x00, 0xa0, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // ..........tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x30, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, // ereo_fb0........
	0x00, 0x10, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, // ..tex_stereo_dep
	0x74, 0x68, 0x30, 0x01, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, // th0..........tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x30, 0x01, 0x00, 0x00, 0x01, 0x00, // _stereo_fb0.....
	0x00, 0x00, 0x00, 0x00, 0x10, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // .....tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x30, 0x01, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5c, // depth0..........
	0x09, 0x00, 0x00, 0x44, 0x58, 0x42, 0x43, 0xd4, 0x85, 0x2e, 0xb9, 0xe1, 0xbe, 0xb2, 0x29, 0xcd, // ...DXBC.......).
	0x27, 0x6a, 0x4d, 0x30, 0x6c, 0x7c, 0x2c, 0x01, 0x00, 0x00, 0x00, 0x5c, 0x09, 0x00, 0x00, 0x03, // 'jM0l|,.........
	0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x84, 0x00, 0x00, 0x00, 0xb8, 0x00, 0x00, 0x00, 0x49, // ...,...........I
	0x53, 0x47, 0x4e, 0x50, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x38, // SGNP...........8
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .......D........
	0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x53, // ...............S
	0x56, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, // V_POSITION.TEXCO
	0x4f, 0x52, 0x44, 0x00, 0xab, 0xab, 0xab, 0x4f, 0x53, 0x47, 0x4e, 0x2c, 0x00, 0x00, 0x00, 0x01, // ORD....OSGN,....
	0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ....... ........
	0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x53, // ...............S
	0x56, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x00, 0xab, 0xab, 0x53, 0x48, 0x45, 0x58, 0x9c, // V_TARGET...SHEX.
	0x08, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x27, 0x02, 0x00, 0x00, 0x6a, 0x08, 0x00, 0x01, 0x59, // ...P...'...j...Y
	0x00, 0x00, 0x04, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x5a, // ...F. .........Z
	0x00, 0x00, 0x03, 0x00, 0x60, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x03, 0x00, // ....`......Z....
	0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x58, 0x18, 0x00, 0x04, 0x00, 0x70, 0x10, 0x00, 0x00, // `......X....p...
	0x00, 0x00, 0x00, 0x55, 0x55, 0x00, 0x00, 0x58, 0x18, 0x00, 0x04, 0x00, 0x70, 0x10, 0x00, 0x01, // ...UU..X....p...
	0x00, 0x00, 0x00, 0x55, 0x55, 0x00, 0x00, 0x62, 0x10, 0x00, 0x03, 0x32, 0x10, 0x10, 0x00, 0x01, // ...UU..b...2....
	0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x03, 0xf2, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, // ...e.... ......h
	0x00, 0x00, 0x02, 0x05, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x08, 0x52, 0x00, 0x10, 0x00, 0x00, // .......6...R....
	0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ....@...........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x0b, 0xa2, 0x00, 0x10, 0x00, 0x00, // .......8........
	0x00, 0x00, 0x00, 0x06, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, // ..... ..........
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0xfa, // @.........?.....
	0x7e, 0x2a, 0x3f, 0x39, 0x00, 0x00, 0x08, 0x12, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2a, // ~*?9...........*
	0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, // . ..........@...
	0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x09, 0xf2, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, // ...7............
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, // .......F........
	0x0b, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf2, 0x00, 0x10, 0x00, 0x02, // ................
	0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x14, 0x10, 0x00, 0x01, // ...F.......F....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0xf2, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, // ...............F
	0x0e, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x14, 0x10, 0x00, 0x01, // ...A.......F....
	0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x22, // ...H.......CU.."
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x16, // .......F........
	0x7e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, // ~.......`.......
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, // @......H.......C
	0x55, 0x15, 0x00, 0x42, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x02, // U..B............
	0x00, 0x00, 0x00, 0x96, 0x7c, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, // ....|.......`...
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x07, 0x22, // ....@......3..."
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, // .......*........
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x06, 0x22, 0x00, 0x10, 0x00, 0x02, // .......6..."....
	0x00, 0x00, 0x00, 0x0a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, // ..... .........6
	0x00, 0x00, 0x08, 0x52, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, // ...R........@...
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, // ...............7
	0x00, 0x00, 0x09, 0xc2, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x00, 0x10, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x06, 0x04, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x56, 0x01, 0x10, 0x00, 0x02, // ...........V....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x32, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0xe6, // .......2........
	0x0a, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x10, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, // .......F........
	0x00, 0x00, 0x08, 0xc2, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0xa6, 0x0e, 0x10, 0x80, 0x41, // ...............A
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x14, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x48, // ...............H
	0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x42, 0x00, 0x10, 0x00, 0x01, // .......CU..B....
	0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x96, 0x7c, 0x10, 0x00, 0x01, // ............|...
	0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, // ....`.......@...
	0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x82, // ...H.......CU...
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x96, // .......F........
	0x73, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, // s.......`.......
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x07, 0x22, 0x00, 0x10, 0x00, 0x01, // @......3..."....
	0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, // ...:............
	0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x0b, 0x82, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, // ................
	0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, // @.....?...?...?.
	0x00, 0x80, 0x3f, 0x1a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ..?.. ..........
	0x00, 0x00, 0x07, 0x82, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x01, // ...........:....
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0x32, 0x00, 0x00, 0x09, 0x22, // ....@......2..."
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3a, // ...............:
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x0e, // ........@.....?.
	0x00, 0x00, 0x0a, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, // ..."........@...
	0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x1a, // ..?...?...?...?.
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x22, 0x00, 0x10, 0x00, 0x01, // ..........."....
	0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, // .......A........
	0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x32, 0x00, 0x00, 0x0b, 0x22, 0x00, 0x10, 0x00, 0x01, // @.....?2..."....
	0x00, 0x00, 0x00, 0x0a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, // ..... ..........
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, // .......:. ......
	0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x1a, // ...4............
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, // ........@......6
	0x00, 0x00, 0x06, 0x82, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x80, 0x41, // ...............A
	0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x08, 0x62, 0x00, 0x10, 0x00, 0x03, // .......6...b....
	0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ....@...........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x09, 0x32, 0x00, 0x10, 0x00, 0x02, // .......7...2....
	0x00, 0x00, 0x00, 0x06, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x02, // ................
	0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x32, // ...F...........2
	0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, // .......F.......F
	0x10, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, // .......H.......C
	0x55, 0x15, 0x00, 0x72, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x02, // U..r.......F....
	0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x00, // ...F~.......`...
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x05, 0x72, // ....@....../...r
	0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x38, // .......F.......8
	0x00, 0x00, 0x08, 0x72, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x02, // ...r.......F....
	0x00, 0x00, 0x00, 0xf6, 0x8f, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x19, // ..... ..........
	0x00, 0x00, 0x05, 0x72, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x02, // ...r.......F....
	0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x82, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, // ...6............
	0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x11, 0x00, 0x00, 0x08, 0x12, 0x00, 0x10, 0x00, 0x04, // @.....?.........
	0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, // ...F.......F. ..
	0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x08, 0x22, 0x00, 0x10, 0x00, 0x04, // ..........."....
	0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, // ...F.......F. ..
	0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x08, 0x42, 0x00, 0x10, 0x00, 0x04, // ...........B....
	0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, // ...F.......F. ..
	0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, // .......H.......C
	0x55, 0x15, 0x00, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x00, // U..........F....
	0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, // ...F~.......`...
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, // ....@......H....
	0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x22, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe6, // ...CU.."........
	0x0a, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x7e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, // ........~.......
	0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, // `.......@......3
	0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x07, 0x12, // ...........3....
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, // .......*........
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x09, 0x12, 0x00, 0x10, 0x00, 0x00, // .......2........
	0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x01, // ...........:....
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x0e, 0x00, 0x00, 0x0a, 0x12, // ....@.....?.....
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, // ........@.....?.
	0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x0a, 0x00, 0x10, 0x00, 0x00, // ..?...?...?.....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, // ................
	0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, // ...A........@...
	0x00, 0x80, 0x3f, 0x32, 0x00, 0x00, 0x0b, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, // ..?2............
	0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, // . ..............
	0x00, 0x00, 0x00, 0x3a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x34, // ...:. .........4
	0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x06, 0x82, // ....@......6....
	0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x00, // ...........A....
	0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x22, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, // ...6..."........
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x09, 0x32, 0x00, 0x10, 0x00, 0x00, // @......7...2....
	0x00, 0x00, 0x00, 0x06, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x03, // ................
	0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x32, // ...F...........2
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x00, // .......F...A....
	0x00, 0x00, 0x00, 0x46, 0x10, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, // ...F.......H....
	0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, // ...CU..r.......F
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .......F~.......
	0x60, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2f, // `.......@....../
	0x00, 0x00, 0x05, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, // ...r.......F....
	0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x08, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, // ...8...r.......F
	0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf6, 0x8f, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, // ......... ......
	0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x05, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, // .......r.......F
	0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x82, 0x00, 0x10, 0x00, 0x00, // .......6........
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x11, 0x00, 0x00, 0x08, 0x12, // ....@.....?.....
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, // .......F.......F
	0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x08, 0x22, // . ............."
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, // .......F.......F
	0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x08, 0x42, // . .............B
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, // .......F.......F
	0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x72, // . .............r
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, // .......F.......F
	0x02, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x05, 0x72, 0x00, 0x10, 0x00, 0x00, // ......./...r....
	0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x0b, 0x82, // ...F............
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, // ........@.....?.
	0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x3a, 0x80, 0x20, 0x00, 0x00, // ..?...?...?:. ..
	0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x07, 0x72, 0x00, 0x10, 0x00, 0x00, // .......8...r....
	0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf6, 0x0f, 0x10, 0x00, 0x00, // ...F............
	0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x05, 0x72, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, // .......r ......F
	0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x82, 0x20, 0x10, 0x00, 0x00, // .......6.... ...
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x3e, 0x00, 0x00, 0x01, 0x00, // ....@.....?>....
	0x00, 0xb0, 0x00,                                                                               // ...
};
static const uint8_t fs_pp_stereo_anaglyph_lin_gamma_nodesat_spv[5220] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x13, 0x53, // FSH.o.><.......S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, // tereo_MS_ZPD_YAx
	0x69, 0x73, 0x12, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x77, 0x5f, 0x68, // is...........w_h
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x01, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, // _height.........
	0x00, 0x0e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, // ..Stereo_LeftMat
	0x14, 0x01, 0x20, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x53, 0x74, 0x65, 0x72, 0x65, // .. ........Stere
	0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x01, 0x60, 0x00, 0x04, 0x00, // o_RightMat..`...
	0x00, 0x00, 0x00, 0x00, 0x1a, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, // .....Stereo_Left
	0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x12, // Luminance_Gamma.
	0x01, 0xa0, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // ..........tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x30, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x02, 0x22, // ereo_fb0......."
	0x00, 0x10, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, // ..tex_stereo_dep
	0x74, 0x68, 0x30, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x02, 0x22, 0x00, 0x90, 0x13, 0x00, 0x00, // th0.......".....
	0x03, 0x02, 0x23, 0x07, 0x00, 0x00, 0x01, 0x00, 0x0b, 0x00, 0x08, 0x00, 0xd4, 0x02, 0x00, 0x00, // ..#.............
	0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x06, 0x00, // ................
	0x01, 0x00, 0x00, 0x00, 0x47, 0x4c, 0x53, 0x4c, 0x2e, 0x73, 0x74, 0x64, 0x2e, 0x34, 0x35, 0x30, // ....GLSL.std.450
	0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // ................
	0x0f, 0x00, 0x07, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, // ............main
	0x00, 0x00, 0x00, 0x00, 0x64, 0x01, 0x00, 0x00, 0x6f, 0x01, 0x00, 0x00, 0x10, 0x00, 0x03, 0x00, // ....d...o.......
	0x04, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x03, 0x00, 0x03, 0x00, 0x05, 0x00, 0x00, 0x00, // ................
	0xf4, 0x01, 0x00, 0x00, 0x05, 0x00, 0x04, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, // ............main
	0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x08, 0x00, 0x30, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, // ........0...tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // stereo_fbSampler
	0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x08, 0x00, 0x33, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, // ........3...tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // stereo_fbTexture
	0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x08, 0x00, 0x37, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, // ........7...tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, // stereo_depthSamp
	0x6c, 0x65, 0x72, 0x00, 0x05, 0x00, 0x08, 0x00, 0x39, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, // ler.....9...tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x54, 0x65, 0x78, 0x74, // stereo_depthText
	0x75, 0x72, 0x65, 0x00, 0x05, 0x00, 0x06, 0x00, 0x54, 0x00, 0x00, 0x00, 0x55, 0x6e, 0x69, 0x66, // ure.....T...Unif
	0x6f, 0x72, 0x6d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x08, 0x00, // ormBlock........
	0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, // T.......Stereo_M
	0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x00, 0x06, 0x00, 0x06, 0x00, // S_ZPD_YAxis.....
	0x54, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, // T.......w_h_heig
	0x68, 0x74, 0x00, 0x00, 0x06, 0x00, 0x07, 0x00, 0x54, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // ht......T.......
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x00, 0x00, // Stereo_LeftMat..
	0x06, 0x00, 0x07, 0x00, 0x54, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x53, 0x74, 0x65, 0x72, // ....T.......Ster
	0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x00, 0x06, 0x00, 0x0a, 0x00, // eo_RightMat.....
	0x54, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, // T.......Stereo_L
	0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, // eftLuminance_Gam
	0x6d, 0x61, 0x00, 0x00, 0x05, 0x00, 0x03, 0x00, 0x56, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ma......V.......
	0x05, 0x00, 0x05, 0x00, 0x64, 0x01, 0x00, 0x00, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, // ....d...v_texcoo
	0x72, 0x64, 0x30, 0x00, 0x05, 0x00, 0x06, 0x00, 0x6f, 0x01, 0x00, 0x00, 0x62, 0x67, 0x66, 0x78, // rd0.....o...bgfx
	0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, // _FragData0..G...
	0x30, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, // 0...".......G...
	0x30, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, // 0...!.......G...
	0x33, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, // 3...".......G...
	0x33, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, // 3...!.......G...
	0x37, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, // 7...".......G...
	0x37, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, // 7...!.......G...
	0x39, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, // 9...".......G...
	0x39, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, // 9...!.......H...
	0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // T.......#.......
	0x48, 0x00, 0x05, 0x00, 0x54, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, // H...T.......#...
	0x10, 0x00, 0x00, 0x00, 0x48, 0x00, 0x04, 0x00, 0x54, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // ....H...T.......
	0x04, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0x54, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // ....H...T.......
	0x23, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0x54, 0x00, 0x00, 0x00, // #... ...H...T...
	0x02, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x48, 0x00, 0x04, 0x00, // ............H...
	0x54, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, // T...........H...
	0x54, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, // T.......#...`...
	0x48, 0x00, 0x05, 0x00, 0x54, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, // H...T...........
	0x10, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0x54, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, // ....H...T.......
	0x23, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x47, 0x00, 0x03, 0x00, 0x54, 0x00, 0x00, 0x00, // #.......G...T...
	0x02, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x56, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, // ....G...V..."...
	0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x56, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, // ....G...V...!...
	0x01, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x64, 0x01, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, // ....G...d.......
	0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x6f, 0x01, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, // ....G...o.......
	0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x21, 0x00, 0x03, 0x00, // ............!...
	0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x02, 0x00, 0x06, 0x00, 0x00, 0x00, // ................
	0x16, 0x00, 0x03, 0x00, 0x07, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x19, 0x00, 0x09, 0x00, // ........ .......
	0x08, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x17, 0x00, 0x04, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // ................
	0x17, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, // ................
	0x17, 0x00, 0x04, 0x00, 0x19, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, // ................
	0x20, 0x00, 0x04, 0x00, 0x2f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, //  .../...........
	0x3b, 0x00, 0x04, 0x00, 0x2f, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ;.../...0.......
	0x20, 0x00, 0x04, 0x00, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, //  ...2...........
	0x3b, 0x00, 0x04, 0x00, 0x32, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ;...2...3.......
	0x3b, 0x00, 0x04, 0x00, 0x2f, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ;.../...7.......
	0x3b, 0x00, 0x04, 0x00, 0x32, 0x00, 0x00, 0x00, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ;...2...9.......
	0x15, 0x00, 0x04, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // ....<... .......
	0x2b, 0x00, 0x04, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // +...<...=.......
	0x2b, 0x00, 0x04, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // +...<...A.......
	0x1b, 0x00, 0x03, 0x00, 0x45, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x14, 0x00, 0x02, 0x00, // ....E...........
	0x50, 0x00, 0x00, 0x00, 0x18, 0x00, 0x04, 0x00, 0x53, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, // P.......S.......
	0x04, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x07, 0x00, 0x54, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, // ........T.......
	0x0e, 0x00, 0x00, 0x00, 0x53, 0x00, 0x00, 0x00, 0x53, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, // ....S...S.......
	0x20, 0x00, 0x04, 0x00, 0x55, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, //  ...U.......T...
	0x3b, 0x00, 0x04, 0x00, 0x55, 0x00, 0x00, 0x00, 0x56, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // ;...U...V.......
	0x15, 0x00, 0x04, 0x00, 0x57, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ....W... .......
	0x2b, 0x00, 0x04, 0x00, 0x57, 0x00, 0x00, 0x00, 0x58, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // +...W...X.......
	0x20, 0x00, 0x04, 0x00, 0x59, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, //  ...Y...........
	0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // +...............
	0x2b, 0x00, 0x04, 0x00, 0x57, 0x00, 0x00, 0x00, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // +...W..._.......
	0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, // +.......e......?
	0x17, 0x00, 0x04, 0x00, 0x6c, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // ....l...P.......
	0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0xfa, 0x7e, 0x2a, 0x3f, // +.......x....~*?
	0x2b, 0x00, 0x04, 0x00, 0x57, 0x00, 0x00, 0x00, 0x9a, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, // +...W...........
	0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x9e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, // +..............?
	0x2b, 0x00, 0x04, 0x00, 0x57, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // +...W...........
	0x2b, 0x00, 0x04, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x11, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // +...<...........
	0x20, 0x00, 0x04, 0x00, 0x12, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x53, 0x00, 0x00, 0x00, //  ...........S...
	0x2b, 0x00, 0x04, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x1b, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, // +...<...........
	0x2b, 0x00, 0x04, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x36, 0x01, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, // +...<...6.......
	0x20, 0x00, 0x04, 0x00, 0x63, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, //  ...c...........
	0x3b, 0x00, 0x04, 0x00, 0x63, 0x01, 0x00, 0x00, 0x64, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // ;...c...d.......
	0x20, 0x00, 0x04, 0x00, 0x6e, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, //  ...n...........
	0x3b, 0x00, 0x04, 0x00, 0x6e, 0x01, 0x00, 0x00, 0x6f, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, // ;...n...o.......
	0x36, 0x00, 0x05, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 6...............
	0x03, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x05, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, // ............=...
	0x06, 0x00, 0x00, 0x00, 0x31, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, // ....1...0...=...
	0x08, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, // ....4...3...=...
	0x06, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, // ....8...7...=...
	0x08, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x00, 0x00, 0x39, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, // ....:...9...=...
	0x0b, 0x00, 0x00, 0x00, 0x65, 0x01, 0x00, 0x00, 0x64, 0x01, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, // ....e...d...A...
	0x59, 0x00, 0x00, 0x00, 0xde, 0x01, 0x00, 0x00, 0x56, 0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00, // Y.......V...A...
	0x58, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0xdf, 0x01, 0x00, 0x00, // X...=...........
	0xde, 0x01, 0x00, 0x00, 0xb7, 0x00, 0x05, 0x00, 0x50, 0x00, 0x00, 0x00, 0xe0, 0x01, 0x00, 0x00, // ........P.......
	0xdf, 0x01, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x59, 0x00, 0x00, 0x00, // ........A...Y...
	0xe1, 0x01, 0x00, 0x00, 0x56, 0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00, 0x5f, 0x00, 0x00, 0x00, // ....V...A..._...
	0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0xe2, 0x01, 0x00, 0x00, 0xe1, 0x01, 0x00, 0x00, // =...............
	0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xe6, 0x01, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, // ............e...
	0xe2, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xe7, 0x01, 0x00, 0x00, // ....P...........
	0x5c, 0x00, 0x00, 0x00, 0xe6, 0x01, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // ................
	0xe9, 0x01, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0xe2, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, // ....e.......P...
	0x0b, 0x00, 0x00, 0x00, 0xea, 0x01, 0x00, 0x00, 0xe9, 0x01, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00, // ................
	0x50, 0x00, 0x05, 0x00, 0x6c, 0x00, 0x00, 0x00, 0xeb, 0x01, 0x00, 0x00, 0xe0, 0x01, 0x00, 0x00, // P...l...........
	0xe0, 0x01, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xec, 0x01, 0x00, 0x00, // ................
	0xeb, 0x01, 0x00, 0x00, 0xe7, 0x01, 0x00, 0x00, 0xea, 0x01, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, // ................
	0x0b, 0x00, 0x00, 0x00, 0xed, 0x01, 0x00, 0x00, 0x65, 0x01, 0x00, 0x00, 0xec, 0x01, 0x00, 0x00, // ........e.......
	0x56, 0x00, 0x05, 0x00, 0x45, 0x00, 0x00, 0x00, 0x75, 0x02, 0x00, 0x00, 0x3a, 0x00, 0x00, 0x00, // V...E...u...:...
	0x38, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x78, 0x02, 0x00, 0x00, // 8...X.......x...
	0x75, 0x02, 0x00, 0x00, 0xed, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00, // u...............
	0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xf0, 0x01, 0x00, 0x00, 0x78, 0x02, 0x00, 0x00, // Q...........x...
	0x00, 0x00, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xf4, 0x01, 0x00, 0x00, // ................
	0x78, 0x00, 0x00, 0x00, 0xe2, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, // x.......P.......
	0xf5, 0x01, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00, 0xf4, 0x01, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, // ................
	0x07, 0x00, 0x00, 0x00, 0xf7, 0x01, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0xe2, 0x01, 0x00, 0x00, // ........x.......
	0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xf8, 0x01, 0x00, 0x00, 0xf7, 0x01, 0x00, 0x00, // P...............
	0x5c, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x6c, 0x00, 0x00, 0x00, 0xf9, 0x01, 0x00, 0x00, // ....P...l.......
	0xe0, 0x01, 0x00, 0x00, 0xe0, 0x01, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, // ................
	0xfa, 0x01, 0x00, 0x00, 0xf9, 0x01, 0x00, 0x00, 0xf5, 0x01, 0x00, 0x00, 0xf8, 0x01, 0x00, 0x00, // ................
	0x81, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xfb, 0x01, 0x00, 0x00, 0x65, 0x01, 0x00, 0x00, // ............e...
	0xfa, 0x01, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, 0x45, 0x00, 0x00, 0x00, 0x7f, 0x02, 0x00, 0x00, // ....V...E.......
	0x3a, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, // :...8...X.......
	0x82, 0x02, 0x00, 0x00, 0x7f, 0x02, 0x00, 0x00, 0xfb, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // ................
	0x5c, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x00, 0x00, // ....Q...........
	0x82, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, // ................
	0xff, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0xf0, 0x01, 0x00, 0x00, // ........%.......
	0xfe, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x03, 0x02, 0x00, 0x00, // ....P...........
	0x5c, 0x00, 0x00, 0x00, 0xe2, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, // ........P.......
	0x05, 0x02, 0x00, 0x00, 0xe2, 0x01, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, // ............P...
	0x6c, 0x00, 0x00, 0x00, 0x06, 0x02, 0x00, 0x00, 0xe0, 0x01, 0x00, 0x00, 0xe0, 0x01, 0x00, 0x00, // l...............
	0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x07, 0x02, 0x00, 0x00, 0x06, 0x02, 0x00, 0x00, // ................
	0x03, 0x02, 0x00, 0x00, 0x05, 0x02, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, // ................
	0x08, 0x02, 0x00, 0x00, 0x65, 0x01, 0x00, 0x00, 0x07, 0x02, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, // ....e.......V...
	0x45, 0x00, 0x00, 0x00, 0x89, 0x02, 0x00, 0x00, 0x3a, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, // E.......:...8...
	0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x8c, 0x02, 0x00, 0x00, 0x89, 0x02, 0x00, 0x00, // X...............
	0x08, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, // ............Q...
	0x07, 0x00, 0x00, 0x00, 0x0b, 0x02, 0x00, 0x00, 0x8c, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x0c, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // ................
	0x25, 0x00, 0x00, 0x00, 0xff, 0x01, 0x00, 0x00, 0x0b, 0x02, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, // %...........A...
	0x59, 0x00, 0x00, 0x00, 0x0d, 0x02, 0x00, 0x00, 0x56, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x00, 0x00, // Y.......V...=...
	0x9a, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x02, 0x00, 0x00, // ....=...........
	0x0d, 0x02, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x59, 0x00, 0x00, 0x00, 0x11, 0x02, 0x00, 0x00, // ....A...Y.......
	0x56, 0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, // V...A.......=...
	0x07, 0x00, 0x00, 0x00, 0x12, 0x02, 0x00, 0x00, 0x11, 0x02, 0x00, 0x00, 0x88, 0x00, 0x05, 0x00, // ................
	0x07, 0x00, 0x00, 0x00, 0x13, 0x02, 0x00, 0x00, 0x9e, 0x00, 0x00, 0x00, 0x12, 0x02, 0x00, 0x00, // ................
	0x83, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x14, 0x02, 0x00, 0x00, 0x13, 0x02, 0x00, 0x00, // ................
	0x65, 0x00, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x15, 0x02, 0x00, 0x00, // e...............
	0x0c, 0x02, 0x00, 0x00, 0x14, 0x02, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // ................
	0x16, 0x02, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x15, 0x02, 0x00, 0x00, 0x88, 0x00, 0x05, 0x00, // ....e...........
	0x07, 0x00, 0x00, 0x00, 0x17, 0x02, 0x00, 0x00, 0x9e, 0x00, 0x00, 0x00, 0x16, 0x02, 0x00, 0x00, // ................
	0x83, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x18, 0x02, 0x00, 0x00, 0x9e, 0x00, 0x00, 0x00, // ................
	0x17, 0x02, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x19, 0x02, 0x00, 0x00, // ................
	0xe2, 0x01, 0x00, 0x00, 0x18, 0x02, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // ................
	0x1a, 0x02, 0x00, 0x00, 0x0e, 0x02, 0x00, 0x00, 0x19, 0x02, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, // ................
	0x07, 0x00, 0x00, 0x00, 0x1b, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, // ............(...
	0x5c, 0x00, 0x00, 0x00, 0x1a, 0x02, 0x00, 0x00, 0x7f, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, // ................
	0x1f, 0x02, 0x00, 0x00, 0x1b, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, // ........P.......
	0x20, 0x02, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x1f, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, //  ...........P...
	0x0b, 0x00, 0x00, 0x00, 0x22, 0x02, 0x00, 0x00, 0x1b, 0x02, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00, // ...."...........
	0x50, 0x00, 0x05, 0x00, 0x6c, 0x00, 0x00, 0x00, 0x23, 0x02, 0x00, 0x00, 0xe0, 0x01, 0x00, 0x00, // P...l...#.......
	0xe0, 0x01, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x24, 0x02, 0x00, 0x00, // ............$...
	0x23, 0x02, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00, 0x22, 0x02, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, // #... ...".......
	0x0b, 0x00, 0x00, 0x00, 0x25, 0x02, 0x00, 0x00, 0x65, 0x01, 0x00, 0x00, 0x24, 0x02, 0x00, 0x00, // ....%...e...$...
	0x56, 0x00, 0x05, 0x00, 0x45, 0x00, 0x00, 0x00, 0x93, 0x02, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, // V...E.......4...
	0x31, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x96, 0x02, 0x00, 0x00, // 1...X...........
	0x93, 0x02, 0x00, 0x00, 0x25, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00, // ....%...........
	0x4f, 0x00, 0x08, 0x00, 0x19, 0x00, 0x00, 0x00, 0x28, 0x02, 0x00, 0x00, 0x96, 0x02, 0x00, 0x00, // O.......(.......
	0x96, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // ................
	0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x2c, 0x02, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, // ........,...e...
	0xe2, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x2d, 0x02, 0x00, 0x00, // ....P.......-...
	0x5c, 0x00, 0x00, 0x00, 0x2c, 0x02, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // ....,...........
	0x2f, 0x02, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0xe2, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, // /...e.......P...
	0x0b, 0x00, 0x00, 0x00, 0x30, 0x02, 0x00, 0x00, 0x2f, 0x02, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00, // ....0.../.......
	0x50, 0x00, 0x05, 0x00, 0x6c, 0x00, 0x00, 0x00, 0x31, 0x02, 0x00, 0x00, 0xe0, 0x01, 0x00, 0x00, // P...l...1.......
	0xe0, 0x01, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x32, 0x02, 0x00, 0x00, // ............2...
	0x31, 0x02, 0x00, 0x00, 0x2d, 0x02, 0x00, 0x00, 0x30, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, // 1...-...0.......
	0x0b, 0x00, 0x00, 0x00, 0x33, 0x02, 0x00, 0x00, 0x65, 0x01, 0x00, 0x00, 0x32, 0x02, 0x00, 0x00, // ....3...e...2...
	0x56, 0x00, 0x05, 0x00, 0x45, 0x00, 0x00, 0x00, 0x9d, 0x02, 0x00, 0x00, 0x3a, 0x00, 0x00, 0x00, // V...E.......:...
	0x38, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xa0, 0x02, 0x00, 0x00, // 8...X...........
	0x9d, 0x02, 0x00, 0x00, 0x33, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00, // ....3...........
	0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x36, 0x02, 0x00, 0x00, 0xa0, 0x02, 0x00, 0x00, // Q.......6.......
	0x00, 0x00, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x3a, 0x02, 0x00, 0x00, // ............:...
	0x78, 0x00, 0x00, 0x00, 0xe2, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, // x.......P.......
	0x3b, 0x02, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x3a, 0x02, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, // ;.......:.......
	0x07, 0x00, 0x00, 0x00, 0x3d, 0x02, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0xe2, 0x01, 0x00, 0x00, // ....=...x.......
	0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x3e, 0x02, 0x00, 0x00, 0x3d, 0x02, 0x00, 0x00, // P.......>...=...
	0x5c, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x6c, 0x00, 0x00, 0x00, 0x3f, 0x02, 0x00, 0x00, // ....P...l...?...
	0xe0, 0x01, 0x00, 0x00, 0xe0, 0x01, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, // ................
	0x40, 0x02, 0x00, 0x00, 0x3f, 0x02, 0x00, 0x00, 0x3b, 0x02, 0x00, 0x00, 0x3e, 0x02, 0x00, 0x00, // @...?...;...>...
	0x83, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x41, 0x02, 0x00, 0x00, 0x65, 0x01, 0x00, 0x00, // ........A...e...
	0x40, 0x02, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, 0x45, 0x00, 0x00, 0x00, 0xa7, 0x02, 0x00, 0x00, // @...V...E.......
	0x3a, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, // :...8...X.......
	0xaa, 0x02, 0x00, 0x00, 0xa7, 0x02, 0x00, 0x00, 0x41, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // ........A.......
	0x5c, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x44, 0x02, 0x00, 0x00, // ....Q.......D...
	0xaa, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, // ................
	0x45, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x36, 0x02, 0x00, 0x00, // E.......%...6...
	0x44, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x49, 0x02, 0x00, 0x00, // D...P.......I...
	0x5c, 0x00, 0x00, 0x00, 0xe2, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, // ........P.......
	0x4b, 0x02, 0x00, 0x00, 0xe2, 0x01, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, // K...........P...
	0x6c, 0x00, 0x00, 0x00, 0x4c, 0x02, 0x00, 0x00, 0xe0, 0x01, 0x00, 0x00, 0xe0, 0x01, 0x00, 0x00, // l...L...........
	0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x4d, 0x02, 0x00, 0x00, 0x4c, 0x02, 0x00, 0x00, // ........M...L...
	0x49, 0x02, 0x00, 0x00, 0x4b, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, // I...K...........
	0x4e, 0x02, 0x00, 0x00, 0x65, 0x01, 0x00, 0x00, 0x4d, 0x02, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, // N...e...M...V...
	0x45, 0x00, 0x00, 0x00, 0xb1, 0x02, 0x00, 0x00, 0x3a, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, // E.......:...8...
	0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xb4, 0x02, 0x00, 0x00, 0xb1, 0x02, 0x00, 0x00, // X...............
	0x4e, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, // N...........Q...
	0x07, 0x00, 0x00, 0x00, 0x51, 0x02, 0x00, 0x00, 0xb4, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ....Q...........
	0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x52, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // ........R.......
	0x25, 0x00, 0x00, 0x00, 0x45, 0x02, 0x00, 0x00, 0x51, 0x02, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, // %...E...Q...A...
	0x59, 0x00, 0x00, 0x00, 0x53, 0x02, 0x00, 0x00, 0x56, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x00, 0x00, // Y...S...V...=...
	0x9a, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x54, 0x02, 0x00, 0x00, // ....=.......T...
	0x53, 0x02, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x59, 0x00, 0x00, 0x00, 0x57, 0x02, 0x00, 0x00, // S...A...Y...W...
	0x56, 0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, // V...A.......=...
	0x07, 0x00, 0x00, 0x00, 0x58, 0x02, 0x00, 0x00, 0x57, 0x02, 0x00, 0x00, 0x88, 0x00, 0x05, 0x00, // ....X...W.......
	0x07, 0x00, 0x00, 0x00, 0x59, 0x02, 0x00, 0x00, 0x9e, 0x00, 0x00, 0x00, 0x58, 0x02, 0x00, 0x00, // ....Y.......X...
	0x83, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x5a, 0x02, 0x00, 0x00, 0x59, 0x02, 0x00, 0x00, // ........Z...Y...
	0x65, 0x00, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x5b, 0x02, 0x00, 0x00, // e...........[...
	0x52, 0x02, 0x00, 0x00, 0x5a, 0x02, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // R...Z...........
	0x5c, 0x02, 0x00, 0x00, 0x65, 0x00, 0x00, 0x00, 0x5b, 0x02, 0x00, 0x00, 0x88, 0x00, 0x05, 0x00, // ....e...[.......
	0x07, 0x00, 0x00, 0x00, 0x5d, 0x02, 0x00, 0x00, 0x9e, 0x00, 0x00, 0x00, 0x5c, 0x02, 0x00, 0x00, // ....]...........
	0x83, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x5e, 0x02, 0x00, 0x00, 0x9e, 0x00, 0x00, 0x00, // ........^.......
	0x5d, 0x02, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x5f, 0x02, 0x00, 0x00, // ]..........._...
	0xe2, 0x01, 0x00, 0x00, 0x5e, 0x02, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // ....^...........
	0x60, 0x02, 0x00, 0x00, 0x54, 0x02, 0x00, 0x00, 0x5f, 0x02, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, // `...T..._.......
	0x07, 0x00, 0x00, 0x00, 0x61, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, // ....a.......(...
	0x5c, 0x00, 0x00, 0x00, 0x60, 0x02, 0x00, 0x00, 0x7f, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, // ....`...........
	0x65, 0x02, 0x00, 0x00, 0x61, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, // e...a...P.......
	0x66, 0x02, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x65, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, // f.......e...P...
	0x0b, 0x00, 0x00, 0x00, 0x68, 0x02, 0x00, 0x00, 0x61, 0x02, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00, // ....h...a.......
	0x50, 0x00, 0x05, 0x00, 0x6c, 0x00, 0x00, 0x00, 0x69, 0x02, 0x00, 0x00, 0xe0, 0x01, 0x00, 0x00, // P...l...i.......
	0xe0, 0x01, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x6a, 0x02, 0x00, 0x00, // ............j...
	0x69, 0x02, 0x00, 0x00, 0x66, 0x02, 0x00, 0x00, 0x68, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, // i...f...h.......
	0x0b, 0x00, 0x00, 0x00, 0x6b, 0x02, 0x00, 0x00, 0x65, 0x01, 0x00, 0x00, 0x6a, 0x02, 0x00, 0x00, // ....k...e...j...
	0x56, 0x00, 0x05, 0x00, 0x45, 0x00, 0x00, 0x00, 0xbb, 0x02, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, // V...E.......4...
	0x31, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x00, 0x00, // 1...X...........
	0xbb, 0x02, 0x00, 0x00, 0x6b, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00, // ....k...........
	0x4f, 0x00, 0x08, 0x00, 0x19, 0x00, 0x00, 0x00, 0x6e, 0x02, 0x00, 0x00, 0xbe, 0x02, 0x00, 0x00, // O.......n.......
	0xbe, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // ................
	0x41, 0x00, 0x06, 0x00, 0x59, 0x00, 0x00, 0x00, 0x97, 0x01, 0x00, 0x00, 0x56, 0x00, 0x00, 0x00, // A...Y.......V...
	0x36, 0x01, 0x00, 0x00, 0x9a, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, // 6.......=.......
	0x98, 0x01, 0x00, 0x00, 0x97, 0x01, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x59, 0x00, 0x00, 0x00, // ........A...Y...
	0x99, 0x01, 0x00, 0x00, 0x56, 0x00, 0x00, 0x00, 0x36, 0x01, 0x00, 0x00, 0x9a, 0x00, 0x00, 0x00, // ....V...6.......
	0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x9a, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, // =...............
	0x41, 0x00, 0x06, 0x00, 0x59, 0x00, 0x00, 0x00, 0x9b, 0x01, 0x00, 0x00, 0x56, 0x00, 0x00, 0x00, // A...Y.......V...
	0x36, 0x01, 0x00, 0x00, 0x9a, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, // 6.......=.......
	0x9c, 0x01, 0x00, 0x00, 0x9b, 0x01, 0x00, 0x00, 0x50, 0x00, 0x06, 0x00, 0x19, 0x00, 0x00, 0x00, // ........P.......
	0x9d, 0x01, 0x00, 0x00, 0x98, 0x01, 0x00, 0x00, 0x9a, 0x01, 0x00, 0x00, 0x9c, 0x01, 0x00, 0x00, // ................
	0x0c, 0x00, 0x07, 0x00, 0x19, 0x00, 0x00, 0x00, 0x9e, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // ................
	0x1a, 0x00, 0x00, 0x00, 0x28, 0x02, 0x00, 0x00, 0x9d, 0x01, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, // ....(.......A...
	0x59, 0x00, 0x00, 0x00, 0xa0, 0x01, 0x00, 0x00, 0x56, 0x00, 0x00, 0x00, 0x36, 0x01, 0x00, 0x00, // Y.......V...6...
	0x9a, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0xa1, 0x01, 0x00, 0x00, // ....=...........
	0xa0, 0x01, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x59, 0x00, 0x00, 0x00, 0xa2, 0x01, 0x00, 0x00, // ....A...Y.......
	0x56, 0x00, 0x00, 0x00, 0x36, 0x01, 0x00, 0x00, 0x9a, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, // V...6.......=...
	0x07, 0x00, 0x00, 0x00, 0xa3, 0x01, 0x00, 0x00, 0xa2, 0x01, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, // ............A...
	0x59, 0x00, 0x00, 0x00, 0xa4, 0x01, 0x00, 0x00, 0x56, 0x00, 0x00, 0x00, 0x36, 0x01, 0x00, 0x00, // Y.......V...6...
	0x9a, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0xa5, 0x01, 0x00, 0x00, // ....=...........
	0xa4, 0x01, 0x00, 0x00, 0x50, 0x00, 0x06, 0x00, 0x19, 0x00, 0x00, 0x00, 0xa6, 0x01, 0x00, 0x00, // ....P...........
	0xa1, 0x01, 0x00, 0x00, 0xa3, 0x01, 0x00, 0x00, 0xa5, 0x01, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, // ................
	0x19, 0x00, 0x00, 0x00, 0xa7, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, // ................
	0x6e, 0x02, 0x00, 0x00, 0xa6, 0x01, 0x00, 0x00, 0x41, 0x00, 0x05, 0x00, 0x12, 0x01, 0x00, 0x00, // n.......A.......
	0xc2, 0x02, 0x00, 0x00, 0x56, 0x00, 0x00, 0x00, 0x11, 0x01, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, // ....V.......=...
	0x53, 0x00, 0x00, 0x00, 0xc3, 0x02, 0x00, 0x00, 0xc2, 0x02, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, // S...........Q...
	0x07, 0x00, 0x00, 0x00, 0xc5, 0x02, 0x00, 0x00, 0x9e, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xc6, 0x02, 0x00, 0x00, 0x9e, 0x01, 0x00, 0x00, // Q...............
	0x01, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xc7, 0x02, 0x00, 0x00, // ....Q...........
	0x9e, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x50, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, // ........P.......
	0xc8, 0x02, 0x00, 0x00, 0xc5, 0x02, 0x00, 0x00, 0xc6, 0x02, 0x00, 0x00, 0xc7, 0x02, 0x00, 0x00, // ................
	0x9e, 0x00, 0x00, 0x00, 0x91, 0x00, 0x05, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xc9, 0x02, 0x00, 0x00, // ................
	0xc3, 0x02, 0x00, 0x00, 0xc8, 0x02, 0x00, 0x00, 0x41, 0x00, 0x05, 0x00, 0x12, 0x01, 0x00, 0x00, // ........A.......
	0xca, 0x02, 0x00, 0x00, 0x56, 0x00, 0x00, 0x00, 0x1b, 0x01, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, // ....V.......=...
	0x53, 0x00, 0x00, 0x00, 0xcb, 0x02, 0x00, 0x00, 0xca, 0x02, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, // S...........Q...
	0x07, 0x00, 0x00, 0x00, 0xcd, 0x02, 0x00, 0x00, 0xa7, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xce, 0x02, 0x00, 0x00, 0xa7, 0x01, 0x00, 0x00, // Q...............
	0x01, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xcf, 0x02, 0x00, 0x00, // ....Q...........
	0xa7, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x50, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, // ........P.......
	0xd0, 0x02, 0x00, 0x00, 0xcd, 0x02, 0x00, 0x00, 0xce, 0x02, 0x00, 0x00, 0xcf, 0x02, 0x00, 0x00, // ................
	0x9e, 0x00, 0x00, 0x00, 0x91, 0x00, 0x05, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xd1, 0x02, 0x00, 0x00, // ................
	0xcb, 0x02, 0x00, 0x00, 0xd0, 0x02, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x0e, 0x00, 0x00, 0x00, // ................
	0xd2, 0x02, 0x00, 0x00, 0xc9, 0x02, 0x00, 0x00, 0xd1, 0x02, 0x00, 0x00, 0x4f, 0x00, 0x08, 0x00, // ............O...
	0x19, 0x00, 0x00, 0x00, 0xd3, 0x02, 0x00, 0x00, 0xd2, 0x02, 0x00, 0x00, 0xd2, 0x02, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, // ............A...
	0x59, 0x00, 0x00, 0x00, 0xac, 0x01, 0x00, 0x00, 0x56, 0x00, 0x00, 0x00, 0x36, 0x01, 0x00, 0x00, // Y.......V...6...
	0x9a, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0xad, 0x01, 0x00, 0x00, // ....=...........
	0xac, 0x01, 0x00, 0x00, 0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xae, 0x01, 0x00, 0x00, // ................
	0x9e, 0x00, 0x00, 0x00, 0xad, 0x01, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x59, 0x00, 0x00, 0x00, // ........A...Y...
	0xaf, 0x01, 0x00, 0x00, 0x56, 0x00, 0x00, 0x00, 0x36, 0x01, 0x00, 0x00, 0x9a, 0x00, 0x00, 0x00, // ....V...6.......
	0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0xb0, 0x01, 0x00, 0x00, 0xaf, 0x01, 0x00, 0x00, // =...............
	0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xb1, 0x01, 0x00, 0x00, 0x9e, 0x00, 0x00, 0x00, // ................
	0xb0, 0x01, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x59, 0x00, 0x00, 0x00, 0xb2, 0x01, 0x00, 0x00, // ....A...Y.......
	0x56, 0x00, 0x00, 0x00, 0x36, 0x01, 0x00, 0x00, 0x9a, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, // V...6.......=...
	0x07, 0x00, 0x00, 0x00, 0xb3, 0x01, 0x00, 0x00, 0xb2, 0x01, 0x00, 0x00, 0x88, 0x00, 0x05, 0x00, // ................
	0x07, 0x00, 0x00, 0x00, 0xb4, 0x01, 0x00, 0x00, 0x9e, 0x00, 0x00, 0x00, 0xb3, 0x01, 0x00, 0x00, // ................
	0x50, 0x00, 0x06, 0x00, 0x19, 0x00, 0x00, 0x00, 0xb5, 0x01, 0x00, 0x00, 0xae, 0x01, 0x00, 0x00, // P...............
	0xb1, 0x01, 0x00, 0x00, 0xb4, 0x01, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x19, 0x00, 0x00, 0x00, // ................
	0xb6, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0xd3, 0x02, 0x00, 0x00, // ................
	0xb5, 0x01, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xb7, 0x01, 0x00, 0x00, // ....Q...........
	0xb6, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // ........Q.......
	0xb8, 0x01, 0x00, 0x00, 0xb6, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, // ............Q...
	0x07, 0x00, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0xb6, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // ................
	0x50, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xba, 0x01, 0x00, 0x00, 0xb7, 0x01, 0x00, 0x00, // P...............
	0xb8, 0x01, 0x00, 0x00, 0xb9, 0x01, 0x00, 0x00, 0x9e, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x03, 0x00, // ............>...
	0x6f, 0x01, 0x00, 0x00, 0xba, 0x01, 0x00, 0x00, 0xfd, 0x00, 0x01, 0x00, 0x38, 0x00, 0x01, 0x00, // o...........8...
	0x00, 0x00, 0xb0, 0x00,                                                                         // ....
};
static const bgfx::EmbeddedShader fs_pp_stereo_anaglyph_lin_gamma_nodesat = BGFX_EMBEDDED_SHADER(fs_pp_stereo_anaglyph_lin_gamma_nodesat);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Build of fragment shader from fs_pp_stereo.sc to fs_pp_stereo_anaglyph_lin_gamma_dyndesat with options: ANAGLYPH DYNDESAT GAMMA NOSTEREO
static const uint8_t fs_pp_stereo_anaglyph_lin_gamma_dyndesat_mtl[4357] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x14, 0x74, // FSH.o.><.......t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, // ex_stereo_fbSamp
	0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x74, 0x65, // ler...........te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x54, 0x65, 0x78, 0x74, 0x75, // x_stereo_fbTextu
	0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x74, 0x65, 0x78, // re...........tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, // _stereo_depthSam
	0x70, 0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x74, // pler...........t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x54, // ex_stereo_depthT
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, // exture..........
	0x13, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, // .Stereo_MS_ZPD_Y
	0x41, 0x78, 0x69, 0x73, 0x12, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x77, // Axis...........w
	0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x01, 0x10, 0x00, 0x01, 0x00, 0x00, // _h_height.......
	0x00, 0x00, 0x00, 0x1a, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, // ....Stereo_LeftL
	0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x12, 0x01, // uminance_Gamma..
	0xa0, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // .........Stereo_
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, // RightLuminance_D
	0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x12, 0x01, 0xb0, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, // ynDesat.........
	0x00, 0x0e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, // ..Stereo_LeftMat
	0x14, 0x01, 0x20, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x53, 0x74, 0x65, 0x72, 0x65, // .. ........Stere
	0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x01, 0x60, 0x00, 0x04, 0x00, // o_RightMat..`...
	0x00, 0x00, 0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // .....tex_stereo_
	0x66, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x74, 0x65, 0x78, // fb...........tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x10, 0x00, 0x00, // _stereo_depth...
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x0f, 0x00, 0x00, 0x23, 0x69, 0x6e, 0x63, 0x6c, // ...........#incl
	0x75, 0x64, 0x65, 0x20, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x64, 0x6c, 0x69, // ude <metal_stdli
	0x62, 0x3e, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x73, 0x69, 0x6d, // b>.#include <sim
	0x64, 0x2f, 0x73, 0x69, 0x6d, 0x64, 0x2e, 0x68, 0x3e, 0x0a, 0x0a, 0x75, 0x73, 0x69, 0x6e, 0x67, // d/simd.h>..using
	0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x6d, 0x65, 0x74, 0x61, 0x6c, //  namespace metal
	0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, // ;..struct _Globa
	0x6c, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x53, // l.{.    float4 S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, // tereo_MS_ZPD_YAx
	0x69, 0x73, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x77, // is;.    float4 w
	0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, // _h_height;.    f
	0x6c, 0x6f, 0x61, 0x74, 0x34, 0x78, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, // loat4x4 Stereo_L
	0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, // eftMat;.    floa
	0x74, 0x34, 0x78, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, // t4x4 Stereo_Righ
	0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, // tMat;.    float4
	0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, //  Stereo_LeftLumi
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x20, 0x20, 0x20, // nance_Gamma;.   
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, //  float4 Stereo_R
	0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, // ightLuminance_Dy
	0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, // nDesat;.};..stru
	0x63, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, // ct xlatMtlMain_o
	0x75, 0x74, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, // ut.{.    float4 
	0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x20, 0x5b, // bgfx_FragData0 [
	0x5b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, // [color(0)]];.};.
	0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, // .struct xlatMtlM
	0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, // ain_in.{.    flo
	0x61, 0x74, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, // at2 v_texcoord0 
	0x5b, 0x5b, 0x75, 0x73, 0x65, 0x72, 0x28, 0x6c, 0x6f, 0x63, 0x6e, 0x30, 0x29, 0x5d, 0x5d, 0x3b, // [[user(locn0)]];
	0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x78, 0x6c, // .};..fragment xl
	0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x78, 0x6c, // atMtlMain_out xl
	0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x28, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, // atMtlMain(xlatMt
	0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x5b, 0x5b, 0x73, 0x74, // lMain_in in [[st
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x5d, 0x5d, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, // age_in]], consta
	0x6e, 0x74, 0x20, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x26, 0x20, 0x5f, 0x6d, 0x74, 0x6c, // nt _Global& _mtl
	0x5f, 0x75, 0x20, 0x5b, 0x5b, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, // _u [[buffer(0)]]
	0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, 0x6f, 0x61, // , texture2d<floa
	0x74, 0x3e, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, // t> tex_stereo_fb
	0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x2c, //  [[texture(0)]],
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, //  texture2d<float
	0x3e, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, // > tex_stereo_dep
	0x74, 0x68, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x31, 0x29, 0x5d, // th [[texture(1)]
	0x5d, 0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, // ], sampler tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, // tereo_fbSampler 
	0x5b, 0x5b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x2c, 0x20, // [[sampler(0)]], 
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // sampler tex_ster
	0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, // eo_depthSampler 
	0x5b, 0x5b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x31, 0x29, 0x5d, 0x5d, 0x29, 0x0a, // [[sampler(1)]]).
	0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, // {.    xlatMtlMai
	0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x3d, 0x20, 0x7b, 0x7d, 0x3b, 0x0a, // n_out out = {};.
	0x20, 0x20, 0x20, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x5f, 0x35, 0x39, 0x33, 0x20, 0x3d, 0x20, //     bool _593 = 
	0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, // _mtl_u.Stereo_MS
	0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x7a, 0x20, 0x21, 0x3d, 0x20, // _ZPD_YAxis.z != 
	0x30, 0x2e, 0x30, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, // 0.0;.    float _
	0x36, 0x35, 0x32, 0x20, 0x3d, 0x20, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x61, 0x78, 0x28, // 652 = fast::max(
	0x30, 0x2e, 0x30, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x77, 0x5f, 0x68, 0x5f, // 0.0, _mtl_u.w_h_
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x6c, // height.w + (_mtl
	0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, // _u.Stereo_MS_ZPD
	0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, // _YAxis.x * (1.0 
	0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, // - (1.0 / (0.5 + 
	0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, 0x6e, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, // (fast::min(fast:
	0x3a, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // :min(tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, // depth.sample(tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, // _stereo_depthSam
	0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, // pler, (in.v_texc
	0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2b, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, // oord0 + select(f
	0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, // loat2(0.5 * _mtl
	0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, // _u.Stereo_MS_ZPD
	0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, // _YAxis.x, 0.0), 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x20, // float2(0.0, 0.5 
	0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // * _mtl_u.Stereo_
	0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, // MS_ZPD_YAxis.x),
	0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x35, 0x39, 0x33, 0x29, 0x29, 0x29, 0x2c, 0x20, //  bool2(_593))), 
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x2c, 0x20, 0x74, // level(0.0)).x, t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, // ex_stereo_depth.
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // sample(tex_stere
	0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, // o_depthSampler, 
	0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, // (in.v_texcoord0 
	0x2b, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, // + select(float2(
	0x30, 0x2e, 0x36, 0x36, 0x36, 0x30, 0x30, 0x30, 0x30, 0x30, 0x38, 0x35, 0x38, 0x33, 0x30, 0x36, // 0.66600000858306
	0x38, 0x38, 0x34, 0x37, 0x36, 0x35, 0x36, 0x32, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, // 884765625 * _mtl
	0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, // _u.Stereo_MS_ZPD
	0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, // _YAxis.x, 0.0), 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, // float2(0.0, 0.66
	0x36, 0x30, 0x30, 0x30, 0x30, 0x30, 0x38, 0x35, 0x38, 0x33, 0x30, 0x36, 0x38, 0x38, 0x34, 0x37, // 6000008583068847
	0x36, 0x35, 0x36, 0x32, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, // 65625 * _mtl_u.S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, // tereo_MS_ZPD_YAx
	0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x35, 0x39, // is.x), bool2(_59
	0x33, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, // 3))), level(0.0)
	0x29, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // ).x), tex_stereo
	0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, // _depth.sample(te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, // x_stereo_depthSa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, // mpler, (in.v_tex
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2b, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, // coord0 + select(
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, // float2(_mtl_u.St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, // ereo_MS_ZPD_YAxi
	0x73, 0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // s.x, 0.0), float
	0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, // 2(0.0, _mtl_u.St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, // ereo_MS_ZPD_YAxi
	0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x35, 0x39, 0x33, // s.x), bool2(_593
	0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, // ))), level(0.0))
	0x2e, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x5f, 0x6d, // .x) * ((1.0 / _m
	0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, // tl_u.Stereo_MS_Z
	0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, // PD_YAxis.y) - 0.
	0x35, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, // 5)))))));.    fl
	0x6f, 0x61, 0x74, 0x20, 0x5f, 0x37, 0x32, 0x32, 0x20, 0x3d, 0x20, 0x66, 0x61, 0x73, 0x74, 0x3a, // oat _722 = fast:
	0x3a, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, // :max(0.0, _mtl_u
	0x2e, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, // .w_h_height.w + 
	0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, // (_mtl_u.Stereo_M
	0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x20, 0x2a, 0x20, // S_ZPD_YAxis.x * 
	0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, // (1.0 - (1.0 / (0
	0x2e, 0x35, 0x20, 0x2b, 0x20, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, 0x6e, 0x28, // .5 + (fast::min(
	0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // fast::min(tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, // ereo_depth.sampl
	0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, // e(tex_stereo_dep
	0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, 0x6e, 0x2e, 0x76, // thSampler, (in.v
	0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2d, 0x20, 0x73, 0x65, 0x6c, // _texcoord0 - sel
	0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2a, // ect(float2(0.5 *
	0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, //  _mtl_u.Stereo_M
	0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, 0x20, 0x30, // S_ZPD_YAxis.x, 0
	0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, // .0), float2(0.0,
	0x20, 0x30, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, //  0.5 * _mtl_u.St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, // ereo_MS_ZPD_YAxi
	0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x35, 0x39, 0x33, // s.x), bool2(_593
	0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, // ))), level(0.0))
	0x2e, 0x78, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, // .x, tex_stereo_d
	0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, // epth.sample(tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, // stereo_depthSamp
	0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, // ler, (in.v_texco
	0x6f, 0x72, 0x64, 0x30, 0x20, 0x2d, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, // ord0 - select(fl
	0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x30, 0x30, 0x30, 0x30, 0x30, 0x38, // oat2(0.666000008
	0x35, 0x38, 0x33, 0x30, 0x36, 0x38, 0x38, 0x34, 0x37, 0x36, 0x35, 0x36, 0x32, 0x35, 0x20, 0x2a, // 58306884765625 *
	0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, //  _mtl_u.Stereo_M
	0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, 0x20, 0x30, // S_ZPD_YAxis.x, 0
	0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, // .0), float2(0.0,
	0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x30, 0x30, 0x30, 0x30, 0x30, 0x38, 0x35, 0x38, 0x33, 0x30, //  0.6660000085830
	0x36, 0x38, 0x38, 0x34, 0x37, 0x36, 0x35, 0x36, 0x32, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, // 6884765625 * _mt
	0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, // l_u.Stereo_MS_ZP
	0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, // D_YAxis.x), bool
	0x32, 0x28, 0x5f, 0x35, 0x39, 0x33, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, // 2(_593))), level
	0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, // (0.0)).x), tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, 0x6d, 0x70, // tereo_depth.samp
	0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, // le(tex_stereo_de
	0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, 0x6e, 0x2e, // pthSampler, (in.
	0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2d, 0x20, 0x73, 0x65, // v_texcoord0 - se
	0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x5f, 0x6d, 0x74, 0x6c, // lect(float2(_mtl
	0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, // _u.Stereo_MS_ZPD
	0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, // _YAxis.x, 0.0), 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, // float2(0.0, _mtl
	0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, // _u.Stereo_MS_ZPD
	0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, // _YAxis.x), bool2
	0x28, 0x5f, 0x35, 0x39, 0x33, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, // (_593))), level(
	0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x31, 0x2e, 0x30, // 0.0)).x) * ((1.0
	0x20, 0x2f, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, //  / _mtl_u.Stereo
	0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, // _MS_ZPD_YAxis.y)
	0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x20, //  - 0.5)))))));. 
	0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x35, 0x32, 0x30, 0x20, 0x3d, //    float3 _520 =
	0x20, 0x70, 0x6f, 0x77, 0x72, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, //  powr(tex_stereo
	0x5f, 0x66, 0x62, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, // _fb.sample(tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, // tereo_fbSampler,
	0x20, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, //  (in.v_texcoord0
	0x20, 0x2b, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, //  + select(float2
	0x28, 0x5f, 0x36, 0x35, 0x32, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, // (_652, 0.0), flo
	0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x5f, 0x36, 0x35, 0x32, 0x29, 0x2c, // at2(0.0, -_652),
	0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x35, 0x39, 0x33, 0x29, 0x29, 0x29, 0x2c, 0x20, //  bool2(_593))), 
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x2c, // level(0.0)).xyz,
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, //  float3(_mtl_u.S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, // tereo_LeftLumina
	0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, 0x5f, 0x6d, 0x74, // nce_Gamma.w, _mt
	0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, // l_u.Stereo_LeftL
	0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, // uminance_Gamma.w
	0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // , _mtl_u.Stereo_
	0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, // LeftLuminance_Ga
	0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, // mma.w));.    flo
	0x61, 0x74, 0x33, 0x20, 0x5f, 0x35, 0x32, 0x39, 0x20, 0x3d, 0x20, 0x70, 0x6f, 0x77, 0x72, 0x28, // at3 _529 = powr(
	0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2e, 0x73, 0x61, // tex_stereo_fb.sa
	0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // mple(tex_stereo_
	0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, 0x6e, 0x2e, 0x76, // fbSampler, (in.v
	0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2d, 0x20, 0x73, 0x65, 0x6c, // _texcoord0 - sel
	0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x5f, 0x37, 0x32, 0x32, 0x2c, // ect(float2(_722,
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, //  0.0), float2(0.
	0x30, 0x2c, 0x20, 0x2d, 0x5f, 0x37, 0x32, 0x32, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, // 0, -_722), bool2
	0x28, 0x5f, 0x35, 0x39, 0x33, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, // (_593))), level(
	0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // 0.0)).xyz, float
	0x33, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // 3(_mtl_u.Stereo_
	0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, // LeftLuminance_Ga
	0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, // mma.w, _mtl_u.St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, // ereo_LeftLuminan
	0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, // ce_Gamma.w, _mtl
	0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, // _u.Stereo_LeftLu
	0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x29, // minance_Gamma.w)
	0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x38, 0x33, // );.    float _83
	0x36, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x5f, 0x35, 0x32, 0x30, 0x2c, 0x20, 0x5f, 0x6d, // 6 = dot(_520, _m
	0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, // tl_u.Stereo_Left
	0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, // Luminance_Gamma.
	0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // xyz);.    float 
	0x5f, 0x38, 0x34, 0x30, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x5f, 0x35, 0x32, 0x30, 0x2c, // _840 = dot(_520,
	0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, //  _mtl_u.Stereo_R
	0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, // ightLuminance_Dy
	0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, // nDesat.xyz);.   
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x38, 0x34, 0x34, 0x20, 0x3d, 0x20, 0x64, 0x6f, //  float _844 = do
	0x74, 0x28, 0x5f, 0x35, 0x32, 0x39, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, // t(_529, _mtl_u.S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, // tereo_LeftLumina
	0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, // nce_Gamma.xyz);.
	0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x38, 0x34, 0x38, 0x20, 0x3d, //     float _848 =
	0x20, 0x64, 0x6f, 0x74, 0x28, 0x5f, 0x35, 0x32, 0x39, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, //  dot(_529, _mtl_
	0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // u.Stereo_RightLu
	0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, // minance_DynDesat
	0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // .xyz);.    float
	0x20, 0x5f, 0x38, 0x35, 0x31, 0x20, 0x3d, 0x20, 0x5f, 0x38, 0x33, 0x36, 0x20, 0x2b, 0x20, 0x5f, //  _851 = _836 + _
	0x38, 0x34, 0x30, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, // 840;.    float _
	0x38, 0x35, 0x34, 0x20, 0x3d, 0x20, 0x5f, 0x38, 0x34, 0x34, 0x20, 0x2b, 0x20, 0x5f, 0x38, 0x34, // 854 = _844 + _84
	0x38, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x38, // 8;.    float3 _8
	0x39, 0x34, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x5f, 0x35, 0x32, 0x30, 0x2c, 0x20, 0x66, // 94 = mix(_520, f
	0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x38, 0x35, 0x31, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, // loat3(_851), flo
	0x61, 0x74, 0x33, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, // at3(_mtl_u.Stere
	0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, // o_RightLuminance
	0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, // _DynDesat.w * ab
	0x73, 0x28, 0x28, 0x5f, 0x38, 0x33, 0x36, 0x20, 0x2d, 0x20, 0x5f, 0x38, 0x34, 0x30, 0x29, 0x20, // s((_836 - _840) 
	0x2f, 0x20, 0x28, 0x5f, 0x38, 0x35, 0x31, 0x20, 0x2b, 0x20, 0x39, 0x2e, 0x39, 0x39, 0x39, 0x39, // / (_851 + 9.9999
	0x39, 0x39, 0x37, 0x34, 0x37, 0x33, 0x37, 0x38, 0x37, 0x35, 0x31, 0x36, 0x33, 0x35, 0x35, 0x35, // 9974737875163555
	0x31, 0x34, 0x35, 0x32, 0x36, 0x33, 0x36, 0x37, 0x31, 0x38, 0x38, 0x65, 0x2d, 0x30, 0x35, 0x29, // 14526367188e-05)
	0x29, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, // )));.    float3 
	0x5f, 0x39, 0x30, 0x34, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x5f, 0x35, 0x32, 0x39, 0x2c, // _904 = mix(_529,
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x38, 0x35, 0x34, 0x29, 0x2c, 0x20, 0x66, //  float3(_854), f
	0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, // loat3(_mtl_u.Ste
	0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, // reo_RightLuminan
	0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, // ce_DynDesat.w * 
	0x61, 0x62, 0x73, 0x28, 0x28, 0x5f, 0x38, 0x34, 0x34, 0x20, 0x2d, 0x20, 0x5f, 0x38, 0x34, 0x38, // abs((_844 - _848
	0x29, 0x20, 0x2f, 0x20, 0x28, 0x5f, 0x38, 0x35, 0x34, 0x20, 0x2b, 0x20, 0x39, 0x2e, 0x39, 0x39, // ) / (_854 + 9.99
	0x39, 0x39, 0x39, 0x39, 0x37, 0x34, 0x37, 0x33, 0x37, 0x38, 0x37, 0x35, 0x31, 0x36, 0x33, 0x35, // 9999747378751635
	0x35, 0x35, 0x31, 0x34, 0x35, 0x32, 0x36, 0x33, 0x36, 0x37, 0x31, 0x38, 0x38, 0x65, 0x2d, 0x30, // 5514526367188e-0
	0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x6f, 0x75, 0x74, 0x2e, 0x62, // 5))));.    out.b
	0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x20, 0x3d, 0x20, // gfx_FragData0 = 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x70, 0x6f, 0x77, 0x72, 0x28, 0x28, 0x28, 0x66, 0x6c, // float4(powr(((fl
	0x6f, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x38, 0x39, 0x34, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, // oat4(_894, 1.0) 
	0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // * _mtl_u.Stereo_
	0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, // LeftMat) + (floa
	0x74, 0x34, 0x28, 0x5f, 0x39, 0x30, 0x34, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2a, 0x20, // t4(_904, 1.0) * 
	0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, // _mtl_u.Stereo_Ri
	0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x66, 0x6c, // ghtMat)).xyz, fl
	0x6f, 0x61, 0x74, 0x33, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, // oat3(1.0 / _mtl_
	0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // u.Stereo_LeftLum
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, // inance_Gamma.w, 
	0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, // 1.0 / _mtl_u.Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, // reo_LeftLuminanc
	0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, // e_Gamma.w, 1.0 /
	0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, //  _mtl_u.Stereo_L
	0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, // eftLuminance_Gam
	0x6d, 0x61, 0x2e, 0x77, 0x29, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, // ma.w)), 1.0);.  
	0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6f, 0x75, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, //   return out;.}.
	0x0a, 0x00, 0x00, 0x00, 0x01,                                                                   // .....
};
static const uint8_t fs_pp_stereo_anaglyph_lin_gamma_dyndesat_essl[11059] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x2b, // FSH.o.><...... +
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x33, 0x32, 0x30, 0x20, 0x65, // ..#version 320 e
	0x73, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, // s.#define attrib
	0x75, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x76, // ute in.#define v
	0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, // arying in.precis
	0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3b, // ion highp float;
	0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, // .precision highp
	0x20, 0x69, 0x6e, 0x74, 0x3b, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x73, 0x68, //  int;.#define sh
	0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, // adow2D(_sampler,
	0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, //  _coord) texture
	0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, // (_sampler, _coor
	0x64, 0x29, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x73, 0x68, 0x61, 0x64, 0x6f, // d).#define shado
	0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // w2DProj(_sampler
	0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // , _coord) textur
	0x65, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, // eProj(_sampler, 
	0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x0a, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x65, 0x64, 0x69, // _coord).out medi
	0x75, 0x6d, 0x70, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, // ump vec4 bgfx_Fr
	0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, // agColor;.varying
	0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, //  vec2 v_texcoord
	0x30, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, // 0;.vec3 instMul(
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x20, // vec3 _vec, mat3 
	0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // _mtx) { return (
	0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, //  (_vec) * (_mtx)
	0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, //  ); }.vec3 instM
	0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, // ul(mat3 _mtx, ve
	0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, // c3 _vec) { retur
	0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, // n ( (_mtx) * (_v
	0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, // ec) ); }.vec4 in
	0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, // stMul(vec4 _vec,
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, //  mat4 _mtx) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, // turn ( (_vec) * 
	0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, // (_mtx) ); }.vec4
	0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, //  instMul(mat4 _m
	0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, // tx, vec4 _vec) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, //  return ( (_mtx)
	0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, //  * (_vec) ); }.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, 0x70, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, // loat rcp(float _
	0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x2f, // a) { return 1.0/
	0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, // _a; }.vec2 rcp(v
	0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // ec2 _a) { return
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, //  vec2(1.0)/_a; }
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, // .vec3 rcp(vec3 _
	0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, // a) { return vec3
	0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, // (1.0)/_a; }.vec4
	0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, //  rcp(vec4 _a) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x31, 0x2e, 0x30, 0x29, // return vec4(1.0)
	0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x65, 0x63, 0x32, // /_a; }.vec2 vec2
	0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, // _splat(float _x)
	0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, //  { return vec2(_
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, // x, _x); }.vec3 v
	0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // ec3_splat(float 
	0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, // _x) { return vec
	0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, // 3(_x, _x, _x); }
	0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, // .vec4 vec4_splat
	0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // (float _x) { ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, // urn vec4(_x, _x,
	0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, //  _x, _x); }.uvec
	0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, // 2 uvec2_splat(ui
	0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // nt _x) { return 
	0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, // uvec2(_x, _x); }
	0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, // .uvec3 uvec3_spl
	0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // at(uint _x) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, // turn uvec3(_x, _
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x34, 0x20, // x, _x); }.uvec4 
	0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, // uvec4_splat(uint
	0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, //  _x) { return uv
	0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, // ec4(_x, _x, _x, 
	0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, // _x); }.mat4 mtxF
	0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, // romRows(vec4 _0,
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, //  vec4 _1, vec4 _
	0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // 2, vec4 _3).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, // turn transpose(m
	0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, // at4(_0, _1, _2, 
	0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, // _3) );.}.mat4 mt
	0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, // xFromCols(vec4 _
	0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // 0, vec4 _1, vec4
	0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, //  _2, vec4 _3).{.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, // return mat4(_0, 
	0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, // _1, _2, _3);.}.m
	0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, // at3 mtxFromRows(
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, // vec3 _0, vec3 _1
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // , vec3 _2).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, // urn transpose(ma
	0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x20, 0x29, // t3(_0, _1, _2) )
	0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, // ;.}.mat3 mtxFrom
	0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, // Cols(vec3 _0, ve
	0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, // c3 _1, vec3 _2).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, // {.return mat3(_0
	0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, // , _1, _2);.}.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, // form vec4 u_view
	0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, // Rect;.uniform ve
	0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x54, 0x65, 0x78, 0x65, 0x6c, 0x3b, 0x0a, // c4 u_viewTexel;.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, // uniform mat4 u_v
	0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, // iew;.uniform mat
	0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, // 4 u_invView;.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x70, 0x72, 0x6f, 0x6a, // form mat4 u_proj
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, // ;.uniform mat4 u
	0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // _invProj;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, // m mat4 u_viewPro
	0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, // j;.uniform mat4 
	0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, // u_invViewProj;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, // niform mat4 u_mo
	0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // del[32];.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, //  mat4 u_modelVie
	0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, // w;.uniform mat4 
	0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, // u_modelViewProj;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, // .uniform vec4 u_
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x66, 0x34, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // alphaRef4;.float
	0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, //  sqr( float v).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // .return v*v;.}.v
	0x65, 0x63, 0x32, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x29, // ec2 sqr( vec2 v)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, // .{.return v*v;.}
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // .vec3 sqr( vec3 
	0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, // v).{.return v*v;
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6d, 0x75, 0x6c, 0x5f, 0x77, 0x31, 0x28, 0x20, // .}.vec3 mul_w1( 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x29, 0x0a, // vec3 v, mat4 m).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2e, 0x78, 0x2a, 0x6d, 0x5b, 0x30, // {.return v.x*m[0
	0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x79, 0x2a, 0x6d, 0x5b, 0x31, // ].xyz + (v.y*m[1
	0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x7a, 0x2a, 0x6d, 0x5b, 0x32, // ].xyz + (v.z*m[2
	0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x6d, 0x5b, 0x33, 0x5d, 0x2e, 0x78, 0x79, 0x7a, // ].xyz + m[3].xyz
	0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x63, 0x6f, 0x73, // ));.}.float acos
	0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x20, 0x66, // _approx_divPI( f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // loat v).{.float 
	0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, // x = abs(v);.if(1
	0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, // . - x <= 0.00006
	0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // 103515625).retur
	0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, // n (v >= 0.) ? 0.
	0x20, 0x3a, 0x20, 0x31, 0x2e, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, //  : 1.;.float res
	0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, //  = ((-0.155972/3
	0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, // .141592653589793
	0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, // 2384626433832795
	0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, // ) * x + (1.56467
	0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, // /3.1415926535897
	0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, // 9323846264338327
	0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, // 95) ) * sqrt(1. 
	0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, // - x);.return (v 
	0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x31, // >= 0.) ? res : 1
	0x2e, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // . - res;.}.float
	0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, //  atan2_approx_di
	0x76, 0x32, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x79, 0x2c, 0x20, 0x66, // v2PI( float y, f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // loat x).{.float 
	0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x79, 0x29, 0x3b, 0x0a, // abs_y = abs(y);.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, // float abs_x = ab
	0x73, 0x28, 0x78, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3c, // s(x);.if(abs_x <
	0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, // = 0.000061035156
	0x32, 0x35, 0x20, 0x26, 0x26, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3c, 0x3d, 0x20, 0x30, // 25 && abs_y <= 0
	0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, // .00006103515625)
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x30, 0x2e, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // .return 0.;.floa
	0x74, 0x20, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2d, 0x20, 0x61, // t r = (abs_x - a
	0x62, 0x73, 0x5f, 0x79, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2b, // bs_y) / (abs_x +
	0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, //  abs_y);.float a
	0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, // ngle = ((x < 0.)
	0x20, 0x3f, 0x20, 0x28, 0x33, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x20, 0x3a, 0x20, 0x28, 0x31, 0x2e, //  ? (3./8.) : (1.
	0x2f, 0x38, 0x2e, 0x29, 0x29, 0x0a, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x32, 0x31, 0x31, 0x38, 0x36, // /8.)).+ (0.21186
	0x38, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, // 8 /(2.*3.1415926
	0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, // 5358979323846264
	0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x72, 0x20, 0x2a, 0x20, // 33832795) * r * 
	0x72, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x39, 0x38, 0x37, 0x33, 0x30, 0x35, 0x20, 0x2f, 0x28, 0x32, // r - 0.987305 /(2
	0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, // .*3.141592653589
	0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, // 7932384626433832
	0x37, 0x39, 0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, // 795)) * ((x < 0.
	0x29, 0x20, 0x3f, 0x20, 0x2d, 0x72, 0x20, 0x3a, 0x20, 0x72, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, // ) ? -r : r);.ret
	0x75, 0x72, 0x6e, 0x20, 0x28, 0x79, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, // urn (y < 0.) ? -
	0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3a, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x3b, 0x0a, 0x7d, // angle : angle;.}
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x73, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x72, // .float asin_appr
	0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // ox_divPI( float 
	0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, // v).{.float x = a
	0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, // bs(v);.if(1. - x
	0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, //  <= 0.0000610351
	0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, // 5625).return (v 
	0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x3a, 0x20, 0x2d, // >= 0.) ? 0.5 : -
	0x30, 0x2e, 0x35, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, // 0.5;.float res =
	0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, //  ((-0.155972/3.1
	0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, // 4159265358979323
	0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, // 84626433832795) 
	0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, // * x + (1.56467/3
	0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, // .141592653589793
	0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, // 2384626433832795
	0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, // ) ) * sqrt(1. - 
	0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, // x);.return (v >=
	0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, //  0.) ? 0.5 - res
	0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, //  : -0.5 + res;.}
	0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x61, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x71, 0x75, // .vec2 ray_to_equ
	0x69, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x75, 0x76, 0x28, // irectangular_uv(
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x61, 0x79, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, //  vec3 ray).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x0a, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, // urn vec2(.0.5 + 
	0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, // atan2_approx_div
	0x32, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x79, 0x2c, 0x20, 0x72, 0x61, 0x79, 0x2e, 0x78, // 2PI(ray.y, ray.x
	0x29, 0x2c, 0x0a, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, // ),.acos_approx_d
	0x69, 0x76, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // ivPI(ray.z));.}.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x20, 0x66, // float InvsRGB( f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, // loat color).{.if
	0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, //  (color <= 0.040
	0x34, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // 45).return color
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x29, 0x3b, 0x0a, //  * (1.0/12.92);.
	0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, // else.return pow(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, // color * (1.0/1.0
	0x35, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x2f, 0x31, 0x2e, 0x30, // 55) + (0.055/1.0
	0x35, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // 55), 2.4);.}.flo
	0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x20, 0x66, 0x6c, // at InvRec709( fl
	0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, // oat color).{.if 
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x38, 0x31, 0x29, // (color <= 0.081)
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, // .return color * 
	0x28, 0x31, 0x2e, 0x30, 0x2f, 0x34, 0x2e, 0x35, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, // (1.0/4.5);.else.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // return pow(color
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, 0x20, 0x2b, //  * (1.0/1.099) +
	0x20, 0x28, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, 0x2c, 0x20, //  (0.099/1.099), 
	0x31, 0x2e, 0x30, 0x2f, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // 1.0/0.45);.}.flo
	0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x66, 0x6c, 0x6f, // at InvGamma( flo
	0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, // at color).{.retu
	0x72, 0x6e, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // rn InvsRGB(color
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, // );.}.vec3 InvGam
	0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, // ma( vec3 color).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x49, 0x6e, // {.return vec3(In
	0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, // vGamma(color.x),
	0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, // InvGamma(color.y
	0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // ),InvGamma(color
	0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, // .z));.}.vec3 Inv
	0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, // ToneMap( vec3 co
	0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x69, 0x6e, 0x76, // lor).{.float inv
	0x5f, 0x32, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x30, 0x2e, 0x35, 0x2f, 0x30, 0x2e, 0x32, 0x35, 0x3b, // _2bh = 0.5/0.25;
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x34, 0x2e, 0x30, 0x2a, // .float bh = 4.0*
	0x30, 0x2e, 0x32, 0x35, 0x20, 0x2d, 0x20, 0x32, 0x2e, 0x30, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // 0.25 - 2.0;.retu
	0x72, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, // rn (color - 1.0 
	0x2b, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2a, 0x28, 0x63, 0x6f, // + sqrt(color*(co
	0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x20, 0x62, 0x68, 0x29, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, // lor + bh) + 1.0)
	0x29, 0x2a, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // )*inv_2bh;.}.flo
	0x61, 0x74, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, // at sRGB( float f
	0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, // ).{.float s;.if 
	0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x33, 0x31, 0x33, 0x30, 0x38, 0x29, // (f <= 0.0031308)
	0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, // .s = 12.92 * f;.
	0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x20, 0x2a, // else.s = 1.055 *
	0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x34, 0x29, //  pow(f, 1.0/2.4)
	0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, //  - 0.055;.return
	0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x52, 0x65, 0x63, 0x37, //  s;.}.float Rec7
	0x30, 0x39, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, // 09( float f).{.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, // loat s;.if (f <=
	0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x34, 0x2e, 0x35, 0x20, //  0.018).s = 4.5 
	0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, // * f;.else.s = 1.
	0x30, 0x39, 0x39, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x34, // 099 * pow(f, 0.4
	0x35, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // 5) - 0.099;.retu
	0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, // rn s;.}.float FB
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, // Gamma( float col
	0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x52, 0x47, // or).{.return sRG
	0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, // B(color);.}.vec2
	0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, //  FBGamma( vec2 c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // olor).{.return v
	0x65, 0x63, 0x32, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // ec2(FBGamma(colo
	0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, // r.x),FBGamma(col
	0x6f, 0x72, 0x2e, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, // or.y));.}.vec3 F
	0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, // BGamma( vec3 col
	0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, // or).{.return vec
	0x33, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, // 3(FBGamma(color.
	0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // x),FBGamma(color
	0x2e, 0x79, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // .y),FBGamma(colo
	0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, // r.z));.}.vec3 FB
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x32, 0x32, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, // Gamma22( vec3 co
	0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, // lor).{.return ve
	0x63, 0x33, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x2c, 0x20, // c3(pow(color.x, 
	0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, // 1.0/2.2),pow(col
	0x6f, 0x72, 0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, // or.y, 1.0/2.2),p
	0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, // ow(color.z, 1.0/
	0x32, 0x2e, 0x32, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, // 2.2));.}.float F
	0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // BToneMap( float 
	0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6c, 0x20, 0x2a, 0x20, // l).{.return l * 
	0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, // ((l*0.25 + 1.0) 
	0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // / (l + 1.0));.}.
	0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, // vec2 FBToneMap( 
	0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, // vec2 color).{.fl
	0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // oat l = dot(colo
	0x72, 0x2c, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2b, // r,vec2(0.176204+
	0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x2c, 0x30, 0x2e, // 0.0108109*0.5,0.
	0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, // 812985+0.0108109
	0x2a, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, // *0.5));.return c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, // olor * ((l*0.25 
	0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, // + 1.0) / (l + 1.
	0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x54, 0x6f, // 0));.}.vec3 FBTo
	0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // neMap( vec3 colo
	0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, // r).{.float l = d
	0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, // ot(color,vec3(0.
	0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2c, // 176204,0.812985,
	0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, // 0.0108109));.ret
	0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, // urn color * ((l*
	0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, // 0.25 + 1.0) / (l
	0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, //  + 1.0));.}.vec4
	0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, //  Additive( vec4 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, // cBase, vec4 cBle
	0x6e, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, // nd, float percen
	0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, // t).{.return cBas
	0x65, 0x20, 0x2b, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, // e + cBlend*perce
	0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, // nt;.}.vec3 Scree
	0x6e, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, // n ( vec3 cBase, 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, // vec3 cBlend).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, // eturn 1.0 - (1.0
	0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, //  - cBase) * (1.0
	0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, //  - cBlend);.}.ve
	0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, // c4 Screen ( vec4
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, //  cBase, vec4 cBl
	0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, // end).{.return 1.
	0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, // 0 - (1.0 - cBase
	0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // ) * (1.0 - cBlen
	0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, // d);.}.vec3 Scree
	0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, // nHDR ( vec3 cBas
	0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, // e, vec3 cBlend).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, // {.return max(1.0
	0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, //  - (1.0 - cBase)
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, //  * (1.0 - cBlend
	0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, // ), vec3(0.,0.,0.
	0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, // ));.}.vec4 Scree
	0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, // nHDR ( vec4 cBas
	0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, // e, vec4 cBlend).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, // {.return max(1.0
	0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, //  - (1.0 - cBase)
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, //  * (1.0 - cBlend
	0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, // ), vec4(0.,0.,0.
	0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4d, 0x75, // ,0.));.}.vec4 Mu
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // ltiply ( vec4 cB
	0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, // ase, vec4 cBlend
	0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, // , float percent)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, // .{.return cBase 
	0x2a, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, // * cBlend*percent
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, // ;.}.vec4 Overlay
	0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, //  ( vec4 cBase, v
	0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, // ec4 cBlend).{.ve
	0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, // c4 cNew = step(0
	0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, // .5, cBase);.cNew
	0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, //  = mix(cBase*cBl
	0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, // end*2.0, 1.0-2.0
	0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, // *(1.0-cBase)*(1.
	0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, // 0-cBlend), cNew)
	0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, // ;.return cNew;.}
	0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x48, 0x44, 0x52, // .vec4 OverlayHDR
	0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, //  ( vec4 cBase, v
	0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, // ec4 cBlend).{.ve
	0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, // c4 cNew = step(0
	0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, // .5, cBase);.cNew
	0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, //  = max(mix(cBase
	0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, // *cBlend*2.0, 1.0
	0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, // -2.0*(1.0-cBase)
	0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, // *(1.0-cBlend), c
	0x4e, 0x65, 0x77, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, // New), vec4(0.,0.
	0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // ,0.,0.));.return
	0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, //  cNew;.}.vec3 co
	0x73, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x5f, 0x73, 0x61, 0x6d, // s_hemisphere_sam
	0x70, 0x6c, 0x65, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x66, // ple( vec2 t).{.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x68, 0x69, 0x20, 0x3d, 0x20, 0x74, 0x2e, 0x79, 0x20, 0x2a, // loat phi = t.y *
	0x20, 0x28, 0x32, 0x2e, 0x30, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, //  (2.0*3.14159265
	0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, // 3589793238462643
	0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // 3832795);.float 
	0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, // cosTheta = sqrt(
	0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // 1.0 - t.x);.floa
	0x74, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, // t sinTheta = sqr
	0x74, 0x28, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x70, // t(t.x);.float sp
	0x2c, 0x63, 0x70, 0x3b, 0x0a, 0x7b, 0x73, 0x70, 0x3d, 0x73, 0x69, 0x6e, 0x28, 0x70, 0x68, 0x69, // ,cp;.{sp=sin(phi
	0x29, 0x3b, 0x63, 0x70, 0x3d, 0x63, 0x6f, 0x73, 0x28, 0x70, 0x68, 0x69, 0x29, 0x3b, 0x7d, 0x3b, // );cp=cos(phi);};
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x63, 0x70, 0x20, // .return vec3(cp 
	0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x63, 0x6f, 0x73, 0x54, // * sinTheta, cosT
	0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x73, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, // heta, sp * sinTh
	0x65, 0x74, 0x61, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x6f, 0x74, // eta);.}.vec3 rot
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x70, // ate_to_vector_up
	0x70, 0x65, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x76, // per( vec3 vec, v
	0x65, 0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, // ec3 normal).{.if
	0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x3e, 0x20, 0x2d, 0x30, 0x2e, 0x39, // (normal.y > -0.9
	0x39, 0x39, 0x39, 0x39, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x20, // 9999).{.float h 
	0x3d, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x28, 0x31, 0x2e, 0x30, 0x2b, 0x6e, 0x6f, 0x72, 0x6d, 0x61, // = 1.0/(1.0+norma
	0x6c, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x20, 0x3d, // l.y);.float hz =
	0x20, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, //  h*normal.z;.flo
	0x61, 0x74, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x3d, 0x20, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, // at hzx = hz*norm
	0x61, 0x6c, 0x2e, 0x78, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, // al.x;.return vec
	0x33, 0x28, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, // 3(.vec.x * (norm
	0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, // al.y+hz*normal.z
	0x29, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, // ) + vec.y * norm
	0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x68, // al.x - vec.z * h
	0x7a, 0x78, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, // zx,.vec.y * norm
	0x61, 0x6c, 0x2e, 0x79, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x6e, // al.y - vec.x * n
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, // ormal.x - vec.z 
	0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, // * normal.z,.vec.
	0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x20, 0x2d, 0x20, 0x76, // y * normal.z - v
	0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, // ec.x * hzx + vec
	0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, // .z * (normal.y+h
	0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, // *normal.x*normal
	0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x72, 0x65, 0x74, // .x));.}.else ret
	0x75, 0x72, 0x6e, 0x20, 0x2d, 0x76, 0x65, 0x63, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, // urn -vec;.}.unif
	0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // orm vec4 Stereo_
	0x53, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // Saturation;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // orm vec4 Stereo_
	0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x3b, 0x0a, 0x75, 0x6e, // MS_ZPD_YAxis;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x20, // iform sampler2D 
	0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x3b, 0x0a, 0x75, // tex_stereo_fb;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, // niform sampler2D
	0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, //  tex_stereo_dept
	0x68, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // h;.uniform vec4 
	0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, // w_h_height;.vec3
	0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x28, //  gatherEyeColor(
	0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x69, 0x73, 0x4c, // vec2 u, bool isL
	0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x79, 0x61, 0x78, 0x69, // eft).{.bool yaxi
	0x73, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, // s = (Stereo_MS_Z
	0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x7a, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, // PD_YAxis.z != 0.
	0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, // );.float MaxSepa
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // ration = (Stereo
	0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, // _MS_ZPD_YAxis.x)
	0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, 0x0a, // ;.if (isLeft).{.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, // float lminDepth 
	0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // = min(min(textur
	0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // eLod(tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, // depth, u + (yaxi
	0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, // s ? vec2(0.0, 0.
	0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // 500 * MaxSeparat
	0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, // ion) : vec2(0.50
	0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, // 0 * MaxSeparatio
	0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, // n, 0.0)), 0.0).x
	0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, // ,.textureLod(tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, // _stereo_depth, u
	0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, //  + (yaxis ? vec2
	0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, // (0.0, 0.666 * Ma
	0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, // xSeparation) : v
	0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, // ec2(0.666 * MaxS
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, // eparation, 0.0))
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, // , 0.0).x),.textu
	0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // reLod(tex_stereo
	0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, // _depth, u + (yax
	0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, // is ? vec2(0.0, M
	0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, // axSeparation) : 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // vec2( MaxSeparat
	0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // ion, 0.0)), 0.0)
	0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x70, 0x61, 0x72, 0x61, // .x);.float lpara
	0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, // llax = max(0.0, 
	0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, // w_h_height.w + M
	0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, // axSeparation * (
	0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, // 1.0 - 1.0 / (0.5
	0x20, 0x2b, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, //  + lminDepth * (
	0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, // 1.0 / (Stereo_MS
	0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, // _ZPD_YAxis.y) - 
	0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // 0.5))));.return 
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, // textureLod(tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, // tereo_fb, u + (y
	0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, // axis ? vec2(0.0,
	0x20, 0x2d, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, //  -lparallax) : v
	0x65, 0x63, 0x32, 0x28, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, // ec2(lparallax, 0
	0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, // .0)), 0.0).xyz;.
	0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, // }.else.{.float r
	0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, // minDepth = min(m
	0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, // in(textureLod(te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, // x_stereo_depth, 
	0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, // u - (yaxis ? vec
	0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, // 2(0.0, 0.500 * M
	0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, // axSeparation) : 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, // vec2(0.500 * Max
	0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // Separation, 0.0)
	0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, // ), 0.0).x,.textu
	0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // reLod(tex_stereo
	0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, // _depth, u - (yax
	0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, // is ? vec2(0.0, 0
	0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, // .666 * MaxSepara
	0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, // tion) : vec2(0.6
	0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // 66 * MaxSeparati
	0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, // on, 0.0)), 0.0).
	0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, // x),.textureLod(t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, // ex_stereo_depth,
	0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, //  u - (yaxis ? ve
	0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, // c2(0.0, MaxSepar
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, // ation) : vec2( M
	0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, // axSeparation, 0.
	0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, // 0)), 0.0).x);.fl
	0x6f, 0x61, 0x74, 0x20, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, // oat rparallax = 
	0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, // max(0.0, w_h_hei
	0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, // ght.w + MaxSepar
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, // ation * (1.0 - 1
	0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x6d, 0x69, 0x6e, // .0 / (0.5 + rmin
	0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, // Depth * (1.0 / (
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, // Stereo_MS_ZPD_YA
	0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, // xis.y) - 0.5))))
	0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // ;.return texture
	0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, // Lod(tex_stereo_f
	0x62, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, // b, u - (yaxis ? 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x72, 0x70, 0x61, 0x72, 0x61, // vec2(0.0, -rpara
	0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x72, 0x70, 0x61, // llax) : vec2(rpa
	0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, // rallax, 0.0)), 0
	0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, // .0).xyz;.}.}.voi
	0x64, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x69, 0x67, 0x68, // d gatherLeftRigh
	0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, // tColors(vec2 u, 
	0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x63, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, // out vec3 lcol, o
	0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, // ut vec3 rcol).{.
	0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, // bool yaxis = (St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, // ereo_MS_ZPD_YAxi
	0x73, 0x2e, 0x7a, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // s.z != 0.);.floa
	0x74, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, // t MaxSeparation 
	0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, // = (Stereo_MS_ZPD
	0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // _YAxis.x);.float
	0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, //  lminDepth = min
	0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, // (min(textureLod(
	0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, // tex_stereo_depth
	0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, // , u + (yaxis ? v
	0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, // ec2(0.0, 0.500 *
	0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, //  MaxSeparation) 
	0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, // : vec2(0.500 * M
	0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, // axSeparation, 0.
	0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, // 0)), 0.0).x,.tex
	0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // tureLod(tex_ster
	0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, // eo_depth, u + (y
	0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, // axis ? vec2(0.0,
	0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, //  0.666 * MaxSepa
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, // ration) : vec2(0
	0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, // .666 * MaxSepara
	0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, // tion, 0.0)), 0.0
	0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, // ).x),.textureLod
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, // (tex_stereo_dept
	0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, // h, u + (yaxis ? 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // vec2(0.0, MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // aration) : vec2(
	0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, //  MaxSeparation, 
	0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, // 0.0)), 0.0).x);.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, // float lparallax 
	0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, // = max(0.0, w_h_h
	0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // eight.w + MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, // aration * (1.0 -
	0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x6c, 0x6d, //  1.0 / (0.5 + lm
	0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, // inDepth * (1.0 /
	0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, //  (Stereo_MS_ZPD_
	0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, // YAxis.y) - 0.5))
	0x29, 0x29, 0x3b, 0x0a, 0x6c, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, // ));.lcol = textu
	0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // reLod(tex_stereo
	0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, // _fb, u + (yaxis 
	0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x6c, 0x70, 0x61, // ? vec2(0.0, -lpa
	0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x6c, // rallax) : vec2(l
	0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, // parallax, 0.0)),
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, //  0.0).xyz;.float
	0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, //  rminDepth = min
	0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, // (min(textureLod(
	0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, // tex_stereo_depth
	0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, // , u - (yaxis ? v
	0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, // ec2(0.0, 0.500 *
	0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, //  MaxSeparation) 
	0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, // : vec2(0.500 * M
	0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, // axSeparation, 0.
	0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, // 0)), 0.0).x,.tex
	0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // tureLod(tex_ster
	0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, // eo_depth, u - (y
	0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, // axis ? vec2(0.0,
	0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, //  0.666 * MaxSepa
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, // ration) : vec2(0
	0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, // .666 * MaxSepara
	0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, // tion, 0.0)), 0.0
	0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, // ).x),.textureLod
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, // (tex_stereo_dept
	0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, // h, u - (yaxis ? 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // vec2(0.0, MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // aration) : vec2(
	0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, //  MaxSeparation, 
	0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, // 0.0)), 0.0).x);.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, // float rparallax 
	0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, // = max(0.0, w_h_h
	0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // eight.w + MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, // aration * (1.0 -
	0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x6d, //  1.0 / (0.5 + rm
	0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, // inDepth * (1.0 /
	0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, //  (Stereo_MS_ZPD_
	0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, // YAxis.y) - 0.5))
	0x29, 0x29, 0x3b, 0x0a, 0x72, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, // ));.rcol = textu
	0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // reLod(tex_stereo
	0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, // _fb, u - (yaxis 
	0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x72, 0x70, 0x61, // ? vec2(0.0, -rpa
	0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x72, // rallax) : vec2(r
	0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, // parallax, 0.0)),
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, //  0.0).xyz;.}.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // form mat4 Stereo
	0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // _LeftMat;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, // m mat4 Stereo_Ri
	0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // ghtMat;.uniform 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, // vec4 Stereo_Left
	0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, // Luminance_Gamma;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, // .uniform vec4 St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, // ereo_RightLumina
	0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x3b, 0x0a, 0x76, 0x6f, // nce_DynDesat;.vo
	0x69, 0x64, 0x20, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x65, 0x73, 0x61, 0x74, 0x41, // id DynamicDesatA
	0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, // naglyph( vec3 lC
	0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, // ol, vec3 rCol, o
	0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, // ut vec3 lDesatCo
	0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x44, 0x65, 0x73, // l, out vec3 rDes
	0x61, 0x74, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, // atCol).{.float l
	0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, // eft2LeftLum = do
	0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, // t(lCol, Stereo_L
	0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, // eftLuminance_Gam
	0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, // ma.xyz);.float l
	0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, // eft2RightLum = d
	0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // ot(lCol, Stereo_
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, // RightLuminance_D
	0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, // ynDesat.xyz);.fl
	0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, // oat right2LeftLu
	0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, // m = dot(rCol, St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, // ereo_LeftLuminan
	0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, // ce_Gamma.xyz);.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, // loat right2Right
	0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // Lum = dot(rCol, 
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, // Stereo_RightLumi
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x78, // nance_DynDesat.x
	0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x4c, // yz);.float leftL
	0x75, 0x6d, 0x20, 0x3d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, // um = left2LeftLu
	0x6d, 0x20, 0x2b, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // m + left2RightLu
	0x6d, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // m;.float rightLu
	0x6d, 0x20, 0x3d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, // m = right2LeftLu
	0x6d, 0x20, 0x2b, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, // m + right2RightL
	0x75, 0x6d, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, // um;.float leftDe
	0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, // sat = Stereo_Rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, // htLuminance_DynD
	0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x6c, 0x65, // esat.w * abs((le
	0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x6c, 0x65, 0x66, // ft2LeftLum - lef
	0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, // t2RightLum) / (l
	0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, // eftLum + 0.0001)
	0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, // );.float rightDe
	0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, // sat = Stereo_Rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, // htLuminance_DynD
	0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x72, 0x69, // esat.w * abs((ri
	0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x72, 0x69, // ght2LeftLum - ri
	0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, // ght2RightLum) / 
	0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, // (rightLum + 0.00
	0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, // 01));.lDesatCol 
	0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, // = mix(lCol, vec3
	0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, // _splat(leftLum),
	0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x72, 0x44, 0x65, //  leftDesat);.rDe
	0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x72, 0x43, 0x6f, // satCol = mix(rCo
	0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x72, 0x69, // l, vec3_splat(ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, // ghtLum), rightDe
	0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x4c, 0x69, 0x6e, // sat);.}.vec3 Lin
	0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, 0x63, // earAnaglyph( vec
	0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, // 3 lCol, vec3 rCo
	0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, // l).{.vec3 color 
	0x3d, 0x20, 0x28, 0x28, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, // = (( (vec4(lCol,
	0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, //  1.)) * (Stereo_
	0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x20, 0x28, // LeftMat) ) + ( (
	0x76, 0x65, 0x63, 0x34, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, // vec4(rCol, 1.)) 
	0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, // * (Stereo_RightM
	0x61, 0x74, 0x29, 0x20, 0x29, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // at) )).rgb;.retu
	0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, // rn color;.}.unif
	0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // orm vec4 Stereo_
	0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, 0x6e, // DeghostGamma;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // iform mat4 Stere
	0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3b, // o_DeghostFilter;
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x6e, 0x61, // .vec3 DeghostAna
	0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, // glyph( vec3 lCol
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x76, // , vec3 rCol).{.v
	0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, 0x6e, 0x65, // ec3 color = Line
	0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, // arAnaglyph(lCol,
	0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, //  rCol);.return (
	0x20, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x53, 0x74, 0x65, //  (pow(color, Ste
	0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, // reo_DeghostGamma
	0x2e, 0x72, 0x67, 0x62, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x53, // .rgb)) * (mat3(S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, // tereo_DeghostFil
	0x74, 0x65, 0x72, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, // ter[0].xyz, Ster
	0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, // eo_DeghostFilter
	0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // [1].xyz, Stereo_
	0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x32, 0x5d, // DeghostFilter[2]
	0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, 0x64, // .xyz)) );.}.void
	0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, //  main().{.vec3 l
	0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x3b, 0x0a, 0x67, 0x61, 0x74, 0x68, 0x65, // Col, rCol;.gathe
	0x72, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, // rLeftRightColors
	0x28, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2c, 0x20, 0x6c, 0x43, // (v_texcoord0, lC
	0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x6c, 0x43, 0x6f, 0x6c, 0x20, // ol, rCol);.lCol 
	0x3d, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, // = pow(lCol, vec3
	0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, // (Stereo_LeftLumi
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, 0x53, // nance_Gamma.w, S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, // tereo_LeftLumina
	0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, 0x53, 0x74, 0x65, // nce_Gamma.w, Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, // reo_LeftLuminanc
	0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x43, 0x6f, // e_Gamma.w));.rCo
	0x6c, 0x20, 0x3d, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, // l = pow(rCol, ve
	0x63, 0x33, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, // c3(Stereo_LeftLu
	0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, // minance_Gamma.w,
	0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, //  Stereo_LeftLumi
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, 0x53, // nance_Gamma.w, S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, // tereo_LeftLumina
	0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x29, 0x29, 0x3b, 0x0a, 0x76, // nce_Gamma.w));.v
	0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2c, 0x20, 0x72, // ec3 lColDesat, r
	0x43, 0x6f, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x3b, 0x0a, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, // ColDesat;.Dynami
	0x63, 0x44, 0x65, 0x73, 0x61, 0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, // cDesatAnaglyph(l
	0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x44, // Col, rCol, lColD
	0x65, 0x73, 0x61, 0x74, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, // esat, rColDesat)
	0x3b, 0x0a, 0x6c, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x44, 0x65, 0x73, // ;.lCol = lColDes
	0x61, 0x74, 0x3b, 0x0a, 0x72, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x44, // at;.rCol = rColD
	0x65, 0x73, 0x61, 0x74, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // esat;.vec3 color
	0x20, 0x3d, 0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, //  = LinearAnaglyp
	0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x62, // h(lCol, rCol);.b
	0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, // gfx_FragColor = 
	0x76, 0x65, 0x63, 0x34, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, // vec4(pow(color, 
	0x76, 0x65, 0x63, 0x33, 0x28, 0x31, 0x2e, 0x2f, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, // vec3(1./Stereo_L
	0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, // eftLuminance_Gam
	0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, 0x31, 0x2e, 0x2f, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // ma.w, 1./Stereo_
	0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, // LeftLuminance_Ga
	0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, 0x31, 0x2e, 0x2f, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // mma.w, 1./Stereo
	0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, // _LeftLuminance_G
	0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x29, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, // amma.w)), 1.0);.
	0x7d, 0x0a, 0x00,                                                                               // }..
};
static const uint8_t fs_pp_stereo_anaglyph_lin_gamma_dyndesat_glsl[11429] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x92, 0x2c, // FSH.o.><.......,
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x34, 0x34, 0x30, 0x0a, 0x6f, // ..#version 440.o
	0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, // ut vec4 bgfx_Fra
	0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, // gColor;.#define 
	0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x62, 0x67, 0x66, // gl_FragColor bgf
	0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x0a, 0x23, 0x64, 0x65, 0x66, // x_FragColor.#def
	0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x20, 0x20, 0x20, // ine texture2D   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x0a, 0x23, //        texture.#
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, // define texture2D
	0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // Lod       textur
	0x65, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, // eLod.#define tex
	0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ture2DGrad      
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, // textureGrad.#def
	0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, // ine texture2DPro
	0x6a, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, // jLod   texturePr
	0x6f, 0x6a, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, // ojLod.#define te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, 0x20, // xture2DProjGrad 
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, //  textureProjGrad
	0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // .#define texture
	0x43, 0x75, 0x62, 0x65, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, // CubeLod     text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, // ureLod.#define t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, // extureCubeGrad  
	0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, //   textureGrad.#d
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x33, 0x44, 0x20, // efine texture3D 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, //          texture
	0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // .#define texture
	0x32, 0x44, 0x4c, 0x6f, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x20, 0x74, 0x65, 0x78, 0x74, // 2DLodOffset text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x0a, 0x23, 0x64, 0x65, // ureLodOffset.#de
	0x66, 0x69, 0x6e, 0x65, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x69, // fine attribute i
	0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, // n.#define varyin
	0x67, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x62, 0x67, 0x66, // g in.#define bgf
	0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, // xShadow2D(_sampl
	0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, // er, _coord)     
	0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, // vec4_splat(textu
	0x72, 0x65, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, // re(_sampler, _co
	0x6f, 0x72, 0x64, 0x29, 0x20, 0x29, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x62, // ord) ).#define b
	0x67, 0x66, 0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x28, // gfxShadow2DProj(
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, // _sampler, _coord
	0x29, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, // ) vec4_splat(tex
	0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // tureProj(_sample
	0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x29, 0x0a, 0x76, 0x61, 0x72, // r, _coord) ).var
	0x79, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, // ying vec2 v_texc
	0x6f, 0x6f, 0x72, 0x64, 0x30, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, // oord0;.vec3 inst
	0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, // Mul(vec3 _vec, m
	0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // at3 _mtx) { retu
	0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, // rn ( (_vec) * (_
	0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, // mtx) ); }.vec3 i
	0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, // nstMul(mat3 _mtx
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, // , vec3 _vec) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, // eturn ( (_mtx) *
	0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, //  (_vec) ); }.vec
	0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, // 4 instMul(vec4 _
	0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, // vec, mat4 _mtx) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, // { return ( (_vec
	0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, // ) * (_mtx) ); }.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, // vec4 instMul(mat
	0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, // 4 _mtx, vec4 _ve
	0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, // c) { return ( (_
	0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, // mtx) * (_vec) );
	0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, 0x70, 0x28, 0x66, 0x6c, 0x6f, //  }.float rcp(flo
	0x61, 0x74, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // at _a) { return 
	0x31, 0x2e, 0x30, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, // 1.0/_a; }.vec2 r
	0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // cp(vec2 _a) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, // turn vec2(1.0)/_
	0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, // a; }.vec3 rcp(ve
	0x63, 0x33, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // c3 _a) { return 
	0x76, 0x65, 0x63, 0x33, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, // vec3(1.0)/_a; }.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x61, // vec4 rcp(vec4 _a
	0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, // ) { return vec4(
	0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, // 1.0)/_a; }.vec2 
	0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, // vec2_splat(float
	0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, //  _x) { return ve
	0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, // c2(_x, _x); }.ve
	0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, // c3 vec3_splat(fl
	0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // oat _x) { return
	0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, //  vec3(_x, _x, _x
	0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, // ); }.vec4 vec4_s
	0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, // plat(float _x) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, //  return vec4(_x,
	0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, //  _x, _x, _x); }.
	0x75, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, // uvec2 uvec2_spla
	0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // t(uint _x) { ret
	0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, // urn uvec2(_x, _x
	0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, // ); }.uvec3 uvec3
	0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, // _splat(uint _x) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, // { return uvec3(_
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, // x, _x, _x); }.uv
	0x65, 0x63, 0x34, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, // ec4 uvec4_splat(
	0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, // uint _x) { retur
	0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, // n uvec4(_x, _x, 
	0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, // _x, _x); }.mat4 
	0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, // mtxFromRows(vec4
	0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, //  _0, vec4 _1, ve
	0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, // c4 _2, vec4 _3).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, // {.return transpo
	0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, // se(mat4(_0, _1, 
	0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, // _2, _3) );.}.mat
	0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, // 4 mtxFromCols(ve
	0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, // c4 _0, vec4 _1, 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, // vec4 _2, vec4 _3
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x28, // ).{.return mat4(
	0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x3b, // _0, _1, _2, _3);
	0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, // .}.mat3 mtxFromR
	0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, // ows(vec3 _0, vec
	0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, // 3 _1, vec3 _2).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, // .return transpos
	0x65, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, // e(mat3(_0, _1, _
	0x32, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, // 2) );.}.mat3 mtx
	0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, // FromCols(vec3 _0
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // , vec3 _1, vec3 
	0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, // _2).{.return mat
	0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x3b, 0x0a, 0x7d, // 3(_0, _1, _2);.}
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, // .uniform vec4 u_
	0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // viewRect;.unifor
	0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x54, 0x65, 0x78, // m vec4 u_viewTex
	0x65, 0x6c, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, // el;.uniform mat4
	0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, //  u_view;.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x3b, //  mat4 u_invView;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, // .uniform mat4 u_
	0x70, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, // proj;.uniform ma
	0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, // t4 u_invProj;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, // iform mat4 u_vie
	0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, // wProj;.uniform m
	0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, // at4 u_invViewPro
	0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, // j;.uniform mat4 
	0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, 0x3b, 0x0a, 0x75, 0x6e, 0x69, // u_model[32];.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, // form mat4 u_mode
	0x6c, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, // lView;.uniform m
	0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x50, // at4 u_modelViewP
	0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, // roj;.uniform vec
	0x34, 0x20, 0x75, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x66, 0x34, 0x3b, 0x0a, 0x66, // 4 u_alphaRef4;.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // loat sqr( float 
	0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, // v).{.return v*v;
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, // .}.vec2 sqr( vec
	0x32, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, // 2 v).{.return v*
	0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x76, // v;.}.vec3 sqr( v
	0x65, 0x63, 0x33, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // ec3 v).{.return 
	0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6d, 0x75, 0x6c, 0x5f, // v*v;.}.vec3 mul_
	0x77, 0x31, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, // w1( vec3 v, mat4
	0x20, 0x6d, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2e, 0x78, //  m).{.return v.x
	0x2a, 0x6d, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x79, // *m[0].xyz + (v.y
	0x2a, 0x6d, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x7a, // *m[1].xyz + (v.z
	0x2a, 0x6d, 0x5b, 0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x6d, 0x5b, 0x33, 0x5d, // *m[2].xyz + m[3]
	0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // .xyz));.}.float 
	0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, // acos_approx_divP
	0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, // I( float v).{.fl
	0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, // oat x = abs(v);.
	0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, // if(1. - x <= 0.0
	0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, // 0006103515625).r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, // eturn (v >= 0.) 
	0x3f, 0x20, 0x30, 0x2e, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // ? 0. : 1.;.float
	0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, //  res = ((-0.1559
	0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, // 72/3.14159265358
	0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, // 9793238462643383
	0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, // 2795) * x + (1.5
	0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, // 6467/3.141592653
	0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, // 5897932384626433
	0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, // 832795) ) * sqrt
	0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // (1. - x);.return
	0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x72, 0x65, 0x73, //  (v >= 0.) ? res
	0x20, 0x3a, 0x20, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, //  : 1. - res;.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, // loat atan2_appro
	0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // x_div2PI( float 
	0x79, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, // y, float x).{.fl
	0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, // oat abs_y = abs(
	0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, // y);.float abs_x 
	0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x78, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x61, 0x62, 0x73, // = abs(x);.if(abs
	0x5f, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, // _x <= 0.00006103
	0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x20, 0x26, 0x26, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, // 515625 && abs_y 
	0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, // <= 0.00006103515
	0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x30, 0x2e, 0x3b, 0x0a, // 625).return 0.;.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, // float r = (abs_x
	0x20, 0x2d, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x61, 0x62, 0x73, //  - abs_y) / (abs
	0x5f, 0x78, 0x20, 0x2b, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, // _x + abs_y);.flo
	0x61, 0x74, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, // at angle = ((x <
	0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x28, 0x33, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x20, 0x3a, //  0.) ? (3./8.) :
	0x20, 0x28, 0x31, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x29, 0x0a, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x32, //  (1./8.)).+ (0.2
	0x31, 0x31, 0x38, 0x36, 0x38, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, // 11868 /(2.*3.141
	0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, // 5926535897932384
	0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, // 626433832795) * 
	0x72, 0x20, 0x2a, 0x20, 0x72, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x39, 0x38, 0x37, 0x33, 0x30, 0x35, // r * r - 0.987305
	0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, //  /(2.*3.14159265
	0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, // 3589793238462643
	0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x78, 0x20, // 3832795)) * ((x 
	0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x72, 0x20, 0x3a, 0x20, 0x72, 0x29, 0x3b, // < 0.) ? -r : r);
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x79, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, // .return (y < 0.)
	0x20, 0x3f, 0x20, 0x2d, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3a, 0x20, 0x61, 0x6e, 0x67, 0x6c, //  ? -angle : angl
	0x65, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x73, 0x69, 0x6e, 0x5f, // e;.}.float asin_
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, // approx_divPI( fl
	0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, // oat v).{.float x
	0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, //  = abs(v);.if(1.
	0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, //  - x <= 0.000061
	0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // 03515625).return
	0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, //  (v >= 0.) ? 0.5
	0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, //  : -0.5;.float r
	0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, // es = ((-0.155972
	0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, // /3.1415926535897
	0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, // 9323846264338327
	0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, // 95) * x + (1.564
	0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, // 67/3.14159265358
	0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, // 9793238462643383
	0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, // 2795) ) * sqrt(1
	0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // . - x);.return (
	0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x2d, // v >= 0.) ? 0.5 -
	0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x65, //  res : -0.5 + re
	0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x61, 0x79, 0x5f, 0x74, 0x6f, // s;.}.vec2 ray_to
	0x5f, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, // _equirectangular
	0x5f, 0x75, 0x76, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x61, 0x79, 0x29, 0x0a, 0x7b, // _uv( vec3 ray).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x0a, 0x30, 0x2e, // .return vec2(.0.
	0x35, 0x20, 0x2b, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, // 5 + atan2_approx
	0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x79, 0x2c, 0x20, 0x72, // _div2PI(ray.y, r
	0x61, 0x79, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, // ay.x),.acos_appr
	0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x7a, 0x29, 0x29, // ox_divPI(ray.z))
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, // ;.}.float InvsRG
	0x42, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, // B( float color).
	0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, // {.if (color <= 0
	0x2e, 0x30, 0x34, 0x30, 0x34, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, // .04045).return c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x32, 0x2e, 0x39, // olor * (1.0/12.9
	0x32, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // 2);.else.return 
	0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, // pow(color * (1.0
	0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x35, 0x35, // /1.055) + (0.055
	0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x29, 0x3b, 0x0a, 0x7d, // /1.055), 2.4);.}
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, // .float InvRec709
	0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, // ( float color).{
	0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, // .if (color <= 0.
	0x30, 0x38, 0x31, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // 081).return colo
	0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x34, 0x2e, 0x35, 0x29, 0x3b, 0x0a, 0x65, // r * (1.0/4.5);.e
	0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, // lse.return pow(c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x39, // olor * (1.0/1.09
	0x39, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x2f, 0x31, 0x2e, 0x30, 0x39, // 9) + (0.099/1.09
	0x39, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x3b, 0x0a, 0x7d, // 9), 1.0/0.45);.}
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, // .float InvGamma(
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, //  float color).{.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, // return InvsRGB(c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, // olor);.}.vec3 In
	0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, // vGamma( vec3 col
	0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, // or).{.return vec
	0x33, 0x28, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // 3(InvGamma(color
	0x2e, 0x78, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, // .x),InvGamma(col
	0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, // or.y),InvGamma(c
	0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, // olor.z));.}.vec3
	0x20, 0x49, 0x6e, 0x76, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, //  InvToneMap( vec
	0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // 3 color).{.float
	0x20, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x30, 0x2e, 0x35, 0x2f, 0x30, //  inv_2bh = 0.5/0
	0x2e, 0x32, 0x35, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x68, 0x20, 0x3d, 0x20, // .25;.float bh = 
	0x34, 0x2e, 0x30, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2d, 0x20, 0x32, 0x2e, 0x30, 0x3b, 0x0a, // 4.0*0.25 - 2.0;.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2d, 0x20, // return (color - 
	0x31, 0x2e, 0x30, 0x20, 0x2b, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // 1.0 + sqrt(color
	0x2a, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x20, 0x62, 0x68, 0x29, 0x20, 0x2b, 0x20, // *(color + bh) + 
	0x31, 0x2e, 0x30, 0x29, 0x29, 0x2a, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x3b, 0x0a, 0x7d, // 1.0))*inv_2bh;.}
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x20, 0x66, 0x6c, 0x6f, // .float sRGB( flo
	0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, // at f).{.float s;
	0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x33, 0x31, // .if (f <= 0.0031
	0x33, 0x30, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x20, 0x2a, // 308).s = 12.92 *
	0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, //  f;.else.s = 1.0
	0x35, 0x35, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, // 55 * pow(f, 1.0/
	0x32, 0x2e, 0x34, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x3b, 0x0a, 0x72, 0x65, // 2.4) - 0.055;.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // turn s;.}.float 
	0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, // Rec709( float f)
	0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, // .{.float s;.if (
	0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, // f <= 0.018).s = 
	0x34, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, // 4.5 * f;.else.s 
	0x3d, 0x20, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, // = 1.099 * pow(f,
	0x20, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x3b, 0x0a, //  0.45) - 0.099;.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // return s;.}.floa
	0x74, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // t FBGamma( float
	0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, //  color).{.return
	0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, //  sRGB(color);.}.
	0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, // vec2 FBGamma( ve
	0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, // c2 color).{.retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, // rn vec2(FBGamma(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, // color.x),FBGamma
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // (color.y));.}.ve
	0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, // c3 FBGamma( vec3
	0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, //  color).{.return
	0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, //  vec3(FBGamma(co
	0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, // lor.x),FBGamma(c
	0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, // olor.y),FBGamma(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // color.z));.}.vec
	0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x32, 0x32, 0x28, 0x20, 0x76, 0x65, 0x63, // 3 FBGamma22( vec
	0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // 3 color).{.retur
	0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // n vec3(pow(color
	0x2e, 0x78, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, // .x, 1.0/2.2),pow
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, // (color.y, 1.0/2.
	0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x2c, 0x20, // 2),pow(color.z, 
	0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // 1.0/2.2));.}.flo
	0x61, 0x74, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x66, 0x6c, // at FBToneMap( fl
	0x6f, 0x61, 0x74, 0x20, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // oat l).{.return 
	0x6c, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, // l * ((l*0.25 + 1
	0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, // .0) / (l + 1.0))
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, // ;.}.vec2 FBToneM
	0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, // ap( vec2 color).
	0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, // {.float l = dot(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, // color,vec2(0.176
	0x32, 0x30, 0x34, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, // 204+0.0108109*0.
	0x35, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, // 5,0.812985+0.010
	0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // 8109*0.5));.retu
	0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, // rn color * ((l*0
	0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, // .25 + 1.0) / (l 
	0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // + 1.0));.}.vec3 
	0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // FBToneMap( vec3 
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, // color).{.float l
	0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, //  = dot(color,vec
	0x33, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, // 3(0.176204,0.812
	0x39, 0x38, 0x35, 0x2c, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x29, 0x29, 0x3b, // 985,0.0108109));
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, // .return color * 
	0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, // ((l*0.25 + 1.0) 
	0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // / (l + 1.0));.}.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x28, 0x20, 0x76, // vec4 Additive( v
	0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // ec4 cBase, vec4 
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, // cBlend, float pe
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // rcent).{.return 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2b, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, // cBase + cBlend*p
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, // ercent;.}.vec3 S
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, // creen ( vec3 cBa
	0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, // se, vec3 cBlend)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, // .{.return 1.0 - 
	0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, // (1.0 - cBase) * 
	0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, // (1.0 - cBlend);.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x20, // }.vec4 Screen ( 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // vec4 cBase, vec4
	0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, //  cBlend).{.retur
	0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, // n 1.0 - (1.0 - c
	0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, // Base) * (1.0 - c
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, // Blend);.}.vec3 S
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // creenHDR ( vec3 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, // cBase, vec3 cBle
	0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, // nd).{.return max
	0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, // (1.0 - (1.0 - cB
	0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, // ase) * (1.0 - cB
	0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x2c, 0x30, // lend), vec3(0.,0
	0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, // .,0.));.}.vec4 S
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // creenHDR ( vec4 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, // cBase, vec4 cBle
	0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, // nd).{.return max
	0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, // (1.0 - (1.0 - cB
	0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, // ase) * (1.0 - cB
	0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, // lend), vec4(0.,0
	0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // .,0.,0.));.}.vec
	0x34, 0x20, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, // 4 Multiply ( vec
	0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // 4 cBase, vec4 cB
	0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, // lend, float perc
	0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, // ent).{.return cB
	0x61, 0x73, 0x65, 0x20, 0x2a, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, // ase * cBlend*per
	0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, // cent;.}.vec4 Ove
	0x72, 0x6c, 0x61, 0x79, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, // rlay ( vec4 cBas
	0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, // e, vec4 cBlend).
	0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, // {.vec4 cNew = st
	0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, // ep(0.5, cBase);.
	0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, // cNew = mix(cBase
	0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, // *cBlend*2.0, 1.0
	0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, // -2.0*(1.0-cBase)
	0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, // *(1.0-cBlend), c
	0x4e, 0x65, 0x77, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, // New);.return cNe
	0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, // w;.}.vec4 Overla
	0x79, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, // yHDR ( vec4 cBas
	0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, // e, vec4 cBlend).
	0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, // {.vec4 cNew = st
	0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, // ep(0.5, cBase);.
	0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x6d, 0x69, 0x78, 0x28, 0x63, // cNew = max(mix(c
	0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, // Base*cBlend*2.0,
	0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, //  1.0-2.0*(1.0-cB
	0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, // ase)*(1.0-cBlend
	0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, // ), cNew), vec4(0
	0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, // .,0.,0.,0.));.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // turn cNew;.}.vec
	0x33, 0x20, 0x63, 0x6f, 0x73, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, // 3 cos_hemisphere
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x29, // _sample( vec2 t)
	0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x68, 0x69, 0x20, 0x3d, 0x20, 0x74, // .{.float phi = t
	0x2e, 0x79, 0x20, 0x2a, 0x20, 0x28, 0x32, 0x2e, 0x30, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, // .y * (2.0*3.1415
	0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, // 9265358979323846
	0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x3b, 0x0a, 0x66, 0x6c, // 26433832795);.fl
	0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, // oat cosTheta = s
	0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, // qrt(1.0 - t.x);.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, // float sinTheta =
	0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, //  sqrt(t.x);.floa
	0x74, 0x20, 0x73, 0x70, 0x2c, 0x63, 0x70, 0x3b, 0x0a, 0x7b, 0x73, 0x70, 0x3d, 0x73, 0x69, 0x6e, // t sp,cp;.{sp=sin
	0x28, 0x70, 0x68, 0x69, 0x29, 0x3b, 0x63, 0x70, 0x3d, 0x63, 0x6f, 0x73, 0x28, 0x70, 0x68, 0x69, // (phi);cp=cos(phi
	0x29, 0x3b, 0x7d, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, // );};.return vec3
	0x28, 0x63, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, // (cp * sinTheta, 
	0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x73, 0x70, 0x20, 0x2a, 0x20, 0x73, // cosTheta, sp * s
	0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, // inTheta);.}.vec3
	0x20, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, //  rotate_to_vecto
	0x72, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, // r_upper( vec3 ve
	0x63, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x29, 0x0a, // c, vec3 normal).
	0x7b, 0x0a, 0x69, 0x66, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x3e, 0x20, // {.if(normal.y > 
	0x2d, 0x30, 0x2e, 0x39, 0x39, 0x39, 0x39, 0x39, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // -0.99999).{.floa
	0x74, 0x20, 0x68, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x28, 0x31, 0x2e, 0x30, 0x2b, 0x6e, // t h = 1.0/(1.0+n
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // ormal.y);.float 
	0x68, 0x7a, 0x20, 0x3d, 0x20, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x3b, // hz = h*normal.z;
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x3d, 0x20, 0x68, 0x7a, 0x2a, // .float hzx = hz*
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // normal.x;.return
	0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x28, //  vec3(.vec.x * (
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, // normal.y+hz*norm
	0x61, 0x6c, 0x2e, 0x7a, 0x29, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, // al.z) + vec.y * 
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, // normal.x - vec.z
	0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, //  * hzx,.vec.y * 
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, // normal.y - vec.x
	0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, //  * normal.x - ve
	0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x2c, 0x0a, // c.z * normal.z,.
	0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, // vec.y * normal.z
	0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x2b, //  - vec.x * hzx +
	0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, //  vec.z * (normal
	0x2e, 0x79, 0x2b, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x2a, 0x6e, 0x6f, // .y+h*normal.x*no
	0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, // rmal.x));.}.else
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x2d, 0x76, 0x65, 0x63, 0x3b, 0x0a, 0x7d, 0x0a, //  return -vec;.}.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, // uniform vec4 Ste
	0x72, 0x65, 0x6f, 0x5f, 0x53, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x0a, // reo_Saturation;.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, // uniform vec4 Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, // reo_MS_ZPD_YAxis
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // ;.uniform sample
	0x72, 0x32, 0x44, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, // r2D tex_stereo_f
	0x62, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, // b;.uniform sampl
	0x65, 0x72, 0x32, 0x44, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // er2D tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, // depth;.uniform v
	0x65, 0x63, 0x34, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, // ec4 w_h_height;.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, // vec3 gatherEyeCo
	0x6c, 0x6f, 0x72, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, // lor(vec2 u, bool
	0x20, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x20, //  isLeft).{.bool 
	0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // yaxis = (Stereo_
	0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x7a, 0x20, 0x21, // MS_ZPD_YAxis.z !
	0x3d, 0x20, 0x30, 0x2e, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x4d, 0x61, 0x78, // = 0.);.float Max
	0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, // Separation = (St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, // ereo_MS_ZPD_YAxi
	0x73, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, // s.x);.if (isLeft
	0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, // ).{.float lminDe
	0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, // pth = min(min(te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, // xtureLod(tex_ste
	0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, // reo_depth, u + (
	0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, // yaxis ? vec2(0.0
	0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // , 0.500 * MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // aration) : vec2(
	0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, // 0.500 * MaxSepar
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, // ation, 0.0)), 0.
	0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, // 0).x,.textureLod
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, // (tex_stereo_dept
	0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, // h, u + (yaxis ? 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, // vec2(0.0, 0.666 
	0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, // * MaxSeparation)
	0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, //  : vec2(0.666 * 
	0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, // MaxSeparation, 0
	0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, // .0)), 0.0).x),.t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // extureLod(tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, // ereo_depth, u + 
	0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, // (yaxis ? vec2(0.
	0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, // 0, MaxSeparation
	0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // ) : vec2( MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, // aration, 0.0)), 
	0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, // 0.0).x);.float l
	0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, // parallax = max(0
	0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, // .0, w_h_height.w
	0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, //  + MaxSeparation
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, //  * (1.0 - 1.0 / 
	0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, // (0.5 + lminDepth
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, //  * (1.0 / (Stere
	0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, // o_MS_ZPD_YAxis.y
	0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, // ) - 0.5))));.ret
	0x75, 0x72, 0x6e, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, // urn textureLod(t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, // ex_stereo_fb, u 
	0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // + (yaxis ? vec2(
	0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, // 0.0, -lparallax)
	0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, //  : vec2(lparalla
	0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, // x, 0.0)), 0.0).x
	0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, // yz;.}.else.{.flo
	0x61, 0x74, 0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, // at rminDepth = m
	0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, // in(min(textureLo
	0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, // d(tex_stereo_dep
	0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, // th, u - (yaxis ?
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, //  vec2(0.0, 0.500
	0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, //  * MaxSeparation
	0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, // ) : vec2(0.500 *
	0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, //  MaxSeparation, 
	0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, // 0.0)), 0.0).x,.t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // extureLod(tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, // ereo_depth, u - 
	0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, // (yaxis ? vec2(0.
	0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, // 0, 0.666 * MaxSe
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, // paration) : vec2
	0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, // (0.666 * MaxSepa
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, // ration, 0.0)), 0
	0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, // .0).x),.textureL
	0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, // od(tex_stereo_de
	0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, // pth, u - (yaxis 
	0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, // ? vec2(0.0, MaxS
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, // eparation) : vec
	0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, // 2( MaxSeparation
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, // , 0.0)), 0.0).x)
	0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, // ;.float rparalla
	0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, // x = max(0.0, w_h
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, // _height.w + MaxS
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, // eparation * (1.0
	0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, //  - 1.0 / (0.5 + 
	0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, // rminDepth * (1.0
	0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, //  / (Stereo_MS_ZP
	0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, // D_YAxis.y) - 0.5
	0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x65, 0x78, // ))));.return tex
	0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // tureLod(tex_ster
	0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, // eo_fb, u - (yaxi
	0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x72, // s ? vec2(0.0, -r
	0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, // parallax) : vec2
	0x28, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // (rparallax, 0.0)
	0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x7d, // ), 0.0).xyz;.}.}
	0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, // .void gatherLeft
	0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x28, 0x76, 0x65, 0x63, 0x32, // RightColors(vec2
	0x20, 0x75, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x63, 0x6f, //  u, out vec3 lco
	0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x6f, 0x6c, // l, out vec3 rcol
	0x29, 0x0a, 0x7b, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3d, // ).{.bool yaxis =
	0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, //  (Stereo_MS_ZPD_
	0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x7a, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x3b, 0x0a, // YAxis.z != 0.);.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // float MaxSeparat
	0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, // ion = (Stereo_MS
	0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, // _ZPD_YAxis.x);.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, // loat lminDepth =
	0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, //  min(min(texture
	0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, // Lod(tex_stereo_d
	0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, // epth, u + (yaxis
	0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, //  ? vec2(0.0, 0.5
	0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // 00 * MaxSeparati
	0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, // on) : vec2(0.500
	0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, //  * MaxSeparation
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, // , 0.0)), 0.0).x,
	0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, // .textureLod(tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, // stereo_depth, u 
	0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // + (yaxis ? vec2(
	0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, // 0.0, 0.666 * Max
	0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, // Separation) : ve
	0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, // c2(0.666 * MaxSe
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, // paration, 0.0)),
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, //  0.0).x),.textur
	0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // eLod(tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, // depth, u + (yaxi
	0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, // s ? vec2(0.0, Ma
	0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, // xSeparation) : v
	0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // ec2( MaxSeparati
	0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, // on, 0.0)), 0.0).
	0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, // x);.float lparal
	0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, // lax = max(0.0, w
	0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, // _h_height.w + Ma
	0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, // xSeparation * (1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, // .0 - 1.0 / (0.5 
	0x2b, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, // + lminDepth * (1
	0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, // .0 / (Stereo_MS_
	0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, // ZPD_YAxis.y) - 0
	0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x6c, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, // .5))));.lcol = t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // extureLod(tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, // ereo_fb, u + (ya
	0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, // xis ? vec2(0.0, 
	0x2d, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, // -lparallax) : ve
	0x63, 0x32, 0x28, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, // c2(lparallax, 0.
	0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x66, // 0)), 0.0).xyz;.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, // loat rminDepth =
	0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, //  min(min(texture
	0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, // Lod(tex_stereo_d
	0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, // epth, u - (yaxis
	0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, //  ? vec2(0.0, 0.5
	0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // 00 * MaxSeparati
	0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, // on) : vec2(0.500
	0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, //  * MaxSeparation
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, // , 0.0)), 0.0).x,
	0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, // .textureLod(tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, // stereo_depth, u 
	0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // - (yaxis ? vec2(
	0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, // 0.0, 0.666 * Max
	0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, // Separation) : ve
	0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, // c2(0.666 * MaxSe
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, // paration, 0.0)),
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, //  0.0).x),.textur
	0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // eLod(tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, // depth, u - (yaxi
	0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, // s ? vec2(0.0, Ma
	0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, // xSeparation) : v
	0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // ec2( MaxSeparati
	0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, // on, 0.0)), 0.0).
	0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, // x);.float rparal
	0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, // lax = max(0.0, w
	0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, // _h_height.w + Ma
	0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, // xSeparation * (1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, // .0 - 1.0 / (0.5 
	0x2b, 0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, // + rminDepth * (1
	0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, // .0 / (Stereo_MS_
	0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, // ZPD_YAxis.y) - 0
	0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, // .5))));.rcol = t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // extureLod(tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, // ereo_fb, u - (ya
	0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, // xis ? vec2(0.0, 
	0x2d, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, // -rparallax) : ve
	0x63, 0x32, 0x28, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, // c2(rparallax, 0.
	0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, // 0)), 0.0).xyz;.}
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, // .uniform mat4 St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, // ereo_LeftMat;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // iform mat4 Stere
	0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // o_RightMat;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // orm vec4 Stereo_
	0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, // LeftLuminance_Ga
	0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, // mma;.uniform vec
	0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // 4 Stereo_RightLu
	0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, // minance_DynDesat
	0x3b, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x65, // ;.void DynamicDe
	0x73, 0x61, 0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, 0x63, // satAnaglyph( vec
	0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, // 3 lCol, vec3 rCo
	0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x44, 0x65, 0x73, // l, out vec3 lDes
	0x61, 0x74, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // atCol, out vec3 
	0x72, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, // rDesatCol).{.flo
	0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, // at left2LeftLum 
	0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, // = dot(lCol, Ster
	0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, // eo_LeftLuminance
	0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, // _Gamma.xyz);.flo
	0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, // at left2RightLum
	0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, //  = dot(lCol, Ste
	0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, // reo_RightLuminan
	0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, // ce_DynDesat.xyz)
	0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, // ;.float right2Le
	0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, // ftLum = dot(rCol
	0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // , Stereo_LeftLum
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, // inance_Gamma.xyz
	0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, // );.float right2R
	0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, // ightLum = dot(rC
	0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, // ol, Stereo_Right
	0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, // Luminance_DynDes
	0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, // at.xyz);.float l
	0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, // eftLum = left2Le
	0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, // ftLum + left2Rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, // htLum;.float rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, // htLum = right2Le
	0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, // ftLum + right2Ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, // ghtLum;.float le
	0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // ftDesat = Stereo
	0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, // _RightLuminance_
	0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, // DynDesat.w * abs
	0x28, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, // ((left2LeftLum -
	0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, //  left2RightLum) 
	0x2f, 0x20, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, // / (leftLum + 0.0
	0x30, 0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, // 001));.float rig
	0x68, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // htDesat = Stereo
	0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, // _RightLuminance_
	0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, // DynDesat.w * abs
	0x28, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, // ((right2LeftLum 
	0x2d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, // - right2RightLum
	0x29, 0x20, 0x2f, 0x20, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, // ) / (rightLum + 
	0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, // 0.0001));.lDesat
	0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // Col = mix(lCol, 
	0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, // vec3_splat(leftL
	0x75, 0x6d, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, // um), leftDesat);
	0x0a, 0x72, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, // .rDesatCol = mix
	0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, // (rCol, vec3_spla
	0x74, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, 0x72, 0x69, 0x67, // t(rightLum), rig
	0x68, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, // htDesat);.}.vec3
	0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, //  LinearAnaglyph(
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, //  vec3 lCol, vec3
	0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, //  rCol).{.vec3 co
	0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x6c, // lor = (( (vec4(l
	0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, // Col, 1.)) * (Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x20, 0x2b, // reo_LeftMat) ) +
	0x20, 0x28, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, //  ( (vec4(rCol, 1
	0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, // .)) * (Stereo_Ri
	0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, // ghtMat) )).rgb;.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x7d, 0x0a, // return color;.}.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, // uniform vec4 Ste
	0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, // reo_DeghostGamma
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, // ;.uniform mat4 S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, // tereo_DeghostFil
	0x74, 0x65, 0x72, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, // ter;.vec3 Deghos
	0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // tAnaglyph( vec3 
	0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, // lCol, vec3 rCol)
	0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, // .{.vec3 color = 
	0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, // LinearAnaglyph(l
	0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // Col, rCol);.retu
	0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, // rn ( (pow(color,
	0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, //  Stereo_DeghostG
	0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x72, 0x67, 0x62, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x6d, 0x61, // amma.rgb)) * (ma
	0x74, 0x33, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, // t3(Stereo_Deghos
	0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, // tFilter[0].xyz, 
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, // Stereo_DeghostFi
	0x6c, 0x74, 0x65, 0x72, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, // lter[1].xyz, Ste
	0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, // reo_DeghostFilte
	0x72, 0x5b, 0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // r[2].xyz)) );.}.
	0x76, 0x6f, 0x69, 0x64, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, // void main().{.ve
	0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x3b, 0x0a, 0x67, // c3 lCol, rCol;.g
	0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, // atherLeftRightCo
	0x6c, 0x6f, 0x72, 0x73, 0x28, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, // lors(v_texcoord0
	0x2c, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x6c, // , lCol, rCol);.l
	0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // Col = pow(lCol, 
	0x76, 0x65, 0x63, 0x33, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, // vec3(Stereo_Left
	0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, // Luminance_Gamma.
	0x77, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, // w, Stereo_LeftLu
	0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, // minance_Gamma.w,
	0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, //  Stereo_LeftLumi
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x29, 0x29, 0x3b, // nance_Gamma.w));
	0x0a, 0x72, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x72, 0x43, 0x6f, 0x6c, // .rCol = pow(rCol
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, // , vec3(Stereo_Le
	0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, // ftLuminance_Gamm
	0x61, 0x2e, 0x77, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, // a.w, Stereo_Left
	0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, // Luminance_Gamma.
	0x77, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, // w, Stereo_LeftLu
	0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x29, // minance_Gamma.w)
	0x29, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x44, 0x65, 0x73, 0x61, // );.vec3 lColDesa
	0x74, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x3b, 0x0a, 0x44, 0x79, // t, rColDesat;.Dy
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x65, 0x73, 0x61, 0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, // namicDesatAnagly
	0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6c, // ph(lCol, rCol, l
	0x43, 0x6f, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x44, 0x65, // ColDesat, rColDe
	0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x6c, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6c, 0x43, 0x6f, // sat);.lCol = lCo
	0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x3b, 0x0a, 0x72, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x72, // lDesat;.rCol = r
	0x43, 0x6f, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, // ColDesat;.vec3 c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, // olor = LinearAna
	0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, // glyph(lCol, rCol
	0x29, 0x3b, 0x0a, 0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, // );.gl_FragColor 
	0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // = vec4(pow(color
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x31, 0x2e, 0x2f, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // , vec3(1./Stereo
	0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, // _LeftLuminance_G
	0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, 0x31, 0x2e, 0x2f, 0x53, 0x74, 0x65, 0x72, 0x65, // amma.w, 1./Stere
	0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, // o_LeftLuminance_
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, 0x31, 0x2e, 0x2f, 0x53, 0x74, 0x65, 0x72, // Gamma.w, 1./Ster
	0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, // eo_LeftLuminance
	0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x29, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, // _Gamma.w)), 1.0)
	0x3b, 0x0a, 0x7d, 0x0a, 0x00,                                                                   // ;.}..
};
static const uint8_t fs_pp_stereo_anaglyph_lin_gamma_dyndesat_dx11[3268] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x13, 0x53, // FSH.o.><.......S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, // tereo_MS_ZPD_YAx
	0x69, 0x73, 0x12, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x77, 0x5f, 0x68, // is...........w_h
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, // _height.........
	0x00, 0x0e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, // ..Stereo_LeftMat
	0x14, 0x00, 0x20, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x53, 0x74, 0x65, 0x72, 0x65, // .. ........Stere
	0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x00, 0x60, 0x00, 0x04, 0x00, // o_RightMat..`...
	0x00, 0x00, 0x00, 0x00, 0x1a, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, // .....Stereo_Left
	0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x12, // Luminance_Gamma.
	0x00, 0xa0, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // ..........Stereo
	0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, // _RightLuminance_
	0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x12, 0x00, 0xb0, 0x00, 0x01, 0x00, 0x00, 0x00, // DynDesat........
	0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, // ...tex_stereo_fb
	0x30, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x74, 0x65, 0x78, 0x5f, 0x73, // 0..........tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x30, 0x01, 0x01, 0x00, 0x01, // tereo_depth0....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // ......tex_stereo
	0x5f, 0x66, 0x62, 0x30, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x74, 0x65, // _fb0..........te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x30, 0x01, // x_stereo_depth0.
	0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x94, 0x0b, 0x00, 0x00, 0x44, 0x58, 0x42, 0x43, // ............DXBC
	0x2d, 0x96, 0x2f, 0x89, 0x12, 0xf9, 0xae, 0x0d, 0xc7, 0xb2, 0x00, 0xf1, 0xe4, 0x29, 0x3f, 0xe9, // -./..........)?.
	0x01, 0x00, 0x00, 0x00, 0x94, 0x0b, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, // ............,...
	0x84, 0x00, 0x00, 0x00, 0xb8, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x4e, 0x50, 0x00, 0x00, 0x00, // ........ISGNP...
	0x02, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........8.......
	0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, // ................
	0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, // D...............
	0x01, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, // ........SV_POSIT
	0x49, 0x4f, 0x4e, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0xab, 0xab, 0xab, // ION.TEXCOORD....
	0x4f, 0x53, 0x47, 0x4e, 0x2c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, // OSGN,...........
	0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, //  ...............
	0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, // ........SV_TARGE
	0x54, 0x00, 0xab, 0xab, 0x53, 0x48, 0x45, 0x58, 0xd4, 0x0a, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, // T...SHEX....P...
	0xb5, 0x02, 0x00, 0x00, 0x6a, 0x08, 0x00, 0x01, 0x59, 0x00, 0x00, 0x04, 0x46, 0x8e, 0x20, 0x00, // ....j...Y...F. .
	0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x03, 0x00, 0x60, 0x10, 0x00, // ........Z....`..
	0x00, 0x00, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x03, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // ....Z....`......
	0x58, 0x18, 0x00, 0x04, 0x00, 0x70, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x55, 0x00, 0x00, // X....p......UU..
	0x58, 0x18, 0x00, 0x04, 0x00, 0x70, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x55, 0x55, 0x00, 0x00, // X....p......UU..
	0x62, 0x10, 0x00, 0x03, 0x32, 0x10, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x03, // b...2.......e...
	0xf2, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x02, 0x05, 0x00, 0x00, 0x00, // . ......h.......
	0x36, 0x00, 0x00, 0x08, 0x52, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, // 6...R........@..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x38, 0x00, 0x00, 0x0b, 0xa2, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x80, 0x20, 0x00, // 8............. .
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .........@......
	0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x7e, 0x2a, 0x3f, 0x39, 0x00, 0x00, 0x08, // ...?.....~*?9...
	0x12, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, // ........*. .....
	0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x09, // .....@......7...
	0xf2, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // ................
	0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x0b, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // F...............
	0x00, 0x00, 0x00, 0x07, 0xf2, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, // ............F...
	0x00, 0x00, 0x00, 0x00, 0x46, 0x14, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, // ....F...........
	0xf2, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, // ........F...A...
	0x00, 0x00, 0x00, 0x00, 0x46, 0x14, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, // ....F.......H...
	0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // ....CU..".......
	0x46, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x16, 0x7e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // F........~......
	0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .`.......@......
	0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x42, 0x00, 0x10, 0x00, // H.......CU..B...
	0x01, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x96, 0x7c, 0x10, 0x00, // .............|..
	0x01, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, // .....`.......@..
	0x00, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x07, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // ....3...".......
	0x2a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // *...............
	0x36, 0x00, 0x00, 0x06, 0x22, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0a, 0x80, 0x20, 0x00, // 6..."......... .
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x08, 0x52, 0x00, 0x10, 0x00, // ........6...R...
	0x02, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .....@..........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x09, 0xc2, 0x00, 0x10, 0x00, // ........7.......
	0x01, 0x00, 0x00, 0x00, 0x06, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x04, 0x10, 0x00, // ................
	0x02, 0x00, 0x00, 0x00, 0x56, 0x01, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, // ....V...........
	0x32, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // 2...............
	0x46, 0x10, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0xc2, 0x00, 0x10, 0x00, // F...............
	0x01, 0x00, 0x00, 0x00, 0xa6, 0x0e, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // ........A.......
	0x06, 0x14, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, // ........H.......
	0x43, 0x55, 0x15, 0x00, 0x42, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, // CU..B...........
	0x01, 0x00, 0x00, 0x00, 0x96, 0x7c, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, // .....|.......`..
	0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, // .....@......H...
	0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x82, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // ....CU..........
	0x46, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x96, 0x73, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // F........s......
	0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .`.......@......
	0x33, 0x00, 0x00, 0x07, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, // 3...".......:...
	0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x0b, // ................
	0x82, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, // .........@.....?
	0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x1a, 0x80, 0x20, 0x00, // ...?...?...?.. .
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x82, 0x00, 0x10, 0x00, // ................
	0x01, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, // ....:........@..
	0x00, 0x00, 0x00, 0xbf, 0x32, 0x00, 0x00, 0x09, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // ....2...".......
	0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // ........:.......
	0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x0e, 0x00, 0x00, 0x0a, 0x22, 0x00, 0x10, 0x00, // .@.....?...."...
	0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, // .....@.....?...?
	0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // ...?...?........
	0x00, 0x00, 0x00, 0x08, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x80, // ...."...........
	0x41, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, // A........@.....?
	0x32, 0x00, 0x00, 0x0b, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, 0x80, 0x20, 0x00, // 2..."......... .
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // ................
	0x3a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x07, // :. .........4...
	0x12, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // ................
	0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x06, 0x82, 0x00, 0x10, 0x00, // .@......6.......
	0x02, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, // ........A.......
	0x36, 0x00, 0x00, 0x08, 0x62, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, // 6...b........@..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x37, 0x00, 0x00, 0x09, 0x32, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x06, 0x00, 0x10, 0x00, // 7...2...........
	0x01, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, // ............F...
	0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x32, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, // ........2.......
	0x46, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x10, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // F.......F.......
	0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x72, 0x00, 0x10, 0x00, // H.......CU..r...
	0x02, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, // ....F.......F~..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, // .....`.......@..
	0x00, 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x05, 0x72, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, // ..../...r.......
	0x46, 0x02, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x08, 0x72, 0x00, 0x10, 0x00, // F.......8...r...
	0x02, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0xf6, 0x8f, 0x20, 0x00, // ....F......... .
	0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x05, 0x72, 0x00, 0x10, 0x00, // ............r...
	0x02, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x08, // ....F...........
	0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, // ".......F.......
	0x46, 0x82, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x08, // F. .............
	0x82, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, // ........F.......
	0x46, 0x82, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, // F. .............
	0x12, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // ................
	0x3a, 0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, // :...A...........
	0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // "...............
	0x3a, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x82, 0x00, 0x10, 0x00, // :...............
	0x02, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, // .............@..
	0x17, 0xb7, 0xd1, 0x38, 0x00, 0x00, 0x00, 0x08, 0x72, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, // ...8....r.......
	0x46, 0x02, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x56, 0x05, 0x10, 0x00, // F...A.......V...
	0x01, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x07, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // ........".......
	0x0a, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, // ........:.......
	0x38, 0x00, 0x00, 0x09, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x80, // 8..."...........
	0x81, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, // ........:. .....
	0x0b, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x09, 0x72, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, // ....2...r.......
	0x56, 0x05, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, // V.......F.......
	0x46, 0x02, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x82, 0x00, 0x10, 0x00, // F.......6.......
	0x02, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x11, 0x00, 0x00, 0x08, // .....@.....?....
	0x12, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, // ........F.......
	0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x08, // F. .............
	0x22, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, // ".......F.......
	0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x08, // F. .............
	0x42, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, // B.......F.......
	0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, // F. .........H...
	0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // ....CU..........
	0x46, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // F.......F~......
	0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .`.......@......
	0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x22, 0x00, 0x10, 0x00, // H.......CU.."...
	0x00, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x7e, 0x10, 0x00, // .............~..
	0x01, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, // .....`.......@..
	0x00, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // ....3...........
	0x1a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x33, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, // 3...........*...
	0x01, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x09, // ............2...
	0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x3a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, // :........@.....?
	0x0e, 0x00, 0x00, 0x0a, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, // .............@..
	0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, // ...?...?...?...?
	0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x12, 0x00, 0x10, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........A.......
	0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x32, 0x00, 0x00, 0x0b, 0x12, 0x00, 0x10, 0x00, // .@.....?2.......
	0x00, 0x00, 0x00, 0x00, 0x0a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ...... .........
	0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, // ........:. .....
	0x01, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // ....4...........
	0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .........@......
	0x36, 0x00, 0x00, 0x06, 0x82, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x80, // 6...............
	0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x22, 0x00, 0x10, 0x00, // A.......6..."...
	0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x09, // .....@......7...
	0x32, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // 2...............
	0xe6, 0x0a, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // ........F.......
	0x00, 0x00, 0x00, 0x08, 0x32, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x80, // ....2.......F...
	0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x10, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // A.......F.......
	0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x72, 0x00, 0x10, 0x00, // H.......CU..r...
	0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, // ....F.......F~..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, // .....`.......@..
	0x00, 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x05, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // ..../...r.......
	0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x08, 0x72, 0x00, 0x10, 0x00, // F.......8...r...
	0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf6, 0x8f, 0x20, 0x00, // ....F......... .
	0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x05, 0x72, 0x00, 0x10, 0x00, // ............r...
	0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x08, // ....F...........
	0x82, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // ........F.......
	0x46, 0x82, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x08, // F. .............
	0x12, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // ........F.......
	0x46, 0x82, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, // F. .............
	0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // ".......:.......
	0x0a, 0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, // ....A...........
	0x82, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // ........:.......
	0x0a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, // ................
	0x01, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, // ....:........@..
	0x17, 0xb7, 0xd1, 0x38, 0x00, 0x00, 0x00, 0x08, 0x72, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, // ...8....r.......
	0x46, 0x02, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf6, 0x0f, 0x10, 0x00, // F...A...........
	0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x07, 0x82, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // ................
	0x38, 0x00, 0x00, 0x09, 0x82, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x80, // 8...........:...
	0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, // ........:. .....
	0x0b, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x09, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // ....2...r.......
	0xf6, 0x0f, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, // ........F.......
	0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x82, 0x00, 0x10, 0x00, // F.......6.......
	0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x11, 0x00, 0x00, 0x08, // .....@.....?....
	0x12, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // ........F.......
	0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x08, // F. .............
	0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // ".......F.......
	0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x08, // F. .............
	0x42, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // B.......F.......
	0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, // F. .............
	0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // r.......F.......
	0x46, 0x02, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x05, 0x72, 0x00, 0x10, 0x00, // F......./...r...
	0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x0b, // ....F...........
	0x82, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, // .........@.....?
	0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x3a, 0x80, 0x20, 0x00, // ...?...?...?:. .
	0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x07, 0x72, 0x00, 0x10, 0x00, // ........8...r...
	0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf6, 0x0f, 0x10, 0x00, // ....F...........
	0x00, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x05, 0x72, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // ........r ......
	0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x82, 0x20, 0x10, 0x00, // F.......6.... ..
	0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x3e, 0x00, 0x00, 0x01, // .....@.....?>...
	0x00, 0x00, 0xc0, 0x00,                                                                         // ....
};
static const uint8_t fs_pp_stereo_anaglyph_lin_gamma_dyndesat_spv[6217] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x13, 0x53, // FSH.o.><.......S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, // tereo_MS_ZPD_YAx
	0x69, 0x73, 0x12, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x77, 0x5f, 0x68, // is...........w_h
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x01, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, // _height.........
	0x00, 0x1a, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // ..Stereo_LeftLum
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x12, 0x01, 0xa0, 0x00, // inance_Gamma....
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, // .......Stereo_Ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, // ghtLuminance_Dyn
	0x44, 0x65, 0x73, 0x61, 0x74, 0x12, 0x01, 0xb0, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, // Desat...........
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x01, // Stereo_LeftMat..
	0x20, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, //  ........Stereo_
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x01, 0x60, 0x00, 0x04, 0x00, 0x00, 0x00, // RightMat..`.....
	0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, // ...tex_stereo_fb
	0x30, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x02, 0x22, 0x00, 0x10, 0x74, 0x65, 0x78, 0x5f, 0x73, // 0......."..tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x30, 0x00, 0x03, 0x00, 0x00, // tereo_depth0....
	0x00, 0x00, 0x02, 0x22, 0x00, 0x4c, 0x17, 0x00, 0x00, 0x03, 0x02, 0x23, 0x07, 0x00, 0x00, 0x01, // ...".L.....#....
	0x00, 0x0b, 0x00, 0x08, 0x00, 0xb4, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x02, // ................
	0x00, 0x01, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, 0x4c, 0x53, // .............GLS
	0x4c, 0x2e, 0x73, 0x74, 0x64, 0x2e, 0x34, 0x35, 0x30, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x03, // L.std.450.......
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x07, 0x00, 0x04, 0x00, 0x00, // ................
	0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, 0x00, 0xd9, 0x01, 0x00, // .....main.......
	0x00, 0xe4, 0x01, 0x00, 0x00, 0x10, 0x00, 0x03, 0x00, 0x04, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, // ................
	0x00, 0x03, 0x00, 0x03, 0x00, 0x05, 0x00, 0x00, 0x00, 0xf4, 0x01, 0x00, 0x00, 0x05, 0x00, 0x04, // ................
	0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x08, // .....main.......
	0x00, 0x41, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // .A...tex_stereo_
	0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x08, // fbSampler.......
	0x00, 0x44, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // .D...tex_stereo_
	0x66, 0x62, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x08, // fbTexture.......
	0x00, 0x48, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // .H...tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x00, 0x05, 0x00, 0x08, // depthSampler....
	0x00, 0x4a, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // .J...tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x00, 0x05, 0x00, 0x06, // depthTexture....
	0x00, 0x6f, 0x00, 0x00, 0x00, 0x55, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x6c, 0x6f, 0x63, // .o...UniformBloc
	0x6b, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x08, 0x00, 0x6f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // k........o......
	0x00, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, // .Stereo_MS_ZPD_Y
	0x41, 0x78, 0x69, 0x73, 0x00, 0x06, 0x00, 0x06, 0x00, 0x6f, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, // Axis.....o......
	0x00, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x00, 0x00, 0x06, 0x00, 0x07, // .w_h_height.....
	0x00, 0x6f, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // .o.......Stereo_
	0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x00, 0x00, 0x06, 0x00, 0x07, 0x00, 0x6f, 0x00, 0x00, // LeftMat......o..
	0x00, 0x03, 0x00, 0x00, 0x00, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, // .....Stereo_Righ
	0x74, 0x4d, 0x61, 0x74, 0x00, 0x06, 0x00, 0x0a, 0x00, 0x6f, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, // tMat.....o......
	0x00, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, // .Stereo_LeftLumi
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x00, 0x00, 0x06, 0x00, 0x0b, // nance_Gamma.....
	0x00, 0x6f, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // .o.......Stereo_
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, // RightLuminance_D
	0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x00, 0x00, 0x05, 0x00, 0x03, 0x00, 0x71, 0x00, 0x00, // ynDesat......q..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x05, 0x00, 0xd9, 0x01, 0x00, 0x00, 0x76, 0x5f, 0x74, // .............v_t
	0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x00, 0x05, 0x00, 0x06, 0x00, 0xe4, 0x01, 0x00, // excoord0........
	0x00, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x00, // .bgfx_FragData0.
	0x00, 0x47, 0x00, 0x04, 0x00, 0x41, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .G...A..."......
	0x00, 0x47, 0x00, 0x04, 0x00, 0x41, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, // .G...A...!......
	0x00, 0x47, 0x00, 0x04, 0x00, 0x44, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .G...D..."......
	0x00, 0x47, 0x00, 0x04, 0x00, 0x44, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, // .G...D...!......
	0x00, 0x47, 0x00, 0x04, 0x00, 0x48, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .G...H..."......
	0x00, 0x47, 0x00, 0x04, 0x00, 0x48, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, // .G...H...!......
	0x00, 0x47, 0x00, 0x04, 0x00, 0x4a, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .G...J..."......
	0x00, 0x47, 0x00, 0x04, 0x00, 0x4a, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, // .G...J...!......
	0x00, 0x48, 0x00, 0x05, 0x00, 0x6f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, // .H...o.......#..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0x6f, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, // .....H...o......
	0x00, 0x23, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x48, 0x00, 0x04, 0x00, 0x6f, 0x00, 0x00, // .#.......H...o..
	0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0x6f, 0x00, 0x00, // .........H...o..
	0x00, 0x02, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, // .....#... ...H..
	0x00, 0x6f, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, // .o..............
	0x00, 0x48, 0x00, 0x04, 0x00, 0x6f, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, // .H...o..........
	0x00, 0x48, 0x00, 0x05, 0x00, 0x6f, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, // .H...o.......#..
	0x00, 0x60, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0x6f, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, // .`...H...o......
	0x00, 0x07, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0x6f, 0x00, 0x00, // .........H...o..
	0x00, 0x04, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, // .....#.......H..
	0x00, 0x6f, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0xb0, 0x00, 0x00, // .o.......#......
	0x00, 0x47, 0x00, 0x03, 0x00, 0x6f, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, // .G...o.......G..
	0x00, 0x71, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, // .q...".......G..
	0x00, 0x71, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, // .q...!.......G..
	0x00, 0xd9, 0x01, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, // .............G..
	0x00, 0xe4, 0x01, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x02, // ................
	0x00, 0x02, 0x00, 0x00, 0x00, 0x21, 0x00, 0x03, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, // .....!..........
	0x00, 0x1a, 0x00, 0x02, 0x00, 0x06, 0x00, 0x00, 0x00, 0x16, 0x00, 0x03, 0x00, 0x07, 0x00, 0x00, // ................
	0x00, 0x20, 0x00, 0x00, 0x00, 0x19, 0x00, 0x09, 0x00, 0x08, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, // . ..............
	0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x0b, 0x00, 0x00, // ................
	0x00, 0x07, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, // ................
	0x00, 0x07, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x15, 0x00, 0x00, // ................
	0x00, 0x07, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x40, 0x00, 0x00, // ......... ...@..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x40, 0x00, 0x00, // .........;...@..
	0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x43, 0x00, 0x00, // .A....... ...C..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x43, 0x00, 0x00, // .........;...C..
	0x00, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x40, 0x00, 0x00, // .D.......;...@..
	0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x43, 0x00, 0x00, // .H.......;...C..
	0x00, 0x4a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x00, 0x04, 0x00, 0x4d, 0x00, 0x00, // .J...........M..
	0x00, 0x20, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x4d, 0x00, 0x00, // . .......+...M..
	0x00, 0x4e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x4d, 0x00, 0x00, // .N.......+...M..
	0x00, 0x52, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x03, 0x00, 0x56, 0x00, 0x00, // .R...........V..
	0x00, 0x08, 0x00, 0x00, 0x00, 0x14, 0x00, 0x02, 0x00, 0x6b, 0x00, 0x00, 0x00, 0x18, 0x00, 0x04, // .........k......
	0x00, 0x6e, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x08, // .n..............
	0x00, 0x6f, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x6e, 0x00, 0x00, // .o...........n..
	0x00, 0x6e, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, // .n........... ..
	0x00, 0x70, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x6f, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, // .p.......o...;..
	0x00, 0x70, 0x00, 0x00, 0x00, 0x71, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x15, 0x00, 0x04, // .p...q..........
	0x00, 0x72, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, // .r... .......+..
	0x00, 0x72, 0x00, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, // .r...s....... ..
	0x00, 0x74, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, // .t...........+..
	0x00, 0x07, 0x00, 0x00, 0x00, 0x77, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, // .....w.......+..
	0x00, 0x72, 0x00, 0x00, 0x00, 0x7a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, // .r...z.......+..
	0x00, 0x07, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x17, 0x00, 0x04, // ............?...
	0x00, 0x87, 0x00, 0x00, 0x00, 0x6b, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, // .....k.......+..
	0x00, 0x07, 0x00, 0x00, 0x00, 0x93, 0x00, 0x00, 0x00, 0xfa, 0x7e, 0x2a, 0x3f, 0x2b, 0x00, 0x04, // ..........~*?+..
	0x00, 0x72, 0x00, 0x00, 0x00, 0xb5, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, // .r...........+..
	0x00, 0x07, 0x00, 0x00, 0x00, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x2b, 0x00, 0x04, // ............?+..
	0x00, 0x72, 0x00, 0x00, 0x00, 0xbb, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, // .r...........+..
	0x00, 0x4d, 0x00, 0x00, 0x00, 0x2d, 0x01, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, // .M...-....... ..
	0x00, 0x2e, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, // .............+..
	0x00, 0x4d, 0x00, 0x00, 0x00, 0x35, 0x01, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, // .M...5.......+..
	0x00, 0x07, 0x00, 0x00, 0x00, 0x55, 0x01, 0x00, 0x00, 0x17, 0xb7, 0xd1, 0x38, 0x2b, 0x00, 0x04, // .....U......8+..
	0x00, 0x4d, 0x00, 0x00, 0x00, 0x7a, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, // .M...z....... ..
	0x00, 0x7b, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x6e, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, // .{.......n...+..
	0x00, 0x4d, 0x00, 0x00, 0x00, 0x84, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, // .M........... ..
	0x00, 0xd8, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, // .............;..
	0x00, 0xd8, 0x01, 0x00, 0x00, 0xd9, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, // ............. ..
	0x00, 0xe3, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, // .............;..
	0x00, 0xe3, 0x01, 0x00, 0x00, 0xe4, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x36, 0x00, 0x05, // .............6..
	0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, // ................
	0x00, 0xf8, 0x00, 0x02, 0x00, 0x05, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, // .........=......
	0x00, 0x42, 0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x08, 0x00, 0x00, // .B...A...=......
	0x00, 0x45, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, // .E...D...=......
	0x00, 0x49, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x08, 0x00, 0x00, // .I...H...=......
	0x00, 0x4b, 0x00, 0x00, 0x00, 0x4a, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x0b, 0x00, 0x00, // .K...J...=......
	0x00, 0xda, 0x01, 0x00, 0x00, 0xd9, 0x01, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x74, 0x00, 0x00, // .........A...t..
	0x00, 0x5f, 0x02, 0x00, 0x00, 0x71, 0x00, 0x00, 0x00, 0x52, 0x00, 0x00, 0x00, 0x73, 0x00, 0x00, // ._...q...R...s..
	0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x60, 0x02, 0x00, 0x00, 0x5f, 0x02, 0x00, // .=.......`..._..
	0x00, 0xb7, 0x00, 0x05, 0x00, 0x6b, 0x00, 0x00, 0x00, 0x61, 0x02, 0x00, 0x00, 0x60, 0x02, 0x00, // .....k...a...`..
	0x00, 0x77, 0x00, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x74, 0x00, 0x00, 0x00, 0x62, 0x02, 0x00, // .w...A...t...b..
	0x00, 0x71, 0x00, 0x00, 0x00, 0x52, 0x00, 0x00, 0x00, 0x7a, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, // .q...R...z...=..
	0x00, 0x07, 0x00, 0x00, 0x00, 0x63, 0x02, 0x00, 0x00, 0x62, 0x02, 0x00, 0x00, 0x85, 0x00, 0x05, // .....c...b......
	0x00, 0x07, 0x00, 0x00, 0x00, 0x67, 0x02, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x63, 0x02, 0x00, // .....g.......c..
	0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x68, 0x02, 0x00, 0x00, 0x77, 0x00, 0x00, // .P.......h...w..
	0x00, 0x67, 0x02, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x6a, 0x02, 0x00, // .g...........j..
	0x00, 0x80, 0x00, 0x00, 0x00, 0x63, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, // .....c...P......
	0x00, 0x6b, 0x02, 0x00, 0x00, 0x6a, 0x02, 0x00, 0x00, 0x77, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, // .k...j...w...P..
	0x00, 0x87, 0x00, 0x00, 0x00, 0x6c, 0x02, 0x00, 0x00, 0x61, 0x02, 0x00, 0x00, 0x61, 0x02, 0x00, // .....l...a...a..
	0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x6d, 0x02, 0x00, 0x00, 0x6c, 0x02, 0x00, // .........m...l..
	0x00, 0x68, 0x02, 0x00, 0x00, 0x6b, 0x02, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, // .h...k..........
	0x00, 0x6e, 0x02, 0x00, 0x00, 0xda, 0x01, 0x00, 0x00, 0x6d, 0x02, 0x00, 0x00, 0x56, 0x00, 0x05, // .n.......m...V..
	0x00, 0x56, 0x00, 0x00, 0x00, 0xf6, 0x02, 0x00, 0x00, 0x4b, 0x00, 0x00, 0x00, 0x49, 0x00, 0x00, // .V.......K...I..
	0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xf9, 0x02, 0x00, 0x00, 0xf6, 0x02, 0x00, // .X..............
	0x00, 0x6e, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x77, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, // .n.......w...Q..
	0x00, 0x07, 0x00, 0x00, 0x00, 0x71, 0x02, 0x00, 0x00, 0xf9, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, // .....q..........
	0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x75, 0x02, 0x00, 0x00, 0x93, 0x00, 0x00, // .........u......
	0x00, 0x63, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x76, 0x02, 0x00, // .c...P.......v..
	0x00, 0x77, 0x00, 0x00, 0x00, 0x75, 0x02, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // .w...u..........
	0x00, 0x78, 0x02, 0x00, 0x00, 0x93, 0x00, 0x00, 0x00, 0x63, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, // .x.......c...P..
	0x00, 0x0b, 0x00, 0x00, 0x00, 0x79, 0x02, 0x00, 0x00, 0x78, 0x02, 0x00, 0x00, 0x77, 0x00, 0x00, // .....y...x...w..
	0x00, 0x50, 0x00, 0x05, 0x00, 0x87, 0x00, 0x00, 0x00, 0x7a, 0x02, 0x00, 0x00, 0x61, 0x02, 0x00, // .P.......z...a..
	0x00, 0x61, 0x02, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x7b, 0x02, 0x00, // .a...........{..
	0x00, 0x7a, 0x02, 0x00, 0x00, 0x76, 0x02, 0x00, 0x00, 0x79, 0x02, 0x00, 0x00, 0x81, 0x00, 0x05, // .z...v...y......
	0x00, 0x0b, 0x00, 0x00, 0x00, 0x7c, 0x02, 0x00, 0x00, 0xda, 0x01, 0x00, 0x00, 0x7b, 0x02, 0x00, // .....|.......{..
	0x00, 0x56, 0x00, 0x05, 0x00, 0x56, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x4b, 0x00, 0x00, // .V...V.......K..
	0x00, 0x49, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00, // .I...X..........
	0x00, 0x00, 0x03, 0x00, 0x00, 0x7c, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x77, 0x00, 0x00, // .....|.......w..
	0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x7f, 0x02, 0x00, 0x00, 0x03, 0x03, 0x00, // .Q..............
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x80, 0x02, 0x00, // ................
	0x00, 0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x71, 0x02, 0x00, 0x00, 0x7f, 0x02, 0x00, // .....%...q......
	0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x84, 0x02, 0x00, 0x00, 0x77, 0x00, 0x00, // .P...........w..
	0x00, 0x63, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x86, 0x02, 0x00, // .c...P..........
	0x00, 0x63, 0x02, 0x00, 0x00, 0x77, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x87, 0x00, 0x00, // .c...w...P......
	0x00, 0x87, 0x02, 0x00, 0x00, 0x61, 0x02, 0x00, 0x00, 0x61, 0x02, 0x00, 0x00, 0xa9, 0x00, 0x06, // .....a...a......
	0x00, 0x0b, 0x00, 0x00, 0x00, 0x88, 0x02, 0x00, 0x00, 0x87, 0x02, 0x00, 0x00, 0x84, 0x02, 0x00, // ................
	0x00, 0x86, 0x02, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x89, 0x02, 0x00, // ................
	0x00, 0xda, 0x01, 0x00, 0x00, 0x88, 0x02, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, 0x56, 0x00, 0x00, // .........V...V..
	0x00, 0x0a, 0x03, 0x00, 0x00, 0x4b, 0x00, 0x00, 0x00, 0x49, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, // .....K...I...X..
	0x00, 0x0e, 0x00, 0x00, 0x00, 0x0d, 0x03, 0x00, 0x00, 0x0a, 0x03, 0x00, 0x00, 0x89, 0x02, 0x00, // ................
	0x00, 0x02, 0x00, 0x00, 0x00, 0x77, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // .....w...Q......
	0x00, 0x8c, 0x02, 0x00, 0x00, 0x0d, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, // ................
	0x00, 0x07, 0x00, 0x00, 0x00, 0x8d, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, // .............%..
	0x00, 0x80, 0x02, 0x00, 0x00, 0x8c, 0x02, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x74, 0x00, 0x00, // .........A...t..
	0x00, 0x8e, 0x02, 0x00, 0x00, 0x71, 0x00, 0x00, 0x00, 0x4e, 0x00, 0x00, 0x00, 0xb5, 0x00, 0x00, // .....q...N......
	0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x8f, 0x02, 0x00, 0x00, 0x8e, 0x02, 0x00, // .=..............
	0x00, 0x41, 0x00, 0x06, 0x00, 0x74, 0x00, 0x00, 0x00, 0x92, 0x02, 0x00, 0x00, 0x71, 0x00, 0x00, // .A...t.......q..
	0x00, 0x52, 0x00, 0x00, 0x00, 0xbb, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, // .R.......=......
	0x00, 0x93, 0x02, 0x00, 0x00, 0x92, 0x02, 0x00, 0x00, 0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // ................
	0x00, 0x94, 0x02, 0x00, 0x00, 0xb9, 0x00, 0x00, 0x00, 0x93, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, // ................
	0x00, 0x07, 0x00, 0x00, 0x00, 0x95, 0x02, 0x00, 0x00, 0x94, 0x02, 0x00, 0x00, 0x80, 0x00, 0x00, // ................
	0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x96, 0x02, 0x00, 0x00, 0x8d, 0x02, 0x00, // ................
	0x00, 0x95, 0x02, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x97, 0x02, 0x00, // ................
	0x00, 0x80, 0x00, 0x00, 0x00, 0x96, 0x02, 0x00, 0x00, 0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // ................
	0x00, 0x98, 0x02, 0x00, 0x00, 0xb9, 0x00, 0x00, 0x00, 0x97, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, // ................
	0x00, 0x07, 0x00, 0x00, 0x00, 0x99, 0x02, 0x00, 0x00, 0xb9, 0x00, 0x00, 0x00, 0x98, 0x02, 0x00, // ................
	0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x9a, 0x02, 0x00, 0x00, 0x63, 0x02, 0x00, // .............c..
	0x00, 0x99, 0x02, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x9b, 0x02, 0x00, // ................
	0x00, 0x8f, 0x02, 0x00, 0x00, 0x9a, 0x02, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, // ................
	0x00, 0x9c, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x77, 0x00, 0x00, // .........(...w..
	0x00, 0x9b, 0x02, 0x00, 0x00, 0x7f, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0xa0, 0x02, 0x00, // ................
	0x00, 0x9c, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xa1, 0x02, 0x00, // .....P..........
	0x00, 0x77, 0x00, 0x00, 0x00, 0xa0, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, // .w.......P......
	0x00, 0xa3, 0x02, 0x00, 0x00, 0x9c, 0x02, 0x00, 0x00, 0x77, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, // .........w...P..
	0x00, 0x87, 0x00, 0x00, 0x00, 0xa4, 0x02, 0x00, 0x00, 0x61, 0x02, 0x00, 0x00, 0x61, 0x02, 0x00, // .........a...a..
	0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xa5, 0x02, 0x00, 0x00, 0xa4, 0x02, 0x00, // ................
	0x00, 0xa1, 0x02, 0x00, 0x00, 0xa3, 0x02, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, // ................
	0x00, 0xa6, 0x02, 0x00, 0x00, 0xda, 0x01, 0x00, 0x00, 0xa5, 0x02, 0x00, 0x00, 0x56, 0x00, 0x05, // .............V..
	0x00, 0x56, 0x00, 0x00, 0x00, 0x14, 0x03, 0x00, 0x00, 0x45, 0x00, 0x00, 0x00, 0x42, 0x00, 0x00, // .V.......E...B..
	0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x17, 0x03, 0x00, 0x00, 0x14, 0x03, 0x00, // .X..............
	0x00, 0xa6, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x77, 0x00, 0x00, 0x00, 0x4f, 0x00, 0x08, // .........w...O..
	0x00, 0x15, 0x00, 0x00, 0x00, 0xa9, 0x02, 0x00, 0x00, 0x17, 0x03, 0x00, 0x00, 0x17, 0x03, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x85, 0x00, 0x05, // ................
	0x00, 0x07, 0x00, 0x00, 0x00, 0xad, 0x02, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x63, 0x02, 0x00, // .............c..
	0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xae, 0x02, 0x00, 0x00, 0x77, 0x00, 0x00, // .P...........w..
	0x00, 0xad, 0x02, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xb0, 0x02, 0x00, // ................
	0x00, 0x80, 0x00, 0x00, 0x00, 0x63, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, // .....c...P......
	0x00, 0xb1, 0x02, 0x00, 0x00, 0xb0, 0x02, 0x00, 0x00, 0x77, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, // .........w...P..
	0x00, 0x87, 0x00, 0x00, 0x00, 0xb2, 0x02, 0x00, 0x00, 0x61, 0x02, 0x00, 0x00, 0x61, 0x02, 0x00, // .........a...a..
	0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xb3, 0x02, 0x00, 0x00, 0xb2, 0x02, 0x00, // ................
	0x00, 0xae, 0x02, 0x00, 0x00, 0xb1, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, // ................
	0x00, 0xb4, 0x02, 0x00, 0x00, 0xda, 0x01, 0x00, 0x00, 0xb3, 0x02, 0x00, 0x00, 0x56, 0x00, 0x05, // .............V..
	0x00, 0x56, 0x00, 0x00, 0x00, 0x1e, 0x03, 0x00, 0x00, 0x4b, 0x00, 0x00, 0x00, 0x49, 0x00, 0x00, // .V.......K...I..
	0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x21, 0x03, 0x00, 0x00, 0x1e, 0x03, 0x00, // .X.......!......
	0x00, 0xb4, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x77, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, // .........w...Q..
	0x00, 0x07, 0x00, 0x00, 0x00, 0xb7, 0x02, 0x00, 0x00, 0x21, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, // .........!......
	0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xbb, 0x02, 0x00, 0x00, 0x93, 0x00, 0x00, // ................
	0x00, 0x63, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xbc, 0x02, 0x00, // .c...P..........
	0x00, 0x77, 0x00, 0x00, 0x00, 0xbb, 0x02, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // .w..............
	0x00, 0xbe, 0x02, 0x00, 0x00, 0x93, 0x00, 0x00, 0x00, 0x63, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, // .........c...P..
	0x00, 0x0b, 0x00, 0x00, 0x00, 0xbf, 0x02, 0x00, 0x00, 0xbe, 0x02, 0x00, 0x00, 0x77, 0x00, 0x00, // .............w..
	0x00, 0x50, 0x00, 0x05, 0x00, 0x87, 0x00, 0x00, 0x00, 0xc0, 0x02, 0x00, 0x00, 0x61, 0x02, 0x00, // .P...........a..
	0x00, 0x61, 0x02, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xc1, 0x02, 0x00, // .a..............
	0x00, 0xc0, 0x02, 0x00, 0x00, 0xbc, 0x02, 0x00, 0x00, 0xbf, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, // ................
	0x00, 0x0b, 0x00, 0x00, 0x00, 0xc2, 0x02, 0x00, 0x00, 0xda, 0x01, 0x00, 0x00, 0xc1, 0x02, 0x00, // ................
	0x00, 0x56, 0x00, 0x05, 0x00, 0x56, 0x00, 0x00, 0x00, 0x28, 0x03, 0x00, 0x00, 0x4b, 0x00, 0x00, // .V...V...(...K..
	0x00, 0x49, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x2b, 0x03, 0x00, // .I...X.......+..
	0x00, 0x28, 0x03, 0x00, 0x00, 0xc2, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x77, 0x00, 0x00, // .(...........w..
	0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xc5, 0x02, 0x00, 0x00, 0x2b, 0x03, 0x00, // .Q...........+..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0xc6, 0x02, 0x00, // ................
	0x00, 0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0xb7, 0x02, 0x00, 0x00, 0xc5, 0x02, 0x00, // .....%..........
	0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xca, 0x02, 0x00, 0x00, 0x77, 0x00, 0x00, // .P...........w..
	0x00, 0x63, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xcc, 0x02, 0x00, // .c...P..........
	0x00, 0x63, 0x02, 0x00, 0x00, 0x77, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x87, 0x00, 0x00, // .c...w...P......
	0x00, 0xcd, 0x02, 0x00, 0x00, 0x61, 0x02, 0x00, 0x00, 0x61, 0x02, 0x00, 0x00, 0xa9, 0x00, 0x06, // .....a...a......
	0x00, 0x0b, 0x00, 0x00, 0x00, 0xce, 0x02, 0x00, 0x00, 0xcd, 0x02, 0x00, 0x00, 0xca, 0x02, 0x00, // ................
	0x00, 0xcc, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xcf, 0x02, 0x00, // ................
	0x00, 0xda, 0x01, 0x00, 0x00, 0xce, 0x02, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, 0x56, 0x00, 0x00, // .........V...V..
	0x00, 0x32, 0x03, 0x00, 0x00, 0x4b, 0x00, 0x00, 0x00, 0x49, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, // .2...K...I...X..
	0x00, 0x0e, 0x00, 0x00, 0x00, 0x35, 0x03, 0x00, 0x00, 0x32, 0x03, 0x00, 0x00, 0xcf, 0x02, 0x00, // .....5...2......
	0x00, 0x02, 0x00, 0x00, 0x00, 0x77, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // .....w...Q......
	0x00, 0xd2, 0x02, 0x00, 0x00, 0x35, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, // .....5..........
	0x00, 0x07, 0x00, 0x00, 0x00, 0xd3, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, // .............%..
	0x00, 0xc6, 0x02, 0x00, 0x00, 0xd2, 0x02, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x74, 0x00, 0x00, // .........A...t..
	0x00, 0xd4, 0x02, 0x00, 0x00, 0x71, 0x00, 0x00, 0x00, 0x4e, 0x00, 0x00, 0x00, 0xb5, 0x00, 0x00, // .....q...N......
	0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0xd5, 0x02, 0x00, 0x00, 0xd4, 0x02, 0x00, // .=..............
	0x00, 0x41, 0x00, 0x06, 0x00, 0x74, 0x00, 0x00, 0x00, 0xd8, 0x02, 0x00, 0x00, 0x71, 0x00, 0x00, // .A...t.......q..
	0x00, 0x52, 0x00, 0x00, 0x00, 0xbb, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, // .R.......=......
	0x00, 0xd9, 0x02, 0x00, 0x00, 0xd8, 0x02, 0x00, 0x00, 0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // ................
	0x00, 0xda, 0x02, 0x00, 0x00, 0xb9, 0x00, 0x00, 0x00, 0xd9, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, // ................
	0x00, 0x07, 0x00, 0x00, 0x00, 0xdb, 0x02, 0x00, 0x00, 0xda, 0x02, 0x00, 0x00, 0x80, 0x00, 0x00, // ................
	0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xdc, 0x02, 0x00, 0x00, 0xd3, 0x02, 0x00, // ................
	0x00, 0xdb, 0x02, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xdd, 0x02, 0x00, // ................
	0x00, 0x80, 0x00, 0x00, 0x00, 0xdc, 0x02, 0x00, 0x00, 0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // ................
	0x00, 0xde, 0x02, 0x00, 0x00, 0xb9, 0x00, 0x00, 0x00, 0xdd, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, // ................
	0x00, 0x07, 0x00, 0x00, 0x00, 0xdf, 0x02, 0x00, 0x00, 0xb9, 0x00, 0x00, 0x00, 0xde, 0x02, 0x00, // ................
	0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xe0, 0x02, 0x00, 0x00, 0x63, 0x02, 0x00, // .............c..
	0x00, 0xdf, 0x02, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xe1, 0x02, 0x00, // ................
	0x00, 0xd5, 0x02, 0x00, 0x00, 0xe0, 0x02, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, // ................
	0x00, 0xe2, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x77, 0x00, 0x00, // .........(...w..
	0x00, 0xe1, 0x02, 0x00, 0x00, 0x7f, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0xe6, 0x02, 0x00, // ................
	0x00, 0xe2, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xe7, 0x02, 0x00, // .....P..........
	0x00, 0x77, 0x00, 0x00, 0x00, 0xe6, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, // .w.......P......
	0x00, 0xe9, 0x02, 0x00, 0x00, 0xe2, 0x02, 0x00, 0x00, 0x77, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, // .........w...P..
	0x00, 0x87, 0x00, 0x00, 0x00, 0xea, 0x02, 0x00, 0x00, 0x61, 0x02, 0x00, 0x00, 0x61, 0x02, 0x00, // .........a...a..
	0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xeb, 0x02, 0x00, 0x00, 0xea, 0x02, 0x00, // ................
	0x00, 0xe7, 0x02, 0x00, 0x00, 0xe9, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, // ................
	0x00, 0xec, 0x02, 0x00, 0x00, 0xda, 0x01, 0x00, 0x00, 0xeb, 0x02, 0x00, 0x00, 0x56, 0x00, 0x05, // .............V..
	0x00, 0x56, 0x00, 0x00, 0x00, 0x3c, 0x03, 0x00, 0x00, 0x45, 0x00, 0x00, 0x00, 0x42, 0x00, 0x00, // .V...<...E...B..
	0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x3f, 0x03, 0x00, 0x00, 0x3c, 0x03, 0x00, // .X.......?...<..
	0x00, 0xec, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x77, 0x00, 0x00, 0x00, 0x4f, 0x00, 0x08, // .........w...O..
	0x00, 0x15, 0x00, 0x00, 0x00, 0xef, 0x02, 0x00, 0x00, 0x3f, 0x03, 0x00, 0x00, 0x3f, 0x03, 0x00, // .........?...?..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x41, 0x00, 0x06, // .............A..
	0x00, 0x74, 0x00, 0x00, 0x00, 0x11, 0x02, 0x00, 0x00, 0x71, 0x00, 0x00, 0x00, 0x2d, 0x01, 0x00, // .t.......q...-..
	0x00, 0xb5, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x12, 0x02, 0x00, // .....=..........
	0x00, 0x11, 0x02, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x74, 0x00, 0x00, 0x00, 0x13, 0x02, 0x00, // .....A...t......
	0x00, 0x71, 0x00, 0x00, 0x00, 0x2d, 0x01, 0x00, 0x00, 0xb5, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, // .q...-.......=..
	0x00, 0x07, 0x00, 0x00, 0x00, 0x14, 0x02, 0x00, 0x00, 0x13, 0x02, 0x00, 0x00, 0x41, 0x00, 0x06, // .............A..
	0x00, 0x74, 0x00, 0x00, 0x00, 0x15, 0x02, 0x00, 0x00, 0x71, 0x00, 0x00, 0x00, 0x2d, 0x01, 0x00, // .t.......q...-..
	0x00, 0xb5, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x16, 0x02, 0x00, // .....=..........
	0x00, 0x15, 0x02, 0x00, 0x00, 0x50, 0x00, 0x06, 0x00, 0x15, 0x00, 0x00, 0x00, 0x17, 0x02, 0x00, // .....P..........
	0x00, 0x12, 0x02, 0x00, 0x00, 0x14, 0x02, 0x00, 0x00, 0x16, 0x02, 0x00, 0x00, 0x0c, 0x00, 0x07, // ................
	0x00, 0x15, 0x00, 0x00, 0x00, 0x18, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, // ................
	0x00, 0xa9, 0x02, 0x00, 0x00, 0x17, 0x02, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x74, 0x00, 0x00, // .........A...t..
	0x00, 0x1a, 0x02, 0x00, 0x00, 0x71, 0x00, 0x00, 0x00, 0x2d, 0x01, 0x00, 0x00, 0xb5, 0x00, 0x00, // .....q...-......
	0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x1b, 0x02, 0x00, 0x00, 0x1a, 0x02, 0x00, // .=..............
	0x00, 0x41, 0x00, 0x06, 0x00, 0x74, 0x00, 0x00, 0x00, 0x1c, 0x02, 0x00, 0x00, 0x71, 0x00, 0x00, // .A...t.......q..
	0x00, 0x2d, 0x01, 0x00, 0x00, 0xb5, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, // .-.......=......
	0x00, 0x1d, 0x02, 0x00, 0x00, 0x1c, 0x02, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x74, 0x00, 0x00, // .........A...t..
	0x00, 0x1e, 0x02, 0x00, 0x00, 0x71, 0x00, 0x00, 0x00, 0x2d, 0x01, 0x00, 0x00, 0xb5, 0x00, 0x00, // .....q...-......
	0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x1f, 0x02, 0x00, 0x00, 0x1e, 0x02, 0x00, // .=..............
	0x00, 0x50, 0x00, 0x06, 0x00, 0x15, 0x00, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00, 0x1b, 0x02, 0x00, // .P....... ......
	0x00, 0x1d, 0x02, 0x00, 0x00, 0x1f, 0x02, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x15, 0x00, 0x00, // ................
	0x00, 0x21, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0xef, 0x02, 0x00, // .!..............
	0x00, 0x20, 0x02, 0x00, 0x00, 0x41, 0x00, 0x05, 0x00, 0x2e, 0x01, 0x00, 0x00, 0x52, 0x03, 0x00, // . ...A.......R..
	0x00, 0x71, 0x00, 0x00, 0x00, 0x2d, 0x01, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, // .q...-...=......
	0x00, 0x53, 0x03, 0x00, 0x00, 0x52, 0x03, 0x00, 0x00, 0x4f, 0x00, 0x08, 0x00, 0x15, 0x00, 0x00, // .S...R...O......
	0x00, 0x54, 0x03, 0x00, 0x00, 0x53, 0x03, 0x00, 0x00, 0x53, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, // .T...S...S......
	0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x94, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // ................
	0x00, 0x55, 0x03, 0x00, 0x00, 0x18, 0x02, 0x00, 0x00, 0x54, 0x03, 0x00, 0x00, 0x41, 0x00, 0x05, // .U.......T...A..
	0x00, 0x2e, 0x01, 0x00, 0x00, 0x57, 0x03, 0x00, 0x00, 0x71, 0x00, 0x00, 0x00, 0x35, 0x01, 0x00, // .....W...q...5..
	0x00, 0x3d, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x58, 0x03, 0x00, 0x00, 0x57, 0x03, 0x00, // .=.......X...W..
	0x00, 0x4f, 0x00, 0x08, 0x00, 0x15, 0x00, 0x00, 0x00, 0x59, 0x03, 0x00, 0x00, 0x58, 0x03, 0x00, // .O.......Y...X..
	0x00, 0x58, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, // .X..............
	0x00, 0x94, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x5a, 0x03, 0x00, 0x00, 0x18, 0x02, 0x00, // .........Z......
	0x00, 0x59, 0x03, 0x00, 0x00, 0x41, 0x00, 0x05, 0x00, 0x2e, 0x01, 0x00, 0x00, 0x5c, 0x03, 0x00, // .Y...A..........
	0x00, 0x71, 0x00, 0x00, 0x00, 0x2d, 0x01, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, // .q...-...=......
	0x00, 0x5d, 0x03, 0x00, 0x00, 0x5c, 0x03, 0x00, 0x00, 0x4f, 0x00, 0x08, 0x00, 0x15, 0x00, 0x00, // .].......O......
	0x00, 0x5e, 0x03, 0x00, 0x00, 0x5d, 0x03, 0x00, 0x00, 0x5d, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, // .^...]...]......
	0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x94, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // ................
	0x00, 0x5f, 0x03, 0x00, 0x00, 0x21, 0x02, 0x00, 0x00, 0x5e, 0x03, 0x00, 0x00, 0x41, 0x00, 0x05, // ._...!...^...A..
	0x00, 0x2e, 0x01, 0x00, 0x00, 0x61, 0x03, 0x00, 0x00, 0x71, 0x00, 0x00, 0x00, 0x35, 0x01, 0x00, // .....a...q...5..
	0x00, 0x3d, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x62, 0x03, 0x00, 0x00, 0x61, 0x03, 0x00, // .=.......b...a..
	0x00, 0x4f, 0x00, 0x08, 0x00, 0x15, 0x00, 0x00, 0x00, 0x63, 0x03, 0x00, 0x00, 0x62, 0x03, 0x00, // .O.......c...b..
	0x00, 0x62, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, // .b..............
	0x00, 0x94, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x64, 0x03, 0x00, 0x00, 0x21, 0x02, 0x00, // .........d...!..
	0x00, 0x63, 0x03, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x67, 0x03, 0x00, // .c...........g..
	0x00, 0x55, 0x03, 0x00, 0x00, 0x5a, 0x03, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // .U...Z..........
	0x00, 0x6a, 0x03, 0x00, 0x00, 0x5f, 0x03, 0x00, 0x00, 0x64, 0x03, 0x00, 0x00, 0x41, 0x00, 0x06, // .j..._...d...A..
	0x00, 0x74, 0x00, 0x00, 0x00, 0x6b, 0x03, 0x00, 0x00, 0x71, 0x00, 0x00, 0x00, 0x35, 0x01, 0x00, // .t...k...q...5..
	0x00, 0xb5, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x6c, 0x03, 0x00, // .....=.......l..
	0x00, 0x6b, 0x03, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x6f, 0x03, 0x00, // .k...........o..
	0x00, 0x55, 0x03, 0x00, 0x00, 0x5a, 0x03, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // .U...Z..........
	0x00, 0x71, 0x03, 0x00, 0x00, 0x67, 0x03, 0x00, 0x00, 0x55, 0x01, 0x00, 0x00, 0x88, 0x00, 0x05, // .q...g...U......
	0x00, 0x07, 0x00, 0x00, 0x00, 0x72, 0x03, 0x00, 0x00, 0x6f, 0x03, 0x00, 0x00, 0x71, 0x03, 0x00, // .....r...o...q..
	0x00, 0x0c, 0x00, 0x06, 0x00, 0x07, 0x00, 0x00, 0x00, 0x73, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, // .........s......
	0x00, 0x04, 0x00, 0x00, 0x00, 0x72, 0x03, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // .....r..........
	0x00, 0x74, 0x03, 0x00, 0x00, 0x6c, 0x03, 0x00, 0x00, 0x73, 0x03, 0x00, 0x00, 0x41, 0x00, 0x06, // .t...l...s...A..
	0x00, 0x74, 0x00, 0x00, 0x00, 0x75, 0x03, 0x00, 0x00, 0x71, 0x00, 0x00, 0x00, 0x35, 0x01, 0x00, // .t...u...q...5..
	0x00, 0xb5, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x76, 0x03, 0x00, // .....=.......v..
	0x00, 0x75, 0x03, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x79, 0x03, 0x00, // .u...........y..
	0x00, 0x5f, 0x03, 0x00, 0x00, 0x64, 0x03, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // ._...d..........
	0x00, 0x7b, 0x03, 0x00, 0x00, 0x6a, 0x03, 0x00, 0x00, 0x55, 0x01, 0x00, 0x00, 0x88, 0x00, 0x05, // .{...j...U......
	0x00, 0x07, 0x00, 0x00, 0x00, 0x7c, 0x03, 0x00, 0x00, 0x79, 0x03, 0x00, 0x00, 0x7b, 0x03, 0x00, // .....|...y...{..
	0x00, 0x0c, 0x00, 0x06, 0x00, 0x07, 0x00, 0x00, 0x00, 0x7d, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, // .........}......
	0x00, 0x04, 0x00, 0x00, 0x00, 0x7c, 0x03, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // .....|..........
	0x00, 0x7e, 0x03, 0x00, 0x00, 0x76, 0x03, 0x00, 0x00, 0x7d, 0x03, 0x00, 0x00, 0x50, 0x00, 0x06, // .~...v...}...P..
	0x00, 0x15, 0x00, 0x00, 0x00, 0x8e, 0x03, 0x00, 0x00, 0x67, 0x03, 0x00, 0x00, 0x67, 0x03, 0x00, // .........g...g..
	0x00, 0x67, 0x03, 0x00, 0x00, 0x50, 0x00, 0x06, 0x00, 0x15, 0x00, 0x00, 0x00, 0x82, 0x03, 0x00, // .g...P..........
	0x00, 0x74, 0x03, 0x00, 0x00, 0x74, 0x03, 0x00, 0x00, 0x74, 0x03, 0x00, 0x00, 0x0c, 0x00, 0x08, // .t...t...t......
	0x00, 0x15, 0x00, 0x00, 0x00, 0x94, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, // ................
	0x00, 0x18, 0x02, 0x00, 0x00, 0x8e, 0x03, 0x00, 0x00, 0x82, 0x03, 0x00, 0x00, 0x50, 0x00, 0x06, // .............P..
	0x00, 0x15, 0x00, 0x00, 0x00, 0x98, 0x03, 0x00, 0x00, 0x6a, 0x03, 0x00, 0x00, 0x6a, 0x03, 0x00, // .........j...j..
	0x00, 0x6a, 0x03, 0x00, 0x00, 0x50, 0x00, 0x06, 0x00, 0x15, 0x00, 0x00, 0x00, 0x88, 0x03, 0x00, // .j...P..........
	0x00, 0x7e, 0x03, 0x00, 0x00, 0x7e, 0x03, 0x00, 0x00, 0x7e, 0x03, 0x00, 0x00, 0x0c, 0x00, 0x08, // .~...~...~......
	0x00, 0x15, 0x00, 0x00, 0x00, 0x9e, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, // ................
	0x00, 0x21, 0x02, 0x00, 0x00, 0x98, 0x03, 0x00, 0x00, 0x88, 0x03, 0x00, 0x00, 0x41, 0x00, 0x05, // .!...........A..
	0x00, 0x7b, 0x01, 0x00, 0x00, 0xa2, 0x03, 0x00, 0x00, 0x71, 0x00, 0x00, 0x00, 0x7a, 0x01, 0x00, // .{.......q...z..
	0x00, 0x3d, 0x00, 0x04, 0x00, 0x6e, 0x00, 0x00, 0x00, 0xa3, 0x03, 0x00, 0x00, 0xa2, 0x03, 0x00, // .=...n..........
	0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xa5, 0x03, 0x00, 0x00, 0x94, 0x03, 0x00, // .Q..............
	0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xa6, 0x03, 0x00, // .....Q..........
	0x00, 0x94, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // .........Q......
	0x00, 0xa7, 0x03, 0x00, 0x00, 0x94, 0x03, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x50, 0x00, 0x07, // .............P..
	0x00, 0x0e, 0x00, 0x00, 0x00, 0xa8, 0x03, 0x00, 0x00, 0xa5, 0x03, 0x00, 0x00, 0xa6, 0x03, 0x00, // ................
	0x00, 0xa7, 0x03, 0x00, 0x00, 0xb9, 0x00, 0x00, 0x00, 0x91, 0x00, 0x05, 0x00, 0x0e, 0x00, 0x00, // ................
	0x00, 0xa9, 0x03, 0x00, 0x00, 0xa3, 0x03, 0x00, 0x00, 0xa8, 0x03, 0x00, 0x00, 0x41, 0x00, 0x05, // .............A..
	0x00, 0x7b, 0x01, 0x00, 0x00, 0xaa, 0x03, 0x00, 0x00, 0x71, 0x00, 0x00, 0x00, 0x84, 0x01, 0x00, // .{.......q......
	0x00, 0x3d, 0x00, 0x04, 0x00, 0x6e, 0x00, 0x00, 0x00, 0xab, 0x03, 0x00, 0x00, 0xaa, 0x03, 0x00, // .=...n..........
	0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xad, 0x03, 0x00, 0x00, 0x9e, 0x03, 0x00, // .Q..............
	0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xae, 0x03, 0x00, // .....Q..........
	0x00, 0x9e, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // .........Q......
	0x00, 0xaf, 0x03, 0x00, 0x00, 0x9e, 0x03, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x50, 0x00, 0x07, // .............P..
	0x00, 0x0e, 0x00, 0x00, 0x00, 0xb0, 0x03, 0x00, 0x00, 0xad, 0x03, 0x00, 0x00, 0xae, 0x03, 0x00, // ................
	0x00, 0xaf, 0x03, 0x00, 0x00, 0xb9, 0x00, 0x00, 0x00, 0x91, 0x00, 0x05, 0x00, 0x0e, 0x00, 0x00, // ................
	0x00, 0xb1, 0x03, 0x00, 0x00, 0xab, 0x03, 0x00, 0x00, 0xb0, 0x03, 0x00, 0x00, 0x81, 0x00, 0x05, // ................
	0x00, 0x0e, 0x00, 0x00, 0x00, 0xb2, 0x03, 0x00, 0x00, 0xa9, 0x03, 0x00, 0x00, 0xb1, 0x03, 0x00, // ................
	0x00, 0x4f, 0x00, 0x08, 0x00, 0x15, 0x00, 0x00, 0x00, 0xb3, 0x03, 0x00, 0x00, 0xb2, 0x03, 0x00, // .O..............
	0x00, 0xb2, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, // ................
	0x00, 0x41, 0x00, 0x06, 0x00, 0x74, 0x00, 0x00, 0x00, 0x2d, 0x02, 0x00, 0x00, 0x71, 0x00, 0x00, // .A...t...-...q..
	0x00, 0x2d, 0x01, 0x00, 0x00, 0xb5, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, // .-.......=......
	0x00, 0x2e, 0x02, 0x00, 0x00, 0x2d, 0x02, 0x00, 0x00, 0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // .....-..........
	0x00, 0x2f, 0x02, 0x00, 0x00, 0xb9, 0x00, 0x00, 0x00, 0x2e, 0x02, 0x00, 0x00, 0x41, 0x00, 0x06, // ./...........A..
	0x00, 0x74, 0x00, 0x00, 0x00, 0x30, 0x02, 0x00, 0x00, 0x71, 0x00, 0x00, 0x00, 0x2d, 0x01, 0x00, // .t...0...q...-..
	0x00, 0xb5, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x31, 0x02, 0x00, // .....=.......1..
	0x00, 0x30, 0x02, 0x00, 0x00, 0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x32, 0x02, 0x00, // .0...........2..
	0x00, 0xb9, 0x00, 0x00, 0x00, 0x31, 0x02, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x74, 0x00, 0x00, // .....1...A...t..
	0x00, 0x33, 0x02, 0x00, 0x00, 0x71, 0x00, 0x00, 0x00, 0x2d, 0x01, 0x00, 0x00, 0xb5, 0x00, 0x00, // .3...q...-......
	0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x34, 0x02, 0x00, 0x00, 0x33, 0x02, 0x00, // .=.......4...3..
	0x00, 0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x35, 0x02, 0x00, 0x00, 0xb9, 0x00, 0x00, // .........5......
	0x00, 0x34, 0x02, 0x00, 0x00, 0x50, 0x00, 0x06, 0x00, 0x15, 0x00, 0x00, 0x00, 0x36, 0x02, 0x00, // .4...P.......6..
	0x00, 0x2f, 0x02, 0x00, 0x00, 0x32, 0x02, 0x00, 0x00, 0x35, 0x02, 0x00, 0x00, 0x0c, 0x00, 0x07, // ./...2...5......
	0x00, 0x15, 0x00, 0x00, 0x00, 0x37, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, // .....7..........
	0x00, 0xb3, 0x03, 0x00, 0x00, 0x36, 0x02, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // .....6...Q......
	0x00, 0x38, 0x02, 0x00, 0x00, 0x37, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, // .8...7.......Q..
	0x00, 0x07, 0x00, 0x00, 0x00, 0x39, 0x02, 0x00, 0x00, 0x37, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, // .....9...7......
	0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x3a, 0x02, 0x00, 0x00, 0x37, 0x02, 0x00, // .Q.......:...7..
	0x00, 0x02, 0x00, 0x00, 0x00, 0x50, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x3b, 0x02, 0x00, // .....P.......;..
	0x00, 0x38, 0x02, 0x00, 0x00, 0x39, 0x02, 0x00, 0x00, 0x3a, 0x02, 0x00, 0x00, 0xb9, 0x00, 0x00, // .8...9...:......
	0x00, 0x3e, 0x00, 0x03, 0x00, 0xe4, 0x01, 0x00, 0x00, 0x3b, 0x02, 0x00, 0x00, 0xfd, 0x00, 0x01, // .>.......;......
	0x00, 0x38, 0x00, 0x01, 0x00, 0x00, 0x00, 0xc0, 0x00,                                           // .8.......
};
static const bgfx::EmbeddedShader fs_pp_stereo_anaglyph_lin_gamma_dyndesat = BGFX_EMBEDDED_SHADER(fs_pp_stereo_anaglyph_lin_gamma_dyndesat);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Build of fragment shader from fs_pp_stereo.sc to fs_pp_stereo_sbs_st with options: SBS STEREO
static const uint8_t fs_pp_stereo_sbs_st_mtl[836] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x14, 0x74, // FSH.Jc._.......t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, // ex_stereo_fbSamp
	0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x74, 0x65, // ler...........te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x54, 0x65, 0x78, 0x74, 0x75, // x_stereo_fbTextu
	0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x74, 0x65, 0x78, // re...........tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, // _stereo_depthSam
	0x70, 0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x74, // pler...........t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x54, // ex_stereo_depthT
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, // exture..........
	0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x10, 0x00, // .tex_stereo_fb..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x94, 0x02, 0x00, 0x00, 0x23, 0x69, 0x6e, 0x63, // ............#inc
	0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x64, 0x6c, // lude <metal_stdl
	0x69, 0x62, 0x3e, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x73, 0x69, // ib>.#include <si
	0x6d, 0x64, 0x2f, 0x73, 0x69, 0x6d, 0x64, 0x2e, 0x68, 0x3e, 0x0a, 0x0a, 0x75, 0x73, 0x69, 0x6e, // md/simd.h>..usin
	0x67, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x6d, 0x65, 0x74, 0x61, // g namespace meta
	0x6c, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, // l;..struct xlatM
	0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, // tlMain_out.{.   
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, //  float4 bgfx_Fra
	0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x20, 0x5b, 0x5b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x30, // gData0 [[color(0
	0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, // )]];.};..struct 
	0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x0a, 0x7b, // xlatMtlMain_in.{
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, // .    float2 v_te
	0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x5b, 0x5b, 0x75, 0x73, 0x65, 0x72, 0x28, 0x6c, // xcoord0 [[user(l
	0x6f, 0x63, 0x6e, 0x31, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x66, 0x72, 0x61, // ocn1)]];.};..fra
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, // gment xlatMtlMai
	0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, // n_out xlatMtlMai
	0x6e, 0x28, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, // n(xlatMtlMain_in
	0x20, 0x69, 0x6e, 0x20, 0x5b, 0x5b, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x5d, 0x5d, //  in [[stage_in]]
	0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x61, // , texture2d_arra
	0x79, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3e, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, // y<float> tex_ste
	0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // reo_fb [[texture
	0x28, 0x30, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x74, // (0)]], sampler t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, // ex_stereo_fbSamp
	0x6c, 0x65, 0x72, 0x20, 0x5b, 0x5b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x30, 0x29, // ler [[sampler(0)
	0x5d, 0x5d, 0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, // ]]).{.    xlatMt
	0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x3d, 0x20, // lMain_out out = 
	0x7b, 0x7d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, // {};.    float3 _
	0x32, 0x30, 0x35, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x69, 0x6e, 0x2e, // 205 = float3(in.
	0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2e, 0x78, 0x20, 0x2a, 0x20, // v_texcoord0.x * 
	0x32, 0x2e, 0x30, 0x2c, 0x20, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, // 2.0, in.v_texcoo
	0x72, 0x64, 0x30, 0x2e, 0x79, 0x2c, 0x20, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, // rd0.y, (in.v_tex
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2e, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x20, // coord0.x < 0.5) 
	0x3f, 0x20, 0x30, 0x2e, 0x30, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, // ? 0.0 : 1.0);.  
	0x20, 0x20, 0x6f, 0x75, 0x74, 0x2e, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, //   out.bgfx_FragD
	0x61, 0x74, 0x61, 0x30, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x74, 0x65, // ata0 = float4(te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2e, 0x73, 0x61, 0x6d, 0x70, // x_stereo_fb.samp
	0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, // le(tex_stereo_fb
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x32, 0x30, 0x35, 0x2e, 0x78, 0x79, // Sampler, _205.xy
	0x2c, 0x20, 0x75, 0x69, 0x6e, 0x74, 0x28, 0x72, 0x69, 0x6e, 0x74, 0x28, 0x5f, 0x32, 0x30, 0x35, // , uint(rint(_205
	0x2e, 0x7a, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, // .z)), level(0.0)
	0x29, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, // ).xyz, 1.0);.   
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6f, 0x75, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x0a, //  return out;.}..
	0x00, 0x00, 0x40, 0x00,                                                                         // ..@.
};
static const uint8_t fs_pp_stereo_sbs_st_essl[8569] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x21, // FSH.Jc._......f!
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x33, 0x32, 0x30, 0x20, 0x65, // ..#version 320 e
	0x73, 0x0a, 0x23, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x47, 0x4c, 0x5f, // s.#extension GL_
	0x45, 0x58, 0x54, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, // EXT_shader_textu
	0x72, 0x65, 0x5f, 0x6c, 0x6f, 0x64, 0x20, 0x3a, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x0a, // re_lod : enable.
	0x23, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x47, 0x4c, 0x5f, 0x45, 0x58, // #extension GL_EX
	0x54, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x20, // T_texture_array 
	0x3a, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, // : enable.#define
	0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, //  attribute in.#d
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, // efine varying in
	0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, // .precision highp
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3b, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, //  float;.precisio
	0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x69, 0x6e, 0x74, 0x3b, 0x0a, 0x70, 0x72, 0x65, // n highp int;.pre
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x73, 0x61, 0x6d, // cision highp sam
	0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x3b, 0x0a, 0x23, 0x64, 0x65, // pler2DArray;.#de
	0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x4c, 0x6f, // fine texture2DLo
	0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, // d      texture2D
	0x4c, 0x6f, 0x64, 0x45, 0x58, 0x54, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, // LodEXT.#define t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, 0x20, 0x20, // exture2DGrad    
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x47, 0x72, 0x61, 0x64, 0x45, 0x58, //  texture2DGradEX
	0x54, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // T.#define textur
	0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, // e2DProjLod  text
	0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x4c, 0x6f, 0x64, 0x45, 0x58, 0x54, 0x0a, // ure2DProjLodEXT.
	0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, // #define texture2
	0x44, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // DProjGrad textur
	0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, 0x45, 0x58, 0x54, 0x0a, 0x23, // e2DProjGradEXT.#
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, // define textureCu
	0x62, 0x65, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // beLod    texture
	0x43, 0x75, 0x62, 0x65, 0x4c, 0x6f, 0x64, 0x45, 0x58, 0x54, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, // CubeLodEXT.#defi
	0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x47, 0x72, // ne textureCubeGr
	0x61, 0x64, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, // ad   textureCube
	0x47, 0x72, 0x61, 0x64, 0x45, 0x58, 0x54, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, // GradEXT.#define 
	0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // shadow2D(_sample
	0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, // r, _coord) textu
	0x72, 0x65, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, // re(_sampler, _co
	0x6f, 0x72, 0x64, 0x29, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x73, 0x68, 0x61, // ord).#define sha
	0x64, 0x6f, 0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, // dow2DProj(_sampl
	0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x74, 0x65, 0x78, 0x74, // er, _coord) text
	0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // ureProj(_sampler
	0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x0a, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x65, // , _coord).out me
	0x64, 0x69, 0x75, 0x6d, 0x70, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, // diump vec4 bgfx_
	0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, // FragColor;.varyi
	0x6e, 0x67, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x5f, 0x65, 0x79, 0x65, 0x3b, 0x0a, // ng float v_eye;.
	0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x5f, 0x74, // varying vec2 v_t
	0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, // excoord0;.vec3 i
	0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, // nstMul(vec3 _vec
	0x2c, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, // , mat3 _mtx) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, // eturn ( (_vec) *
	0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, //  (_mtx) ); }.vec
	0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, // 3 instMul(mat3 _
	0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, // mtx, vec3 _vec) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, // { return ( (_mtx
	0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, // ) * (_vec) ); }.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, // vec4 instMul(vec
	0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, // 4 _vec, mat4 _mt
	0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, // x) { return ( (_
	0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, // vec) * (_mtx) );
	0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, //  }.vec4 instMul(
	0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // mat4 _mtx, vec4 
	0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // _vec) { return (
	0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, //  (_mtx) * (_vec)
	0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, 0x70, 0x28, //  ); }.float rcp(
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // float _a) { retu
	0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, // rn 1.0/_a; }.vec
	0x32, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, // 2 rcp(vec2 _a) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, //  return vec2(1.0
	0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x70, // )/_a; }.vec3 rcp
	0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // (vec3 _a) { retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, // rn vec3(1.0)/_a;
	0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x34, //  }.vec4 rcp(vec4
	0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, //  _a) { return ve
	0x63, 0x34, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, // c4(1.0)/_a; }.ve
	0x63, 0x32, 0x20, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, // c2 vec2_splat(fl
	0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // oat _x) { return
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, //  vec2(_x, _x); }
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, // .vec3 vec3_splat
	0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // (float _x) { ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, // urn vec3(_x, _x,
	0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, 0x65, 0x63, //  _x); }.vec4 vec
	0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, // 4_splat(float _x
	0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, // ) { return vec4(
	0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, // _x, _x, _x, _x);
	0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, //  }.uvec2 uvec2_s
	0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, // plat(uint _x) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, // return uvec2(_x,
	0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, 0x75, 0x76, //  _x); }.uvec3 uv
	0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, // ec3_splat(uint _
	0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, // x) { return uvec
	0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, // 3(_x, _x, _x); }
	0x0a, 0x75, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, // .uvec4 uvec4_spl
	0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // at(uint _x) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, // turn uvec4(_x, _
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x6d, 0x61, // x, _x, _x); }.ma
	0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, // t4 mtxFromRows(v
	0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, // ec4 _0, vec4 _1,
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, //  vec4 _2, vec4 _
	0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, // 3).{.return tran
	0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, // spose(mat4(_0, _
	0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // 1, _2, _3) );.}.
	0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, // mat4 mtxFromCols
	0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, // (vec4 _0, vec4 _
	0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // 1, vec4 _2, vec4
	0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, //  _3).{.return ma
	0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, // t4(_0, _1, _2, _
	0x33, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, // 3);.}.mat3 mtxFr
	0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, // omRows(vec3 _0, 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, // vec3 _1, vec3 _2
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, // ).{.return trans
	0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, // pose(mat3(_0, _1
	0x2c, 0x20, 0x5f, 0x32, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, // , _2) );.}.mat3 
	0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, // mtxFromCols(vec3
	0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, //  _0, vec3 _1, ve
	0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // c3 _2).{.return 
	0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, // mat3(_0, _1, _2)
	0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, // ;.}.uniform vec4
	0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, //  u_viewRect;.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, // form vec4 u_view
	0x54, 0x65, 0x78, 0x65, 0x6c, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, // Texel;.uniform m
	0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // at4 u_view;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, // orm mat4 u_invVi
	0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, // ew;.uniform mat4
	0x20, 0x75, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, //  u_proj;.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, 0x6a, 0x3b, //  mat4 u_invProj;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, // .uniform mat4 u_
	0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // viewProj;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, // m mat4 u_invView
	0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, // Proj;.uniform ma
	0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, 0x3b, 0x0a, // t4 u_model[32];.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, // uniform mat4 u_m
	0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // odelView;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, // m mat4 u_modelVi
	0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // ewProj;.uniform 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x66, 0x34, // vec4 u_alphaRef4
	0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x66, 0x6c, 0x6f, // ;.float sqr( flo
	0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // at v).{.return v
	0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, // *v;.}.vec2 sqr( 
	0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // vec2 v).{.return
	0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x73, 0x71, 0x72, //  v*v;.}.vec3 sqr
	0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, // ( vec3 v).{.retu
	0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6d, // rn v*v;.}.vec3 m
	0x75, 0x6c, 0x5f, 0x77, 0x31, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x2c, 0x20, 0x6d, // ul_w1( vec3 v, m
	0x61, 0x74, 0x34, 0x20, 0x6d, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // at4 m).{.return 
	0x76, 0x2e, 0x78, 0x2a, 0x6d, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, // v.x*m[0].xyz + (
	0x76, 0x2e, 0x79, 0x2a, 0x6d, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, // v.y*m[1].xyz + (
	0x76, 0x2e, 0x7a, 0x2a, 0x6d, 0x5b, 0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x6d, // v.z*m[2].xyz + m
	0x5b, 0x33, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // [3].xyz));.}.flo
	0x61, 0x74, 0x20, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, // at acos_approx_d
	0x69, 0x76, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, // ivPI( float v).{
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, // .float x = abs(v
	0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, // );.if(1. - x <= 
	0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, // 0.00006103515625
	0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, // ).return (v >= 0
	0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x3b, 0x0a, 0x66, 0x6c, // .) ? 0. : 1.;.fl
	0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, // oat res = ((-0.1
	0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, // 55972/3.14159265
	0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, // 3589793238462643
	0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, // 3832795) * x + (
	0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, // 1.56467/3.141592
	0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, // 6535897932384626
	0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, // 433832795) ) * s
	0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, // qrt(1. - x);.ret
	0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, // urn (v >= 0.) ? 
	0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, // res : 1. - res;.
	0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, // }.float atan2_ap
	0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, // prox_div2PI( flo
	0x61, 0x74, 0x20, 0x79, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x29, 0x0a, 0x7b, // at y, float x).{
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3d, 0x20, 0x61, // .float abs_y = a
	0x62, 0x73, 0x28, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, // bs(y);.float abs
	0x5f, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x78, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, // _x = abs(x);.if(
	0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, // abs_x <= 0.00006
	0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x20, 0x26, 0x26, 0x20, 0x61, 0x62, 0x73, // 103515625 && abs
	0x5f, 0x79, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, // _y <= 0.00006103
	0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x30, // 515625).return 0
	0x2e, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x61, 0x62, // .;.float r = (ab
	0x73, 0x5f, 0x78, 0x20, 0x2d, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x20, 0x2f, 0x20, 0x28, // s_x - abs_y) / (
	0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2b, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x3b, 0x0a, // abs_x + abs_y);.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3d, 0x20, 0x28, 0x28, // float angle = ((
	0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x28, 0x33, 0x2e, 0x2f, 0x38, 0x2e, // x < 0.) ? (3./8.
	0x29, 0x20, 0x3a, 0x20, 0x28, 0x31, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x29, 0x0a, 0x2b, 0x20, 0x28, // ) : (1./8.)).+ (
	0x30, 0x2e, 0x32, 0x31, 0x31, 0x38, 0x36, 0x38, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, // 0.211868 /(2.*3.
	0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, // 1415926535897932
	0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, // 384626433832795)
	0x20, 0x2a, 0x20, 0x72, 0x20, 0x2a, 0x20, 0x72, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x39, 0x38, 0x37, //  * r * r - 0.987
	0x33, 0x30, 0x35, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, // 305 /(2.*3.14159
	0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, // 2653589793238462
	0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, // 6433832795)) * (
	0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x72, 0x20, 0x3a, 0x20, // (x < 0.) ? -r : 
	0x72, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x79, 0x20, 0x3c, 0x20, // r);.return (y < 
	0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3a, 0x20, 0x61, // 0.) ? -angle : a
	0x6e, 0x67, 0x6c, 0x65, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x73, // ngle;.}.float as
	0x69, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, // in_approx_divPI(
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, //  float v).{.floa
	0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, // t x = abs(v);.if
	0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, // (1. - x <= 0.000
	0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, // 06103515625).ret
	0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, // urn (v >= 0.) ? 
	0x30, 0x2e, 0x35, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // 0.5 : -0.5;.floa
	0x74, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, // t res = ((-0.155
	0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, // 972/3.1415926535
	0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, // 8979323846264338
	0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, // 32795) * x + (1.
	0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, // 56467/3.14159265
	0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, // 3589793238462643
	0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, // 3832795) ) * sqr
	0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // t(1. - x);.retur
	0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, // n (v >= 0.) ? 0.
	0x35, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x20, 0x2b, // 5 - res : -0.5 +
	0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x61, 0x79, //  res;.}.vec2 ray
	0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x75, // _to_equirectangu
	0x6c, 0x61, 0x72, 0x5f, 0x75, 0x76, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x61, 0x79, // lar_uv( vec3 ray
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // ).{.return vec2(
	0x0a, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, // .0.5 + atan2_app
	0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x79, // rox_div2PI(ray.y
	0x2c, 0x20, 0x72, 0x61, 0x79, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, // , ray.x),.acos_a
	0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, // pprox_divPI(ray.
	0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, // z));.}.float Inv
	0x73, 0x52, 0x47, 0x42, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // sRGB( float colo
	0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, // r).{.if (color <
	0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, 0x34, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // = 0.04045).retur
	0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, // n color * (1.0/1
	0x32, 0x2e, 0x39, 0x32, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, // 2.92);.else.retu
	0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, // rn pow(color * (
	0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, // 1.0/1.055) + (0.
	0x30, 0x35, 0x35, 0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x29, // 055/1.055), 2.4)
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x52, 0x65, 0x63, // ;.}.float InvRec
	0x37, 0x30, 0x39, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // 709( float color
	0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, // ).{.if (color <=
	0x20, 0x30, 0x2e, 0x30, 0x38, 0x31, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, //  0.081).return c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x34, 0x2e, 0x35, 0x29, // olor * (1.0/4.5)
	0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, // ;.else.return po
	0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, // w(color * (1.0/1
	0x2e, 0x30, 0x39, 0x39, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x2f, 0x31, // .099) + (0.099/1
	0x2e, 0x30, 0x39, 0x39, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x30, 0x2e, 0x34, 0x35, 0x29, // .099), 1.0/0.45)
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, // ;.}.float InvGam
	0x6d, 0x61, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, // ma( float color)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, // .{.return InvsRG
	0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, // B(color);.}.vec3
	0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, //  InvGamma( vec3 
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // color).{.return 
	0x76, 0x65, 0x63, 0x33, 0x28, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, // vec3(InvGamma(co
	0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, // lor.x),InvGamma(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, // color.y),InvGamm
	0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // a(color.z));.}.v
	0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, // ec3 InvToneMap( 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, // vec3 color).{.fl
	0x6f, 0x61, 0x74, 0x20, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x30, 0x2e, // oat inv_2bh = 0.
	0x35, 0x2f, 0x30, 0x2e, 0x32, 0x35, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x68, // 5/0.25;.float bh
	0x20, 0x3d, 0x20, 0x34, 0x2e, 0x30, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2d, 0x20, 0x32, 0x2e, //  = 4.0*0.25 - 2.
	0x30, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // 0;.return (color
	0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2b, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x63, 0x6f, //  - 1.0 + sqrt(co
	0x6c, 0x6f, 0x72, 0x2a, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x20, 0x62, 0x68, 0x29, // lor*(color + bh)
	0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x2a, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, //  + 1.0))*inv_2bh
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x20, // ;.}.float sRGB( 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // float f).{.float
	0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, //  s;.if (f <= 0.0
	0x30, 0x33, 0x31, 0x33, 0x30, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, // 031308).s = 12.9
	0x32, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, // 2 * f;.else.s = 
	0x31, 0x2e, 0x30, 0x35, 0x35, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x31, // 1.055 * pow(f, 1
	0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x34, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x3b, // .0/2.4) - 0.055;
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // .return s;.}.flo
	0x61, 0x74, 0x20, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // at Rec709( float
	0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, //  f).{.float s;.i
	0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, 0x29, 0x0a, 0x73, // f (f <= 0.018).s
	0x20, 0x3d, 0x20, 0x34, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, //  = 4.5 * f;.else
	0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, // .s = 1.099 * pow
	0x28, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x39, // (f, 0.45) - 0.09
	0x39, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // 9;.return s;.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x66, 0x6c, // loat FBGamma( fl
	0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // oat color).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, // urn sRGB(color);
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, // .}.vec2 FBGamma(
	0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, //  vec2 color).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, // eturn vec2(FBGam
	0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, // ma(color.x),FBGa
	0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, // mma(color.y));.}
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, // .vec3 FBGamma( v
	0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // ec3 color).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, // urn vec3(FBGamma
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, // (color.x),FBGamm
	0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, // a(color.y),FBGam
	0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // ma(color.z));.}.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x32, 0x32, 0x28, 0x20, // vec3 FBGamma22( 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // vec3 color).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, // turn vec3(pow(co
	0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, // lor.x, 1.0/2.2),
	0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, 0x30, // pow(color.y, 1.0
	0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, // /2.2),pow(color.
	0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // z, 1.0/2.2));.}.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, // float FBToneMap(
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, //  float l).{.retu
	0x72, 0x6e, 0x20, 0x6c, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, // rn l * ((l*0.25 
	0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, // + 1.0) / (l + 1.
	0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x54, 0x6f, // 0));.}.vec2 FBTo
	0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // neMap( vec2 colo
	0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, // r).{.float l = d
	0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, // ot(color,vec2(0.
	0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, // 176204+0.0108109
	0x2a, 0x30, 0x2e, 0x35, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2b, 0x30, 0x2e, // *0.5,0.812985+0.
	0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x3b, 0x0a, 0x72, // 0108109*0.5));.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, // eturn color * ((
	0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, // l*0.25 + 1.0) / 
	0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // (l + 1.0));.}.ve
	0x63, 0x33, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, // c3 FBToneMap( ve
	0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // c3 color).{.floa
	0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, // t l = dot(color,
	0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2c, 0x30, 0x2e, // vec3(0.176204,0.
	0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2c, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, // 812985,0.0108109
	0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // ));.return color
	0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, //  * ((l*0.25 + 1.
	0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, // 0) / (l + 1.0));
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, // .}.vec4 Additive
	0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, // ( vec4 cBase, ve
	0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // c4 cBlend, float
	0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, //  percent).{.retu
	0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2b, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // rn cBase + cBlen
	0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // d*percent;.}.vec
	0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // 3 Screen ( vec3 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, // cBase, vec3 cBle
	0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, // nd).{.return 1.0
	0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, //  - (1.0 - cBase)
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, //  * (1.0 - cBlend
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, // );.}.vec4 Screen
	0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, //  ( vec4 cBase, v
	0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // ec4 cBlend).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, // turn 1.0 - (1.0 
	0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, // - cBase) * (1.0 
	0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // - cBlend);.}.vec
	0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, // 3 ScreenHDR ( ve
	0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, // c3 cBase, vec3 c
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // Blend).{.return 
	0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, // max(1.0 - (1.0 -
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, //  cBase) * (1.0 -
	0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, //  cBlend), vec3(0
	0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // .,0.,0.));.}.vec
	0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, // 4 ScreenHDR ( ve
	0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, // c4 cBase, vec4 c
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // Blend).{.return 
	0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, // max(1.0 - (1.0 -
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, //  cBase) * (1.0 -
	0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, //  cBlend), vec4(0
	0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // .,0.,0.,0.));.}.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x20, 0x28, 0x20, // vec4 Multiply ( 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // vec4 cBase, vec4
	0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, //  cBlend, float p
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // ercent).{.return
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2a, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, //  cBase * cBlend*
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, // percent;.}.vec4 
	0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, // Overlay ( vec4 c
	0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // Base, vec4 cBlen
	0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, // d).{.vec4 cNew =
	0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, //  step(0.5, cBase
	0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, // );.cNew = mix(cB
	0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, // ase*cBlend*2.0, 
	0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, // 1.0-2.0*(1.0-cBa
	0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, // se)*(1.0-cBlend)
	0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // , cNew);.return 
	0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, // cNew;.}.vec4 Ove
	0x72, 0x6c, 0x61, 0x79, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, // rlayHDR ( vec4 c
	0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // Base, vec4 cBlen
	0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, // d).{.vec4 cNew =
	0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, //  step(0.5, cBase
	0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x6d, 0x69, // );.cNew = max(mi
	0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, // x(cBase*cBlend*2
	0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, // .0, 1.0-2.0*(1.0
	0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, // -cBase)*(1.0-cBl
	0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, // end), cNew), vec
	0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, // 4(0.,0.,0.,0.));
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, // .return cNew;.}.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x73, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, // vec3 cos_hemisph
	0x65, 0x72, 0x65, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, // ere_sample( vec2
	0x20, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x68, 0x69, 0x20, //  t).{.float phi 
	0x3d, 0x20, 0x74, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x28, 0x32, 0x2e, 0x30, 0x2a, 0x33, 0x2e, 0x31, // = t.y * (2.0*3.1
	0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, // 4159265358979323
	0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x3b, // 84626433832795);
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, // .float cosTheta 
	0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x74, 0x2e, 0x78, // = sqrt(1.0 - t.x
	0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, // );.float sinThet
	0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, // a = sqrt(t.x);.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x70, 0x2c, 0x63, 0x70, 0x3b, 0x0a, 0x7b, 0x73, 0x70, 0x3d, // loat sp,cp;.{sp=
	0x73, 0x69, 0x6e, 0x28, 0x70, 0x68, 0x69, 0x29, 0x3b, 0x63, 0x70, 0x3d, 0x63, 0x6f, 0x73, 0x28, // sin(phi);cp=cos(
	0x70, 0x68, 0x69, 0x29, 0x3b, 0x7d, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // phi);};.return v
	0x65, 0x63, 0x33, 0x28, 0x63, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, // ec3(cp * sinThet
	0x61, 0x2c, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x73, 0x70, 0x20, // a, cosTheta, sp 
	0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // * sinTheta);.}.v
	0x65, 0x63, 0x33, 0x20, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x76, 0x65, // ec3 rotate_to_ve
	0x63, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, // ctor_upper( vec3
	0x20, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, //  vec, vec3 norma
	0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, // l).{.if(normal.y
	0x20, 0x3e, 0x20, 0x2d, 0x30, 0x2e, 0x39, 0x39, 0x39, 0x39, 0x39, 0x29, 0x0a, 0x7b, 0x0a, 0x66, //  > -0.99999).{.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x28, 0x31, 0x2e, // loat h = 1.0/(1.
	0x30, 0x2b, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, // 0+normal.y);.flo
	0x61, 0x74, 0x20, 0x68, 0x7a, 0x20, 0x3d, 0x20, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, // at hz = h*normal
	0x2e, 0x7a, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x3d, 0x20, // .z;.float hzx = 
	0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x3b, 0x0a, 0x72, 0x65, 0x74, // hz*normal.x;.ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, // urn vec3(.vec.x 
	0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x7a, 0x2a, 0x6e, // * (normal.y+hz*n
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x29, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x79, // ormal.z) + vec.y
	0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, //  * normal.x - ve
	0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, // c.z * hzx,.vec.y
	0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x2d, 0x20, 0x76, 0x65, //  * normal.y - ve
	0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, // c.x * normal.x -
	0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, //  vec.z * normal.
	0x7a, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, // z,.vec.y * norma
	0x6c, 0x2e, 0x7a, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x68, 0x7a, // l.z - vec.x * hz
	0x78, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, // x + vec.z * (nor
	0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, // mal.y+h*normal.x
	0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, // *normal.x));.}.e
	0x6c, 0x73, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x2d, 0x76, 0x65, 0x63, 0x3b, // lse return -vec;
	0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // .}.uniform vec4 
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x53, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, // Stereo_Saturatio
	0x6e, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // n;.uniform vec4 
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, // Stereo_MS_ZPD_YA
	0x78, 0x69, 0x73, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, // xis;.uniform sam
	0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x20, 0x74, 0x65, 0x78, 0x5f, // pler2DArray tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, // stereo_fb;.unifo
	0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, // rm sampler2DArra
	0x79, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, // y tex_stereo_dep
	0x74, 0x68, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, // th;.uniform vec4
	0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, 0x76, 0x65, 0x63, //  w_h_height;.vec
	0x33, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, // 3 gatherEyeColor
	0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x69, 0x73, // (vec2 u, bool is
	0x4c, 0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, // Left).{.return t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x6f, 0x64, // exture2DArrayLod
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, // (tex_stereo_fb, 
	0x76, 0x65, 0x63, 0x33, 0x28, 0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, 0x20, 0x69, // vec3(u.x, u.y, i
	0x73, 0x4c, 0x65, 0x66, 0x74, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x30, 0x20, 0x3a, 0x20, 0x31, 0x2e, // sLeft ? 0.0 : 1.
	0x30, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // 0), 0.).rgb;.}.v
	0x6f, 0x69, 0x64, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x69, // oid gatherLeftRi
	0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, // ghtColors(vec2 u
	0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x63, 0x6f, 0x6c, 0x2c, // , out vec3 lcol,
	0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x6f, 0x6c, 0x29, 0x0a, //  out vec3 rcol).
	0x7b, 0x0a, 0x6c, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // {.lcol = texture
	0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, // 2DArrayLod(tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x75, // tereo_fb, vec3(u
	0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2c, 0x20, 0x30, 0x2e, // .x, u.y, 0.), 0.
	0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x72, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, // ).xyz;.rcol = te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x6f, 0x64, 0x28, // xture2DArrayLod(
	0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x76, // tex_stereo_fb, v
	0x65, 0x63, 0x33, 0x28, 0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, // ec3(u.x, u.y, 1.
	0x29, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, // ), 0.).xyz;.}.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // iform mat4 Stere
	0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, // o_LeftMat;.unifo
	0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, // rm mat4 Stereo_R
	0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // ightMat;.uniform
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, //  vec4 Stereo_Lef
	0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, // tLuminance_Gamma
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, // ;.uniform vec4 S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, // tereo_RightLumin
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x3b, 0x0a, 0x76, // ance_DynDesat;.v
	0x6f, 0x69, 0x64, 0x20, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x65, 0x73, 0x61, 0x74, // oid DynamicDesat
	0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, // Anaglyph( vec3 l
	0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // Col, vec3 rCol, 
	0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, // out vec3 lDesatC
	0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x44, 0x65, // ol, out vec3 rDe
	0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // satCol).{.float 
	0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, // left2LeftLum = d
	0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // ot(lCol, Stereo_
	0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, // LeftLuminance_Ga
	0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // mma.xyz);.float 
	0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, // left2RightLum = 
	0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // dot(lCol, Stereo
	0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, // _RightLuminance_
	0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, // DynDesat.xyz);.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, // loat right2LeftL
	0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, // um = dot(rCol, S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, // tereo_LeftLumina
	0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, // nce_Gamma.xyz);.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, // float right2Righ
	0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, // tLum = dot(rCol,
	0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, //  Stereo_RightLum
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, // inance_DynDesat.
	0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, // xyz);.float left
	0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, // Lum = left2LeftL
	0x75, 0x6d, 0x20, 0x2b, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, // um + left2RightL
	0x75, 0x6d, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, // um;.float rightL
	0x75, 0x6d, 0x20, 0x3d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, // um = right2LeftL
	0x75, 0x6d, 0x20, 0x2b, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, // um + right2Right
	0x4c, 0x75, 0x6d, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, // Lum;.float leftD
	0x65, 0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, // esat = Stereo_Ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, // ghtLuminance_Dyn
	0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x6c, // Desat.w * abs((l
	0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x6c, 0x65, // eft2LeftLum - le
	0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, // ft2RightLum) / (
	0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, // leftLum + 0.0001
	0x29, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, // ));.float rightD
	0x65, 0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, // esat = Stereo_Ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, // ghtLuminance_Dyn
	0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x72, // Desat.w * abs((r
	0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x72, // ight2LeftLum - r
	0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, // ight2RightLum) /
	0x20, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, //  (rightLum + 0.0
	0x30, 0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, // 001));.lDesatCol
	0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, //  = mix(lCol, vec
	0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x29, // 3_splat(leftLum)
	0x2c, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x72, 0x44, // , leftDesat);.rD
	0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x72, 0x43, // esatCol = mix(rC
	0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x72, // ol, vec3_splat(r
	0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, // ightLum), rightD
	0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x4c, 0x69, // esat);.}.vec3 Li
	0x6e, 0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, // nearAnaglyph( ve
	0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, // c3 lCol, vec3 rC
	0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // ol).{.vec3 color
	0x20, 0x3d, 0x20, 0x28, 0x28, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x6c, 0x43, 0x6f, 0x6c, //  = (( (vec4(lCol
	0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // , 1.)) * (Stereo
	0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x20, // _LeftMat) ) + ( 
	0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, // (vec4(rCol, 1.))
	0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, //  * (Stereo_Right
	0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x72, 0x65, 0x74, // Mat) )).rgb;.ret
	0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, // urn color;.}.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // form vec4 Stereo
	0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, // _DeghostGamma;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, // niform mat4 Ster
	0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, // eo_DeghostFilter
	0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x6e, // ;.vec3 DeghostAn
	0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, // aglyph( vec3 lCo
	0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, // l, vec3 rCol).{.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, 0x6e, // vec3 color = Lin
	0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, // earAnaglyph(lCol
	0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // , rCol);.return 
	0x28, 0x20, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x53, 0x74, // ( (pow(color, St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, // ereo_DeghostGamm
	0x61, 0x2e, 0x72, 0x67, 0x62, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, // a.rgb)) * (mat3(
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, // Stereo_DeghostFi
	0x6c, 0x74, 0x65, 0x72, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, // lter[0].xyz, Ste
	0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, // reo_DeghostFilte
	0x72, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // r[1].xyz, Stereo
	0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x32, // _DeghostFilter[2
	0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, // ].xyz)) );.}.voi
	0x64, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x62, 0x67, 0x66, 0x78, 0x5f, // d main().{.bgfx_
	0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, // FragColor = vec4
	0x28, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x28, // (gatherEyeColor(
	0x76, 0x65, 0x63, 0x32, 0x28, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, // vec2(v_texcoord0
	0x2e, 0x78, 0x20, 0x2a, 0x20, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, // .x * 2.0, v_texc
	0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2e, 0x79, 0x29, 0x2c, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, // oord0.y), v_texc
	0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2e, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x2c, 0x20, // oord0.x < 0.5), 
	0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x00,                                           // 1.0);.}..
};
static const uint8_t fs_pp_stereo_sbs_st_glsl[8594] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x21, // FSH.Jc._.......!
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x34, 0x34, 0x30, 0x0a, 0x23, // ..#version 440.#
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x47, 0x4c, 0x5f, 0x45, 0x58, 0x54, // extension GL_EXT
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x20, 0x3a, // _texture_array :
	0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x0a, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, //  enable.out vec4
	0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, //  bgfx_FragColor;
	0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, // .#define gl_Frag
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, // Color bgfx_FragC
	0x6f, 0x6c, 0x6f, 0x72, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, // olor.#define tex
	0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ture2D          
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, // texture.#define 
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, // texture2DLod    
	0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, //    textureLod.#d
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x47, // efine texture2DG
	0x72, 0x61, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // rad      texture
	0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, // Grad.#define tex
	0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, // ture2DProjLod   
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x4c, 0x6f, 0x64, 0x0a, 0x23, // textureProjLod.#
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, // define texture2D
	0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // ProjGrad  textur
	0x65, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, // eProjGrad.#defin
	0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x4c, 0x6f, 0x64, // e textureCubeLod
	0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x0a, //      textureLod.
	0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, // #define textureC
	0x75, 0x62, 0x65, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, // ubeGrad    textu
	0x72, 0x65, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, // reGrad.#define t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x33, 0x44, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // exture3D        
	0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, //   texture.#defin
	0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x4c, 0x6f, 0x64, 0x4f, 0x66, // e texture2DLodOf
	0x66, 0x73, 0x65, 0x74, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x4f, // fset textureLodO
	0x66, 0x66, 0x73, 0x65, 0x74, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x61, 0x74, // ffset.#define at
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, // tribute in.#defi
	0x6e, 0x65, 0x20, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, // ne varying in.#d
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x62, 0x67, 0x66, 0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, // efine bgfxShadow
	0x32, 0x44, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, // 2D(_sampler, _co
	0x6f, 0x72, 0x64, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, // ord)     vec4_sp
	0x6c, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x5f, 0x73, 0x61, 0x6d, // lat(texture(_sam
	0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x29, 0x0a, // pler, _coord) ).
	0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x62, 0x67, 0x66, 0x78, 0x53, 0x68, 0x61, 0x64, // #define bgfxShad
	0x6f, 0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // ow2DProj(_sample
	0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, // r, _coord) vec4_
	0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, // splat(texturePro
	0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, // j(_sampler, _coo
	0x72, 0x64, 0x29, 0x20, 0x29, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x66, 0x6c, // rd) ).varying fl
	0x6f, 0x61, 0x74, 0x20, 0x76, 0x5f, 0x65, 0x79, 0x65, 0x3b, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, // oat v_eye;.varyi
	0x6e, 0x67, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, // ng vec2 v_texcoo
	0x72, 0x64, 0x30, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, // rd0;.vec3 instMu
	0x6c, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, // l(vec3 _vec, mat
	0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // 3 _mtx) { return
	0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, //  ( (_vec) * (_mt
	0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, // x) ); }.vec3 ins
	0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, // tMul(mat3 _mtx, 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // vec3 _vec) { ret
	0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, // urn ( (_mtx) * (
	0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, // _vec) ); }.vec4 
	0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, // instMul(vec4 _ve
	0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, // c, mat4 _mtx) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, // return ( (_vec) 
	0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, // * (_mtx) ); }.ve
	0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x20, // c4 instMul(mat4 
	0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, // _mtx, vec4 _vec)
	0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, //  { return ( (_mt
	0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, // x) * (_vec) ); }
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, 0x70, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, // .float rcp(float
	0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, //  _a) { return 1.
	0x30, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x63, 0x70, // 0/_a; }.vec2 rcp
	0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // (vec2 _a) { retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, // rn vec2(1.0)/_a;
	0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x33, //  }.vec3 rcp(vec3
	0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, //  _a) { return ve
	0x63, 0x33, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, // c3(1.0)/_a; }.ve
	0x63, 0x34, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x61, 0x29, 0x20, // c4 rcp(vec4 _a) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x31, 0x2e, // { return vec4(1.
	0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x65, // 0)/_a; }.vec2 ve
	0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, // c2_splat(float _
	0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, // x) { return vec2
	0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, // (_x, _x); }.vec3
	0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, //  vec3_splat(floa
	0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // t _x) { return v
	0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, // ec3(_x, _x, _x);
	0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, //  }.vec4 vec4_spl
	0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, // at(float _x) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, // eturn vec4(_x, _
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, // x, _x, _x); }.uv
	0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, // ec2 uvec2_splat(
	0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, // uint _x) { retur
	0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, // n uvec2(_x, _x);
	0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, //  }.uvec3 uvec3_s
	0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, // plat(uint _x) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, // return uvec3(_x,
	0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, //  _x, _x); }.uvec
	0x34, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, // 4 uvec4_splat(ui
	0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // nt _x) { return 
	0x75, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, // uvec4(_x, _x, _x
	0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, // , _x); }.mat4 mt
	0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, // xFromRows(vec4 _
	0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // 0, vec4 _1, vec4
	0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, //  _2, vec4 _3).{.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, // return transpose
	0x28, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, // (mat4(_0, _1, _2
	0x2c, 0x20, 0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, // , _3) );.}.mat4 
	0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, // mtxFromCols(vec4
	0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, //  _0, vec4 _1, ve
	0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, // c4 _2, vec4 _3).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, // {.return mat4(_0
	0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x3b, 0x0a, 0x7d, // , _1, _2, _3);.}
	0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, // .mat3 mtxFromRow
	0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // s(vec3 _0, vec3 
	0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, // _1, vec3 _2).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, // eturn transpose(
	0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, // mat3(_0, _1, _2)
	0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, //  );.}.mat3 mtxFr
	0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, // omCols(vec3 _0, 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, // vec3 _1, vec3 _2
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x28, // ).{.return mat3(
	0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, // _0, _1, _2);.}.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, // niform vec4 u_vi
	0x65, 0x77, 0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // ewRect;.uniform 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x54, 0x65, 0x78, 0x65, 0x6c, // vec4 u_viewTexel
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, // ;.uniform mat4 u
	0x5f, 0x76, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, // _view;.uniform m
	0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, // at4 u_invView;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x70, 0x72, // niform mat4 u_pr
	0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, // oj;.uniform mat4
	0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, //  u_invProj;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x50, // orm mat4 u_viewP
	0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, // roj;.uniform mat
	0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, // 4 u_invViewProj;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, // .uniform mat4 u_
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, // model[32];.unifo
	0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, // rm mat4 u_modelV
	0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, // iew;.uniform mat
	0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, // 4 u_modelViewPro
	0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // j;.uniform vec4 
	0x75, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x66, 0x34, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, // u_alphaRef4;.flo
	0x61, 0x74, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, // at sqr( float v)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, // .{.return v*v;.}
	0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, // .vec2 sqr( vec2 
	0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, // v).{.return v*v;
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, // .}.vec3 sqr( vec
	0x33, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, // 3 v).{.return v*
	0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6d, 0x75, 0x6c, 0x5f, 0x77, 0x31, // v;.}.vec3 mul_w1
	0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, // ( vec3 v, mat4 m
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2e, 0x78, 0x2a, 0x6d, // ).{.return v.x*m
	0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x79, 0x2a, 0x6d, // [0].xyz + (v.y*m
	0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x7a, 0x2a, 0x6d, // [1].xyz + (v.z*m
	0x5b, 0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x6d, 0x5b, 0x33, 0x5d, 0x2e, 0x78, // [2].xyz + m[3].x
	0x79, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x63, // yz));.}.float ac
	0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, // os_approx_divPI(
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, //  float v).{.floa
	0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, // t x = abs(v);.if
	0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, // (1. - x <= 0.000
	0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, // 06103515625).ret
	0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, // urn (v >= 0.) ? 
	0x30, 0x2e, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, // 0. : 1.;.float r
	0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, // es = ((-0.155972
	0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, // /3.1415926535897
	0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, // 9323846264338327
	0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, // 95) * x + (1.564
	0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, // 67/3.14159265358
	0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, // 9793238462643383
	0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, // 2795) ) * sqrt(1
	0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // . - x);.return (
	0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, // v >= 0.) ? res :
	0x20, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, //  1. - res;.}.flo
	0x61, 0x74, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, // at atan2_approx_
	0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x79, 0x2c, // div2PI( float y,
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, //  float x).{.floa
	0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x79, 0x29, // t abs_y = abs(y)
	0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3d, 0x20, // ;.float abs_x = 
	0x61, 0x62, 0x73, 0x28, 0x78, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, // abs(x);.if(abs_x
	0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, //  <= 0.0000610351
	0x35, 0x36, 0x32, 0x35, 0x20, 0x26, 0x26, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3c, 0x3d, // 5625 && abs_y <=
	0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, //  0.0000610351562
	0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x30, 0x2e, 0x3b, 0x0a, 0x66, 0x6c, // 5).return 0.;.fl
	0x6f, 0x61, 0x74, 0x20, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2d, // oat r = (abs_x -
	0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, //  abs_y) / (abs_x
	0x20, 0x2b, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, //  + abs_y);.float
	0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, //  angle = ((x < 0
	0x2e, 0x29, 0x20, 0x3f, 0x20, 0x28, 0x33, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x20, 0x3a, 0x20, 0x28, // .) ? (3./8.) : (
	0x31, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x29, 0x0a, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x32, 0x31, 0x31, // 1./8.)).+ (0.211
	0x38, 0x36, 0x38, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, // 868 /(2.*3.14159
	0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, // 2653589793238462
	0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x72, 0x20, // 6433832795) * r 
	0x2a, 0x20, 0x72, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x39, 0x38, 0x37, 0x33, 0x30, 0x35, 0x20, 0x2f, // * r - 0.987305 /
	0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, // (2.*3.1415926535
	0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, // 8979323846264338
	0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, // 32795)) * ((x < 
	0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x72, 0x20, 0x3a, 0x20, 0x72, 0x29, 0x3b, 0x0a, 0x72, // 0.) ? -r : r);.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x79, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, // eturn (y < 0.) ?
	0x20, 0x2d, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3a, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x3b, //  -angle : angle;
	0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x73, 0x69, 0x6e, 0x5f, 0x61, 0x70, // .}.float asin_ap
	0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, // prox_divPI( floa
	0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, // t v).{.float x =
	0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, //  abs(v);.if(1. -
	0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, //  x <= 0.00006103
	0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // 515625).return (
	0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x3a, // v >= 0.) ? 0.5 :
	0x20, 0x2d, 0x30, 0x2e, 0x35, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, //  -0.5;.float res
	0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, //  = ((-0.155972/3
	0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, // .141592653589793
	0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, // 2384626433832795
	0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, // ) * x + (1.56467
	0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, // /3.1415926535897
	0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, // 9323846264338327
	0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, // 95) ) * sqrt(1. 
	0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, // - x);.return (v 
	0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x2d, 0x20, 0x72, // >= 0.) ? 0.5 - r
	0x65, 0x73, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x65, 0x73, 0x3b, // es : -0.5 + res;
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x61, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x65, // .}.vec2 ray_to_e
	0x71, 0x75, 0x69, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x75, // quirectangular_u
	0x76, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x61, 0x79, 0x29, 0x0a, 0x7b, 0x0a, 0x72, // v( vec3 ray).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x0a, 0x30, 0x2e, 0x35, 0x20, // eturn vec2(.0.5 
	0x2b, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, // + atan2_approx_d
	0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x79, 0x2c, 0x20, 0x72, 0x61, 0x79, // iv2PI(ray.y, ray
	0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, // .x),.acos_approx
	0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, // _divPI(ray.z));.
	0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, // }.float InvsRGB(
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, //  float color).{.
	0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, // if (color <= 0.0
	0x34, 0x30, 0x34, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, // 4045).return col
	0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x29, // or * (1.0/12.92)
	0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, // ;.else.return po
	0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, // w(color * (1.0/1
	0x2e, 0x30, 0x35, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x2f, 0x31, // .055) + (0.055/1
	0x2e, 0x30, 0x35, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // .055), 2.4);.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x20, // loat InvRec709( 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, // float color).{.i
	0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x38, // f (color <= 0.08
	0x31, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, // 1).return color 
	0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x34, 0x2e, 0x35, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, // * (1.0/4.5);.els
	0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, // e.return pow(col
	0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, // or * (1.0/1.099)
	0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, //  + (0.099/1.099)
	0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // , 1.0/0.45);.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x66, // loat InvGamma( f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // loat color).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, // turn InvsRGB(col
	0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x47, // or);.}.vec3 InvG
	0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // amma( vec3 color
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, // ).{.return vec3(
	0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, // InvGamma(color.x
	0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // ),InvGamma(color
	0x2e, 0x79, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, // .y),InvGamma(col
	0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, // or.z));.}.vec3 I
	0x6e, 0x76, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // nvToneMap( vec3 
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x69, // color).{.float i
	0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x30, 0x2e, 0x35, 0x2f, 0x30, 0x2e, 0x32, // nv_2bh = 0.5/0.2
	0x35, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x34, 0x2e, // 5;.float bh = 4.
	0x30, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2d, 0x20, 0x32, 0x2e, 0x30, 0x3b, 0x0a, 0x72, 0x65, // 0*0.25 - 2.0;.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2d, 0x20, 0x31, 0x2e, // turn (color - 1.
	0x30, 0x20, 0x2b, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2a, 0x28, // 0 + sqrt(color*(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x20, 0x62, 0x68, 0x29, 0x20, 0x2b, 0x20, 0x31, 0x2e, // color + bh) + 1.
	0x30, 0x29, 0x29, 0x2a, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // 0))*inv_2bh;.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // loat sRGB( float
	0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, //  f).{.float s;.i
	0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x33, 0x31, 0x33, 0x30, // f (f <= 0.003130
	0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x20, 0x2a, 0x20, 0x66, // 8).s = 12.92 * f
	0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x35, 0x35, // ;.else.s = 1.055
	0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, //  * pow(f, 1.0/2.
	0x34, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // 4) - 0.055;.retu
	0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x52, 0x65, // rn s;.}.float Re
	0x63, 0x37, 0x30, 0x39, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, // c709( float f).{
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, // .float s;.if (f 
	0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x34, 0x2e, // <= 0.018).s = 4.
	0x35, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, // 5 * f;.else.s = 
	0x31, 0x2e, 0x30, 0x39, 0x39, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x30, // 1.099 * pow(f, 0
	0x2e, 0x34, 0x35, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x3b, 0x0a, 0x72, 0x65, // .45) - 0.099;.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // turn s;.}.float 
	0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, // FBGamma( float c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, // olor).{.return s
	0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // RGB(color);.}.ve
	0x63, 0x32, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, // c2 FBGamma( vec2
	0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, //  color).{.return
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, //  vec2(FBGamma(co
	0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, // lor.x),FBGamma(c
	0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, // olor.y));.}.vec3
	0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, //  FBGamma( vec3 c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // olor).{.return v
	0x65, 0x63, 0x33, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // ec3(FBGamma(colo
	0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, // r.x),FBGamma(col
	0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, // or.y),FBGamma(co
	0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // lor.z));.}.vec3 
	0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x32, 0x32, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // FBGamma22( vec3 
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // color).{.return 
	0x76, 0x65, 0x63, 0x33, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, // vec3(pow(color.x
	0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, // , 1.0/2.2),pow(c
	0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, // olor.y, 1.0/2.2)
	0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x2c, 0x20, 0x31, 0x2e, // ,pow(color.z, 1.
	0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // 0/2.2));.}.float
	0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, //  FBToneMap( floa
	0x74, 0x20, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6c, 0x20, // t l).{.return l 
	0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, // * ((l*0.25 + 1.0
	0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, // ) / (l + 1.0));.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, // }.vec2 FBToneMap
	0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, // ( vec2 color).{.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, // float l = dot(co
	0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, // lor,vec2(0.17620
	0x34, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x2c, // 4+0.0108109*0.5,
	0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, // 0.812985+0.01081
	0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // 09*0.5));.return
	0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, //  color * ((l*0.2
	0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, // 5 + 1.0) / (l + 
	0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, // 1.0));.}.vec3 FB
	0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, // ToneMap( vec3 co
	0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, // lor).{.float l =
	0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x33, 0x28, //  dot(color,vec3(
	0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, // 0.176204,0.81298
	0x35, 0x2c, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x29, 0x29, 0x3b, 0x0a, 0x72, // 5,0.0108109));.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, // eturn color * ((
	0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, // l*0.25 + 1.0) / 
	0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // (l + 1.0));.}.ve
	0x63, 0x34, 0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x28, 0x20, 0x76, 0x65, 0x63, // c4 Additive( vec
	0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // 4 cBase, vec4 cB
	0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, // lend, float perc
	0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, // ent).{.return cB
	0x61, 0x73, 0x65, 0x20, 0x2b, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, // ase + cBlend*per
	0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, // cent;.}.vec3 Scr
	0x65, 0x65, 0x6e, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, // een ( vec3 cBase
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, // , vec3 cBlend).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, // .return 1.0 - (1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, // .0 - cBase) * (1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // .0 - cBlend);.}.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x20, 0x76, 0x65, // vec4 Screen ( ve
	0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, // c4 cBase, vec4 c
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // Blend).{.return 
	0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, // 1.0 - (1.0 - cBa
	0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, // se) * (1.0 - cBl
	0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, // end);.}.vec3 Scr
	0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, // eenHDR ( vec3 cB
	0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, // ase, vec3 cBlend
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, // ).{.return max(1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, // .0 - (1.0 - cBas
	0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, // e) * (1.0 - cBle
	0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, // nd), vec3(0.,0.,
	0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, // 0.));.}.vec4 Scr
	0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // eenHDR ( vec4 cB
	0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, // ase, vec4 cBlend
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, // ).{.return max(1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, // .0 - (1.0 - cBas
	0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, // e) * (1.0 - cBle
	0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, // nd), vec4(0.,0.,
	0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, // 0.,0.));.}.vec4 
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // Multiply ( vec4 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, // cBase, vec4 cBle
	0x6e, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, // nd, float percen
	0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, // t).{.return cBas
	0x65, 0x20, 0x2a, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, // e * cBlend*perce
	0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, // nt;.}.vec4 Overl
	0x61, 0x79, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, // ay ( vec4 cBase,
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, //  vec4 cBlend).{.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, // vec4 cNew = step
	0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, // (0.5, cBase);.cN
	0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, // ew = mix(cBase*c
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, // Blend*2.0, 1.0-2
	0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, // .0*(1.0-cBase)*(
	0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, // 1.0-cBlend), cNe
	0x77, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, // w);.return cNew;
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x48, // .}.vec4 OverlayH
	0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, // DR ( vec4 cBase,
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, //  vec4 cBlend).{.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, // vec4 cNew = step
	0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, // (0.5, cBase);.cN
	0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, // ew = max(mix(cBa
	0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, // se*cBlend*2.0, 1
	0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, // .0-2.0*(1.0-cBas
	0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, // e)*(1.0-cBlend),
	0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, //  cNew), vec4(0.,
	0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // 0.,0.,0.));.retu
	0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // rn cNew;.}.vec3 
	0x63, 0x6f, 0x73, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x5f, 0x73, // cos_hemisphere_s
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x29, 0x0a, 0x7b, // ample( vec2 t).{
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x68, 0x69, 0x20, 0x3d, 0x20, 0x74, 0x2e, 0x79, // .float phi = t.y
	0x20, 0x2a, 0x20, 0x28, 0x32, 0x2e, 0x30, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, //  * (2.0*3.141592
	0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, // 6535897932384626
	0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // 433832795);.floa
	0x74, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, // t cosTheta = sqr
	0x74, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, // t(1.0 - t.x);.fl
	0x6f, 0x61, 0x74, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, // oat sinTheta = s
	0x71, 0x72, 0x74, 0x28, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // qrt(t.x);.float 
	0x73, 0x70, 0x2c, 0x63, 0x70, 0x3b, 0x0a, 0x7b, 0x73, 0x70, 0x3d, 0x73, 0x69, 0x6e, 0x28, 0x70, // sp,cp;.{sp=sin(p
	0x68, 0x69, 0x29, 0x3b, 0x63, 0x70, 0x3d, 0x63, 0x6f, 0x73, 0x28, 0x70, 0x68, 0x69, 0x29, 0x3b, // hi);cp=cos(phi);
	0x7d, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x63, // };.return vec3(c
	0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x63, 0x6f, // p * sinTheta, co
	0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x73, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, // sTheta, sp * sin
	0x54, 0x68, 0x65, 0x74, 0x61, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, // Theta);.}.vec3 r
	0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, // otate_to_vector_
	0x75, 0x70, 0x70, 0x65, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x2c, // upper( vec3 vec,
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, //  vec3 normal).{.
	0x69, 0x66, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x3e, 0x20, 0x2d, 0x30, // if(normal.y > -0
	0x2e, 0x39, 0x39, 0x39, 0x39, 0x39, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // .99999).{.float 
	0x68, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x28, 0x31, 0x2e, 0x30, 0x2b, 0x6e, 0x6f, 0x72, // h = 1.0/(1.0+nor
	0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, // mal.y);.float hz
	0x20, 0x3d, 0x20, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x3b, 0x0a, 0x66, //  = h*normal.z;.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x3d, 0x20, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, // loat hzx = hz*no
	0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // rmal.x;.return v
	0x65, 0x63, 0x33, 0x28, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, // ec3(.vec.x * (no
	0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, // rmal.y+hz*normal
	0x2e, 0x7a, 0x29, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, // .z) + vec.y * no
	0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, // rmal.x - vec.z *
	0x20, 0x68, 0x7a, 0x78, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, //  hzx,.vec.y * no
	0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, // rmal.y - vec.x *
	0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, //  normal.x - vec.
	0x7a, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x2c, 0x0a, 0x76, 0x65, // z * normal.z,.ve
	0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x20, 0x2d, // c.y * normal.z -
	0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x2b, 0x20, 0x76, //  vec.x * hzx + v
	0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, // ec.z * (normal.y
	0x2b, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, // +h*normal.x*norm
	0x61, 0x6c, 0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x72, // al.x));.}.else r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x2d, 0x76, 0x65, 0x63, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, // eturn -vec;.}.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // iform vec4 Stere
	0x6f, 0x5f, 0x53, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x0a, 0x75, 0x6e, // o_Saturation;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // iform vec4 Stere
	0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x3b, 0x0a, // o_MS_ZPD_YAxis;.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, // uniform sampler2
	0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // DArray tex_stere
	0x6f, 0x5f, 0x66, 0x62, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, // o_fb;.uniform sa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x20, 0x74, 0x65, 0x78, // mpler2DArray tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x3b, 0x0a, 0x75, // _stereo_depth;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x77, 0x5f, 0x68, 0x5f, // niform vec4 w_h_
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x67, 0x61, 0x74, // height;.vec3 gat
	0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x76, 0x65, 0x63, 0x32, // herEyeColor(vec2
	0x20, 0x75, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x29, //  u, bool isLeft)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // .{.return textur
	0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, // e2DArrayLod(tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, // stereo_fb, vec3(
	0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, 0x20, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, // u.x, u.y, isLeft
	0x20, 0x3f, 0x20, 0x30, 0x2e, 0x30, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x30, //  ? 0.0 : 1.0), 0
	0x2e, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x67, // .).rgb;.}.void g
	0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, // atherLeftRightCo
	0x6c, 0x6f, 0x72, 0x73, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x6f, 0x75, 0x74, // lors(vec2 u, out
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x63, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, //  vec3 lcol, out 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x6c, 0x63, 0x6f, // vec3 rcol).{.lco
	0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x41, 0x72, 0x72, // l = texture2DArr
	0x61, 0x79, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // ayLod(tex_stereo
	0x5f, 0x66, 0x62, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, // _fb, vec3(u.x, u
	0x2e, 0x79, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2e, 0x78, 0x79, 0x7a, // .y, 0.), 0.).xyz
	0x3b, 0x0a, 0x72, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // ;.rcol = texture
	0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, // 2DArrayLod(tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x75, // tereo_fb, vec3(u
	0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, 0x29, 0x2c, 0x20, 0x30, 0x2e, // .x, u.y, 1.), 0.
	0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // ).xyz;.}.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, //  mat4 Stereo_Lef
	0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, // tMat;.uniform ma
	0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, // t4 Stereo_RightM
	0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, // at;.uniform vec4
	0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, //  Stereo_LeftLumi
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, 0x6e, 0x69, // nance_Gamma;.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // form vec4 Stereo
	0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, // _RightLuminance_
	0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x3b, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x44, // DynDesat;.void D
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x65, 0x73, 0x61, 0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, // ynamicDesatAnagl
	0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // yph( vec3 lCol, 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, // vec3 rCol, out v
	0x65, 0x63, 0x33, 0x20, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, // ec3 lDesatCol, o
	0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, // ut vec3 rDesatCo
	0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, // l).{.float left2
	0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, // LeftLum = dot(lC
	0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, // ol, Stereo_LeftL
	0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, // uminance_Gamma.x
	0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, // yz);.float left2
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, // RightLum = dot(l
	0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, // Col, Stereo_Righ
	0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, // tLuminance_DynDe
	0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // sat.xyz);.float 
	0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, // right2LeftLum = 
	0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // dot(rCol, Stereo
	0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, // _LeftLuminance_G
	0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // amma.xyz);.float
	0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, //  right2RightLum 
	0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, // = dot(rCol, Ster
	0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, // eo_RightLuminanc
	0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, // e_DynDesat.xyz);
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, // .float leftLum =
	0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, //  left2LeftLum + 
	0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, 0x0a, 0x66, // left2RightLum;.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, // loat rightLum = 
	0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, // right2LeftLum + 
	0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, 0x0a, // right2RightLum;.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x20, // float leftDesat 
	0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // = Stereo_RightLu
	0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, // minance_DynDesat
	0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, // .w * abs((left2L
	0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, // eftLum - left2Ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, // ghtLum) / (leftL
	0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x66, // um + 0.0001));.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x20, // loat rightDesat 
	0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // = Stereo_RightLu
	0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, // minance_DynDesat
	0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, // .w * abs((right2
	0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, // LeftLum - right2
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x72, 0x69, 0x67, // RightLum) / (rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, 0x29, // htLum + 0.0001))
	0x3b, 0x0a, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, // ;.lDesatCol = mi
	0x78, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, // x(lCol, vec3_spl
	0x61, 0x74, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x66, // at(leftLum), lef
	0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x72, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, // tDesat);.rDesatC
	0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, // ol = mix(rCol, v
	0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, // ec3_splat(rightL
	0x75, 0x6d, 0x29, 0x2c, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, // um), rightDesat)
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x41, // ;.}.vec3 LinearA
	0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, // naglyph( vec3 lC
	0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, // ol, vec3 rCol).{
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x28, // .vec3 color = ((
	0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, 0x29, //  (vec4(lCol, 1.)
	0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, // ) * (Stereo_Left
	0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, // Mat) ) + ( (vec4
	0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, // (rCol, 1.)) * (S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, // tereo_RightMat) 
	0x29, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, // )).rgb;.return c
	0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // olor;.}.uniform 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, // vec4 Stereo_Degh
	0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // ostGamma;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, // m mat4 Stereo_De
	0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3b, 0x0a, 0x76, 0x65, 0x63, // ghostFilter;.vec
	0x33, 0x20, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, // 3 DeghostAnaglyp
	0x68, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, // h( vec3 lCol, ve
	0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // c3 rCol).{.vec3 
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x41, 0x6e, // color = LinearAn
	0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, // aglyph(lCol, rCo
	0x6c, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x70, 0x6f, // l);.return ( (po
	0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // w(color, Stereo_
	0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x72, 0x67, 0x62, // DeghostGamma.rgb
	0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, // )) * (mat3(Stere
	0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, // o_DeghostFilter[
	0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, // 0].xyz, Stereo_D
	0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x31, 0x5d, 0x2e, // eghostFilter[1].
	0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, // xyz, Stereo_Degh
	0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, // ostFilter[2].xyz
	0x29, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x6d, 0x61, 0x69, // )) );.}.void mai
	0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, // n().{.gl_FragCol
	0x6f, 0x72, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, // or = vec4(gather
	0x45, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x76, 0x65, 0x63, 0x32, 0x28, 0x76, 0x5f, // EyeColor(vec2(v_
	0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x32, 0x2e, // texcoord0.x * 2.
	0x30, 0x2c, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2e, 0x79, // 0, v_texcoord0.y
	0x29, 0x2c, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2e, 0x78, // ), v_texcoord0.x
	0x20, 0x3c, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x7d, //  < 0.5), 1.0);.}
	0x0a, 0x00,                                                                                     // ..
};
static const uint8_t fs_pp_stereo_sbs_st_dx11[558] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x0d, 0x74, // FSH.Jc._.......t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x30, 0x01, 0x00, 0x00, // ex_stereo_fb0...
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // .......tex_stere
	0x6f, 0x5f, 0x66, 0x62, 0x30, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe8, 0x01, // o_fb0...........
	0x00, 0x00, 0x44, 0x58, 0x42, 0x43, 0x7a, 0x95, 0x32, 0x1f, 0x10, 0x5c, 0x19, 0x9b, 0xa5, 0x08, // ..DXBCz.2.......
	0xcc, 0x9e, 0xcd, 0x1d, 0x51, 0xa2, 0x01, 0x00, 0x00, 0x00, 0xe8, 0x01, 0x00, 0x00, 0x03, 0x00, // ....Q...........
	0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x9c, 0x00, 0x00, 0x00, 0xd0, 0x00, 0x00, 0x00, 0x49, 0x53, // ..,...........IS
	0x47, 0x4e, 0x68, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x50, 0x00, // GNh...........P.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x5c, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, // ................
	0x00, 0x00, 0x06, 0x06, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, // ......SV_POSITIO
	0x4e, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0xab, 0xab, 0xab, 0x4f, 0x53, // N.TEXCOORD....OS
	0x47, 0x4e, 0x2c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x20, 0x00, // GN,........... .
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x00, // ......SV_TARGET.
	0xab, 0xab, 0x53, 0x48, 0x45, 0x58, 0x10, 0x01, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x44, 0x00, // ..SHEX....P...D.
	0x00, 0x00, 0x6a, 0x08, 0x00, 0x01, 0x5a, 0x00, 0x00, 0x03, 0x00, 0x60, 0x10, 0x00, 0x00, 0x00, // ..j...Z....`....
	0x00, 0x00, 0x58, 0x40, 0x00, 0x04, 0x00, 0x70, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x55, // ..X@...p......UU
	0x00, 0x00, 0x62, 0x10, 0x00, 0x03, 0x62, 0x10, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x65, 0x00, // ..b...b.......e.
	0x00, 0x03, 0xf2, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x02, 0x01, 0x00, // ... ......h.....
	0x00, 0x00, 0x31, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x10, // ..1.............
	0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x37, 0x00, // .......@.....?7.
	0x00, 0x09, 0x42, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, // ..B.............
	0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, // ...@.......@....
	0x80, 0x3f, 0x38, 0x00, 0x00, 0x0a, 0x32, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x96, 0x15, // .?8...2.........
	0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, // .......@.....@..
	0x80, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0x02, 0x02, // .?........H.....
	0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, // ..CU..r.......F.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, // ......F~.......`
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, // .......@......6.
	0x00, 0x05, 0x72, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, // ..r ......F.....
	0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x82, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, // ..6.... .......@
	0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x3e, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,             // .....?>.......
};
static const uint8_t fs_pp_stereo_sbs_st_spv[1098] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0d, 0x74, // FSH.Jc._.......t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x30, 0x00, 0x02, 0x00, // ex_stereo_fb0...
	0x00, 0x00, 0x00, 0x03, 0x22, 0x00, 0x1c, 0x04, 0x00, 0x00, 0x03, 0x02, 0x23, 0x07, 0x00, 0x00, // ....".......#...
	0x01, 0x00, 0x0b, 0x00, 0x08, 0x00, 0xde, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, // ................
	0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, 0x4c, // ..............GL
	0x53, 0x4c, 0x2e, 0x73, 0x74, 0x64, 0x2e, 0x34, 0x35, 0x30, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, // SL.std.450......
	0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x07, 0x00, 0x04, 0x00, // ................
	0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, // ......main......
	0x00, 0x00, 0x8d, 0x00, 0x00, 0x00, 0x10, 0x00, 0x03, 0x00, 0x04, 0x00, 0x00, 0x00, 0x07, 0x00, // ................
	0x00, 0x00, 0x03, 0x00, 0x03, 0x00, 0x05, 0x00, 0x00, 0x00, 0xf4, 0x01, 0x00, 0x00, 0x05, 0x00, // ................
	0x04, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, // ......main......
	0x08, 0x00, 0x2d, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // ..-...tex_stereo
	0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, // _fbSampler......
	0x08, 0x00, 0x30, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // ..0...tex_stereo
	0x5f, 0x66, 0x62, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, // _fbTexture......
	0x05, 0x00, 0x80, 0x00, 0x00, 0x00, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, // ......v_texcoord
	0x30, 0x00, 0x05, 0x00, 0x06, 0x00, 0x8d, 0x00, 0x00, 0x00, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, // 0.........bgfx_F
	0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x2d, 0x00, // ragData0..G...-.
	0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x2d, 0x00, // ..".......G...-.
	0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x30, 0x00, // ..!.......G...0.
	0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x30, 0x00, // ..".......G...0.
	0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x80, 0x00, // ..!.......G.....
	0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x8d, 0x00, // ..........G.....
	0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x02, 0x00, 0x02, 0x00, // ................
	0x00, 0x00, 0x21, 0x00, 0x03, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x1a, 0x00, // ..!.............
	0x02, 0x00, 0x06, 0x00, 0x00, 0x00, 0x16, 0x00, 0x03, 0x00, 0x07, 0x00, 0x00, 0x00, 0x20, 0x00, // .............. .
	0x00, 0x00, 0x19, 0x00, 0x09, 0x00, 0x08, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x07, 0x00, // ................
	0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x00, // ................
	0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x19, 0x00, 0x00, 0x00, 0x07, 0x00, // ................
	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x14, 0x00, 0x02, 0x00, 0x1b, 0x00, 0x00, 0x00, 0x20, 0x00, // .............. .
	0x04, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x3b, 0x00, // ..,...........;.
	0x04, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x2d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, // ..,...-....... .
	0x04, 0x00, 0x2f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x3b, 0x00, // ../...........;.
	0x04, 0x00, 0x2f, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x00, // ../...0.........
	0x03, 0x00, 0x42, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, // ..B.......+.....
	0x00, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, // ..U.......+.....
	0x00, 0x00, 0x56, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, // ..V......?+.....
	0x00, 0x00, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, // ..f......@+.....
	0x00, 0x00, 0x6d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x20, 0x00, 0x04, 0x00, 0x7f, 0x00, // ..m......? .....
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x7f, 0x00, // ..........;.....
	0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x8c, 0x00, // .......... .....
	0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x8c, 0x00, // ..........;.....
	0x00, 0x00, 0x8d, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x36, 0x00, 0x05, 0x00, 0x02, 0x00, // ..........6.....
	0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0xf8, 0x00, // ................
	0x02, 0x00, 0x05, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0x2e, 0x00, // ......=.........
	0x00, 0x00, 0x2d, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x08, 0x00, 0x00, 0x00, 0x31, 0x00, // ..-...=.......1.
	0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x19, 0x00, 0x00, 0x00, 0x81, 0x00, // ..0...=.........
	0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xb4, 0x00, // ......Q.........
	0x00, 0x00, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, // ................
	0x00, 0x00, 0xb5, 0x00, 0x00, 0x00, 0xb4, 0x00, 0x00, 0x00, 0x66, 0x00, 0x00, 0x00, 0x51, 0x00, // ..........f...Q.
	0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xb7, 0x00, 0x00, 0x00, 0x81, 0x00, 0x00, 0x00, 0x01, 0x00, // ................
	0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xba, 0x00, 0x00, 0x00, 0x81, 0x00, // ..Q.............
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb8, 0x00, 0x05, 0x00, 0x1b, 0x00, 0x00, 0x00, 0xbb, 0x00, // ................
	0x00, 0x00, 0xba, 0x00, 0x00, 0x00, 0x6d, 0x00, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, 0x07, 0x00, // ......m.........
	0x00, 0x00, 0xcf, 0x00, 0x00, 0x00, 0xbb, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00, 0x56, 0x00, // ..........U...V.
	0x00, 0x00, 0x50, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xd0, 0x00, 0x00, 0x00, 0xb5, 0x00, // ..P.............
	0x00, 0x00, 0xb7, 0x00, 0x00, 0x00, 0xcf, 0x00, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, 0x42, 0x00, // ..........V...B.
	0x00, 0x00, 0xda, 0x00, 0x00, 0x00, 0x31, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x58, 0x00, // ......1.......X.
	0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xdd, 0x00, 0x00, 0x00, 0xda, 0x00, 0x00, 0x00, 0xd0, 0x00, // ................
	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, // ......U...Q.....
	0x00, 0x00, 0xbd, 0x00, 0x00, 0x00, 0xdd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, // ..............Q.
	0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xbe, 0x00, 0x00, 0x00, 0xdd, 0x00, 0x00, 0x00, 0x01, 0x00, // ................
	0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xbf, 0x00, 0x00, 0x00, 0xdd, 0x00, // ..Q.............
	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x50, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xc0, 0x00, // ......P.........
	0x00, 0x00, 0xbd, 0x00, 0x00, 0x00, 0xbe, 0x00, 0x00, 0x00, 0xbf, 0x00, 0x00, 0x00, 0x56, 0x00, // ..............V.
	0x00, 0x00, 0x3e, 0x00, 0x03, 0x00, 0x8d, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0xfd, 0x00, // ..>.............
	0x01, 0x00, 0x38, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,                                     // ..8.......
};
static const bgfx::EmbeddedShader fs_pp_stereo_sbs_st = BGFX_EMBEDDED_SHADER(fs_pp_stereo_sbs_st);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Build of fragment shader from fs_pp_stereo.sc to fs_pp_stereo_tb_st with options: TB STEREO
static const uint8_t fs_pp_stereo_tb_st_mtl[836] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x14, 0x74, // FSH.Jc._.......t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, // ex_stereo_fbSamp
	0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x74, 0x65, // ler...........te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x54, 0x65, 0x78, 0x74, 0x75, // x_stereo_fbTextu
	0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x74, 0x65, 0x78, // re...........tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, // _stereo_depthSam
	0x70, 0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x74, // pler...........t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x54, // ex_stereo_depthT
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, // exture..........
	0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x10, 0x00, // .tex_stereo_fb..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x94, 0x02, 0x00, 0x00, 0x23, 0x69, 0x6e, 0x63, // ............#inc
	0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x64, 0x6c, // lude <metal_stdl
	0x69, 0x62, 0x3e, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x73, 0x69, // ib>.#include <si
	0x6d, 0x64, 0x2f, 0x73, 0x69, 0x6d, 0x64, 0x2e, 0x68, 0x3e, 0x0a, 0x0a, 0x75, 0x73, 0x69, 0x6e, // md/simd.h>..usin
	0x67, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x6d, 0x65, 0x74, 0x61, // g namespace meta
	0x6c, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, // l;..struct xlatM
	0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, // tlMain_out.{.   
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, //  float4 bgfx_Fra
	0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x20, 0x5b, 0x5b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x30, // gData0 [[color(0
	0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, // )]];.};..struct 
	0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x0a, 0x7b, // xlatMtlMain_in.{
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, // .    float2 v_te
	0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x5b, 0x5b, 0x75, 0x73, 0x65, 0x72, 0x28, 0x6c, // xcoord0 [[user(l
	0x6f, 0x63, 0x6e, 0x31, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x66, 0x72, 0x61, // ocn1)]];.};..fra
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, // gment xlatMtlMai
	0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, // n_out xlatMtlMai
	0x6e, 0x28, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, // n(xlatMtlMain_in
	0x20, 0x69, 0x6e, 0x20, 0x5b, 0x5b, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x5d, 0x5d, //  in [[stage_in]]
	0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x61, // , texture2d_arra
	0x79, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3e, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, // y<float> tex_ste
	0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // reo_fb [[texture
	0x28, 0x30, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x74, // (0)]], sampler t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, // ex_stereo_fbSamp
	0x6c, 0x65, 0x72, 0x20, 0x5b, 0x5b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x30, 0x29, // ler [[sampler(0)
	0x5d, 0x5d, 0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, // ]]).{.    xlatMt
	0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x3d, 0x20, // lMain_out out = 
	0x7b, 0x7d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, // {};.    float3 _
	0x32, 0x30, 0x35, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x69, 0x6e, 0x2e, // 205 = float3(in.
	0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2e, 0x78, 0x2c, 0x20, 0x69, // v_texcoord0.x, i
	0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2e, 0x79, 0x20, // n.v_texcoord0.y 
	0x2a, 0x20, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, // * 2.0, (in.v_tex
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2e, 0x79, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x20, // coord0.y < 0.5) 
	0x3f, 0x20, 0x30, 0x2e, 0x30, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, // ? 0.0 : 1.0);.  
	0x20, 0x20, 0x6f, 0x75, 0x74, 0x2e, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, //   out.bgfx_FragD
	0x61, 0x74, 0x61, 0x30, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x74, 0x65, // ata0 = float4(te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2e, 0x73, 0x61, 0x6d, 0x70, // x_stereo_fb.samp
	0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, // le(tex_stereo_fb
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x32, 0x30, 0x35, 0x2e, 0x78, 0x79, // Sampler, _205.xy
	0x2c, 0x20, 0x75, 0x69, 0x6e, 0x74, 0x28, 0x72, 0x69, 0x6e, 0x74, 0x28, 0x5f, 0x32, 0x30, 0x35, // , uint(rint(_205
	0x2e, 0x7a, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, // .z)), level(0.0)
	0x29, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, // ).xyz, 1.0);.   
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6f, 0x75, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x0a, //  return out;.}..
	0x00, 0x00, 0x40, 0x00,                                                                         // ..@.
};
static const uint8_t fs_pp_stereo_tb_st_essl[8569] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x66, 0x21, // FSH.Jc._......f!
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x33, 0x32, 0x30, 0x20, 0x65, // ..#version 320 e
	0x73, 0x0a, 0x23, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x47, 0x4c, 0x5f, // s.#extension GL_
	0x45, 0x58, 0x54, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, // EXT_shader_textu
	0x72, 0x65, 0x5f, 0x6c, 0x6f, 0x64, 0x20, 0x3a, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x0a, // re_lod : enable.
	0x23, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x47, 0x4c, 0x5f, 0x45, 0x58, // #extension GL_EX
	0x54, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x20, // T_texture_array 
	0x3a, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, // : enable.#define
	0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, //  attribute in.#d
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, // efine varying in
	0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, // .precision highp
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3b, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, //  float;.precisio
	0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x69, 0x6e, 0x74, 0x3b, 0x0a, 0x70, 0x72, 0x65, // n highp int;.pre
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x73, 0x61, 0x6d, // cision highp sam
	0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x3b, 0x0a, 0x23, 0x64, 0x65, // pler2DArray;.#de
	0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x4c, 0x6f, // fine texture2DLo
	0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, // d      texture2D
	0x4c, 0x6f, 0x64, 0x45, 0x58, 0x54, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, // LodEXT.#define t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, 0x20, 0x20, // exture2DGrad    
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x47, 0x72, 0x61, 0x64, 0x45, 0x58, //  texture2DGradEX
	0x54, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // T.#define textur
	0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, // e2DProjLod  text
	0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x4c, 0x6f, 0x64, 0x45, 0x58, 0x54, 0x0a, // ure2DProjLodEXT.
	0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, // #define texture2
	0x44, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // DProjGrad textur
	0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, 0x45, 0x58, 0x54, 0x0a, 0x23, // e2DProjGradEXT.#
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, // define textureCu
	0x62, 0x65, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // beLod    texture
	0x43, 0x75, 0x62, 0x65, 0x4c, 0x6f, 0x64, 0x45, 0x58, 0x54, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, // CubeLodEXT.#defi
	0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x47, 0x72, // ne textureCubeGr
	0x61, 0x64, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, // ad   textureCube
	0x47, 0x72, 0x61, 0x64, 0x45, 0x58, 0x54, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, // GradEXT.#define 
	0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // shadow2D(_sample
	0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, // r, _coord) textu
	0x72, 0x65, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, // re(_sampler, _co
	0x6f, 0x72, 0x64, 0x29, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x73, 0x68, 0x61, // ord).#define sha
	0x64, 0x6f, 0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, // dow2DProj(_sampl
	0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x74, 0x65, 0x78, 0x74, // er, _coord) text
	0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // ureProj(_sampler
	0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x0a, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x65, // , _coord).out me
	0x64, 0x69, 0x75, 0x6d, 0x70, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, // diump vec4 bgfx_
	0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, // FragColor;.varyi
	0x6e, 0x67, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x5f, 0x65, 0x79, 0x65, 0x3b, 0x0a, // ng float v_eye;.
	0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x5f, 0x74, // varying vec2 v_t
	0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, // excoord0;.vec3 i
	0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, // nstMul(vec3 _vec
	0x2c, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, // , mat3 _mtx) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, // eturn ( (_vec) *
	0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, //  (_mtx) ); }.vec
	0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, // 3 instMul(mat3 _
	0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, // mtx, vec3 _vec) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, // { return ( (_mtx
	0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, // ) * (_vec) ); }.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, // vec4 instMul(vec
	0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, // 4 _vec, mat4 _mt
	0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, // x) { return ( (_
	0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, // vec) * (_mtx) );
	0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, //  }.vec4 instMul(
	0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // mat4 _mtx, vec4 
	0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // _vec) { return (
	0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, //  (_mtx) * (_vec)
	0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, 0x70, 0x28, //  ); }.float rcp(
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // float _a) { retu
	0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, // rn 1.0/_a; }.vec
	0x32, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, // 2 rcp(vec2 _a) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, //  return vec2(1.0
	0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x70, // )/_a; }.vec3 rcp
	0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // (vec3 _a) { retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, // rn vec3(1.0)/_a;
	0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x34, //  }.vec4 rcp(vec4
	0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, //  _a) { return ve
	0x63, 0x34, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, // c4(1.0)/_a; }.ve
	0x63, 0x32, 0x20, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, // c2 vec2_splat(fl
	0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // oat _x) { return
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, //  vec2(_x, _x); }
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, // .vec3 vec3_splat
	0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // (float _x) { ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, // urn vec3(_x, _x,
	0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, 0x65, 0x63, //  _x); }.vec4 vec
	0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, // 4_splat(float _x
	0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, // ) { return vec4(
	0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, // _x, _x, _x, _x);
	0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, //  }.uvec2 uvec2_s
	0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, // plat(uint _x) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, // return uvec2(_x,
	0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, 0x75, 0x76, //  _x); }.uvec3 uv
	0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, // ec3_splat(uint _
	0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, // x) { return uvec
	0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, // 3(_x, _x, _x); }
	0x0a, 0x75, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, // .uvec4 uvec4_spl
	0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // at(uint _x) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, // turn uvec4(_x, _
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x6d, 0x61, // x, _x, _x); }.ma
	0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, // t4 mtxFromRows(v
	0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, // ec4 _0, vec4 _1,
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, //  vec4 _2, vec4 _
	0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, // 3).{.return tran
	0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, // spose(mat4(_0, _
	0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // 1, _2, _3) );.}.
	0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, // mat4 mtxFromCols
	0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, // (vec4 _0, vec4 _
	0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // 1, vec4 _2, vec4
	0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, //  _3).{.return ma
	0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, // t4(_0, _1, _2, _
	0x33, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, // 3);.}.mat3 mtxFr
	0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, // omRows(vec3 _0, 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, // vec3 _1, vec3 _2
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, // ).{.return trans
	0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, // pose(mat3(_0, _1
	0x2c, 0x20, 0x5f, 0x32, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, // , _2) );.}.mat3 
	0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, // mtxFromCols(vec3
	0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, //  _0, vec3 _1, ve
	0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // c3 _2).{.return 
	0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, // mat3(_0, _1, _2)
	0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, // ;.}.uniform vec4
	0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, //  u_viewRect;.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, // form vec4 u_view
	0x54, 0x65, 0x78, 0x65, 0x6c, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, // Texel;.uniform m
	0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // at4 u_view;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, // orm mat4 u_invVi
	0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, // ew;.uniform mat4
	0x20, 0x75, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, //  u_proj;.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, 0x6a, 0x3b, //  mat4 u_invProj;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, // .uniform mat4 u_
	0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // viewProj;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, // m mat4 u_invView
	0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, // Proj;.uniform ma
	0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, 0x3b, 0x0a, // t4 u_model[32];.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, // uniform mat4 u_m
	0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // odelView;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, // m mat4 u_modelVi
	0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // ewProj;.uniform 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x66, 0x34, // vec4 u_alphaRef4
	0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x66, 0x6c, 0x6f, // ;.float sqr( flo
	0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // at v).{.return v
	0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, // *v;.}.vec2 sqr( 
	0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // vec2 v).{.return
	0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x73, 0x71, 0x72, //  v*v;.}.vec3 sqr
	0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, // ( vec3 v).{.retu
	0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6d, // rn v*v;.}.vec3 m
	0x75, 0x6c, 0x5f, 0x77, 0x31, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x2c, 0x20, 0x6d, // ul_w1( vec3 v, m
	0x61, 0x74, 0x34, 0x20, 0x6d, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // at4 m).{.return 
	0x76, 0x2e, 0x78, 0x2a, 0x6d, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, // v.x*m[0].xyz + (
	0x76, 0x2e, 0x79, 0x2a, 0x6d, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, // v.y*m[1].xyz + (
	0x76, 0x2e, 0x7a, 0x2a, 0x6d, 0x5b, 0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x6d, // v.z*m[2].xyz + m
	0x5b, 0x33, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // [3].xyz));.}.flo
	0x61, 0x74, 0x20, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, // at acos_approx_d
	0x69, 0x76, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, // ivPI( float v).{
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, // .float x = abs(v
	0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, // );.if(1. - x <= 
	0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, // 0.00006103515625
	0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, // ).return (v >= 0
	0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x3b, 0x0a, 0x66, 0x6c, // .) ? 0. : 1.;.fl
	0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, // oat res = ((-0.1
	0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, // 55972/3.14159265
	0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, // 3589793238462643
	0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, // 3832795) * x + (
	0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, // 1.56467/3.141592
	0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, // 6535897932384626
	0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, // 433832795) ) * s
	0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, // qrt(1. - x);.ret
	0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, // urn (v >= 0.) ? 
	0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, // res : 1. - res;.
	0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, // }.float atan2_ap
	0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, // prox_div2PI( flo
	0x61, 0x74, 0x20, 0x79, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x29, 0x0a, 0x7b, // at y, float x).{
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3d, 0x20, 0x61, // .float abs_y = a
	0x62, 0x73, 0x28, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, // bs(y);.float abs
	0x5f, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x78, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, // _x = abs(x);.if(
	0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, // abs_x <= 0.00006
	0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x20, 0x26, 0x26, 0x20, 0x61, 0x62, 0x73, // 103515625 && abs
	0x5f, 0x79, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, // _y <= 0.00006103
	0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x30, // 515625).return 0
	0x2e, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x61, 0x62, // .;.float r = (ab
	0x73, 0x5f, 0x78, 0x20, 0x2d, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x20, 0x2f, 0x20, 0x28, // s_x - abs_y) / (
	0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2b, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x3b, 0x0a, // abs_x + abs_y);.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3d, 0x20, 0x28, 0x28, // float angle = ((
	0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x28, 0x33, 0x2e, 0x2f, 0x38, 0x2e, // x < 0.) ? (3./8.
	0x29, 0x20, 0x3a, 0x20, 0x28, 0x31, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x29, 0x0a, 0x2b, 0x20, 0x28, // ) : (1./8.)).+ (
	0x30, 0x2e, 0x32, 0x31, 0x31, 0x38, 0x36, 0x38, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, // 0.211868 /(2.*3.
	0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, // 1415926535897932
	0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, // 384626433832795)
	0x20, 0x2a, 0x20, 0x72, 0x20, 0x2a, 0x20, 0x72, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x39, 0x38, 0x37, //  * r * r - 0.987
	0x33, 0x30, 0x35, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, // 305 /(2.*3.14159
	0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, // 2653589793238462
	0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, // 6433832795)) * (
	0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x72, 0x20, 0x3a, 0x20, // (x < 0.) ? -r : 
	0x72, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x79, 0x20, 0x3c, 0x20, // r);.return (y < 
	0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3a, 0x20, 0x61, // 0.) ? -angle : a
	0x6e, 0x67, 0x6c, 0x65, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x73, // ngle;.}.float as
	0x69, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, // in_approx_divPI(
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, //  float v).{.floa
	0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, // t x = abs(v);.if
	0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, // (1. - x <= 0.000
	0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, // 06103515625).ret
	0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, // urn (v >= 0.) ? 
	0x30, 0x2e, 0x35, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // 0.5 : -0.5;.floa
	0x74, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, // t res = ((-0.155
	0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, // 972/3.1415926535
	0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, // 8979323846264338
	0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, // 32795) * x + (1.
	0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, // 56467/3.14159265
	0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, // 3589793238462643
	0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, // 3832795) ) * sqr
	0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // t(1. - x);.retur
	0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, // n (v >= 0.) ? 0.
	0x35, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x20, 0x2b, // 5 - res : -0.5 +
	0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x61, 0x79, //  res;.}.vec2 ray
	0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x75, // _to_equirectangu
	0x6c, 0x61, 0x72, 0x5f, 0x75, 0x76, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x61, 0x79, // lar_uv( vec3 ray
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // ).{.return vec2(
	0x0a, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, // .0.5 + atan2_app
	0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x79, // rox_div2PI(ray.y
	0x2c, 0x20, 0x72, 0x61, 0x79, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, // , ray.x),.acos_a
	0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, // pprox_divPI(ray.
	0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, // z));.}.float Inv
	0x73, 0x52, 0x47, 0x42, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // sRGB( float colo
	0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, // r).{.if (color <
	0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, 0x34, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // = 0.04045).retur
	0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, // n color * (1.0/1
	0x32, 0x2e, 0x39, 0x32, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, // 2.92);.else.retu
	0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, // rn pow(color * (
	0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, // 1.0/1.055) + (0.
	0x30, 0x35, 0x35, 0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x29, // 055/1.055), 2.4)
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x52, 0x65, 0x63, // ;.}.float InvRec
	0x37, 0x30, 0x39, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // 709( float color
	0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, // ).{.if (color <=
	0x20, 0x30, 0x2e, 0x30, 0x38, 0x31, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, //  0.081).return c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x34, 0x2e, 0x35, 0x29, // olor * (1.0/4.5)
	0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, // ;.else.return po
	0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, // w(color * (1.0/1
	0x2e, 0x30, 0x39, 0x39, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x2f, 0x31, // .099) + (0.099/1
	0x2e, 0x30, 0x39, 0x39, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x30, 0x2e, 0x34, 0x35, 0x29, // .099), 1.0/0.45)
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, // ;.}.float InvGam
	0x6d, 0x61, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, // ma( float color)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, // .{.return InvsRG
	0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, // B(color);.}.vec3
	0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, //  InvGamma( vec3 
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // color).{.return 
	0x76, 0x65, 0x63, 0x33, 0x28, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, // vec3(InvGamma(co
	0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, // lor.x),InvGamma(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, // color.y),InvGamm
	0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // a(color.z));.}.v
	0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, // ec3 InvToneMap( 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, // vec3 color).{.fl
	0x6f, 0x61, 0x74, 0x20, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x30, 0x2e, // oat inv_2bh = 0.
	0x35, 0x2f, 0x30, 0x2e, 0x32, 0x35, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x68, // 5/0.25;.float bh
	0x20, 0x3d, 0x20, 0x34, 0x2e, 0x30, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2d, 0x20, 0x32, 0x2e, //  = 4.0*0.25 - 2.
	0x30, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // 0;.return (color
	0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2b, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x63, 0x6f, //  - 1.0 + sqrt(co
	0x6c, 0x6f, 0x72, 0x2a, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x20, 0x62, 0x68, 0x29, // lor*(color + bh)
	0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x2a, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, //  + 1.0))*inv_2bh
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x20, // ;.}.float sRGB( 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // float f).{.float
	0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, //  s;.if (f <= 0.0
	0x30, 0x33, 0x31, 0x33, 0x30, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, // 031308).s = 12.9
	0x32, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, // 2 * f;.else.s = 
	0x31, 0x2e, 0x30, 0x35, 0x35, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x31, // 1.055 * pow(f, 1
	0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x34, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x3b, // .0/2.4) - 0.055;
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // .return s;.}.flo
	0x61, 0x74, 0x20, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // at Rec709( float
	0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, //  f).{.float s;.i
	0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, 0x29, 0x0a, 0x73, // f (f <= 0.018).s
	0x20, 0x3d, 0x20, 0x34, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, //  = 4.5 * f;.else
	0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, // .s = 1.099 * pow
	0x28, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x39, // (f, 0.45) - 0.09
	0x39, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // 9;.return s;.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x66, 0x6c, // loat FBGamma( fl
	0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // oat color).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, // urn sRGB(color);
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, // .}.vec2 FBGamma(
	0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, //  vec2 color).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, // eturn vec2(FBGam
	0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, // ma(color.x),FBGa
	0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, // mma(color.y));.}
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, // .vec3 FBGamma( v
	0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // ec3 color).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, // urn vec3(FBGamma
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, // (color.x),FBGamm
	0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, // a(color.y),FBGam
	0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // ma(color.z));.}.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x32, 0x32, 0x28, 0x20, // vec3 FBGamma22( 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // vec3 color).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, // turn vec3(pow(co
	0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, // lor.x, 1.0/2.2),
	0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, 0x30, // pow(color.y, 1.0
	0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, // /2.2),pow(color.
	0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // z, 1.0/2.2));.}.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, // float FBToneMap(
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, //  float l).{.retu
	0x72, 0x6e, 0x20, 0x6c, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, // rn l * ((l*0.25 
	0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, // + 1.0) / (l + 1.
	0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x54, 0x6f, // 0));.}.vec2 FBTo
	0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // neMap( vec2 colo
	0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, // r).{.float l = d
	0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, // ot(color,vec2(0.
	0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, // 176204+0.0108109
	0x2a, 0x30, 0x2e, 0x35, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2b, 0x30, 0x2e, // *0.5,0.812985+0.
	0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x3b, 0x0a, 0x72, // 0108109*0.5));.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, // eturn color * ((
	0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, // l*0.25 + 1.0) / 
	0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // (l + 1.0));.}.ve
	0x63, 0x33, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, // c3 FBToneMap( ve
	0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // c3 color).{.floa
	0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, // t l = dot(color,
	0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2c, 0x30, 0x2e, // vec3(0.176204,0.
	0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2c, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, // 812985,0.0108109
	0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // ));.return color
	0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, //  * ((l*0.25 + 1.
	0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, // 0) / (l + 1.0));
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, // .}.vec4 Additive
	0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, // ( vec4 cBase, ve
	0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // c4 cBlend, float
	0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, //  percent).{.retu
	0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2b, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // rn cBase + cBlen
	0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // d*percent;.}.vec
	0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // 3 Screen ( vec3 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, // cBase, vec3 cBle
	0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, // nd).{.return 1.0
	0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, //  - (1.0 - cBase)
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, //  * (1.0 - cBlend
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, // );.}.vec4 Screen
	0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, //  ( vec4 cBase, v
	0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // ec4 cBlend).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, // turn 1.0 - (1.0 
	0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, // - cBase) * (1.0 
	0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // - cBlend);.}.vec
	0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, // 3 ScreenHDR ( ve
	0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, // c3 cBase, vec3 c
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // Blend).{.return 
	0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, // max(1.0 - (1.0 -
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, //  cBase) * (1.0 -
	0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, //  cBlend), vec3(0
	0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // .,0.,0.));.}.vec
	0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, // 4 ScreenHDR ( ve
	0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, // c4 cBase, vec4 c
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // Blend).{.return 
	0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, // max(1.0 - (1.0 -
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, //  cBase) * (1.0 -
	0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, //  cBlend), vec4(0
	0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // .,0.,0.,0.));.}.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x20, 0x28, 0x20, // vec4 Multiply ( 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // vec4 cBase, vec4
	0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, //  cBlend, float p
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // ercent).{.return
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2a, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, //  cBase * cBlend*
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, // percent;.}.vec4 
	0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, // Overlay ( vec4 c
	0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // Base, vec4 cBlen
	0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, // d).{.vec4 cNew =
	0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, //  step(0.5, cBase
	0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, // );.cNew = mix(cB
	0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, // ase*cBlend*2.0, 
	0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, // 1.0-2.0*(1.0-cBa
	0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, // se)*(1.0-cBlend)
	0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // , cNew);.return 
	0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, // cNew;.}.vec4 Ove
	0x72, 0x6c, 0x61, 0x79, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, // rlayHDR ( vec4 c
	0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // Base, vec4 cBlen
	0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, // d).{.vec4 cNew =
	0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, //  step(0.5, cBase
	0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x6d, 0x69, // );.cNew = max(mi
	0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, // x(cBase*cBlend*2
	0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, // .0, 1.0-2.0*(1.0
	0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, // -cBase)*(1.0-cBl
	0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, // end), cNew), vec
	0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, // 4(0.,0.,0.,0.));
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, // .return cNew;.}.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x73, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, // vec3 cos_hemisph
	0x65, 0x72, 0x65, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, // ere_sample( vec2
	0x20, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x68, 0x69, 0x20, //  t).{.float phi 
	0x3d, 0x20, 0x74, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x28, 0x32, 0x2e, 0x30, 0x2a, 0x33, 0x2e, 0x31, // = t.y * (2.0*3.1
	0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, // 4159265358979323
	0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x3b, // 84626433832795);
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, // .float cosTheta 
	0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x74, 0x2e, 0x78, // = sqrt(1.0 - t.x
	0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, // );.float sinThet
	0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, // a = sqrt(t.x);.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x70, 0x2c, 0x63, 0x70, 0x3b, 0x0a, 0x7b, 0x73, 0x70, 0x3d, // loat sp,cp;.{sp=
	0x73, 0x69, 0x6e, 0x28, 0x70, 0x68, 0x69, 0x29, 0x3b, 0x63, 0x70, 0x3d, 0x63, 0x6f, 0x73, 0x28, // sin(phi);cp=cos(
	0x70, 0x68, 0x69, 0x29, 0x3b, 0x7d, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // phi);};.return v
	0x65, 0x63, 0x33, 0x28, 0x63, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, // ec3(cp * sinThet
	0x61, 0x2c, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x73, 0x70, 0x20, // a, cosTheta, sp 
	0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // * sinTheta);.}.v
	0x65, 0x63, 0x33, 0x20, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x76, 0x65, // ec3 rotate_to_ve
	0x63, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, // ctor_upper( vec3
	0x20, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, //  vec, vec3 norma
	0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, // l).{.if(normal.y
	0x20, 0x3e, 0x20, 0x2d, 0x30, 0x2e, 0x39, 0x39, 0x39, 0x39, 0x39, 0x29, 0x0a, 0x7b, 0x0a, 0x66, //  > -0.99999).{.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x28, 0x31, 0x2e, // loat h = 1.0/(1.
	0x30, 0x2b, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, // 0+normal.y);.flo
	0x61, 0x74, 0x20, 0x68, 0x7a, 0x20, 0x3d, 0x20, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, // at hz = h*normal
	0x2e, 0x7a, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x3d, 0x20, // .z;.float hzx = 
	0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x3b, 0x0a, 0x72, 0x65, 0x74, // hz*normal.x;.ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, // urn vec3(.vec.x 
	0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x7a, 0x2a, 0x6e, // * (normal.y+hz*n
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x29, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x79, // ormal.z) + vec.y
	0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, //  * normal.x - ve
	0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, // c.z * hzx,.vec.y
	0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x2d, 0x20, 0x76, 0x65, //  * normal.y - ve
	0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, // c.x * normal.x -
	0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, //  vec.z * normal.
	0x7a, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, // z,.vec.y * norma
	0x6c, 0x2e, 0x7a, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x68, 0x7a, // l.z - vec.x * hz
	0x78, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, // x + vec.z * (nor
	0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, // mal.y+h*normal.x
	0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, // *normal.x));.}.e
	0x6c, 0x73, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x2d, 0x76, 0x65, 0x63, 0x3b, // lse return -vec;
	0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // .}.uniform vec4 
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x53, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, // Stereo_Saturatio
	0x6e, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // n;.uniform vec4 
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, // Stereo_MS_ZPD_YA
	0x78, 0x69, 0x73, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, // xis;.uniform sam
	0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x20, 0x74, 0x65, 0x78, 0x5f, // pler2DArray tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, // stereo_fb;.unifo
	0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, // rm sampler2DArra
	0x79, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, // y tex_stereo_dep
	0x74, 0x68, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, // th;.uniform vec4
	0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, 0x76, 0x65, 0x63, //  w_h_height;.vec
	0x33, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, // 3 gatherEyeColor
	0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x69, 0x73, // (vec2 u, bool is
	0x4c, 0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, // Left).{.return t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x6f, 0x64, // exture2DArrayLod
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, // (tex_stereo_fb, 
	0x76, 0x65, 0x63, 0x33, 0x28, 0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, 0x20, 0x69, // vec3(u.x, u.y, i
	0x73, 0x4c, 0x65, 0x66, 0x74, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x30, 0x20, 0x3a, 0x20, 0x31, 0x2e, // sLeft ? 0.0 : 1.
	0x30, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // 0), 0.).rgb;.}.v
	0x6f, 0x69, 0x64, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x69, // oid gatherLeftRi
	0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, // ghtColors(vec2 u
	0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x63, 0x6f, 0x6c, 0x2c, // , out vec3 lcol,
	0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x6f, 0x6c, 0x29, 0x0a, //  out vec3 rcol).
	0x7b, 0x0a, 0x6c, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // {.lcol = texture
	0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, // 2DArrayLod(tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x75, // tereo_fb, vec3(u
	0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2c, 0x20, 0x30, 0x2e, // .x, u.y, 0.), 0.
	0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x72, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, // ).xyz;.rcol = te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x6f, 0x64, 0x28, // xture2DArrayLod(
	0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x76, // tex_stereo_fb, v
	0x65, 0x63, 0x33, 0x28, 0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, // ec3(u.x, u.y, 1.
	0x29, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, // ), 0.).xyz;.}.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // iform mat4 Stere
	0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, // o_LeftMat;.unifo
	0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, // rm mat4 Stereo_R
	0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // ightMat;.uniform
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, //  vec4 Stereo_Lef
	0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, // tLuminance_Gamma
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, // ;.uniform vec4 S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, // tereo_RightLumin
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x3b, 0x0a, 0x76, // ance_DynDesat;.v
	0x6f, 0x69, 0x64, 0x20, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x65, 0x73, 0x61, 0x74, // oid DynamicDesat
	0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, // Anaglyph( vec3 l
	0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // Col, vec3 rCol, 
	0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, // out vec3 lDesatC
	0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x44, 0x65, // ol, out vec3 rDe
	0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // satCol).{.float 
	0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, // left2LeftLum = d
	0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // ot(lCol, Stereo_
	0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, // LeftLuminance_Ga
	0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // mma.xyz);.float 
	0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, // left2RightLum = 
	0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // dot(lCol, Stereo
	0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, // _RightLuminance_
	0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, // DynDesat.xyz);.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, // loat right2LeftL
	0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, // um = dot(rCol, S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, // tereo_LeftLumina
	0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, // nce_Gamma.xyz);.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, // float right2Righ
	0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, // tLum = dot(rCol,
	0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, //  Stereo_RightLum
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, // inance_DynDesat.
	0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, // xyz);.float left
	0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, // Lum = left2LeftL
	0x75, 0x6d, 0x20, 0x2b, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, // um + left2RightL
	0x75, 0x6d, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, // um;.float rightL
	0x75, 0x6d, 0x20, 0x3d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, // um = right2LeftL
	0x75, 0x6d, 0x20, 0x2b, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, // um + right2Right
	0x4c, 0x75, 0x6d, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, // Lum;.float leftD
	0x65, 0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, // esat = Stereo_Ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, // ghtLuminance_Dyn
	0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x6c, // Desat.w * abs((l
	0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x6c, 0x65, // eft2LeftLum - le
	0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, // ft2RightLum) / (
	0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, // leftLum + 0.0001
	0x29, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, // ));.float rightD
	0x65, 0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, // esat = Stereo_Ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, // ghtLuminance_Dyn
	0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x72, // Desat.w * abs((r
	0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x72, // ight2LeftLum - r
	0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, // ight2RightLum) /
	0x20, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, //  (rightLum + 0.0
	0x30, 0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, // 001));.lDesatCol
	0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, //  = mix(lCol, vec
	0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x29, // 3_splat(leftLum)
	0x2c, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x72, 0x44, // , leftDesat);.rD
	0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x72, 0x43, // esatCol = mix(rC
	0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x72, // ol, vec3_splat(r
	0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, // ightLum), rightD
	0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x4c, 0x69, // esat);.}.vec3 Li
	0x6e, 0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, // nearAnaglyph( ve
	0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, // c3 lCol, vec3 rC
	0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // ol).{.vec3 color
	0x20, 0x3d, 0x20, 0x28, 0x28, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x6c, 0x43, 0x6f, 0x6c, //  = (( (vec4(lCol
	0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // , 1.)) * (Stereo
	0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x20, // _LeftMat) ) + ( 
	0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, // (vec4(rCol, 1.))
	0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, //  * (Stereo_Right
	0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x72, 0x65, 0x74, // Mat) )).rgb;.ret
	0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, // urn color;.}.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // form vec4 Stereo
	0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, // _DeghostGamma;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, // niform mat4 Ster
	0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, // eo_DeghostFilter
	0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x6e, // ;.vec3 DeghostAn
	0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, // aglyph( vec3 lCo
	0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, // l, vec3 rCol).{.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, 0x6e, // vec3 color = Lin
	0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, // earAnaglyph(lCol
	0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // , rCol);.return 
	0x28, 0x20, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x53, 0x74, // ( (pow(color, St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, // ereo_DeghostGamm
	0x61, 0x2e, 0x72, 0x67, 0x62, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, // a.rgb)) * (mat3(
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, // Stereo_DeghostFi
	0x6c, 0x74, 0x65, 0x72, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, // lter[0].xyz, Ste
	0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, // reo_DeghostFilte
	0x72, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // r[1].xyz, Stereo
	0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x32, // _DeghostFilter[2
	0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, // ].xyz)) );.}.voi
	0x64, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x62, 0x67, 0x66, 0x78, 0x5f, // d main().{.bgfx_
	0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, // FragColor = vec4
	0x28, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x28, // (gatherEyeColor(
	0x76, 0x65, 0x63, 0x32, 0x28, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, // vec2(v_texcoord0
	0x2e, 0x78, 0x2c, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2e, // .x, v_texcoord0.
	0x79, 0x20, 0x2a, 0x20, 0x32, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, // y * 2.0), v_texc
	0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2e, 0x79, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x2c, 0x20, // oord0.y < 0.5), 
	0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x00,                                           // 1.0);.}..
};
static const uint8_t fs_pp_stereo_tb_st_glsl[8594] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0x21, // FSH.Jc._.......!
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x34, 0x34, 0x30, 0x0a, 0x23, // ..#version 440.#
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x47, 0x4c, 0x5f, 0x45, 0x58, 0x54, // extension GL_EXT
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x20, 0x3a, // _texture_array :
	0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x0a, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, //  enable.out vec4
	0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, //  bgfx_FragColor;
	0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, // .#define gl_Frag
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, // Color bgfx_FragC
	0x6f, 0x6c, 0x6f, 0x72, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, // olor.#define tex
	0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ture2D          
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, // texture.#define 
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, // texture2DLod    
	0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, //    textureLod.#d
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x47, // efine texture2DG
	0x72, 0x61, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // rad      texture
	0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, // Grad.#define tex
	0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, // ture2DProjLod   
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x4c, 0x6f, 0x64, 0x0a, 0x23, // textureProjLod.#
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, // define texture2D
	0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // ProjGrad  textur
	0x65, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, // eProjGrad.#defin
	0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x4c, 0x6f, 0x64, // e textureCubeLod
	0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x0a, //      textureLod.
	0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, // #define textureC
	0x75, 0x62, 0x65, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, // ubeGrad    textu
	0x72, 0x65, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, // reGrad.#define t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x33, 0x44, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // exture3D        
	0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, //   texture.#defin
	0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x4c, 0x6f, 0x64, 0x4f, 0x66, // e texture2DLodOf
	0x66, 0x73, 0x65, 0x74, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x4f, // fset textureLodO
	0x66, 0x66, 0x73, 0x65, 0x74, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x61, 0x74, // ffset.#define at
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, // tribute in.#defi
	0x6e, 0x65, 0x20, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, // ne varying in.#d
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x62, 0x67, 0x66, 0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, // efine bgfxShadow
	0x32, 0x44, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, // 2D(_sampler, _co
	0x6f, 0x72, 0x64, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, // ord)     vec4_sp
	0x6c, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x5f, 0x73, 0x61, 0x6d, // lat(texture(_sam
	0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x29, 0x0a, // pler, _coord) ).
	0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x62, 0x67, 0x66, 0x78, 0x53, 0x68, 0x61, 0x64, // #define bgfxShad
	0x6f, 0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // ow2DProj(_sample
	0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, // r, _coord) vec4_
	0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, // splat(texturePro
	0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, // j(_sampler, _coo
	0x72, 0x64, 0x29, 0x20, 0x29, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x66, 0x6c, // rd) ).varying fl
	0x6f, 0x61, 0x74, 0x20, 0x76, 0x5f, 0x65, 0x79, 0x65, 0x3b, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, // oat v_eye;.varyi
	0x6e, 0x67, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, // ng vec2 v_texcoo
	0x72, 0x64, 0x30, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, // rd0;.vec3 instMu
	0x6c, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, // l(vec3 _vec, mat
	0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // 3 _mtx) { return
	0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, //  ( (_vec) * (_mt
	0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, // x) ); }.vec3 ins
	0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, // tMul(mat3 _mtx, 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // vec3 _vec) { ret
	0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, // urn ( (_mtx) * (
	0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, // _vec) ); }.vec4 
	0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, // instMul(vec4 _ve
	0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, // c, mat4 _mtx) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, // return ( (_vec) 
	0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, // * (_mtx) ); }.ve
	0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x20, // c4 instMul(mat4 
	0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, // _mtx, vec4 _vec)
	0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, //  { return ( (_mt
	0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, // x) * (_vec) ); }
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, 0x70, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, // .float rcp(float
	0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, //  _a) { return 1.
	0x30, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x63, 0x70, // 0/_a; }.vec2 rcp
	0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // (vec2 _a) { retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, // rn vec2(1.0)/_a;
	0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x33, //  }.vec3 rcp(vec3
	0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, //  _a) { return ve
	0x63, 0x33, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, // c3(1.0)/_a; }.ve
	0x63, 0x34, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x61, 0x29, 0x20, // c4 rcp(vec4 _a) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x31, 0x2e, // { return vec4(1.
	0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x65, // 0)/_a; }.vec2 ve
	0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, // c2_splat(float _
	0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, // x) { return vec2
	0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, // (_x, _x); }.vec3
	0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, //  vec3_splat(floa
	0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // t _x) { return v
	0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, // ec3(_x, _x, _x);
	0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, //  }.vec4 vec4_spl
	0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, // at(float _x) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, // eturn vec4(_x, _
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, // x, _x, _x); }.uv
	0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, // ec2 uvec2_splat(
	0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, // uint _x) { retur
	0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, // n uvec2(_x, _x);
	0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, //  }.uvec3 uvec3_s
	0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, // plat(uint _x) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, // return uvec3(_x,
	0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, //  _x, _x); }.uvec
	0x34, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, // 4 uvec4_splat(ui
	0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // nt _x) { return 
	0x75, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, // uvec4(_x, _x, _x
	0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, // , _x); }.mat4 mt
	0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, // xFromRows(vec4 _
	0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // 0, vec4 _1, vec4
	0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, //  _2, vec4 _3).{.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, // return transpose
	0x28, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, // (mat4(_0, _1, _2
	0x2c, 0x20, 0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, // , _3) );.}.mat4 
	0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, // mtxFromCols(vec4
	0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, //  _0, vec4 _1, ve
	0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, // c4 _2, vec4 _3).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, // {.return mat4(_0
	0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x3b, 0x0a, 0x7d, // , _1, _2, _3);.}
	0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, // .mat3 mtxFromRow
	0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // s(vec3 _0, vec3 
	0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, // _1, vec3 _2).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, // eturn transpose(
	0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, // mat3(_0, _1, _2)
	0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, //  );.}.mat3 mtxFr
	0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, // omCols(vec3 _0, 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, // vec3 _1, vec3 _2
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x28, // ).{.return mat3(
	0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, // _0, _1, _2);.}.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, // niform vec4 u_vi
	0x65, 0x77, 0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // ewRect;.uniform 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x54, 0x65, 0x78, 0x65, 0x6c, // vec4 u_viewTexel
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, // ;.uniform mat4 u
	0x5f, 0x76, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, // _view;.uniform m
	0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, // at4 u_invView;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x70, 0x72, // niform mat4 u_pr
	0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, // oj;.uniform mat4
	0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, //  u_invProj;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x50, // orm mat4 u_viewP
	0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, // roj;.uniform mat
	0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, // 4 u_invViewProj;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, // .uniform mat4 u_
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, // model[32];.unifo
	0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, // rm mat4 u_modelV
	0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, // iew;.uniform mat
	0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, // 4 u_modelViewPro
	0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // j;.uniform vec4 
	0x75, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x66, 0x34, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, // u_alphaRef4;.flo
	0x61, 0x74, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, // at sqr( float v)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, // .{.return v*v;.}
	0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, // .vec2 sqr( vec2 
	0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, // v).{.return v*v;
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, // .}.vec3 sqr( vec
	0x33, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, // 3 v).{.return v*
	0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6d, 0x75, 0x6c, 0x5f, 0x77, 0x31, // v;.}.vec3 mul_w1
	0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, // ( vec3 v, mat4 m
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2e, 0x78, 0x2a, 0x6d, // ).{.return v.x*m
	0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x79, 0x2a, 0x6d, // [0].xyz + (v.y*m
	0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x7a, 0x2a, 0x6d, // [1].xyz + (v.z*m
	0x5b, 0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x6d, 0x5b, 0x33, 0x5d, 0x2e, 0x78, // [2].xyz + m[3].x
	0x79, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x63, // yz));.}.float ac
	0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, // os_approx_divPI(
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, //  float v).{.floa
	0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, // t x = abs(v);.if
	0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, // (1. - x <= 0.000
	0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, // 06103515625).ret
	0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, // urn (v >= 0.) ? 
	0x30, 0x2e, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, // 0. : 1.;.float r
	0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, // es = ((-0.155972
	0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, // /3.1415926535897
	0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, // 9323846264338327
	0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, // 95) * x + (1.564
	0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, // 67/3.14159265358
	0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, // 9793238462643383
	0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, // 2795) ) * sqrt(1
	0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // . - x);.return (
	0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, // v >= 0.) ? res :
	0x20, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, //  1. - res;.}.flo
	0x61, 0x74, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, // at atan2_approx_
	0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x79, 0x2c, // div2PI( float y,
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, //  float x).{.floa
	0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x79, 0x29, // t abs_y = abs(y)
	0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3d, 0x20, // ;.float abs_x = 
	0x61, 0x62, 0x73, 0x28, 0x78, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, // abs(x);.if(abs_x
	0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, //  <= 0.0000610351
	0x35, 0x36, 0x32, 0x35, 0x20, 0x26, 0x26, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3c, 0x3d, // 5625 && abs_y <=
	0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, //  0.0000610351562
	0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x30, 0x2e, 0x3b, 0x0a, 0x66, 0x6c, // 5).return 0.;.fl
	0x6f, 0x61, 0x74, 0x20, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2d, // oat r = (abs_x -
	0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, //  abs_y) / (abs_x
	0x20, 0x2b, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, //  + abs_y);.float
	0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, //  angle = ((x < 0
	0x2e, 0x29, 0x20, 0x3f, 0x20, 0x28, 0x33, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x20, 0x3a, 0x20, 0x28, // .) ? (3./8.) : (
	0x31, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x29, 0x0a, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x32, 0x31, 0x31, // 1./8.)).+ (0.211
	0x38, 0x36, 0x38, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, // 868 /(2.*3.14159
	0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, // 2653589793238462
	0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x72, 0x20, // 6433832795) * r 
	0x2a, 0x20, 0x72, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x39, 0x38, 0x37, 0x33, 0x30, 0x35, 0x20, 0x2f, // * r - 0.987305 /
	0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, // (2.*3.1415926535
	0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, // 8979323846264338
	0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, // 32795)) * ((x < 
	0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x72, 0x20, 0x3a, 0x20, 0x72, 0x29, 0x3b, 0x0a, 0x72, // 0.) ? -r : r);.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x79, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, // eturn (y < 0.) ?
	0x20, 0x2d, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3a, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x3b, //  -angle : angle;
	0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x73, 0x69, 0x6e, 0x5f, 0x61, 0x70, // .}.float asin_ap
	0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, // prox_divPI( floa
	0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, // t v).{.float x =
	0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, //  abs(v);.if(1. -
	0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, //  x <= 0.00006103
	0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // 515625).return (
	0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x3a, // v >= 0.) ? 0.5 :
	0x20, 0x2d, 0x30, 0x2e, 0x35, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, //  -0.5;.float res
	0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, //  = ((-0.155972/3
	0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, // .141592653589793
	0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, // 2384626433832795
	0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, // ) * x + (1.56467
	0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, // /3.1415926535897
	0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, // 9323846264338327
	0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, // 95) ) * sqrt(1. 
	0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, // - x);.return (v 
	0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x2d, 0x20, 0x72, // >= 0.) ? 0.5 - r
	0x65, 0x73, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x65, 0x73, 0x3b, // es : -0.5 + res;
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x61, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x65, // .}.vec2 ray_to_e
	0x71, 0x75, 0x69, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x75, // quirectangular_u
	0x76, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x61, 0x79, 0x29, 0x0a, 0x7b, 0x0a, 0x72, // v( vec3 ray).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x0a, 0x30, 0x2e, 0x35, 0x20, // eturn vec2(.0.5 
	0x2b, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, // + atan2_approx_d
	0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x79, 0x2c, 0x20, 0x72, 0x61, 0x79, // iv2PI(ray.y, ray
	0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, // .x),.acos_approx
	0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, // _divPI(ray.z));.
	0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, // }.float InvsRGB(
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, //  float color).{.
	0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, // if (color <= 0.0
	0x34, 0x30, 0x34, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, // 4045).return col
	0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x29, // or * (1.0/12.92)
	0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, // ;.else.return po
	0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, // w(color * (1.0/1
	0x2e, 0x30, 0x35, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x2f, 0x31, // .055) + (0.055/1
	0x2e, 0x30, 0x35, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // .055), 2.4);.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x20, // loat InvRec709( 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, // float color).{.i
	0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x38, // f (color <= 0.08
	0x31, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, // 1).return color 
	0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x34, 0x2e, 0x35, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, // * (1.0/4.5);.els
	0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, // e.return pow(col
	0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, // or * (1.0/1.099)
	0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, //  + (0.099/1.099)
	0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // , 1.0/0.45);.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x66, // loat InvGamma( f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // loat color).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, // turn InvsRGB(col
	0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x47, // or);.}.vec3 InvG
	0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // amma( vec3 color
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, // ).{.return vec3(
	0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, // InvGamma(color.x
	0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // ),InvGamma(color
	0x2e, 0x79, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, // .y),InvGamma(col
	0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, // or.z));.}.vec3 I
	0x6e, 0x76, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // nvToneMap( vec3 
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x69, // color).{.float i
	0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x30, 0x2e, 0x35, 0x2f, 0x30, 0x2e, 0x32, // nv_2bh = 0.5/0.2
	0x35, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x34, 0x2e, // 5;.float bh = 4.
	0x30, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2d, 0x20, 0x32, 0x2e, 0x30, 0x3b, 0x0a, 0x72, 0x65, // 0*0.25 - 2.0;.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2d, 0x20, 0x31, 0x2e, // turn (color - 1.
	0x30, 0x20, 0x2b, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2a, 0x28, // 0 + sqrt(color*(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x20, 0x62, 0x68, 0x29, 0x20, 0x2b, 0x20, 0x31, 0x2e, // color + bh) + 1.
	0x30, 0x29, 0x29, 0x2a, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // 0))*inv_2bh;.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // loat sRGB( float
	0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, //  f).{.float s;.i
	0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x33, 0x31, 0x33, 0x30, // f (f <= 0.003130
	0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x20, 0x2a, 0x20, 0x66, // 8).s = 12.92 * f
	0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x35, 0x35, // ;.else.s = 1.055
	0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, //  * pow(f, 1.0/2.
	0x34, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // 4) - 0.055;.retu
	0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x52, 0x65, // rn s;.}.float Re
	0x63, 0x37, 0x30, 0x39, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, // c709( float f).{
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, // .float s;.if (f 
	0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x34, 0x2e, // <= 0.018).s = 4.
	0x35, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, // 5 * f;.else.s = 
	0x31, 0x2e, 0x30, 0x39, 0x39, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x30, // 1.099 * pow(f, 0
	0x2e, 0x34, 0x35, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x3b, 0x0a, 0x72, 0x65, // .45) - 0.099;.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // turn s;.}.float 
	0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, // FBGamma( float c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, // olor).{.return s
	0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // RGB(color);.}.ve
	0x63, 0x32, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, // c2 FBGamma( vec2
	0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, //  color).{.return
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, //  vec2(FBGamma(co
	0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, // lor.x),FBGamma(c
	0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, // olor.y));.}.vec3
	0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, //  FBGamma( vec3 c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // olor).{.return v
	0x65, 0x63, 0x33, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // ec3(FBGamma(colo
	0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, // r.x),FBGamma(col
	0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, // or.y),FBGamma(co
	0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // lor.z));.}.vec3 
	0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x32, 0x32, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // FBGamma22( vec3 
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // color).{.return 
	0x76, 0x65, 0x63, 0x33, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, // vec3(pow(color.x
	0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, // , 1.0/2.2),pow(c
	0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, // olor.y, 1.0/2.2)
	0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x2c, 0x20, 0x31, 0x2e, // ,pow(color.z, 1.
	0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // 0/2.2));.}.float
	0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, //  FBToneMap( floa
	0x74, 0x20, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6c, 0x20, // t l).{.return l 
	0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, // * ((l*0.25 + 1.0
	0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, // ) / (l + 1.0));.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, // }.vec2 FBToneMap
	0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, // ( vec2 color).{.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, // float l = dot(co
	0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, // lor,vec2(0.17620
	0x34, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x2c, // 4+0.0108109*0.5,
	0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, // 0.812985+0.01081
	0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // 09*0.5));.return
	0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, //  color * ((l*0.2
	0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, // 5 + 1.0) / (l + 
	0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, // 1.0));.}.vec3 FB
	0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, // ToneMap( vec3 co
	0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, // lor).{.float l =
	0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x33, 0x28, //  dot(color,vec3(
	0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, // 0.176204,0.81298
	0x35, 0x2c, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x29, 0x29, 0x3b, 0x0a, 0x72, // 5,0.0108109));.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, // eturn color * ((
	0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, // l*0.25 + 1.0) / 
	0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // (l + 1.0));.}.ve
	0x63, 0x34, 0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x28, 0x20, 0x76, 0x65, 0x63, // c4 Additive( vec
	0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // 4 cBase, vec4 cB
	0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, // lend, float perc
	0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, // ent).{.return cB
	0x61, 0x73, 0x65, 0x20, 0x2b, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, // ase + cBlend*per
	0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, // cent;.}.vec3 Scr
	0x65, 0x65, 0x6e, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, // een ( vec3 cBase
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, // , vec3 cBlend).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, // .return 1.0 - (1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, // .0 - cBase) * (1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // .0 - cBlend);.}.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x20, 0x76, 0x65, // vec4 Screen ( ve
	0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, // c4 cBase, vec4 c
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // Blend).{.return 
	0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, // 1.0 - (1.0 - cBa
	0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, // se) * (1.0 - cBl
	0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, // end);.}.vec3 Scr
	0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, // eenHDR ( vec3 cB
	0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, // ase, vec3 cBlend
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, // ).{.return max(1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, // .0 - (1.0 - cBas
	0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, // e) * (1.0 - cBle
	0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, // nd), vec3(0.,0.,
	0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, // 0.));.}.vec4 Scr
	0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // eenHDR ( vec4 cB
	0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, // ase, vec4 cBlend
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, // ).{.return max(1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, // .0 - (1.0 - cBas
	0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, // e) * (1.0 - cBle
	0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, // nd), vec4(0.,0.,
	0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, // 0.,0.));.}.vec4 
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // Multiply ( vec4 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, // cBase, vec4 cBle
	0x6e, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, // nd, float percen
	0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, // t).{.return cBas
	0x65, 0x20, 0x2a, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, // e * cBlend*perce
	0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, // nt;.}.vec4 Overl
	0x61, 0x79, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, // ay ( vec4 cBase,
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, //  vec4 cBlend).{.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, // vec4 cNew = step
	0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, // (0.5, cBase);.cN
	0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, // ew = mix(cBase*c
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, // Blend*2.0, 1.0-2
	0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, // .0*(1.0-cBase)*(
	0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, // 1.0-cBlend), cNe
	0x77, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, // w);.return cNew;
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x48, // .}.vec4 OverlayH
	0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, // DR ( vec4 cBase,
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, //  vec4 cBlend).{.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, // vec4 cNew = step
	0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, // (0.5, cBase);.cN
	0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, // ew = max(mix(cBa
	0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, // se*cBlend*2.0, 1
	0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, // .0-2.0*(1.0-cBas
	0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, // e)*(1.0-cBlend),
	0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, //  cNew), vec4(0.,
	0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // 0.,0.,0.));.retu
	0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // rn cNew;.}.vec3 
	0x63, 0x6f, 0x73, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x5f, 0x73, // cos_hemisphere_s
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x29, 0x0a, 0x7b, // ample( vec2 t).{
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x68, 0x69, 0x20, 0x3d, 0x20, 0x74, 0x2e, 0x79, // .float phi = t.y
	0x20, 0x2a, 0x20, 0x28, 0x32, 0x2e, 0x30, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, //  * (2.0*3.141592
	0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, // 6535897932384626
	0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // 433832795);.floa
	0x74, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, // t cosTheta = sqr
	0x74, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, // t(1.0 - t.x);.fl
	0x6f, 0x61, 0x74, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, // oat sinTheta = s
	0x71, 0x72, 0x74, 0x28, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // qrt(t.x);.float 
	0x73, 0x70, 0x2c, 0x63, 0x70, 0x3b, 0x0a, 0x7b, 0x73, 0x70, 0x3d, 0x73, 0x69, 0x6e, 0x28, 0x70, // sp,cp;.{sp=sin(p
	0x68, 0x69, 0x29, 0x3b, 0x63, 0x70, 0x3d, 0x63, 0x6f, 0x73, 0x28, 0x70, 0x68, 0x69, 0x29, 0x3b, // hi);cp=cos(phi);
	0x7d, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x63, // };.return vec3(c
	0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x63, 0x6f, // p * sinTheta, co
	0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x73, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, // sTheta, sp * sin
	0x54, 0x68, 0x65, 0x74, 0x61, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, // Theta);.}.vec3 r
	0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, // otate_to_vector_
	0x75, 0x70, 0x70, 0x65, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x2c, // upper( vec3 vec,
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, //  vec3 normal).{.
	0x69, 0x66, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x3e, 0x20, 0x2d, 0x30, // if(normal.y > -0
	0x2e, 0x39, 0x39, 0x39, 0x39, 0x39, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // .99999).{.float 
	0x68, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x28, 0x31, 0x2e, 0x30, 0x2b, 0x6e, 0x6f, 0x72, // h = 1.0/(1.0+nor
	0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, // mal.y);.float hz
	0x20, 0x3d, 0x20, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x3b, 0x0a, 0x66, //  = h*normal.z;.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x3d, 0x20, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, // loat hzx = hz*no
	0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // rmal.x;.return v
	0x65, 0x63, 0x33, 0x28, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, // ec3(.vec.x * (no
	0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, // rmal.y+hz*normal
	0x2e, 0x7a, 0x29, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, // .z) + vec.y * no
	0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, // rmal.x - vec.z *
	0x20, 0x68, 0x7a, 0x78, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, //  hzx,.vec.y * no
	0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, // rmal.y - vec.x *
	0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, //  normal.x - vec.
	0x7a, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x2c, 0x0a, 0x76, 0x65, // z * normal.z,.ve
	0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x20, 0x2d, // c.y * normal.z -
	0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x2b, 0x20, 0x76, //  vec.x * hzx + v
	0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, // ec.z * (normal.y
	0x2b, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, // +h*normal.x*norm
	0x61, 0x6c, 0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x72, // al.x));.}.else r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x2d, 0x76, 0x65, 0x63, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, // eturn -vec;.}.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // iform vec4 Stere
	0x6f, 0x5f, 0x53, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x0a, 0x75, 0x6e, // o_Saturation;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // iform vec4 Stere
	0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x3b, 0x0a, // o_MS_ZPD_YAxis;.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, // uniform sampler2
	0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // DArray tex_stere
	0x6f, 0x5f, 0x66, 0x62, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, // o_fb;.uniform sa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x20, 0x74, 0x65, 0x78, // mpler2DArray tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x3b, 0x0a, 0x75, // _stereo_depth;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x77, 0x5f, 0x68, 0x5f, // niform vec4 w_h_
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x67, 0x61, 0x74, // height;.vec3 gat
	0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x76, 0x65, 0x63, 0x32, // herEyeColor(vec2
	0x20, 0x75, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x29, //  u, bool isLeft)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // .{.return textur
	0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, // e2DArrayLod(tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, // stereo_fb, vec3(
	0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, 0x20, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, // u.x, u.y, isLeft
	0x20, 0x3f, 0x20, 0x30, 0x2e, 0x30, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x30, //  ? 0.0 : 1.0), 0
	0x2e, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x67, // .).rgb;.}.void g
	0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, // atherLeftRightCo
	0x6c, 0x6f, 0x72, 0x73, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x6f, 0x75, 0x74, // lors(vec2 u, out
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x63, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, //  vec3 lcol, out 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x6c, 0x63, 0x6f, // vec3 rcol).{.lco
	0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x41, 0x72, 0x72, // l = texture2DArr
	0x61, 0x79, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // ayLod(tex_stereo
	0x5f, 0x66, 0x62, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, // _fb, vec3(u.x, u
	0x2e, 0x79, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2e, 0x78, 0x79, 0x7a, // .y, 0.), 0.).xyz
	0x3b, 0x0a, 0x72, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // ;.rcol = texture
	0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, // 2DArrayLod(tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x75, // tereo_fb, vec3(u
	0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, 0x29, 0x2c, 0x20, 0x30, 0x2e, // .x, u.y, 1.), 0.
	0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // ).xyz;.}.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, //  mat4 Stereo_Lef
	0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, // tMat;.uniform ma
	0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, // t4 Stereo_RightM
	0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, // at;.uniform vec4
	0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, //  Stereo_LeftLumi
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, 0x6e, 0x69, // nance_Gamma;.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // form vec4 Stereo
	0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, // _RightLuminance_
	0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x3b, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x44, // DynDesat;.void D
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x65, 0x73, 0x61, 0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, // ynamicDesatAnagl
	0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // yph( vec3 lCol, 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, // vec3 rCol, out v
	0x65, 0x63, 0x33, 0x20, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, // ec3 lDesatCol, o
	0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, // ut vec3 rDesatCo
	0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, // l).{.float left2
	0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, // LeftLum = dot(lC
	0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, // ol, Stereo_LeftL
	0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, // uminance_Gamma.x
	0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, // yz);.float left2
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, // RightLum = dot(l
	0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, // Col, Stereo_Righ
	0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, // tLuminance_DynDe
	0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // sat.xyz);.float 
	0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, // right2LeftLum = 
	0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // dot(rCol, Stereo
	0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, // _LeftLuminance_G
	0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // amma.xyz);.float
	0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, //  right2RightLum 
	0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, // = dot(rCol, Ster
	0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, // eo_RightLuminanc
	0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, // e_DynDesat.xyz);
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, // .float leftLum =
	0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, //  left2LeftLum + 
	0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, 0x0a, 0x66, // left2RightLum;.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, // loat rightLum = 
	0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, // right2LeftLum + 
	0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, 0x0a, // right2RightLum;.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x20, // float leftDesat 
	0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // = Stereo_RightLu
	0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, // minance_DynDesat
	0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, // .w * abs((left2L
	0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, // eftLum - left2Ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, // ghtLum) / (leftL
	0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x66, // um + 0.0001));.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x20, // loat rightDesat 
	0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // = Stereo_RightLu
	0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, // minance_DynDesat
	0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, // .w * abs((right2
	0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, // LeftLum - right2
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x72, 0x69, 0x67, // RightLum) / (rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, 0x29, // htLum + 0.0001))
	0x3b, 0x0a, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, // ;.lDesatCol = mi
	0x78, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, // x(lCol, vec3_spl
	0x61, 0x74, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x66, // at(leftLum), lef
	0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x72, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, // tDesat);.rDesatC
	0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, // ol = mix(rCol, v
	0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, // ec3_splat(rightL
	0x75, 0x6d, 0x29, 0x2c, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, // um), rightDesat)
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x41, // ;.}.vec3 LinearA
	0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, // naglyph( vec3 lC
	0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, // ol, vec3 rCol).{
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x28, // .vec3 color = ((
	0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, 0x29, //  (vec4(lCol, 1.)
	0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, // ) * (Stereo_Left
	0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, // Mat) ) + ( (vec4
	0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, // (rCol, 1.)) * (S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, // tereo_RightMat) 
	0x29, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, // )).rgb;.return c
	0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // olor;.}.uniform 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, // vec4 Stereo_Degh
	0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // ostGamma;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, // m mat4 Stereo_De
	0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3b, 0x0a, 0x76, 0x65, 0x63, // ghostFilter;.vec
	0x33, 0x20, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, // 3 DeghostAnaglyp
	0x68, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, // h( vec3 lCol, ve
	0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // c3 rCol).{.vec3 
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x41, 0x6e, // color = LinearAn
	0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, // aglyph(lCol, rCo
	0x6c, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x70, 0x6f, // l);.return ( (po
	0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // w(color, Stereo_
	0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x72, 0x67, 0x62, // DeghostGamma.rgb
	0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, // )) * (mat3(Stere
	0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, // o_DeghostFilter[
	0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, // 0].xyz, Stereo_D
	0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x31, 0x5d, 0x2e, // eghostFilter[1].
	0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, // xyz, Stereo_Degh
	0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, // ostFilter[2].xyz
	0x29, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x6d, 0x61, 0x69, // )) );.}.void mai
	0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, // n().{.gl_FragCol
	0x6f, 0x72, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, // or = vec4(gather
	0x45, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x76, 0x65, 0x63, 0x32, 0x28, 0x76, 0x5f, // EyeColor(vec2(v_
	0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2e, 0x78, 0x2c, 0x20, 0x76, 0x5f, 0x74, // texcoord0.x, v_t
	0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x32, 0x2e, 0x30, // excoord0.y * 2.0
	0x29, 0x2c, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2e, 0x79, // ), v_texcoord0.y
	0x20, 0x3c, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x7d, //  < 0.5), 1.0);.}
	0x0a, 0x00,                                                                                     // ..
};
static const uint8_t fs_pp_stereo_tb_st_dx11[558] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x0d, 0x74, // FSH.Jc._.......t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x30, 0x01, 0x00, 0x00, // ex_stereo_fb0...
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // .......tex_stere
	0x6f, 0x5f, 0x66, 0x62, 0x30, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe8, 0x01, // o_fb0...........
	0x00, 0x00, 0x44, 0x58, 0x42, 0x43, 0x4d, 0xcb, 0x83, 0x7d, 0x07, 0x16, 0x09, 0xee, 0x9a, 0xaa, // ..DXBCM..}......
	0xa0, 0x7d, 0x69, 0x92, 0x63, 0x98, 0x01, 0x00, 0x00, 0x00, 0xe8, 0x01, 0x00, 0x00, 0x03, 0x00, // .}i.c...........
	0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x9c, 0x00, 0x00, 0x00, 0xd0, 0x00, 0x00, 0x00, 0x49, 0x53, // ..,...........IS
	0x47, 0x4e, 0x68, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x50, 0x00, // GNh...........P.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x5c, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, // ................
	0x00, 0x00, 0x06, 0x06, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, // ......SV_POSITIO
	0x4e, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0xab, 0xab, 0xab, 0x4f, 0x53, // N.TEXCOORD....OS
	0x47, 0x4e, 0x2c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x20, 0x00, // GN,........... .
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x00, // ......SV_TARGET.
	0xab, 0xab, 0x53, 0x48, 0x45, 0x58, 0x10, 0x01, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x44, 0x00, // ..SHEX....P...D.
	0x00, 0x00, 0x6a, 0x08, 0x00, 0x01, 0x5a, 0x00, 0x00, 0x03, 0x00, 0x60, 0x10, 0x00, 0x00, 0x00, // ..j...Z....`....
	0x00, 0x00, 0x58, 0x40, 0x00, 0x04, 0x00, 0x70, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x55, // ..X@...p......UU
	0x00, 0x00, 0x62, 0x10, 0x00, 0x03, 0x62, 0x10, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x65, 0x00, // ..b...b.......e.
	0x00, 0x03, 0xf2, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x02, 0x01, 0x00, // ... ......h.....
	0x00, 0x00, 0x31, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x10, // ..1...........*.
	0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x37, 0x00, // .......@.....?7.
	0x00, 0x09, 0x42, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, // ..B.............
	0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, // ...@.......@....
	0x80, 0x3f, 0x38, 0x00, 0x00, 0x0a, 0x32, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x96, 0x15, // .?8...2.........
	0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, // .......@.....?..
	0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0x02, 0x02, // .@........H.....
	0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, // ..CU..r.......F.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, // ......F~.......`
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, // .......@......6.
	0x00, 0x05, 0x72, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, // ..r ......F.....
	0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x82, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, // ..6.... .......@
	0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x3e, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,             // .....?>.......
};
static const uint8_t fs_pp_stereo_tb_st_spv[1098] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0d, 0x74, // FSH.Jc._.......t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x30, 0x00, 0x02, 0x00, // ex_stereo_fb0...
	0x00, 0x00, 0x00, 0x03, 0x22, 0x00, 0x1c, 0x04, 0x00, 0x00, 0x03, 0x02, 0x23, 0x07, 0x00, 0x00, // ....".......#...
	0x01, 0x00, 0x0b, 0x00, 0x08, 0x00, 0xde, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, // ................
	0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, 0x4c, // ..............GL
	0x53, 0x4c, 0x2e, 0x73, 0x74, 0x64, 0x2e, 0x34, 0x35, 0x30, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, // SL.std.450......
	0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x07, 0x00, 0x04, 0x00, // ................
	0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, // ......main......
	0x00, 0x00, 0x8d, 0x00, 0x00, 0x00, 0x10, 0x00, 0x03, 0x00, 0x04, 0x00, 0x00, 0x00, 0x07, 0x00, // ................
	0x00, 0x00, 0x03, 0x00, 0x03, 0x00, 0x05, 0x00, 0x00, 0x00, 0xf4, 0x01, 0x00, 0x00, 0x05, 0x00, // ................
	0x04, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, // ......main......
	0x08, 0x00, 0x2d, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // ..-...tex_stereo
	0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, // _fbSampler......
	0x08, 0x00, 0x30, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // ..0...tex_stereo
	0x5f, 0x66, 0x62, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, // _fbTexture......
	0x05, 0x00, 0x80, 0x00, 0x00, 0x00, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, // ......v_texcoord
	0x30, 0x00, 0x05, 0x00, 0x06, 0x00, 0x8d, 0x00, 0x00, 0x00, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, // 0.........bgfx_F
	0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x2d, 0x00, // ragData0..G...-.
	0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x2d, 0x00, // ..".......G...-.
	0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x30, 0x00, // ..!.......G...0.
	0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x30, 0x00, // ..".......G...0.
	0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x80, 0x00, // ..!.......G.....
	0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x8d, 0x00, // ..........G.....
	0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x02, 0x00, 0x02, 0x00, // ................
	0x00, 0x00, 0x21, 0x00, 0x03, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x1a, 0x00, // ..!.............
	0x02, 0x00, 0x06, 0x00, 0x00, 0x00, 0x16, 0x00, 0x03, 0x00, 0x07, 0x00, 0x00, 0x00, 0x20, 0x00, // .............. .
	0x00, 0x00, 0x19, 0x00, 0x09, 0x00, 0x08, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x07, 0x00, // ................
	0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x00, // ................
	0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x19, 0x00, 0x00, 0x00, 0x07, 0x00, // ................
	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x14, 0x00, 0x02, 0x00, 0x1b, 0x00, 0x00, 0x00, 0x20, 0x00, // .............. .
	0x04, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x3b, 0x00, // ..,...........;.
	0x04, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x2d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, // ..,...-....... .
	0x04, 0x00, 0x2f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x3b, 0x00, // ../...........;.
	0x04, 0x00, 0x2f, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x00, // ../...0.........
	0x03, 0x00, 0x42, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, // ..B.......+.....
	0x00, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, // ..U.......+.....
	0x00, 0x00, 0x56, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, // ..V......?+.....
	0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, // ..h......@+.....
	0x00, 0x00, 0x6d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x20, 0x00, 0x04, 0x00, 0x7f, 0x00, // ..m......? .....
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x7f, 0x00, // ..........;.....
	0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x8c, 0x00, // .......... .....
	0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x8c, 0x00, // ..........;.....
	0x00, 0x00, 0x8d, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x36, 0x00, 0x05, 0x00, 0x02, 0x00, // ..........6.....
	0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0xf8, 0x00, // ................
	0x02, 0x00, 0x05, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0x2e, 0x00, // ......=.........
	0x00, 0x00, 0x2d, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x08, 0x00, 0x00, 0x00, 0x31, 0x00, // ..-...=.......1.
	0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x19, 0x00, 0x00, 0x00, 0x81, 0x00, // ..0...=.........
	0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xb4, 0x00, // ......Q.........
	0x00, 0x00, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, // ..........Q.....
	0x00, 0x00, 0xb6, 0x00, 0x00, 0x00, 0x81, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x85, 0x00, // ................
	0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xb7, 0x00, 0x00, 0x00, 0xb6, 0x00, 0x00, 0x00, 0x68, 0x00, // ..............h.
	0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xba, 0x00, 0x00, 0x00, 0x81, 0x00, // ..Q.............
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xb8, 0x00, 0x05, 0x00, 0x1b, 0x00, 0x00, 0x00, 0xbb, 0x00, // ................
	0x00, 0x00, 0xba, 0x00, 0x00, 0x00, 0x6d, 0x00, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, 0x07, 0x00, // ......m.........
	0x00, 0x00, 0xcf, 0x00, 0x00, 0x00, 0xbb, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00, 0x56, 0x00, // ..........U...V.
	0x00, 0x00, 0x50, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xd0, 0x00, 0x00, 0x00, 0xb4, 0x00, // ..P.............
	0x00, 0x00, 0xb7, 0x00, 0x00, 0x00, 0xcf, 0x00, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, 0x42, 0x00, // ..........V...B.
	0x00, 0x00, 0xda, 0x00, 0x00, 0x00, 0x31, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x58, 0x00, // ......1.......X.
	0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xdd, 0x00, 0x00, 0x00, 0xda, 0x00, 0x00, 0x00, 0xd0, 0x00, // ................
	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, // ......U...Q.....
	0x00, 0x00, 0xbd, 0x00, 0x00, 0x00, 0xdd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, // ..............Q.
	0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xbe, 0x00, 0x00, 0x00, 0xdd, 0x00, 0x00, 0x00, 0x01, 0x00, // ................
	0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xbf, 0x00, 0x00, 0x00, 0xdd, 0x00, // ..Q.............
	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x50, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xc0, 0x00, // ......P.........
	0x00, 0x00, 0xbd, 0x00, 0x00, 0x00, 0xbe, 0x00, 0x00, 0x00, 0xbf, 0x00, 0x00, 0x00, 0x56, 0x00, // ..............V.
	0x00, 0x00, 0x3e, 0x00, 0x03, 0x00, 0x8d, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0xfd, 0x00, // ..>.............
	0x01, 0x00, 0x38, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,                                     // ..8.......
};
static const bgfx::EmbeddedShader fs_pp_stereo_tb_st = BGFX_EMBEDDED_SHADER(fs_pp_stereo_tb_st);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Build of fragment shader from fs_pp_stereo.sc to fs_pp_stereo_int_st with options: INT STEREO
static const uint8_t fs_pp_stereo_int_st_mtl[855] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x14, 0x74, // FSH.Jc._.......t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, // ex_stereo_fbSamp
	0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x74, 0x65, // ler...........te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x54, 0x65, 0x78, 0x74, 0x75, // x_stereo_fbTextu
	0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x74, 0x65, 0x78, // re...........tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, // _stereo_depthSam
	0x70, 0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x74, // pler...........t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x54, // ex_stereo_depthT
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, // exture..........
	0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x10, 0x00, // .tex_stereo_fb..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa7, 0x02, 0x00, 0x00, 0x23, 0x69, 0x6e, 0x63, // ............#inc
	0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x64, 0x6c, // lude <metal_stdl
	0x69, 0x62, 0x3e, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x73, 0x69, // ib>.#include <si
	0x6d, 0x64, 0x2f, 0x73, 0x69, 0x6d, 0x64, 0x2e, 0x68, 0x3e, 0x0a, 0x0a, 0x75, 0x73, 0x69, 0x6e, // md/simd.h>..usin
	0x67, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x6d, 0x65, 0x74, 0x61, // g namespace meta
	0x6c, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, // l;..struct xlatM
	0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, // tlMain_out.{.   
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, //  float4 bgfx_Fra
	0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x20, 0x5b, 0x5b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x30, // gData0 [[color(0
	0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, // )]];.};..struct 
	0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x0a, 0x7b, // xlatMtlMain_in.{
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, // .    float2 v_te
	0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x5b, 0x5b, 0x75, 0x73, 0x65, 0x72, 0x28, 0x6c, // xcoord0 [[user(l
	0x6f, 0x63, 0x6e, 0x31, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x66, 0x72, 0x61, // ocn1)]];.};..fra
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, // gment xlatMtlMai
	0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, // n_out xlatMtlMai
	0x6e, 0x28, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, // n(xlatMtlMain_in
	0x20, 0x69, 0x6e, 0x20, 0x5b, 0x5b, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x5d, 0x5d, //  in [[stage_in]]
	0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x61, // , texture2d_arra
	0x79, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3e, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, // y<float> tex_ste
	0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // reo_fb [[texture
	0x28, 0x30, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x74, // (0)]], sampler t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, // ex_stereo_fbSamp
	0x6c, 0x65, 0x72, 0x20, 0x5b, 0x5b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x30, 0x29, // ler [[sampler(0)
	0x5d, 0x5d, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x67, 0x6c, 0x5f, 0x46, 0x72, // ]], float4 gl_Fr
	0x61, 0x67, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x5b, 0x5b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, // agCoord [[positi
	0x6f, 0x6e, 0x5d, 0x5d, 0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x78, 0x6c, 0x61, 0x74, // on]]).{.    xlat
	0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x6f, 0x75, 0x74, 0x20, // MtlMain_out out 
	0x3d, 0x20, 0x7b, 0x7d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, // = {};.    float3
	0x20, 0x5f, 0x31, 0x39, 0x38, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x69, //  _198 = float3(i
	0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2c, 0x20, 0x28, // n.v_texcoord0, (
	0x66, 0x72, 0x61, 0x63, 0x74, 0x28, 0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6f, // fract(gl_FragCoo
	0x72, 0x64, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x20, 0x3c, 0x20, 0x30, 0x2e, // rd.y * 0.5) < 0.
	0x35, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x30, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, // 5) ? 0.0 : 1.0);
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x6f, 0x75, 0x74, 0x2e, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, // .    out.bgfx_Fr
	0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, // agData0 = float4
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2e, 0x73, // (tex_stereo_fb.s
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // ample(tex_stereo
	0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x31, 0x39, 0x38, // _fbSampler, _198
	0x2e, 0x78, 0x79, 0x2c, 0x20, 0x75, 0x69, 0x6e, 0x74, 0x28, 0x72, 0x69, 0x6e, 0x74, 0x28, 0x5f, // .xy, uint(rint(_
	0x31, 0x39, 0x38, 0x2e, 0x7a, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, // 198.z)), level(0
	0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, // .0)).xyz, 1.0);.
	0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6f, 0x75, 0x74, 0x3b, 0x0a, //     return out;.
	0x7d, 0x0a, 0x0a, 0x00, 0x00, 0x40, 0x00,                                                       // }....@.
};
static const uint8_t fs_pp_stereo_int_st_essl[8552] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x21, // FSH.Jc._......U!
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x33, 0x32, 0x30, 0x20, 0x65, // ..#version 320 e
	0x73, 0x0a, 0x23, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x47, 0x4c, 0x5f, // s.#extension GL_
	0x45, 0x58, 0x54, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, // EXT_shader_textu
	0x72, 0x65, 0x5f, 0x6c, 0x6f, 0x64, 0x20, 0x3a, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x0a, // re_lod : enable.
	0x23, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x47, 0x4c, 0x5f, 0x45, 0x58, // #extension GL_EX
	0x54, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x20, // T_texture_array 
	0x3a, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, // : enable.#define
	0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, //  attribute in.#d
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, // efine varying in
	0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, // .precision highp
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3b, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, //  float;.precisio
	0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x69, 0x6e, 0x74, 0x3b, 0x0a, 0x70, 0x72, 0x65, // n highp int;.pre
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x73, 0x61, 0x6d, // cision highp sam
	0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x3b, 0x0a, 0x23, 0x64, 0x65, // pler2DArray;.#de
	0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x4c, 0x6f, // fine texture2DLo
	0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, // d      texture2D
	0x4c, 0x6f, 0x64, 0x45, 0x58, 0x54, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, // LodEXT.#define t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, 0x20, 0x20, // exture2DGrad    
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x47, 0x72, 0x61, 0x64, 0x45, 0x58, //  texture2DGradEX
	0x54, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // T.#define textur
	0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, // e2DProjLod  text
	0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x4c, 0x6f, 0x64, 0x45, 0x58, 0x54, 0x0a, // ure2DProjLodEXT.
	0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, // #define texture2
	0x44, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // DProjGrad textur
	0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, 0x45, 0x58, 0x54, 0x0a, 0x23, // e2DProjGradEXT.#
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, // define textureCu
	0x62, 0x65, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // beLod    texture
	0x43, 0x75, 0x62, 0x65, 0x4c, 0x6f, 0x64, 0x45, 0x58, 0x54, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, // CubeLodEXT.#defi
	0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x47, 0x72, // ne textureCubeGr
	0x61, 0x64, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, // ad   textureCube
	0x47, 0x72, 0x61, 0x64, 0x45, 0x58, 0x54, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, // GradEXT.#define 
	0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // shadow2D(_sample
	0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, // r, _coord) textu
	0x72, 0x65, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, // re(_sampler, _co
	0x6f, 0x72, 0x64, 0x29, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x73, 0x68, 0x61, // ord).#define sha
	0x64, 0x6f, 0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, // dow2DProj(_sampl
	0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x74, 0x65, 0x78, 0x74, // er, _coord) text
	0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // ureProj(_sampler
	0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x0a, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x65, // , _coord).out me
	0x64, 0x69, 0x75, 0x6d, 0x70, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, // diump vec4 bgfx_
	0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, // FragColor;.varyi
	0x6e, 0x67, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x5f, 0x65, 0x79, 0x65, 0x3b, 0x0a, // ng float v_eye;.
	0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x5f, 0x74, // varying vec2 v_t
	0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, // excoord0;.vec3 i
	0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, // nstMul(vec3 _vec
	0x2c, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, // , mat3 _mtx) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, // eturn ( (_vec) *
	0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, //  (_mtx) ); }.vec
	0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, // 3 instMul(mat3 _
	0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, // mtx, vec3 _vec) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, // { return ( (_mtx
	0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, // ) * (_vec) ); }.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, // vec4 instMul(vec
	0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, // 4 _vec, mat4 _mt
	0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, // x) { return ( (_
	0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, // vec) * (_mtx) );
	0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, //  }.vec4 instMul(
	0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // mat4 _mtx, vec4 
	0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // _vec) { return (
	0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, //  (_mtx) * (_vec)
	0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, 0x70, 0x28, //  ); }.float rcp(
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // float _a) { retu
	0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, // rn 1.0/_a; }.vec
	0x32, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, // 2 rcp(vec2 _a) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, //  return vec2(1.0
	0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x70, // )/_a; }.vec3 rcp
	0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // (vec3 _a) { retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, // rn vec3(1.0)/_a;
	0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x34, //  }.vec4 rcp(vec4
	0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, //  _a) { return ve
	0x63, 0x34, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, // c4(1.0)/_a; }.ve
	0x63, 0x32, 0x20, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, // c2 vec2_splat(fl
	0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // oat _x) { return
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, //  vec2(_x, _x); }
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, // .vec3 vec3_splat
	0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // (float _x) { ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, // urn vec3(_x, _x,
	0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, 0x65, 0x63, //  _x); }.vec4 vec
	0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, // 4_splat(float _x
	0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, // ) { return vec4(
	0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, // _x, _x, _x, _x);
	0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, //  }.uvec2 uvec2_s
	0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, // plat(uint _x) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, // return uvec2(_x,
	0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, 0x75, 0x76, //  _x); }.uvec3 uv
	0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, // ec3_splat(uint _
	0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, // x) { return uvec
	0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, // 3(_x, _x, _x); }
	0x0a, 0x75, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, // .uvec4 uvec4_spl
	0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // at(uint _x) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, // turn uvec4(_x, _
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x6d, 0x61, // x, _x, _x); }.ma
	0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, // t4 mtxFromRows(v
	0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, // ec4 _0, vec4 _1,
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, //  vec4 _2, vec4 _
	0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, // 3).{.return tran
	0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, // spose(mat4(_0, _
	0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // 1, _2, _3) );.}.
	0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, // mat4 mtxFromCols
	0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, // (vec4 _0, vec4 _
	0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // 1, vec4 _2, vec4
	0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, //  _3).{.return ma
	0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, // t4(_0, _1, _2, _
	0x33, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, // 3);.}.mat3 mtxFr
	0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, // omRows(vec3 _0, 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, // vec3 _1, vec3 _2
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, // ).{.return trans
	0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, // pose(mat3(_0, _1
	0x2c, 0x20, 0x5f, 0x32, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, // , _2) );.}.mat3 
	0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, // mtxFromCols(vec3
	0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, //  _0, vec3 _1, ve
	0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // c3 _2).{.return 
	0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, // mat3(_0, _1, _2)
	0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, // ;.}.uniform vec4
	0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, //  u_viewRect;.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, // form vec4 u_view
	0x54, 0x65, 0x78, 0x65, 0x6c, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, // Texel;.uniform m
	0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // at4 u_view;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, // orm mat4 u_invVi
	0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, // ew;.uniform mat4
	0x20, 0x75, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, //  u_proj;.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, 0x6a, 0x3b, //  mat4 u_invProj;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, // .uniform mat4 u_
	0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // viewProj;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, // m mat4 u_invView
	0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, // Proj;.uniform ma
	0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, 0x3b, 0x0a, // t4 u_model[32];.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, // uniform mat4 u_m
	0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // odelView;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, // m mat4 u_modelVi
	0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // ewProj;.uniform 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x66, 0x34, // vec4 u_alphaRef4
	0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x66, 0x6c, 0x6f, // ;.float sqr( flo
	0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // at v).{.return v
	0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, // *v;.}.vec2 sqr( 
	0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // vec2 v).{.return
	0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x73, 0x71, 0x72, //  v*v;.}.vec3 sqr
	0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, // ( vec3 v).{.retu
	0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6d, // rn v*v;.}.vec3 m
	0x75, 0x6c, 0x5f, 0x77, 0x31, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x2c, 0x20, 0x6d, // ul_w1( vec3 v, m
	0x61, 0x74, 0x34, 0x20, 0x6d, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // at4 m).{.return 
	0x76, 0x2e, 0x78, 0x2a, 0x6d, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, // v.x*m[0].xyz + (
	0x76, 0x2e, 0x79, 0x2a, 0x6d, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, // v.y*m[1].xyz + (
	0x76, 0x2e, 0x7a, 0x2a, 0x6d, 0x5b, 0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x6d, // v.z*m[2].xyz + m
	0x5b, 0x33, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // [3].xyz));.}.flo
	0x61, 0x74, 0x20, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, // at acos_approx_d
	0x69, 0x76, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, // ivPI( float v).{
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, // .float x = abs(v
	0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, // );.if(1. - x <= 
	0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, // 0.00006103515625
	0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, // ).return (v >= 0
	0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x3b, 0x0a, 0x66, 0x6c, // .) ? 0. : 1.;.fl
	0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, // oat res = ((-0.1
	0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, // 55972/3.14159265
	0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, // 3589793238462643
	0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, // 3832795) * x + (
	0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, // 1.56467/3.141592
	0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, // 6535897932384626
	0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, // 433832795) ) * s
	0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, // qrt(1. - x);.ret
	0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, // urn (v >= 0.) ? 
	0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, // res : 1. - res;.
	0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, // }.float atan2_ap
	0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, // prox_div2PI( flo
	0x61, 0x74, 0x20, 0x79, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x29, 0x0a, 0x7b, // at y, float x).{
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3d, 0x20, 0x61, // .float abs_y = a
	0x62, 0x73, 0x28, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, // bs(y);.float abs
	0x5f, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x78, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, // _x = abs(x);.if(
	0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, // abs_x <= 0.00006
	0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x20, 0x26, 0x26, 0x20, 0x61, 0x62, 0x73, // 103515625 && abs
	0x5f, 0x79, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, // _y <= 0.00006103
	0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x30, // 515625).return 0
	0x2e, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x61, 0x62, // .;.float r = (ab
	0x73, 0x5f, 0x78, 0x20, 0x2d, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x20, 0x2f, 0x20, 0x28, // s_x - abs_y) / (
	0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2b, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x3b, 0x0a, // abs_x + abs_y);.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3d, 0x20, 0x28, 0x28, // float angle = ((
	0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x28, 0x33, 0x2e, 0x2f, 0x38, 0x2e, // x < 0.) ? (3./8.
	0x29, 0x20, 0x3a, 0x20, 0x28, 0x31, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x29, 0x0a, 0x2b, 0x20, 0x28, // ) : (1./8.)).+ (
	0x30, 0x2e, 0x32, 0x31, 0x31, 0x38, 0x36, 0x38, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, // 0.211868 /(2.*3.
	0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, // 1415926535897932
	0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, // 384626433832795)
	0x20, 0x2a, 0x20, 0x72, 0x20, 0x2a, 0x20, 0x72, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x39, 0x38, 0x37, //  * r * r - 0.987
	0x33, 0x30, 0x35, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, // 305 /(2.*3.14159
	0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, // 2653589793238462
	0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, // 6433832795)) * (
	0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x72, 0x20, 0x3a, 0x20, // (x < 0.) ? -r : 
	0x72, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x79, 0x20, 0x3c, 0x20, // r);.return (y < 
	0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3a, 0x20, 0x61, // 0.) ? -angle : a
	0x6e, 0x67, 0x6c, 0x65, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x73, // ngle;.}.float as
	0x69, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, // in_approx_divPI(
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, //  float v).{.floa
	0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, // t x = abs(v);.if
	0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, // (1. - x <= 0.000
	0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, // 06103515625).ret
	0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, // urn (v >= 0.) ? 
	0x30, 0x2e, 0x35, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // 0.5 : -0.5;.floa
	0x74, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, // t res = ((-0.155
	0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, // 972/3.1415926535
	0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, // 8979323846264338
	0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, // 32795) * x + (1.
	0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, // 56467/3.14159265
	0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, // 3589793238462643
	0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, // 3832795) ) * sqr
	0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // t(1. - x);.retur
	0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, // n (v >= 0.) ? 0.
	0x35, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x20, 0x2b, // 5 - res : -0.5 +
	0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x61, 0x79, //  res;.}.vec2 ray
	0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x75, // _to_equirectangu
	0x6c, 0x61, 0x72, 0x5f, 0x75, 0x76, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x61, 0x79, // lar_uv( vec3 ray
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // ).{.return vec2(
	0x0a, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, // .0.5 + atan2_app
	0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x79, // rox_div2PI(ray.y
	0x2c, 0x20, 0x72, 0x61, 0x79, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, // , ray.x),.acos_a
	0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, // pprox_divPI(ray.
	0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, // z));.}.float Inv
	0x73, 0x52, 0x47, 0x42, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // sRGB( float colo
	0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, // r).{.if (color <
	0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, 0x34, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // = 0.04045).retur
	0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, // n color * (1.0/1
	0x32, 0x2e, 0x39, 0x32, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, // 2.92);.else.retu
	0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, // rn pow(color * (
	0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, // 1.0/1.055) + (0.
	0x30, 0x35, 0x35, 0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x29, // 055/1.055), 2.4)
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x52, 0x65, 0x63, // ;.}.float InvRec
	0x37, 0x30, 0x39, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // 709( float color
	0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, // ).{.if (color <=
	0x20, 0x30, 0x2e, 0x30, 0x38, 0x31, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, //  0.081).return c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x34, 0x2e, 0x35, 0x29, // olor * (1.0/4.5)
	0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, // ;.else.return po
	0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, // w(color * (1.0/1
	0x2e, 0x30, 0x39, 0x39, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x2f, 0x31, // .099) + (0.099/1
	0x2e, 0x30, 0x39, 0x39, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x30, 0x2e, 0x34, 0x35, 0x29, // .099), 1.0/0.45)
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, // ;.}.float InvGam
	0x6d, 0x61, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, // ma( float color)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, // .{.return InvsRG
	0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, // B(color);.}.vec3
	0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, //  InvGamma( vec3 
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // color).{.return 
	0x76, 0x65, 0x63, 0x33, 0x28, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, // vec3(InvGamma(co
	0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, // lor.x),InvGamma(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, // color.y),InvGamm
	0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // a(color.z));.}.v
	0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, // ec3 InvToneMap( 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, // vec3 color).{.fl
	0x6f, 0x61, 0x74, 0x20, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x30, 0x2e, // oat inv_2bh = 0.
	0x35, 0x2f, 0x30, 0x2e, 0x32, 0x35, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x68, // 5/0.25;.float bh
	0x20, 0x3d, 0x20, 0x34, 0x2e, 0x30, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2d, 0x20, 0x32, 0x2e, //  = 4.0*0.25 - 2.
	0x30, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // 0;.return (color
	0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2b, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x63, 0x6f, //  - 1.0 + sqrt(co
	0x6c, 0x6f, 0x72, 0x2a, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x20, 0x62, 0x68, 0x29, // lor*(color + bh)
	0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x2a, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, //  + 1.0))*inv_2bh
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x20, // ;.}.float sRGB( 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // float f).{.float
	0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, //  s;.if (f <= 0.0
	0x30, 0x33, 0x31, 0x33, 0x30, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, // 031308).s = 12.9
	0x32, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, // 2 * f;.else.s = 
	0x31, 0x2e, 0x30, 0x35, 0x35, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x31, // 1.055 * pow(f, 1
	0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x34, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x3b, // .0/2.4) - 0.055;
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // .return s;.}.flo
	0x61, 0x74, 0x20, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // at Rec709( float
	0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, //  f).{.float s;.i
	0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, 0x29, 0x0a, 0x73, // f (f <= 0.018).s
	0x20, 0x3d, 0x20, 0x34, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, //  = 4.5 * f;.else
	0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, // .s = 1.099 * pow
	0x28, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x39, // (f, 0.45) - 0.09
	0x39, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // 9;.return s;.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x66, 0x6c, // loat FBGamma( fl
	0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // oat color).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, // urn sRGB(color);
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, // .}.vec2 FBGamma(
	0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, //  vec2 color).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, // eturn vec2(FBGam
	0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, // ma(color.x),FBGa
	0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, // mma(color.y));.}
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, // .vec3 FBGamma( v
	0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // ec3 color).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, // urn vec3(FBGamma
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, // (color.x),FBGamm
	0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, // a(color.y),FBGam
	0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // ma(color.z));.}.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x32, 0x32, 0x28, 0x20, // vec3 FBGamma22( 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // vec3 color).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, // turn vec3(pow(co
	0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, // lor.x, 1.0/2.2),
	0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, 0x30, // pow(color.y, 1.0
	0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, // /2.2),pow(color.
	0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // z, 1.0/2.2));.}.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, // float FBToneMap(
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, //  float l).{.retu
	0x72, 0x6e, 0x20, 0x6c, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, // rn l * ((l*0.25 
	0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, // + 1.0) / (l + 1.
	0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x54, 0x6f, // 0));.}.vec2 FBTo
	0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // neMap( vec2 colo
	0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, // r).{.float l = d
	0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, // ot(color,vec2(0.
	0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, // 176204+0.0108109
	0x2a, 0x30, 0x2e, 0x35, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2b, 0x30, 0x2e, // *0.5,0.812985+0.
	0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x3b, 0x0a, 0x72, // 0108109*0.5));.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, // eturn color * ((
	0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, // l*0.25 + 1.0) / 
	0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // (l + 1.0));.}.ve
	0x63, 0x33, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, // c3 FBToneMap( ve
	0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // c3 color).{.floa
	0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, // t l = dot(color,
	0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2c, 0x30, 0x2e, // vec3(0.176204,0.
	0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2c, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, // 812985,0.0108109
	0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // ));.return color
	0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, //  * ((l*0.25 + 1.
	0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, // 0) / (l + 1.0));
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, // .}.vec4 Additive
	0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, // ( vec4 cBase, ve
	0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // c4 cBlend, float
	0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, //  percent).{.retu
	0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2b, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // rn cBase + cBlen
	0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // d*percent;.}.vec
	0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // 3 Screen ( vec3 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, // cBase, vec3 cBle
	0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, // nd).{.return 1.0
	0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, //  - (1.0 - cBase)
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, //  * (1.0 - cBlend
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, // );.}.vec4 Screen
	0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, //  ( vec4 cBase, v
	0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // ec4 cBlend).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, // turn 1.0 - (1.0 
	0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, // - cBase) * (1.0 
	0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // - cBlend);.}.vec
	0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, // 3 ScreenHDR ( ve
	0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, // c3 cBase, vec3 c
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // Blend).{.return 
	0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, // max(1.0 - (1.0 -
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, //  cBase) * (1.0 -
	0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, //  cBlend), vec3(0
	0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // .,0.,0.));.}.vec
	0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, // 4 ScreenHDR ( ve
	0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, // c4 cBase, vec4 c
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // Blend).{.return 
	0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, // max(1.0 - (1.0 -
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, //  cBase) * (1.0 -
	0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, //  cBlend), vec4(0
	0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // .,0.,0.,0.));.}.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x20, 0x28, 0x20, // vec4 Multiply ( 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // vec4 cBase, vec4
	0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, //  cBlend, float p
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // ercent).{.return
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2a, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, //  cBase * cBlend*
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, // percent;.}.vec4 
	0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, // Overlay ( vec4 c
	0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // Base, vec4 cBlen
	0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, // d).{.vec4 cNew =
	0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, //  step(0.5, cBase
	0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, // );.cNew = mix(cB
	0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, // ase*cBlend*2.0, 
	0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, // 1.0-2.0*(1.0-cBa
	0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, // se)*(1.0-cBlend)
	0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // , cNew);.return 
	0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, // cNew;.}.vec4 Ove
	0x72, 0x6c, 0x61, 0x79, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, // rlayHDR ( vec4 c
	0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // Base, vec4 cBlen
	0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, // d).{.vec4 cNew =
	0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, //  step(0.5, cBase
	0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x6d, 0x69, // );.cNew = max(mi
	0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, // x(cBase*cBlend*2
	0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, // .0, 1.0-2.0*(1.0
	0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, // -cBase)*(1.0-cBl
	0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, // end), cNew), vec
	0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, // 4(0.,0.,0.,0.));
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, // .return cNew;.}.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x73, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, // vec3 cos_hemisph
	0x65, 0x72, 0x65, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, // ere_sample( vec2
	0x20, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x68, 0x69, 0x20, //  t).{.float phi 
	0x3d, 0x20, 0x74, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x28, 0x32, 0x2e, 0x30, 0x2a, 0x33, 0x2e, 0x31, // = t.y * (2.0*3.1
	0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, // 4159265358979323
	0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x3b, // 84626433832795);
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, // .float cosTheta 
	0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x74, 0x2e, 0x78, // = sqrt(1.0 - t.x
	0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, // );.float sinThet
	0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, // a = sqrt(t.x);.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x70, 0x2c, 0x63, 0x70, 0x3b, 0x0a, 0x7b, 0x73, 0x70, 0x3d, // loat sp,cp;.{sp=
	0x73, 0x69, 0x6e, 0x28, 0x70, 0x68, 0x69, 0x29, 0x3b, 0x63, 0x70, 0x3d, 0x63, 0x6f, 0x73, 0x28, // sin(phi);cp=cos(
	0x70, 0x68, 0x69, 0x29, 0x3b, 0x7d, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // phi);};.return v
	0x65, 0x63, 0x33, 0x28, 0x63, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, // ec3(cp * sinThet
	0x61, 0x2c, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x73, 0x70, 0x20, // a, cosTheta, sp 
	0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // * sinTheta);.}.v
	0x65, 0x63, 0x33, 0x20, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x76, 0x65, // ec3 rotate_to_ve
	0x63, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, // ctor_upper( vec3
	0x20, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, //  vec, vec3 norma
	0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, // l).{.if(normal.y
	0x20, 0x3e, 0x20, 0x2d, 0x30, 0x2e, 0x39, 0x39, 0x39, 0x39, 0x39, 0x29, 0x0a, 0x7b, 0x0a, 0x66, //  > -0.99999).{.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x28, 0x31, 0x2e, // loat h = 1.0/(1.
	0x30, 0x2b, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, // 0+normal.y);.flo
	0x61, 0x74, 0x20, 0x68, 0x7a, 0x20, 0x3d, 0x20, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, // at hz = h*normal
	0x2e, 0x7a, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x3d, 0x20, // .z;.float hzx = 
	0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x3b, 0x0a, 0x72, 0x65, 0x74, // hz*normal.x;.ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, // urn vec3(.vec.x 
	0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x7a, 0x2a, 0x6e, // * (normal.y+hz*n
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x29, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x79, // ormal.z) + vec.y
	0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, //  * normal.x - ve
	0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, // c.z * hzx,.vec.y
	0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x2d, 0x20, 0x76, 0x65, //  * normal.y - ve
	0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, // c.x * normal.x -
	0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, //  vec.z * normal.
	0x7a, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, // z,.vec.y * norma
	0x6c, 0x2e, 0x7a, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x68, 0x7a, // l.z - vec.x * hz
	0x78, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, // x + vec.z * (nor
	0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, // mal.y+h*normal.x
	0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, // *normal.x));.}.e
	0x6c, 0x73, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x2d, 0x76, 0x65, 0x63, 0x3b, // lse return -vec;
	0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // .}.uniform vec4 
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x53, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, // Stereo_Saturatio
	0x6e, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // n;.uniform vec4 
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, // Stereo_MS_ZPD_YA
	0x78, 0x69, 0x73, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, // xis;.uniform sam
	0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x20, 0x74, 0x65, 0x78, 0x5f, // pler2DArray tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, // stereo_fb;.unifo
	0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, // rm sampler2DArra
	0x79, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, // y tex_stereo_dep
	0x74, 0x68, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, // th;.uniform vec4
	0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, 0x76, 0x65, 0x63, //  w_h_height;.vec
	0x33, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, // 3 gatherEyeColor
	0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x69, 0x73, // (vec2 u, bool is
	0x4c, 0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, // Left).{.return t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x6f, 0x64, // exture2DArrayLod
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, // (tex_stereo_fb, 
	0x76, 0x65, 0x63, 0x33, 0x28, 0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, 0x20, 0x69, // vec3(u.x, u.y, i
	0x73, 0x4c, 0x65, 0x66, 0x74, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x30, 0x20, 0x3a, 0x20, 0x31, 0x2e, // sLeft ? 0.0 : 1.
	0x30, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // 0), 0.).rgb;.}.v
	0x6f, 0x69, 0x64, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x69, // oid gatherLeftRi
	0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, // ghtColors(vec2 u
	0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x63, 0x6f, 0x6c, 0x2c, // , out vec3 lcol,
	0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x6f, 0x6c, 0x29, 0x0a, //  out vec3 rcol).
	0x7b, 0x0a, 0x6c, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // {.lcol = texture
	0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, // 2DArrayLod(tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x75, // tereo_fb, vec3(u
	0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2c, 0x20, 0x30, 0x2e, // .x, u.y, 0.), 0.
	0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x72, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, // ).xyz;.rcol = te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x6f, 0x64, 0x28, // xture2DArrayLod(
	0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x76, // tex_stereo_fb, v
	0x65, 0x63, 0x33, 0x28, 0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, // ec3(u.x, u.y, 1.
	0x29, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, // ), 0.).xyz;.}.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // iform mat4 Stere
	0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, // o_LeftMat;.unifo
	0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, // rm mat4 Stereo_R
	0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // ightMat;.uniform
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, //  vec4 Stereo_Lef
	0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, // tLuminance_Gamma
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, // ;.uniform vec4 S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, // tereo_RightLumin
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x3b, 0x0a, 0x76, // ance_DynDesat;.v
	0x6f, 0x69, 0x64, 0x20, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x65, 0x73, 0x61, 0x74, // oid DynamicDesat
	0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, // Anaglyph( vec3 l
	0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // Col, vec3 rCol, 
	0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, // out vec3 lDesatC
	0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x44, 0x65, // ol, out vec3 rDe
	0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // satCol).{.float 
	0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, // left2LeftLum = d
	0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // ot(lCol, Stereo_
	0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, // LeftLuminance_Ga
	0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // mma.xyz);.float 
	0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, // left2RightLum = 
	0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // dot(lCol, Stereo
	0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, // _RightLuminance_
	0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, // DynDesat.xyz);.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, // loat right2LeftL
	0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, // um = dot(rCol, S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, // tereo_LeftLumina
	0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, // nce_Gamma.xyz);.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, // float right2Righ
	0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, // tLum = dot(rCol,
	0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, //  Stereo_RightLum
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, // inance_DynDesat.
	0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, // xyz);.float left
	0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, // Lum = left2LeftL
	0x75, 0x6d, 0x20, 0x2b, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, // um + left2RightL
	0x75, 0x6d, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, // um;.float rightL
	0x75, 0x6d, 0x20, 0x3d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, // um = right2LeftL
	0x75, 0x6d, 0x20, 0x2b, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, // um + right2Right
	0x4c, 0x75, 0x6d, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, // Lum;.float leftD
	0x65, 0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, // esat = Stereo_Ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, // ghtLuminance_Dyn
	0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x6c, // Desat.w * abs((l
	0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x6c, 0x65, // eft2LeftLum - le
	0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, // ft2RightLum) / (
	0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, // leftLum + 0.0001
	0x29, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, // ));.float rightD
	0x65, 0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, // esat = Stereo_Ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, // ghtLuminance_Dyn
	0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x72, // Desat.w * abs((r
	0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x72, // ight2LeftLum - r
	0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, // ight2RightLum) /
	0x20, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, //  (rightLum + 0.0
	0x30, 0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, // 001));.lDesatCol
	0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, //  = mix(lCol, vec
	0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x29, // 3_splat(leftLum)
	0x2c, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x72, 0x44, // , leftDesat);.rD
	0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x72, 0x43, // esatCol = mix(rC
	0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x72, // ol, vec3_splat(r
	0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, // ightLum), rightD
	0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x4c, 0x69, // esat);.}.vec3 Li
	0x6e, 0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, // nearAnaglyph( ve
	0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, // c3 lCol, vec3 rC
	0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // ol).{.vec3 color
	0x20, 0x3d, 0x20, 0x28, 0x28, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x6c, 0x43, 0x6f, 0x6c, //  = (( (vec4(lCol
	0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // , 1.)) * (Stereo
	0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x20, // _LeftMat) ) + ( 
	0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, // (vec4(rCol, 1.))
	0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, //  * (Stereo_Right
	0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x72, 0x65, 0x74, // Mat) )).rgb;.ret
	0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, // urn color;.}.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // form vec4 Stereo
	0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, // _DeghostGamma;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, // niform mat4 Ster
	0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, // eo_DeghostFilter
	0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x6e, // ;.vec3 DeghostAn
	0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, // aglyph( vec3 lCo
	0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, // l, vec3 rCol).{.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, 0x6e, // vec3 color = Lin
	0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, // earAnaglyph(lCol
	0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // , rCol);.return 
	0x28, 0x20, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x53, 0x74, // ( (pow(color, St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, // ereo_DeghostGamm
	0x61, 0x2e, 0x72, 0x67, 0x62, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, // a.rgb)) * (mat3(
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, // Stereo_DeghostFi
	0x6c, 0x74, 0x65, 0x72, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, // lter[0].xyz, Ste
	0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, // reo_DeghostFilte
	0x72, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // r[1].xyz, Stereo
	0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x32, // _DeghostFilter[2
	0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, // ].xyz)) );.}.voi
	0x64, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x62, 0x67, 0x66, 0x78, 0x5f, // d main().{.bgfx_
	0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, // FragColor = vec4
	0x28, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x28, // (gatherEyeColor(
	0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2c, 0x20, 0x66, 0x72, 0x61, // v_texcoord0, fra
	0x63, 0x74, 0x28, 0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x2e, // ct(gl_FragCoord.
	0x79, 0x2a, 0x30, 0x2e, 0x35, 0x29, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x2c, 0x20, 0x31, // y*0.5) < 0.5), 1
	0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x00,                                                 // .0);.}..
};
static const uint8_t fs_pp_stereo_int_st_glsl[8577] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6e, 0x21, // FSH.Jc._......n!
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x34, 0x34, 0x30, 0x0a, 0x23, // ..#version 440.#
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x47, 0x4c, 0x5f, 0x45, 0x58, 0x54, // extension GL_EXT
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x20, 0x3a, // _texture_array :
	0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x0a, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, //  enable.out vec4
	0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, //  bgfx_FragColor;
	0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, // .#define gl_Frag
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, // Color bgfx_FragC
	0x6f, 0x6c, 0x6f, 0x72, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, // olor.#define tex
	0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ture2D          
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, // texture.#define 
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, // texture2DLod    
	0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, //    textureLod.#d
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x47, // efine texture2DG
	0x72, 0x61, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // rad      texture
	0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, // Grad.#define tex
	0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, // ture2DProjLod   
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x4c, 0x6f, 0x64, 0x0a, 0x23, // textureProjLod.#
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, // define texture2D
	0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // ProjGrad  textur
	0x65, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, // eProjGrad.#defin
	0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x4c, 0x6f, 0x64, // e textureCubeLod
	0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x0a, //      textureLod.
	0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, // #define textureC
	0x75, 0x62, 0x65, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, // ubeGrad    textu
	0x72, 0x65, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, // reGrad.#define t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x33, 0x44, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // exture3D        
	0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, //   texture.#defin
	0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x4c, 0x6f, 0x64, 0x4f, 0x66, // e texture2DLodOf
	0x66, 0x73, 0x65, 0x74, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x4f, // fset textureLodO
	0x66, 0x66, 0x73, 0x65, 0x74, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x61, 0x74, // ffset.#define at
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, // tribute in.#defi
	0x6e, 0x65, 0x20, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, // ne varying in.#d
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x62, 0x67, 0x66, 0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, // efine bgfxShadow
	0x32, 0x44, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, // 2D(_sampler, _co
	0x6f, 0x72, 0x64, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, // ord)     vec4_sp
	0x6c, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x5f, 0x73, 0x61, 0x6d, // lat(texture(_sam
	0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x29, 0x0a, // pler, _coord) ).
	0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x62, 0x67, 0x66, 0x78, 0x53, 0x68, 0x61, 0x64, // #define bgfxShad
	0x6f, 0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // ow2DProj(_sample
	0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, // r, _coord) vec4_
	0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, // splat(texturePro
	0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, // j(_sampler, _coo
	0x72, 0x64, 0x29, 0x20, 0x29, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x66, 0x6c, // rd) ).varying fl
	0x6f, 0x61, 0x74, 0x20, 0x76, 0x5f, 0x65, 0x79, 0x65, 0x3b, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, // oat v_eye;.varyi
	0x6e, 0x67, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, // ng vec2 v_texcoo
	0x72, 0x64, 0x30, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, // rd0;.vec3 instMu
	0x6c, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, // l(vec3 _vec, mat
	0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // 3 _mtx) { return
	0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, //  ( (_vec) * (_mt
	0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, // x) ); }.vec3 ins
	0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, // tMul(mat3 _mtx, 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // vec3 _vec) { ret
	0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, // urn ( (_mtx) * (
	0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, // _vec) ); }.vec4 
	0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, // instMul(vec4 _ve
	0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, // c, mat4 _mtx) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, // return ( (_vec) 
	0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, // * (_mtx) ); }.ve
	0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x20, // c4 instMul(mat4 
	0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, // _mtx, vec4 _vec)
	0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, //  { return ( (_mt
	0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, // x) * (_vec) ); }
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, 0x70, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, // .float rcp(float
	0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, //  _a) { return 1.
	0x30, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x63, 0x70, // 0/_a; }.vec2 rcp
	0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // (vec2 _a) { retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, // rn vec2(1.0)/_a;
	0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x33, //  }.vec3 rcp(vec3
	0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, //  _a) { return ve
	0x63, 0x33, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, // c3(1.0)/_a; }.ve
	0x63, 0x34, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x61, 0x29, 0x20, // c4 rcp(vec4 _a) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x31, 0x2e, // { return vec4(1.
	0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x65, // 0)/_a; }.vec2 ve
	0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, // c2_splat(float _
	0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, // x) { return vec2
	0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, // (_x, _x); }.vec3
	0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, //  vec3_splat(floa
	0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // t _x) { return v
	0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, // ec3(_x, _x, _x);
	0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, //  }.vec4 vec4_spl
	0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, // at(float _x) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, // eturn vec4(_x, _
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, // x, _x, _x); }.uv
	0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, // ec2 uvec2_splat(
	0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, // uint _x) { retur
	0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, // n uvec2(_x, _x);
	0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, //  }.uvec3 uvec3_s
	0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, // plat(uint _x) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, // return uvec3(_x,
	0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, //  _x, _x); }.uvec
	0x34, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, // 4 uvec4_splat(ui
	0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // nt _x) { return 
	0x75, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, // uvec4(_x, _x, _x
	0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, // , _x); }.mat4 mt
	0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, // xFromRows(vec4 _
	0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // 0, vec4 _1, vec4
	0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, //  _2, vec4 _3).{.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, // return transpose
	0x28, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, // (mat4(_0, _1, _2
	0x2c, 0x20, 0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, // , _3) );.}.mat4 
	0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, // mtxFromCols(vec4
	0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, //  _0, vec4 _1, ve
	0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, // c4 _2, vec4 _3).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, // {.return mat4(_0
	0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x3b, 0x0a, 0x7d, // , _1, _2, _3);.}
	0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, // .mat3 mtxFromRow
	0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // s(vec3 _0, vec3 
	0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, // _1, vec3 _2).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, // eturn transpose(
	0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, // mat3(_0, _1, _2)
	0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, //  );.}.mat3 mtxFr
	0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, // omCols(vec3 _0, 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, // vec3 _1, vec3 _2
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x28, // ).{.return mat3(
	0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, // _0, _1, _2);.}.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, // niform vec4 u_vi
	0x65, 0x77, 0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // ewRect;.uniform 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x54, 0x65, 0x78, 0x65, 0x6c, // vec4 u_viewTexel
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, // ;.uniform mat4 u
	0x5f, 0x76, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, // _view;.uniform m
	0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, // at4 u_invView;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x70, 0x72, // niform mat4 u_pr
	0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, // oj;.uniform mat4
	0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, //  u_invProj;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x50, // orm mat4 u_viewP
	0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, // roj;.uniform mat
	0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, // 4 u_invViewProj;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, // .uniform mat4 u_
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, // model[32];.unifo
	0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, // rm mat4 u_modelV
	0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, // iew;.uniform mat
	0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, // 4 u_modelViewPro
	0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // j;.uniform vec4 
	0x75, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x66, 0x34, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, // u_alphaRef4;.flo
	0x61, 0x74, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, // at sqr( float v)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, // .{.return v*v;.}
	0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, // .vec2 sqr( vec2 
	0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, // v).{.return v*v;
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, // .}.vec3 sqr( vec
	0x33, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, // 3 v).{.return v*
	0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6d, 0x75, 0x6c, 0x5f, 0x77, 0x31, // v;.}.vec3 mul_w1
	0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, // ( vec3 v, mat4 m
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2e, 0x78, 0x2a, 0x6d, // ).{.return v.x*m
	0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x79, 0x2a, 0x6d, // [0].xyz + (v.y*m
	0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x7a, 0x2a, 0x6d, // [1].xyz + (v.z*m
	0x5b, 0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x6d, 0x5b, 0x33, 0x5d, 0x2e, 0x78, // [2].xyz + m[3].x
	0x79, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x63, // yz));.}.float ac
	0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, // os_approx_divPI(
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, //  float v).{.floa
	0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, // t x = abs(v);.if
	0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, // (1. - x <= 0.000
	0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, // 06103515625).ret
	0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, // urn (v >= 0.) ? 
	0x30, 0x2e, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, // 0. : 1.;.float r
	0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, // es = ((-0.155972
	0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, // /3.1415926535897
	0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, // 9323846264338327
	0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, // 95) * x + (1.564
	0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, // 67/3.14159265358
	0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, // 9793238462643383
	0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, // 2795) ) * sqrt(1
	0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // . - x);.return (
	0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, // v >= 0.) ? res :
	0x20, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, //  1. - res;.}.flo
	0x61, 0x74, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, // at atan2_approx_
	0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x79, 0x2c, // div2PI( float y,
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, //  float x).{.floa
	0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x79, 0x29, // t abs_y = abs(y)
	0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3d, 0x20, // ;.float abs_x = 
	0x61, 0x62, 0x73, 0x28, 0x78, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, // abs(x);.if(abs_x
	0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, //  <= 0.0000610351
	0x35, 0x36, 0x32, 0x35, 0x20, 0x26, 0x26, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3c, 0x3d, // 5625 && abs_y <=
	0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, //  0.0000610351562
	0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x30, 0x2e, 0x3b, 0x0a, 0x66, 0x6c, // 5).return 0.;.fl
	0x6f, 0x61, 0x74, 0x20, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2d, // oat r = (abs_x -
	0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, //  abs_y) / (abs_x
	0x20, 0x2b, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, //  + abs_y);.float
	0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, //  angle = ((x < 0
	0x2e, 0x29, 0x20, 0x3f, 0x20, 0x28, 0x33, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x20, 0x3a, 0x20, 0x28, // .) ? (3./8.) : (
	0x31, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x29, 0x0a, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x32, 0x31, 0x31, // 1./8.)).+ (0.211
	0x38, 0x36, 0x38, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, // 868 /(2.*3.14159
	0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, // 2653589793238462
	0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x72, 0x20, // 6433832795) * r 
	0x2a, 0x20, 0x72, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x39, 0x38, 0x37, 0x33, 0x30, 0x35, 0x20, 0x2f, // * r - 0.987305 /
	0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, // (2.*3.1415926535
	0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, // 8979323846264338
	0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, // 32795)) * ((x < 
	0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x72, 0x20, 0x3a, 0x20, 0x72, 0x29, 0x3b, 0x0a, 0x72, // 0.) ? -r : r);.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x79, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, // eturn (y < 0.) ?
	0x20, 0x2d, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3a, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x3b, //  -angle : angle;
	0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x73, 0x69, 0x6e, 0x5f, 0x61, 0x70, // .}.float asin_ap
	0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, // prox_divPI( floa
	0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, // t v).{.float x =
	0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, //  abs(v);.if(1. -
	0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, //  x <= 0.00006103
	0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // 515625).return (
	0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x3a, // v >= 0.) ? 0.5 :
	0x20, 0x2d, 0x30, 0x2e, 0x35, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, //  -0.5;.float res
	0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, //  = ((-0.155972/3
	0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, // .141592653589793
	0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, // 2384626433832795
	0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, // ) * x + (1.56467
	0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, // /3.1415926535897
	0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, // 9323846264338327
	0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, // 95) ) * sqrt(1. 
	0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, // - x);.return (v 
	0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x2d, 0x20, 0x72, // >= 0.) ? 0.5 - r
	0x65, 0x73, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x65, 0x73, 0x3b, // es : -0.5 + res;
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x61, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x65, // .}.vec2 ray_to_e
	0x71, 0x75, 0x69, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x75, // quirectangular_u
	0x76, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x61, 0x79, 0x29, 0x0a, 0x7b, 0x0a, 0x72, // v( vec3 ray).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x0a, 0x30, 0x2e, 0x35, 0x20, // eturn vec2(.0.5 
	0x2b, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, // + atan2_approx_d
	0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x79, 0x2c, 0x20, 0x72, 0x61, 0x79, // iv2PI(ray.y, ray
	0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, // .x),.acos_approx
	0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, // _divPI(ray.z));.
	0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, // }.float InvsRGB(
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, //  float color).{.
	0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, // if (color <= 0.0
	0x34, 0x30, 0x34, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, // 4045).return col
	0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x29, // or * (1.0/12.92)
	0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, // ;.else.return po
	0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, // w(color * (1.0/1
	0x2e, 0x30, 0x35, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x2f, 0x31, // .055) + (0.055/1
	0x2e, 0x30, 0x35, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // .055), 2.4);.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x20, // loat InvRec709( 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, // float color).{.i
	0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x38, // f (color <= 0.08
	0x31, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, // 1).return color 
	0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x34, 0x2e, 0x35, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, // * (1.0/4.5);.els
	0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, // e.return pow(col
	0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, // or * (1.0/1.099)
	0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, //  + (0.099/1.099)
	0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // , 1.0/0.45);.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x66, // loat InvGamma( f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // loat color).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, // turn InvsRGB(col
	0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x47, // or);.}.vec3 InvG
	0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // amma( vec3 color
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, // ).{.return vec3(
	0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, // InvGamma(color.x
	0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // ),InvGamma(color
	0x2e, 0x79, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, // .y),InvGamma(col
	0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, // or.z));.}.vec3 I
	0x6e, 0x76, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // nvToneMap( vec3 
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x69, // color).{.float i
	0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x30, 0x2e, 0x35, 0x2f, 0x30, 0x2e, 0x32, // nv_2bh = 0.5/0.2
	0x35, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x34, 0x2e, // 5;.float bh = 4.
	0x30, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2d, 0x20, 0x32, 0x2e, 0x30, 0x3b, 0x0a, 0x72, 0x65, // 0*0.25 - 2.0;.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2d, 0x20, 0x31, 0x2e, // turn (color - 1.
	0x30, 0x20, 0x2b, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2a, 0x28, // 0 + sqrt(color*(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x20, 0x62, 0x68, 0x29, 0x20, 0x2b, 0x20, 0x31, 0x2e, // color + bh) + 1.
	0x30, 0x29, 0x29, 0x2a, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // 0))*inv_2bh;.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // loat sRGB( float
	0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, //  f).{.float s;.i
	0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x33, 0x31, 0x33, 0x30, // f (f <= 0.003130
	0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x20, 0x2a, 0x20, 0x66, // 8).s = 12.92 * f
	0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x35, 0x35, // ;.else.s = 1.055
	0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, //  * pow(f, 1.0/2.
	0x34, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // 4) - 0.055;.retu
	0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x52, 0x65, // rn s;.}.float Re
	0x63, 0x37, 0x30, 0x39, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, // c709( float f).{
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, // .float s;.if (f 
	0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x34, 0x2e, // <= 0.018).s = 4.
	0x35, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, // 5 * f;.else.s = 
	0x31, 0x2e, 0x30, 0x39, 0x39, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x30, // 1.099 * pow(f, 0
	0x2e, 0x34, 0x35, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x3b, 0x0a, 0x72, 0x65, // .45) - 0.099;.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // turn s;.}.float 
	0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, // FBGamma( float c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, // olor).{.return s
	0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // RGB(color);.}.ve
	0x63, 0x32, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, // c2 FBGamma( vec2
	0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, //  color).{.return
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, //  vec2(FBGamma(co
	0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, // lor.x),FBGamma(c
	0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, // olor.y));.}.vec3
	0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, //  FBGamma( vec3 c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // olor).{.return v
	0x65, 0x63, 0x33, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // ec3(FBGamma(colo
	0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, // r.x),FBGamma(col
	0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, // or.y),FBGamma(co
	0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // lor.z));.}.vec3 
	0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x32, 0x32, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // FBGamma22( vec3 
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // color).{.return 
	0x76, 0x65, 0x63, 0x33, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, // vec3(pow(color.x
	0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, // , 1.0/2.2),pow(c
	0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, // olor.y, 1.0/2.2)
	0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x2c, 0x20, 0x31, 0x2e, // ,pow(color.z, 1.
	0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // 0/2.2));.}.float
	0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, //  FBToneMap( floa
	0x74, 0x20, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6c, 0x20, // t l).{.return l 
	0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, // * ((l*0.25 + 1.0
	0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, // ) / (l + 1.0));.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, // }.vec2 FBToneMap
	0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, // ( vec2 color).{.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, // float l = dot(co
	0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, // lor,vec2(0.17620
	0x34, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x2c, // 4+0.0108109*0.5,
	0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, // 0.812985+0.01081
	0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // 09*0.5));.return
	0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, //  color * ((l*0.2
	0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, // 5 + 1.0) / (l + 
	0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, // 1.0));.}.vec3 FB
	0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, // ToneMap( vec3 co
	0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, // lor).{.float l =
	0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x33, 0x28, //  dot(color,vec3(
	0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, // 0.176204,0.81298
	0x35, 0x2c, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x29, 0x29, 0x3b, 0x0a, 0x72, // 5,0.0108109));.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, // eturn color * ((
	0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, // l*0.25 + 1.0) / 
	0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // (l + 1.0));.}.ve
	0x63, 0x34, 0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x28, 0x20, 0x76, 0x65, 0x63, // c4 Additive( vec
	0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // 4 cBase, vec4 cB
	0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, // lend, float perc
	0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, // ent).{.return cB
	0x61, 0x73, 0x65, 0x20, 0x2b, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, // ase + cBlend*per
	0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, // cent;.}.vec3 Scr
	0x65, 0x65, 0x6e, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, // een ( vec3 cBase
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, // , vec3 cBlend).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, // .return 1.0 - (1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, // .0 - cBase) * (1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // .0 - cBlend);.}.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x20, 0x76, 0x65, // vec4 Screen ( ve
	0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, // c4 cBase, vec4 c
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // Blend).{.return 
	0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, // 1.0 - (1.0 - cBa
	0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, // se) * (1.0 - cBl
	0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, // end);.}.vec3 Scr
	0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, // eenHDR ( vec3 cB
	0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, // ase, vec3 cBlend
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, // ).{.return max(1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, // .0 - (1.0 - cBas
	0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, // e) * (1.0 - cBle
	0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, // nd), vec3(0.,0.,
	0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, // 0.));.}.vec4 Scr
	0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // eenHDR ( vec4 cB
	0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, // ase, vec4 cBlend
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, // ).{.return max(1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, // .0 - (1.0 - cBas
	0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, // e) * (1.0 - cBle
	0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, // nd), vec4(0.,0.,
	0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, // 0.,0.));.}.vec4 
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // Multiply ( vec4 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, // cBase, vec4 cBle
	0x6e, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, // nd, float percen
	0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, // t).{.return cBas
	0x65, 0x20, 0x2a, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, // e * cBlend*perce
	0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, // nt;.}.vec4 Overl
	0x61, 0x79, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, // ay ( vec4 cBase,
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, //  vec4 cBlend).{.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, // vec4 cNew = step
	0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, // (0.5, cBase);.cN
	0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, // ew = mix(cBase*c
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, // Blend*2.0, 1.0-2
	0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, // .0*(1.0-cBase)*(
	0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, // 1.0-cBlend), cNe
	0x77, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, // w);.return cNew;
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x48, // .}.vec4 OverlayH
	0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, // DR ( vec4 cBase,
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, //  vec4 cBlend).{.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, // vec4 cNew = step
	0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, // (0.5, cBase);.cN
	0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, // ew = max(mix(cBa
	0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, // se*cBlend*2.0, 1
	0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, // .0-2.0*(1.0-cBas
	0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, // e)*(1.0-cBlend),
	0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, //  cNew), vec4(0.,
	0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // 0.,0.,0.));.retu
	0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // rn cNew;.}.vec3 
	0x63, 0x6f, 0x73, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x5f, 0x73, // cos_hemisphere_s
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x29, 0x0a, 0x7b, // ample( vec2 t).{
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x68, 0x69, 0x20, 0x3d, 0x20, 0x74, 0x2e, 0x79, // .float phi = t.y
	0x20, 0x2a, 0x20, 0x28, 0x32, 0x2e, 0x30, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, //  * (2.0*3.141592
	0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, // 6535897932384626
	0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // 433832795);.floa
	0x74, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, // t cosTheta = sqr
	0x74, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, // t(1.0 - t.x);.fl
	0x6f, 0x61, 0x74, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, // oat sinTheta = s
	0x71, 0x72, 0x74, 0x28, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // qrt(t.x);.float 
	0x73, 0x70, 0x2c, 0x63, 0x70, 0x3b, 0x0a, 0x7b, 0x73, 0x70, 0x3d, 0x73, 0x69, 0x6e, 0x28, 0x70, // sp,cp;.{sp=sin(p
	0x68, 0x69, 0x29, 0x3b, 0x63, 0x70, 0x3d, 0x63, 0x6f, 0x73, 0x28, 0x70, 0x68, 0x69, 0x29, 0x3b, // hi);cp=cos(phi);
	0x7d, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x63, // };.return vec3(c
	0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x63, 0x6f, // p * sinTheta, co
	0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x73, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, // sTheta, sp * sin
	0x54, 0x68, 0x65, 0x74, 0x61, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, // Theta);.}.vec3 r
	0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, // otate_to_vector_
	0x75, 0x70, 0x70, 0x65, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x2c, // upper( vec3 vec,
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, //  vec3 normal).{.
	0x69, 0x66, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x3e, 0x20, 0x2d, 0x30, // if(normal.y > -0
	0x2e, 0x39, 0x39, 0x39, 0x39, 0x39, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // .99999).{.float 
	0x68, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x28, 0x31, 0x2e, 0x30, 0x2b, 0x6e, 0x6f, 0x72, // h = 1.0/(1.0+nor
	0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, // mal.y);.float hz
	0x20, 0x3d, 0x20, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x3b, 0x0a, 0x66, //  = h*normal.z;.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x3d, 0x20, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, // loat hzx = hz*no
	0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // rmal.x;.return v
	0x65, 0x63, 0x33, 0x28, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, // ec3(.vec.x * (no
	0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, // rmal.y+hz*normal
	0x2e, 0x7a, 0x29, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, // .z) + vec.y * no
	0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, // rmal.x - vec.z *
	0x20, 0x68, 0x7a, 0x78, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, //  hzx,.vec.y * no
	0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, // rmal.y - vec.x *
	0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, //  normal.x - vec.
	0x7a, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x2c, 0x0a, 0x76, 0x65, // z * normal.z,.ve
	0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x20, 0x2d, // c.y * normal.z -
	0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x2b, 0x20, 0x76, //  vec.x * hzx + v
	0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, // ec.z * (normal.y
	0x2b, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, // +h*normal.x*norm
	0x61, 0x6c, 0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x72, // al.x));.}.else r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x2d, 0x76, 0x65, 0x63, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, // eturn -vec;.}.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // iform vec4 Stere
	0x6f, 0x5f, 0x53, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x0a, 0x75, 0x6e, // o_Saturation;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // iform vec4 Stere
	0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x3b, 0x0a, // o_MS_ZPD_YAxis;.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, // uniform sampler2
	0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // DArray tex_stere
	0x6f, 0x5f, 0x66, 0x62, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, // o_fb;.uniform sa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x20, 0x74, 0x65, 0x78, // mpler2DArray tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x3b, 0x0a, 0x75, // _stereo_depth;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x77, 0x5f, 0x68, 0x5f, // niform vec4 w_h_
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x67, 0x61, 0x74, // height;.vec3 gat
	0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x76, 0x65, 0x63, 0x32, // herEyeColor(vec2
	0x20, 0x75, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x29, //  u, bool isLeft)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // .{.return textur
	0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, // e2DArrayLod(tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, // stereo_fb, vec3(
	0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, 0x20, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, // u.x, u.y, isLeft
	0x20, 0x3f, 0x20, 0x30, 0x2e, 0x30, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x30, //  ? 0.0 : 1.0), 0
	0x2e, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x67, // .).rgb;.}.void g
	0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, // atherLeftRightCo
	0x6c, 0x6f, 0x72, 0x73, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x6f, 0x75, 0x74, // lors(vec2 u, out
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x63, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, //  vec3 lcol, out 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x6c, 0x63, 0x6f, // vec3 rcol).{.lco
	0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x41, 0x72, 0x72, // l = texture2DArr
	0x61, 0x79, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // ayLod(tex_stereo
	0x5f, 0x66, 0x62, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, // _fb, vec3(u.x, u
	0x2e, 0x79, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2e, 0x78, 0x79, 0x7a, // .y, 0.), 0.).xyz
	0x3b, 0x0a, 0x72, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // ;.rcol = texture
	0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, // 2DArrayLod(tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x75, // tereo_fb, vec3(u
	0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, 0x29, 0x2c, 0x20, 0x30, 0x2e, // .x, u.y, 1.), 0.
	0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // ).xyz;.}.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, //  mat4 Stereo_Lef
	0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, // tMat;.uniform ma
	0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, // t4 Stereo_RightM
	0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, // at;.uniform vec4
	0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, //  Stereo_LeftLumi
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, 0x6e, 0x69, // nance_Gamma;.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // form vec4 Stereo
	0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, // _RightLuminance_
	0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x3b, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x44, // DynDesat;.void D
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x65, 0x73, 0x61, 0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, // ynamicDesatAnagl
	0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // yph( vec3 lCol, 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, // vec3 rCol, out v
	0x65, 0x63, 0x33, 0x20, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, // ec3 lDesatCol, o
	0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, // ut vec3 rDesatCo
	0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, // l).{.float left2
	0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, // LeftLum = dot(lC
	0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, // ol, Stereo_LeftL
	0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, // uminance_Gamma.x
	0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, // yz);.float left2
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, // RightLum = dot(l
	0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, // Col, Stereo_Righ
	0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, // tLuminance_DynDe
	0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // sat.xyz);.float 
	0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, // right2LeftLum = 
	0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // dot(rCol, Stereo
	0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, // _LeftLuminance_G
	0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // amma.xyz);.float
	0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, //  right2RightLum 
	0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, // = dot(rCol, Ster
	0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, // eo_RightLuminanc
	0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, // e_DynDesat.xyz);
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, // .float leftLum =
	0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, //  left2LeftLum + 
	0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, 0x0a, 0x66, // left2RightLum;.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, // loat rightLum = 
	0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, // right2LeftLum + 
	0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, 0x0a, // right2RightLum;.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x20, // float leftDesat 
	0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // = Stereo_RightLu
	0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, // minance_DynDesat
	0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, // .w * abs((left2L
	0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, // eftLum - left2Ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, // ghtLum) / (leftL
	0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x66, // um + 0.0001));.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x20, // loat rightDesat 
	0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // = Stereo_RightLu
	0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, // minance_DynDesat
	0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, // .w * abs((right2
	0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, // LeftLum - right2
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x72, 0x69, 0x67, // RightLum) / (rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, 0x29, // htLum + 0.0001))
	0x3b, 0x0a, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, // ;.lDesatCol = mi
	0x78, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, // x(lCol, vec3_spl
	0x61, 0x74, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x66, // at(leftLum), lef
	0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x72, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, // tDesat);.rDesatC
	0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, // ol = mix(rCol, v
	0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, // ec3_splat(rightL
	0x75, 0x6d, 0x29, 0x2c, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, // um), rightDesat)
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x41, // ;.}.vec3 LinearA
	0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, // naglyph( vec3 lC
	0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, // ol, vec3 rCol).{
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x28, // .vec3 color = ((
	0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, 0x29, //  (vec4(lCol, 1.)
	0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, // ) * (Stereo_Left
	0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, // Mat) ) + ( (vec4
	0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, // (rCol, 1.)) * (S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, // tereo_RightMat) 
	0x29, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, // )).rgb;.return c
	0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // olor;.}.uniform 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, // vec4 Stereo_Degh
	0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // ostGamma;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, // m mat4 Stereo_De
	0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3b, 0x0a, 0x76, 0x65, 0x63, // ghostFilter;.vec
	0x33, 0x20, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, // 3 DeghostAnaglyp
	0x68, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, // h( vec3 lCol, ve
	0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // c3 rCol).{.vec3 
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x41, 0x6e, // color = LinearAn
	0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, // aglyph(lCol, rCo
	0x6c, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x70, 0x6f, // l);.return ( (po
	0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // w(color, Stereo_
	0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x72, 0x67, 0x62, // DeghostGamma.rgb
	0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, // )) * (mat3(Stere
	0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, // o_DeghostFilter[
	0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, // 0].xyz, Stereo_D
	0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x31, 0x5d, 0x2e, // eghostFilter[1].
	0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, // xyz, Stereo_Degh
	0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, // ostFilter[2].xyz
	0x29, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x6d, 0x61, 0x69, // )) );.}.void mai
	0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, // n().{.gl_FragCol
	0x6f, 0x72, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, // or = vec4(gather
	0x45, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, // EyeColor(v_texco
	0x6f, 0x72, 0x64, 0x30, 0x2c, 0x20, 0x66, 0x72, 0x61, 0x63, 0x74, 0x28, 0x67, 0x6c, 0x5f, 0x46, // ord0, fract(gl_F
	0x72, 0x61, 0x67, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x2e, 0x79, 0x2a, 0x30, 0x2e, 0x35, 0x29, 0x20, // ragCoord.y*0.5) 
	0x3c, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // < 0.5), 1.0);.}.
	0x00,                                                                                           // .
};
static const uint8_t fs_pp_stereo_int_st_dx11[602] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x0d, 0x74, // FSH.Jc._.......t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x30, 0x01, 0x00, 0x00, // ex_stereo_fb0...
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // .......tex_stere
	0x6f, 0x5f, 0x66, 0x62, 0x30, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x02, // o_fb0...........
	0x00, 0x00, 0x44, 0x58, 0x42, 0x43, 0x81, 0x46, 0x2e, 0x53, 0xf9, 0x3d, 0x15, 0xcc, 0x6b, 0xc6, // ..DXBC.F.S.=..k.
	0x86, 0x06, 0xbf, 0xc9, 0xf8, 0x50, 0x01, 0x00, 0x00, 0x00, 0x14, 0x02, 0x00, 0x00, 0x03, 0x00, // .....P..........
	0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x9c, 0x00, 0x00, 0x00, 0xd0, 0x00, 0x00, 0x00, 0x49, 0x53, // ..,...........IS
	0x47, 0x4e, 0x68, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x50, 0x00, // GNh...........P.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x0f, 0x02, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x5c, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, // ................
	0x00, 0x00, 0x06, 0x06, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, // ......SV_POSITIO
	0x4e, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0xab, 0xab, 0xab, 0x4f, 0x53, // N.TEXCOORD....OS
	0x47, 0x4e, 0x2c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x20, 0x00, // GN,........... .
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x00, // ......SV_TARGET.
	0xab, 0xab, 0x53, 0x48, 0x45, 0x58, 0x3c, 0x01, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x4f, 0x00, // ..SHEX<...P...O.
	0x00, 0x00, 0x6a, 0x08, 0x00, 0x01, 0x5a, 0x00, 0x00, 0x03, 0x00, 0x60, 0x10, 0x00, 0x00, 0x00, // ..j...Z....`....
	0x00, 0x00, 0x58, 0x40, 0x00, 0x04, 0x00, 0x70, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x55, // ..X@...p......UU
	0x00, 0x00, 0x64, 0x20, 0x00, 0x04, 0x22, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, // ..d ..".........
	0x00, 0x00, 0x62, 0x10, 0x00, 0x03, 0x62, 0x10, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x65, 0x00, // ..b...b.......e.
	0x00, 0x03, 0xf2, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x02, 0x01, 0x00, // ... ......h.....
	0x00, 0x00, 0x38, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x10, // ..8.............
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x1a, 0x00, // .......@.....?..
	0x00, 0x05, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x31, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, // ..1.............
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x37, 0x00, // .......@.....?7.
	0x00, 0x09, 0x42, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, // ..B.............
	0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, // ...@.......@....
	0x80, 0x3f, 0x36, 0x00, 0x00, 0x05, 0x32, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x96, 0x15, // .?6...2.........
	0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0x02, 0x02, 0x00, 0x80, 0x43, 0x55, // ......H.......CU
	0x15, 0x00, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, // ..r.......F.....
	0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x00, 0x00, // ..F~.......`....
	0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x72, 0x20, // ...@......6...r 
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, // ......F.......6.
	0x00, 0x05, 0x82, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, // ... .......@....
	0x80, 0x3f, 0x3e, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,                                     // .?>.......
};
static const uint8_t fs_pp_stereo_int_st_spv[1198] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0d, 0x74, // FSH.Jc._.......t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x30, 0x00, 0x02, 0x00, // ex_stereo_fb0...
	0x00, 0x00, 0x00, 0x03, 0x22, 0x00, 0x80, 0x04, 0x00, 0x00, 0x03, 0x02, 0x23, 0x07, 0x00, 0x00, // ....".......#...
	0x01, 0x00, 0x0b, 0x00, 0x08, 0x00, 0xd7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, // ................
	0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, 0x4c, // ..............GL
	0x53, 0x4c, 0x2e, 0x73, 0x74, 0x64, 0x2e, 0x34, 0x35, 0x30, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, // SL.std.450......
	0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x08, 0x00, 0x04, 0x00, // ................
	0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x74, 0x00, // ......main....t.
	0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x89, 0x00, 0x00, 0x00, 0x10, 0x00, 0x03, 0x00, 0x04, 0x00, // ..|.............
	0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x03, 0x00, 0x03, 0x00, 0x05, 0x00, 0x00, 0x00, 0xf4, 0x01, // ................
	0x00, 0x00, 0x05, 0x00, 0x04, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, // ..........main..
	0x00, 0x00, 0x05, 0x00, 0x08, 0x00, 0x2d, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // ......-...tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x00, 0x00, // ereo_fbSampler..
	0x00, 0x00, 0x05, 0x00, 0x08, 0x00, 0x30, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // ......0...tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x00, 0x00, // ereo_fbTexture..
	0x00, 0x00, 0x05, 0x00, 0x06, 0x00, 0x74, 0x00, 0x00, 0x00, 0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, // ......t...gl_Fra
	0x67, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x05, 0x00, 0x7c, 0x00, // gCoord........|.
	0x00, 0x00, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x00, 0x05, 0x00, // ..v_texcoord0...
	0x06, 0x00, 0x89, 0x00, 0x00, 0x00, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, // ......bgfx_FragD
	0x61, 0x74, 0x61, 0x30, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x2d, 0x00, 0x00, 0x00, 0x22, 0x00, // ata0..G...-...".
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x2d, 0x00, 0x00, 0x00, 0x21, 0x00, // ......G...-...!.
	0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x30, 0x00, 0x00, 0x00, 0x22, 0x00, // ......G...0...".
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x30, 0x00, 0x00, 0x00, 0x21, 0x00, // ......G...0...!.
	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x74, 0x00, 0x00, 0x00, 0x0b, 0x00, // ......G...t.....
	0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x1e, 0x00, // ......G...|.....
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x89, 0x00, 0x00, 0x00, 0x1e, 0x00, // ......G.........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x21, 0x00, // ..............!.
	0x03, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x02, 0x00, 0x06, 0x00, // ................
	0x00, 0x00, 0x16, 0x00, 0x03, 0x00, 0x07, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x19, 0x00, // .......... .....
	0x09, 0x00, 0x08, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x03, 0x00, // ................
	0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x04, 0x00, // ................
	0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x19, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x02, 0x00, // ................
	0x00, 0x00, 0x14, 0x00, 0x02, 0x00, 0x1b, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x2c, 0x00, // .......... ...,.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x2c, 0x00, // ..........;...,.
	0x00, 0x00, 0x2d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x2f, 0x00, // ..-....... .../.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x2f, 0x00, // ..........;.../.
	0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x03, 0x00, 0x42, 0x00, // ..0...........B.
	0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x55, 0x00, // ......+.......U.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x56, 0x00, // ......+.......V.
	0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x66, 0x00, // .....?+.......f.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x20, 0x00, 0x04, 0x00, 0x73, 0x00, 0x00, 0x00, 0x01, 0x00, // .....? ...s.....
	0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x73, 0x00, 0x00, 0x00, 0x74, 0x00, // ......;...s...t.
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x7b, 0x00, 0x00, 0x00, 0x01, 0x00, // ...... ...{.....
	0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x7b, 0x00, 0x00, 0x00, 0x7c, 0x00, // ......;...{...|.
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x88, 0x00, 0x00, 0x00, 0x03, 0x00, // ...... .........
	0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x88, 0x00, 0x00, 0x00, 0x89, 0x00, // ......;.........
	0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x36, 0x00, 0x05, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, // ......6.........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x05, 0x00, // ................
	0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x2d, 0x00, // ..=...........-.
	0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x08, 0x00, 0x00, 0x00, 0x31, 0x00, 0x00, 0x00, 0x30, 0x00, // ..=.......1...0.
	0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x75, 0x00, 0x00, 0x00, 0x74, 0x00, // ..=.......u...t.
	0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x19, 0x00, 0x00, 0x00, 0x7d, 0x00, 0x00, 0x00, 0x7c, 0x00, // ..=.......}...|.
	0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xb0, 0x00, 0x00, 0x00, 0x75, 0x00, // ..Q...........u.
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xb1, 0x00, // ................
	0x00, 0x00, 0xb0, 0x00, 0x00, 0x00, 0x66, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x06, 0x00, 0x07, 0x00, // ......f.........
	0x00, 0x00, 0xb2, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0xb1, 0x00, // ................
	0x00, 0x00, 0xb8, 0x00, 0x05, 0x00, 0x1b, 0x00, 0x00, 0x00, 0xb3, 0x00, 0x00, 0x00, 0xb2, 0x00, // ................
	0x00, 0x00, 0x66, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xc4, 0x00, // ..f...Q.........
	0x00, 0x00, 0x7d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, // ..}.......Q.....
	0x00, 0x00, 0xc6, 0x00, 0x00, 0x00, 0x7d, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xa9, 0x00, // ......}.........
	0x06, 0x00, 0x07, 0x00, 0x00, 0x00, 0xc8, 0x00, 0x00, 0x00, 0xb3, 0x00, 0x00, 0x00, 0x55, 0x00, // ..............U.
	0x00, 0x00, 0x56, 0x00, 0x00, 0x00, 0x50, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xc9, 0x00, // ..V...P.........
	0x00, 0x00, 0xc4, 0x00, 0x00, 0x00, 0xc6, 0x00, 0x00, 0x00, 0xc8, 0x00, 0x00, 0x00, 0x56, 0x00, // ..............V.
	0x05, 0x00, 0x42, 0x00, 0x00, 0x00, 0xd3, 0x00, 0x00, 0x00, 0x31, 0x00, 0x00, 0x00, 0x2e, 0x00, // ..B.......1.....
	0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xd6, 0x00, 0x00, 0x00, 0xd3, 0x00, // ..X.............
	0x00, 0x00, 0xc9, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00, 0x51, 0x00, // ..........U...Q.
	0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xb6, 0x00, 0x00, 0x00, 0xd6, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xb7, 0x00, 0x00, 0x00, 0xd6, 0x00, // ..Q.............
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xb8, 0x00, // ......Q.........
	0x00, 0x00, 0xd6, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x50, 0x00, 0x07, 0x00, 0x0e, 0x00, // ..........P.....
	0x00, 0x00, 0xb9, 0x00, 0x00, 0x00, 0xb6, 0x00, 0x00, 0x00, 0xb7, 0x00, 0x00, 0x00, 0xb8, 0x00, // ................
	0x00, 0x00, 0x56, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x03, 0x00, 0x89, 0x00, 0x00, 0x00, 0xb9, 0x00, // ..V...>.........
	0x00, 0x00, 0xfd, 0x00, 0x01, 0x00, 0x38, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,             // ......8.......
};
static const bgfx::EmbeddedShader fs_pp_stereo_int_st = BGFX_EMBEDDED_SHADER(fs_pp_stereo_int_st);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Build of fragment shader from fs_pp_stereo.sc to fs_pp_stereo_flipped_int_st with options: FLIPPED_INT STEREO
static const uint8_t fs_pp_stereo_flipped_int_st_mtl[856] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x14, 0x74, // FSH.Jc._.......t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, // ex_stereo_fbSamp
	0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x74, 0x65, // ler...........te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x54, 0x65, 0x78, 0x74, 0x75, // x_stereo_fbTextu
	0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x74, 0x65, 0x78, // re...........tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, // _stereo_depthSam
	0x70, 0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x74, // pler...........t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x54, // ex_stereo_depthT
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, // exture..........
	0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x10, 0x00, // .tex_stereo_fb..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x02, 0x00, 0x00, 0x23, 0x69, 0x6e, 0x63, // ............#inc
	0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x64, 0x6c, // lude <metal_stdl
	0x69, 0x62, 0x3e, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x73, 0x69, // ib>.#include <si
	0x6d, 0x64, 0x2f, 0x73, 0x69, 0x6d, 0x64, 0x2e, 0x68, 0x3e, 0x0a, 0x0a, 0x75, 0x73, 0x69, 0x6e, // md/simd.h>..usin
	0x67, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x6d, 0x65, 0x74, 0x61, // g namespace meta
	0x6c, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, // l;..struct xlatM
	0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, // tlMain_out.{.   
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, //  float4 bgfx_Fra
	0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x20, 0x5b, 0x5b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x30, // gData0 [[color(0
	0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, // )]];.};..struct 
	0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x0a, 0x7b, // xlatMtlMain_in.{
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, // .    float2 v_te
	0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x5b, 0x5b, 0x75, 0x73, 0x65, 0x72, 0x28, 0x6c, // xcoord0 [[user(l
	0x6f, 0x63, 0x6e, 0x31, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x66, 0x72, 0x61, // ocn1)]];.};..fra
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, // gment xlatMtlMai
	0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, // n_out xlatMtlMai
	0x6e, 0x28, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, // n(xlatMtlMain_in
	0x20, 0x69, 0x6e, 0x20, 0x5b, 0x5b, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x5d, 0x5d, //  in [[stage_in]]
	0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x61, // , texture2d_arra
	0x79, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3e, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, // y<float> tex_ste
	0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // reo_fb [[texture
	0x28, 0x30, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x74, // (0)]], sampler t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, // ex_stereo_fbSamp
	0x6c, 0x65, 0x72, 0x20, 0x5b, 0x5b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x30, 0x29, // ler [[sampler(0)
	0x5d, 0x5d, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x67, 0x6c, 0x5f, 0x46, 0x72, // ]], float4 gl_Fr
	0x61, 0x67, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x5b, 0x5b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, // agCoord [[positi
	0x6f, 0x6e, 0x5d, 0x5d, 0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x78, 0x6c, 0x61, 0x74, // on]]).{.    xlat
	0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x6f, 0x75, 0x74, 0x20, // MtlMain_out out 
	0x3d, 0x20, 0x7b, 0x7d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, // = {};.    float3
	0x20, 0x5f, 0x31, 0x39, 0x38, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x69, //  _198 = float3(i
	0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2c, 0x20, 0x28, // n.v_texcoord0, (
	0x66, 0x72, 0x61, 0x63, 0x74, 0x28, 0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6f, // fract(gl_FragCoo
	0x72, 0x64, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x20, 0x3e, 0x3d, 0x20, 0x30, // rd.y * 0.5) >= 0
	0x2e, 0x35, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x30, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x30, 0x29, // .5) ? 0.0 : 1.0)
	0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x6f, 0x75, 0x74, 0x2e, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, // ;.    out.bgfx_F
	0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // ragData0 = float
	0x34, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2e, // 4(tex_stereo_fb.
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // sample(tex_stere
	0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x31, 0x39, // o_fbSampler, _19
	0x38, 0x2e, 0x78, 0x79, 0x2c, 0x20, 0x75, 0x69, 0x6e, 0x74, 0x28, 0x72, 0x69, 0x6e, 0x74, 0x28, // 8.xy, uint(rint(
	0x5f, 0x31, 0x39, 0x38, 0x2e, 0x7a, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, // _198.z)), level(
	0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, // 0.0)).xyz, 1.0);
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6f, 0x75, 0x74, 0x3b, // .    return out;
	0x0a, 0x7d, 0x0a, 0x0a, 0x00, 0x00, 0x40, 0x00,                                                 // .}....@.
};
static const uint8_t fs_pp_stereo_flipped_int_st_essl[8553] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x56, 0x21, // FSH.Jc._......V!
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x33, 0x32, 0x30, 0x20, 0x65, // ..#version 320 e
	0x73, 0x0a, 0x23, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x47, 0x4c, 0x5f, // s.#extension GL_
	0x45, 0x58, 0x54, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, // EXT_shader_textu
	0x72, 0x65, 0x5f, 0x6c, 0x6f, 0x64, 0x20, 0x3a, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x0a, // re_lod : enable.
	0x23, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x47, 0x4c, 0x5f, 0x45, 0x58, // #extension GL_EX
	0x54, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x20, // T_texture_array 
	0x3a, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, // : enable.#define
	0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, //  attribute in.#d
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, // efine varying in
	0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, // .precision highp
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3b, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, //  float;.precisio
	0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x69, 0x6e, 0x74, 0x3b, 0x0a, 0x70, 0x72, 0x65, // n highp int;.pre
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x73, 0x61, 0x6d, // cision highp sam
	0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x3b, 0x0a, 0x23, 0x64, 0x65, // pler2DArray;.#de
	0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x4c, 0x6f, // fine texture2DLo
	0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, // d      texture2D
	0x4c, 0x6f, 0x64, 0x45, 0x58, 0x54, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, // LodEXT.#define t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, 0x20, 0x20, // exture2DGrad    
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x47, 0x72, 0x61, 0x64, 0x45, 0x58, //  texture2DGradEX
	0x54, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // T.#define textur
	0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, // e2DProjLod  text
	0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x4c, 0x6f, 0x64, 0x45, 0x58, 0x54, 0x0a, // ure2DProjLodEXT.
	0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, // #define texture2
	0x44, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // DProjGrad textur
	0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, 0x45, 0x58, 0x54, 0x0a, 0x23, // e2DProjGradEXT.#
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, // define textureCu
	0x62, 0x65, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // beLod    texture
	0x43, 0x75, 0x62, 0x65, 0x4c, 0x6f, 0x64, 0x45, 0x58, 0x54, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, // CubeLodEXT.#defi
	0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x47, 0x72, // ne textureCubeGr
	0x61, 0x64, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, // ad   textureCube
	0x47, 0x72, 0x61, 0x64, 0x45, 0x58, 0x54, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, // GradEXT.#define 
	0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // shadow2D(_sample
	0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, // r, _coord) textu
	0x72, 0x65, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, // re(_sampler, _co
	0x6f, 0x72, 0x64, 0x29, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x73, 0x68, 0x61, // ord).#define sha
	0x64, 0x6f, 0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, // dow2DProj(_sampl
	0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x74, 0x65, 0x78, 0x74, // er, _coord) text
	0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // ureProj(_sampler
	0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x0a, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x65, // , _coord).out me
	0x64, 0x69, 0x75, 0x6d, 0x70, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, // diump vec4 bgfx_
	0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, // FragColor;.varyi
	0x6e, 0x67, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x5f, 0x65, 0x79, 0x65, 0x3b, 0x0a, // ng float v_eye;.
	0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x5f, 0x74, // varying vec2 v_t
	0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, // excoord0;.vec3 i
	0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, // nstMul(vec3 _vec
	0x2c, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, // , mat3 _mtx) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, // eturn ( (_vec) *
	0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, //  (_mtx) ); }.vec
	0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, // 3 instMul(mat3 _
	0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, // mtx, vec3 _vec) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, // { return ( (_mtx
	0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, // ) * (_vec) ); }.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, // vec4 instMul(vec
	0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, // 4 _vec, mat4 _mt
	0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, // x) { return ( (_
	0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, // vec) * (_mtx) );
	0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, //  }.vec4 instMul(
	0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // mat4 _mtx, vec4 
	0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // _vec) { return (
	0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, //  (_mtx) * (_vec)
	0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, 0x70, 0x28, //  ); }.float rcp(
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // float _a) { retu
	0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, // rn 1.0/_a; }.vec
	0x32, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, // 2 rcp(vec2 _a) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, //  return vec2(1.0
	0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x70, // )/_a; }.vec3 rcp
	0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // (vec3 _a) { retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, // rn vec3(1.0)/_a;
	0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x34, //  }.vec4 rcp(vec4
	0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, //  _a) { return ve
	0x63, 0x34, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, // c4(1.0)/_a; }.ve
	0x63, 0x32, 0x20, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, // c2 vec2_splat(fl
	0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // oat _x) { return
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, //  vec2(_x, _x); }
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, // .vec3 vec3_splat
	0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // (float _x) { ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, // urn vec3(_x, _x,
	0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, 0x65, 0x63, //  _x); }.vec4 vec
	0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, // 4_splat(float _x
	0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, // ) { return vec4(
	0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, // _x, _x, _x, _x);
	0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, //  }.uvec2 uvec2_s
	0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, // plat(uint _x) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, // return uvec2(_x,
	0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, 0x75, 0x76, //  _x); }.uvec3 uv
	0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, // ec3_splat(uint _
	0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, // x) { return uvec
	0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, // 3(_x, _x, _x); }
	0x0a, 0x75, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, // .uvec4 uvec4_spl
	0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // at(uint _x) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, // turn uvec4(_x, _
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x6d, 0x61, // x, _x, _x); }.ma
	0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, // t4 mtxFromRows(v
	0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, // ec4 _0, vec4 _1,
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, //  vec4 _2, vec4 _
	0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, // 3).{.return tran
	0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, // spose(mat4(_0, _
	0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // 1, _2, _3) );.}.
	0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, // mat4 mtxFromCols
	0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, // (vec4 _0, vec4 _
	0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // 1, vec4 _2, vec4
	0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, //  _3).{.return ma
	0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, // t4(_0, _1, _2, _
	0x33, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, // 3);.}.mat3 mtxFr
	0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, // omRows(vec3 _0, 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, // vec3 _1, vec3 _2
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, // ).{.return trans
	0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, // pose(mat3(_0, _1
	0x2c, 0x20, 0x5f, 0x32, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, // , _2) );.}.mat3 
	0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, // mtxFromCols(vec3
	0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, //  _0, vec3 _1, ve
	0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // c3 _2).{.return 
	0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, // mat3(_0, _1, _2)
	0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, // ;.}.uniform vec4
	0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, //  u_viewRect;.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, // form vec4 u_view
	0x54, 0x65, 0x78, 0x65, 0x6c, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, // Texel;.uniform m
	0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // at4 u_view;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, // orm mat4 u_invVi
	0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, // ew;.uniform mat4
	0x20, 0x75, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, //  u_proj;.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, 0x6a, 0x3b, //  mat4 u_invProj;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, // .uniform mat4 u_
	0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // viewProj;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, // m mat4 u_invView
	0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, // Proj;.uniform ma
	0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, 0x3b, 0x0a, // t4 u_model[32];.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, // uniform mat4 u_m
	0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // odelView;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, // m mat4 u_modelVi
	0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // ewProj;.uniform 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x66, 0x34, // vec4 u_alphaRef4
	0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x66, 0x6c, 0x6f, // ;.float sqr( flo
	0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // at v).{.return v
	0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, // *v;.}.vec2 sqr( 
	0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // vec2 v).{.return
	0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x73, 0x71, 0x72, //  v*v;.}.vec3 sqr
	0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, // ( vec3 v).{.retu
	0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6d, // rn v*v;.}.vec3 m
	0x75, 0x6c, 0x5f, 0x77, 0x31, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x2c, 0x20, 0x6d, // ul_w1( vec3 v, m
	0x61, 0x74, 0x34, 0x20, 0x6d, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // at4 m).{.return 
	0x76, 0x2e, 0x78, 0x2a, 0x6d, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, // v.x*m[0].xyz + (
	0x76, 0x2e, 0x79, 0x2a, 0x6d, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, // v.y*m[1].xyz + (
	0x76, 0x2e, 0x7a, 0x2a, 0x6d, 0x5b, 0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x6d, // v.z*m[2].xyz + m
	0x5b, 0x33, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // [3].xyz));.}.flo
	0x61, 0x74, 0x20, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, // at acos_approx_d
	0x69, 0x76, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, // ivPI( float v).{
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, // .float x = abs(v
	0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, // );.if(1. - x <= 
	0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, // 0.00006103515625
	0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, // ).return (v >= 0
	0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x3b, 0x0a, 0x66, 0x6c, // .) ? 0. : 1.;.fl
	0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, // oat res = ((-0.1
	0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, // 55972/3.14159265
	0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, // 3589793238462643
	0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, // 3832795) * x + (
	0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, // 1.56467/3.141592
	0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, // 6535897932384626
	0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, // 433832795) ) * s
	0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, // qrt(1. - x);.ret
	0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, // urn (v >= 0.) ? 
	0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, // res : 1. - res;.
	0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, // }.float atan2_ap
	0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, // prox_div2PI( flo
	0x61, 0x74, 0x20, 0x79, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x29, 0x0a, 0x7b, // at y, float x).{
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3d, 0x20, 0x61, // .float abs_y = a
	0x62, 0x73, 0x28, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, // bs(y);.float abs
	0x5f, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x78, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, // _x = abs(x);.if(
	0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, // abs_x <= 0.00006
	0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x20, 0x26, 0x26, 0x20, 0x61, 0x62, 0x73, // 103515625 && abs
	0x5f, 0x79, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, // _y <= 0.00006103
	0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x30, // 515625).return 0
	0x2e, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x61, 0x62, // .;.float r = (ab
	0x73, 0x5f, 0x78, 0x20, 0x2d, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x20, 0x2f, 0x20, 0x28, // s_x - abs_y) / (
	0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2b, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x3b, 0x0a, // abs_x + abs_y);.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3d, 0x20, 0x28, 0x28, // float angle = ((
	0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x28, 0x33, 0x2e, 0x2f, 0x38, 0x2e, // x < 0.) ? (3./8.
	0x29, 0x20, 0x3a, 0x20, 0x28, 0x31, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x29, 0x0a, 0x2b, 0x20, 0x28, // ) : (1./8.)).+ (
	0x30, 0x2e, 0x32, 0x31, 0x31, 0x38, 0x36, 0x38, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, // 0.211868 /(2.*3.
	0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, // 1415926535897932
	0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, // 384626433832795)
	0x20, 0x2a, 0x20, 0x72, 0x20, 0x2a, 0x20, 0x72, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x39, 0x38, 0x37, //  * r * r - 0.987
	0x33, 0x30, 0x35, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, // 305 /(2.*3.14159
	0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, // 2653589793238462
	0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, // 6433832795)) * (
	0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x72, 0x20, 0x3a, 0x20, // (x < 0.) ? -r : 
	0x72, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x79, 0x20, 0x3c, 0x20, // r);.return (y < 
	0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3a, 0x20, 0x61, // 0.) ? -angle : a
	0x6e, 0x67, 0x6c, 0x65, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x73, // ngle;.}.float as
	0x69, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, // in_approx_divPI(
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, //  float v).{.floa
	0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, // t x = abs(v);.if
	0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, // (1. - x <= 0.000
	0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, // 06103515625).ret
	0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, // urn (v >= 0.) ? 
	0x30, 0x2e, 0x35, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // 0.5 : -0.5;.floa
	0x74, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, // t res = ((-0.155
	0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, // 972/3.1415926535
	0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, // 8979323846264338
	0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, // 32795) * x + (1.
	0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, // 56467/3.14159265
	0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, // 3589793238462643
	0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, // 3832795) ) * sqr
	0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // t(1. - x);.retur
	0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, // n (v >= 0.) ? 0.
	0x35, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x20, 0x2b, // 5 - res : -0.5 +
	0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x61, 0x79, //  res;.}.vec2 ray
	0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x75, // _to_equirectangu
	0x6c, 0x61, 0x72, 0x5f, 0x75, 0x76, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x61, 0x79, // lar_uv( vec3 ray
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // ).{.return vec2(
	0x0a, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, // .0.5 + atan2_app
	0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x79, // rox_div2PI(ray.y
	0x2c, 0x20, 0x72, 0x61, 0x79, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, // , ray.x),.acos_a
	0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, // pprox_divPI(ray.
	0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, // z));.}.float Inv
	0x73, 0x52, 0x47, 0x42, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // sRGB( float colo
	0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, // r).{.if (color <
	0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, 0x34, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // = 0.04045).retur
	0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, // n color * (1.0/1
	0x32, 0x2e, 0x39, 0x32, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, // 2.92);.else.retu
	0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, // rn pow(color * (
	0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, // 1.0/1.055) + (0.
	0x30, 0x35, 0x35, 0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x29, // 055/1.055), 2.4)
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x52, 0x65, 0x63, // ;.}.float InvRec
	0x37, 0x30, 0x39, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // 709( float color
	0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, // ).{.if (color <=
	0x20, 0x30, 0x2e, 0x30, 0x38, 0x31, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, //  0.081).return c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x34, 0x2e, 0x35, 0x29, // olor * (1.0/4.5)
	0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, // ;.else.return po
	0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, // w(color * (1.0/1
	0x2e, 0x30, 0x39, 0x39, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x2f, 0x31, // .099) + (0.099/1
	0x2e, 0x30, 0x39, 0x39, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x30, 0x2e, 0x34, 0x35, 0x29, // .099), 1.0/0.45)
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, // ;.}.float InvGam
	0x6d, 0x61, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, // ma( float color)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, // .{.return InvsRG
	0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, // B(color);.}.vec3
	0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, //  InvGamma( vec3 
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // color).{.return 
	0x76, 0x65, 0x63, 0x33, 0x28, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, // vec3(InvGamma(co
	0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, // lor.x),InvGamma(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, // color.y),InvGamm
	0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // a(color.z));.}.v
	0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, // ec3 InvToneMap( 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, // vec3 color).{.fl
	0x6f, 0x61, 0x74, 0x20, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x30, 0x2e, // oat inv_2bh = 0.
	0x35, 0x2f, 0x30, 0x2e, 0x32, 0x35, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x68, // 5/0.25;.float bh
	0x20, 0x3d, 0x20, 0x34, 0x2e, 0x30, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2d, 0x20, 0x32, 0x2e, //  = 4.0*0.25 - 2.
	0x30, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // 0;.return (color
	0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2b, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x63, 0x6f, //  - 1.0 + sqrt(co
	0x6c, 0x6f, 0x72, 0x2a, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x20, 0x62, 0x68, 0x29, // lor*(color + bh)
	0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x2a, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, //  + 1.0))*inv_2bh
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x20, // ;.}.float sRGB( 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // float f).{.float
	0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, //  s;.if (f <= 0.0
	0x30, 0x33, 0x31, 0x33, 0x30, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, // 031308).s = 12.9
	0x32, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, // 2 * f;.else.s = 
	0x31, 0x2e, 0x30, 0x35, 0x35, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x31, // 1.055 * pow(f, 1
	0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x34, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x3b, // .0/2.4) - 0.055;
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // .return s;.}.flo
	0x61, 0x74, 0x20, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // at Rec709( float
	0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, //  f).{.float s;.i
	0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, 0x29, 0x0a, 0x73, // f (f <= 0.018).s
	0x20, 0x3d, 0x20, 0x34, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, //  = 4.5 * f;.else
	0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, // .s = 1.099 * pow
	0x28, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x39, // (f, 0.45) - 0.09
	0x39, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // 9;.return s;.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x66, 0x6c, // loat FBGamma( fl
	0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // oat color).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, // urn sRGB(color);
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, // .}.vec2 FBGamma(
	0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, //  vec2 color).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, // eturn vec2(FBGam
	0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, // ma(color.x),FBGa
	0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, // mma(color.y));.}
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, // .vec3 FBGamma( v
	0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // ec3 color).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, // urn vec3(FBGamma
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, // (color.x),FBGamm
	0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, // a(color.y),FBGam
	0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // ma(color.z));.}.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x32, 0x32, 0x28, 0x20, // vec3 FBGamma22( 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // vec3 color).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, // turn vec3(pow(co
	0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, // lor.x, 1.0/2.2),
	0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, 0x30, // pow(color.y, 1.0
	0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, // /2.2),pow(color.
	0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // z, 1.0/2.2));.}.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, // float FBToneMap(
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, //  float l).{.retu
	0x72, 0x6e, 0x20, 0x6c, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, // rn l * ((l*0.25 
	0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, // + 1.0) / (l + 1.
	0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x54, 0x6f, // 0));.}.vec2 FBTo
	0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // neMap( vec2 colo
	0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, // r).{.float l = d
	0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, // ot(color,vec2(0.
	0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, // 176204+0.0108109
	0x2a, 0x30, 0x2e, 0x35, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2b, 0x30, 0x2e, // *0.5,0.812985+0.
	0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x3b, 0x0a, 0x72, // 0108109*0.5));.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, // eturn color * ((
	0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, // l*0.25 + 1.0) / 
	0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // (l + 1.0));.}.ve
	0x63, 0x33, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, // c3 FBToneMap( ve
	0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // c3 color).{.floa
	0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, // t l = dot(color,
	0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2c, 0x30, 0x2e, // vec3(0.176204,0.
	0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2c, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, // 812985,0.0108109
	0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // ));.return color
	0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, //  * ((l*0.25 + 1.
	0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, // 0) / (l + 1.0));
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, // .}.vec4 Additive
	0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, // ( vec4 cBase, ve
	0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // c4 cBlend, float
	0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, //  percent).{.retu
	0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2b, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // rn cBase + cBlen
	0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // d*percent;.}.vec
	0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // 3 Screen ( vec3 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, // cBase, vec3 cBle
	0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, // nd).{.return 1.0
	0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, //  - (1.0 - cBase)
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, //  * (1.0 - cBlend
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, // );.}.vec4 Screen
	0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, //  ( vec4 cBase, v
	0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // ec4 cBlend).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, // turn 1.0 - (1.0 
	0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, // - cBase) * (1.0 
	0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // - cBlend);.}.vec
	0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, // 3 ScreenHDR ( ve
	0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, // c3 cBase, vec3 c
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // Blend).{.return 
	0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, // max(1.0 - (1.0 -
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, //  cBase) * (1.0 -
	0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, //  cBlend), vec3(0
	0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // .,0.,0.));.}.vec
	0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, // 4 ScreenHDR ( ve
	0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, // c4 cBase, vec4 c
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // Blend).{.return 
	0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, // max(1.0 - (1.0 -
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, //  cBase) * (1.0 -
	0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, //  cBlend), vec4(0
	0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // .,0.,0.,0.));.}.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x20, 0x28, 0x20, // vec4 Multiply ( 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // vec4 cBase, vec4
	0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, //  cBlend, float p
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // ercent).{.return
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2a, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, //  cBase * cBlend*
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, // percent;.}.vec4 
	0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, // Overlay ( vec4 c
	0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // Base, vec4 cBlen
	0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, // d).{.vec4 cNew =
	0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, //  step(0.5, cBase
	0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, // );.cNew = mix(cB
	0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, // ase*cBlend*2.0, 
	0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, // 1.0-2.0*(1.0-cBa
	0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, // se)*(1.0-cBlend)
	0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // , cNew);.return 
	0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, // cNew;.}.vec4 Ove
	0x72, 0x6c, 0x61, 0x79, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, // rlayHDR ( vec4 c
	0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // Base, vec4 cBlen
	0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, // d).{.vec4 cNew =
	0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, //  step(0.5, cBase
	0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x6d, 0x69, // );.cNew = max(mi
	0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, // x(cBase*cBlend*2
	0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, // .0, 1.0-2.0*(1.0
	0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, // -cBase)*(1.0-cBl
	0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, // end), cNew), vec
	0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, // 4(0.,0.,0.,0.));
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, // .return cNew;.}.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x73, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, // vec3 cos_hemisph
	0x65, 0x72, 0x65, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, // ere_sample( vec2
	0x20, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x68, 0x69, 0x20, //  t).{.float phi 
	0x3d, 0x20, 0x74, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x28, 0x32, 0x2e, 0x30, 0x2a, 0x33, 0x2e, 0x31, // = t.y * (2.0*3.1
	0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, // 4159265358979323
	0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x3b, // 84626433832795);
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, // .float cosTheta 
	0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x74, 0x2e, 0x78, // = sqrt(1.0 - t.x
	0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, // );.float sinThet
	0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, // a = sqrt(t.x);.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x70, 0x2c, 0x63, 0x70, 0x3b, 0x0a, 0x7b, 0x73, 0x70, 0x3d, // loat sp,cp;.{sp=
	0x73, 0x69, 0x6e, 0x28, 0x70, 0x68, 0x69, 0x29, 0x3b, 0x63, 0x70, 0x3d, 0x63, 0x6f, 0x73, 0x28, // sin(phi);cp=cos(
	0x70, 0x68, 0x69, 0x29, 0x3b, 0x7d, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // phi);};.return v
	0x65, 0x63, 0x33, 0x28, 0x63, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, // ec3(cp * sinThet
	0x61, 0x2c, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x73, 0x70, 0x20, // a, cosTheta, sp 
	0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // * sinTheta);.}.v
	0x65, 0x63, 0x33, 0x20, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x76, 0x65, // ec3 rotate_to_ve
	0x63, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, // ctor_upper( vec3
	0x20, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, //  vec, vec3 norma
	0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, // l).{.if(normal.y
	0x20, 0x3e, 0x20, 0x2d, 0x30, 0x2e, 0x39, 0x39, 0x39, 0x39, 0x39, 0x29, 0x0a, 0x7b, 0x0a, 0x66, //  > -0.99999).{.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x28, 0x31, 0x2e, // loat h = 1.0/(1.
	0x30, 0x2b, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, // 0+normal.y);.flo
	0x61, 0x74, 0x20, 0x68, 0x7a, 0x20, 0x3d, 0x20, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, // at hz = h*normal
	0x2e, 0x7a, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x3d, 0x20, // .z;.float hzx = 
	0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x3b, 0x0a, 0x72, 0x65, 0x74, // hz*normal.x;.ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, // urn vec3(.vec.x 
	0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x7a, 0x2a, 0x6e, // * (normal.y+hz*n
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x29, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x79, // ormal.z) + vec.y
	0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, //  * normal.x - ve
	0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, // c.z * hzx,.vec.y
	0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x2d, 0x20, 0x76, 0x65, //  * normal.y - ve
	0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, // c.x * normal.x -
	0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, //  vec.z * normal.
	0x7a, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, // z,.vec.y * norma
	0x6c, 0x2e, 0x7a, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x68, 0x7a, // l.z - vec.x * hz
	0x78, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, // x + vec.z * (nor
	0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, // mal.y+h*normal.x
	0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, // *normal.x));.}.e
	0x6c, 0x73, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x2d, 0x76, 0x65, 0x63, 0x3b, // lse return -vec;
	0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // .}.uniform vec4 
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x53, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, // Stereo_Saturatio
	0x6e, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // n;.uniform vec4 
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, // Stereo_MS_ZPD_YA
	0x78, 0x69, 0x73, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, // xis;.uniform sam
	0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x20, 0x74, 0x65, 0x78, 0x5f, // pler2DArray tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, // stereo_fb;.unifo
	0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, // rm sampler2DArra
	0x79, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, // y tex_stereo_dep
	0x74, 0x68, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, // th;.uniform vec4
	0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, 0x76, 0x65, 0x63, //  w_h_height;.vec
	0x33, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, // 3 gatherEyeColor
	0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x69, 0x73, // (vec2 u, bool is
	0x4c, 0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, // Left).{.return t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x6f, 0x64, // exture2DArrayLod
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, // (tex_stereo_fb, 
	0x76, 0x65, 0x63, 0x33, 0x28, 0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, 0x20, 0x69, // vec3(u.x, u.y, i
	0x73, 0x4c, 0x65, 0x66, 0x74, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x30, 0x20, 0x3a, 0x20, 0x31, 0x2e, // sLeft ? 0.0 : 1.
	0x30, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // 0), 0.).rgb;.}.v
	0x6f, 0x69, 0x64, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x69, // oid gatherLeftRi
	0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, // ghtColors(vec2 u
	0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x63, 0x6f, 0x6c, 0x2c, // , out vec3 lcol,
	0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x6f, 0x6c, 0x29, 0x0a, //  out vec3 rcol).
	0x7b, 0x0a, 0x6c, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // {.lcol = texture
	0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, // 2DArrayLod(tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x75, // tereo_fb, vec3(u
	0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2c, 0x20, 0x30, 0x2e, // .x, u.y, 0.), 0.
	0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x72, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, // ).xyz;.rcol = te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x6f, 0x64, 0x28, // xture2DArrayLod(
	0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x76, // tex_stereo_fb, v
	0x65, 0x63, 0x33, 0x28, 0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, // ec3(u.x, u.y, 1.
	0x29, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, // ), 0.).xyz;.}.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // iform mat4 Stere
	0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, // o_LeftMat;.unifo
	0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, // rm mat4 Stereo_R
	0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // ightMat;.uniform
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, //  vec4 Stereo_Lef
	0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, // tLuminance_Gamma
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, // ;.uniform vec4 S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, // tereo_RightLumin
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x3b, 0x0a, 0x76, // ance_DynDesat;.v
	0x6f, 0x69, 0x64, 0x20, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x65, 0x73, 0x61, 0x74, // oid DynamicDesat
	0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, // Anaglyph( vec3 l
	0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // Col, vec3 rCol, 
	0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, // out vec3 lDesatC
	0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x44, 0x65, // ol, out vec3 rDe
	0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // satCol).{.float 
	0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, // left2LeftLum = d
	0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // ot(lCol, Stereo_
	0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, // LeftLuminance_Ga
	0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // mma.xyz);.float 
	0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, // left2RightLum = 
	0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // dot(lCol, Stereo
	0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, // _RightLuminance_
	0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, // DynDesat.xyz);.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, // loat right2LeftL
	0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, // um = dot(rCol, S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, // tereo_LeftLumina
	0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, // nce_Gamma.xyz);.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, // float right2Righ
	0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, // tLum = dot(rCol,
	0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, //  Stereo_RightLum
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, // inance_DynDesat.
	0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, // xyz);.float left
	0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, // Lum = left2LeftL
	0x75, 0x6d, 0x20, 0x2b, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, // um + left2RightL
	0x75, 0x6d, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, // um;.float rightL
	0x75, 0x6d, 0x20, 0x3d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, // um = right2LeftL
	0x75, 0x6d, 0x20, 0x2b, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, // um + right2Right
	0x4c, 0x75, 0x6d, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, // Lum;.float leftD
	0x65, 0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, // esat = Stereo_Ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, // ghtLuminance_Dyn
	0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x6c, // Desat.w * abs((l
	0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x6c, 0x65, // eft2LeftLum - le
	0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, // ft2RightLum) / (
	0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, // leftLum + 0.0001
	0x29, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, // ));.float rightD
	0x65, 0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, // esat = Stereo_Ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, // ghtLuminance_Dyn
	0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x72, // Desat.w * abs((r
	0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x72, // ight2LeftLum - r
	0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, // ight2RightLum) /
	0x20, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, //  (rightLum + 0.0
	0x30, 0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, // 001));.lDesatCol
	0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, //  = mix(lCol, vec
	0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x29, // 3_splat(leftLum)
	0x2c, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x72, 0x44, // , leftDesat);.rD
	0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x72, 0x43, // esatCol = mix(rC
	0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x72, // ol, vec3_splat(r
	0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, // ightLum), rightD
	0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x4c, 0x69, // esat);.}.vec3 Li
	0x6e, 0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, // nearAnaglyph( ve
	0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, // c3 lCol, vec3 rC
	0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // ol).{.vec3 color
	0x20, 0x3d, 0x20, 0x28, 0x28, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x6c, 0x43, 0x6f, 0x6c, //  = (( (vec4(lCol
	0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // , 1.)) * (Stereo
	0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x20, // _LeftMat) ) + ( 
	0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, // (vec4(rCol, 1.))
	0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, //  * (Stereo_Right
	0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x72, 0x65, 0x74, // Mat) )).rgb;.ret
	0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, // urn color;.}.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // form vec4 Stereo
	0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, // _DeghostGamma;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, // niform mat4 Ster
	0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, // eo_DeghostFilter
	0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x6e, // ;.vec3 DeghostAn
	0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, // aglyph( vec3 lCo
	0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, // l, vec3 rCol).{.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, 0x6e, // vec3 color = Lin
	0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, // earAnaglyph(lCol
	0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // , rCol);.return 
	0x28, 0x20, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x53, 0x74, // ( (pow(color, St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, // ereo_DeghostGamm
	0x61, 0x2e, 0x72, 0x67, 0x62, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, // a.rgb)) * (mat3(
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, // Stereo_DeghostFi
	0x6c, 0x74, 0x65, 0x72, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, // lter[0].xyz, Ste
	0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, // reo_DeghostFilte
	0x72, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // r[1].xyz, Stereo
	0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x32, // _DeghostFilter[2
	0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, // ].xyz)) );.}.voi
	0x64, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x62, 0x67, 0x66, 0x78, 0x5f, // d main().{.bgfx_
	0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, // FragColor = vec4
	0x28, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x28, // (gatherEyeColor(
	0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2c, 0x20, 0x66, 0x72, 0x61, // v_texcoord0, fra
	0x63, 0x74, 0x28, 0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x2e, // ct(gl_FragCoord.
	0x79, 0x2a, 0x30, 0x2e, 0x35, 0x29, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x2c, 0x20, // y*0.5) >= 0.5), 
	0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x00,                                           // 1.0);.}..
};
static const uint8_t fs_pp_stereo_flipped_int_st_glsl[8578] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6f, 0x21, // FSH.Jc._......o!
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x34, 0x34, 0x30, 0x0a, 0x23, // ..#version 440.#
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x47, 0x4c, 0x5f, 0x45, 0x58, 0x54, // extension GL_EXT
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x20, 0x3a, // _texture_array :
	0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x0a, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, //  enable.out vec4
	0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, //  bgfx_FragColor;
	0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, // .#define gl_Frag
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, // Color bgfx_FragC
	0x6f, 0x6c, 0x6f, 0x72, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, // olor.#define tex
	0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ture2D          
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, // texture.#define 
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, // texture2DLod    
	0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, //    textureLod.#d
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x47, // efine texture2DG
	0x72, 0x61, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // rad      texture
	0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, // Grad.#define tex
	0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, // ture2DProjLod   
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x4c, 0x6f, 0x64, 0x0a, 0x23, // textureProjLod.#
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, // define texture2D
	0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // ProjGrad  textur
	0x65, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, // eProjGrad.#defin
	0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x4c, 0x6f, 0x64, // e textureCubeLod
	0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x0a, //      textureLod.
	0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, // #define textureC
	0x75, 0x62, 0x65, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, // ubeGrad    textu
	0x72, 0x65, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, // reGrad.#define t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x33, 0x44, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // exture3D        
	0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, //   texture.#defin
	0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x4c, 0x6f, 0x64, 0x4f, 0x66, // e texture2DLodOf
	0x66, 0x73, 0x65, 0x74, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x4f, // fset textureLodO
	0x66, 0x66, 0x73, 0x65, 0x74, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x61, 0x74, // ffset.#define at
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, // tribute in.#defi
	0x6e, 0x65, 0x20, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, // ne varying in.#d
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x62, 0x67, 0x66, 0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, // efine bgfxShadow
	0x32, 0x44, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, // 2D(_sampler, _co
	0x6f, 0x72, 0x64, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, // ord)     vec4_sp
	0x6c, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x5f, 0x73, 0x61, 0x6d, // lat(texture(_sam
	0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x29, 0x0a, // pler, _coord) ).
	0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x62, 0x67, 0x66, 0x78, 0x53, 0x68, 0x61, 0x64, // #define bgfxShad
	0x6f, 0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // ow2DProj(_sample
	0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, // r, _coord) vec4_
	0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, // splat(texturePro
	0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, // j(_sampler, _coo
	0x72, 0x64, 0x29, 0x20, 0x29, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x66, 0x6c, // rd) ).varying fl
	0x6f, 0x61, 0x74, 0x20, 0x76, 0x5f, 0x65, 0x79, 0x65, 0x3b, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, // oat v_eye;.varyi
	0x6e, 0x67, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, // ng vec2 v_texcoo
	0x72, 0x64, 0x30, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, // rd0;.vec3 instMu
	0x6c, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, // l(vec3 _vec, mat
	0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // 3 _mtx) { return
	0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, //  ( (_vec) * (_mt
	0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, // x) ); }.vec3 ins
	0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, // tMul(mat3 _mtx, 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // vec3 _vec) { ret
	0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, // urn ( (_mtx) * (
	0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, // _vec) ); }.vec4 
	0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, // instMul(vec4 _ve
	0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, // c, mat4 _mtx) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, // return ( (_vec) 
	0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, // * (_mtx) ); }.ve
	0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x20, // c4 instMul(mat4 
	0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, // _mtx, vec4 _vec)
	0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, //  { return ( (_mt
	0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, // x) * (_vec) ); }
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, 0x70, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, // .float rcp(float
	0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, //  _a) { return 1.
	0x30, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x63, 0x70, // 0/_a; }.vec2 rcp
	0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // (vec2 _a) { retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, // rn vec2(1.0)/_a;
	0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x33, //  }.vec3 rcp(vec3
	0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, //  _a) { return ve
	0x63, 0x33, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, // c3(1.0)/_a; }.ve
	0x63, 0x34, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x61, 0x29, 0x20, // c4 rcp(vec4 _a) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x31, 0x2e, // { return vec4(1.
	0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x65, // 0)/_a; }.vec2 ve
	0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, // c2_splat(float _
	0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, // x) { return vec2
	0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, // (_x, _x); }.vec3
	0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, //  vec3_splat(floa
	0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // t _x) { return v
	0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, // ec3(_x, _x, _x);
	0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, //  }.vec4 vec4_spl
	0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, // at(float _x) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, // eturn vec4(_x, _
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, // x, _x, _x); }.uv
	0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, // ec2 uvec2_splat(
	0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, // uint _x) { retur
	0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, // n uvec2(_x, _x);
	0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, //  }.uvec3 uvec3_s
	0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, // plat(uint _x) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, // return uvec3(_x,
	0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, //  _x, _x); }.uvec
	0x34, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, // 4 uvec4_splat(ui
	0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // nt _x) { return 
	0x75, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, // uvec4(_x, _x, _x
	0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, // , _x); }.mat4 mt
	0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, // xFromRows(vec4 _
	0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // 0, vec4 _1, vec4
	0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, //  _2, vec4 _3).{.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, // return transpose
	0x28, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, // (mat4(_0, _1, _2
	0x2c, 0x20, 0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, // , _3) );.}.mat4 
	0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, // mtxFromCols(vec4
	0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, //  _0, vec4 _1, ve
	0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, // c4 _2, vec4 _3).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, // {.return mat4(_0
	0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x3b, 0x0a, 0x7d, // , _1, _2, _3);.}
	0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, // .mat3 mtxFromRow
	0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // s(vec3 _0, vec3 
	0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, // _1, vec3 _2).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, // eturn transpose(
	0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, // mat3(_0, _1, _2)
	0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, //  );.}.mat3 mtxFr
	0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, // omCols(vec3 _0, 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, // vec3 _1, vec3 _2
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x28, // ).{.return mat3(
	0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, // _0, _1, _2);.}.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, // niform vec4 u_vi
	0x65, 0x77, 0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // ewRect;.uniform 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x54, 0x65, 0x78, 0x65, 0x6c, // vec4 u_viewTexel
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, // ;.uniform mat4 u
	0x5f, 0x76, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, // _view;.uniform m
	0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, // at4 u_invView;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x70, 0x72, // niform mat4 u_pr
	0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, // oj;.uniform mat4
	0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, //  u_invProj;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x50, // orm mat4 u_viewP
	0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, // roj;.uniform mat
	0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, // 4 u_invViewProj;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, // .uniform mat4 u_
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, // model[32];.unifo
	0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, // rm mat4 u_modelV
	0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, // iew;.uniform mat
	0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, // 4 u_modelViewPro
	0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // j;.uniform vec4 
	0x75, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x66, 0x34, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, // u_alphaRef4;.flo
	0x61, 0x74, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, // at sqr( float v)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, // .{.return v*v;.}
	0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, // .vec2 sqr( vec2 
	0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, // v).{.return v*v;
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, // .}.vec3 sqr( vec
	0x33, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, // 3 v).{.return v*
	0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6d, 0x75, 0x6c, 0x5f, 0x77, 0x31, // v;.}.vec3 mul_w1
	0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, // ( vec3 v, mat4 m
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2e, 0x78, 0x2a, 0x6d, // ).{.return v.x*m
	0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x79, 0x2a, 0x6d, // [0].xyz + (v.y*m
	0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x7a, 0x2a, 0x6d, // [1].xyz + (v.z*m
	0x5b, 0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x6d, 0x5b, 0x33, 0x5d, 0x2e, 0x78, // [2].xyz + m[3].x
	0x79, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x63, // yz));.}.float ac
	0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, // os_approx_divPI(
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, //  float v).{.floa
	0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, // t x = abs(v);.if
	0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, // (1. - x <= 0.000
	0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, // 06103515625).ret
	0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, // urn (v >= 0.) ? 
	0x30, 0x2e, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, // 0. : 1.;.float r
	0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, // es = ((-0.155972
	0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, // /3.1415926535897
	0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, // 9323846264338327
	0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, // 95) * x + (1.564
	0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, // 67/3.14159265358
	0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, // 9793238462643383
	0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, // 2795) ) * sqrt(1
	0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // . - x);.return (
	0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, // v >= 0.) ? res :
	0x20, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, //  1. - res;.}.flo
	0x61, 0x74, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, // at atan2_approx_
	0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x79, 0x2c, // div2PI( float y,
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, //  float x).{.floa
	0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x79, 0x29, // t abs_y = abs(y)
	0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3d, 0x20, // ;.float abs_x = 
	0x61, 0x62, 0x73, 0x28, 0x78, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, // abs(x);.if(abs_x
	0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, //  <= 0.0000610351
	0x35, 0x36, 0x32, 0x35, 0x20, 0x26, 0x26, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3c, 0x3d, // 5625 && abs_y <=
	0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, //  0.0000610351562
	0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x30, 0x2e, 0x3b, 0x0a, 0x66, 0x6c, // 5).return 0.;.fl
	0x6f, 0x61, 0x74, 0x20, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2d, // oat r = (abs_x -
	0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, //  abs_y) / (abs_x
	0x20, 0x2b, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, //  + abs_y);.float
	0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, //  angle = ((x < 0
	0x2e, 0x29, 0x20, 0x3f, 0x20, 0x28, 0x33, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x20, 0x3a, 0x20, 0x28, // .) ? (3./8.) : (
	0x31, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x29, 0x0a, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x32, 0x31, 0x31, // 1./8.)).+ (0.211
	0x38, 0x36, 0x38, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, // 868 /(2.*3.14159
	0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, // 2653589793238462
	0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x72, 0x20, // 6433832795) * r 
	0x2a, 0x20, 0x72, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x39, 0x38, 0x37, 0x33, 0x30, 0x35, 0x20, 0x2f, // * r - 0.987305 /
	0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, // (2.*3.1415926535
	0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, // 8979323846264338
	0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, // 32795)) * ((x < 
	0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x72, 0x20, 0x3a, 0x20, 0x72, 0x29, 0x3b, 0x0a, 0x72, // 0.) ? -r : r);.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x79, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, // eturn (y < 0.) ?
	0x20, 0x2d, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3a, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x3b, //  -angle : angle;
	0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x73, 0x69, 0x6e, 0x5f, 0x61, 0x70, // .}.float asin_ap
	0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, // prox_divPI( floa
	0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, // t v).{.float x =
	0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, //  abs(v);.if(1. -
	0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, //  x <= 0.00006103
	0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // 515625).return (
	0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x3a, // v >= 0.) ? 0.5 :
	0x20, 0x2d, 0x30, 0x2e, 0x35, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, //  -0.5;.float res
	0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, //  = ((-0.155972/3
	0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, // .141592653589793
	0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, // 2384626433832795
	0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, // ) * x + (1.56467
	0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, // /3.1415926535897
	0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, // 9323846264338327
	0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, // 95) ) * sqrt(1. 
	0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, // - x);.return (v 
	0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x2d, 0x20, 0x72, // >= 0.) ? 0.5 - r
	0x65, 0x73, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x65, 0x73, 0x3b, // es : -0.5 + res;
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x61, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x65, // .}.vec2 ray_to_e
	0x71, 0x75, 0x69, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x75, // quirectangular_u
	0x76, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x61, 0x79, 0x29, 0x0a, 0x7b, 0x0a, 0x72, // v( vec3 ray).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x0a, 0x30, 0x2e, 0x35, 0x20, // eturn vec2(.0.5 
	0x2b, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, // + atan2_approx_d
	0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x79, 0x2c, 0x20, 0x72, 0x61, 0x79, // iv2PI(ray.y, ray
	0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, // .x),.acos_approx
	0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, // _divPI(ray.z));.
	0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, // }.float InvsRGB(
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, //  float color).{.
	0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, // if (color <= 0.0
	0x34, 0x30, 0x34, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, // 4045).return col
	0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x29, // or * (1.0/12.92)
	0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, // ;.else.return po
	0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, // w(color * (1.0/1
	0x2e, 0x30, 0x35, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x2f, 0x31, // .055) + (0.055/1
	0x2e, 0x30, 0x35, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // .055), 2.4);.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x20, // loat InvRec709( 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, // float color).{.i
	0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x38, // f (color <= 0.08
	0x31, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, // 1).return color 
	0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x34, 0x2e, 0x35, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, // * (1.0/4.5);.els
	0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, // e.return pow(col
	0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, // or * (1.0/1.099)
	0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, //  + (0.099/1.099)
	0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // , 1.0/0.45);.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x66, // loat InvGamma( f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // loat color).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, // turn InvsRGB(col
	0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x47, // or);.}.vec3 InvG
	0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // amma( vec3 color
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, // ).{.return vec3(
	0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, // InvGamma(color.x
	0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // ),InvGamma(color
	0x2e, 0x79, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, // .y),InvGamma(col
	0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, // or.z));.}.vec3 I
	0x6e, 0x76, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // nvToneMap( vec3 
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x69, // color).{.float i
	0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x30, 0x2e, 0x35, 0x2f, 0x30, 0x2e, 0x32, // nv_2bh = 0.5/0.2
	0x35, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x34, 0x2e, // 5;.float bh = 4.
	0x30, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2d, 0x20, 0x32, 0x2e, 0x30, 0x3b, 0x0a, 0x72, 0x65, // 0*0.25 - 2.0;.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2d, 0x20, 0x31, 0x2e, // turn (color - 1.
	0x30, 0x20, 0x2b, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2a, 0x28, // 0 + sqrt(color*(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x20, 0x62, 0x68, 0x29, 0x20, 0x2b, 0x20, 0x31, 0x2e, // color + bh) + 1.
	0x30, 0x29, 0x29, 0x2a, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // 0))*inv_2bh;.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // loat sRGB( float
	0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, //  f).{.float s;.i
	0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x33, 0x31, 0x33, 0x30, // f (f <= 0.003130
	0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x20, 0x2a, 0x20, 0x66, // 8).s = 12.92 * f
	0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x35, 0x35, // ;.else.s = 1.055
	0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, //  * pow(f, 1.0/2.
	0x34, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // 4) - 0.055;.retu
	0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x52, 0x65, // rn s;.}.float Re
	0x63, 0x37, 0x30, 0x39, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, // c709( float f).{
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, // .float s;.if (f 
	0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x34, 0x2e, // <= 0.018).s = 4.
	0x35, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, // 5 * f;.else.s = 
	0x31, 0x2e, 0x30, 0x39, 0x39, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x30, // 1.099 * pow(f, 0
	0x2e, 0x34, 0x35, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x3b, 0x0a, 0x72, 0x65, // .45) - 0.099;.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // turn s;.}.float 
	0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, // FBGamma( float c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, // olor).{.return s
	0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // RGB(color);.}.ve
	0x63, 0x32, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, // c2 FBGamma( vec2
	0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, //  color).{.return
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, //  vec2(FBGamma(co
	0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, // lor.x),FBGamma(c
	0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, // olor.y));.}.vec3
	0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, //  FBGamma( vec3 c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // olor).{.return v
	0x65, 0x63, 0x33, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // ec3(FBGamma(colo
	0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, // r.x),FBGamma(col
	0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, // or.y),FBGamma(co
	0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // lor.z));.}.vec3 
	0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x32, 0x32, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // FBGamma22( vec3 
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // color).{.return 
	0x76, 0x65, 0x63, 0x33, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, // vec3(pow(color.x
	0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, // , 1.0/2.2),pow(c
	0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, // olor.y, 1.0/2.2)
	0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x2c, 0x20, 0x31, 0x2e, // ,pow(color.z, 1.
	0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // 0/2.2));.}.float
	0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, //  FBToneMap( floa
	0x74, 0x20, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6c, 0x20, // t l).{.return l 
	0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, // * ((l*0.25 + 1.0
	0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, // ) / (l + 1.0));.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, // }.vec2 FBToneMap
	0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, // ( vec2 color).{.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, // float l = dot(co
	0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, // lor,vec2(0.17620
	0x34, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x2c, // 4+0.0108109*0.5,
	0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, // 0.812985+0.01081
	0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // 09*0.5));.return
	0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, //  color * ((l*0.2
	0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, // 5 + 1.0) / (l + 
	0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, // 1.0));.}.vec3 FB
	0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, // ToneMap( vec3 co
	0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, // lor).{.float l =
	0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x33, 0x28, //  dot(color,vec3(
	0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, // 0.176204,0.81298
	0x35, 0x2c, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x29, 0x29, 0x3b, 0x0a, 0x72, // 5,0.0108109));.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, // eturn color * ((
	0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, // l*0.25 + 1.0) / 
	0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // (l + 1.0));.}.ve
	0x63, 0x34, 0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x28, 0x20, 0x76, 0x65, 0x63, // c4 Additive( vec
	0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // 4 cBase, vec4 cB
	0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, // lend, float perc
	0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, // ent).{.return cB
	0x61, 0x73, 0x65, 0x20, 0x2b, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, // ase + cBlend*per
	0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, // cent;.}.vec3 Scr
	0x65, 0x65, 0x6e, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, // een ( vec3 cBase
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, // , vec3 cBlend).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, // .return 1.0 - (1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, // .0 - cBase) * (1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // .0 - cBlend);.}.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x20, 0x76, 0x65, // vec4 Screen ( ve
	0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, // c4 cBase, vec4 c
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // Blend).{.return 
	0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, // 1.0 - (1.0 - cBa
	0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, // se) * (1.0 - cBl
	0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, // end);.}.vec3 Scr
	0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, // eenHDR ( vec3 cB
	0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, // ase, vec3 cBlend
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, // ).{.return max(1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, // .0 - (1.0 - cBas
	0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, // e) * (1.0 - cBle
	0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, // nd), vec3(0.,0.,
	0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, // 0.));.}.vec4 Scr
	0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // eenHDR ( vec4 cB
	0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, // ase, vec4 cBlend
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, // ).{.return max(1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, // .0 - (1.0 - cBas
	0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, // e) * (1.0 - cBle
	0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, // nd), vec4(0.,0.,
	0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, // 0.,0.));.}.vec4 
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // Multiply ( vec4 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, // cBase, vec4 cBle
	0x6e, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, // nd, float percen
	0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, // t).{.return cBas
	0x65, 0x20, 0x2a, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, // e * cBlend*perce
	0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, // nt;.}.vec4 Overl
	0x61, 0x79, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, // ay ( vec4 cBase,
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, //  vec4 cBlend).{.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, // vec4 cNew = step
	0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, // (0.5, cBase);.cN
	0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, // ew = mix(cBase*c
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, // Blend*2.0, 1.0-2
	0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, // .0*(1.0-cBase)*(
	0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, // 1.0-cBlend), cNe
	0x77, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, // w);.return cNew;
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x48, // .}.vec4 OverlayH
	0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, // DR ( vec4 cBase,
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, //  vec4 cBlend).{.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, // vec4 cNew = step
	0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, // (0.5, cBase);.cN
	0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, // ew = max(mix(cBa
	0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, // se*cBlend*2.0, 1
	0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, // .0-2.0*(1.0-cBas
	0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, // e)*(1.0-cBlend),
	0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, //  cNew), vec4(0.,
	0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // 0.,0.,0.));.retu
	0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // rn cNew;.}.vec3 
	0x63, 0x6f, 0x73, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x5f, 0x73, // cos_hemisphere_s
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x29, 0x0a, 0x7b, // ample( vec2 t).{
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x68, 0x69, 0x20, 0x3d, 0x20, 0x74, 0x2e, 0x79, // .float phi = t.y
	0x20, 0x2a, 0x20, 0x28, 0x32, 0x2e, 0x30, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, //  * (2.0*3.141592
	0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, // 6535897932384626
	0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // 433832795);.floa
	0x74, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, // t cosTheta = sqr
	0x74, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, // t(1.0 - t.x);.fl
	0x6f, 0x61, 0x74, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, // oat sinTheta = s
	0x71, 0x72, 0x74, 0x28, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // qrt(t.x);.float 
	0x73, 0x70, 0x2c, 0x63, 0x70, 0x3b, 0x0a, 0x7b, 0x73, 0x70, 0x3d, 0x73, 0x69, 0x6e, 0x28, 0x70, // sp,cp;.{sp=sin(p
	0x68, 0x69, 0x29, 0x3b, 0x63, 0x70, 0x3d, 0x63, 0x6f, 0x73, 0x28, 0x70, 0x68, 0x69, 0x29, 0x3b, // hi);cp=cos(phi);
	0x7d, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x63, // };.return vec3(c
	0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x63, 0x6f, // p * sinTheta, co
	0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x73, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, // sTheta, sp * sin
	0x54, 0x68, 0x65, 0x74, 0x61, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, // Theta);.}.vec3 r
	0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, // otate_to_vector_
	0x75, 0x70, 0x70, 0x65, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x2c, // upper( vec3 vec,
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, //  vec3 normal).{.
	0x69, 0x66, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x3e, 0x20, 0x2d, 0x30, // if(normal.y > -0
	0x2e, 0x39, 0x39, 0x39, 0x39, 0x39, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // .99999).{.float 
	0x68, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x28, 0x31, 0x2e, 0x30, 0x2b, 0x6e, 0x6f, 0x72, // h = 1.0/(1.0+nor
	0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, // mal.y);.float hz
	0x20, 0x3d, 0x20, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x3b, 0x0a, 0x66, //  = h*normal.z;.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x3d, 0x20, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, // loat hzx = hz*no
	0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // rmal.x;.return v
	0x65, 0x63, 0x33, 0x28, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, // ec3(.vec.x * (no
	0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, // rmal.y+hz*normal
	0x2e, 0x7a, 0x29, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, // .z) + vec.y * no
	0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, // rmal.x - vec.z *
	0x20, 0x68, 0x7a, 0x78, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, //  hzx,.vec.y * no
	0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, // rmal.y - vec.x *
	0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, //  normal.x - vec.
	0x7a, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x2c, 0x0a, 0x76, 0x65, // z * normal.z,.ve
	0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x20, 0x2d, // c.y * normal.z -
	0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x2b, 0x20, 0x76, //  vec.x * hzx + v
	0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, // ec.z * (normal.y
	0x2b, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, // +h*normal.x*norm
	0x61, 0x6c, 0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x72, // al.x));.}.else r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x2d, 0x76, 0x65, 0x63, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, // eturn -vec;.}.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // iform vec4 Stere
	0x6f, 0x5f, 0x53, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x0a, 0x75, 0x6e, // o_Saturation;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // iform vec4 Stere
	0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x3b, 0x0a, // o_MS_ZPD_YAxis;.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, // uniform sampler2
	0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // DArray tex_stere
	0x6f, 0x5f, 0x66, 0x62, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, // o_fb;.uniform sa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x20, 0x74, 0x65, 0x78, // mpler2DArray tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x3b, 0x0a, 0x75, // _stereo_depth;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x77, 0x5f, 0x68, 0x5f, // niform vec4 w_h_
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x67, 0x61, 0x74, // height;.vec3 gat
	0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x76, 0x65, 0x63, 0x32, // herEyeColor(vec2
	0x20, 0x75, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x29, //  u, bool isLeft)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // .{.return textur
	0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, // e2DArrayLod(tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, // stereo_fb, vec3(
	0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, 0x20, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, // u.x, u.y, isLeft
	0x20, 0x3f, 0x20, 0x30, 0x2e, 0x30, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x30, //  ? 0.0 : 1.0), 0
	0x2e, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x67, // .).rgb;.}.void g
	0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, // atherLeftRightCo
	0x6c, 0x6f, 0x72, 0x73, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x6f, 0x75, 0x74, // lors(vec2 u, out
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x63, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, //  vec3 lcol, out 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x6c, 0x63, 0x6f, // vec3 rcol).{.lco
	0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x41, 0x72, 0x72, // l = texture2DArr
	0x61, 0x79, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // ayLod(tex_stereo
	0x5f, 0x66, 0x62, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, // _fb, vec3(u.x, u
	0x2e, 0x79, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2e, 0x78, 0x79, 0x7a, // .y, 0.), 0.).xyz
	0x3b, 0x0a, 0x72, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // ;.rcol = texture
	0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, // 2DArrayLod(tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x75, // tereo_fb, vec3(u
	0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, 0x29, 0x2c, 0x20, 0x30, 0x2e, // .x, u.y, 1.), 0.
	0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // ).xyz;.}.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, //  mat4 Stereo_Lef
	0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, // tMat;.uniform ma
	0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, // t4 Stereo_RightM
	0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, // at;.uniform vec4
	0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, //  Stereo_LeftLumi
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, 0x6e, 0x69, // nance_Gamma;.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // form vec4 Stereo
	0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, // _RightLuminance_
	0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x3b, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x44, // DynDesat;.void D
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x65, 0x73, 0x61, 0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, // ynamicDesatAnagl
	0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // yph( vec3 lCol, 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, // vec3 rCol, out v
	0x65, 0x63, 0x33, 0x20, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, // ec3 lDesatCol, o
	0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, // ut vec3 rDesatCo
	0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, // l).{.float left2
	0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, // LeftLum = dot(lC
	0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, // ol, Stereo_LeftL
	0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, // uminance_Gamma.x
	0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, // yz);.float left2
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, // RightLum = dot(l
	0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, // Col, Stereo_Righ
	0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, // tLuminance_DynDe
	0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // sat.xyz);.float 
	0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, // right2LeftLum = 
	0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // dot(rCol, Stereo
	0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, // _LeftLuminance_G
	0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // amma.xyz);.float
	0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, //  right2RightLum 
	0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, // = dot(rCol, Ster
	0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, // eo_RightLuminanc
	0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, // e_DynDesat.xyz);
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, // .float leftLum =
	0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, //  left2LeftLum + 
	0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, 0x0a, 0x66, // left2RightLum;.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, // loat rightLum = 
	0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, // right2LeftLum + 
	0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, 0x0a, // right2RightLum;.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x20, // float leftDesat 
	0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // = Stereo_RightLu
	0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, // minance_DynDesat
	0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, // .w * abs((left2L
	0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, // eftLum - left2Ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, // ghtLum) / (leftL
	0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x66, // um + 0.0001));.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x20, // loat rightDesat 
	0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // = Stereo_RightLu
	0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, // minance_DynDesat
	0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, // .w * abs((right2
	0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, // LeftLum - right2
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x72, 0x69, 0x67, // RightLum) / (rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, 0x29, // htLum + 0.0001))
	0x3b, 0x0a, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, // ;.lDesatCol = mi
	0x78, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, // x(lCol, vec3_spl
	0x61, 0x74, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x66, // at(leftLum), lef
	0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x72, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, // tDesat);.rDesatC
	0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, // ol = mix(rCol, v
	0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, // ec3_splat(rightL
	0x75, 0x6d, 0x29, 0x2c, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, // um), rightDesat)
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x41, // ;.}.vec3 LinearA
	0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, // naglyph( vec3 lC
	0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, // ol, vec3 rCol).{
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x28, // .vec3 color = ((
	0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, 0x29, //  (vec4(lCol, 1.)
	0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, // ) * (Stereo_Left
	0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, // Mat) ) + ( (vec4
	0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, // (rCol, 1.)) * (S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, // tereo_RightMat) 
	0x29, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, // )).rgb;.return c
	0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // olor;.}.uniform 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, // vec4 Stereo_Degh
	0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // ostGamma;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, // m mat4 Stereo_De
	0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3b, 0x0a, 0x76, 0x65, 0x63, // ghostFilter;.vec
	0x33, 0x20, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, // 3 DeghostAnaglyp
	0x68, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, // h( vec3 lCol, ve
	0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // c3 rCol).{.vec3 
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x41, 0x6e, // color = LinearAn
	0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, // aglyph(lCol, rCo
	0x6c, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x70, 0x6f, // l);.return ( (po
	0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // w(color, Stereo_
	0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x72, 0x67, 0x62, // DeghostGamma.rgb
	0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, // )) * (mat3(Stere
	0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, // o_DeghostFilter[
	0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, // 0].xyz, Stereo_D
	0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x31, 0x5d, 0x2e, // eghostFilter[1].
	0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, // xyz, Stereo_Degh
	0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, // ostFilter[2].xyz
	0x29, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x6d, 0x61, 0x69, // )) );.}.void mai
	0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, // n().{.gl_FragCol
	0x6f, 0x72, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, // or = vec4(gather
	0x45, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, // EyeColor(v_texco
	0x6f, 0x72, 0x64, 0x30, 0x2c, 0x20, 0x66, 0x72, 0x61, 0x63, 0x74, 0x28, 0x67, 0x6c, 0x5f, 0x46, // ord0, fract(gl_F
	0x72, 0x61, 0x67, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x2e, 0x79, 0x2a, 0x30, 0x2e, 0x35, 0x29, 0x20, // ragCoord.y*0.5) 
	0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x7d, // >= 0.5), 1.0);.}
	0x0a, 0x00,                                                                                     // ..
};
static const uint8_t fs_pp_stereo_flipped_int_st_dx11[602] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x0d, 0x74, // FSH.Jc._.......t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x30, 0x01, 0x00, 0x00, // ex_stereo_fb0...
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // .......tex_stere
	0x6f, 0x5f, 0x66, 0x62, 0x30, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x02, // o_fb0...........
	0x00, 0x00, 0x44, 0x58, 0x42, 0x43, 0xd8, 0xb2, 0xf7, 0xd0, 0xdb, 0xb8, 0x44, 0x80, 0x3a, 0x32, // ..DXBC......D.:2
	0x05, 0x36, 0x43, 0x2d, 0x0b, 0x55, 0x01, 0x00, 0x00, 0x00, 0x14, 0x02, 0x00, 0x00, 0x03, 0x00, // .6C-.U..........
	0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x9c, 0x00, 0x00, 0x00, 0xd0, 0x00, 0x00, 0x00, 0x49, 0x53, // ..,...........IS
	0x47, 0x4e, 0x68, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x50, 0x00, // GNh...........P.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x0f, 0x02, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x5c, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, // ................
	0x00, 0x00, 0x06, 0x06, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, // ......SV_POSITIO
	0x4e, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0xab, 0xab, 0xab, 0x4f, 0x53, // N.TEXCOORD....OS
	0x47, 0x4e, 0x2c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x20, 0x00, // GN,........... .
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x00, // ......SV_TARGET.
	0xab, 0xab, 0x53, 0x48, 0x45, 0x58, 0x3c, 0x01, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x4f, 0x00, // ..SHEX<...P...O.
	0x00, 0x00, 0x6a, 0x08, 0x00, 0x01, 0x5a, 0x00, 0x00, 0x03, 0x00, 0x60, 0x10, 0x00, 0x00, 0x00, // ..j...Z....`....
	0x00, 0x00, 0x58, 0x40, 0x00, 0x04, 0x00, 0x70, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x55, // ..X@...p......UU
	0x00, 0x00, 0x64, 0x20, 0x00, 0x04, 0x22, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, // ..d ..".........
	0x00, 0x00, 0x62, 0x10, 0x00, 0x03, 0x62, 0x10, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x65, 0x00, // ..b...b.......e.
	0x00, 0x03, 0xf2, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x02, 0x01, 0x00, // ... ......h.....
	0x00, 0x00, 0x38, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x10, // ..8.............
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x1a, 0x00, // .......@.....?..
	0x00, 0x05, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x1d, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, // ................
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x37, 0x00, // .......@.....?7.
	0x00, 0x09, 0x42, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, // ..B.............
	0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, // ...@.......@....
	0x80, 0x3f, 0x36, 0x00, 0x00, 0x05, 0x32, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x96, 0x15, // .?6...2.........
	0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0x02, 0x02, 0x00, 0x80, 0x43, 0x55, // ......H.......CU
	0x15, 0x00, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, // ..r.......F.....
	0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x00, 0x00, // ..F~.......`....
	0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x72, 0x20, // ...@......6...r 
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, // ......F.......6.
	0x00, 0x05, 0x82, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, // ... .......@....
	0x80, 0x3f, 0x3e, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,                                     // .?>.......
};
static const uint8_t fs_pp_stereo_flipped_int_st_spv[1198] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0d, 0x74, // FSH.Jc._.......t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x30, 0x00, 0x02, 0x00, // ex_stereo_fb0...
	0x00, 0x00, 0x00, 0x03, 0x22, 0x00, 0x80, 0x04, 0x00, 0x00, 0x03, 0x02, 0x23, 0x07, 0x00, 0x00, // ....".......#...
	0x01, 0x00, 0x0b, 0x00, 0x08, 0x00, 0xd7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, // ................
	0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, 0x4c, // ..............GL
	0x53, 0x4c, 0x2e, 0x73, 0x74, 0x64, 0x2e, 0x34, 0x35, 0x30, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, // SL.std.450......
	0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x08, 0x00, 0x04, 0x00, // ................
	0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x74, 0x00, // ......main....t.
	0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x89, 0x00, 0x00, 0x00, 0x10, 0x00, 0x03, 0x00, 0x04, 0x00, // ..|.............
	0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x03, 0x00, 0x03, 0x00, 0x05, 0x00, 0x00, 0x00, 0xf4, 0x01, // ................
	0x00, 0x00, 0x05, 0x00, 0x04, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, // ..........main..
	0x00, 0x00, 0x05, 0x00, 0x08, 0x00, 0x2d, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // ......-...tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x00, 0x00, // ereo_fbSampler..
	0x00, 0x00, 0x05, 0x00, 0x08, 0x00, 0x30, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // ......0...tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x00, 0x00, // ereo_fbTexture..
	0x00, 0x00, 0x05, 0x00, 0x06, 0x00, 0x74, 0x00, 0x00, 0x00, 0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, // ......t...gl_Fra
	0x67, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x05, 0x00, 0x7c, 0x00, // gCoord........|.
	0x00, 0x00, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x00, 0x05, 0x00, // ..v_texcoord0...
	0x06, 0x00, 0x89, 0x00, 0x00, 0x00, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, // ......bgfx_FragD
	0x61, 0x74, 0x61, 0x30, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x2d, 0x00, 0x00, 0x00, 0x22, 0x00, // ata0..G...-...".
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x2d, 0x00, 0x00, 0x00, 0x21, 0x00, // ......G...-...!.
	0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x30, 0x00, 0x00, 0x00, 0x22, 0x00, // ......G...0...".
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x30, 0x00, 0x00, 0x00, 0x21, 0x00, // ......G...0...!.
	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x74, 0x00, 0x00, 0x00, 0x0b, 0x00, // ......G...t.....
	0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x1e, 0x00, // ......G...|.....
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x89, 0x00, 0x00, 0x00, 0x1e, 0x00, // ......G.........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x21, 0x00, // ..............!.
	0x03, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x02, 0x00, 0x06, 0x00, // ................
	0x00, 0x00, 0x16, 0x00, 0x03, 0x00, 0x07, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x19, 0x00, // .......... .....
	0x09, 0x00, 0x08, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x03, 0x00, // ................
	0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x04, 0x00, // ................
	0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x19, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x02, 0x00, // ................
	0x00, 0x00, 0x14, 0x00, 0x02, 0x00, 0x1b, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x2c, 0x00, // .......... ...,.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x2c, 0x00, // ..........;...,.
	0x00, 0x00, 0x2d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x2f, 0x00, // ..-....... .../.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x2f, 0x00, // ..........;.../.
	0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x03, 0x00, 0x42, 0x00, // ..0...........B.
	0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x55, 0x00, // ......+.......U.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x56, 0x00, // ......+.......V.
	0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x66, 0x00, // .....?+.......f.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x20, 0x00, 0x04, 0x00, 0x73, 0x00, 0x00, 0x00, 0x01, 0x00, // .....? ...s.....
	0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x73, 0x00, 0x00, 0x00, 0x74, 0x00, // ......;...s...t.
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x7b, 0x00, 0x00, 0x00, 0x01, 0x00, // ...... ...{.....
	0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x7b, 0x00, 0x00, 0x00, 0x7c, 0x00, // ......;...{...|.
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x88, 0x00, 0x00, 0x00, 0x03, 0x00, // ...... .........
	0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x88, 0x00, 0x00, 0x00, 0x89, 0x00, // ......;.........
	0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x36, 0x00, 0x05, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, // ......6.........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x05, 0x00, // ................
	0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x2d, 0x00, // ..=...........-.
	0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x08, 0x00, 0x00, 0x00, 0x31, 0x00, 0x00, 0x00, 0x30, 0x00, // ..=.......1...0.
	0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x75, 0x00, 0x00, 0x00, 0x74, 0x00, // ..=.......u...t.
	0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x19, 0x00, 0x00, 0x00, 0x7d, 0x00, 0x00, 0x00, 0x7c, 0x00, // ..=.......}...|.
	0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xb0, 0x00, 0x00, 0x00, 0x75, 0x00, // ..Q...........u.
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xb1, 0x00, // ................
	0x00, 0x00, 0xb0, 0x00, 0x00, 0x00, 0x66, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x06, 0x00, 0x07, 0x00, // ......f.........
	0x00, 0x00, 0xb2, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0xb1, 0x00, // ................
	0x00, 0x00, 0xbe, 0x00, 0x05, 0x00, 0x1b, 0x00, 0x00, 0x00, 0xb3, 0x00, 0x00, 0x00, 0xb2, 0x00, // ................
	0x00, 0x00, 0x66, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xc4, 0x00, // ..f...Q.........
	0x00, 0x00, 0x7d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, // ..}.......Q.....
	0x00, 0x00, 0xc6, 0x00, 0x00, 0x00, 0x7d, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xa9, 0x00, // ......}.........
	0x06, 0x00, 0x07, 0x00, 0x00, 0x00, 0xc8, 0x00, 0x00, 0x00, 0xb3, 0x00, 0x00, 0x00, 0x55, 0x00, // ..............U.
	0x00, 0x00, 0x56, 0x00, 0x00, 0x00, 0x50, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xc9, 0x00, // ..V...P.........
	0x00, 0x00, 0xc4, 0x00, 0x00, 0x00, 0xc6, 0x00, 0x00, 0x00, 0xc8, 0x00, 0x00, 0x00, 0x56, 0x00, // ..............V.
	0x05, 0x00, 0x42, 0x00, 0x00, 0x00, 0xd3, 0x00, 0x00, 0x00, 0x31, 0x00, 0x00, 0x00, 0x2e, 0x00, // ..B.......1.....
	0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xd6, 0x00, 0x00, 0x00, 0xd3, 0x00, // ..X.............
	0x00, 0x00, 0xc9, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00, 0x51, 0x00, // ..........U...Q.
	0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xb6, 0x00, 0x00, 0x00, 0xd6, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xb7, 0x00, 0x00, 0x00, 0xd6, 0x00, // ..Q.............
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xb8, 0x00, // ......Q.........
	0x00, 0x00, 0xd6, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x50, 0x00, 0x07, 0x00, 0x0e, 0x00, // ..........P.....
	0x00, 0x00, 0xb9, 0x00, 0x00, 0x00, 0xb6, 0x00, 0x00, 0x00, 0xb7, 0x00, 0x00, 0x00, 0xb8, 0x00, // ................
	0x00, 0x00, 0x56, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x03, 0x00, 0x89, 0x00, 0x00, 0x00, 0xb9, 0x00, // ..V...>.........
	0x00, 0x00, 0xfd, 0x00, 0x01, 0x00, 0x38, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,             // ......8.......
};
static const bgfx::EmbeddedShader fs_pp_stereo_flipped_int_st = BGFX_EMBEDDED_SHADER(fs_pp_stereo_flipped_int_st);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Build of fragment shader from fs_pp_stereo.sc to fs_pp_stereo_anaglyph_deghost_st with options: ANAGLYPH DEGHOST STEREO
static const uint8_t fs_pp_stereo_anaglyph_deghost_st_mtl[1686] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x14, 0x74, // FSH.Jc._.......t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, // ex_stereo_fbSamp
	0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x74, 0x65, // ler...........te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x54, 0x65, 0x78, 0x74, 0x75, // x_stereo_fbTextu
	0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x74, 0x65, 0x78, // re...........tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, // _stereo_depthSam
	0x70, 0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x74, // pler...........t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x54, // ex_stereo_depthT
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, // exture..........
	0x0e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x14, // .Stereo_LeftMat.
	0x01, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // ..........Stereo
	0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x01, 0x40, 0x00, 0x04, 0x00, 0x00, // _RightMat..@....
	0x00, 0x00, 0x00, 0x14, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, // ....Stereo_Degho
	0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x14, 0x01, 0x90, 0x00, 0x04, 0x00, 0x00, 0x00, // stFilter........
	0x00, 0x00, 0x13, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, // ...Stereo_Deghos
	0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x12, 0x01, 0x80, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, // tGamma..........
	0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x10, 0x00, // .tex_stereo_fb..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0x05, 0x00, 0x00, 0x23, 0x69, 0x6e, 0x63, // ........v...#inc
	0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x64, 0x6c, // lude <metal_stdl
	0x69, 0x62, 0x3e, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x73, 0x69, // ib>.#include <si
	0x6d, 0x64, 0x2f, 0x73, 0x69, 0x6d, 0x64, 0x2e, 0x68, 0x3e, 0x0a, 0x0a, 0x75, 0x73, 0x69, 0x6e, // md/simd.h>..usin
	0x67, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x6d, 0x65, 0x74, 0x61, // g namespace meta
	0x6c, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x5f, 0x47, 0x6c, 0x6f, 0x62, // l;..struct _Glob
	0x61, 0x6c, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x78, // al.{.    float4x
	0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, // 4 Stereo_LeftMat
	0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x78, 0x34, 0x20, 0x53, // ;.    float4x4 S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, // tereo_RightMat;.
	0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, //     float4 Stere
	0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, // o_DeghostGamma;.
	0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x78, 0x34, 0x20, 0x53, 0x74, 0x65, //     float4x4 Ste
	0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, // reo_DeghostFilte
	0x72, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x78, 0x6c, // r;.};..struct xl
	0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x0a, 0x7b, 0x0a, // atMtlMain_out.{.
	0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, //     float4 bgfx_
	0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x20, 0x5b, 0x5b, 0x63, 0x6f, 0x6c, 0x6f, // FragData0 [[colo
	0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, // r(0)]];.};..stru
	0x63, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x69, // ct xlatMtlMain_i
	0x6e, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x76, // n.{.    float2 v
	0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x5b, 0x5b, 0x75, 0x73, 0x65, // _texcoord0 [[use
	0x72, 0x28, 0x6c, 0x6f, 0x63, 0x6e, 0x31, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, // r(locn1)]];.};..
	0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, // fragment xlatMtl
	0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, // Main_out xlatMtl
	0x4d, 0x61, 0x69, 0x6e, 0x28, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, // Main(xlatMtlMain
	0x5f, 0x69, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x5b, 0x5b, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, // _in in [[stage_i
	0x6e, 0x5d, 0x5d, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x20, 0x5f, 0x47, // n]], constant _G
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x26, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x20, 0x5b, 0x5b, // lobal& _mtl_u [[
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x74, 0x65, 0x78, // buffer(0)]], tex
	0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x3c, 0x66, 0x6c, 0x6f, // ture2d_array<flo
	0x61, 0x74, 0x3e, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, // at> tex_stereo_f
	0x62, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x30, 0x29, 0x5d, 0x5d, // b [[texture(0)]]
	0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // , sampler tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x5b, // ereo_fbSampler [
	0x5b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x29, 0x0a, 0x7b, // [sampler(0)]]).{
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, // .    xlatMtlMain
	0x5f, 0x6f, 0x75, 0x74, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x3d, 0x20, 0x7b, 0x7d, 0x3b, 0x0a, 0x20, // _out out = {};. 
	0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x32, 0x37, 0x34, 0x20, 0x3d, //    float3 _274 =
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, //  float3(in.v_tex
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, // coord0, 0.0);.  
	0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x32, 0x38, 0x32, 0x20, 0x3d, 0x20, //   float3 _282 = 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, // float3(in.v_texc
	0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, // oord0, 1.0);.   
	0x20, 0x6f, 0x75, 0x74, 0x2e, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, 0x61, //  out.bgfx_FragDa
	0x74, 0x61, 0x30, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x66, 0x6c, 0x6f, // ta0 = float4(flo
	0x61, 0x74, 0x33, 0x78, 0x33, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x6d, 0x74, // at3x3(float3(_mt
	0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, // l_u.Stereo_Degho
	0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x30, 0x5d, 0x5b, 0x30, 0x5d, 0x2c, 0x20, // stFilter[0][0], 
	0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, // _mtl_u.Stereo_De
	0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x31, 0x5d, 0x5b, 0x30, // ghostFilter[1][0
	0x5d, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // ], _mtl_u.Stereo
	0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x32, // _DeghostFilter[2
	0x5d, 0x5b, 0x30, 0x5d, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x6d, // ][0]), float3(_m
	0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, // tl_u.Stereo_Degh
	0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x30, 0x5d, 0x5b, 0x31, 0x5d, 0x2c, // ostFilter[0][1],
	0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, //  _mtl_u.Stereo_D
	0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x31, 0x5d, 0x5b, // eghostFilter[1][
	0x31, 0x5d, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, // 1], _mtl_u.Stere
	0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, // o_DeghostFilter[
	0x32, 0x5d, 0x5b, 0x31, 0x5d, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x5f, // 2][1]), float3(_
	0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, // mtl_u.Stereo_Deg
	0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x30, 0x5d, 0x5b, 0x32, 0x5d, // hostFilter[0][2]
	0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // , _mtl_u.Stereo_
	0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x31, 0x5d, // DeghostFilter[1]
	0x5b, 0x32, 0x5d, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, // [2], _mtl_u.Ster
	0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, // eo_DeghostFilter
	0x5b, 0x32, 0x5d, 0x5b, 0x32, 0x5d, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x72, 0x28, // [2][2])) * powr(
	0x28, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, // ((float4(tex_ste
	0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, // reo_fb.sample(te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, // x_stereo_fbSampl
	0x65, 0x72, 0x2c, 0x20, 0x5f, 0x32, 0x37, 0x34, 0x2e, 0x78, 0x79, 0x2c, 0x20, 0x75, 0x69, 0x6e, // er, _274.xy, uin
	0x74, 0x28, 0x72, 0x69, 0x6e, 0x74, 0x28, 0x5f, 0x32, 0x37, 0x34, 0x2e, 0x7a, 0x29, 0x29, 0x2c, // t(rint(_274.z)),
	0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x79, 0x7a, //  level(0.0)).xyz
	0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, // , 1.0) * _mtl_u.
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, // Stereo_LeftMat) 
	0x2b, 0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // + (float4(tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, // ereo_fb.sample(t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, // ex_stereo_fbSamp
	0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x32, 0x38, 0x32, 0x2e, 0x78, 0x79, 0x2c, 0x20, 0x75, 0x69, // ler, _282.xy, ui
	0x6e, 0x74, 0x28, 0x72, 0x69, 0x6e, 0x74, 0x28, 0x5f, 0x32, 0x38, 0x32, 0x2e, 0x7a, 0x29, 0x29, // nt(rint(_282.z))
	0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x79, // , level(0.0)).xy
	0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, // z, 1.0) * _mtl_u
	0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, // .Stereo_RightMat
	0x29, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, // )).xyz, _mtl_u.S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, // tereo_DeghostGam
	0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, // ma.xyz), 1.0);. 
	0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6f, 0x75, 0x74, 0x3b, 0x0a, 0x7d, //    return out;.}
	0x0a, 0x0a, 0x00, 0x00, 0x10, 0x01,                                                             // ......
};
static const uint8_t fs_pp_stereo_anaglyph_deghost_st_essl[8584] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x75, 0x21, // FSH.Jc._......u!
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x33, 0x32, 0x30, 0x20, 0x65, // ..#version 320 e
	0x73, 0x0a, 0x23, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x47, 0x4c, 0x5f, // s.#extension GL_
	0x45, 0x58, 0x54, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, // EXT_shader_textu
	0x72, 0x65, 0x5f, 0x6c, 0x6f, 0x64, 0x20, 0x3a, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x0a, // re_lod : enable.
	0x23, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x47, 0x4c, 0x5f, 0x45, 0x58, // #extension GL_EX
	0x54, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x20, // T_texture_array 
	0x3a, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, // : enable.#define
	0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, //  attribute in.#d
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, // efine varying in
	0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, // .precision highp
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3b, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, //  float;.precisio
	0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x69, 0x6e, 0x74, 0x3b, 0x0a, 0x70, 0x72, 0x65, // n highp int;.pre
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x73, 0x61, 0x6d, // cision highp sam
	0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x3b, 0x0a, 0x23, 0x64, 0x65, // pler2DArray;.#de
	0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x4c, 0x6f, // fine texture2DLo
	0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, // d      texture2D
	0x4c, 0x6f, 0x64, 0x45, 0x58, 0x54, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, // LodEXT.#define t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, 0x20, 0x20, // exture2DGrad    
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x47, 0x72, 0x61, 0x64, 0x45, 0x58, //  texture2DGradEX
	0x54, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // T.#define textur
	0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, // e2DProjLod  text
	0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x4c, 0x6f, 0x64, 0x45, 0x58, 0x54, 0x0a, // ure2DProjLodEXT.
	0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, // #define texture2
	0x44, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // DProjGrad textur
	0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, 0x45, 0x58, 0x54, 0x0a, 0x23, // e2DProjGradEXT.#
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, // define textureCu
	0x62, 0x65, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // beLod    texture
	0x43, 0x75, 0x62, 0x65, 0x4c, 0x6f, 0x64, 0x45, 0x58, 0x54, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, // CubeLodEXT.#defi
	0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x47, 0x72, // ne textureCubeGr
	0x61, 0x64, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, // ad   textureCube
	0x47, 0x72, 0x61, 0x64, 0x45, 0x58, 0x54, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, // GradEXT.#define 
	0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // shadow2D(_sample
	0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, // r, _coord) textu
	0x72, 0x65, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, // re(_sampler, _co
	0x6f, 0x72, 0x64, 0x29, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x73, 0x68, 0x61, // ord).#define sha
	0x64, 0x6f, 0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, // dow2DProj(_sampl
	0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x74, 0x65, 0x78, 0x74, // er, _coord) text
	0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // ureProj(_sampler
	0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x0a, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x65, // , _coord).out me
	0x64, 0x69, 0x75, 0x6d, 0x70, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, // diump vec4 bgfx_
	0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, // FragColor;.varyi
	0x6e, 0x67, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x5f, 0x65, 0x79, 0x65, 0x3b, 0x0a, // ng float v_eye;.
	0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x5f, 0x74, // varying vec2 v_t
	0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, // excoord0;.vec3 i
	0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, // nstMul(vec3 _vec
	0x2c, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, // , mat3 _mtx) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, // eturn ( (_vec) *
	0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, //  (_mtx) ); }.vec
	0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, // 3 instMul(mat3 _
	0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, // mtx, vec3 _vec) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, // { return ( (_mtx
	0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, // ) * (_vec) ); }.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, // vec4 instMul(vec
	0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, // 4 _vec, mat4 _mt
	0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, // x) { return ( (_
	0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, // vec) * (_mtx) );
	0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, //  }.vec4 instMul(
	0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // mat4 _mtx, vec4 
	0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // _vec) { return (
	0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, //  (_mtx) * (_vec)
	0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, 0x70, 0x28, //  ); }.float rcp(
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // float _a) { retu
	0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, // rn 1.0/_a; }.vec
	0x32, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, // 2 rcp(vec2 _a) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, //  return vec2(1.0
	0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x70, // )/_a; }.vec3 rcp
	0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // (vec3 _a) { retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, // rn vec3(1.0)/_a;
	0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x34, //  }.vec4 rcp(vec4
	0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, //  _a) { return ve
	0x63, 0x34, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, // c4(1.0)/_a; }.ve
	0x63, 0x32, 0x20, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, // c2 vec2_splat(fl
	0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // oat _x) { return
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, //  vec2(_x, _x); }
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, // .vec3 vec3_splat
	0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // (float _x) { ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, // urn vec3(_x, _x,
	0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, 0x65, 0x63, //  _x); }.vec4 vec
	0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, // 4_splat(float _x
	0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, // ) { return vec4(
	0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, // _x, _x, _x, _x);
	0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, //  }.uvec2 uvec2_s
	0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, // plat(uint _x) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, // return uvec2(_x,
	0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, 0x75, 0x76, //  _x); }.uvec3 uv
	0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, // ec3_splat(uint _
	0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, // x) { return uvec
	0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, // 3(_x, _x, _x); }
	0x0a, 0x75, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, // .uvec4 uvec4_spl
	0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // at(uint _x) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, // turn uvec4(_x, _
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x6d, 0x61, // x, _x, _x); }.ma
	0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, // t4 mtxFromRows(v
	0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, // ec4 _0, vec4 _1,
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, //  vec4 _2, vec4 _
	0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, // 3).{.return tran
	0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, // spose(mat4(_0, _
	0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // 1, _2, _3) );.}.
	0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, // mat4 mtxFromCols
	0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, // (vec4 _0, vec4 _
	0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // 1, vec4 _2, vec4
	0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, //  _3).{.return ma
	0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, // t4(_0, _1, _2, _
	0x33, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, // 3);.}.mat3 mtxFr
	0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, // omRows(vec3 _0, 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, // vec3 _1, vec3 _2
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, // ).{.return trans
	0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, // pose(mat3(_0, _1
	0x2c, 0x20, 0x5f, 0x32, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, // , _2) );.}.mat3 
	0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, // mtxFromCols(vec3
	0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, //  _0, vec3 _1, ve
	0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // c3 _2).{.return 
	0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, // mat3(_0, _1, _2)
	0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, // ;.}.uniform vec4
	0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, //  u_viewRect;.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, // form vec4 u_view
	0x54, 0x65, 0x78, 0x65, 0x6c, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, // Texel;.uniform m
	0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // at4 u_view;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, // orm mat4 u_invVi
	0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, // ew;.uniform mat4
	0x20, 0x75, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, //  u_proj;.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, 0x6a, 0x3b, //  mat4 u_invProj;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, // .uniform mat4 u_
	0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // viewProj;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, // m mat4 u_invView
	0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, // Proj;.uniform ma
	0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, 0x3b, 0x0a, // t4 u_model[32];.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, // uniform mat4 u_m
	0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // odelView;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, // m mat4 u_modelVi
	0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // ewProj;.uniform 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x66, 0x34, // vec4 u_alphaRef4
	0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x66, 0x6c, 0x6f, // ;.float sqr( flo
	0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // at v).{.return v
	0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, // *v;.}.vec2 sqr( 
	0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // vec2 v).{.return
	0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x73, 0x71, 0x72, //  v*v;.}.vec3 sqr
	0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, // ( vec3 v).{.retu
	0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6d, // rn v*v;.}.vec3 m
	0x75, 0x6c, 0x5f, 0x77, 0x31, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x2c, 0x20, 0x6d, // ul_w1( vec3 v, m
	0x61, 0x74, 0x34, 0x20, 0x6d, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // at4 m).{.return 
	0x76, 0x2e, 0x78, 0x2a, 0x6d, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, // v.x*m[0].xyz + (
	0x76, 0x2e, 0x79, 0x2a, 0x6d, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, // v.y*m[1].xyz + (
	0x76, 0x2e, 0x7a, 0x2a, 0x6d, 0x5b, 0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x6d, // v.z*m[2].xyz + m
	0x5b, 0x33, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // [3].xyz));.}.flo
	0x61, 0x74, 0x20, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, // at acos_approx_d
	0x69, 0x76, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, // ivPI( float v).{
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, // .float x = abs(v
	0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, // );.if(1. - x <= 
	0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, // 0.00006103515625
	0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, // ).return (v >= 0
	0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x3b, 0x0a, 0x66, 0x6c, // .) ? 0. : 1.;.fl
	0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, // oat res = ((-0.1
	0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, // 55972/3.14159265
	0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, // 3589793238462643
	0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, // 3832795) * x + (
	0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, // 1.56467/3.141592
	0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, // 6535897932384626
	0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, // 433832795) ) * s
	0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, // qrt(1. - x);.ret
	0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, // urn (v >= 0.) ? 
	0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, // res : 1. - res;.
	0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, // }.float atan2_ap
	0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, // prox_div2PI( flo
	0x61, 0x74, 0x20, 0x79, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x29, 0x0a, 0x7b, // at y, float x).{
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3d, 0x20, 0x61, // .float abs_y = a
	0x62, 0x73, 0x28, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, // bs(y);.float abs
	0x5f, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x78, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, // _x = abs(x);.if(
	0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, // abs_x <= 0.00006
	0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x20, 0x26, 0x26, 0x20, 0x61, 0x62, 0x73, // 103515625 && abs
	0x5f, 0x79, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, // _y <= 0.00006103
	0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x30, // 515625).return 0
	0x2e, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x61, 0x62, // .;.float r = (ab
	0x73, 0x5f, 0x78, 0x20, 0x2d, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x20, 0x2f, 0x20, 0x28, // s_x - abs_y) / (
	0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2b, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x3b, 0x0a, // abs_x + abs_y);.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3d, 0x20, 0x28, 0x28, // float angle = ((
	0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x28, 0x33, 0x2e, 0x2f, 0x38, 0x2e, // x < 0.) ? (3./8.
	0x29, 0x20, 0x3a, 0x20, 0x28, 0x31, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x29, 0x0a, 0x2b, 0x20, 0x28, // ) : (1./8.)).+ (
	0x30, 0x2e, 0x32, 0x31, 0x31, 0x38, 0x36, 0x38, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, // 0.211868 /(2.*3.
	0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, // 1415926535897932
	0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, // 384626433832795)
	0x20, 0x2a, 0x20, 0x72, 0x20, 0x2a, 0x20, 0x72, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x39, 0x38, 0x37, //  * r * r - 0.987
	0x33, 0x30, 0x35, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, // 305 /(2.*3.14159
	0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, // 2653589793238462
	0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, // 6433832795)) * (
	0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x72, 0x20, 0x3a, 0x20, // (x < 0.) ? -r : 
	0x72, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x79, 0x20, 0x3c, 0x20, // r);.return (y < 
	0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3a, 0x20, 0x61, // 0.) ? -angle : a
	0x6e, 0x67, 0x6c, 0x65, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x73, // ngle;.}.float as
	0x69, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, // in_approx_divPI(
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, //  float v).{.floa
	0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, // t x = abs(v);.if
	0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, // (1. - x <= 0.000
	0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, // 06103515625).ret
	0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, // urn (v >= 0.) ? 
	0x30, 0x2e, 0x35, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // 0.5 : -0.5;.floa
	0x74, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, // t res = ((-0.155
	0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, // 972/3.1415926535
	0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, // 8979323846264338
	0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, // 32795) * x + (1.
	0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, // 56467/3.14159265
	0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, // 3589793238462643
	0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, // 3832795) ) * sqr
	0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // t(1. - x);.retur
	0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, // n (v >= 0.) ? 0.
	0x35, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x20, 0x2b, // 5 - res : -0.5 +
	0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x61, 0x79, //  res;.}.vec2 ray
	0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x75, // _to_equirectangu
	0x6c, 0x61, 0x72, 0x5f, 0x75, 0x76, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x61, 0x79, // lar_uv( vec3 ray
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // ).{.return vec2(
	0x0a, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, // .0.5 + atan2_app
	0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x79, // rox_div2PI(ray.y
	0x2c, 0x20, 0x72, 0x61, 0x79, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, // , ray.x),.acos_a
	0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, // pprox_divPI(ray.
	0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, // z));.}.float Inv
	0x73, 0x52, 0x47, 0x42, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // sRGB( float colo
	0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, // r).{.if (color <
	0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, 0x34, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // = 0.04045).retur
	0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, // n color * (1.0/1
	0x32, 0x2e, 0x39, 0x32, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, // 2.92);.else.retu
	0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, // rn pow(color * (
	0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, // 1.0/1.055) + (0.
	0x30, 0x35, 0x35, 0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x29, // 055/1.055), 2.4)
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x52, 0x65, 0x63, // ;.}.float InvRec
	0x37, 0x30, 0x39, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // 709( float color
	0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, // ).{.if (color <=
	0x20, 0x30, 0x2e, 0x30, 0x38, 0x31, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, //  0.081).return c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x34, 0x2e, 0x35, 0x29, // olor * (1.0/4.5)
	0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, // ;.else.return po
	0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, // w(color * (1.0/1
	0x2e, 0x30, 0x39, 0x39, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x2f, 0x31, // .099) + (0.099/1
	0x2e, 0x30, 0x39, 0x39, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x30, 0x2e, 0x34, 0x35, 0x29, // .099), 1.0/0.45)
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, // ;.}.float InvGam
	0x6d, 0x61, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, // ma( float color)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, // .{.return InvsRG
	0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, // B(color);.}.vec3
	0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, //  InvGamma( vec3 
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // color).{.return 
	0x76, 0x65, 0x63, 0x33, 0x28, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, // vec3(InvGamma(co
	0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, // lor.x),InvGamma(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, // color.y),InvGamm
	0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // a(color.z));.}.v
	0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, // ec3 InvToneMap( 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, // vec3 color).{.fl
	0x6f, 0x61, 0x74, 0x20, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x30, 0x2e, // oat inv_2bh = 0.
	0x35, 0x2f, 0x30, 0x2e, 0x32, 0x35, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x68, // 5/0.25;.float bh
	0x20, 0x3d, 0x20, 0x34, 0x2e, 0x30, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2d, 0x20, 0x32, 0x2e, //  = 4.0*0.25 - 2.
	0x30, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // 0;.return (color
	0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2b, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x63, 0x6f, //  - 1.0 + sqrt(co
	0x6c, 0x6f, 0x72, 0x2a, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x20, 0x62, 0x68, 0x29, // lor*(color + bh)
	0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x2a, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, //  + 1.0))*inv_2bh
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x20, // ;.}.float sRGB( 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // float f).{.float
	0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, //  s;.if (f <= 0.0
	0x30, 0x33, 0x31, 0x33, 0x30, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, // 031308).s = 12.9
	0x32, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, // 2 * f;.else.s = 
	0x31, 0x2e, 0x30, 0x35, 0x35, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x31, // 1.055 * pow(f, 1
	0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x34, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x3b, // .0/2.4) - 0.055;
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // .return s;.}.flo
	0x61, 0x74, 0x20, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // at Rec709( float
	0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, //  f).{.float s;.i
	0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, 0x29, 0x0a, 0x73, // f (f <= 0.018).s
	0x20, 0x3d, 0x20, 0x34, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, //  = 4.5 * f;.else
	0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, // .s = 1.099 * pow
	0x28, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x39, // (f, 0.45) - 0.09
	0x39, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // 9;.return s;.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x66, 0x6c, // loat FBGamma( fl
	0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // oat color).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, // urn sRGB(color);
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, // .}.vec2 FBGamma(
	0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, //  vec2 color).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, // eturn vec2(FBGam
	0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, // ma(color.x),FBGa
	0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, // mma(color.y));.}
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, // .vec3 FBGamma( v
	0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // ec3 color).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, // urn vec3(FBGamma
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, // (color.x),FBGamm
	0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, // a(color.y),FBGam
	0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // ma(color.z));.}.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x32, 0x32, 0x28, 0x20, // vec3 FBGamma22( 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // vec3 color).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, // turn vec3(pow(co
	0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, // lor.x, 1.0/2.2),
	0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, 0x30, // pow(color.y, 1.0
	0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, // /2.2),pow(color.
	0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // z, 1.0/2.2));.}.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, // float FBToneMap(
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, //  float l).{.retu
	0x72, 0x6e, 0x20, 0x6c, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, // rn l * ((l*0.25 
	0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, // + 1.0) / (l + 1.
	0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x54, 0x6f, // 0));.}.vec2 FBTo
	0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // neMap( vec2 colo
	0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, // r).{.float l = d
	0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, // ot(color,vec2(0.
	0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, // 176204+0.0108109
	0x2a, 0x30, 0x2e, 0x35, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2b, 0x30, 0x2e, // *0.5,0.812985+0.
	0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x3b, 0x0a, 0x72, // 0108109*0.5));.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, // eturn color * ((
	0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, // l*0.25 + 1.0) / 
	0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // (l + 1.0));.}.ve
	0x63, 0x33, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, // c3 FBToneMap( ve
	0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // c3 color).{.floa
	0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, // t l = dot(color,
	0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2c, 0x30, 0x2e, // vec3(0.176204,0.
	0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2c, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, // 812985,0.0108109
	0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // ));.return color
	0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, //  * ((l*0.25 + 1.
	0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, // 0) / (l + 1.0));
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, // .}.vec4 Additive
	0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, // ( vec4 cBase, ve
	0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // c4 cBlend, float
	0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, //  percent).{.retu
	0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2b, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // rn cBase + cBlen
	0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // d*percent;.}.vec
	0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // 3 Screen ( vec3 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, // cBase, vec3 cBle
	0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, // nd).{.return 1.0
	0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, //  - (1.0 - cBase)
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, //  * (1.0 - cBlend
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, // );.}.vec4 Screen
	0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, //  ( vec4 cBase, v
	0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // ec4 cBlend).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, // turn 1.0 - (1.0 
	0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, // - cBase) * (1.0 
	0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // - cBlend);.}.vec
	0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, // 3 ScreenHDR ( ve
	0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, // c3 cBase, vec3 c
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // Blend).{.return 
	0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, // max(1.0 - (1.0 -
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, //  cBase) * (1.0 -
	0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, //  cBlend), vec3(0
	0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // .,0.,0.));.}.vec
	0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, // 4 ScreenHDR ( ve
	0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, // c4 cBase, vec4 c
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // Blend).{.return 
	0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, // max(1.0 - (1.0 -
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, //  cBase) * (1.0 -
	0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, //  cBlend), vec4(0
	0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // .,0.,0.,0.));.}.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x20, 0x28, 0x20, // vec4 Multiply ( 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // vec4 cBase, vec4
	0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, //  cBlend, float p
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // ercent).{.return
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2a, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, //  cBase * cBlend*
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, // percent;.}.vec4 
	0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, // Overlay ( vec4 c
	0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // Base, vec4 cBlen
	0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, // d).{.vec4 cNew =
	0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, //  step(0.5, cBase
	0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, // );.cNew = mix(cB
	0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, // ase*cBlend*2.0, 
	0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, // 1.0-2.0*(1.0-cBa
	0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, // se)*(1.0-cBlend)
	0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // , cNew);.return 
	0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, // cNew;.}.vec4 Ove
	0x72, 0x6c, 0x61, 0x79, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, // rlayHDR ( vec4 c
	0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // Base, vec4 cBlen
	0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, // d).{.vec4 cNew =
	0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, //  step(0.5, cBase
	0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x6d, 0x69, // );.cNew = max(mi
	0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, // x(cBase*cBlend*2
	0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, // .0, 1.0-2.0*(1.0
	0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, // -cBase)*(1.0-cBl
	0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, // end), cNew), vec
	0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, // 4(0.,0.,0.,0.));
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, // .return cNew;.}.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x73, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, // vec3 cos_hemisph
	0x65, 0x72, 0x65, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, // ere_sample( vec2
	0x20, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x68, 0x69, 0x20, //  t).{.float phi 
	0x3d, 0x20, 0x74, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x28, 0x32, 0x2e, 0x30, 0x2a, 0x33, 0x2e, 0x31, // = t.y * (2.0*3.1
	0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, // 4159265358979323
	0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x3b, // 84626433832795);
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, // .float cosTheta 
	0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x74, 0x2e, 0x78, // = sqrt(1.0 - t.x
	0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, // );.float sinThet
	0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, // a = sqrt(t.x);.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x70, 0x2c, 0x63, 0x70, 0x3b, 0x0a, 0x7b, 0x73, 0x70, 0x3d, // loat sp,cp;.{sp=
	0x73, 0x69, 0x6e, 0x28, 0x70, 0x68, 0x69, 0x29, 0x3b, 0x63, 0x70, 0x3d, 0x63, 0x6f, 0x73, 0x28, // sin(phi);cp=cos(
	0x70, 0x68, 0x69, 0x29, 0x3b, 0x7d, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // phi);};.return v
	0x65, 0x63, 0x33, 0x28, 0x63, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, // ec3(cp * sinThet
	0x61, 0x2c, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x73, 0x70, 0x20, // a, cosTheta, sp 
	0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // * sinTheta);.}.v
	0x65, 0x63, 0x33, 0x20, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x76, 0x65, // ec3 rotate_to_ve
	0x63, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, // ctor_upper( vec3
	0x20, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, //  vec, vec3 norma
	0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, // l).{.if(normal.y
	0x20, 0x3e, 0x20, 0x2d, 0x30, 0x2e, 0x39, 0x39, 0x39, 0x39, 0x39, 0x29, 0x0a, 0x7b, 0x0a, 0x66, //  > -0.99999).{.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x28, 0x31, 0x2e, // loat h = 1.0/(1.
	0x30, 0x2b, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, // 0+normal.y);.flo
	0x61, 0x74, 0x20, 0x68, 0x7a, 0x20, 0x3d, 0x20, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, // at hz = h*normal
	0x2e, 0x7a, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x3d, 0x20, // .z;.float hzx = 
	0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x3b, 0x0a, 0x72, 0x65, 0x74, // hz*normal.x;.ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, // urn vec3(.vec.x 
	0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x7a, 0x2a, 0x6e, // * (normal.y+hz*n
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x29, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x79, // ormal.z) + vec.y
	0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, //  * normal.x - ve
	0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, // c.z * hzx,.vec.y
	0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x2d, 0x20, 0x76, 0x65, //  * normal.y - ve
	0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, // c.x * normal.x -
	0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, //  vec.z * normal.
	0x7a, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, // z,.vec.y * norma
	0x6c, 0x2e, 0x7a, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x68, 0x7a, // l.z - vec.x * hz
	0x78, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, // x + vec.z * (nor
	0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, // mal.y+h*normal.x
	0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, // *normal.x));.}.e
	0x6c, 0x73, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x2d, 0x76, 0x65, 0x63, 0x3b, // lse return -vec;
	0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // .}.uniform vec4 
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x53, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, // Stereo_Saturatio
	0x6e, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // n;.uniform vec4 
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, // Stereo_MS_ZPD_YA
	0x78, 0x69, 0x73, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, // xis;.uniform sam
	0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x20, 0x74, 0x65, 0x78, 0x5f, // pler2DArray tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, // stereo_fb;.unifo
	0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, // rm sampler2DArra
	0x79, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, // y tex_stereo_dep
	0x74, 0x68, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, // th;.uniform vec4
	0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, 0x76, 0x65, 0x63, //  w_h_height;.vec
	0x33, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, // 3 gatherEyeColor
	0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x69, 0x73, // (vec2 u, bool is
	0x4c, 0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, // Left).{.return t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x6f, 0x64, // exture2DArrayLod
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, // (tex_stereo_fb, 
	0x76, 0x65, 0x63, 0x33, 0x28, 0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, 0x20, 0x69, // vec3(u.x, u.y, i
	0x73, 0x4c, 0x65, 0x66, 0x74, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x30, 0x20, 0x3a, 0x20, 0x31, 0x2e, // sLeft ? 0.0 : 1.
	0x30, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // 0), 0.).rgb;.}.v
	0x6f, 0x69, 0x64, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x69, // oid gatherLeftRi
	0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, // ghtColors(vec2 u
	0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x63, 0x6f, 0x6c, 0x2c, // , out vec3 lcol,
	0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x6f, 0x6c, 0x29, 0x0a, //  out vec3 rcol).
	0x7b, 0x0a, 0x6c, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // {.lcol = texture
	0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, // 2DArrayLod(tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x75, // tereo_fb, vec3(u
	0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2c, 0x20, 0x30, 0x2e, // .x, u.y, 0.), 0.
	0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x72, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, // ).xyz;.rcol = te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x6f, 0x64, 0x28, // xture2DArrayLod(
	0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x76, // tex_stereo_fb, v
	0x65, 0x63, 0x33, 0x28, 0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, // ec3(u.x, u.y, 1.
	0x29, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, // ), 0.).xyz;.}.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // iform mat4 Stere
	0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, // o_LeftMat;.unifo
	0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, // rm mat4 Stereo_R
	0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // ightMat;.uniform
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, //  vec4 Stereo_Lef
	0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, // tLuminance_Gamma
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, // ;.uniform vec4 S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, // tereo_RightLumin
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x3b, 0x0a, 0x76, // ance_DynDesat;.v
	0x6f, 0x69, 0x64, 0x20, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x65, 0x73, 0x61, 0x74, // oid DynamicDesat
	0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, // Anaglyph( vec3 l
	0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // Col, vec3 rCol, 
	0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, // out vec3 lDesatC
	0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x44, 0x65, // ol, out vec3 rDe
	0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // satCol).{.float 
	0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, // left2LeftLum = d
	0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // ot(lCol, Stereo_
	0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, // LeftLuminance_Ga
	0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // mma.xyz);.float 
	0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, // left2RightLum = 
	0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // dot(lCol, Stereo
	0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, // _RightLuminance_
	0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, // DynDesat.xyz);.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, // loat right2LeftL
	0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, // um = dot(rCol, S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, // tereo_LeftLumina
	0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, // nce_Gamma.xyz);.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, // float right2Righ
	0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, // tLum = dot(rCol,
	0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, //  Stereo_RightLum
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, // inance_DynDesat.
	0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, // xyz);.float left
	0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, // Lum = left2LeftL
	0x75, 0x6d, 0x20, 0x2b, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, // um + left2RightL
	0x75, 0x6d, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, // um;.float rightL
	0x75, 0x6d, 0x20, 0x3d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, // um = right2LeftL
	0x75, 0x6d, 0x20, 0x2b, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, // um + right2Right
	0x4c, 0x75, 0x6d, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, // Lum;.float leftD
	0x65, 0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, // esat = Stereo_Ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, // ghtLuminance_Dyn
	0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x6c, // Desat.w * abs((l
	0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x6c, 0x65, // eft2LeftLum - le
	0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, // ft2RightLum) / (
	0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, // leftLum + 0.0001
	0x29, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, // ));.float rightD
	0x65, 0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, // esat = Stereo_Ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, // ghtLuminance_Dyn
	0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x72, // Desat.w * abs((r
	0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x72, // ight2LeftLum - r
	0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, // ight2RightLum) /
	0x20, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, //  (rightLum + 0.0
	0x30, 0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, // 001));.lDesatCol
	0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, //  = mix(lCol, vec
	0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x29, // 3_splat(leftLum)
	0x2c, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x72, 0x44, // , leftDesat);.rD
	0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x72, 0x43, // esatCol = mix(rC
	0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x72, // ol, vec3_splat(r
	0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, // ightLum), rightD
	0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x4c, 0x69, // esat);.}.vec3 Li
	0x6e, 0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, // nearAnaglyph( ve
	0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, // c3 lCol, vec3 rC
	0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // ol).{.vec3 color
	0x20, 0x3d, 0x20, 0x28, 0x28, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x6c, 0x43, 0x6f, 0x6c, //  = (( (vec4(lCol
	0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // , 1.)) * (Stereo
	0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x20, // _LeftMat) ) + ( 
	0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, // (vec4(rCol, 1.))
	0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, //  * (Stereo_Right
	0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x72, 0x65, 0x74, // Mat) )).rgb;.ret
	0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, // urn color;.}.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // form vec4 Stereo
	0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, // _DeghostGamma;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, // niform mat4 Ster
	0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, // eo_DeghostFilter
	0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x6e, // ;.vec3 DeghostAn
	0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, // aglyph( vec3 lCo
	0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, // l, vec3 rCol).{.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, 0x6e, // vec3 color = Lin
	0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, // earAnaglyph(lCol
	0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // , rCol);.return 
	0x28, 0x20, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x53, 0x74, // ( (pow(color, St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, // ereo_DeghostGamm
	0x61, 0x2e, 0x72, 0x67, 0x62, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, // a.rgb)) * (mat3(
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, // Stereo_DeghostFi
	0x6c, 0x74, 0x65, 0x72, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, // lter[0].xyz, Ste
	0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, // reo_DeghostFilte
	0x72, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // r[1].xyz, Stereo
	0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x32, // _DeghostFilter[2
	0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, // ].xyz)) );.}.voi
	0x64, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // d main().{.vec3 
	0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x3b, 0x0a, 0x67, 0x61, 0x74, 0x68, // lCol, rCol;.gath
	0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, // erLeftRightColor
	0x73, 0x28, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2c, 0x20, 0x6c, // s(v_texcoord0, l
	0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x62, 0x67, 0x66, 0x78, // Col, rCol);.bgfx
	0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, // _FragColor = vec
	0x34, 0x28, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, // 4(DeghostAnaglyp
	0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x2c, 0x20, 0x31, // h(lCol, rCol), 1
	0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x00,                                                 // .0);.}..
};
static const uint8_t fs_pp_stereo_anaglyph_deghost_st_glsl[8609] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8e, 0x21, // FSH.Jc._.......!
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x34, 0x34, 0x30, 0x0a, 0x23, // ..#version 440.#
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x47, 0x4c, 0x5f, 0x45, 0x58, 0x54, // extension GL_EXT
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x20, 0x3a, // _texture_array :
	0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x0a, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, //  enable.out vec4
	0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, //  bgfx_FragColor;
	0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, // .#define gl_Frag
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, // Color bgfx_FragC
	0x6f, 0x6c, 0x6f, 0x72, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, // olor.#define tex
	0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ture2D          
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, // texture.#define 
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, // texture2DLod    
	0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, //    textureLod.#d
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x47, // efine texture2DG
	0x72, 0x61, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // rad      texture
	0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, // Grad.#define tex
	0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, // ture2DProjLod   
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x4c, 0x6f, 0x64, 0x0a, 0x23, // textureProjLod.#
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, // define texture2D
	0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // ProjGrad  textur
	0x65, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, // eProjGrad.#defin
	0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x4c, 0x6f, 0x64, // e textureCubeLod
	0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x0a, //      textureLod.
	0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, // #define textureC
	0x75, 0x62, 0x65, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, // ubeGrad    textu
	0x72, 0x65, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, // reGrad.#define t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x33, 0x44, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // exture3D        
	0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, //   texture.#defin
	0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x4c, 0x6f, 0x64, 0x4f, 0x66, // e texture2DLodOf
	0x66, 0x73, 0x65, 0x74, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x4f, // fset textureLodO
	0x66, 0x66, 0x73, 0x65, 0x74, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x61, 0x74, // ffset.#define at
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, // tribute in.#defi
	0x6e, 0x65, 0x20, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, // ne varying in.#d
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x62, 0x67, 0x66, 0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, // efine bgfxShadow
	0x32, 0x44, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, // 2D(_sampler, _co
	0x6f, 0x72, 0x64, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, // ord)     vec4_sp
	0x6c, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x5f, 0x73, 0x61, 0x6d, // lat(texture(_sam
	0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x29, 0x0a, // pler, _coord) ).
	0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x62, 0x67, 0x66, 0x78, 0x53, 0x68, 0x61, 0x64, // #define bgfxShad
	0x6f, 0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // ow2DProj(_sample
	0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, // r, _coord) vec4_
	0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, // splat(texturePro
	0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, // j(_sampler, _coo
	0x72, 0x64, 0x29, 0x20, 0x29, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x66, 0x6c, // rd) ).varying fl
	0x6f, 0x61, 0x74, 0x20, 0x76, 0x5f, 0x65, 0x79, 0x65, 0x3b, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, // oat v_eye;.varyi
	0x6e, 0x67, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, // ng vec2 v_texcoo
	0x72, 0x64, 0x30, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, // rd0;.vec3 instMu
	0x6c, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, // l(vec3 _vec, mat
	0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // 3 _mtx) { return
	0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, //  ( (_vec) * (_mt
	0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, // x) ); }.vec3 ins
	0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, // tMul(mat3 _mtx, 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // vec3 _vec) { ret
	0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, // urn ( (_mtx) * (
	0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, // _vec) ); }.vec4 
	0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, // instMul(vec4 _ve
	0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, // c, mat4 _mtx) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, // return ( (_vec) 
	0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, // * (_mtx) ); }.ve
	0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x20, // c4 instMul(mat4 
	0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, // _mtx, vec4 _vec)
	0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, //  { return ( (_mt
	0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, // x) * (_vec) ); }
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, 0x70, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, // .float rcp(float
	0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, //  _a) { return 1.
	0x30, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x63, 0x70, // 0/_a; }.vec2 rcp
	0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // (vec2 _a) { retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, // rn vec2(1.0)/_a;
	0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x33, //  }.vec3 rcp(vec3
	0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, //  _a) { return ve
	0x63, 0x33, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, // c3(1.0)/_a; }.ve
	0x63, 0x34, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x61, 0x29, 0x20, // c4 rcp(vec4 _a) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x31, 0x2e, // { return vec4(1.
	0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x65, // 0)/_a; }.vec2 ve
	0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, // c2_splat(float _
	0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, // x) { return vec2
	0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, // (_x, _x); }.vec3
	0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, //  vec3_splat(floa
	0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // t _x) { return v
	0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, // ec3(_x, _x, _x);
	0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, //  }.vec4 vec4_spl
	0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, // at(float _x) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, // eturn vec4(_x, _
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, // x, _x, _x); }.uv
	0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, // ec2 uvec2_splat(
	0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, // uint _x) { retur
	0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, // n uvec2(_x, _x);
	0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, //  }.uvec3 uvec3_s
	0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, // plat(uint _x) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, // return uvec3(_x,
	0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, //  _x, _x); }.uvec
	0x34, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, // 4 uvec4_splat(ui
	0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // nt _x) { return 
	0x75, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, // uvec4(_x, _x, _x
	0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, // , _x); }.mat4 mt
	0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, // xFromRows(vec4 _
	0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // 0, vec4 _1, vec4
	0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, //  _2, vec4 _3).{.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, // return transpose
	0x28, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, // (mat4(_0, _1, _2
	0x2c, 0x20, 0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, // , _3) );.}.mat4 
	0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, // mtxFromCols(vec4
	0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, //  _0, vec4 _1, ve
	0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, // c4 _2, vec4 _3).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, // {.return mat4(_0
	0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x3b, 0x0a, 0x7d, // , _1, _2, _3);.}
	0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, // .mat3 mtxFromRow
	0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // s(vec3 _0, vec3 
	0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, // _1, vec3 _2).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, // eturn transpose(
	0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, // mat3(_0, _1, _2)
	0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, //  );.}.mat3 mtxFr
	0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, // omCols(vec3 _0, 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, // vec3 _1, vec3 _2
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x28, // ).{.return mat3(
	0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, // _0, _1, _2);.}.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, // niform vec4 u_vi
	0x65, 0x77, 0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // ewRect;.uniform 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x54, 0x65, 0x78, 0x65, 0x6c, // vec4 u_viewTexel
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, // ;.uniform mat4 u
	0x5f, 0x76, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, // _view;.uniform m
	0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, // at4 u_invView;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x70, 0x72, // niform mat4 u_pr
	0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, // oj;.uniform mat4
	0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, //  u_invProj;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x50, // orm mat4 u_viewP
	0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, // roj;.uniform mat
	0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, // 4 u_invViewProj;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, // .uniform mat4 u_
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, // model[32];.unifo
	0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, // rm mat4 u_modelV
	0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, // iew;.uniform mat
	0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, // 4 u_modelViewPro
	0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // j;.uniform vec4 
	0x75, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x66, 0x34, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, // u_alphaRef4;.flo
	0x61, 0x74, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, // at sqr( float v)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, // .{.return v*v;.}
	0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, // .vec2 sqr( vec2 
	0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, // v).{.return v*v;
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, // .}.vec3 sqr( vec
	0x33, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, // 3 v).{.return v*
	0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6d, 0x75, 0x6c, 0x5f, 0x77, 0x31, // v;.}.vec3 mul_w1
	0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, // ( vec3 v, mat4 m
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2e, 0x78, 0x2a, 0x6d, // ).{.return v.x*m
	0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x79, 0x2a, 0x6d, // [0].xyz + (v.y*m
	0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x7a, 0x2a, 0x6d, // [1].xyz + (v.z*m
	0x5b, 0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x6d, 0x5b, 0x33, 0x5d, 0x2e, 0x78, // [2].xyz + m[3].x
	0x79, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x63, // yz));.}.float ac
	0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, // os_approx_divPI(
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, //  float v).{.floa
	0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, // t x = abs(v);.if
	0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, // (1. - x <= 0.000
	0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, // 06103515625).ret
	0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, // urn (v >= 0.) ? 
	0x30, 0x2e, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, // 0. : 1.;.float r
	0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, // es = ((-0.155972
	0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, // /3.1415926535897
	0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, // 9323846264338327
	0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, // 95) * x + (1.564
	0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, // 67/3.14159265358
	0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, // 9793238462643383
	0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, // 2795) ) * sqrt(1
	0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // . - x);.return (
	0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, // v >= 0.) ? res :
	0x20, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, //  1. - res;.}.flo
	0x61, 0x74, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, // at atan2_approx_
	0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x79, 0x2c, // div2PI( float y,
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, //  float x).{.floa
	0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x79, 0x29, // t abs_y = abs(y)
	0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3d, 0x20, // ;.float abs_x = 
	0x61, 0x62, 0x73, 0x28, 0x78, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, // abs(x);.if(abs_x
	0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, //  <= 0.0000610351
	0x35, 0x36, 0x32, 0x35, 0x20, 0x26, 0x26, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3c, 0x3d, // 5625 && abs_y <=
	0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, //  0.0000610351562
	0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x30, 0x2e, 0x3b, 0x0a, 0x66, 0x6c, // 5).return 0.;.fl
	0x6f, 0x61, 0x74, 0x20, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2d, // oat r = (abs_x -
	0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, //  abs_y) / (abs_x
	0x20, 0x2b, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, //  + abs_y);.float
	0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, //  angle = ((x < 0
	0x2e, 0x29, 0x20, 0x3f, 0x20, 0x28, 0x33, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x20, 0x3a, 0x20, 0x28, // .) ? (3./8.) : (
	0x31, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x29, 0x0a, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x32, 0x31, 0x31, // 1./8.)).+ (0.211
	0x38, 0x36, 0x38, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, // 868 /(2.*3.14159
	0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, // 2653589793238462
	0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x72, 0x20, // 6433832795) * r 
	0x2a, 0x20, 0x72, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x39, 0x38, 0x37, 0x33, 0x30, 0x35, 0x20, 0x2f, // * r - 0.987305 /
	0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, // (2.*3.1415926535
	0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, // 8979323846264338
	0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, // 32795)) * ((x < 
	0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x72, 0x20, 0x3a, 0x20, 0x72, 0x29, 0x3b, 0x0a, 0x72, // 0.) ? -r : r);.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x79, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, // eturn (y < 0.) ?
	0x20, 0x2d, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3a, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x3b, //  -angle : angle;
	0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x73, 0x69, 0x6e, 0x5f, 0x61, 0x70, // .}.float asin_ap
	0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, // prox_divPI( floa
	0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, // t v).{.float x =
	0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, //  abs(v);.if(1. -
	0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, //  x <= 0.00006103
	0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // 515625).return (
	0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x3a, // v >= 0.) ? 0.5 :
	0x20, 0x2d, 0x30, 0x2e, 0x35, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, //  -0.5;.float res
	0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, //  = ((-0.155972/3
	0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, // .141592653589793
	0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, // 2384626433832795
	0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, // ) * x + (1.56467
	0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, // /3.1415926535897
	0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, // 9323846264338327
	0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, // 95) ) * sqrt(1. 
	0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, // - x);.return (v 
	0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x2d, 0x20, 0x72, // >= 0.) ? 0.5 - r
	0x65, 0x73, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x65, 0x73, 0x3b, // es : -0.5 + res;
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x61, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x65, // .}.vec2 ray_to_e
	0x71, 0x75, 0x69, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x75, // quirectangular_u
	0x76, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x61, 0x79, 0x29, 0x0a, 0x7b, 0x0a, 0x72, // v( vec3 ray).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x0a, 0x30, 0x2e, 0x35, 0x20, // eturn vec2(.0.5 
	0x2b, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, // + atan2_approx_d
	0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x79, 0x2c, 0x20, 0x72, 0x61, 0x79, // iv2PI(ray.y, ray
	0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, // .x),.acos_approx
	0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, // _divPI(ray.z));.
	0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, // }.float InvsRGB(
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, //  float color).{.
	0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, // if (color <= 0.0
	0x34, 0x30, 0x34, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, // 4045).return col
	0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x29, // or * (1.0/12.92)
	0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, // ;.else.return po
	0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, // w(color * (1.0/1
	0x2e, 0x30, 0x35, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x2f, 0x31, // .055) + (0.055/1
	0x2e, 0x30, 0x35, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // .055), 2.4);.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x20, // loat InvRec709( 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, // float color).{.i
	0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x38, // f (color <= 0.08
	0x31, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, // 1).return color 
	0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x34, 0x2e, 0x35, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, // * (1.0/4.5);.els
	0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, // e.return pow(col
	0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, // or * (1.0/1.099)
	0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, //  + (0.099/1.099)
	0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // , 1.0/0.45);.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x66, // loat InvGamma( f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // loat color).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, // turn InvsRGB(col
	0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x47, // or);.}.vec3 InvG
	0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // amma( vec3 color
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, // ).{.return vec3(
	0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, // InvGamma(color.x
	0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // ),InvGamma(color
	0x2e, 0x79, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, // .y),InvGamma(col
	0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, // or.z));.}.vec3 I
	0x6e, 0x76, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // nvToneMap( vec3 
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x69, // color).{.float i
	0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x30, 0x2e, 0x35, 0x2f, 0x30, 0x2e, 0x32, // nv_2bh = 0.5/0.2
	0x35, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x34, 0x2e, // 5;.float bh = 4.
	0x30, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2d, 0x20, 0x32, 0x2e, 0x30, 0x3b, 0x0a, 0x72, 0x65, // 0*0.25 - 2.0;.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2d, 0x20, 0x31, 0x2e, // turn (color - 1.
	0x30, 0x20, 0x2b, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2a, 0x28, // 0 + sqrt(color*(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x20, 0x62, 0x68, 0x29, 0x20, 0x2b, 0x20, 0x31, 0x2e, // color + bh) + 1.
	0x30, 0x29, 0x29, 0x2a, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // 0))*inv_2bh;.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // loat sRGB( float
	0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, //  f).{.float s;.i
	0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x33, 0x31, 0x33, 0x30, // f (f <= 0.003130
	0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x20, 0x2a, 0x20, 0x66, // 8).s = 12.92 * f
	0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x35, 0x35, // ;.else.s = 1.055
	0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, //  * pow(f, 1.0/2.
	0x34, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // 4) - 0.055;.retu
	0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x52, 0x65, // rn s;.}.float Re
	0x63, 0x37, 0x30, 0x39, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, // c709( float f).{
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, // .float s;.if (f 
	0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x34, 0x2e, // <= 0.018).s = 4.
	0x35, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, // 5 * f;.else.s = 
	0x31, 0x2e, 0x30, 0x39, 0x39, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x30, // 1.099 * pow(f, 0
	0x2e, 0x34, 0x35, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x3b, 0x0a, 0x72, 0x65, // .45) - 0.099;.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // turn s;.}.float 
	0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, // FBGamma( float c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, // olor).{.return s
	0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // RGB(color);.}.ve
	0x63, 0x32, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, // c2 FBGamma( vec2
	0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, //  color).{.return
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, //  vec2(FBGamma(co
	0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, // lor.x),FBGamma(c
	0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, // olor.y));.}.vec3
	0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, //  FBGamma( vec3 c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // olor).{.return v
	0x65, 0x63, 0x33, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // ec3(FBGamma(colo
	0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, // r.x),FBGamma(col
	0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, // or.y),FBGamma(co
	0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // lor.z));.}.vec3 
	0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x32, 0x32, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // FBGamma22( vec3 
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // color).{.return 
	0x76, 0x65, 0x63, 0x33, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, // vec3(pow(color.x
	0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, // , 1.0/2.2),pow(c
	0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, // olor.y, 1.0/2.2)
	0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x2c, 0x20, 0x31, 0x2e, // ,pow(color.z, 1.
	0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // 0/2.2));.}.float
	0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, //  FBToneMap( floa
	0x74, 0x20, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6c, 0x20, // t l).{.return l 
	0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, // * ((l*0.25 + 1.0
	0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, // ) / (l + 1.0));.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, // }.vec2 FBToneMap
	0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, // ( vec2 color).{.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, // float l = dot(co
	0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, // lor,vec2(0.17620
	0x34, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x2c, // 4+0.0108109*0.5,
	0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, // 0.812985+0.01081
	0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // 09*0.5));.return
	0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, //  color * ((l*0.2
	0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, // 5 + 1.0) / (l + 
	0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, // 1.0));.}.vec3 FB
	0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, // ToneMap( vec3 co
	0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, // lor).{.float l =
	0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x33, 0x28, //  dot(color,vec3(
	0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, // 0.176204,0.81298
	0x35, 0x2c, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x29, 0x29, 0x3b, 0x0a, 0x72, // 5,0.0108109));.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, // eturn color * ((
	0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, // l*0.25 + 1.0) / 
	0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // (l + 1.0));.}.ve
	0x63, 0x34, 0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x28, 0x20, 0x76, 0x65, 0x63, // c4 Additive( vec
	0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // 4 cBase, vec4 cB
	0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, // lend, float perc
	0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, // ent).{.return cB
	0x61, 0x73, 0x65, 0x20, 0x2b, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, // ase + cBlend*per
	0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, // cent;.}.vec3 Scr
	0x65, 0x65, 0x6e, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, // een ( vec3 cBase
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, // , vec3 cBlend).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, // .return 1.0 - (1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, // .0 - cBase) * (1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // .0 - cBlend);.}.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x20, 0x76, 0x65, // vec4 Screen ( ve
	0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, // c4 cBase, vec4 c
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // Blend).{.return 
	0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, // 1.0 - (1.0 - cBa
	0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, // se) * (1.0 - cBl
	0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, // end);.}.vec3 Scr
	0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, // eenHDR ( vec3 cB
	0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, // ase, vec3 cBlend
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, // ).{.return max(1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, // .0 - (1.0 - cBas
	0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, // e) * (1.0 - cBle
	0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, // nd), vec3(0.,0.,
	0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, // 0.));.}.vec4 Scr
	0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // eenHDR ( vec4 cB
	0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, // ase, vec4 cBlend
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, // ).{.return max(1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, // .0 - (1.0 - cBas
	0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, // e) * (1.0 - cBle
	0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, // nd), vec4(0.,0.,
	0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, // 0.,0.));.}.vec4 
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // Multiply ( vec4 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, // cBase, vec4 cBle
	0x6e, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, // nd, float percen
	0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, // t).{.return cBas
	0x65, 0x20, 0x2a, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, // e * cBlend*perce
	0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, // nt;.}.vec4 Overl
	0x61, 0x79, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, // ay ( vec4 cBase,
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, //  vec4 cBlend).{.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, // vec4 cNew = step
	0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, // (0.5, cBase);.cN
	0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, // ew = mix(cBase*c
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, // Blend*2.0, 1.0-2
	0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, // .0*(1.0-cBase)*(
	0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, // 1.0-cBlend), cNe
	0x77, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, // w);.return cNew;
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x48, // .}.vec4 OverlayH
	0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, // DR ( vec4 cBase,
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, //  vec4 cBlend).{.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, // vec4 cNew = step
	0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, // (0.5, cBase);.cN
	0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, // ew = max(mix(cBa
	0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, // se*cBlend*2.0, 1
	0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, // .0-2.0*(1.0-cBas
	0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, // e)*(1.0-cBlend),
	0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, //  cNew), vec4(0.,
	0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // 0.,0.,0.));.retu
	0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // rn cNew;.}.vec3 
	0x63, 0x6f, 0x73, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x5f, 0x73, // cos_hemisphere_s
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x29, 0x0a, 0x7b, // ample( vec2 t).{
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x68, 0x69, 0x20, 0x3d, 0x20, 0x74, 0x2e, 0x79, // .float phi = t.y
	0x20, 0x2a, 0x20, 0x28, 0x32, 0x2e, 0x30, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, //  * (2.0*3.141592
	0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, // 6535897932384626
	0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // 433832795);.floa
	0x74, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, // t cosTheta = sqr
	0x74, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, // t(1.0 - t.x);.fl
	0x6f, 0x61, 0x74, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, // oat sinTheta = s
	0x71, 0x72, 0x74, 0x28, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // qrt(t.x);.float 
	0x73, 0x70, 0x2c, 0x63, 0x70, 0x3b, 0x0a, 0x7b, 0x73, 0x70, 0x3d, 0x73, 0x69, 0x6e, 0x28, 0x70, // sp,cp;.{sp=sin(p
	0x68, 0x69, 0x29, 0x3b, 0x63, 0x70, 0x3d, 0x63, 0x6f, 0x73, 0x28, 0x70, 0x68, 0x69, 0x29, 0x3b, // hi);cp=cos(phi);
	0x7d, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x63, // };.return vec3(c
	0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x63, 0x6f, // p * sinTheta, co
	0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x73, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, // sTheta, sp * sin
	0x54, 0x68, 0x65, 0x74, 0x61, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, // Theta);.}.vec3 r
	0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, // otate_to_vector_
	0x75, 0x70, 0x70, 0x65, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x2c, // upper( vec3 vec,
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, //  vec3 normal).{.
	0x69, 0x66, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x3e, 0x20, 0x2d, 0x30, // if(normal.y > -0
	0x2e, 0x39, 0x39, 0x39, 0x39, 0x39, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // .99999).{.float 
	0x68, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x28, 0x31, 0x2e, 0x30, 0x2b, 0x6e, 0x6f, 0x72, // h = 1.0/(1.0+nor
	0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, // mal.y);.float hz
	0x20, 0x3d, 0x20, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x3b, 0x0a, 0x66, //  = h*normal.z;.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x3d, 0x20, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, // loat hzx = hz*no
	0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // rmal.x;.return v
	0x65, 0x63, 0x33, 0x28, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, // ec3(.vec.x * (no
	0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, // rmal.y+hz*normal
	0x2e, 0x7a, 0x29, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, // .z) + vec.y * no
	0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, // rmal.x - vec.z *
	0x20, 0x68, 0x7a, 0x78, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, //  hzx,.vec.y * no
	0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, // rmal.y - vec.x *
	0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, //  normal.x - vec.
	0x7a, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x2c, 0x0a, 0x76, 0x65, // z * normal.z,.ve
	0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x20, 0x2d, // c.y * normal.z -
	0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x2b, 0x20, 0x76, //  vec.x * hzx + v
	0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, // ec.z * (normal.y
	0x2b, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, // +h*normal.x*norm
	0x61, 0x6c, 0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x72, // al.x));.}.else r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x2d, 0x76, 0x65, 0x63, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, // eturn -vec;.}.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // iform vec4 Stere
	0x6f, 0x5f, 0x53, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x0a, 0x75, 0x6e, // o_Saturation;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // iform vec4 Stere
	0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x3b, 0x0a, // o_MS_ZPD_YAxis;.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, // uniform sampler2
	0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // DArray tex_stere
	0x6f, 0x5f, 0x66, 0x62, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, // o_fb;.uniform sa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x20, 0x74, 0x65, 0x78, // mpler2DArray tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x3b, 0x0a, 0x75, // _stereo_depth;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x77, 0x5f, 0x68, 0x5f, // niform vec4 w_h_
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x67, 0x61, 0x74, // height;.vec3 gat
	0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x76, 0x65, 0x63, 0x32, // herEyeColor(vec2
	0x20, 0x75, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x29, //  u, bool isLeft)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // .{.return textur
	0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, // e2DArrayLod(tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, // stereo_fb, vec3(
	0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, 0x20, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, // u.x, u.y, isLeft
	0x20, 0x3f, 0x20, 0x30, 0x2e, 0x30, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x30, //  ? 0.0 : 1.0), 0
	0x2e, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x67, // .).rgb;.}.void g
	0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, // atherLeftRightCo
	0x6c, 0x6f, 0x72, 0x73, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x6f, 0x75, 0x74, // lors(vec2 u, out
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x63, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, //  vec3 lcol, out 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x6c, 0x63, 0x6f, // vec3 rcol).{.lco
	0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x41, 0x72, 0x72, // l = texture2DArr
	0x61, 0x79, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // ayLod(tex_stereo
	0x5f, 0x66, 0x62, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, // _fb, vec3(u.x, u
	0x2e, 0x79, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2e, 0x78, 0x79, 0x7a, // .y, 0.), 0.).xyz
	0x3b, 0x0a, 0x72, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // ;.rcol = texture
	0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, // 2DArrayLod(tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x75, // tereo_fb, vec3(u
	0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, 0x29, 0x2c, 0x20, 0x30, 0x2e, // .x, u.y, 1.), 0.
	0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // ).xyz;.}.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, //  mat4 Stereo_Lef
	0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, // tMat;.uniform ma
	0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, // t4 Stereo_RightM
	0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, // at;.uniform vec4
	0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, //  Stereo_LeftLumi
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, 0x6e, 0x69, // nance_Gamma;.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // form vec4 Stereo
	0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, // _RightLuminance_
	0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x3b, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x44, // DynDesat;.void D
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x65, 0x73, 0x61, 0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, // ynamicDesatAnagl
	0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // yph( vec3 lCol, 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, // vec3 rCol, out v
	0x65, 0x63, 0x33, 0x20, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, // ec3 lDesatCol, o
	0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, // ut vec3 rDesatCo
	0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, // l).{.float left2
	0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, // LeftLum = dot(lC
	0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, // ol, Stereo_LeftL
	0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, // uminance_Gamma.x
	0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, // yz);.float left2
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, // RightLum = dot(l
	0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, // Col, Stereo_Righ
	0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, // tLuminance_DynDe
	0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // sat.xyz);.float 
	0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, // right2LeftLum = 
	0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // dot(rCol, Stereo
	0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, // _LeftLuminance_G
	0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // amma.xyz);.float
	0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, //  right2RightLum 
	0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, // = dot(rCol, Ster
	0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, // eo_RightLuminanc
	0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, // e_DynDesat.xyz);
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, // .float leftLum =
	0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, //  left2LeftLum + 
	0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, 0x0a, 0x66, // left2RightLum;.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, // loat rightLum = 
	0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, // right2LeftLum + 
	0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, 0x0a, // right2RightLum;.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x20, // float leftDesat 
	0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // = Stereo_RightLu
	0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, // minance_DynDesat
	0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, // .w * abs((left2L
	0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, // eftLum - left2Ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, // ghtLum) / (leftL
	0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x66, // um + 0.0001));.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x20, // loat rightDesat 
	0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // = Stereo_RightLu
	0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, // minance_DynDesat
	0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, // .w * abs((right2
	0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, // LeftLum - right2
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x72, 0x69, 0x67, // RightLum) / (rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, 0x29, // htLum + 0.0001))
	0x3b, 0x0a, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, // ;.lDesatCol = mi
	0x78, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, // x(lCol, vec3_spl
	0x61, 0x74, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x66, // at(leftLum), lef
	0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x72, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, // tDesat);.rDesatC
	0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, // ol = mix(rCol, v
	0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, // ec3_splat(rightL
	0x75, 0x6d, 0x29, 0x2c, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, // um), rightDesat)
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x41, // ;.}.vec3 LinearA
	0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, // naglyph( vec3 lC
	0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, // ol, vec3 rCol).{
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x28, // .vec3 color = ((
	0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, 0x29, //  (vec4(lCol, 1.)
	0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, // ) * (Stereo_Left
	0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, // Mat) ) + ( (vec4
	0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, // (rCol, 1.)) * (S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, // tereo_RightMat) 
	0x29, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, // )).rgb;.return c
	0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // olor;.}.uniform 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, // vec4 Stereo_Degh
	0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // ostGamma;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, // m mat4 Stereo_De
	0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3b, 0x0a, 0x76, 0x65, 0x63, // ghostFilter;.vec
	0x33, 0x20, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, // 3 DeghostAnaglyp
	0x68, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, // h( vec3 lCol, ve
	0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // c3 rCol).{.vec3 
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x41, 0x6e, // color = LinearAn
	0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, // aglyph(lCol, rCo
	0x6c, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x70, 0x6f, // l);.return ( (po
	0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // w(color, Stereo_
	0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x72, 0x67, 0x62, // DeghostGamma.rgb
	0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, // )) * (mat3(Stere
	0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, // o_DeghostFilter[
	0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, // 0].xyz, Stereo_D
	0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x31, 0x5d, 0x2e, // eghostFilter[1].
	0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, // xyz, Stereo_Degh
	0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, // ostFilter[2].xyz
	0x29, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x6d, 0x61, 0x69, // )) );.}.void mai
	0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, // n().{.vec3 lCol,
	0x20, 0x72, 0x43, 0x6f, 0x6c, 0x3b, 0x0a, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x66, //  rCol;.gatherLef
	0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x28, 0x76, 0x5f, 0x74, // tRightColors(v_t
	0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2c, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // excoord0, lCol, 
	0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, // rCol);.gl_FragCo
	0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x44, 0x65, 0x67, 0x68, 0x6f, // lor = vec4(Degho
	0x73, 0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, // stAnaglyph(lCol,
	0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, //  rCol), 1.0);.}.
	0x00,                                                                                           // .
};
static const uint8_t fs_pp_stereo_anaglyph_deghost_st_dx11[1122] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x0e, 0x53, // FSH.Jc._.......S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x00, 0x00, // tereo_LeftMat...
	0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, // ........Stereo_R
	0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x00, 0x40, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, // ightMat..@......
	0x00, 0x13, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, // ..Stereo_Deghost
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x12, 0x00, 0x80, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, // Gamma...........
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, // Stereo_DeghostFi
	0x6c, 0x74, 0x65, 0x72, 0x14, 0x00, 0x90, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x74, // lter...........t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x30, 0x01, 0x00, 0x00, // ex_stereo_fb0...
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // .......tex_stere
	0x6f, 0x5f, 0x66, 0x62, 0x30, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xac, 0x03, // o_fb0...........
	0x00, 0x00, 0x44, 0x58, 0x42, 0x43, 0x75, 0xdd, 0x99, 0x23, 0xb1, 0x50, 0x0b, 0xe6, 0xff, 0x75, // ..DXBCu..#.P...u
	0x58, 0x23, 0xf6, 0xdf, 0x9d, 0x9e, 0x01, 0x00, 0x00, 0x00, 0xac, 0x03, 0x00, 0x00, 0x03, 0x00, // X#..............
	0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x9c, 0x00, 0x00, 0x00, 0xd0, 0x00, 0x00, 0x00, 0x49, 0x53, // ..,...........IS
	0x47, 0x4e, 0x68, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x50, 0x00, // GNh...........P.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x5c, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, // ................
	0x00, 0x00, 0x06, 0x06, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, // ......SV_POSITIO
	0x4e, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0xab, 0xab, 0xab, 0x4f, 0x53, // N.TEXCOORD....OS
	0x47, 0x4e, 0x2c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x20, 0x00, // GN,........... .
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x00, // ......SV_TARGET.
	0xab, 0xab, 0x53, 0x48, 0x45, 0x58, 0xd4, 0x02, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0xb5, 0x00, // ..SHEX....P.....
	0x00, 0x00, 0x6a, 0x08, 0x00, 0x01, 0x59, 0x00, 0x00, 0x04, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, // ..j...Y...F. ...
	0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x03, 0x00, 0x60, 0x10, 0x00, 0x00, 0x00, // ......Z....`....
	0x00, 0x00, 0x58, 0x40, 0x00, 0x04, 0x00, 0x70, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x55, // ..X@...p......UU
	0x00, 0x00, 0x62, 0x10, 0x00, 0x03, 0x62, 0x10, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x65, 0x00, // ..b...b.......e.
	0x00, 0x03, 0xf2, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x02, 0x03, 0x00, // ... ......h.....
	0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x32, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x96, 0x15, // ..6...2.........
	0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x42, 0x00, 0x10, 0x00, 0x00, 0x00, // ......6...B.....
	0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0x02, 0x02, // ...@......H.....
	0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, // ..CU..r.......F.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, // ......F~.......`
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, // .......@......6.
	0x00, 0x05, 0x82, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, // ...........@....
	0x80, 0x3f, 0x11, 0x00, 0x00, 0x08, 0x12, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x0e, // .?............F.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ......F. .......
	0x00, 0x00, 0x11, 0x00, 0x00, 0x08, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x0e, // ......".......F.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, // ......F. .......
	0x00, 0x00, 0x11, 0x00, 0x00, 0x08, 0x42, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x0e, // ......B.......F.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, // ......F. .......
	0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x32, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x96, 0x15, // ..6...2.........
	0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x42, 0x00, 0x10, 0x00, 0x00, 0x00, // ......6...B.....
	0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x48, 0x00, 0x00, 0x8d, 0x02, 0x02, // ...@.....?H.....
	0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, // ..CU..r.......F.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, // ......F~.......`
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, // .......@......6.
	0x00, 0x05, 0x82, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, // ...........@....
	0x80, 0x3f, 0x11, 0x00, 0x00, 0x08, 0x12, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x0e, // .?............F.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, // ......F. .......
	0x00, 0x00, 0x11, 0x00, 0x00, 0x08, 0x22, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x0e, // ......".......F.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, // ......F. .......
	0x00, 0x00, 0x11, 0x00, 0x00, 0x08, 0x42, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x0e, // ......B.......F.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, // ......F. .......
	0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, // ......r.......F.
	0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2f, 0x00, // ......F......./.
	0x00, 0x05, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, // ..r.......F.....
	0x00, 0x00, 0x38, 0x00, 0x00, 0x08, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, // ..8...r.......F.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x82, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, // ......F. .......
	0x00, 0x00, 0x19, 0x00, 0x00, 0x05, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, // ......r.......F.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x08, 0x12, 0x20, 0x10, 0x00, 0x00, 0x00, // ........... ....
	0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x82, 0x20, 0x00, 0x00, 0x00, // ..F.......F. ...
	0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x08, 0x22, 0x20, 0x10, 0x00, 0x00, 0x00, // .........." ....
	0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x82, 0x20, 0x00, 0x00, 0x00, // ..F.......F. ...
	0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x08, 0x42, 0x20, 0x10, 0x00, 0x00, 0x00, // ..........B ....
	0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x82, 0x20, 0x00, 0x00, 0x00, // ..F.......F. ...
	0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x82, 0x20, 0x10, 0x00, 0x00, 0x00, // ......6.... ....
	0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x3e, 0x00, 0x00, 0x01, 0x00, 0x00, // ...@.....?>.....
	0xd0, 0x00,                                                                                     // ..
};
static const uint8_t fs_pp_stereo_anaglyph_deghost_st_spv[2642] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x0e, 0x53, // FSH.Jc._.......S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x01, 0x00, // tereo_LeftMat...
	0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, // ........Stereo_R
	0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x01, 0x40, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, // ightMat..@......
	0x00, 0x14, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, // ..Stereo_Deghost
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x14, 0x01, 0x90, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, // Filter..........
	0x13, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, // .Stereo_DeghostG
	0x61, 0x6d, 0x6d, 0x61, 0x12, 0x01, 0x80, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x74, // amma...........t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x30, 0x00, 0x02, 0x00, // ex_stereo_fb0...
	0x00, 0x00, 0x00, 0x03, 0x22, 0x00, 0xb4, 0x09, 0x00, 0x00, 0x03, 0x02, 0x23, 0x07, 0x00, 0x00, // ....".......#...
	0x01, 0x00, 0x0b, 0x00, 0x08, 0x00, 0x75, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, // ......u.........
	0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, 0x4c, // ..............GL
	0x53, 0x4c, 0x2e, 0x73, 0x74, 0x64, 0x2e, 0x34, 0x35, 0x30, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, // SL.std.450......
	0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x07, 0x00, 0x04, 0x00, // ................
	0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, 0x00, 0xd2, 0x00, // ......main......
	0x00, 0x00, 0xdf, 0x00, 0x00, 0x00, 0x10, 0x00, 0x03, 0x00, 0x04, 0x00, 0x00, 0x00, 0x07, 0x00, // ................
	0x00, 0x00, 0x03, 0x00, 0x03, 0x00, 0x05, 0x00, 0x00, 0x00, 0xf4, 0x01, 0x00, 0x00, 0x05, 0x00, // ................
	0x04, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, // ......main......
	0x08, 0x00, 0x35, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // ..5...tex_stereo
	0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, // _fbSampler......
	0x08, 0x00, 0x38, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // ..8...tex_stereo
	0x5f, 0x66, 0x62, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, // _fbTexture......
	0x06, 0x00, 0x72, 0x00, 0x00, 0x00, 0x55, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x6c, 0x6f, // ..r...UniformBlo
	0x63, 0x6b, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x07, 0x00, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, // ck........r.....
	0x00, 0x00, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, // ..Stereo_LeftMat
	0x00, 0x00, 0x06, 0x00, 0x07, 0x00, 0x72, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x53, 0x74, // ......r.......St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x00, 0x06, 0x00, // ereo_RightMat...
	0x08, 0x00, 0x72, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // ..r.......Stereo
	0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x00, 0x06, 0x00, // _DeghostGamma...
	0x09, 0x00, 0x72, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // ..r.......Stereo
	0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x00, 0x00, // _DeghostFilter..
	0x00, 0x00, 0x05, 0x00, 0x03, 0x00, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, // ......t.........
	0x05, 0x00, 0xd2, 0x00, 0x00, 0x00, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, // ......v_texcoord
	0x30, 0x00, 0x05, 0x00, 0x06, 0x00, 0xdf, 0x00, 0x00, 0x00, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, // 0.........bgfx_F
	0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x35, 0x00, // ragData0..G...5.
	0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x35, 0x00, // ..".......G...5.
	0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x38, 0x00, // ..!.......G...8.
	0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x38, 0x00, // ..".......G...8.
	0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x48, 0x00, 0x04, 0x00, 0x72, 0x00, // ..!.......H...r.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0x72, 0x00, // ..........H...r.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, // ......#.......H.
	0x05, 0x00, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x10, 0x00, // ..r.............
	0x00, 0x00, 0x48, 0x00, 0x04, 0x00, 0x72, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04, 0x00, // ..H...r.........
	0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0x72, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x23, 0x00, // ..H...r.......#.
	0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0x72, 0x00, 0x00, 0x00, 0x01, 0x00, // ..@...H...r.....
	0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0x72, 0x00, // ..........H...r.
	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x48, 0x00, // ......#.......H.
	0x04, 0x00, 0x72, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x48, 0x00, // ..r...........H.
	0x05, 0x00, 0x72, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x90, 0x00, // ..r.......#.....
	0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0x72, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x07, 0x00, // ..H...r.........
	0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x47, 0x00, 0x03, 0x00, 0x72, 0x00, 0x00, 0x00, 0x02, 0x00, // ......G...r.....
	0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x74, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, // ..G...t...".....
	0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x74, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x01, 0x00, // ..G...t...!.....
	0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0xd2, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x01, 0x00, // ..G.............
	0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0xdf, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, // ..G.............
	0x00, 0x00, 0x13, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x21, 0x00, 0x03, 0x00, 0x03, 0x00, // ..........!.....
	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x02, 0x00, 0x06, 0x00, 0x00, 0x00, 0x16, 0x00, // ................
	0x03, 0x00, 0x07, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x19, 0x00, 0x09, 0x00, 0x08, 0x00, // ...... .........
	0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x00, // ................
	0x04, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x17, 0x00, // ................
	0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x17, 0x00, // ................
	0x04, 0x00, 0x19, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x20, 0x00, // .............. .
	0x04, 0x00, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x3b, 0x00, // ..4...........;.
	0x04, 0x00, 0x34, 0x00, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, // ..4...5....... .
	0x04, 0x00, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x3b, 0x00, // ..7...........;.
	0x04, 0x00, 0x37, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x00, // ..7...8.........
	0x04, 0x00, 0x41, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2b, 0x00, // ..A... .......+.
	0x04, 0x00, 0x41, 0x00, 0x00, 0x00, 0x42, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2b, 0x00, // ..A...B.......+.
	0x04, 0x00, 0x41, 0x00, 0x00, 0x00, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x00, // ..A...F.........
	0x03, 0x00, 0x4a, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, // ..J.......+.....
	0x00, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, // ..........+.....
	0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x18, 0x00, 0x04, 0x00, 0x71, 0x00, // ..h......?....q.
	0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x06, 0x00, 0x72, 0x00, // ..............r.
	0x00, 0x00, 0x71, 0x00, 0x00, 0x00, 0x71, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x71, 0x00, // ..q...q.......q.
	0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x73, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x72, 0x00, // .. ...s.......r.
	0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x73, 0x00, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0x02, 0x00, // ..;...s...t.....
	0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x75, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x71, 0x00, // .. ...u.......q.
	0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x41, 0x00, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00, 0x03, 0x00, // ..+...A.........
	0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x92, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0e, 0x00, // .. .............
	0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x41, 0x00, 0x00, 0x00, 0x99, 0x00, 0x00, 0x00, 0x02, 0x00, // ..+...A.........
	0x00, 0x00, 0x18, 0x00, 0x04, 0x00, 0x9d, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x03, 0x00, // ................
	0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0xd1, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x19, 0x00, // .. .............
	0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0xd1, 0x00, 0x00, 0x00, 0xd2, 0x00, 0x00, 0x00, 0x01, 0x00, // ..;.............
	0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0xde, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0e, 0x00, // .. .............
	0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0xde, 0x00, 0x00, 0x00, 0xdf, 0x00, 0x00, 0x00, 0x03, 0x00, // ..;.............
	0x00, 0x00, 0x36, 0x00, 0x05, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, // ..6.............
	0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x05, 0x00, 0x00, 0x00, 0x3d, 0x00, // ..............=.
	0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x3d, 0x00, // ......6...5...=.
	0x04, 0x00, 0x08, 0x00, 0x00, 0x00, 0x39, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x3d, 0x00, // ......9...8...=.
	0x04, 0x00, 0x19, 0x00, 0x00, 0x00, 0xd3, 0x00, 0x00, 0x00, 0xd2, 0x00, 0x00, 0x00, 0x51, 0x00, // ..............Q.
	0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x19, 0x01, 0x00, 0x00, 0xd3, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x1b, 0x01, 0x00, 0x00, 0xd3, 0x00, // ..Q.............
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x50, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x1c, 0x01, // ......P.........
	0x00, 0x00, 0x19, 0x01, 0x00, 0x00, 0x1b, 0x01, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x56, 0x00, // ..............V.
	0x05, 0x00, 0x4a, 0x00, 0x00, 0x00, 0x2e, 0x01, 0x00, 0x00, 0x39, 0x00, 0x00, 0x00, 0x36, 0x00, // ..J.......9...6.
	0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x31, 0x01, 0x00, 0x00, 0x2e, 0x01, // ..X.......1.....
	0x00, 0x00, 0x1c, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x51, 0x00, // ..............Q.
	0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x21, 0x01, 0x00, 0x00, 0xd3, 0x00, 0x00, 0x00, 0x00, 0x00, // ......!.........
	0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x23, 0x01, 0x00, 0x00, 0xd3, 0x00, // ..Q.......#.....
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x50, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x24, 0x01, // ......P.......$.
	0x00, 0x00, 0x21, 0x01, 0x00, 0x00, 0x23, 0x01, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x56, 0x00, // ..!...#...h...V.
	0x05, 0x00, 0x4a, 0x00, 0x00, 0x00, 0x38, 0x01, 0x00, 0x00, 0x39, 0x00, 0x00, 0x00, 0x36, 0x00, // ..J...8...9...6.
	0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x3b, 0x01, 0x00, 0x00, 0x38, 0x01, // ..X.......;...8.
	0x00, 0x00, 0x24, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x41, 0x00, // ..$...........A.
	0x05, 0x00, 0x75, 0x00, 0x00, 0x00, 0x63, 0x01, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0x46, 0x00, // ..u...c...t...F.
	0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x71, 0x00, 0x00, 0x00, 0x64, 0x01, 0x00, 0x00, 0x63, 0x01, // ..=...q...d...c.
	0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x66, 0x01, 0x00, 0x00, 0x31, 0x01, // ..Q.......f...1.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x67, 0x01, // ......Q.......g.
	0x00, 0x00, 0x31, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, // ..1.......Q.....
	0x00, 0x00, 0x68, 0x01, 0x00, 0x00, 0x31, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x50, 0x00, // ..h...1.......P.
	0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x69, 0x01, 0x00, 0x00, 0x66, 0x01, 0x00, 0x00, 0x67, 0x01, // ......i...f...g.
	0x00, 0x00, 0x68, 0x01, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x91, 0x00, 0x05, 0x00, 0x0e, 0x00, // ..h...h.........
	0x00, 0x00, 0x6a, 0x01, 0x00, 0x00, 0x64, 0x01, 0x00, 0x00, 0x69, 0x01, 0x00, 0x00, 0x41, 0x00, // ..j...d...i...A.
	0x05, 0x00, 0x75, 0x00, 0x00, 0x00, 0x6b, 0x01, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0x42, 0x00, // ..u...k...t...B.
	0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x71, 0x00, 0x00, 0x00, 0x6c, 0x01, 0x00, 0x00, 0x6b, 0x01, // ..=...q...l...k.
	0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x6e, 0x01, 0x00, 0x00, 0x3b, 0x01, // ..Q.......n...;.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x6f, 0x01, // ......Q.......o.
	0x00, 0x00, 0x3b, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, // ..;.......Q.....
	0x00, 0x00, 0x70, 0x01, 0x00, 0x00, 0x3b, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x50, 0x00, // ..p...;.......P.
	0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x71, 0x01, 0x00, 0x00, 0x6e, 0x01, 0x00, 0x00, 0x6f, 0x01, // ......q...n...o.
	0x00, 0x00, 0x70, 0x01, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x91, 0x00, 0x05, 0x00, 0x0e, 0x00, // ..p...h.........
	0x00, 0x00, 0x72, 0x01, 0x00, 0x00, 0x6c, 0x01, 0x00, 0x00, 0x71, 0x01, 0x00, 0x00, 0x81, 0x00, // ..r...l...q.....
	0x05, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x73, 0x01, 0x00, 0x00, 0x6a, 0x01, 0x00, 0x00, 0x72, 0x01, // ......s...j...r.
	0x00, 0x00, 0x4f, 0x00, 0x08, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x74, 0x01, 0x00, 0x00, 0x73, 0x01, // ..O.......t...s.
	0x00, 0x00, 0x73, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, // ..s.............
	0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x92, 0x00, 0x00, 0x00, 0x44, 0x01, 0x00, 0x00, 0x74, 0x00, // ..A.......D...t.
	0x00, 0x00, 0x91, 0x00, 0x00, 0x00, 0x46, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x0e, 0x00, // ......F...=.....
	0x00, 0x00, 0x45, 0x01, 0x00, 0x00, 0x44, 0x01, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x92, 0x00, // ..E...D...A.....
	0x00, 0x00, 0x47, 0x01, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00, 0x42, 0x00, // ..G...t.......B.
	0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x48, 0x01, 0x00, 0x00, 0x47, 0x01, // ..=.......H...G.
	0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x92, 0x00, 0x00, 0x00, 0x4a, 0x01, 0x00, 0x00, 0x74, 0x00, // ..A.......J...t.
	0x00, 0x00, 0x91, 0x00, 0x00, 0x00, 0x99, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x0e, 0x00, // ..........=.....
	0x00, 0x00, 0x4b, 0x01, 0x00, 0x00, 0x4a, 0x01, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, // ..K...J...Q.....
	0x00, 0x00, 0x4d, 0x01, 0x00, 0x00, 0x45, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, // ..M...E.......Q.
	0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x4e, 0x01, 0x00, 0x00, 0x45, 0x01, 0x00, 0x00, 0x01, 0x00, // ......N...E.....
	0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x4f, 0x01, 0x00, 0x00, 0x45, 0x01, // ..Q.......O...E.
	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x50, 0x01, // ......Q.......P.
	0x00, 0x00, 0x48, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, // ..H.......Q.....
	0x00, 0x00, 0x51, 0x01, 0x00, 0x00, 0x48, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x51, 0x00, // ..Q...H.......Q.
	0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x52, 0x01, 0x00, 0x00, 0x48, 0x01, 0x00, 0x00, 0x02, 0x00, // ......R...H.....
	0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x53, 0x01, 0x00, 0x00, 0x4b, 0x01, // ..Q.......S...K.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x54, 0x01, // ......Q.......T.
	0x00, 0x00, 0x4b, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, // ..K.......Q.....
	0x00, 0x00, 0x55, 0x01, 0x00, 0x00, 0x4b, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x50, 0x00, // ..U...K.......P.
	0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x56, 0x01, 0x00, 0x00, 0x4d, 0x01, 0x00, 0x00, 0x4e, 0x01, // ......V...M...N.
	0x00, 0x00, 0x4f, 0x01, 0x00, 0x00, 0x50, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x57, 0x01, // ..O...P.......W.
	0x00, 0x00, 0x50, 0x01, 0x00, 0x00, 0x51, 0x01, 0x00, 0x00, 0x52, 0x01, 0x00, 0x00, 0x50, 0x00, // ..P...Q...R...P.
	0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x58, 0x01, 0x00, 0x00, 0x53, 0x01, 0x00, 0x00, 0x54, 0x01, // ......X...S...T.
	0x00, 0x00, 0x55, 0x01, 0x00, 0x00, 0x50, 0x00, 0x06, 0x00, 0x9d, 0x00, 0x00, 0x00, 0x59, 0x01, // ..U...P.......Y.
	0x00, 0x00, 0x56, 0x01, 0x00, 0x00, 0x57, 0x01, 0x00, 0x00, 0x58, 0x01, 0x00, 0x00, 0x41, 0x00, // ..V...W...X...A.
	0x05, 0x00, 0x92, 0x00, 0x00, 0x00, 0x5b, 0x01, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0x99, 0x00, // ......[...t.....
	0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x5c, 0x01, 0x00, 0x00, 0x5b, 0x01, // ..=...........[.
	0x00, 0x00, 0x4f, 0x00, 0x08, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x5d, 0x01, 0x00, 0x00, 0x5c, 0x01, // ..O.......].....
	0x00, 0x00, 0x5c, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, // ................
	0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x5e, 0x01, 0x00, 0x00, 0x01, 0x00, // ..........^.....
	0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x74, 0x01, 0x00, 0x00, 0x5d, 0x01, 0x00, 0x00, 0x91, 0x00, // ......t...].....
	0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x5f, 0x01, 0x00, 0x00, 0x59, 0x01, 0x00, 0x00, 0x5e, 0x01, // ......_...Y...^.
	0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x09, 0x01, 0x00, 0x00, 0x5f, 0x01, // ..Q..........._.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x0a, 0x01, // ......Q.........
	0x00, 0x00, 0x5f, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, // .._.......Q.....
	0x00, 0x00, 0x0b, 0x01, 0x00, 0x00, 0x5f, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x50, 0x00, // ......_.......P.
	0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0c, 0x01, 0x00, 0x00, 0x09, 0x01, 0x00, 0x00, 0x0a, 0x01, // ................
	0x00, 0x00, 0x0b, 0x01, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x03, 0x00, 0xdf, 0x00, // ......h...>.....
	0x00, 0x00, 0x0c, 0x01, 0x00, 0x00, 0xfd, 0x00, 0x01, 0x00, 0x38, 0x00, 0x01, 0x00, 0x00, 0x00, // ..........8.....
	0xd0, 0x00,                                                                                     // ..
};
static const bgfx::EmbeddedShader fs_pp_stereo_anaglyph_deghost_st = BGFX_EMBEDDED_SHADER(fs_pp_stereo_anaglyph_deghost_st);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Build of fragment shader from fs_pp_stereo.sc to fs_pp_stereo_anaglyph_lin_srgb_nodesat_st with options: ANAGLYPH NODESAT SRGB STEREO
static const uint8_t fs_pp_stereo_anaglyph_lin_srgb_nodesat_st_mtl[4726] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x14, 0x74, // FSH.Jc._.......t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, // ex_stereo_fbSamp
	0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x74, 0x65, // ler...........te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x54, 0x65, 0x78, 0x74, 0x75, // x_stereo_fbTextu
	0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x74, 0x65, 0x78, // re...........tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, // _stereo_depthSam
	0x70, 0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x74, // pler...........t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x54, // ex_stereo_depthT
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, // exture..........
	0x0e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x14, // .Stereo_LeftMat.
	0x01, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // ..........Stereo
	0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x01, 0x40, 0x00, 0x04, 0x00, 0x00, // _RightMat..@....
	0x00, 0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, // ....tex_stereo_f
	0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x93, 0x11, 0x00, 0x00, 0x23, // b..............#
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x5f, 0x73, // include <metal_s
	0x74, 0x64, 0x6c, 0x69, 0x62, 0x3e, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, // tdlib>.#include 
	0x3c, 0x73, 0x69, 0x6d, 0x64, 0x2f, 0x73, 0x69, 0x6d, 0x64, 0x2e, 0x68, 0x3e, 0x0a, 0x0a, 0x75, // <simd/simd.h>..u
	0x73, 0x69, 0x6e, 0x67, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x6d, // sing namespace m
	0x65, 0x74, 0x61, 0x6c, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x5f, 0x47, // etal;..struct _G
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, // lobal.{.    floa
	0x74, 0x34, 0x78, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, // t4x4 Stereo_Left
	0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x78, // Mat;.    float4x
	0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, // 4 Stereo_RightMa
	0x74, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x78, 0x6c, // t;.};..struct xl
	0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x0a, 0x7b, 0x0a, // atMtlMain_out.{.
	0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, //     float4 bgfx_
	0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x20, 0x5b, 0x5b, 0x63, 0x6f, 0x6c, 0x6f, // FragData0 [[colo
	0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, // r(0)]];.};..stru
	0x63, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x69, // ct xlatMtlMain_i
	0x6e, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x76, // n.{.    float2 v
	0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x5b, 0x5b, 0x75, 0x73, 0x65, // _texcoord0 [[use
	0x72, 0x28, 0x6c, 0x6f, 0x63, 0x6e, 0x31, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, // r(locn1)]];.};..
	0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, // fragment xlatMtl
	0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, // Main_out xlatMtl
	0x4d, 0x61, 0x69, 0x6e, 0x28, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, // Main(xlatMtlMain
	0x5f, 0x69, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x5b, 0x5b, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, // _in in [[stage_i
	0x6e, 0x5d, 0x5d, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x20, 0x5f, 0x47, // n]], constant _G
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x26, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x20, 0x5b, 0x5b, // lobal& _mtl_u [[
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x74, 0x65, 0x78, // buffer(0)]], tex
	0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x3c, 0x66, 0x6c, 0x6f, // ture2d_array<flo
	0x61, 0x74, 0x3e, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, // at> tex_stereo_f
	0x62, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x30, 0x29, 0x5d, 0x5d, // b [[texture(0)]]
	0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // , sampler tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x5b, // ereo_fbSampler [
	0x5b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x29, 0x0a, 0x7b, // [sampler(0)]]).{
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, // .    xlatMtlMain
	0x5f, 0x6f, 0x75, 0x74, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x3d, 0x20, 0x7b, 0x7d, 0x3b, 0x0a, 0x20, // _out out = {};. 
	0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x33, 0x33, 0x37, 0x20, 0x3d, //    float3 _337 =
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, //  float3(in.v_tex
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, // coord0, 0.0);.  
	0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x33, 0x35, 0x38, 0x20, 0x3d, 0x20, //   float4 _358 = 
	0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2e, 0x73, 0x61, // tex_stereo_fb.sa
	0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // mple(tex_stereo_
	0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x33, 0x33, 0x37, 0x2e, // fbSampler, _337.
	0x78, 0x79, 0x2c, 0x20, 0x75, 0x69, 0x6e, 0x74, 0x28, 0x72, 0x69, 0x6e, 0x74, 0x28, 0x5f, 0x33, // xy, uint(rint(_3
	0x33, 0x37, 0x2e, 0x7a, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, // 37.z)), level(0.
	0x30, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, // 0));.    float3 
	0x5f, 0x33, 0x34, 0x35, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x69, 0x6e, // _345 = float3(in
	0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2c, 0x20, 0x31, 0x2e, // .v_texcoord0, 1.
	0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, // 0);.    float4 _
	0x33, 0x36, 0x38, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // 368 = tex_stereo
	0x5f, 0x66, 0x62, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, // _fb.sample(tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, // tereo_fbSampler,
	0x20, 0x5f, 0x33, 0x34, 0x35, 0x2e, 0x78, 0x79, 0x2c, 0x20, 0x75, 0x69, 0x6e, 0x74, 0x28, 0x72, //  _345.xy, uint(r
	0x69, 0x6e, 0x74, 0x28, 0x5f, 0x33, 0x34, 0x35, 0x2e, 0x7a, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, // int(_345.z)), le
	0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, // vel(0.0));.    f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x33, 0x37, 0x31, 0x20, 0x3d, 0x20, 0x5f, 0x33, 0x35, 0x38, // loat _371 = _358
	0x2e, 0x78, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x35, // .x;.    float _5
	0x38, 0x32, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x64, 0x6f, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, // 82;.    do.    {
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, 0x33, 0x37, // .        if (_37
	0x31, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, 0x34, 0x34, 0x39, 0x39, 0x39, 0x39, // 1 <= 0.040449999
	0x32, 0x37, 0x32, 0x38, 0x32, 0x33, 0x33, 0x33, 0x33, 0x37, 0x34, 0x30, 0x32, 0x33, 0x34, 0x33, // 2728233337402343
	0x37, 0x35, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, // 75).        {.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x35, 0x38, 0x32, 0x20, 0x3d, //           _582 =
	0x20, 0x5f, 0x33, 0x37, 0x31, 0x20, 0x2a, 0x20, 0x30, 0x2e, 0x30, 0x37, 0x37, 0x33, 0x39, 0x39, //  _371 * 0.077399
	0x33, 0x38, 0x30, 0x35, 0x30, 0x35, 0x30, 0x38, 0x34, 0x39, 0x39, 0x31, 0x34, 0x35, 0x35, 0x30, // 3805050849914550
	0x37, 0x38, 0x31, 0x32, 0x35, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 78125;.         
	0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //    break;.      
	0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, //   }.        else
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // .        {.     
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x35, 0x38, 0x32, 0x20, 0x3d, 0x20, 0x70, 0x6f, //        _582 = po
	0x77, 0x72, 0x28, 0x28, 0x5f, 0x33, 0x37, 0x31, 0x20, 0x2a, 0x20, 0x30, 0x2e, 0x39, 0x34, 0x37, // wr((_371 * 0.947
	0x38, 0x36, 0x37, 0x32, 0x37, 0x34, 0x32, 0x38, 0x34, 0x33, 0x36, 0x32, 0x37, 0x39, 0x32, 0x39, // 8672742843627929
	0x36, 0x38, 0x37, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x32, 0x31, 0x33, 0x32, // 6875) + 0.052132
	0x36, 0x39, 0x39, 0x36, 0x33, 0x38, 0x36, 0x30, 0x35, 0x31, 0x31, 0x37, 0x37, 0x39, 0x37, 0x38, // 6996386051177978
	0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x30, 0x30, 0x30, 0x30, 0x30, // 515625, 2.400000
	0x30, 0x39, 0x35, 0x33, 0x36, 0x37, 0x34, 0x33, 0x31, 0x36, 0x34, 0x30, 0x36, 0x32, 0x35, 0x29, // 095367431640625)
	0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, // ;.            br
	0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, // eak;.        }. 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x20, 0x2f, 0x2f, //        break; //
	0x20, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x77, 0x6f, 0x72, //  unreachable wor
	0x6b, 0x61, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x20, 0x77, 0x68, // karound.    } wh
	0x69, 0x6c, 0x65, 0x28, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, // ile(false);.    
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x33, 0x37, 0x33, 0x20, 0x3d, 0x20, 0x5f, 0x33, 0x35, // float _373 = _35
	0x38, 0x2e, 0x79, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, // 8.y;.    float _
	0x35, 0x38, 0x33, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x64, 0x6f, 0x0a, 0x20, 0x20, 0x20, 0x20, // 583;.    do.    
	0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, 0x33, // {.        if (_3
	0x37, 0x33, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, 0x34, 0x34, 0x39, 0x39, 0x39, // 73 <= 0.04044999
	0x39, 0x32, 0x37, 0x32, 0x38, 0x32, 0x33, 0x33, 0x33, 0x33, 0x37, 0x34, 0x30, 0x32, 0x33, 0x34, // 9272823333740234
	0x33, 0x37, 0x35, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, // 375).        {. 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x35, 0x38, 0x33, 0x20, //            _583 
	0x3d, 0x20, 0x5f, 0x33, 0x37, 0x33, 0x20, 0x2a, 0x20, 0x30, 0x2e, 0x30, 0x37, 0x37, 0x33, 0x39, // = _373 * 0.07739
	0x39, 0x33, 0x38, 0x30, 0x35, 0x30, 0x35, 0x30, 0x38, 0x34, 0x39, 0x39, 0x31, 0x34, 0x35, 0x35, // 9380505084991455
	0x30, 0x37, 0x38, 0x31, 0x32, 0x35, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 078125;.        
	0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, //     break;.     
	0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, //    }.        els
	0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, // e.        {.    
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x35, 0x38, 0x33, 0x20, 0x3d, 0x20, 0x70, //         _583 = p
	0x6f, 0x77, 0x72, 0x28, 0x28, 0x5f, 0x33, 0x37, 0x33, 0x20, 0x2a, 0x20, 0x30, 0x2e, 0x39, 0x34, // owr((_373 * 0.94
	0x37, 0x38, 0x36, 0x37, 0x32, 0x37, 0x34, 0x32, 0x38, 0x34, 0x33, 0x36, 0x32, 0x37, 0x39, 0x32, // 7867274284362792
	0x39, 0x36, 0x38, 0x37, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x32, 0x31, 0x33, // 96875) + 0.05213
	0x32, 0x36, 0x39, 0x39, 0x36, 0x33, 0x38, 0x36, 0x30, 0x35, 0x31, 0x31, 0x37, 0x37, 0x39, 0x37, // 2699638605117797
	0x38, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x30, 0x30, 0x30, 0x30, // 8515625, 2.40000
	0x30, 0x30, 0x39, 0x35, 0x33, 0x36, 0x37, 0x34, 0x33, 0x31, 0x36, 0x34, 0x30, 0x36, 0x32, 0x35, // 0095367431640625
	0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, // );.            b
	0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, // reak;.        }.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x20, 0x2f, //         break; /
	0x2f, 0x20, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x77, 0x6f, // / unreachable wo
	0x72, 0x6b, 0x61, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x20, 0x77, // rkaround.    } w
	0x68, 0x69, 0x6c, 0x65, 0x28, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, // hile(false);.   
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x33, 0x37, 0x35, 0x20, 0x3d, 0x20, 0x5f, 0x33, //  float _375 = _3
	0x35, 0x38, 0x2e, 0x7a, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // 58.z;.    float 
	0x5f, 0x35, 0x38, 0x34, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x64, 0x6f, 0x0a, 0x20, 0x20, 0x20, // _584;.    do.   
	0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, //  {.        if (_
	0x33, 0x37, 0x35, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, 0x34, 0x34, 0x39, 0x39, // 375 <= 0.0404499
	0x39, 0x39, 0x32, 0x37, 0x32, 0x38, 0x32, 0x33, 0x33, 0x33, 0x33, 0x37, 0x34, 0x30, 0x32, 0x33, // 9927282333374023
	0x34, 0x33, 0x37, 0x35, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, // 4375).        {.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x35, 0x38, 0x34, //             _584
	0x20, 0x3d, 0x20, 0x5f, 0x33, 0x37, 0x35, 0x20, 0x2a, 0x20, 0x30, 0x2e, 0x30, 0x37, 0x37, 0x33, //  = _375 * 0.0773
	0x39, 0x39, 0x33, 0x38, 0x30, 0x35, 0x30, 0x35, 0x30, 0x38, 0x34, 0x39, 0x39, 0x31, 0x34, 0x35, // 9938050508499145
	0x35, 0x30, 0x37, 0x38, 0x31, 0x32, 0x35, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 5078125;.       
	0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, //      break;.    
	0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, //     }.        el
	0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, // se.        {.   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x35, 0x38, 0x34, 0x20, 0x3d, 0x20, //          _584 = 
	0x70, 0x6f, 0x77, 0x72, 0x28, 0x28, 0x5f, 0x33, 0x37, 0x35, 0x20, 0x2a, 0x20, 0x30, 0x2e, 0x39, // powr((_375 * 0.9
	0x34, 0x37, 0x38, 0x36, 0x37, 0x32, 0x37, 0x34, 0x32, 0x38, 0x34, 0x33, 0x36, 0x32, 0x37, 0x39, // 4786727428436279
	0x32, 0x39, 0x36, 0x38, 0x37, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x32, 0x31, // 296875) + 0.0521
	0x33, 0x32, 0x36, 0x39, 0x39, 0x36, 0x33, 0x38, 0x36, 0x30, 0x35, 0x31, 0x31, 0x37, 0x37, 0x39, // 3269963860511779
	0x37, 0x38, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x30, 0x30, 0x30, // 78515625, 2.4000
	0x30, 0x30, 0x30, 0x39, 0x35, 0x33, 0x36, 0x37, 0x34, 0x33, 0x31, 0x36, 0x34, 0x30, 0x36, 0x32, // 0009536743164062
	0x35, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 5);.            
	0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, // break;.        }
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x20, // .        break; 
	0x2f, 0x2f, 0x20, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x77, // // unreachable w
	0x6f, 0x72, 0x6b, 0x61, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x20, // orkaround.    } 
	0x77, 0x68, 0x69, 0x6c, 0x65, 0x28, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x20, 0x20, // while(false);.  
	0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x34, 0x33, 0x34, 0x20, 0x3d, 0x20, 0x5f, //   float _434 = _
	0x33, 0x36, 0x38, 0x2e, 0x78, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // 368.x;.    float
	0x20, 0x5f, 0x35, 0x38, 0x38, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x64, 0x6f, 0x0a, 0x20, 0x20, //  _588;.    do.  
	0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, //   {.        if (
	0x5f, 0x34, 0x33, 0x34, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, 0x34, 0x34, 0x39, // _434 <= 0.040449
	0x39, 0x39, 0x39, 0x32, 0x37, 0x32, 0x38, 0x32, 0x33, 0x33, 0x33, 0x33, 0x37, 0x34, 0x30, 0x32, // 9992728233337402
	0x33, 0x34, 0x33, 0x37, 0x35, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, // 34375).        {
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x35, 0x38, // .            _58
	0x38, 0x20, 0x3d, 0x20, 0x5f, 0x34, 0x33, 0x34, 0x20, 0x2a, 0x20, 0x30, 0x2e, 0x30, 0x37, 0x37, // 8 = _434 * 0.077
	0x33, 0x39, 0x39, 0x33, 0x38, 0x30, 0x35, 0x30, 0x35, 0x30, 0x38, 0x34, 0x39, 0x39, 0x31, 0x34, // 3993805050849914
	0x35, 0x35, 0x30, 0x37, 0x38, 0x31, 0x32, 0x35, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 55078125;.      
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, //       break;.   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x65, //      }.        e
	0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, // lse.        {.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x35, 0x38, 0x38, 0x20, 0x3d, //           _588 =
	0x20, 0x70, 0x6f, 0x77, 0x72, 0x28, 0x28, 0x5f, 0x34, 0x33, 0x34, 0x20, 0x2a, 0x20, 0x30, 0x2e, //  powr((_434 * 0.
	0x39, 0x34, 0x37, 0x38, 0x36, 0x37, 0x32, 0x37, 0x34, 0x32, 0x38, 0x34, 0x33, 0x36, 0x32, 0x37, // 9478672742843627
	0x39, 0x32, 0x39, 0x36, 0x38, 0x37, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x32, // 9296875) + 0.052
	0x31, 0x33, 0x32, 0x36, 0x39, 0x39, 0x36, 0x33, 0x38, 0x36, 0x30, 0x35, 0x31, 0x31, 0x37, 0x37, // 1326996386051177
	0x39, 0x37, 0x38, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x30, 0x30, // 978515625, 2.400
	0x30, 0x30, 0x30, 0x30, 0x39, 0x35, 0x33, 0x36, 0x37, 0x34, 0x33, 0x31, 0x36, 0x34, 0x30, 0x36, // 0000953674316406
	0x32, 0x35, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 25);.           
	0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //  break;.        
	0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, // }.        break;
	0x20, 0x2f, 0x2f, 0x20, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x20, //  // unreachable 
	0x77, 0x6f, 0x72, 0x6b, 0x61, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, // workaround.    }
	0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x28, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x20, //  while(false);. 
	0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x34, 0x33, 0x36, 0x20, 0x3d, 0x20, //    float _436 = 
	0x5f, 0x33, 0x36, 0x38, 0x2e, 0x79, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, // _368.y;.    floa
	0x74, 0x20, 0x5f, 0x35, 0x38, 0x39, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x64, 0x6f, 0x0a, 0x20, // t _589;.    do. 
	0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, //    {.        if 
	0x28, 0x5f, 0x34, 0x33, 0x36, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, 0x34, 0x34, // (_436 <= 0.04044
	0x39, 0x39, 0x39, 0x39, 0x32, 0x37, 0x32, 0x38, 0x32, 0x33, 0x33, 0x33, 0x33, 0x37, 0x34, 0x30, // 9999272823333740
	0x32, 0x33, 0x34, 0x33, 0x37, 0x35, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 234375).        
	0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x35, // {.            _5
	0x38, 0x39, 0x20, 0x3d, 0x20, 0x5f, 0x34, 0x33, 0x36, 0x20, 0x2a, 0x20, 0x30, 0x2e, 0x30, 0x37, // 89 = _436 * 0.07
	0x37, 0x33, 0x39, 0x39, 0x33, 0x38, 0x30, 0x35, 0x30, 0x35, 0x30, 0x38, 0x34, 0x39, 0x39, 0x31, // 7399380505084991
	0x34, 0x35, 0x35, 0x30, 0x37, 0x38, 0x31, 0x32, 0x35, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // 455078125;.     
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, //        break;.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //       }.        
	0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, // else.        {. 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x35, 0x38, 0x39, 0x20, //            _589 
	0x3d, 0x20, 0x70, 0x6f, 0x77, 0x72, 0x28, 0x28, 0x5f, 0x34, 0x33, 0x36, 0x20, 0x2a, 0x20, 0x30, // = powr((_436 * 0
	0x2e, 0x39, 0x34, 0x37, 0x38, 0x36, 0x37, 0x32, 0x37, 0x34, 0x32, 0x38, 0x34, 0x33, 0x36, 0x32, // .947867274284362
	0x37, 0x39, 0x32, 0x39, 0x36, 0x38, 0x37, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x35, // 79296875) + 0.05
	0x32, 0x31, 0x33, 0x32, 0x36, 0x39, 0x39, 0x36, 0x33, 0x38, 0x36, 0x30, 0x35, 0x31, 0x31, 0x37, // 2132699638605117
	0x37, 0x39, 0x37, 0x38, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x30, // 7978515625, 2.40
	0x30, 0x30, 0x30, 0x30, 0x30, 0x39, 0x35, 0x33, 0x36, 0x37, 0x34, 0x33, 0x31, 0x36, 0x34, 0x30, // 0000095367431640
	0x36, 0x32, 0x35, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 625);.          
	0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //   break;.       
	0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, //  }.        break
	0x3b, 0x20, 0x2f, 0x2f, 0x20, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, // ; // unreachable
	0x20, 0x77, 0x6f, 0x72, 0x6b, 0x61, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x0a, 0x20, 0x20, 0x20, 0x20, //  workaround.    
	0x7d, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x28, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x29, 0x3b, 0x0a, // } while(false);.
	0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x34, 0x33, 0x38, 0x20, 0x3d, //     float _438 =
	0x20, 0x5f, 0x33, 0x36, 0x38, 0x2e, 0x7a, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, //  _368.z;.    flo
	0x61, 0x74, 0x20, 0x5f, 0x35, 0x39, 0x30, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x64, 0x6f, 0x0a, // at _590;.    do.
	0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, //     {.        if
	0x20, 0x28, 0x5f, 0x34, 0x33, 0x38, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, 0x34, //  (_438 <= 0.0404
	0x34, 0x39, 0x39, 0x39, 0x39, 0x32, 0x37, 0x32, 0x38, 0x32, 0x33, 0x33, 0x33, 0x33, 0x37, 0x34, // 4999927282333374
	0x30, 0x32, 0x33, 0x34, 0x33, 0x37, 0x35, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 0234375).       
	0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, //  {.            _
	0x35, 0x39, 0x30, 0x20, 0x3d, 0x20, 0x5f, 0x34, 0x33, 0x38, 0x20, 0x2a, 0x20, 0x30, 0x2e, 0x30, // 590 = _438 * 0.0
	0x37, 0x37, 0x33, 0x39, 0x39, 0x33, 0x38, 0x30, 0x35, 0x30, 0x35, 0x30, 0x38, 0x34, 0x39, 0x39, // 7739938050508499
	0x31, 0x34, 0x35, 0x35, 0x30, 0x37, 0x38, 0x31, 0x32, 0x35, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, // 1455078125;.    
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, //         break;. 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //        }.       
	0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, //  else.        {.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x35, 0x39, 0x30, //             _590
	0x20, 0x3d, 0x20, 0x70, 0x6f, 0x77, 0x72, 0x28, 0x28, 0x5f, 0x34, 0x33, 0x38, 0x20, 0x2a, 0x20, //  = powr((_438 * 
	0x30, 0x2e, 0x39, 0x34, 0x37, 0x38, 0x36, 0x37, 0x32, 0x37, 0x34, 0x32, 0x38, 0x34, 0x33, 0x36, // 0.94786727428436
	0x32, 0x37, 0x39, 0x32, 0x39, 0x36, 0x38, 0x37, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, // 279296875) + 0.0
	0x35, 0x32, 0x31, 0x33, 0x32, 0x36, 0x39, 0x39, 0x36, 0x33, 0x38, 0x36, 0x30, 0x35, 0x31, 0x31, // 5213269963860511
	0x37, 0x37, 0x39, 0x37, 0x38, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x2c, 0x20, 0x32, 0x2e, 0x34, // 77978515625, 2.4
	0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x39, 0x35, 0x33, 0x36, 0x37, 0x34, 0x33, 0x31, 0x36, 0x34, // 0000009536743164
	0x30, 0x36, 0x32, 0x35, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 0625);.         
	0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //    break;.      
	0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, //   }.        brea
	0x6b, 0x3b, 0x20, 0x2f, 0x2f, 0x20, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, // k; // unreachabl
	0x65, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x61, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x0a, 0x20, 0x20, 0x20, // e workaround.   
	0x20, 0x7d, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x28, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x29, 0x3b, //  } while(false);
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x35, 0x31, 0x32, // .    float4 _512
	0x20, 0x3d, 0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x35, 0x38, 0x32, 0x2c, //  = (float4(_582,
	0x20, 0x5f, 0x35, 0x38, 0x33, 0x2c, 0x20, 0x5f, 0x35, 0x38, 0x34, 0x2c, 0x20, 0x31, 0x2e, 0x30, //  _583, _584, 1.0
	0x29, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, // ) * _mtl_u.Stere
	0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x66, 0x6c, // o_LeftMat) + (fl
	0x6f, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x35, 0x38, 0x38, 0x2c, 0x20, 0x5f, 0x35, 0x38, 0x39, 0x2c, // oat4(_588, _589,
	0x20, 0x5f, 0x35, 0x39, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x6d, //  _590, 1.0) * _m
	0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, // tl_u.Stereo_Righ
	0x74, 0x4d, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // tMat);.    float
	0x20, 0x5f, 0x35, 0x31, 0x37, 0x20, 0x3d, 0x20, 0x5f, 0x35, 0x31, 0x32, 0x2e, 0x78, 0x3b, 0x0a, //  _517 = _512.x;.
	0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x35, 0x39, 0x34, 0x3b, 0x0a, //     float _594;.
	0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, 0x35, 0x31, 0x37, 0x20, 0x3c, 0x3d, 0x20, //     if (_517 <= 
	0x30, 0x2e, 0x30, 0x30, 0x33, 0x31, 0x33, 0x30, 0x38, 0x30, 0x30, 0x30, 0x39, 0x30, 0x37, 0x33, // 0.00313080009073
	0x30, 0x31, 0x39, 0x30, 0x32, 0x37, 0x37, 0x30, 0x39, 0x39, 0x36, 0x30, 0x39, 0x33, 0x37, 0x35, // 0190277099609375
	0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ).    {.        
	0x5f, 0x35, 0x39, 0x34, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x30, 0x30, 0x30, 0x30, // _594 = 12.920000
	0x30, 0x37, 0x36, 0x32, 0x39, 0x33, 0x39, 0x34, 0x35, 0x33, 0x31, 0x32, 0x35, 0x20, 0x2a, 0x20, // 0762939453125 * 
	0x5f, 0x35, 0x31, 0x37, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, // _517;.    }.    
	0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // else.    {.     
	0x20, 0x20, 0x20, 0x5f, 0x35, 0x39, 0x34, 0x20, 0x3d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x35, 0x34, //    _594 = (1.054
	0x39, 0x39, 0x39, 0x39, 0x34, 0x37, 0x35, 0x34, 0x37, 0x39, 0x31, 0x32, 0x35, 0x39, 0x37, 0x36, // 9999475479125976
	0x35, 0x36, 0x32, 0x35, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x72, 0x28, 0x5f, 0x35, 0x31, 0x37, // 5625 * powr(_517
	0x2c, 0x20, 0x30, 0x2e, 0x34, 0x31, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x37, 0x33, 0x32, // , 0.416666656732
	0x35, 0x35, 0x39, 0x32, 0x30, 0x34, 0x31, 0x30, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x29, 0x20, // 5592041015625)) 
	0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x34, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x37, 0x30, 0x31, // - 0.054999999701
	0x39, 0x37, 0x36, 0x37, 0x37, 0x36, 0x31, 0x32, 0x33, 0x30, 0x34, 0x36, 0x38, 0x37, 0x35, 0x3b, // 976776123046875;
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // .    }.    float
	0x20, 0x5f, 0x35, 0x31, 0x39, 0x20, 0x3d, 0x20, 0x5f, 0x35, 0x31, 0x32, 0x2e, 0x79, 0x3b, 0x0a, //  _519 = _512.y;.
	0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x35, 0x39, 0x35, 0x3b, 0x0a, //     float _595;.
	0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, 0x35, 0x31, 0x39, 0x20, 0x3c, 0x3d, 0x20, //     if (_519 <= 
	0x30, 0x2e, 0x30, 0x30, 0x33, 0x31, 0x33, 0x30, 0x38, 0x30, 0x30, 0x30, 0x39, 0x30, 0x37, 0x33, // 0.00313080009073
	0x30, 0x31, 0x39, 0x30, 0x32, 0x37, 0x37, 0x30, 0x39, 0x39, 0x36, 0x30, 0x39, 0x33, 0x37, 0x35, // 0190277099609375
	0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ).    {.        
	0x5f, 0x35, 0x39, 0x35, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x30, 0x30, 0x30, 0x30, // _595 = 12.920000
	0x30, 0x37, 0x36, 0x32, 0x39, 0x33, 0x39, 0x34, 0x35, 0x33, 0x31, 0x32, 0x35, 0x20, 0x2a, 0x20, // 0762939453125 * 
	0x5f, 0x35, 0x31, 0x39, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, // _519;.    }.    
	0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // else.    {.     
	0x20, 0x20, 0x20, 0x5f, 0x35, 0x39, 0x35, 0x20, 0x3d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x35, 0x34, //    _595 = (1.054
	0x39, 0x39, 0x39, 0x39, 0x34, 0x37, 0x35, 0x34, 0x37, 0x39, 0x31, 0x32, 0x35, 0x39, 0x37, 0x36, // 9999475479125976
	0x35, 0x36, 0x32, 0x35, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x72, 0x28, 0x5f, 0x35, 0x31, 0x39, // 5625 * powr(_519
	0x2c, 0x20, 0x30, 0x2e, 0x34, 0x31, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x37, 0x33, 0x32, // , 0.416666656732
	0x35, 0x35, 0x39, 0x32, 0x30, 0x34, 0x31, 0x30, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x29, 0x20, // 5592041015625)) 
	0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x34, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x37, 0x30, 0x31, // - 0.054999999701
	0x39, 0x37, 0x36, 0x37, 0x37, 0x36, 0x31, 0x32, 0x33, 0x30, 0x34, 0x36, 0x38, 0x37, 0x35, 0x3b, // 976776123046875;
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // .    }.    float
	0x20, 0x5f, 0x35, 0x32, 0x31, 0x20, 0x3d, 0x20, 0x5f, 0x35, 0x31, 0x32, 0x2e, 0x7a, 0x3b, 0x0a, //  _521 = _512.z;.
	0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x35, 0x39, 0x36, 0x3b, 0x0a, //     float _596;.
	0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, 0x35, 0x32, 0x31, 0x20, 0x3c, 0x3d, 0x20, //     if (_521 <= 
	0x30, 0x2e, 0x30, 0x30, 0x33, 0x31, 0x33, 0x30, 0x38, 0x30, 0x30, 0x30, 0x39, 0x30, 0x37, 0x33, // 0.00313080009073
	0x30, 0x31, 0x39, 0x30, 0x32, 0x37, 0x37, 0x30, 0x39, 0x39, 0x36, 0x30, 0x39, 0x33, 0x37, 0x35, // 0190277099609375
	0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ).    {.        
	0x5f, 0x35, 0x39, 0x36, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x30, 0x30, 0x30, 0x30, // _596 = 12.920000
	0x30, 0x37, 0x36, 0x32, 0x39, 0x33, 0x39, 0x34, 0x35, 0x33, 0x31, 0x32, 0x35, 0x20, 0x2a, 0x20, // 0762939453125 * 
	0x5f, 0x35, 0x32, 0x31, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, // _521;.    }.    
	0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // else.    {.     
	0x20, 0x20, 0x20, 0x5f, 0x35, 0x39, 0x36, 0x20, 0x3d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x35, 0x34, //    _596 = (1.054
	0x39, 0x39, 0x39, 0x39, 0x34, 0x37, 0x35, 0x34, 0x37, 0x39, 0x31, 0x32, 0x35, 0x39, 0x37, 0x36, // 9999475479125976
	0x35, 0x36, 0x32, 0x35, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x72, 0x28, 0x5f, 0x35, 0x32, 0x31, // 5625 * powr(_521
	0x2c, 0x20, 0x30, 0x2e, 0x34, 0x31, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x37, 0x33, 0x32, // , 0.416666656732
	0x35, 0x35, 0x39, 0x32, 0x30, 0x34, 0x31, 0x30, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x29, 0x20, // 5592041015625)) 
	0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x34, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x37, 0x30, 0x31, // - 0.054999999701
	0x39, 0x37, 0x36, 0x37, 0x37, 0x36, 0x31, 0x32, 0x33, 0x30, 0x34, 0x36, 0x38, 0x37, 0x35, 0x3b, // 976776123046875;
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x6f, 0x75, 0x74, 0x2e, 0x62, // .    }.    out.b
	0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x20, 0x3d, 0x20, // gfx_FragData0 = 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x35, 0x39, 0x34, 0x2c, 0x20, 0x5f, 0x35, 0x39, // float4(_594, _59
	0x35, 0x2c, 0x20, 0x5f, 0x35, 0x39, 0x36, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, // 5, _596, 1.0);. 
	0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6f, 0x75, 0x74, 0x3b, 0x0a, 0x7d, //    return out;.}
	0x0a, 0x0a, 0x00, 0x00, 0xc0, 0x00,                                                             // ......
};
static const uint8_t fs_pp_stereo_anaglyph_lin_srgb_nodesat_st_essl[8658] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0x21, // FSH.Jc._.......!
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x33, 0x32, 0x30, 0x20, 0x65, // ..#version 320 e
	0x73, 0x0a, 0x23, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x47, 0x4c, 0x5f, // s.#extension GL_
	0x45, 0x58, 0x54, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, // EXT_shader_textu
	0x72, 0x65, 0x5f, 0x6c, 0x6f, 0x64, 0x20, 0x3a, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x0a, // re_lod : enable.
	0x23, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x47, 0x4c, 0x5f, 0x45, 0x58, // #extension GL_EX
	0x54, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x20, // T_texture_array 
	0x3a, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, // : enable.#define
	0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, //  attribute in.#d
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, // efine varying in
	0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, // .precision highp
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3b, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, //  float;.precisio
	0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x69, 0x6e, 0x74, 0x3b, 0x0a, 0x70, 0x72, 0x65, // n highp int;.pre
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x73, 0x61, 0x6d, // cision highp sam
	0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x3b, 0x0a, 0x23, 0x64, 0x65, // pler2DArray;.#de
	0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x4c, 0x6f, // fine texture2DLo
	0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, // d      texture2D
	0x4c, 0x6f, 0x64, 0x45, 0x58, 0x54, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, // LodEXT.#define t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, 0x20, 0x20, // exture2DGrad    
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x47, 0x72, 0x61, 0x64, 0x45, 0x58, //  texture2DGradEX
	0x54, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // T.#define textur
	0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, // e2DProjLod  text
	0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x4c, 0x6f, 0x64, 0x45, 0x58, 0x54, 0x0a, // ure2DProjLodEXT.
	0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, // #define texture2
	0x44, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // DProjGrad textur
	0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, 0x45, 0x58, 0x54, 0x0a, 0x23, // e2DProjGradEXT.#
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, // define textureCu
	0x62, 0x65, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // beLod    texture
	0x43, 0x75, 0x62, 0x65, 0x4c, 0x6f, 0x64, 0x45, 0x58, 0x54, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, // CubeLodEXT.#defi
	0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x47, 0x72, // ne textureCubeGr
	0x61, 0x64, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, // ad   textureCube
	0x47, 0x72, 0x61, 0x64, 0x45, 0x58, 0x54, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, // GradEXT.#define 
	0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // shadow2D(_sample
	0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, // r, _coord) textu
	0x72, 0x65, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, // re(_sampler, _co
	0x6f, 0x72, 0x64, 0x29, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x73, 0x68, 0x61, // ord).#define sha
	0x64, 0x6f, 0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, // dow2DProj(_sampl
	0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x74, 0x65, 0x78, 0x74, // er, _coord) text
	0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // ureProj(_sampler
	0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x0a, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x65, // , _coord).out me
	0x64, 0x69, 0x75, 0x6d, 0x70, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, // diump vec4 bgfx_
	0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, // FragColor;.varyi
	0x6e, 0x67, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x5f, 0x65, 0x79, 0x65, 0x3b, 0x0a, // ng float v_eye;.
	0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x5f, 0x74, // varying vec2 v_t
	0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, // excoord0;.vec3 i
	0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, // nstMul(vec3 _vec
	0x2c, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, // , mat3 _mtx) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, // eturn ( (_vec) *
	0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, //  (_mtx) ); }.vec
	0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, // 3 instMul(mat3 _
	0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, // mtx, vec3 _vec) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, // { return ( (_mtx
	0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, // ) * (_vec) ); }.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, // vec4 instMul(vec
	0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, // 4 _vec, mat4 _mt
	0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, // x) { return ( (_
	0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, // vec) * (_mtx) );
	0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, //  }.vec4 instMul(
	0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // mat4 _mtx, vec4 
	0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // _vec) { return (
	0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, //  (_mtx) * (_vec)
	0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, 0x70, 0x28, //  ); }.float rcp(
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // float _a) { retu
	0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, // rn 1.0/_a; }.vec
	0x32, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, // 2 rcp(vec2 _a) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, //  return vec2(1.0
	0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x70, // )/_a; }.vec3 rcp
	0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // (vec3 _a) { retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, // rn vec3(1.0)/_a;
	0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x34, //  }.vec4 rcp(vec4
	0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, //  _a) { return ve
	0x63, 0x34, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, // c4(1.0)/_a; }.ve
	0x63, 0x32, 0x20, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, // c2 vec2_splat(fl
	0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // oat _x) { return
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, //  vec2(_x, _x); }
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, // .vec3 vec3_splat
	0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // (float _x) { ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, // urn vec3(_x, _x,
	0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, 0x65, 0x63, //  _x); }.vec4 vec
	0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, // 4_splat(float _x
	0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, // ) { return vec4(
	0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, // _x, _x, _x, _x);
	0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, //  }.uvec2 uvec2_s
	0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, // plat(uint _x) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, // return uvec2(_x,
	0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, 0x75, 0x76, //  _x); }.uvec3 uv
	0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, // ec3_splat(uint _
	0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, // x) { return uvec
	0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, // 3(_x, _x, _x); }
	0x0a, 0x75, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, // .uvec4 uvec4_spl
	0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // at(uint _x) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, // turn uvec4(_x, _
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x6d, 0x61, // x, _x, _x); }.ma
	0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, // t4 mtxFromRows(v
	0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, // ec4 _0, vec4 _1,
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, //  vec4 _2, vec4 _
	0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, // 3).{.return tran
	0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, // spose(mat4(_0, _
	0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // 1, _2, _3) );.}.
	0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, // mat4 mtxFromCols
	0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, // (vec4 _0, vec4 _
	0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // 1, vec4 _2, vec4
	0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, //  _3).{.return ma
	0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, // t4(_0, _1, _2, _
	0x33, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, // 3);.}.mat3 mtxFr
	0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, // omRows(vec3 _0, 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, // vec3 _1, vec3 _2
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, // ).{.return trans
	0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, // pose(mat3(_0, _1
	0x2c, 0x20, 0x5f, 0x32, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, // , _2) );.}.mat3 
	0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, // mtxFromCols(vec3
	0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, //  _0, vec3 _1, ve
	0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // c3 _2).{.return 
	0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, // mat3(_0, _1, _2)
	0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, // ;.}.uniform vec4
	0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, //  u_viewRect;.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, // form vec4 u_view
	0x54, 0x65, 0x78, 0x65, 0x6c, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, // Texel;.uniform m
	0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // at4 u_view;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, // orm mat4 u_invVi
	0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, // ew;.uniform mat4
	0x20, 0x75, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, //  u_proj;.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, 0x6a, 0x3b, //  mat4 u_invProj;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, // .uniform mat4 u_
	0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // viewProj;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, // m mat4 u_invView
	0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, // Proj;.uniform ma
	0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, 0x3b, 0x0a, // t4 u_model[32];.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, // uniform mat4 u_m
	0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // odelView;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, // m mat4 u_modelVi
	0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // ewProj;.uniform 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x66, 0x34, // vec4 u_alphaRef4
	0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x66, 0x6c, 0x6f, // ;.float sqr( flo
	0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // at v).{.return v
	0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, // *v;.}.vec2 sqr( 
	0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // vec2 v).{.return
	0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x73, 0x71, 0x72, //  v*v;.}.vec3 sqr
	0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, // ( vec3 v).{.retu
	0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6d, // rn v*v;.}.vec3 m
	0x75, 0x6c, 0x5f, 0x77, 0x31, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x2c, 0x20, 0x6d, // ul_w1( vec3 v, m
	0x61, 0x74, 0x34, 0x20, 0x6d, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // at4 m).{.return 
	0x76, 0x2e, 0x78, 0x2a, 0x6d, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, // v.x*m[0].xyz + (
	0x76, 0x2e, 0x79, 0x2a, 0x6d, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, // v.y*m[1].xyz + (
	0x76, 0x2e, 0x7a, 0x2a, 0x6d, 0x5b, 0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x6d, // v.z*m[2].xyz + m
	0x5b, 0x33, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // [3].xyz));.}.flo
	0x61, 0x74, 0x20, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, // at acos_approx_d
	0x69, 0x76, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, // ivPI( float v).{
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, // .float x = abs(v
	0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, // );.if(1. - x <= 
	0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, // 0.00006103515625
	0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, // ).return (v >= 0
	0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x3b, 0x0a, 0x66, 0x6c, // .) ? 0. : 1.;.fl
	0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, // oat res = ((-0.1
	0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, // 55972/3.14159265
	0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, // 3589793238462643
	0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, // 3832795) * x + (
	0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, // 1.56467/3.141592
	0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, // 6535897932384626
	0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, // 433832795) ) * s
	0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, // qrt(1. - x);.ret
	0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, // urn (v >= 0.) ? 
	0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, // res : 1. - res;.
	0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, // }.float atan2_ap
	0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, // prox_div2PI( flo
	0x61, 0x74, 0x20, 0x79, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x29, 0x0a, 0x7b, // at y, float x).{
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3d, 0x20, 0x61, // .float abs_y = a
	0x62, 0x73, 0x28, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, // bs(y);.float abs
	0x5f, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x78, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, // _x = abs(x);.if(
	0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, // abs_x <= 0.00006
	0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x20, 0x26, 0x26, 0x20, 0x61, 0x62, 0x73, // 103515625 && abs
	0x5f, 0x79, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, // _y <= 0.00006103
	0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x30, // 515625).return 0
	0x2e, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x61, 0x62, // .;.float r = (ab
	0x73, 0x5f, 0x78, 0x20, 0x2d, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x20, 0x2f, 0x20, 0x28, // s_x - abs_y) / (
	0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2b, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x3b, 0x0a, // abs_x + abs_y);.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3d, 0x20, 0x28, 0x28, // float angle = ((
	0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x28, 0x33, 0x2e, 0x2f, 0x38, 0x2e, // x < 0.) ? (3./8.
	0x29, 0x20, 0x3a, 0x20, 0x28, 0x31, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x29, 0x0a, 0x2b, 0x20, 0x28, // ) : (1./8.)).+ (
	0x30, 0x2e, 0x32, 0x31, 0x31, 0x38, 0x36, 0x38, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, // 0.211868 /(2.*3.
	0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, // 1415926535897932
	0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, // 384626433832795)
	0x20, 0x2a, 0x20, 0x72, 0x20, 0x2a, 0x20, 0x72, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x39, 0x38, 0x37, //  * r * r - 0.987
	0x33, 0x30, 0x35, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, // 305 /(2.*3.14159
	0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, // 2653589793238462
	0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, // 6433832795)) * (
	0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x72, 0x20, 0x3a, 0x20, // (x < 0.) ? -r : 
	0x72, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x79, 0x20, 0x3c, 0x20, // r);.return (y < 
	0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3a, 0x20, 0x61, // 0.) ? -angle : a
	0x6e, 0x67, 0x6c, 0x65, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x73, // ngle;.}.float as
	0x69, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, // in_approx_divPI(
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, //  float v).{.floa
	0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, // t x = abs(v);.if
	0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, // (1. - x <= 0.000
	0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, // 06103515625).ret
	0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, // urn (v >= 0.) ? 
	0x30, 0x2e, 0x35, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // 0.5 : -0.5;.floa
	0x74, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, // t res = ((-0.155
	0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, // 972/3.1415926535
	0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, // 8979323846264338
	0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, // 32795) * x + (1.
	0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, // 56467/3.14159265
	0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, // 3589793238462643
	0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, // 3832795) ) * sqr
	0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // t(1. - x);.retur
	0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, // n (v >= 0.) ? 0.
	0x35, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x20, 0x2b, // 5 - res : -0.5 +
	0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x61, 0x79, //  res;.}.vec2 ray
	0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x75, // _to_equirectangu
	0x6c, 0x61, 0x72, 0x5f, 0x75, 0x76, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x61, 0x79, // lar_uv( vec3 ray
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // ).{.return vec2(
	0x0a, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, // .0.5 + atan2_app
	0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x79, // rox_div2PI(ray.y
	0x2c, 0x20, 0x72, 0x61, 0x79, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, // , ray.x),.acos_a
	0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, // pprox_divPI(ray.
	0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, // z));.}.float Inv
	0x73, 0x52, 0x47, 0x42, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // sRGB( float colo
	0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, // r).{.if (color <
	0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, 0x34, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // = 0.04045).retur
	0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, // n color * (1.0/1
	0x32, 0x2e, 0x39, 0x32, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, // 2.92);.else.retu
	0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, // rn pow(color * (
	0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, // 1.0/1.055) + (0.
	0x30, 0x35, 0x35, 0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x29, // 055/1.055), 2.4)
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x52, 0x65, 0x63, // ;.}.float InvRec
	0x37, 0x30, 0x39, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // 709( float color
	0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, // ).{.if (color <=
	0x20, 0x30, 0x2e, 0x30, 0x38, 0x31, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, //  0.081).return c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x34, 0x2e, 0x35, 0x29, // olor * (1.0/4.5)
	0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, // ;.else.return po
	0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, // w(color * (1.0/1
	0x2e, 0x30, 0x39, 0x39, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x2f, 0x31, // .099) + (0.099/1
	0x2e, 0x30, 0x39, 0x39, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x30, 0x2e, 0x34, 0x35, 0x29, // .099), 1.0/0.45)
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, // ;.}.float InvGam
	0x6d, 0x61, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, // ma( float color)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, // .{.return InvsRG
	0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, // B(color);.}.vec3
	0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, //  InvGamma( vec3 
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // color).{.return 
	0x76, 0x65, 0x63, 0x33, 0x28, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, // vec3(InvGamma(co
	0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, // lor.x),InvGamma(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, // color.y),InvGamm
	0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // a(color.z));.}.v
	0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, // ec3 InvToneMap( 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, // vec3 color).{.fl
	0x6f, 0x61, 0x74, 0x20, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x30, 0x2e, // oat inv_2bh = 0.
	0x35, 0x2f, 0x30, 0x2e, 0x32, 0x35, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x68, // 5/0.25;.float bh
	0x20, 0x3d, 0x20, 0x34, 0x2e, 0x30, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2d, 0x20, 0x32, 0x2e, //  = 4.0*0.25 - 2.
	0x30, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // 0;.return (color
	0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2b, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x63, 0x6f, //  - 1.0 + sqrt(co
	0x6c, 0x6f, 0x72, 0x2a, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x20, 0x62, 0x68, 0x29, // lor*(color + bh)
	0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x2a, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, //  + 1.0))*inv_2bh
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x20, // ;.}.float sRGB( 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // float f).{.float
	0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, //  s;.if (f <= 0.0
	0x30, 0x33, 0x31, 0x33, 0x30, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, // 031308).s = 12.9
	0x32, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, // 2 * f;.else.s = 
	0x31, 0x2e, 0x30, 0x35, 0x35, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x31, // 1.055 * pow(f, 1
	0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x34, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x3b, // .0/2.4) - 0.055;
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // .return s;.}.flo
	0x61, 0x74, 0x20, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // at Rec709( float
	0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, //  f).{.float s;.i
	0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, 0x29, 0x0a, 0x73, // f (f <= 0.018).s
	0x20, 0x3d, 0x20, 0x34, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, //  = 4.5 * f;.else
	0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, // .s = 1.099 * pow
	0x28, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x39, // (f, 0.45) - 0.09
	0x39, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // 9;.return s;.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x66, 0x6c, // loat FBGamma( fl
	0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // oat color).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, // urn sRGB(color);
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, // .}.vec2 FBGamma(
	0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, //  vec2 color).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, // eturn vec2(FBGam
	0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, // ma(color.x),FBGa
	0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, // mma(color.y));.}
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, // .vec3 FBGamma( v
	0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // ec3 color).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, // urn vec3(FBGamma
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, // (color.x),FBGamm
	0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, // a(color.y),FBGam
	0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // ma(color.z));.}.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x32, 0x32, 0x28, 0x20, // vec3 FBGamma22( 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // vec3 color).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, // turn vec3(pow(co
	0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, // lor.x, 1.0/2.2),
	0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, 0x30, // pow(color.y, 1.0
	0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, // /2.2),pow(color.
	0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // z, 1.0/2.2));.}.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, // float FBToneMap(
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, //  float l).{.retu
	0x72, 0x6e, 0x20, 0x6c, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, // rn l * ((l*0.25 
	0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, // + 1.0) / (l + 1.
	0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x54, 0x6f, // 0));.}.vec2 FBTo
	0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // neMap( vec2 colo
	0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, // r).{.float l = d
	0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, // ot(color,vec2(0.
	0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, // 176204+0.0108109
	0x2a, 0x30, 0x2e, 0x35, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2b, 0x30, 0x2e, // *0.5,0.812985+0.
	0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x3b, 0x0a, 0x72, // 0108109*0.5));.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, // eturn color * ((
	0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, // l*0.25 + 1.0) / 
	0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // (l + 1.0));.}.ve
	0x63, 0x33, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, // c3 FBToneMap( ve
	0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // c3 color).{.floa
	0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, // t l = dot(color,
	0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2c, 0x30, 0x2e, // vec3(0.176204,0.
	0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2c, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, // 812985,0.0108109
	0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // ));.return color
	0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, //  * ((l*0.25 + 1.
	0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, // 0) / (l + 1.0));
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, // .}.vec4 Additive
	0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, // ( vec4 cBase, ve
	0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // c4 cBlend, float
	0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, //  percent).{.retu
	0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2b, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // rn cBase + cBlen
	0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // d*percent;.}.vec
	0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // 3 Screen ( vec3 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, // cBase, vec3 cBle
	0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, // nd).{.return 1.0
	0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, //  - (1.0 - cBase)
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, //  * (1.0 - cBlend
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, // );.}.vec4 Screen
	0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, //  ( vec4 cBase, v
	0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // ec4 cBlend).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, // turn 1.0 - (1.0 
	0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, // - cBase) * (1.0 
	0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // - cBlend);.}.vec
	0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, // 3 ScreenHDR ( ve
	0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, // c3 cBase, vec3 c
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // Blend).{.return 
	0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, // max(1.0 - (1.0 -
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, //  cBase) * (1.0 -
	0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, //  cBlend), vec3(0
	0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // .,0.,0.));.}.vec
	0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, // 4 ScreenHDR ( ve
	0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, // c4 cBase, vec4 c
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // Blend).{.return 
	0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, // max(1.0 - (1.0 -
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, //  cBase) * (1.0 -
	0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, //  cBlend), vec4(0
	0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // .,0.,0.,0.));.}.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x20, 0x28, 0x20, // vec4 Multiply ( 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // vec4 cBase, vec4
	0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, //  cBlend, float p
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // ercent).{.return
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2a, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, //  cBase * cBlend*
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, // percent;.}.vec4 
	0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, // Overlay ( vec4 c
	0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // Base, vec4 cBlen
	0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, // d).{.vec4 cNew =
	0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, //  step(0.5, cBase
	0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, // );.cNew = mix(cB
	0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, // ase*cBlend*2.0, 
	0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, // 1.0-2.0*(1.0-cBa
	0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, // se)*(1.0-cBlend)
	0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // , cNew);.return 
	0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, // cNew;.}.vec4 Ove
	0x72, 0x6c, 0x61, 0x79, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, // rlayHDR ( vec4 c
	0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // Base, vec4 cBlen
	0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, // d).{.vec4 cNew =
	0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, //  step(0.5, cBase
	0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x6d, 0x69, // );.cNew = max(mi
	0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, // x(cBase*cBlend*2
	0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, // .0, 1.0-2.0*(1.0
	0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, // -cBase)*(1.0-cBl
	0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, // end), cNew), vec
	0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, // 4(0.,0.,0.,0.));
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, // .return cNew;.}.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x73, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, // vec3 cos_hemisph
	0x65, 0x72, 0x65, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, // ere_sample( vec2
	0x20, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x68, 0x69, 0x20, //  t).{.float phi 
	0x3d, 0x20, 0x74, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x28, 0x32, 0x2e, 0x30, 0x2a, 0x33, 0x2e, 0x31, // = t.y * (2.0*3.1
	0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, // 4159265358979323
	0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x3b, // 84626433832795);
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, // .float cosTheta 
	0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x74, 0x2e, 0x78, // = sqrt(1.0 - t.x
	0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, // );.float sinThet
	0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, // a = sqrt(t.x);.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x70, 0x2c, 0x63, 0x70, 0x3b, 0x0a, 0x7b, 0x73, 0x70, 0x3d, // loat sp,cp;.{sp=
	0x73, 0x69, 0x6e, 0x28, 0x70, 0x68, 0x69, 0x29, 0x3b, 0x63, 0x70, 0x3d, 0x63, 0x6f, 0x73, 0x28, // sin(phi);cp=cos(
	0x70, 0x68, 0x69, 0x29, 0x3b, 0x7d, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // phi);};.return v
	0x65, 0x63, 0x33, 0x28, 0x63, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, // ec3(cp * sinThet
	0x61, 0x2c, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x73, 0x70, 0x20, // a, cosTheta, sp 
	0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // * sinTheta);.}.v
	0x65, 0x63, 0x33, 0x20, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x76, 0x65, // ec3 rotate_to_ve
	0x63, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, // ctor_upper( vec3
	0x20, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, //  vec, vec3 norma
	0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, // l).{.if(normal.y
	0x20, 0x3e, 0x20, 0x2d, 0x30, 0x2e, 0x39, 0x39, 0x39, 0x39, 0x39, 0x29, 0x0a, 0x7b, 0x0a, 0x66, //  > -0.99999).{.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x28, 0x31, 0x2e, // loat h = 1.0/(1.
	0x30, 0x2b, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, // 0+normal.y);.flo
	0x61, 0x74, 0x20, 0x68, 0x7a, 0x20, 0x3d, 0x20, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, // at hz = h*normal
	0x2e, 0x7a, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x3d, 0x20, // .z;.float hzx = 
	0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x3b, 0x0a, 0x72, 0x65, 0x74, // hz*normal.x;.ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, // urn vec3(.vec.x 
	0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x7a, 0x2a, 0x6e, // * (normal.y+hz*n
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x29, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x79, // ormal.z) + vec.y
	0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, //  * normal.x - ve
	0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, // c.z * hzx,.vec.y
	0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x2d, 0x20, 0x76, 0x65, //  * normal.y - ve
	0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, // c.x * normal.x -
	0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, //  vec.z * normal.
	0x7a, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, // z,.vec.y * norma
	0x6c, 0x2e, 0x7a, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x68, 0x7a, // l.z - vec.x * hz
	0x78, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, // x + vec.z * (nor
	0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, // mal.y+h*normal.x
	0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, // *normal.x));.}.e
	0x6c, 0x73, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x2d, 0x76, 0x65, 0x63, 0x3b, // lse return -vec;
	0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // .}.uniform vec4 
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x53, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, // Stereo_Saturatio
	0x6e, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // n;.uniform vec4 
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, // Stereo_MS_ZPD_YA
	0x78, 0x69, 0x73, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, // xis;.uniform sam
	0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x20, 0x74, 0x65, 0x78, 0x5f, // pler2DArray tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, // stereo_fb;.unifo
	0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, // rm sampler2DArra
	0x79, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, // y tex_stereo_dep
	0x74, 0x68, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, // th;.uniform vec4
	0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, 0x76, 0x65, 0x63, //  w_h_height;.vec
	0x33, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, // 3 gatherEyeColor
	0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x69, 0x73, // (vec2 u, bool is
	0x4c, 0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, // Left).{.return t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x6f, 0x64, // exture2DArrayLod
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, // (tex_stereo_fb, 
	0x76, 0x65, 0x63, 0x33, 0x28, 0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, 0x20, 0x69, // vec3(u.x, u.y, i
	0x73, 0x4c, 0x65, 0x66, 0x74, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x30, 0x20, 0x3a, 0x20, 0x31, 0x2e, // sLeft ? 0.0 : 1.
	0x30, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // 0), 0.).rgb;.}.v
	0x6f, 0x69, 0x64, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x69, // oid gatherLeftRi
	0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, // ghtColors(vec2 u
	0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x63, 0x6f, 0x6c, 0x2c, // , out vec3 lcol,
	0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x6f, 0x6c, 0x29, 0x0a, //  out vec3 rcol).
	0x7b, 0x0a, 0x6c, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // {.lcol = texture
	0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, // 2DArrayLod(tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x75, // tereo_fb, vec3(u
	0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2c, 0x20, 0x30, 0x2e, // .x, u.y, 0.), 0.
	0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x72, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, // ).xyz;.rcol = te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x6f, 0x64, 0x28, // xture2DArrayLod(
	0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x76, // tex_stereo_fb, v
	0x65, 0x63, 0x33, 0x28, 0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, // ec3(u.x, u.y, 1.
	0x29, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, // ), 0.).xyz;.}.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // iform mat4 Stere
	0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, // o_LeftMat;.unifo
	0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, // rm mat4 Stereo_R
	0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // ightMat;.uniform
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, //  vec4 Stereo_Lef
	0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, // tLuminance_Gamma
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, // ;.uniform vec4 S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, // tereo_RightLumin
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x3b, 0x0a, 0x76, // ance_DynDesat;.v
	0x6f, 0x69, 0x64, 0x20, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x65, 0x73, 0x61, 0x74, // oid DynamicDesat
	0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, // Anaglyph( vec3 l
	0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // Col, vec3 rCol, 
	0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, // out vec3 lDesatC
	0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x44, 0x65, // ol, out vec3 rDe
	0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // satCol).{.float 
	0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, // left2LeftLum = d
	0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // ot(lCol, Stereo_
	0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, // LeftLuminance_Ga
	0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // mma.xyz);.float 
	0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, // left2RightLum = 
	0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // dot(lCol, Stereo
	0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, // _RightLuminance_
	0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, // DynDesat.xyz);.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, // loat right2LeftL
	0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, // um = dot(rCol, S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, // tereo_LeftLumina
	0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, // nce_Gamma.xyz);.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, // float right2Righ
	0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, // tLum = dot(rCol,
	0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, //  Stereo_RightLum
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, // inance_DynDesat.
	0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, // xyz);.float left
	0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, // Lum = left2LeftL
	0x75, 0x6d, 0x20, 0x2b, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, // um + left2RightL
	0x75, 0x6d, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, // um;.float rightL
	0x75, 0x6d, 0x20, 0x3d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, // um = right2LeftL
	0x75, 0x6d, 0x20, 0x2b, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, // um + right2Right
	0x4c, 0x75, 0x6d, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, // Lum;.float leftD
	0x65, 0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, // esat = Stereo_Ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, // ghtLuminance_Dyn
	0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x6c, // Desat.w * abs((l
	0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x6c, 0x65, // eft2LeftLum - le
	0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, // ft2RightLum) / (
	0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, // leftLum + 0.0001
	0x29, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, // ));.float rightD
	0x65, 0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, // esat = Stereo_Ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, // ghtLuminance_Dyn
	0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x72, // Desat.w * abs((r
	0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x72, // ight2LeftLum - r
	0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, // ight2RightLum) /
	0x20, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, //  (rightLum + 0.0
	0x30, 0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, // 001));.lDesatCol
	0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, //  = mix(lCol, vec
	0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x29, // 3_splat(leftLum)
	0x2c, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x72, 0x44, // , leftDesat);.rD
	0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x72, 0x43, // esatCol = mix(rC
	0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x72, // ol, vec3_splat(r
	0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, // ightLum), rightD
	0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x4c, 0x69, // esat);.}.vec3 Li
	0x6e, 0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, // nearAnaglyph( ve
	0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, // c3 lCol, vec3 rC
	0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // ol).{.vec3 color
	0x20, 0x3d, 0x20, 0x28, 0x28, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x6c, 0x43, 0x6f, 0x6c, //  = (( (vec4(lCol
	0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // , 1.)) * (Stereo
	0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x20, // _LeftMat) ) + ( 
	0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, // (vec4(rCol, 1.))
	0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, //  * (Stereo_Right
	0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x72, 0x65, 0x74, // Mat) )).rgb;.ret
	0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, // urn color;.}.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // form vec4 Stereo
	0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, // _DeghostGamma;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, // niform mat4 Ster
	0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, // eo_DeghostFilter
	0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x6e, // ;.vec3 DeghostAn
	0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, // aglyph( vec3 lCo
	0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, // l, vec3 rCol).{.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, 0x6e, // vec3 color = Lin
	0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, // earAnaglyph(lCol
	0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // , rCol);.return 
	0x28, 0x20, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x53, 0x74, // ( (pow(color, St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, // ereo_DeghostGamm
	0x61, 0x2e, 0x72, 0x67, 0x62, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, // a.rgb)) * (mat3(
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, // Stereo_DeghostFi
	0x6c, 0x74, 0x65, 0x72, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, // lter[0].xyz, Ste
	0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, // reo_DeghostFilte
	0x72, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // r[1].xyz, Stereo
	0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x32, // _DeghostFilter[2
	0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, // ].xyz)) );.}.voi
	0x64, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // d main().{.vec3 
	0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x3b, 0x0a, 0x67, 0x61, 0x74, 0x68, // lCol, rCol;.gath
	0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, // erLeftRightColor
	0x73, 0x28, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2c, 0x20, 0x6c, // s(v_texcoord0, l
	0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x6c, 0x43, 0x6f, 0x6c, // Col, rCol);.lCol
	0x20, 0x3d, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x6c, 0x43, 0x6f, 0x6c, //  = InvGamma(lCol
	0x29, 0x3b, 0x0a, 0x72, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, // );.rCol = InvGam
	0x6d, 0x61, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, // ma(rCol);.vec3 c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, // olor = LinearAna
	0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, // glyph(lCol, rCol
	0x29, 0x3b, 0x0a, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, // );.bgfx_FragColo
	0x72, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, // r = vec4(FBGamma
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x7d, // (color), 1.0);.}
	0x0a, 0x00,                                                                                     // ..
};
static const uint8_t fs_pp_stereo_anaglyph_lin_srgb_nodesat_st_glsl[8683] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x21, // FSH.Jc._.......!
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x34, 0x34, 0x30, 0x0a, 0x23, // ..#version 440.#
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x47, 0x4c, 0x5f, 0x45, 0x58, 0x54, // extension GL_EXT
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x20, 0x3a, // _texture_array :
	0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x0a, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, //  enable.out vec4
	0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, //  bgfx_FragColor;
	0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, // .#define gl_Frag
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, // Color bgfx_FragC
	0x6f, 0x6c, 0x6f, 0x72, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, // olor.#define tex
	0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ture2D          
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, // texture.#define 
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, // texture2DLod    
	0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, //    textureLod.#d
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x47, // efine texture2DG
	0x72, 0x61, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // rad      texture
	0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, // Grad.#define tex
	0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, // ture2DProjLod   
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x4c, 0x6f, 0x64, 0x0a, 0x23, // textureProjLod.#
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, // define texture2D
	0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // ProjGrad  textur
	0x65, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, // eProjGrad.#defin
	0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x4c, 0x6f, 0x64, // e textureCubeLod
	0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x0a, //      textureLod.
	0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, // #define textureC
	0x75, 0x62, 0x65, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, // ubeGrad    textu
	0x72, 0x65, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, // reGrad.#define t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x33, 0x44, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // exture3D        
	0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, //   texture.#defin
	0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x4c, 0x6f, 0x64, 0x4f, 0x66, // e texture2DLodOf
	0x66, 0x73, 0x65, 0x74, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x4f, // fset textureLodO
	0x66, 0x66, 0x73, 0x65, 0x74, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x61, 0x74, // ffset.#define at
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, // tribute in.#defi
	0x6e, 0x65, 0x20, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, // ne varying in.#d
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x62, 0x67, 0x66, 0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, // efine bgfxShadow
	0x32, 0x44, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, // 2D(_sampler, _co
	0x6f, 0x72, 0x64, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, // ord)     vec4_sp
	0x6c, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x5f, 0x73, 0x61, 0x6d, // lat(texture(_sam
	0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x29, 0x0a, // pler, _coord) ).
	0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x62, 0x67, 0x66, 0x78, 0x53, 0x68, 0x61, 0x64, // #define bgfxShad
	0x6f, 0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // ow2DProj(_sample
	0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, // r, _coord) vec4_
	0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, // splat(texturePro
	0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, // j(_sampler, _coo
	0x72, 0x64, 0x29, 0x20, 0x29, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x66, 0x6c, // rd) ).varying fl
	0x6f, 0x61, 0x74, 0x20, 0x76, 0x5f, 0x65, 0x79, 0x65, 0x3b, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, // oat v_eye;.varyi
	0x6e, 0x67, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, // ng vec2 v_texcoo
	0x72, 0x64, 0x30, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, // rd0;.vec3 instMu
	0x6c, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, // l(vec3 _vec, mat
	0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // 3 _mtx) { return
	0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, //  ( (_vec) * (_mt
	0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, // x) ); }.vec3 ins
	0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, // tMul(mat3 _mtx, 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // vec3 _vec) { ret
	0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, // urn ( (_mtx) * (
	0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, // _vec) ); }.vec4 
	0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, // instMul(vec4 _ve
	0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, // c, mat4 _mtx) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, // return ( (_vec) 
	0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, // * (_mtx) ); }.ve
	0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x20, // c4 instMul(mat4 
	0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, // _mtx, vec4 _vec)
	0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, //  { return ( (_mt
	0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, // x) * (_vec) ); }
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, 0x70, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, // .float rcp(float
	0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, //  _a) { return 1.
	0x30, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x63, 0x70, // 0/_a; }.vec2 rcp
	0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // (vec2 _a) { retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, // rn vec2(1.0)/_a;
	0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x33, //  }.vec3 rcp(vec3
	0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, //  _a) { return ve
	0x63, 0x33, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, // c3(1.0)/_a; }.ve
	0x63, 0x34, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x61, 0x29, 0x20, // c4 rcp(vec4 _a) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x31, 0x2e, // { return vec4(1.
	0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x65, // 0)/_a; }.vec2 ve
	0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, // c2_splat(float _
	0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, // x) { return vec2
	0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, // (_x, _x); }.vec3
	0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, //  vec3_splat(floa
	0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // t _x) { return v
	0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, // ec3(_x, _x, _x);
	0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, //  }.vec4 vec4_spl
	0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, // at(float _x) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, // eturn vec4(_x, _
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, // x, _x, _x); }.uv
	0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, // ec2 uvec2_splat(
	0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, // uint _x) { retur
	0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, // n uvec2(_x, _x);
	0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, //  }.uvec3 uvec3_s
	0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, // plat(uint _x) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, // return uvec3(_x,
	0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, //  _x, _x); }.uvec
	0x34, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, // 4 uvec4_splat(ui
	0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // nt _x) { return 
	0x75, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, // uvec4(_x, _x, _x
	0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, // , _x); }.mat4 mt
	0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, // xFromRows(vec4 _
	0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // 0, vec4 _1, vec4
	0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, //  _2, vec4 _3).{.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, // return transpose
	0x28, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, // (mat4(_0, _1, _2
	0x2c, 0x20, 0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, // , _3) );.}.mat4 
	0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, // mtxFromCols(vec4
	0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, //  _0, vec4 _1, ve
	0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, // c4 _2, vec4 _3).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, // {.return mat4(_0
	0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x3b, 0x0a, 0x7d, // , _1, _2, _3);.}
	0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, // .mat3 mtxFromRow
	0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // s(vec3 _0, vec3 
	0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, // _1, vec3 _2).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, // eturn transpose(
	0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, // mat3(_0, _1, _2)
	0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, //  );.}.mat3 mtxFr
	0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, // omCols(vec3 _0, 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, // vec3 _1, vec3 _2
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x28, // ).{.return mat3(
	0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, // _0, _1, _2);.}.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, // niform vec4 u_vi
	0x65, 0x77, 0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // ewRect;.uniform 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x54, 0x65, 0x78, 0x65, 0x6c, // vec4 u_viewTexel
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, // ;.uniform mat4 u
	0x5f, 0x76, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, // _view;.uniform m
	0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, // at4 u_invView;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x70, 0x72, // niform mat4 u_pr
	0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, // oj;.uniform mat4
	0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, //  u_invProj;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x50, // orm mat4 u_viewP
	0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, // roj;.uniform mat
	0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, // 4 u_invViewProj;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, // .uniform mat4 u_
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, // model[32];.unifo
	0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, // rm mat4 u_modelV
	0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, // iew;.uniform mat
	0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, // 4 u_modelViewPro
	0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // j;.uniform vec4 
	0x75, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x66, 0x34, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, // u_alphaRef4;.flo
	0x61, 0x74, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, // at sqr( float v)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, // .{.return v*v;.}
	0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, // .vec2 sqr( vec2 
	0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, // v).{.return v*v;
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, // .}.vec3 sqr( vec
	0x33, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, // 3 v).{.return v*
	0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6d, 0x75, 0x6c, 0x5f, 0x77, 0x31, // v;.}.vec3 mul_w1
	0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, // ( vec3 v, mat4 m
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2e, 0x78, 0x2a, 0x6d, // ).{.return v.x*m
	0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x79, 0x2a, 0x6d, // [0].xyz + (v.y*m
	0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x7a, 0x2a, 0x6d, // [1].xyz + (v.z*m
	0x5b, 0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x6d, 0x5b, 0x33, 0x5d, 0x2e, 0x78, // [2].xyz + m[3].x
	0x79, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x63, // yz));.}.float ac
	0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, // os_approx_divPI(
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, //  float v).{.floa
	0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, // t x = abs(v);.if
	0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, // (1. - x <= 0.000
	0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, // 06103515625).ret
	0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, // urn (v >= 0.) ? 
	0x30, 0x2e, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, // 0. : 1.;.float r
	0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, // es = ((-0.155972
	0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, // /3.1415926535897
	0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, // 9323846264338327
	0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, // 95) * x + (1.564
	0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, // 67/3.14159265358
	0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, // 9793238462643383
	0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, // 2795) ) * sqrt(1
	0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // . - x);.return (
	0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, // v >= 0.) ? res :
	0x20, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, //  1. - res;.}.flo
	0x61, 0x74, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, // at atan2_approx_
	0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x79, 0x2c, // div2PI( float y,
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, //  float x).{.floa
	0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x79, 0x29, // t abs_y = abs(y)
	0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3d, 0x20, // ;.float abs_x = 
	0x61, 0x62, 0x73, 0x28, 0x78, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, // abs(x);.if(abs_x
	0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, //  <= 0.0000610351
	0x35, 0x36, 0x32, 0x35, 0x20, 0x26, 0x26, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3c, 0x3d, // 5625 && abs_y <=
	0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, //  0.0000610351562
	0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x30, 0x2e, 0x3b, 0x0a, 0x66, 0x6c, // 5).return 0.;.fl
	0x6f, 0x61, 0x74, 0x20, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2d, // oat r = (abs_x -
	0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, //  abs_y) / (abs_x
	0x20, 0x2b, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, //  + abs_y);.float
	0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, //  angle = ((x < 0
	0x2e, 0x29, 0x20, 0x3f, 0x20, 0x28, 0x33, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x20, 0x3a, 0x20, 0x28, // .) ? (3./8.) : (
	0x31, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x29, 0x0a, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x32, 0x31, 0x31, // 1./8.)).+ (0.211
	0x38, 0x36, 0x38, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, // 868 /(2.*3.14159
	0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, // 2653589793238462
	0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x72, 0x20, // 6433832795) * r 
	0x2a, 0x20, 0x72, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x39, 0x38, 0x37, 0x33, 0x30, 0x35, 0x20, 0x2f, // * r - 0.987305 /
	0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, // (2.*3.1415926535
	0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, // 8979323846264338
	0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, // 32795)) * ((x < 
	0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x72, 0x20, 0x3a, 0x20, 0x72, 0x29, 0x3b, 0x0a, 0x72, // 0.) ? -r : r);.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x79, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, // eturn (y < 0.) ?
	0x20, 0x2d, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3a, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x3b, //  -angle : angle;
	0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x73, 0x69, 0x6e, 0x5f, 0x61, 0x70, // .}.float asin_ap
	0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, // prox_divPI( floa
	0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, // t v).{.float x =
	0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, //  abs(v);.if(1. -
	0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, //  x <= 0.00006103
	0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // 515625).return (
	0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x3a, // v >= 0.) ? 0.5 :
	0x20, 0x2d, 0x30, 0x2e, 0x35, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, //  -0.5;.float res
	0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, //  = ((-0.155972/3
	0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, // .141592653589793
	0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, // 2384626433832795
	0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, // ) * x + (1.56467
	0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, // /3.1415926535897
	0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, // 9323846264338327
	0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, // 95) ) * sqrt(1. 
	0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, // - x);.return (v 
	0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x2d, 0x20, 0x72, // >= 0.) ? 0.5 - r
	0x65, 0x73, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x65, 0x73, 0x3b, // es : -0.5 + res;
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x61, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x65, // .}.vec2 ray_to_e
	0x71, 0x75, 0x69, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x75, // quirectangular_u
	0x76, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x61, 0x79, 0x29, 0x0a, 0x7b, 0x0a, 0x72, // v( vec3 ray).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x0a, 0x30, 0x2e, 0x35, 0x20, // eturn vec2(.0.5 
	0x2b, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, // + atan2_approx_d
	0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x79, 0x2c, 0x20, 0x72, 0x61, 0x79, // iv2PI(ray.y, ray
	0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, // .x),.acos_approx
	0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, // _divPI(ray.z));.
	0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, // }.float InvsRGB(
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, //  float color).{.
	0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, // if (color <= 0.0
	0x34, 0x30, 0x34, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, // 4045).return col
	0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x29, // or * (1.0/12.92)
	0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, // ;.else.return po
	0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, // w(color * (1.0/1
	0x2e, 0x30, 0x35, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x2f, 0x31, // .055) + (0.055/1
	0x2e, 0x30, 0x35, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // .055), 2.4);.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x20, // loat InvRec709( 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, // float color).{.i
	0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x38, // f (color <= 0.08
	0x31, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, // 1).return color 
	0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x34, 0x2e, 0x35, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, // * (1.0/4.5);.els
	0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, // e.return pow(col
	0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, // or * (1.0/1.099)
	0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, //  + (0.099/1.099)
	0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // , 1.0/0.45);.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x66, // loat InvGamma( f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // loat color).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, // turn InvsRGB(col
	0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x47, // or);.}.vec3 InvG
	0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // amma( vec3 color
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, // ).{.return vec3(
	0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, // InvGamma(color.x
	0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // ),InvGamma(color
	0x2e, 0x79, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, // .y),InvGamma(col
	0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, // or.z));.}.vec3 I
	0x6e, 0x76, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // nvToneMap( vec3 
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x69, // color).{.float i
	0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x30, 0x2e, 0x35, 0x2f, 0x30, 0x2e, 0x32, // nv_2bh = 0.5/0.2
	0x35, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x34, 0x2e, // 5;.float bh = 4.
	0x30, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2d, 0x20, 0x32, 0x2e, 0x30, 0x3b, 0x0a, 0x72, 0x65, // 0*0.25 - 2.0;.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2d, 0x20, 0x31, 0x2e, // turn (color - 1.
	0x30, 0x20, 0x2b, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2a, 0x28, // 0 + sqrt(color*(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x20, 0x62, 0x68, 0x29, 0x20, 0x2b, 0x20, 0x31, 0x2e, // color + bh) + 1.
	0x30, 0x29, 0x29, 0x2a, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // 0))*inv_2bh;.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // loat sRGB( float
	0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, //  f).{.float s;.i
	0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x33, 0x31, 0x33, 0x30, // f (f <= 0.003130
	0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x20, 0x2a, 0x20, 0x66, // 8).s = 12.92 * f
	0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x35, 0x35, // ;.else.s = 1.055
	0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, //  * pow(f, 1.0/2.
	0x34, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // 4) - 0.055;.retu
	0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x52, 0x65, // rn s;.}.float Re
	0x63, 0x37, 0x30, 0x39, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, // c709( float f).{
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, // .float s;.if (f 
	0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x34, 0x2e, // <= 0.018).s = 4.
	0x35, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, // 5 * f;.else.s = 
	0x31, 0x2e, 0x30, 0x39, 0x39, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x30, // 1.099 * pow(f, 0
	0x2e, 0x34, 0x35, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x3b, 0x0a, 0x72, 0x65, // .45) - 0.099;.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // turn s;.}.float 
	0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, // FBGamma( float c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, // olor).{.return s
	0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // RGB(color);.}.ve
	0x63, 0x32, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, // c2 FBGamma( vec2
	0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, //  color).{.return
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, //  vec2(FBGamma(co
	0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, // lor.x),FBGamma(c
	0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, // olor.y));.}.vec3
	0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, //  FBGamma( vec3 c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // olor).{.return v
	0x65, 0x63, 0x33, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // ec3(FBGamma(colo
	0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, // r.x),FBGamma(col
	0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, // or.y),FBGamma(co
	0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // lor.z));.}.vec3 
	0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x32, 0x32, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // FBGamma22( vec3 
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // color).{.return 
	0x76, 0x65, 0x63, 0x33, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, // vec3(pow(color.x
	0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, // , 1.0/2.2),pow(c
	0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, // olor.y, 1.0/2.2)
	0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x2c, 0x20, 0x31, 0x2e, // ,pow(color.z, 1.
	0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // 0/2.2));.}.float
	0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, //  FBToneMap( floa
	0x74, 0x20, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6c, 0x20, // t l).{.return l 
	0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, // * ((l*0.25 + 1.0
	0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, // ) / (l + 1.0));.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, // }.vec2 FBToneMap
	0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, // ( vec2 color).{.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, // float l = dot(co
	0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, // lor,vec2(0.17620
	0x34, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x2c, // 4+0.0108109*0.5,
	0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, // 0.812985+0.01081
	0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // 09*0.5));.return
	0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, //  color * ((l*0.2
	0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, // 5 + 1.0) / (l + 
	0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, // 1.0));.}.vec3 FB
	0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, // ToneMap( vec3 co
	0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, // lor).{.float l =
	0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x33, 0x28, //  dot(color,vec3(
	0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, // 0.176204,0.81298
	0x35, 0x2c, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x29, 0x29, 0x3b, 0x0a, 0x72, // 5,0.0108109));.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, // eturn color * ((
	0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, // l*0.25 + 1.0) / 
	0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // (l + 1.0));.}.ve
	0x63, 0x34, 0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x28, 0x20, 0x76, 0x65, 0x63, // c4 Additive( vec
	0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // 4 cBase, vec4 cB
	0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, // lend, float perc
	0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, // ent).{.return cB
	0x61, 0x73, 0x65, 0x20, 0x2b, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, // ase + cBlend*per
	0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, // cent;.}.vec3 Scr
	0x65, 0x65, 0x6e, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, // een ( vec3 cBase
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, // , vec3 cBlend).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, // .return 1.0 - (1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, // .0 - cBase) * (1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // .0 - cBlend);.}.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x20, 0x76, 0x65, // vec4 Screen ( ve
	0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, // c4 cBase, vec4 c
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // Blend).{.return 
	0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, // 1.0 - (1.0 - cBa
	0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, // se) * (1.0 - cBl
	0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, // end);.}.vec3 Scr
	0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, // eenHDR ( vec3 cB
	0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, // ase, vec3 cBlend
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, // ).{.return max(1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, // .0 - (1.0 - cBas
	0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, // e) * (1.0 - cBle
	0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, // nd), vec3(0.,0.,
	0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, // 0.));.}.vec4 Scr
	0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // eenHDR ( vec4 cB
	0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, // ase, vec4 cBlend
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, // ).{.return max(1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, // .0 - (1.0 - cBas
	0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, // e) * (1.0 - cBle
	0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, // nd), vec4(0.,0.,
	0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, // 0.,0.));.}.vec4 
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // Multiply ( vec4 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, // cBase, vec4 cBle
	0x6e, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, // nd, float percen
	0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, // t).{.return cBas
	0x65, 0x20, 0x2a, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, // e * cBlend*perce
	0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, // nt;.}.vec4 Overl
	0x61, 0x79, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, // ay ( vec4 cBase,
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, //  vec4 cBlend).{.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, // vec4 cNew = step
	0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, // (0.5, cBase);.cN
	0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, // ew = mix(cBase*c
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, // Blend*2.0, 1.0-2
	0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, // .0*(1.0-cBase)*(
	0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, // 1.0-cBlend), cNe
	0x77, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, // w);.return cNew;
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x48, // .}.vec4 OverlayH
	0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, // DR ( vec4 cBase,
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, //  vec4 cBlend).{.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, // vec4 cNew = step
	0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, // (0.5, cBase);.cN
	0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, // ew = max(mix(cBa
	0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, // se*cBlend*2.0, 1
	0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, // .0-2.0*(1.0-cBas
	0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, // e)*(1.0-cBlend),
	0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, //  cNew), vec4(0.,
	0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // 0.,0.,0.));.retu
	0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // rn cNew;.}.vec3 
	0x63, 0x6f, 0x73, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x5f, 0x73, // cos_hemisphere_s
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x29, 0x0a, 0x7b, // ample( vec2 t).{
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x68, 0x69, 0x20, 0x3d, 0x20, 0x74, 0x2e, 0x79, // .float phi = t.y
	0x20, 0x2a, 0x20, 0x28, 0x32, 0x2e, 0x30, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, //  * (2.0*3.141592
	0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, // 6535897932384626
	0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // 433832795);.floa
	0x74, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, // t cosTheta = sqr
	0x74, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, // t(1.0 - t.x);.fl
	0x6f, 0x61, 0x74, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, // oat sinTheta = s
	0x71, 0x72, 0x74, 0x28, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // qrt(t.x);.float 
	0x73, 0x70, 0x2c, 0x63, 0x70, 0x3b, 0x0a, 0x7b, 0x73, 0x70, 0x3d, 0x73, 0x69, 0x6e, 0x28, 0x70, // sp,cp;.{sp=sin(p
	0x68, 0x69, 0x29, 0x3b, 0x63, 0x70, 0x3d, 0x63, 0x6f, 0x73, 0x28, 0x70, 0x68, 0x69, 0x29, 0x3b, // hi);cp=cos(phi);
	0x7d, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x63, // };.return vec3(c
	0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x63, 0x6f, // p * sinTheta, co
	0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x73, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, // sTheta, sp * sin
	0x54, 0x68, 0x65, 0x74, 0x61, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, // Theta);.}.vec3 r
	0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, // otate_to_vector_
	0x75, 0x70, 0x70, 0x65, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x2c, // upper( vec3 vec,
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, //  vec3 normal).{.
	0x69, 0x66, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x3e, 0x20, 0x2d, 0x30, // if(normal.y > -0
	0x2e, 0x39, 0x39, 0x39, 0x39, 0x39, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // .99999).{.float 
	0x68, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x28, 0x31, 0x2e, 0x30, 0x2b, 0x6e, 0x6f, 0x72, // h = 1.0/(1.0+nor
	0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, // mal.y);.float hz
	0x20, 0x3d, 0x20, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x3b, 0x0a, 0x66, //  = h*normal.z;.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x3d, 0x20, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, // loat hzx = hz*no
	0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // rmal.x;.return v
	0x65, 0x63, 0x33, 0x28, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, // ec3(.vec.x * (no
	0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, // rmal.y+hz*normal
	0x2e, 0x7a, 0x29, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, // .z) + vec.y * no
	0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, // rmal.x - vec.z *
	0x20, 0x68, 0x7a, 0x78, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, //  hzx,.vec.y * no
	0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, // rmal.y - vec.x *
	0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, //  normal.x - vec.
	0x7a, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x2c, 0x0a, 0x76, 0x65, // z * normal.z,.ve
	0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x20, 0x2d, // c.y * normal.z -
	0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x2b, 0x20, 0x76, //  vec.x * hzx + v
	0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, // ec.z * (normal.y
	0x2b, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, // +h*normal.x*norm
	0x61, 0x6c, 0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x72, // al.x));.}.else r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x2d, 0x76, 0x65, 0x63, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, // eturn -vec;.}.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // iform vec4 Stere
	0x6f, 0x5f, 0x53, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x0a, 0x75, 0x6e, // o_Saturation;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // iform vec4 Stere
	0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x3b, 0x0a, // o_MS_ZPD_YAxis;.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, // uniform sampler2
	0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // DArray tex_stere
	0x6f, 0x5f, 0x66, 0x62, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, // o_fb;.uniform sa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x20, 0x74, 0x65, 0x78, // mpler2DArray tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x3b, 0x0a, 0x75, // _stereo_depth;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x77, 0x5f, 0x68, 0x5f, // niform vec4 w_h_
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x67, 0x61, 0x74, // height;.vec3 gat
	0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x76, 0x65, 0x63, 0x32, // herEyeColor(vec2
	0x20, 0x75, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x29, //  u, bool isLeft)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // .{.return textur
	0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, // e2DArrayLod(tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, // stereo_fb, vec3(
	0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, 0x20, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, // u.x, u.y, isLeft
	0x20, 0x3f, 0x20, 0x30, 0x2e, 0x30, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x30, //  ? 0.0 : 1.0), 0
	0x2e, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x67, // .).rgb;.}.void g
	0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, // atherLeftRightCo
	0x6c, 0x6f, 0x72, 0x73, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x6f, 0x75, 0x74, // lors(vec2 u, out
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x63, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, //  vec3 lcol, out 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x6c, 0x63, 0x6f, // vec3 rcol).{.lco
	0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x41, 0x72, 0x72, // l = texture2DArr
	0x61, 0x79, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // ayLod(tex_stereo
	0x5f, 0x66, 0x62, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, // _fb, vec3(u.x, u
	0x2e, 0x79, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2e, 0x78, 0x79, 0x7a, // .y, 0.), 0.).xyz
	0x3b, 0x0a, 0x72, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // ;.rcol = texture
	0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, // 2DArrayLod(tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x75, // tereo_fb, vec3(u
	0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, 0x29, 0x2c, 0x20, 0x30, 0x2e, // .x, u.y, 1.), 0.
	0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // ).xyz;.}.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, //  mat4 Stereo_Lef
	0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, // tMat;.uniform ma
	0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, // t4 Stereo_RightM
	0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, // at;.uniform vec4
	0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, //  Stereo_LeftLumi
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, 0x6e, 0x69, // nance_Gamma;.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // form vec4 Stereo
	0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, // _RightLuminance_
	0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x3b, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x44, // DynDesat;.void D
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x65, 0x73, 0x61, 0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, // ynamicDesatAnagl
	0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // yph( vec3 lCol, 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, // vec3 rCol, out v
	0x65, 0x63, 0x33, 0x20, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, // ec3 lDesatCol, o
	0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, // ut vec3 rDesatCo
	0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, // l).{.float left2
	0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, // LeftLum = dot(lC
	0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, // ol, Stereo_LeftL
	0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, // uminance_Gamma.x
	0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, // yz);.float left2
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, // RightLum = dot(l
	0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, // Col, Stereo_Righ
	0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, // tLuminance_DynDe
	0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // sat.xyz);.float 
	0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, // right2LeftLum = 
	0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // dot(rCol, Stereo
	0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, // _LeftLuminance_G
	0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // amma.xyz);.float
	0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, //  right2RightLum 
	0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, // = dot(rCol, Ster
	0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, // eo_RightLuminanc
	0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, // e_DynDesat.xyz);
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, // .float leftLum =
	0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, //  left2LeftLum + 
	0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, 0x0a, 0x66, // left2RightLum;.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, // loat rightLum = 
	0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, // right2LeftLum + 
	0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, 0x0a, // right2RightLum;.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x20, // float leftDesat 
	0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // = Stereo_RightLu
	0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, // minance_DynDesat
	0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, // .w * abs((left2L
	0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, // eftLum - left2Ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, // ghtLum) / (leftL
	0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x66, // um + 0.0001));.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x20, // loat rightDesat 
	0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // = Stereo_RightLu
	0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, // minance_DynDesat
	0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, // .w * abs((right2
	0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, // LeftLum - right2
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x72, 0x69, 0x67, // RightLum) / (rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, 0x29, // htLum + 0.0001))
	0x3b, 0x0a, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, // ;.lDesatCol = mi
	0x78, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, // x(lCol, vec3_spl
	0x61, 0x74, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x66, // at(leftLum), lef
	0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x72, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, // tDesat);.rDesatC
	0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, // ol = mix(rCol, v
	0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, // ec3_splat(rightL
	0x75, 0x6d, 0x29, 0x2c, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, // um), rightDesat)
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x41, // ;.}.vec3 LinearA
	0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, // naglyph( vec3 lC
	0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, // ol, vec3 rCol).{
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x28, // .vec3 color = ((
	0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, 0x29, //  (vec4(lCol, 1.)
	0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, // ) * (Stereo_Left
	0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, // Mat) ) + ( (vec4
	0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, // (rCol, 1.)) * (S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, // tereo_RightMat) 
	0x29, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, // )).rgb;.return c
	0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // olor;.}.uniform 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, // vec4 Stereo_Degh
	0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // ostGamma;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, // m mat4 Stereo_De
	0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3b, 0x0a, 0x76, 0x65, 0x63, // ghostFilter;.vec
	0x33, 0x20, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, // 3 DeghostAnaglyp
	0x68, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, // h( vec3 lCol, ve
	0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // c3 rCol).{.vec3 
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x41, 0x6e, // color = LinearAn
	0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, // aglyph(lCol, rCo
	0x6c, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x70, 0x6f, // l);.return ( (po
	0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // w(color, Stereo_
	0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x72, 0x67, 0x62, // DeghostGamma.rgb
	0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, // )) * (mat3(Stere
	0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, // o_DeghostFilter[
	0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, // 0].xyz, Stereo_D
	0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x31, 0x5d, 0x2e, // eghostFilter[1].
	0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, // xyz, Stereo_Degh
	0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, // ostFilter[2].xyz
	0x29, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x6d, 0x61, 0x69, // )) );.}.void mai
	0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, // n().{.vec3 lCol,
	0x20, 0x72, 0x43, 0x6f, 0x6c, 0x3b, 0x0a, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x66, //  rCol;.gatherLef
	0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x28, 0x76, 0x5f, 0x74, // tRightColors(v_t
	0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2c, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // excoord0, lCol, 
	0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x6c, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x49, 0x6e, // rCol);.lCol = In
	0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x72, 0x43, // vGamma(lCol);.rC
	0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x72, 0x43, // ol = InvGamma(rC
	0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, // ol);.vec3 color 
	0x3d, 0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, // = LinearAnaglyph
	0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x67, 0x6c, // (lCol, rCol);.gl
	0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, // _FragColor = vec
	0x34, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, // 4(FBGamma(color)
	0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x00,                               // , 1.0);.}..
};
static const uint8_t fs_pp_stereo_anaglyph_lin_srgb_nodesat_st_dx11[1981] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x0e, 0x53, // FSH.Jc._.......S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x00, 0x00, // tereo_LeftMat...
	0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, // ........Stereo_R
	0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x00, 0x40, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, // ightMat..@......
	0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x30, // ..tex_stereo_fb0
	0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // ..........tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x30, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, // ereo_fb0........
	0x00, 0x44, 0x07, 0x00, 0x00, 0x44, 0x58, 0x42, 0x43, 0x12, 0xee, 0x46, 0xbf, 0x5a, 0x8f, 0xcd, // .D...DXBC..F.Z..
	0x5b, 0xaa, 0x06, 0xef, 0xad, 0x55, 0x4d, 0x5a, 0x40, 0x01, 0x00, 0x00, 0x00, 0x44, 0x07, 0x00, // [....UMZ@....D..
	0x00, 0x03, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x9c, 0x00, 0x00, 0x00, 0xd0, 0x00, 0x00, // .....,..........
	0x00, 0x49, 0x53, 0x47, 0x4e, 0x68, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, // .ISGNh..........
	0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, // .P..............
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, // ................
	0x00, 0x5c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, // ................
	0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x06, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x4f, 0x53, 0x49, // .........SV_POSI
	0x54, 0x49, 0x4f, 0x4e, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0xab, 0xab, // TION.TEXCOORD...
	0xab, 0x4f, 0x53, 0x47, 0x4e, 0x2c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, // .OSGN,..........
	0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, // . ..............
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x54, 0x41, 0x52, 0x47, // .........SV_TARG
	0x45, 0x54, 0x00, 0xab, 0xab, 0x53, 0x48, 0x45, 0x58, 0x6c, 0x06, 0x00, 0x00, 0x50, 0x00, 0x00, // ET...SHEXl...P..
	0x00, 0x9b, 0x01, 0x00, 0x00, 0x6a, 0x08, 0x00, 0x01, 0x59, 0x00, 0x00, 0x04, 0x46, 0x8e, 0x20, // .....j...Y...F. 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x03, 0x00, 0x60, 0x10, // .........Z....`.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x58, 0x40, 0x00, 0x04, 0x00, 0x70, 0x10, 0x00, 0x00, 0x00, 0x00, // .....X@...p.....
	0x00, 0x55, 0x55, 0x00, 0x00, 0x62, 0x10, 0x00, 0x03, 0x62, 0x10, 0x10, 0x00, 0x01, 0x00, 0x00, // .UU..b...b......
	0x00, 0x65, 0x00, 0x00, 0x03, 0xf2, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, // .e.... ......h..
	0x02, 0x03, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x32, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, // .....6...2......
	0x00, 0x96, 0x15, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x42, 0x00, 0x10, // .........6...B..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, // ......@......H..
	0x8d, 0x02, 0x02, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, // .....CU..r......
	0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, 0x00, 0x00, 0x00, // .F.......F~.....
	0x00, 0x00, 0x60, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, // ..`.......@.....
	0x00, 0x32, 0x00, 0x00, 0x0f, 0x32, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, // .2...2.......F..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x6e, 0xa7, 0x72, 0x3f, 0x6e, 0xa7, 0x72, // ......@..n.r?n.r
	0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x19, 0x89, 0x55, // ?.........@....U
	0x3d, 0x19, 0x89, 0x55, 0x3d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00, // =..U=......../..
	0x05, 0x32, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, // .2.......F......
	0x00, 0x38, 0x00, 0x00, 0x0a, 0x32, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, // .8...2.......F..
	0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x9a, 0x99, 0x19, 0x40, 0x9a, 0x99, 0x19, // ......@.....@...
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x05, 0x32, 0x00, 0x10, // @............2..
	0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, // .....F.......8..
	0x0a, 0xc2, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x04, 0x10, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x91, 0x83, 0x9e, // ..@.............
	0x3d, 0x91, 0x83, 0x9e, 0x3d, 0x1d, 0x00, 0x00, 0x0a, 0xb2, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, // =...=...........
	0x00, 0x02, 0x40, 0x00, 0x00, 0xe6, 0xae, 0x25, 0x3d, 0xe6, 0xae, 0x25, 0x3d, 0x00, 0x00, 0x00, // ..@....%=..%=...
	0x00, 0xe6, 0xae, 0x25, 0x3d, 0x46, 0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, // ...%=F.......7..
	0x09, 0x32, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, // .2.......F......
	0x00, 0xe6, 0x0a, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, // .........F......
	0x00, 0x32, 0x00, 0x00, 0x09, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, // .2...........*..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x6e, 0xa7, 0x72, 0x3f, 0x01, 0x40, 0x00, // ......@..n.r?.@.
	0x00, 0x19, 0x89, 0x55, 0x3d, 0x2f, 0x00, 0x00, 0x05, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, // ...U=/..........
	0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x0a, 0x32, 0x00, 0x10, // .........8...2..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, // ..............@.
	0x00, 0x9a, 0x99, 0x19, 0x40, 0x91, 0x83, 0x9e, 0x3d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ....@...=.......
	0x00, 0x19, 0x00, 0x00, 0x05, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x09, 0x42, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, // .....7...B......
	0x00, 0x3a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, // .:..............
	0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x82, 0x00, 0x10, // .........6......
	0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x11, 0x00, 0x00, // ......@.....?...
	0x08, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x01, 0x00, 0x00, // .........F......
	0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, // .F. ............
	0x08, 0x22, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x01, 0x00, 0x00, // .".......F......
	0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, // .F. ............
	0x08, 0x42, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x01, 0x00, 0x00, // .B.......F......
	0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, // .F. .........6..
	0x05, 0x32, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x96, 0x15, 0x10, 0x00, 0x01, 0x00, 0x00, // .2..............
	0x00, 0x36, 0x00, 0x00, 0x05, 0x42, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, // .6...B........@.
	0x00, 0x00, 0x00, 0x80, 0x3f, 0x48, 0x00, 0x00, 0x8d, 0x02, 0x02, 0x00, 0x80, 0x43, 0x55, 0x15, // ....?H.......CU.
	0x00, 0x72, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x01, 0x00, 0x00, // .r.......F......
	0x00, 0x46, 0x7e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x00, 0x00, 0x00, // .F~.......`.....
	0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x0f, 0x32, 0x00, 0x10, // ..@......2...2..
	0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, // .....F........@.
	0x00, 0x6e, 0xa7, 0x72, 0x3f, 0x6e, 0xa7, 0x72, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .n.r?n.r?.......
	0x00, 0x02, 0x40, 0x00, 0x00, 0x19, 0x89, 0x55, 0x3d, 0x19, 0x89, 0x55, 0x3d, 0x00, 0x00, 0x00, // ..@....U=..U=...
	0x00, 0x00, 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x05, 0x32, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, // ...../...2......
	0x00, 0x46, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x0a, 0x32, 0x00, 0x10, // .F.......8...2..
	0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, // .....F........@.
	0x00, 0x9a, 0x99, 0x19, 0x40, 0x9a, 0x99, 0x19, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ....@...@.......
	0x00, 0x19, 0x00, 0x00, 0x05, 0x32, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, // .....2.......F..
	0x00, 0x02, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x0a, 0xc2, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, // .....8..........
	0x00, 0x06, 0x04, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, // ..........@.....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x91, 0x83, 0x9e, 0x3d, 0x91, 0x83, 0x9e, 0x3d, 0x1d, 0x00, 0x00, // ........=...=...
	0x0a, 0xb2, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0xe6, 0xae, 0x25, // ..........@....%
	0x3d, 0xe6, 0xae, 0x25, 0x3d, 0x00, 0x00, 0x00, 0x00, 0xe6, 0xae, 0x25, 0x3d, 0x46, 0x08, 0x10, // =..%=......%=F..
	0x00, 0x01, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x09, 0x32, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, // .....7...2......
	0x00, 0x46, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x02, 0x00, 0x00, // .F..............
	0x00, 0x46, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x09, 0x82, 0x00, 0x10, // .F.......2......
	0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, // .....*........@.
	0x00, 0x6e, 0xa7, 0x72, 0x3f, 0x01, 0x40, 0x00, 0x00, 0x19, 0x89, 0x55, 0x3d, 0x38, 0x00, 0x00, // .n.r?.@....U=8..
	0x07, 0x12, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, // .........*......
	0x00, 0x01, 0x40, 0x00, 0x00, 0x91, 0x83, 0x9e, 0x3d, 0x2f, 0x00, 0x00, 0x05, 0x82, 0x00, 0x10, // ..@.....=/......
	0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, // .....:.......8..
	0x07, 0x82, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, // .........:......
	0x00, 0x01, 0x40, 0x00, 0x00, 0x9a, 0x99, 0x19, 0x40, 0x19, 0x00, 0x00, 0x05, 0x82, 0x00, 0x10, // ..@.....@.......
	0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, // .....:.......7..
	0x09, 0x42, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, // .B.......:......
	0x00, 0x0a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, // .........:......
	0x00, 0x36, 0x00, 0x00, 0x05, 0x82, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, // .6............@.
	0x00, 0x00, 0x00, 0x80, 0x3f, 0x11, 0x00, 0x00, 0x08, 0x12, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, // ....?...........
	0x00, 0x46, 0x0e, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, // .F.......F. ....
	0x00, 0x04, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x08, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, // ........."......
	0x00, 0x46, 0x0e, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, // .F.......F. ....
	0x00, 0x05, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x08, 0x42, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, // .........B......
	0x00, 0x46, 0x0e, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, // .F.......F. ....
	0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, // .........r......
	0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x01, 0x00, 0x00, // .F.......F......
	0x00, 0x2f, 0x00, 0x00, 0x05, 0x72, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, // ./...r.......F..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x0a, 0x72, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, // .....8...r......
	0x00, 0x46, 0x02, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x55, 0x55, 0xd5, // .F........@..UU.
	0x3e, 0x55, 0x55, 0xd5, 0x3e, 0x55, 0x55, 0xd5, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, // >UU.>UU.>.......
	0x05, 0x72, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x01, 0x00, 0x00, // .r.......F......
	0x00, 0x32, 0x00, 0x00, 0x0f, 0x72, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, // .2...r.......F..
	0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x3d, 0x0a, 0x87, 0x3f, 0x3d, 0x0a, 0x87, // ......@..=..?=..
	0x3f, 0x3d, 0x0a, 0x87, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0xae, 0x47, 0x61, // ?=..?.....@...Ga
	0xbd, 0xae, 0x47, 0x61, 0xbd, 0xae, 0x47, 0x61, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, // ..Ga..Ga........
	0x0a, 0x72, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x1c, 0x2e, 0x4d, // .r........@....M
	0x3b, 0x1c, 0x2e, 0x4d, 0x3b, 0x1c, 0x2e, 0x4d, 0x3b, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, // ;..M;..M;....F..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x0a, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, // .....8...r......
	0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x52, 0xb8, 0x4e, // .F........@..R.N
	0x41, 0x52, 0xb8, 0x4e, 0x41, 0x52, 0xb8, 0x4e, 0x41, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, // AR.NAR.NA....7..
	0x09, 0x72, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x02, 0x00, 0x00, // .r ......F......
	0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x01, 0x00, 0x00, // .F.......F......
	0x00, 0x36, 0x00, 0x00, 0x05, 0x82, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, // .6.... .......@.
	0x00, 0x00, 0x00, 0x80, 0x3f, 0x3e, 0x00, 0x00, 0x01, 0x00, 0x00, 0x80, 0x00,                   // ....?>.......
};
static const uint8_t fs_pp_stereo_anaglyph_lin_srgb_nodesat_st_spv[4121] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x0e, 0x53, // FSH.Jc._.......S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x01, 0x00, // tereo_LeftMat...
	0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, // ........Stereo_R
	0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x01, 0x40, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, // ightMat..@......
	0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x30, // ..tex_stereo_fb0
	0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x03, 0x22, 0x00, 0xb8, 0x0f, 0x00, 0x00, 0x03, 0x02, 0x23, // .......".......#
	0x07, 0x00, 0x00, 0x01, 0x00, 0x0b, 0x00, 0x08, 0x00, 0xc1, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x11, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x06, 0x00, 0x01, 0x00, 0x00, // ................
	0x00, 0x47, 0x4c, 0x53, 0x4c, 0x2e, 0x73, 0x74, 0x64, 0x2e, 0x34, 0x35, 0x30, 0x00, 0x00, 0x00, // .GLSL.std.450...
	0x00, 0x0e, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x07, // ................
	0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, // .........main...
	0x00, 0x15, 0x01, 0x00, 0x00, 0x22, 0x01, 0x00, 0x00, 0x10, 0x00, 0x03, 0x00, 0x04, 0x00, 0x00, // ....."..........
	0x00, 0x07, 0x00, 0x00, 0x00, 0x03, 0x00, 0x03, 0x00, 0x05, 0x00, 0x00, 0x00, 0xf4, 0x01, 0x00, // ................
	0x00, 0x05, 0x00, 0x04, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, // .........main...
	0x00, 0x05, 0x00, 0x08, 0x00, 0x45, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, // .....E...tex_ste
	0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x00, 0x00, 0x00, // reo_fbSampler...
	0x00, 0x05, 0x00, 0x08, 0x00, 0x48, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, // .....H...tex_ste
	0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x00, 0x00, 0x00, // reo_fbTexture...
	0x00, 0x05, 0x00, 0x06, 0x00, 0xd3, 0x00, 0x00, 0x00, 0x55, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // .........Uniform
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x07, 0x00, 0xd3, 0x00, 0x00, // Block...........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, // .....Stereo_Left
	0x4d, 0x61, 0x74, 0x00, 0x00, 0x06, 0x00, 0x07, 0x00, 0xd3, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, // Mat.............
	0x00, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, // .Stereo_RightMat
	0x00, 0x05, 0x00, 0x03, 0x00, 0xd5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x05, // ................
	0x00, 0x15, 0x01, 0x00, 0x00, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, // .....v_texcoord0
	0x00, 0x05, 0x00, 0x06, 0x00, 0x22, 0x01, 0x00, 0x00, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, // ....."...bgfx_Fr
	0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x45, 0x00, 0x00, // agData0..G...E..
	0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x45, 0x00, 0x00, // .".......G...E..
	0x00, 0x21, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x48, 0x00, 0x00, // .!.......G...H..
	0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x48, 0x00, 0x00, // .".......G...H..
	0x00, 0x21, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x48, 0x00, 0x04, 0x00, 0xd3, 0x00, 0x00, // .!.......H......
	0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0xd3, 0x00, 0x00, // .........H......
	0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, // .....#.......H..
	0x00, 0xd3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, // ................
	0x00, 0x48, 0x00, 0x04, 0x00, 0xd3, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, // .H..............
	0x00, 0x48, 0x00, 0x05, 0x00, 0xd3, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, // .H...........#..
	0x00, 0x40, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0xd3, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, // .@...H..........
	0x00, 0x07, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x47, 0x00, 0x03, 0x00, 0xd3, 0x00, 0x00, // .........G......
	0x00, 0x02, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0xd5, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, // .....G......."..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0xd5, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, // .....G.......!..
	0x00, 0x01, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x15, 0x01, 0x00, 0x00, 0x1e, 0x00, 0x00, // .....G..........
	0x00, 0x01, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x22, 0x01, 0x00, 0x00, 0x1e, 0x00, 0x00, // .....G..."......
	0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x21, 0x00, 0x03, // .............!..
	0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x02, 0x00, 0x06, 0x00, 0x00, // ................
	0x00, 0x16, 0x00, 0x03, 0x00, 0x07, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x19, 0x00, 0x09, // ......... ......
	0x00, 0x08, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x17, 0x00, 0x04, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, // ................
	0x00, 0x17, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, // ................
	0x00, 0x17, 0x00, 0x04, 0x00, 0x2d, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, // .....-..........
	0x00, 0x20, 0x00, 0x04, 0x00, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, // . ...D..........
	0x00, 0x3b, 0x00, 0x04, 0x00, 0x44, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .;...D...E......
	0x00, 0x20, 0x00, 0x04, 0x00, 0x47, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, // . ...G..........
	0x00, 0x3b, 0x00, 0x04, 0x00, 0x47, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .;...G...H......
	0x00, 0x15, 0x00, 0x04, 0x00, 0x51, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, // .....Q... ......
	0x00, 0x2b, 0x00, 0x04, 0x00, 0x51, 0x00, 0x00, 0x00, 0x52, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, // .+...Q...R......
	0x00, 0x2b, 0x00, 0x04, 0x00, 0x51, 0x00, 0x00, 0x00, 0x56, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .+...Q...V......
	0x00, 0x1b, 0x00, 0x03, 0x00, 0x5a, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, // .....Z.......+..
	0x00, 0x07, 0x00, 0x00, 0x00, 0x66, 0x00, 0x00, 0x00, 0xe6, 0xae, 0x25, 0x3d, 0x14, 0x00, 0x02, // .....f.....%=...
	0x00, 0x67, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x6c, 0x00, 0x00, // .g...+.......l..
	0x00, 0x91, 0x83, 0x9e, 0x3d, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x71, 0x00, 0x00, // ....=+.......q..
	0x00, 0x6e, 0xa7, 0x72, 0x3f, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x73, 0x00, 0x00, // .n.r?+.......s..
	0x00, 0x19, 0x89, 0x55, 0x3d, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x75, 0x00, 0x00, // ...U=+.......u..
	0x00, 0x9a, 0x99, 0x19, 0x40, 0x15, 0x00, 0x04, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, // ....@........ ..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, // .....+..........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x92, 0x00, 0x00, // .....+..........
	0x00, 0x1c, 0x2e, 0x4d, 0x3b, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x97, 0x00, 0x00, // ...M;+..........
	0x00, 0x52, 0xb8, 0x4e, 0x41, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x9b, 0x00, 0x00, // .R.NA+..........
	0x00, 0x3d, 0x0a, 0x87, 0x3f, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x9d, 0x00, 0x00, // .=..?+..........
	0x00, 0x55, 0x55, 0xd5, 0x3e, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, // .UU.>+..........
	0x00, 0xae, 0x47, 0x61, 0x3d, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0xbd, 0x00, 0x00, // ..Ga=+..........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0xc9, 0x00, 0x00, // .....+..........
	0x00, 0x00, 0x00, 0x80, 0x3f, 0x18, 0x00, 0x04, 0x00, 0xd2, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, // ....?...........
	0x00, 0x04, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x04, 0x00, 0xd3, 0x00, 0x00, 0x00, 0xd2, 0x00, 0x00, // ................
	0x00, 0xd2, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0xd4, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, // ..... ..........
	0x00, 0xd3, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0xd4, 0x00, 0x00, 0x00, 0xd5, 0x00, 0x00, // .....;..........
	0x00, 0x02, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0xd6, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, // ..... ..........
	0x00, 0xd2, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x14, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, // ..... ..........
	0x00, 0x2d, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x14, 0x01, 0x00, 0x00, 0x15, 0x01, 0x00, // .-...;..........
	0x00, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x21, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, // ..... ...!......
	0x00, 0x0e, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x21, 0x01, 0x00, 0x00, 0x22, 0x01, 0x00, // .....;...!..."..
	0x00, 0x03, 0x00, 0x00, 0x00, 0x36, 0x00, 0x05, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, // .....6..........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x05, 0x00, 0x00, // ................
	0x00, 0x3d, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0x46, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00, // .=.......F...E..
	0x00, 0x3d, 0x00, 0x04, 0x00, 0x08, 0x00, 0x00, 0x00, 0x49, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, // .=.......I...H..
	0x00, 0x3d, 0x00, 0x04, 0x00, 0x2d, 0x00, 0x00, 0x00, 0x16, 0x01, 0x00, 0x00, 0x15, 0x01, 0x00, // .=...-..........
	0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x70, 0x01, 0x00, 0x00, 0x16, 0x01, 0x00, // .Q.......p......
	0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x72, 0x01, 0x00, // .....Q.......r..
	0x00, 0x16, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x50, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, // .........P......
	0x00, 0x73, 0x01, 0x00, 0x00, 0x70, 0x01, 0x00, 0x00, 0x72, 0x01, 0x00, 0x00, 0xbd, 0x00, 0x00, // .s...p...r......
	0x00, 0x56, 0x00, 0x05, 0x00, 0x5a, 0x00, 0x00, 0x00, 0x85, 0x01, 0x00, 0x00, 0x49, 0x00, 0x00, // .V...Z.......I..
	0x00, 0x46, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x88, 0x01, 0x00, // .F...X..........
	0x00, 0x85, 0x01, 0x00, 0x00, 0x73, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xbd, 0x00, 0x00, // .....s..........
	0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x78, 0x01, 0x00, 0x00, 0x16, 0x01, 0x00, // .Q.......x......
	0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x7a, 0x01, 0x00, // .....Q.......z..
	0x00, 0x16, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x50, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, // .........P......
	0x00, 0x7b, 0x01, 0x00, 0x00, 0x78, 0x01, 0x00, 0x00, 0x7a, 0x01, 0x00, 0x00, 0xc9, 0x00, 0x00, // .{...x...z......
	0x00, 0x56, 0x00, 0x05, 0x00, 0x5a, 0x00, 0x00, 0x00, 0x8f, 0x01, 0x00, 0x00, 0x49, 0x00, 0x00, // .V...Z.......I..
	0x00, 0x46, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x92, 0x01, 0x00, // .F...X..........
	0x00, 0x8f, 0x01, 0x00, 0x00, 0x7b, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xbd, 0x00, 0x00, // .....{..........
	0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x88, 0x01, 0x00, // .Q..............
	0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0xb7, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0xfb, 0x00, 0x03, 0x00, 0x80, 0x00, 0x00, 0x00, 0xab, 0x01, 0x00, 0x00, 0xf8, 0x00, 0x02, // ................
	0x00, 0xab, 0x01, 0x00, 0x00, 0xbc, 0x00, 0x05, 0x00, 0x67, 0x00, 0x00, 0x00, 0xad, 0x01, 0x00, // .........g......
	0x00, 0x99, 0x01, 0x00, 0x00, 0x66, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0xb6, 0x01, 0x00, // .....f..........
	0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0xad, 0x01, 0x00, 0x00, 0xae, 0x01, 0x00, // ................
	0x00, 0xb1, 0x01, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xb1, 0x01, 0x00, 0x00, 0x85, 0x00, 0x05, // ................
	0x00, 0x07, 0x00, 0x00, 0x00, 0xb3, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x71, 0x00, 0x00, // .............q..
	0x00, 0x81, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xb4, 0x01, 0x00, 0x00, 0xb3, 0x01, 0x00, // ................
	0x00, 0x73, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0xb5, 0x01, 0x00, // .s..............
	0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0xb4, 0x01, 0x00, 0x00, 0x75, 0x00, 0x00, // .............u..
	0x00, 0xf9, 0x00, 0x02, 0x00, 0xb7, 0x01, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xae, 0x01, 0x00, // ................
	0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xb0, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, // ................
	0x00, 0x6c, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0xb7, 0x01, 0x00, 0x00, 0xf8, 0x00, 0x02, // .l..............
	0x00, 0xb6, 0x01, 0x00, 0x00, 0xff, 0x00, 0x01, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xb7, 0x01, 0x00, // ................
	0x00, 0xf5, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0xb2, 0x02, 0x00, 0x00, 0xb5, 0x01, 0x00, // ................
	0x00, 0xb1, 0x01, 0x00, 0x00, 0xb0, 0x01, 0x00, 0x00, 0xae, 0x01, 0x00, 0x00, 0x51, 0x00, 0x05, // .............Q..
	0x00, 0x07, 0x00, 0x00, 0x00, 0x9c, 0x01, 0x00, 0x00, 0x88, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, // ................
	0x00, 0xf7, 0x00, 0x03, 0x00, 0xce, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfb, 0x00, 0x03, // ................
	0x00, 0x80, 0x00, 0x00, 0x00, 0xc2, 0x01, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xc2, 0x01, 0x00, // ................
	0x00, 0xbc, 0x00, 0x05, 0x00, 0x67, 0x00, 0x00, 0x00, 0xc4, 0x01, 0x00, 0x00, 0x9c, 0x01, 0x00, // .....g..........
	0x00, 0x66, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0xcd, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, // .f..............
	0x00, 0xfa, 0x00, 0x04, 0x00, 0xc4, 0x01, 0x00, 0x00, 0xc5, 0x01, 0x00, 0x00, 0xc8, 0x01, 0x00, // ................
	0x00, 0xf8, 0x00, 0x02, 0x00, 0xc8, 0x01, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // ................
	0x00, 0xca, 0x01, 0x00, 0x00, 0x9c, 0x01, 0x00, 0x00, 0x71, 0x00, 0x00, 0x00, 0x81, 0x00, 0x05, // .........q......
	0x00, 0x07, 0x00, 0x00, 0x00, 0xcb, 0x01, 0x00, 0x00, 0xca, 0x01, 0x00, 0x00, 0x73, 0x00, 0x00, // .............s..
	0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0xcc, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, // ................
	0x00, 0x1a, 0x00, 0x00, 0x00, 0xcb, 0x01, 0x00, 0x00, 0x75, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, // .........u......
	0x00, 0xce, 0x01, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xc5, 0x01, 0x00, 0x00, 0x85, 0x00, 0x05, // ................
	0x00, 0x07, 0x00, 0x00, 0x00, 0xc7, 0x01, 0x00, 0x00, 0x9c, 0x01, 0x00, 0x00, 0x6c, 0x00, 0x00, // .............l..
	0x00, 0xf9, 0x00, 0x02, 0x00, 0xce, 0x01, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xcd, 0x01, 0x00, // ................
	0x00, 0xff, 0x00, 0x01, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xce, 0x01, 0x00, 0x00, 0xf5, 0x00, 0x07, // ................
	0x00, 0x07, 0x00, 0x00, 0x00, 0xb3, 0x02, 0x00, 0x00, 0xcc, 0x01, 0x00, 0x00, 0xc8, 0x01, 0x00, // ................
	0x00, 0xc7, 0x01, 0x00, 0x00, 0xc5, 0x01, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // .........Q......
	0x00, 0x9f, 0x01, 0x00, 0x00, 0x88, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, // ................
	0x00, 0xe5, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfb, 0x00, 0x03, 0x00, 0x80, 0x00, 0x00, // ................
	0x00, 0xd9, 0x01, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xd9, 0x01, 0x00, 0x00, 0xbc, 0x00, 0x05, // ................
	0x00, 0x67, 0x00, 0x00, 0x00, 0xdb, 0x01, 0x00, 0x00, 0x9f, 0x01, 0x00, 0x00, 0x66, 0x00, 0x00, // .g...........f..
	0x00, 0xf7, 0x00, 0x03, 0x00, 0xe4, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, // ................
	0x00, 0xdb, 0x01, 0x00, 0x00, 0xdc, 0x01, 0x00, 0x00, 0xdf, 0x01, 0x00, 0x00, 0xf8, 0x00, 0x02, // ................
	0x00, 0xdf, 0x01, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xe1, 0x01, 0x00, // ................
	0x00, 0x9f, 0x01, 0x00, 0x00, 0x71, 0x00, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // .....q..........
	0x00, 0xe2, 0x01, 0x00, 0x00, 0xe1, 0x01, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, // .........s......
	0x00, 0x07, 0x00, 0x00, 0x00, 0xe3, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, // ................
	0x00, 0xe2, 0x01, 0x00, 0x00, 0x75, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0xe5, 0x01, 0x00, // .....u..........
	0x00, 0xf8, 0x00, 0x02, 0x00, 0xdc, 0x01, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // ................
	0x00, 0xde, 0x01, 0x00, 0x00, 0x9f, 0x01, 0x00, 0x00, 0x6c, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, // .........l......
	0x00, 0xe5, 0x01, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xe4, 0x01, 0x00, 0x00, 0xff, 0x00, 0x01, // ................
	0x00, 0xf8, 0x00, 0x02, 0x00, 0xe5, 0x01, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, // ................
	0x00, 0xb4, 0x02, 0x00, 0x00, 0xe3, 0x01, 0x00, 0x00, 0xdf, 0x01, 0x00, 0x00, 0xde, 0x01, 0x00, // ................
	0x00, 0xdc, 0x01, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xed, 0x01, 0x00, // .....Q..........
	0x00, 0x92, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x0b, 0x02, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0xfb, 0x00, 0x03, 0x00, 0x80, 0x00, 0x00, 0x00, 0xff, 0x01, 0x00, // ................
	0x00, 0xf8, 0x00, 0x02, 0x00, 0xff, 0x01, 0x00, 0x00, 0xbc, 0x00, 0x05, 0x00, 0x67, 0x00, 0x00, // .............g..
	0x00, 0x01, 0x02, 0x00, 0x00, 0xed, 0x01, 0x00, 0x00, 0x66, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, // .........f......
	0x00, 0x0a, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0x01, 0x02, 0x00, // ................
	0x00, 0x02, 0x02, 0x00, 0x00, 0x05, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x05, 0x02, 0x00, // ................
	0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x02, 0x00, 0x00, 0xed, 0x01, 0x00, // ................
	0x00, 0x71, 0x00, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x08, 0x02, 0x00, // .q..............
	0x00, 0x07, 0x02, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, // .....s..........
	0x00, 0x09, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x08, 0x02, 0x00, // ................
	0x00, 0x75, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x0b, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, // .u..............
	0x00, 0x02, 0x02, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x04, 0x02, 0x00, // ................
	0x00, 0xed, 0x01, 0x00, 0x00, 0x6c, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x0b, 0x02, 0x00, // .....l..........
	0x00, 0xf8, 0x00, 0x02, 0x00, 0x0a, 0x02, 0x00, 0x00, 0xff, 0x00, 0x01, 0x00, 0xf8, 0x00, 0x02, // ................
	0x00, 0x0b, 0x02, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0xb8, 0x02, 0x00, // ................
	0x00, 0x09, 0x02, 0x00, 0x00, 0x05, 0x02, 0x00, 0x00, 0x04, 0x02, 0x00, 0x00, 0x02, 0x02, 0x00, // ................
	0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xf0, 0x01, 0x00, 0x00, 0x92, 0x01, 0x00, // .Q..............
	0x00, 0x01, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x22, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, // ........."......
	0x00, 0xfb, 0x00, 0x03, 0x00, 0x80, 0x00, 0x00, 0x00, 0x16, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, // ................
	0x00, 0x16, 0x02, 0x00, 0x00, 0xbc, 0x00, 0x05, 0x00, 0x67, 0x00, 0x00, 0x00, 0x18, 0x02, 0x00, // .........g......
	0x00, 0xf0, 0x01, 0x00, 0x00, 0x66, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x21, 0x02, 0x00, // .....f.......!..
	0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0x18, 0x02, 0x00, 0x00, 0x19, 0x02, 0x00, // ................
	0x00, 0x1c, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x1c, 0x02, 0x00, 0x00, 0x85, 0x00, 0x05, // ................
	0x00, 0x07, 0x00, 0x00, 0x00, 0x1e, 0x02, 0x00, 0x00, 0xf0, 0x01, 0x00, 0x00, 0x71, 0x00, 0x00, // .............q..
	0x00, 0x81, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x1f, 0x02, 0x00, 0x00, 0x1e, 0x02, 0x00, // ................
	0x00, 0x73, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x20, 0x02, 0x00, // .s........... ..
	0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x1f, 0x02, 0x00, 0x00, 0x75, 0x00, 0x00, // .............u..
	0x00, 0xf9, 0x00, 0x02, 0x00, 0x22, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x19, 0x02, 0x00, // ....."..........
	0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x1b, 0x02, 0x00, 0x00, 0xf0, 0x01, 0x00, // ................
	0x00, 0x6c, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x22, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, // .l......."......
	0x00, 0x21, 0x02, 0x00, 0x00, 0xff, 0x00, 0x01, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x22, 0x02, 0x00, // .!..........."..
	0x00, 0xf5, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0xb9, 0x02, 0x00, 0x00, 0x20, 0x02, 0x00, // ............. ..
	0x00, 0x1c, 0x02, 0x00, 0x00, 0x1b, 0x02, 0x00, 0x00, 0x19, 0x02, 0x00, 0x00, 0x51, 0x00, 0x05, // .............Q..
	0x00, 0x07, 0x00, 0x00, 0x00, 0xf3, 0x01, 0x00, 0x00, 0x92, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, // ................
	0x00, 0xf7, 0x00, 0x03, 0x00, 0x39, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfb, 0x00, 0x03, // .....9..........
	0x00, 0x80, 0x00, 0x00, 0x00, 0x2d, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x2d, 0x02, 0x00, // .....-.......-..
	0x00, 0xbc, 0x00, 0x05, 0x00, 0x67, 0x00, 0x00, 0x00, 0x2f, 0x02, 0x00, 0x00, 0xf3, 0x01, 0x00, // .....g.../......
	0x00, 0x66, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x38, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, // .f.......8......
	0x00, 0xfa, 0x00, 0x04, 0x00, 0x2f, 0x02, 0x00, 0x00, 0x30, 0x02, 0x00, 0x00, 0x33, 0x02, 0x00, // ...../...0...3..
	0x00, 0xf8, 0x00, 0x02, 0x00, 0x33, 0x02, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // .....3..........
	0x00, 0x35, 0x02, 0x00, 0x00, 0xf3, 0x01, 0x00, 0x00, 0x71, 0x00, 0x00, 0x00, 0x81, 0x00, 0x05, // .5.......q......
	0x00, 0x07, 0x00, 0x00, 0x00, 0x36, 0x02, 0x00, 0x00, 0x35, 0x02, 0x00, 0x00, 0x73, 0x00, 0x00, // .....6...5...s..
	0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x37, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, // .........7......
	0x00, 0x1a, 0x00, 0x00, 0x00, 0x36, 0x02, 0x00, 0x00, 0x75, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, // .....6...u......
	0x00, 0x39, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x30, 0x02, 0x00, 0x00, 0x85, 0x00, 0x05, // .9.......0......
	0x00, 0x07, 0x00, 0x00, 0x00, 0x32, 0x02, 0x00, 0x00, 0xf3, 0x01, 0x00, 0x00, 0x6c, 0x00, 0x00, // .....2.......l..
	0x00, 0xf9, 0x00, 0x02, 0x00, 0x39, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x38, 0x02, 0x00, // .....9.......8..
	0x00, 0xff, 0x00, 0x01, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x39, 0x02, 0x00, 0x00, 0xf5, 0x00, 0x07, // .........9......
	0x00, 0x07, 0x00, 0x00, 0x00, 0xba, 0x02, 0x00, 0x00, 0x37, 0x02, 0x00, 0x00, 0x33, 0x02, 0x00, // .........7...3..
	0x00, 0x32, 0x02, 0x00, 0x00, 0x30, 0x02, 0x00, 0x00, 0x41, 0x00, 0x05, 0x00, 0xd6, 0x00, 0x00, // .2...0...A......
	0x00, 0x3e, 0x02, 0x00, 0x00, 0xd5, 0x00, 0x00, 0x00, 0x56, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, // .>.......V...=..
	0x00, 0xd2, 0x00, 0x00, 0x00, 0x3f, 0x02, 0x00, 0x00, 0x3e, 0x02, 0x00, 0x00, 0x50, 0x00, 0x07, // .....?...>...P..
	0x00, 0x0e, 0x00, 0x00, 0x00, 0x44, 0x02, 0x00, 0x00, 0xb2, 0x02, 0x00, 0x00, 0xb3, 0x02, 0x00, // .....D..........
	0x00, 0xb4, 0x02, 0x00, 0x00, 0xc9, 0x00, 0x00, 0x00, 0x91, 0x00, 0x05, 0x00, 0x0e, 0x00, 0x00, // ................
	0x00, 0x45, 0x02, 0x00, 0x00, 0x3f, 0x02, 0x00, 0x00, 0x44, 0x02, 0x00, 0x00, 0x41, 0x00, 0x05, // .E...?...D...A..
	0x00, 0xd6, 0x00, 0x00, 0x00, 0x46, 0x02, 0x00, 0x00, 0xd5, 0x00, 0x00, 0x00, 0x52, 0x00, 0x00, // .....F.......R..
	0x00, 0x3d, 0x00, 0x04, 0x00, 0xd2, 0x00, 0x00, 0x00, 0x47, 0x02, 0x00, 0x00, 0x46, 0x02, 0x00, // .=.......G...F..
	0x00, 0x50, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x4c, 0x02, 0x00, 0x00, 0xb8, 0x02, 0x00, // .P.......L......
	0x00, 0xb9, 0x02, 0x00, 0x00, 0xba, 0x02, 0x00, 0x00, 0xc9, 0x00, 0x00, 0x00, 0x91, 0x00, 0x05, // ................
	0x00, 0x0e, 0x00, 0x00, 0x00, 0x4d, 0x02, 0x00, 0x00, 0x47, 0x02, 0x00, 0x00, 0x4c, 0x02, 0x00, // .....M...G...L..
	0x00, 0x81, 0x00, 0x05, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x4e, 0x02, 0x00, 0x00, 0x45, 0x02, 0x00, // .........N...E..
	0x00, 0x4d, 0x02, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x57, 0x02, 0x00, // .M...Q.......W..
	0x00, 0x4e, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbc, 0x00, 0x05, 0x00, 0x67, 0x00, 0x00, // .N...........g..
	0x00, 0x69, 0x02, 0x00, 0x00, 0x57, 0x02, 0x00, 0x00, 0x92, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, // .i...W..........
	0x00, 0x72, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0x69, 0x02, 0x00, // .r...........i..
	0x00, 0x6a, 0x02, 0x00, 0x00, 0x6d, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x6d, 0x02, 0x00, // .j...m.......m..
	0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x6f, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, // .........o......
	0x00, 0x1a, 0x00, 0x00, 0x00, 0x57, 0x02, 0x00, 0x00, 0x9d, 0x00, 0x00, 0x00, 0x85, 0x00, 0x05, // .....W..........
	0x00, 0x07, 0x00, 0x00, 0x00, 0x70, 0x02, 0x00, 0x00, 0x9b, 0x00, 0x00, 0x00, 0x6f, 0x02, 0x00, // .....p.......o..
	0x00, 0x83, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x71, 0x02, 0x00, 0x00, 0x70, 0x02, 0x00, // .........q...p..
	0x00, 0xa0, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x72, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, // .........r......
	0x00, 0x6a, 0x02, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x6c, 0x02, 0x00, // .j...........l..
	0x00, 0x97, 0x00, 0x00, 0x00, 0x57, 0x02, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x72, 0x02, 0x00, // .....W.......r..
	0x00, 0xf8, 0x00, 0x02, 0x00, 0x72, 0x02, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, // .....r..........
	0x00, 0xbe, 0x02, 0x00, 0x00, 0x71, 0x02, 0x00, 0x00, 0x6d, 0x02, 0x00, 0x00, 0x6c, 0x02, 0x00, // .....q...m...l..
	0x00, 0x6a, 0x02, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x5a, 0x02, 0x00, // .j...Q.......Z..
	0x00, 0x4e, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xbc, 0x00, 0x05, 0x00, 0x67, 0x00, 0x00, // .N...........g..
	0x00, 0x7d, 0x02, 0x00, 0x00, 0x5a, 0x02, 0x00, 0x00, 0x92, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, // .}...Z..........
	0x00, 0x86, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0x7d, 0x02, 0x00, // .............}..
	0x00, 0x7e, 0x02, 0x00, 0x00, 0x81, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x81, 0x02, 0x00, // .~..............
	0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x83, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, // ................
	0x00, 0x1a, 0x00, 0x00, 0x00, 0x5a, 0x02, 0x00, 0x00, 0x9d, 0x00, 0x00, 0x00, 0x85, 0x00, 0x05, // .....Z..........
	0x00, 0x07, 0x00, 0x00, 0x00, 0x84, 0x02, 0x00, 0x00, 0x9b, 0x00, 0x00, 0x00, 0x83, 0x02, 0x00, // ................
	0x00, 0x83, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x85, 0x02, 0x00, 0x00, 0x84, 0x02, 0x00, // ................
	0x00, 0xa0, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x86, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, // ................
	0x00, 0x7e, 0x02, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x80, 0x02, 0x00, // .~..............
	0x00, 0x97, 0x00, 0x00, 0x00, 0x5a, 0x02, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x86, 0x02, 0x00, // .....Z..........
	0x00, 0xf8, 0x00, 0x02, 0x00, 0x86, 0x02, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, // ................
	0x00, 0xbf, 0x02, 0x00, 0x00, 0x85, 0x02, 0x00, 0x00, 0x81, 0x02, 0x00, 0x00, 0x80, 0x02, 0x00, // ................
	0x00, 0x7e, 0x02, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x5d, 0x02, 0x00, // .~...Q.......]..
	0x00, 0x4e, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xbc, 0x00, 0x05, 0x00, 0x67, 0x00, 0x00, // .N...........g..
	0x00, 0x91, 0x02, 0x00, 0x00, 0x5d, 0x02, 0x00, 0x00, 0x92, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, // .....]..........
	0x00, 0x9a, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0x91, 0x02, 0x00, // ................
	0x00, 0x92, 0x02, 0x00, 0x00, 0x95, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x95, 0x02, 0x00, // ................
	0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x97, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, // ................
	0x00, 0x1a, 0x00, 0x00, 0x00, 0x5d, 0x02, 0x00, 0x00, 0x9d, 0x00, 0x00, 0x00, 0x85, 0x00, 0x05, // .....]..........
	0x00, 0x07, 0x00, 0x00, 0x00, 0x98, 0x02, 0x00, 0x00, 0x9b, 0x00, 0x00, 0x00, 0x97, 0x02, 0x00, // ................
	0x00, 0x83, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x99, 0x02, 0x00, 0x00, 0x98, 0x02, 0x00, // ................
	0x00, 0xa0, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x9a, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, // ................
	0x00, 0x92, 0x02, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x94, 0x02, 0x00, // ................
	0x00, 0x97, 0x00, 0x00, 0x00, 0x5d, 0x02, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x9a, 0x02, 0x00, // .....]..........
	0x00, 0xf8, 0x00, 0x02, 0x00, 0x9a, 0x02, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, // ................
	0x00, 0xc0, 0x02, 0x00, 0x00, 0x99, 0x02, 0x00, 0x00, 0x95, 0x02, 0x00, 0x00, 0x94, 0x02, 0x00, // ................
	0x00, 0x92, 0x02, 0x00, 0x00, 0x50, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x63, 0x01, 0x00, // .....P.......c..
	0x00, 0xbe, 0x02, 0x00, 0x00, 0xbf, 0x02, 0x00, 0x00, 0xc0, 0x02, 0x00, 0x00, 0xc9, 0x00, 0x00, // ................
	0x00, 0x3e, 0x00, 0x03, 0x00, 0x22, 0x01, 0x00, 0x00, 0x63, 0x01, 0x00, 0x00, 0xfd, 0x00, 0x01, // .>..."...c......
	0x00, 0x38, 0x00, 0x01, 0x00, 0x00, 0x00, 0x80, 0x00,                                           // .8.......
};
static const bgfx::EmbeddedShader fs_pp_stereo_anaglyph_lin_srgb_nodesat_st = BGFX_EMBEDDED_SHADER(fs_pp_stereo_anaglyph_lin_srgb_nodesat_st);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Build of fragment shader from fs_pp_stereo.sc to fs_pp_stereo_anaglyph_lin_srgb_dyndesat_st with options: ANAGLYPH DYNDESAT SRGB STEREO
static const uint8_t fs_pp_stereo_anaglyph_lin_srgb_dyndesat_st_mtl[5562] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x14, 0x74, // FSH.Jc._.......t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, // ex_stereo_fbSamp
	0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x74, 0x65, // ler...........te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x54, 0x65, 0x78, 0x74, 0x75, // x_stereo_fbTextu
	0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x74, 0x65, 0x78, // re...........tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, // _stereo_depthSam
	0x70, 0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x74, // pler...........t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x54, // ex_stereo_depthT
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, // exture..........
	0x1a, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, // .Stereo_LeftLumi
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x12, 0x01, 0x80, 0x00, 0x01, // nance_Gamma.....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, // ......Stereo_Rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, // htLuminance_DynD
	0x65, 0x73, 0x61, 0x74, 0x12, 0x01, 0x90, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x53, // esat...........S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x01, 0x00, // tereo_LeftMat...
	0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, // ........Stereo_R
	0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x01, 0x40, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, // ightMat..@......
	0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x10, // ..tex_stereo_fb.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x89, 0x14, 0x00, 0x00, 0x23, 0x69, 0x6e, // .............#in
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x64, // clude <metal_std
	0x6c, 0x69, 0x62, 0x3e, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x73, // lib>.#include <s
	0x69, 0x6d, 0x64, 0x2f, 0x73, 0x69, 0x6d, 0x64, 0x2e, 0x68, 0x3e, 0x0a, 0x0a, 0x75, 0x73, 0x69, // imd/simd.h>..usi
	0x6e, 0x67, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x6d, 0x65, 0x74, // ng namespace met
	0x61, 0x6c, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x5f, 0x47, 0x6c, 0x6f, // al;..struct _Glo
	0x62, 0x61, 0x6c, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, // bal.{.    float4
	0x78, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, // x4 Stereo_LeftMa
	0x74, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x78, 0x34, 0x20, // t;.    float4x4 
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x3b, // Stereo_RightMat;
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, // .    float4 Ster
	0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, // eo_LeftLuminance
	0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, // _Gamma;.    floa
	0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, // t4 Stereo_RightL
	0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, // uminance_DynDesa
	0x74, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x78, 0x6c, // t;.};..struct xl
	0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x0a, 0x7b, 0x0a, // atMtlMain_out.{.
	0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, //     float4 bgfx_
	0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x20, 0x5b, 0x5b, 0x63, 0x6f, 0x6c, 0x6f, // FragData0 [[colo
	0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, // r(0)]];.};..stru
	0x63, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x69, // ct xlatMtlMain_i
	0x6e, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x76, // n.{.    float2 v
	0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x5b, 0x5b, 0x75, 0x73, 0x65, // _texcoord0 [[use
	0x72, 0x28, 0x6c, 0x6f, 0x63, 0x6e, 0x31, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, // r(locn1)]];.};..
	0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, // fragment xlatMtl
	0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, // Main_out xlatMtl
	0x4d, 0x61, 0x69, 0x6e, 0x28, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, // Main(xlatMtlMain
	0x5f, 0x69, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x5b, 0x5b, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, // _in in [[stage_i
	0x6e, 0x5d, 0x5d, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x20, 0x5f, 0x47, // n]], constant _G
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x26, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x20, 0x5b, 0x5b, // lobal& _mtl_u [[
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x74, 0x65, 0x78, // buffer(0)]], tex
	0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x3c, 0x66, 0x6c, 0x6f, // ture2d_array<flo
	0x61, 0x74, 0x3e, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, // at> tex_stereo_f
	0x62, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x30, 0x29, 0x5d, 0x5d, // b [[texture(0)]]
	0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // , sampler tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x5b, // ereo_fbSampler [
	0x5b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x29, 0x0a, 0x7b, // [sampler(0)]]).{
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, // .    xlatMtlMain
	0x5f, 0x6f, 0x75, 0x74, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x3d, 0x20, 0x7b, 0x7d, 0x3b, 0x0a, 0x20, // _out out = {};. 
	0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x34, 0x35, 0x38, 0x20, 0x3d, //    float3 _458 =
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, //  float3(in.v_tex
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, // coord0, 0.0);.  
	0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x34, 0x37, 0x39, 0x20, 0x3d, 0x20, //   float4 _479 = 
	0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2e, 0x73, 0x61, // tex_stereo_fb.sa
	0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // mple(tex_stereo_
	0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x34, 0x35, 0x38, 0x2e, // fbSampler, _458.
	0x78, 0x79, 0x2c, 0x20, 0x75, 0x69, 0x6e, 0x74, 0x28, 0x72, 0x69, 0x6e, 0x74, 0x28, 0x5f, 0x34, // xy, uint(rint(_4
	0x35, 0x38, 0x2e, 0x7a, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, // 58.z)), level(0.
	0x30, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, // 0));.    float3 
	0x5f, 0x34, 0x36, 0x36, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x69, 0x6e, // _466 = float3(in
	0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2c, 0x20, 0x31, 0x2e, // .v_texcoord0, 1.
	0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, // 0);.    float4 _
	0x34, 0x38, 0x39, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // 489 = tex_stereo
	0x5f, 0x66, 0x62, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, // _fb.sample(tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, // tereo_fbSampler,
	0x20, 0x5f, 0x34, 0x36, 0x36, 0x2e, 0x78, 0x79, 0x2c, 0x20, 0x75, 0x69, 0x6e, 0x74, 0x28, 0x72, //  _466.xy, uint(r
	0x69, 0x6e, 0x74, 0x28, 0x5f, 0x34, 0x36, 0x36, 0x2e, 0x7a, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, // int(_466.z)), le
	0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, // vel(0.0));.    f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x34, 0x39, 0x32, 0x20, 0x3d, 0x20, 0x5f, 0x34, 0x37, 0x39, // loat _492 = _479
	0x2e, 0x78, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x37, // .x;.    float _7
	0x39, 0x32, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x64, 0x6f, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, // 92;.    do.    {
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, 0x34, 0x39, // .        if (_49
	0x32, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, 0x34, 0x34, 0x39, 0x39, 0x39, 0x39, // 2 <= 0.040449999
	0x32, 0x37, 0x32, 0x38, 0x32, 0x33, 0x33, 0x33, 0x33, 0x37, 0x34, 0x30, 0x32, 0x33, 0x34, 0x33, // 2728233337402343
	0x37, 0x35, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, // 75).        {.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x37, 0x39, 0x32, 0x20, 0x3d, //           _792 =
	0x20, 0x5f, 0x34, 0x39, 0x32, 0x20, 0x2a, 0x20, 0x30, 0x2e, 0x30, 0x37, 0x37, 0x33, 0x39, 0x39, //  _492 * 0.077399
	0x33, 0x38, 0x30, 0x35, 0x30, 0x35, 0x30, 0x38, 0x34, 0x39, 0x39, 0x31, 0x34, 0x35, 0x35, 0x30, // 3805050849914550
	0x37, 0x38, 0x31, 0x32, 0x35, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 78125;.         
	0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //    break;.      
	0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, //   }.        else
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // .        {.     
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x37, 0x39, 0x32, 0x20, 0x3d, 0x20, 0x70, 0x6f, //        _792 = po
	0x77, 0x72, 0x28, 0x28, 0x5f, 0x34, 0x39, 0x32, 0x20, 0x2a, 0x20, 0x30, 0x2e, 0x39, 0x34, 0x37, // wr((_492 * 0.947
	0x38, 0x36, 0x37, 0x32, 0x37, 0x34, 0x32, 0x38, 0x34, 0x33, 0x36, 0x32, 0x37, 0x39, 0x32, 0x39, // 8672742843627929
	0x36, 0x38, 0x37, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x32, 0x31, 0x33, 0x32, // 6875) + 0.052132
	0x36, 0x39, 0x39, 0x36, 0x33, 0x38, 0x36, 0x30, 0x35, 0x31, 0x31, 0x37, 0x37, 0x39, 0x37, 0x38, // 6996386051177978
	0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x30, 0x30, 0x30, 0x30, 0x30, // 515625, 2.400000
	0x30, 0x39, 0x35, 0x33, 0x36, 0x37, 0x34, 0x33, 0x31, 0x36, 0x34, 0x30, 0x36, 0x32, 0x35, 0x29, // 095367431640625)
	0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, // ;.            br
	0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, // eak;.        }. 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x20, 0x2f, 0x2f, //        break; //
	0x20, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x77, 0x6f, 0x72, //  unreachable wor
	0x6b, 0x61, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x20, 0x77, 0x68, // karound.    } wh
	0x69, 0x6c, 0x65, 0x28, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, // ile(false);.    
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x34, 0x39, 0x34, 0x20, 0x3d, 0x20, 0x5f, 0x34, 0x37, // float _494 = _47
	0x39, 0x2e, 0x79, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, // 9.y;.    float _
	0x37, 0x39, 0x33, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x64, 0x6f, 0x0a, 0x20, 0x20, 0x20, 0x20, // 793;.    do.    
	0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, 0x34, // {.        if (_4
	0x39, 0x34, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, 0x34, 0x34, 0x39, 0x39, 0x39, // 94 <= 0.04044999
	0x39, 0x32, 0x37, 0x32, 0x38, 0x32, 0x33, 0x33, 0x33, 0x33, 0x37, 0x34, 0x30, 0x32, 0x33, 0x34, // 9272823333740234
	0x33, 0x37, 0x35, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, // 375).        {. 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x37, 0x39, 0x33, 0x20, //            _793 
	0x3d, 0x20, 0x5f, 0x34, 0x39, 0x34, 0x20, 0x2a, 0x20, 0x30, 0x2e, 0x30, 0x37, 0x37, 0x33, 0x39, // = _494 * 0.07739
	0x39, 0x33, 0x38, 0x30, 0x35, 0x30, 0x35, 0x30, 0x38, 0x34, 0x39, 0x39, 0x31, 0x34, 0x35, 0x35, // 9380505084991455
	0x30, 0x37, 0x38, 0x31, 0x32, 0x35, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 078125;.        
	0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, //     break;.     
	0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, //    }.        els
	0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, // e.        {.    
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x37, 0x39, 0x33, 0x20, 0x3d, 0x20, 0x70, //         _793 = p
	0x6f, 0x77, 0x72, 0x28, 0x28, 0x5f, 0x34, 0x39, 0x34, 0x20, 0x2a, 0x20, 0x30, 0x2e, 0x39, 0x34, // owr((_494 * 0.94
	0x37, 0x38, 0x36, 0x37, 0x32, 0x37, 0x34, 0x32, 0x38, 0x34, 0x33, 0x36, 0x32, 0x37, 0x39, 0x32, // 7867274284362792
	0x39, 0x36, 0x38, 0x37, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x32, 0x31, 0x33, // 96875) + 0.05213
	0x32, 0x36, 0x39, 0x39, 0x36, 0x33, 0x38, 0x36, 0x30, 0x35, 0x31, 0x31, 0x37, 0x37, 0x39, 0x37, // 2699638605117797
	0x38, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x30, 0x30, 0x30, 0x30, // 8515625, 2.40000
	0x30, 0x30, 0x39, 0x35, 0x33, 0x36, 0x37, 0x34, 0x33, 0x31, 0x36, 0x34, 0x30, 0x36, 0x32, 0x35, // 0095367431640625
	0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, // );.            b
	0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, // reak;.        }.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x20, 0x2f, //         break; /
	0x2f, 0x20, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x77, 0x6f, // / unreachable wo
	0x72, 0x6b, 0x61, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x20, 0x77, // rkaround.    } w
	0x68, 0x69, 0x6c, 0x65, 0x28, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, // hile(false);.   
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x34, 0x39, 0x36, 0x20, 0x3d, 0x20, 0x5f, 0x34, //  float _496 = _4
	0x37, 0x39, 0x2e, 0x7a, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // 79.z;.    float 
	0x5f, 0x37, 0x39, 0x34, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x64, 0x6f, 0x0a, 0x20, 0x20, 0x20, // _794;.    do.   
	0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, //  {.        if (_
	0x34, 0x39, 0x36, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, 0x34, 0x34, 0x39, 0x39, // 496 <= 0.0404499
	0x39, 0x39, 0x32, 0x37, 0x32, 0x38, 0x32, 0x33, 0x33, 0x33, 0x33, 0x37, 0x34, 0x30, 0x32, 0x33, // 9927282333374023
	0x34, 0x33, 0x37, 0x35, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, // 4375).        {.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x37, 0x39, 0x34, //             _794
	0x20, 0x3d, 0x20, 0x5f, 0x34, 0x39, 0x36, 0x20, 0x2a, 0x20, 0x30, 0x2e, 0x30, 0x37, 0x37, 0x33, //  = _496 * 0.0773
	0x39, 0x39, 0x33, 0x38, 0x30, 0x35, 0x30, 0x35, 0x30, 0x38, 0x34, 0x39, 0x39, 0x31, 0x34, 0x35, // 9938050508499145
	0x35, 0x30, 0x37, 0x38, 0x31, 0x32, 0x35, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 5078125;.       
	0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, //      break;.    
	0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, //     }.        el
	0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, // se.        {.   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x37, 0x39, 0x34, 0x20, 0x3d, 0x20, //          _794 = 
	0x70, 0x6f, 0x77, 0x72, 0x28, 0x28, 0x5f, 0x34, 0x39, 0x36, 0x20, 0x2a, 0x20, 0x30, 0x2e, 0x39, // powr((_496 * 0.9
	0x34, 0x37, 0x38, 0x36, 0x37, 0x32, 0x37, 0x34, 0x32, 0x38, 0x34, 0x33, 0x36, 0x32, 0x37, 0x39, // 4786727428436279
	0x32, 0x39, 0x36, 0x38, 0x37, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x32, 0x31, // 296875) + 0.0521
	0x33, 0x32, 0x36, 0x39, 0x39, 0x36, 0x33, 0x38, 0x36, 0x30, 0x35, 0x31, 0x31, 0x37, 0x37, 0x39, // 3269963860511779
	0x37, 0x38, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x30, 0x30, 0x30, // 78515625, 2.4000
	0x30, 0x30, 0x30, 0x39, 0x35, 0x33, 0x36, 0x37, 0x34, 0x33, 0x31, 0x36, 0x34, 0x30, 0x36, 0x32, // 0009536743164062
	0x35, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 5);.            
	0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, // break;.        }
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x20, // .        break; 
	0x2f, 0x2f, 0x20, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x77, // // unreachable w
	0x6f, 0x72, 0x6b, 0x61, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x20, // orkaround.    } 
	0x77, 0x68, 0x69, 0x6c, 0x65, 0x28, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x20, 0x20, // while(false);.  
	0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x34, 0x39, 0x38, 0x20, 0x3d, 0x20, //   float3 _498 = 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x37, 0x39, 0x32, 0x2c, 0x20, 0x5f, 0x37, 0x39, // float3(_792, _79
	0x33, 0x2c, 0x20, 0x5f, 0x37, 0x39, 0x34, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, // 3, _794);.    fl
	0x6f, 0x61, 0x74, 0x20, 0x5f, 0x35, 0x35, 0x35, 0x20, 0x3d, 0x20, 0x5f, 0x34, 0x38, 0x39, 0x2e, // oat _555 = _489.
	0x78, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x37, 0x39, // x;.    float _79
	0x38, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x64, 0x6f, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, // 8;.    do.    {.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, 0x35, 0x35, 0x35, //         if (_555
	0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, 0x34, 0x34, 0x39, 0x39, 0x39, 0x39, 0x32, //  <= 0.0404499992
	0x37, 0x32, 0x38, 0x32, 0x33, 0x33, 0x33, 0x33, 0x37, 0x34, 0x30, 0x32, 0x33, 0x34, 0x33, 0x37, // 7282333374023437
	0x35, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, // 5).        {.   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x37, 0x39, 0x38, 0x20, 0x3d, 0x20, //          _798 = 
	0x5f, 0x35, 0x35, 0x35, 0x20, 0x2a, 0x20, 0x30, 0x2e, 0x30, 0x37, 0x37, 0x33, 0x39, 0x39, 0x33, // _555 * 0.0773993
	0x38, 0x30, 0x35, 0x30, 0x35, 0x30, 0x38, 0x34, 0x39, 0x39, 0x31, 0x34, 0x35, 0x35, 0x30, 0x37, // 8050508499145507
	0x38, 0x31, 0x32, 0x35, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 8125;.          
	0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //   break;.       
	0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, //  }.        else.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //         {.      
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x37, 0x39, 0x38, 0x20, 0x3d, 0x20, 0x70, 0x6f, 0x77, //       _798 = pow
	0x72, 0x28, 0x28, 0x5f, 0x35, 0x35, 0x35, 0x20, 0x2a, 0x20, 0x30, 0x2e, 0x39, 0x34, 0x37, 0x38, // r((_555 * 0.9478
	0x36, 0x37, 0x32, 0x37, 0x34, 0x32, 0x38, 0x34, 0x33, 0x36, 0x32, 0x37, 0x39, 0x32, 0x39, 0x36, // 6727428436279296
	0x38, 0x37, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x32, 0x31, 0x33, 0x32, 0x36, // 875) + 0.0521326
	0x39, 0x39, 0x36, 0x33, 0x38, 0x36, 0x30, 0x35, 0x31, 0x31, 0x37, 0x37, 0x39, 0x37, 0x38, 0x35, // 9963860511779785
	0x31, 0x35, 0x36, 0x32, 0x35, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, // 15625, 2.4000000
	0x39, 0x35, 0x33, 0x36, 0x37, 0x34, 0x33, 0x31, 0x36, 0x34, 0x30, 0x36, 0x32, 0x35, 0x29, 0x3b, // 95367431640625);
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, // .            bre
	0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, // ak;.        }.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x20, 0x2f, 0x2f, 0x20, //       break; // 
	0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x77, 0x6f, 0x72, 0x6b, // unreachable work
	0x61, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x20, 0x77, 0x68, 0x69, // around.    } whi
	0x6c, 0x65, 0x28, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, // le(false);.    f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x35, 0x35, 0x37, 0x20, 0x3d, 0x20, 0x5f, 0x34, 0x38, 0x39, // loat _557 = _489
	0x2e, 0x79, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x37, // .y;.    float _7
	0x39, 0x39, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x64, 0x6f, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, // 99;.    do.    {
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, 0x35, 0x35, // .        if (_55
	0x37, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, 0x34, 0x34, 0x39, 0x39, 0x39, 0x39, // 7 <= 0.040449999
	0x32, 0x37, 0x32, 0x38, 0x32, 0x33, 0x33, 0x33, 0x33, 0x37, 0x34, 0x30, 0x32, 0x33, 0x34, 0x33, // 2728233337402343
	0x37, 0x35, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, // 75).        {.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x37, 0x39, 0x39, 0x20, 0x3d, //           _799 =
	0x20, 0x5f, 0x35, 0x35, 0x37, 0x20, 0x2a, 0x20, 0x30, 0x2e, 0x30, 0x37, 0x37, 0x33, 0x39, 0x39, //  _557 * 0.077399
	0x33, 0x38, 0x30, 0x35, 0x30, 0x35, 0x30, 0x38, 0x34, 0x39, 0x39, 0x31, 0x34, 0x35, 0x35, 0x30, // 3805050849914550
	0x37, 0x38, 0x31, 0x32, 0x35, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 78125;.         
	0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //    break;.      
	0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, //   }.        else
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // .        {.     
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x37, 0x39, 0x39, 0x20, 0x3d, 0x20, 0x70, 0x6f, //        _799 = po
	0x77, 0x72, 0x28, 0x28, 0x5f, 0x35, 0x35, 0x37, 0x20, 0x2a, 0x20, 0x30, 0x2e, 0x39, 0x34, 0x37, // wr((_557 * 0.947
	0x38, 0x36, 0x37, 0x32, 0x37, 0x34, 0x32, 0x38, 0x34, 0x33, 0x36, 0x32, 0x37, 0x39, 0x32, 0x39, // 8672742843627929
	0x36, 0x38, 0x37, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x32, 0x31, 0x33, 0x32, // 6875) + 0.052132
	0x36, 0x39, 0x39, 0x36, 0x33, 0x38, 0x36, 0x30, 0x35, 0x31, 0x31, 0x37, 0x37, 0x39, 0x37, 0x38, // 6996386051177978
	0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x30, 0x30, 0x30, 0x30, 0x30, // 515625, 2.400000
	0x30, 0x39, 0x35, 0x33, 0x36, 0x37, 0x34, 0x33, 0x31, 0x36, 0x34, 0x30, 0x36, 0x32, 0x35, 0x29, // 095367431640625)
	0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, // ;.            br
	0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, // eak;.        }. 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x20, 0x2f, 0x2f, //        break; //
	0x20, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x77, 0x6f, 0x72, //  unreachable wor
	0x6b, 0x61, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x20, 0x77, 0x68, // karound.    } wh
	0x69, 0x6c, 0x65, 0x28, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, // ile(false);.    
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x35, 0x35, 0x39, 0x20, 0x3d, 0x20, 0x5f, 0x34, 0x38, // float _559 = _48
	0x39, 0x2e, 0x7a, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, // 9.z;.    float _
	0x38, 0x30, 0x30, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x64, 0x6f, 0x0a, 0x20, 0x20, 0x20, 0x20, // 800;.    do.    
	0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, 0x35, // {.        if (_5
	0x35, 0x39, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, 0x34, 0x34, 0x39, 0x39, 0x39, // 59 <= 0.04044999
	0x39, 0x32, 0x37, 0x32, 0x38, 0x32, 0x33, 0x33, 0x33, 0x33, 0x37, 0x34, 0x30, 0x32, 0x33, 0x34, // 9272823333740234
	0x33, 0x37, 0x35, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, // 375).        {. 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x38, 0x30, 0x30, 0x20, //            _800 
	0x3d, 0x20, 0x5f, 0x35, 0x35, 0x39, 0x20, 0x2a, 0x20, 0x30, 0x2e, 0x30, 0x37, 0x37, 0x33, 0x39, // = _559 * 0.07739
	0x39, 0x33, 0x38, 0x30, 0x35, 0x30, 0x35, 0x30, 0x38, 0x34, 0x39, 0x39, 0x31, 0x34, 0x35, 0x35, // 9380505084991455
	0x30, 0x37, 0x38, 0x31, 0x32, 0x35, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 078125;.        
	0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, //     break;.     
	0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, //    }.        els
	0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, // e.        {.    
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x38, 0x30, 0x30, 0x20, 0x3d, 0x20, 0x70, //         _800 = p
	0x6f, 0x77, 0x72, 0x28, 0x28, 0x5f, 0x35, 0x35, 0x39, 0x20, 0x2a, 0x20, 0x30, 0x2e, 0x39, 0x34, // owr((_559 * 0.94
	0x37, 0x38, 0x36, 0x37, 0x32, 0x37, 0x34, 0x32, 0x38, 0x34, 0x33, 0x36, 0x32, 0x37, 0x39, 0x32, // 7867274284362792
	0x39, 0x36, 0x38, 0x37, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x32, 0x31, 0x33, // 96875) + 0.05213
	0x32, 0x36, 0x39, 0x39, 0x36, 0x33, 0x38, 0x36, 0x30, 0x35, 0x31, 0x31, 0x37, 0x37, 0x39, 0x37, // 2699638605117797
	0x38, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x30, 0x30, 0x30, 0x30, // 8515625, 2.40000
	0x30, 0x30, 0x39, 0x35, 0x33, 0x36, 0x37, 0x34, 0x33, 0x31, 0x36, 0x34, 0x30, 0x36, 0x32, 0x35, // 0095367431640625
	0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, // );.            b
	0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, // reak;.        }.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x20, 0x2f, //         break; /
	0x2f, 0x20, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x77, 0x6f, // / unreachable wo
	0x72, 0x6b, 0x61, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x20, 0x77, // rkaround.    } w
	0x68, 0x69, 0x6c, 0x65, 0x28, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, // hile(false);.   
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x35, 0x36, 0x31, 0x20, 0x3d, 0x20, 0x66, //  float3 _561 = f
	0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x37, 0x39, 0x38, 0x2c, 0x20, 0x5f, 0x37, 0x39, 0x39, // loat3(_798, _799
	0x2c, 0x20, 0x5f, 0x38, 0x30, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, // , _800);.    flo
	0x61, 0x74, 0x20, 0x5f, 0x36, 0x33, 0x36, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x5f, 0x34, // at _636 = dot(_4
	0x39, 0x38, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, // 98, _mtl_u.Stere
	0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, // o_LeftLuminance_
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, // Gamma.xyz);.    
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x36, 0x34, 0x30, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, // float _640 = dot
	0x28, 0x5f, 0x34, 0x39, 0x38, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, // (_498, _mtl_u.St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, // ereo_RightLumina
	0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, // nce_DynDesat.xyz
	0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x36, 0x34, // );.    float _64
	0x34, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x5f, 0x35, 0x36, 0x31, 0x2c, 0x20, 0x5f, 0x6d, // 4 = dot(_561, _m
	0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, // tl_u.Stereo_Left
	0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, // Luminance_Gamma.
	0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // xyz);.    float 
	0x5f, 0x36, 0x34, 0x38, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x5f, 0x35, 0x36, 0x31, 0x2c, // _648 = dot(_561,
	0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, //  _mtl_u.Stereo_R
	0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, // ightLuminance_Dy
	0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, // nDesat.xyz);.   
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x36, 0x35, 0x31, 0x20, 0x3d, 0x20, 0x5f, 0x36, //  float _651 = _6
	0x33, 0x36, 0x20, 0x2b, 0x20, 0x5f, 0x36, 0x34, 0x30, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, // 36 + _640;.    f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x36, 0x35, 0x34, 0x20, 0x3d, 0x20, 0x5f, 0x36, 0x34, 0x34, // loat _654 = _644
	0x20, 0x2b, 0x20, 0x5f, 0x36, 0x34, 0x38, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, //  + _648;.    flo
	0x61, 0x74, 0x34, 0x20, 0x5f, 0x37, 0x32, 0x32, 0x20, 0x3d, 0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, // at4 _722 = (floa
	0x74, 0x34, 0x28, 0x6d, 0x69, 0x78, 0x28, 0x5f, 0x34, 0x39, 0x38, 0x2c, 0x20, 0x66, 0x6c, 0x6f, // t4(mix(_498, flo
	0x61, 0x74, 0x33, 0x28, 0x5f, 0x36, 0x35, 0x31, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // at3(_651), float
	0x33, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // 3(_mtl_u.Stereo_
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, // RightLuminance_D
	0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, // ynDesat.w * abs(
	0x28, 0x5f, 0x36, 0x33, 0x36, 0x20, 0x2d, 0x20, 0x5f, 0x36, 0x34, 0x30, 0x29, 0x20, 0x2f, 0x20, // (_636 - _640) / 
	0x28, 0x5f, 0x36, 0x35, 0x31, 0x20, 0x2b, 0x20, 0x39, 0x2e, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, // (_651 + 9.999999
	0x37, 0x34, 0x37, 0x33, 0x37, 0x38, 0x37, 0x35, 0x31, 0x36, 0x33, 0x35, 0x35, 0x35, 0x31, 0x34, // 7473787516355514
	0x35, 0x32, 0x36, 0x33, 0x36, 0x37, 0x31, 0x38, 0x38, 0x65, 0x2d, 0x30, 0x35, 0x29, 0x29, 0x29, // 526367188e-05)))
	0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, // ), 1.0) * _mtl_u
	0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x29, // .Stereo_LeftMat)
	0x20, 0x2b, 0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x6d, 0x69, 0x78, 0x28, 0x5f, //  + (float4(mix(_
	0x35, 0x36, 0x31, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x36, 0x35, 0x34, // 561, float3(_654
	0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, // ), float3(_mtl_u
	0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, // .Stereo_RightLum
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, // inance_DynDesat.
	0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x5f, 0x36, 0x34, 0x34, 0x20, 0x2d, 0x20, // w * abs((_644 - 
	0x5f, 0x36, 0x34, 0x38, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x5f, 0x36, 0x35, 0x34, 0x20, 0x2b, 0x20, // _648) / (_654 + 
	0x39, 0x2e, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x37, 0x34, 0x37, 0x33, 0x37, 0x38, 0x37, 0x35, // 9.99999974737875
	0x31, 0x36, 0x33, 0x35, 0x35, 0x35, 0x31, 0x34, 0x35, 0x32, 0x36, 0x33, 0x36, 0x37, 0x31, 0x38, // 1635551452636718
	0x38, 0x65, 0x2d, 0x30, 0x35, 0x29, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, // 8e-05)))), 1.0) 
	0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // * _mtl_u.Stereo_
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, // RightMat);.    f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x37, 0x32, 0x37, 0x20, 0x3d, 0x20, 0x5f, 0x37, 0x32, 0x32, // loat _727 = _722
	0x2e, 0x78, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x38, // .x;.    float _8
	0x30, 0x34, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, 0x37, 0x32, 0x37, // 04;.    if (_727
	0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x33, 0x31, 0x33, 0x30, 0x38, 0x30, 0x30, 0x30, //  <= 0.0031308000
	0x39, 0x30, 0x37, 0x33, 0x30, 0x31, 0x39, 0x30, 0x32, 0x37, 0x37, 0x30, 0x39, 0x39, 0x36, 0x30, // 9073019027709960
	0x39, 0x33, 0x37, 0x35, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, // 9375).    {.    
	0x20, 0x20, 0x20, 0x20, 0x5f, 0x38, 0x30, 0x34, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, 0x32, //     _804 = 12.92
	0x30, 0x30, 0x30, 0x30, 0x30, 0x37, 0x36, 0x32, 0x39, 0x33, 0x39, 0x34, 0x35, 0x33, 0x31, 0x32, // 0000076293945312
	0x35, 0x20, 0x2a, 0x20, 0x5f, 0x37, 0x32, 0x37, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, // 5 * _727;.    }.
	0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, //     else.    {. 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x38, 0x30, 0x34, 0x20, 0x3d, 0x20, 0x28, 0x31, //        _804 = (1
	0x2e, 0x30, 0x35, 0x34, 0x39, 0x39, 0x39, 0x39, 0x34, 0x37, 0x35, 0x34, 0x37, 0x39, 0x31, 0x32, // .054999947547912
	0x35, 0x39, 0x37, 0x36, 0x35, 0x36, 0x32, 0x35, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x72, 0x28, // 59765625 * powr(
	0x5f, 0x37, 0x32, 0x37, 0x2c, 0x20, 0x30, 0x2e, 0x34, 0x31, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, // _727, 0.41666665
	0x36, 0x37, 0x33, 0x32, 0x35, 0x35, 0x39, 0x32, 0x30, 0x34, 0x31, 0x30, 0x31, 0x35, 0x36, 0x32, // 6732559204101562
	0x35, 0x29, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x34, 0x39, 0x39, 0x39, 0x39, 0x39, // 5)) - 0.05499999
	0x39, 0x37, 0x30, 0x31, 0x39, 0x37, 0x36, 0x37, 0x37, 0x36, 0x31, 0x32, 0x33, 0x30, 0x34, 0x36, // 9701976776123046
	0x38, 0x37, 0x35, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, // 875;.    }.    f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x37, 0x32, 0x39, 0x20, 0x3d, 0x20, 0x5f, 0x37, 0x32, 0x32, // loat _729 = _722
	0x2e, 0x79, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x38, // .y;.    float _8
	0x30, 0x35, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, 0x37, 0x32, 0x39, // 05;.    if (_729
	0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x33, 0x31, 0x33, 0x30, 0x38, 0x30, 0x30, 0x30, //  <= 0.0031308000
	0x39, 0x30, 0x37, 0x33, 0x30, 0x31, 0x39, 0x30, 0x32, 0x37, 0x37, 0x30, 0x39, 0x39, 0x36, 0x30, // 9073019027709960
	0x39, 0x33, 0x37, 0x35, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, // 9375).    {.    
	0x20, 0x20, 0x20, 0x20, 0x5f, 0x38, 0x30, 0x35, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, 0x32, //     _805 = 12.92
	0x30, 0x30, 0x30, 0x30, 0x30, 0x37, 0x36, 0x32, 0x39, 0x33, 0x39, 0x34, 0x35, 0x33, 0x31, 0x32, // 0000076293945312
	0x35, 0x20, 0x2a, 0x20, 0x5f, 0x37, 0x32, 0x39, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, // 5 * _729;.    }.
	0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, //     else.    {. 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x38, 0x30, 0x35, 0x20, 0x3d, 0x20, 0x28, 0x31, //        _805 = (1
	0x2e, 0x30, 0x35, 0x34, 0x39, 0x39, 0x39, 0x39, 0x34, 0x37, 0x35, 0x34, 0x37, 0x39, 0x31, 0x32, // .054999947547912
	0x35, 0x39, 0x37, 0x36, 0x35, 0x36, 0x32, 0x35, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x72, 0x28, // 59765625 * powr(
	0x5f, 0x37, 0x32, 0x39, 0x2c, 0x20, 0x30, 0x2e, 0x34, 0x31, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, // _729, 0.41666665
	0x36, 0x37, 0x33, 0x32, 0x35, 0x35, 0x39, 0x32, 0x30, 0x34, 0x31, 0x30, 0x31, 0x35, 0x36, 0x32, // 6732559204101562
	0x35, 0x29, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x34, 0x39, 0x39, 0x39, 0x39, 0x39, // 5)) - 0.05499999
	0x39, 0x37, 0x30, 0x31, 0x39, 0x37, 0x36, 0x37, 0x37, 0x36, 0x31, 0x32, 0x33, 0x30, 0x34, 0x36, // 9701976776123046
	0x38, 0x37, 0x35, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, // 875;.    }.    f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x37, 0x33, 0x31, 0x20, 0x3d, 0x20, 0x5f, 0x37, 0x32, 0x32, // loat _731 = _722
	0x2e, 0x7a, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x38, // .z;.    float _8
	0x30, 0x36, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, 0x37, 0x33, 0x31, // 06;.    if (_731
	0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x33, 0x31, 0x33, 0x30, 0x38, 0x30, 0x30, 0x30, //  <= 0.0031308000
	0x39, 0x30, 0x37, 0x33, 0x30, 0x31, 0x39, 0x30, 0x32, 0x37, 0x37, 0x30, 0x39, 0x39, 0x36, 0x30, // 9073019027709960
	0x39, 0x33, 0x37, 0x35, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, // 9375).    {.    
	0x20, 0x20, 0x20, 0x20, 0x5f, 0x38, 0x30, 0x36, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, 0x32, //     _806 = 12.92
	0x30, 0x30, 0x30, 0x30, 0x30, 0x37, 0x36, 0x32, 0x39, 0x33, 0x39, 0x34, 0x35, 0x33, 0x31, 0x32, // 0000076293945312
	0x35, 0x20, 0x2a, 0x20, 0x5f, 0x37, 0x33, 0x31, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, // 5 * _731;.    }.
	0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, //     else.    {. 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x38, 0x30, 0x36, 0x20, 0x3d, 0x20, 0x28, 0x31, //        _806 = (1
	0x2e, 0x30, 0x35, 0x34, 0x39, 0x39, 0x39, 0x39, 0x34, 0x37, 0x35, 0x34, 0x37, 0x39, 0x31, 0x32, // .054999947547912
	0x35, 0x39, 0x37, 0x36, 0x35, 0x36, 0x32, 0x35, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x72, 0x28, // 59765625 * powr(
	0x5f, 0x37, 0x33, 0x31, 0x2c, 0x20, 0x30, 0x2e, 0x34, 0x31, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, // _731, 0.41666665
	0x36, 0x37, 0x33, 0x32, 0x35, 0x35, 0x39, 0x32, 0x30, 0x34, 0x31, 0x30, 0x31, 0x35, 0x36, 0x32, // 6732559204101562
	0x35, 0x29, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x34, 0x39, 0x39, 0x39, 0x39, 0x39, // 5)) - 0.05499999
	0x39, 0x37, 0x30, 0x31, 0x39, 0x37, 0x36, 0x37, 0x37, 0x36, 0x31, 0x32, 0x33, 0x30, 0x34, 0x36, // 9701976776123046
	0x38, 0x37, 0x35, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x6f, // 875;.    }.    o
	0x75, 0x74, 0x2e, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, // ut.bgfx_FragData
	0x30, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x38, 0x30, 0x34, 0x2c, // 0 = float4(_804,
	0x20, 0x5f, 0x38, 0x30, 0x35, 0x2c, 0x20, 0x5f, 0x38, 0x30, 0x36, 0x2c, 0x20, 0x31, 0x2e, 0x30, //  _805, _806, 1.0
	0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6f, 0x75, // );.    return ou
	0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x0a, 0x00, 0x00, 0xe0, 0x00,                                     // t;.}......
};
static const uint8_t fs_pp_stereo_anaglyph_lin_srgb_dyndesat_st_essl[8777] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x22, // FSH.Jc._......6"
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x33, 0x32, 0x30, 0x20, 0x65, // ..#version 320 e
	0x73, 0x0a, 0x23, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x47, 0x4c, 0x5f, // s.#extension GL_
	0x45, 0x58, 0x54, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, // EXT_shader_textu
	0x72, 0x65, 0x5f, 0x6c, 0x6f, 0x64, 0x20, 0x3a, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x0a, // re_lod : enable.
	0x23, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x47, 0x4c, 0x5f, 0x45, 0x58, // #extension GL_EX
	0x54, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x20, // T_texture_array 
	0x3a, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, // : enable.#define
	0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, //  attribute in.#d
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, // efine varying in
	0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, // .precision highp
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3b, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, //  float;.precisio
	0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x69, 0x6e, 0x74, 0x3b, 0x0a, 0x70, 0x72, 0x65, // n highp int;.pre
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x73, 0x61, 0x6d, // cision highp sam
	0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x3b, 0x0a, 0x23, 0x64, 0x65, // pler2DArray;.#de
	0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x4c, 0x6f, // fine texture2DLo
	0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, // d      texture2D
	0x4c, 0x6f, 0x64, 0x45, 0x58, 0x54, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, // LodEXT.#define t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, 0x20, 0x20, // exture2DGrad    
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x47, 0x72, 0x61, 0x64, 0x45, 0x58, //  texture2DGradEX
	0x54, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // T.#define textur
	0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, // e2DProjLod  text
	0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x4c, 0x6f, 0x64, 0x45, 0x58, 0x54, 0x0a, // ure2DProjLodEXT.
	0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, // #define texture2
	0x44, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // DProjGrad textur
	0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, 0x45, 0x58, 0x54, 0x0a, 0x23, // e2DProjGradEXT.#
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, // define textureCu
	0x62, 0x65, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // beLod    texture
	0x43, 0x75, 0x62, 0x65, 0x4c, 0x6f, 0x64, 0x45, 0x58, 0x54, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, // CubeLodEXT.#defi
	0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x47, 0x72, // ne textureCubeGr
	0x61, 0x64, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, // ad   textureCube
	0x47, 0x72, 0x61, 0x64, 0x45, 0x58, 0x54, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, // GradEXT.#define 
	0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // shadow2D(_sample
	0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, // r, _coord) textu
	0x72, 0x65, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, // re(_sampler, _co
	0x6f, 0x72, 0x64, 0x29, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x73, 0x68, 0x61, // ord).#define sha
	0x64, 0x6f, 0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, // dow2DProj(_sampl
	0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x74, 0x65, 0x78, 0x74, // er, _coord) text
	0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // ureProj(_sampler
	0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x0a, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x65, // , _coord).out me
	0x64, 0x69, 0x75, 0x6d, 0x70, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, // diump vec4 bgfx_
	0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, // FragColor;.varyi
	0x6e, 0x67, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x5f, 0x65, 0x79, 0x65, 0x3b, 0x0a, // ng float v_eye;.
	0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x5f, 0x74, // varying vec2 v_t
	0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, // excoord0;.vec3 i
	0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, // nstMul(vec3 _vec
	0x2c, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, // , mat3 _mtx) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, // eturn ( (_vec) *
	0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, //  (_mtx) ); }.vec
	0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, // 3 instMul(mat3 _
	0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, // mtx, vec3 _vec) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, // { return ( (_mtx
	0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, // ) * (_vec) ); }.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, // vec4 instMul(vec
	0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, // 4 _vec, mat4 _mt
	0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, // x) { return ( (_
	0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, // vec) * (_mtx) );
	0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, //  }.vec4 instMul(
	0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // mat4 _mtx, vec4 
	0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // _vec) { return (
	0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, //  (_mtx) * (_vec)
	0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, 0x70, 0x28, //  ); }.float rcp(
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // float _a) { retu
	0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, // rn 1.0/_a; }.vec
	0x32, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, // 2 rcp(vec2 _a) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, //  return vec2(1.0
	0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x70, // )/_a; }.vec3 rcp
	0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // (vec3 _a) { retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, // rn vec3(1.0)/_a;
	0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x34, //  }.vec4 rcp(vec4
	0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, //  _a) { return ve
	0x63, 0x34, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, // c4(1.0)/_a; }.ve
	0x63, 0x32, 0x20, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, // c2 vec2_splat(fl
	0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // oat _x) { return
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, //  vec2(_x, _x); }
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, // .vec3 vec3_splat
	0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // (float _x) { ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, // urn vec3(_x, _x,
	0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, 0x65, 0x63, //  _x); }.vec4 vec
	0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, // 4_splat(float _x
	0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, // ) { return vec4(
	0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, // _x, _x, _x, _x);
	0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, //  }.uvec2 uvec2_s
	0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, // plat(uint _x) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, // return uvec2(_x,
	0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, 0x75, 0x76, //  _x); }.uvec3 uv
	0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, // ec3_splat(uint _
	0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, // x) { return uvec
	0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, // 3(_x, _x, _x); }
	0x0a, 0x75, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, // .uvec4 uvec4_spl
	0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // at(uint _x) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, // turn uvec4(_x, _
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x6d, 0x61, // x, _x, _x); }.ma
	0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, // t4 mtxFromRows(v
	0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, // ec4 _0, vec4 _1,
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, //  vec4 _2, vec4 _
	0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, // 3).{.return tran
	0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, // spose(mat4(_0, _
	0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // 1, _2, _3) );.}.
	0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, // mat4 mtxFromCols
	0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, // (vec4 _0, vec4 _
	0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // 1, vec4 _2, vec4
	0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, //  _3).{.return ma
	0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, // t4(_0, _1, _2, _
	0x33, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, // 3);.}.mat3 mtxFr
	0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, // omRows(vec3 _0, 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, // vec3 _1, vec3 _2
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, // ).{.return trans
	0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, // pose(mat3(_0, _1
	0x2c, 0x20, 0x5f, 0x32, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, // , _2) );.}.mat3 
	0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, // mtxFromCols(vec3
	0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, //  _0, vec3 _1, ve
	0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // c3 _2).{.return 
	0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, // mat3(_0, _1, _2)
	0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, // ;.}.uniform vec4
	0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, //  u_viewRect;.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, // form vec4 u_view
	0x54, 0x65, 0x78, 0x65, 0x6c, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, // Texel;.uniform m
	0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // at4 u_view;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, // orm mat4 u_invVi
	0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, // ew;.uniform mat4
	0x20, 0x75, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, //  u_proj;.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, 0x6a, 0x3b, //  mat4 u_invProj;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, // .uniform mat4 u_
	0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // viewProj;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, // m mat4 u_invView
	0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, // Proj;.uniform ma
	0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, 0x3b, 0x0a, // t4 u_model[32];.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, // uniform mat4 u_m
	0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // odelView;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, // m mat4 u_modelVi
	0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // ewProj;.uniform 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x66, 0x34, // vec4 u_alphaRef4
	0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x66, 0x6c, 0x6f, // ;.float sqr( flo
	0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // at v).{.return v
	0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, // *v;.}.vec2 sqr( 
	0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // vec2 v).{.return
	0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x73, 0x71, 0x72, //  v*v;.}.vec3 sqr
	0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, // ( vec3 v).{.retu
	0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6d, // rn v*v;.}.vec3 m
	0x75, 0x6c, 0x5f, 0x77, 0x31, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x2c, 0x20, 0x6d, // ul_w1( vec3 v, m
	0x61, 0x74, 0x34, 0x20, 0x6d, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // at4 m).{.return 
	0x76, 0x2e, 0x78, 0x2a, 0x6d, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, // v.x*m[0].xyz + (
	0x76, 0x2e, 0x79, 0x2a, 0x6d, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, // v.y*m[1].xyz + (
	0x76, 0x2e, 0x7a, 0x2a, 0x6d, 0x5b, 0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x6d, // v.z*m[2].xyz + m
	0x5b, 0x33, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // [3].xyz));.}.flo
	0x61, 0x74, 0x20, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, // at acos_approx_d
	0x69, 0x76, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, // ivPI( float v).{
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, // .float x = abs(v
	0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, // );.if(1. - x <= 
	0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, // 0.00006103515625
	0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, // ).return (v >= 0
	0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x3b, 0x0a, 0x66, 0x6c, // .) ? 0. : 1.;.fl
	0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, // oat res = ((-0.1
	0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, // 55972/3.14159265
	0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, // 3589793238462643
	0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, // 3832795) * x + (
	0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, // 1.56467/3.141592
	0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, // 6535897932384626
	0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, // 433832795) ) * s
	0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, // qrt(1. - x);.ret
	0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, // urn (v >= 0.) ? 
	0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, // res : 1. - res;.
	0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, // }.float atan2_ap
	0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, // prox_div2PI( flo
	0x61, 0x74, 0x20, 0x79, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x29, 0x0a, 0x7b, // at y, float x).{
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3d, 0x20, 0x61, // .float abs_y = a
	0x62, 0x73, 0x28, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, // bs(y);.float abs
	0x5f, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x78, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, // _x = abs(x);.if(
	0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, // abs_x <= 0.00006
	0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x20, 0x26, 0x26, 0x20, 0x61, 0x62, 0x73, // 103515625 && abs
	0x5f, 0x79, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, // _y <= 0.00006103
	0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x30, // 515625).return 0
	0x2e, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x61, 0x62, // .;.float r = (ab
	0x73, 0x5f, 0x78, 0x20, 0x2d, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x20, 0x2f, 0x20, 0x28, // s_x - abs_y) / (
	0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2b, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x3b, 0x0a, // abs_x + abs_y);.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3d, 0x20, 0x28, 0x28, // float angle = ((
	0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x28, 0x33, 0x2e, 0x2f, 0x38, 0x2e, // x < 0.) ? (3./8.
	0x29, 0x20, 0x3a, 0x20, 0x28, 0x31, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x29, 0x0a, 0x2b, 0x20, 0x28, // ) : (1./8.)).+ (
	0x30, 0x2e, 0x32, 0x31, 0x31, 0x38, 0x36, 0x38, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, // 0.211868 /(2.*3.
	0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, // 1415926535897932
	0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, // 384626433832795)
	0x20, 0x2a, 0x20, 0x72, 0x20, 0x2a, 0x20, 0x72, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x39, 0x38, 0x37, //  * r * r - 0.987
	0x33, 0x30, 0x35, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, // 305 /(2.*3.14159
	0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, // 2653589793238462
	0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, // 6433832795)) * (
	0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x72, 0x20, 0x3a, 0x20, // (x < 0.) ? -r : 
	0x72, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x79, 0x20, 0x3c, 0x20, // r);.return (y < 
	0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3a, 0x20, 0x61, // 0.) ? -angle : a
	0x6e, 0x67, 0x6c, 0x65, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x73, // ngle;.}.float as
	0x69, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, // in_approx_divPI(
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, //  float v).{.floa
	0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, // t x = abs(v);.if
	0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, // (1. - x <= 0.000
	0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, // 06103515625).ret
	0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, // urn (v >= 0.) ? 
	0x30, 0x2e, 0x35, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // 0.5 : -0.5;.floa
	0x74, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, // t res = ((-0.155
	0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, // 972/3.1415926535
	0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, // 8979323846264338
	0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, // 32795) * x + (1.
	0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, // 56467/3.14159265
	0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, // 3589793238462643
	0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, // 3832795) ) * sqr
	0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // t(1. - x);.retur
	0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, // n (v >= 0.) ? 0.
	0x35, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x20, 0x2b, // 5 - res : -0.5 +
	0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x61, 0x79, //  res;.}.vec2 ray
	0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x75, // _to_equirectangu
	0x6c, 0x61, 0x72, 0x5f, 0x75, 0x76, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x61, 0x79, // lar_uv( vec3 ray
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // ).{.return vec2(
	0x0a, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, // .0.5 + atan2_app
	0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x79, // rox_div2PI(ray.y
	0x2c, 0x20, 0x72, 0x61, 0x79, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, // , ray.x),.acos_a
	0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, // pprox_divPI(ray.
	0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, // z));.}.float Inv
	0x73, 0x52, 0x47, 0x42, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // sRGB( float colo
	0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, // r).{.if (color <
	0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, 0x34, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // = 0.04045).retur
	0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, // n color * (1.0/1
	0x32, 0x2e, 0x39, 0x32, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, // 2.92);.else.retu
	0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, // rn pow(color * (
	0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, // 1.0/1.055) + (0.
	0x30, 0x35, 0x35, 0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x29, // 055/1.055), 2.4)
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x52, 0x65, 0x63, // ;.}.float InvRec
	0x37, 0x30, 0x39, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // 709( float color
	0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, // ).{.if (color <=
	0x20, 0x30, 0x2e, 0x30, 0x38, 0x31, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, //  0.081).return c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x34, 0x2e, 0x35, 0x29, // olor * (1.0/4.5)
	0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, // ;.else.return po
	0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, // w(color * (1.0/1
	0x2e, 0x30, 0x39, 0x39, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x2f, 0x31, // .099) + (0.099/1
	0x2e, 0x30, 0x39, 0x39, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x30, 0x2e, 0x34, 0x35, 0x29, // .099), 1.0/0.45)
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, // ;.}.float InvGam
	0x6d, 0x61, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, // ma( float color)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, // .{.return InvsRG
	0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, // B(color);.}.vec3
	0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, //  InvGamma( vec3 
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // color).{.return 
	0x76, 0x65, 0x63, 0x33, 0x28, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, // vec3(InvGamma(co
	0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, // lor.x),InvGamma(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, // color.y),InvGamm
	0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // a(color.z));.}.v
	0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, // ec3 InvToneMap( 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, // vec3 color).{.fl
	0x6f, 0x61, 0x74, 0x20, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x30, 0x2e, // oat inv_2bh = 0.
	0x35, 0x2f, 0x30, 0x2e, 0x32, 0x35, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x68, // 5/0.25;.float bh
	0x20, 0x3d, 0x20, 0x34, 0x2e, 0x30, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2d, 0x20, 0x32, 0x2e, //  = 4.0*0.25 - 2.
	0x30, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // 0;.return (color
	0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2b, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x63, 0x6f, //  - 1.0 + sqrt(co
	0x6c, 0x6f, 0x72, 0x2a, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x20, 0x62, 0x68, 0x29, // lor*(color + bh)
	0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x2a, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, //  + 1.0))*inv_2bh
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x20, // ;.}.float sRGB( 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // float f).{.float
	0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, //  s;.if (f <= 0.0
	0x30, 0x33, 0x31, 0x33, 0x30, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, // 031308).s = 12.9
	0x32, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, // 2 * f;.else.s = 
	0x31, 0x2e, 0x30, 0x35, 0x35, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x31, // 1.055 * pow(f, 1
	0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x34, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x3b, // .0/2.4) - 0.055;
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // .return s;.}.flo
	0x61, 0x74, 0x20, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // at Rec709( float
	0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, //  f).{.float s;.i
	0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, 0x29, 0x0a, 0x73, // f (f <= 0.018).s
	0x20, 0x3d, 0x20, 0x34, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, //  = 4.5 * f;.else
	0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, // .s = 1.099 * pow
	0x28, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x39, // (f, 0.45) - 0.09
	0x39, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // 9;.return s;.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x66, 0x6c, // loat FBGamma( fl
	0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // oat color).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, // urn sRGB(color);
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, // .}.vec2 FBGamma(
	0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, //  vec2 color).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, // eturn vec2(FBGam
	0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, // ma(color.x),FBGa
	0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, // mma(color.y));.}
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, // .vec3 FBGamma( v
	0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // ec3 color).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, // urn vec3(FBGamma
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, // (color.x),FBGamm
	0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, // a(color.y),FBGam
	0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // ma(color.z));.}.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x32, 0x32, 0x28, 0x20, // vec3 FBGamma22( 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // vec3 color).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, // turn vec3(pow(co
	0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, // lor.x, 1.0/2.2),
	0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, 0x30, // pow(color.y, 1.0
	0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, // /2.2),pow(color.
	0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // z, 1.0/2.2));.}.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, // float FBToneMap(
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, //  float l).{.retu
	0x72, 0x6e, 0x20, 0x6c, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, // rn l * ((l*0.25 
	0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, // + 1.0) / (l + 1.
	0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x54, 0x6f, // 0));.}.vec2 FBTo
	0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // neMap( vec2 colo
	0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, // r).{.float l = d
	0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, // ot(color,vec2(0.
	0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, // 176204+0.0108109
	0x2a, 0x30, 0x2e, 0x35, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2b, 0x30, 0x2e, // *0.5,0.812985+0.
	0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x3b, 0x0a, 0x72, // 0108109*0.5));.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, // eturn color * ((
	0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, // l*0.25 + 1.0) / 
	0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // (l + 1.0));.}.ve
	0x63, 0x33, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, // c3 FBToneMap( ve
	0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // c3 color).{.floa
	0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, // t l = dot(color,
	0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2c, 0x30, 0x2e, // vec3(0.176204,0.
	0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2c, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, // 812985,0.0108109
	0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // ));.return color
	0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, //  * ((l*0.25 + 1.
	0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, // 0) / (l + 1.0));
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, // .}.vec4 Additive
	0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, // ( vec4 cBase, ve
	0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // c4 cBlend, float
	0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, //  percent).{.retu
	0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2b, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // rn cBase + cBlen
	0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // d*percent;.}.vec
	0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // 3 Screen ( vec3 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, // cBase, vec3 cBle
	0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, // nd).{.return 1.0
	0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, //  - (1.0 - cBase)
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, //  * (1.0 - cBlend
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, // );.}.vec4 Screen
	0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, //  ( vec4 cBase, v
	0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // ec4 cBlend).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, // turn 1.0 - (1.0 
	0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, // - cBase) * (1.0 
	0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // - cBlend);.}.vec
	0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, // 3 ScreenHDR ( ve
	0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, // c3 cBase, vec3 c
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // Blend).{.return 
	0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, // max(1.0 - (1.0 -
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, //  cBase) * (1.0 -
	0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, //  cBlend), vec3(0
	0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // .,0.,0.));.}.vec
	0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, // 4 ScreenHDR ( ve
	0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, // c4 cBase, vec4 c
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // Blend).{.return 
	0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, // max(1.0 - (1.0 -
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, //  cBase) * (1.0 -
	0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, //  cBlend), vec4(0
	0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // .,0.,0.,0.));.}.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x20, 0x28, 0x20, // vec4 Multiply ( 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // vec4 cBase, vec4
	0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, //  cBlend, float p
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // ercent).{.return
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2a, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, //  cBase * cBlend*
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, // percent;.}.vec4 
	0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, // Overlay ( vec4 c
	0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // Base, vec4 cBlen
	0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, // d).{.vec4 cNew =
	0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, //  step(0.5, cBase
	0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, // );.cNew = mix(cB
	0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, // ase*cBlend*2.0, 
	0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, // 1.0-2.0*(1.0-cBa
	0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, // se)*(1.0-cBlend)
	0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // , cNew);.return 
	0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, // cNew;.}.vec4 Ove
	0x72, 0x6c, 0x61, 0x79, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, // rlayHDR ( vec4 c
	0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // Base, vec4 cBlen
	0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, // d).{.vec4 cNew =
	0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, //  step(0.5, cBase
	0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x6d, 0x69, // );.cNew = max(mi
	0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, // x(cBase*cBlend*2
	0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, // .0, 1.0-2.0*(1.0
	0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, // -cBase)*(1.0-cBl
	0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, // end), cNew), vec
	0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, // 4(0.,0.,0.,0.));
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, // .return cNew;.}.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x73, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, // vec3 cos_hemisph
	0x65, 0x72, 0x65, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, // ere_sample( vec2
	0x20, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x68, 0x69, 0x20, //  t).{.float phi 
	0x3d, 0x20, 0x74, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x28, 0x32, 0x2e, 0x30, 0x2a, 0x33, 0x2e, 0x31, // = t.y * (2.0*3.1
	0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, // 4159265358979323
	0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x3b, // 84626433832795);
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, // .float cosTheta 
	0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x74, 0x2e, 0x78, // = sqrt(1.0 - t.x
	0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, // );.float sinThet
	0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, // a = sqrt(t.x);.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x70, 0x2c, 0x63, 0x70, 0x3b, 0x0a, 0x7b, 0x73, 0x70, 0x3d, // loat sp,cp;.{sp=
	0x73, 0x69, 0x6e, 0x28, 0x70, 0x68, 0x69, 0x29, 0x3b, 0x63, 0x70, 0x3d, 0x63, 0x6f, 0x73, 0x28, // sin(phi);cp=cos(
	0x70, 0x68, 0x69, 0x29, 0x3b, 0x7d, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // phi);};.return v
	0x65, 0x63, 0x33, 0x28, 0x63, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, // ec3(cp * sinThet
	0x61, 0x2c, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x73, 0x70, 0x20, // a, cosTheta, sp 
	0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // * sinTheta);.}.v
	0x65, 0x63, 0x33, 0x20, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x76, 0x65, // ec3 rotate_to_ve
	0x63, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, // ctor_upper( vec3
	0x20, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, //  vec, vec3 norma
	0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, // l).{.if(normal.y
	0x20, 0x3e, 0x20, 0x2d, 0x30, 0x2e, 0x39, 0x39, 0x39, 0x39, 0x39, 0x29, 0x0a, 0x7b, 0x0a, 0x66, //  > -0.99999).{.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x28, 0x31, 0x2e, // loat h = 1.0/(1.
	0x30, 0x2b, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, // 0+normal.y);.flo
	0x61, 0x74, 0x20, 0x68, 0x7a, 0x20, 0x3d, 0x20, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, // at hz = h*normal
	0x2e, 0x7a, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x3d, 0x20, // .z;.float hzx = 
	0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x3b, 0x0a, 0x72, 0x65, 0x74, // hz*normal.x;.ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, // urn vec3(.vec.x 
	0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x7a, 0x2a, 0x6e, // * (normal.y+hz*n
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x29, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x79, // ormal.z) + vec.y
	0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, //  * normal.x - ve
	0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, // c.z * hzx,.vec.y
	0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x2d, 0x20, 0x76, 0x65, //  * normal.y - ve
	0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, // c.x * normal.x -
	0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, //  vec.z * normal.
	0x7a, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, // z,.vec.y * norma
	0x6c, 0x2e, 0x7a, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x68, 0x7a, // l.z - vec.x * hz
	0x78, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, // x + vec.z * (nor
	0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, // mal.y+h*normal.x
	0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, // *normal.x));.}.e
	0x6c, 0x73, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x2d, 0x76, 0x65, 0x63, 0x3b, // lse return -vec;
	0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // .}.uniform vec4 
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x53, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, // Stereo_Saturatio
	0x6e, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // n;.uniform vec4 
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, // Stereo_MS_ZPD_YA
	0x78, 0x69, 0x73, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, // xis;.uniform sam
	0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x20, 0x74, 0x65, 0x78, 0x5f, // pler2DArray tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, // stereo_fb;.unifo
	0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, // rm sampler2DArra
	0x79, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, // y tex_stereo_dep
	0x74, 0x68, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, // th;.uniform vec4
	0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, 0x76, 0x65, 0x63, //  w_h_height;.vec
	0x33, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, // 3 gatherEyeColor
	0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x69, 0x73, // (vec2 u, bool is
	0x4c, 0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, // Left).{.return t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x6f, 0x64, // exture2DArrayLod
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, // (tex_stereo_fb, 
	0x76, 0x65, 0x63, 0x33, 0x28, 0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, 0x20, 0x69, // vec3(u.x, u.y, i
	0x73, 0x4c, 0x65, 0x66, 0x74, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x30, 0x20, 0x3a, 0x20, 0x31, 0x2e, // sLeft ? 0.0 : 1.
	0x30, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // 0), 0.).rgb;.}.v
	0x6f, 0x69, 0x64, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x69, // oid gatherLeftRi
	0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, // ghtColors(vec2 u
	0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x63, 0x6f, 0x6c, 0x2c, // , out vec3 lcol,
	0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x6f, 0x6c, 0x29, 0x0a, //  out vec3 rcol).
	0x7b, 0x0a, 0x6c, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // {.lcol = texture
	0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, // 2DArrayLod(tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x75, // tereo_fb, vec3(u
	0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2c, 0x20, 0x30, 0x2e, // .x, u.y, 0.), 0.
	0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x72, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, // ).xyz;.rcol = te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x6f, 0x64, 0x28, // xture2DArrayLod(
	0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x76, // tex_stereo_fb, v
	0x65, 0x63, 0x33, 0x28, 0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, // ec3(u.x, u.y, 1.
	0x29, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, // ), 0.).xyz;.}.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // iform mat4 Stere
	0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, // o_LeftMat;.unifo
	0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, // rm mat4 Stereo_R
	0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // ightMat;.uniform
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, //  vec4 Stereo_Lef
	0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, // tLuminance_Gamma
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, // ;.uniform vec4 S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, // tereo_RightLumin
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x3b, 0x0a, 0x76, // ance_DynDesat;.v
	0x6f, 0x69, 0x64, 0x20, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x65, 0x73, 0x61, 0x74, // oid DynamicDesat
	0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, // Anaglyph( vec3 l
	0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // Col, vec3 rCol, 
	0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, // out vec3 lDesatC
	0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x44, 0x65, // ol, out vec3 rDe
	0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // satCol).{.float 
	0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, // left2LeftLum = d
	0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // ot(lCol, Stereo_
	0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, // LeftLuminance_Ga
	0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // mma.xyz);.float 
	0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, // left2RightLum = 
	0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // dot(lCol, Stereo
	0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, // _RightLuminance_
	0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, // DynDesat.xyz);.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, // loat right2LeftL
	0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, // um = dot(rCol, S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, // tereo_LeftLumina
	0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, // nce_Gamma.xyz);.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, // float right2Righ
	0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, // tLum = dot(rCol,
	0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, //  Stereo_RightLum
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, // inance_DynDesat.
	0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, // xyz);.float left
	0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, // Lum = left2LeftL
	0x75, 0x6d, 0x20, 0x2b, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, // um + left2RightL
	0x75, 0x6d, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, // um;.float rightL
	0x75, 0x6d, 0x20, 0x3d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, // um = right2LeftL
	0x75, 0x6d, 0x20, 0x2b, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, // um + right2Right
	0x4c, 0x75, 0x6d, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, // Lum;.float leftD
	0x65, 0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, // esat = Stereo_Ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, // ghtLuminance_Dyn
	0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x6c, // Desat.w * abs((l
	0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x6c, 0x65, // eft2LeftLum - le
	0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, // ft2RightLum) / (
	0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, // leftLum + 0.0001
	0x29, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, // ));.float rightD
	0x65, 0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, // esat = Stereo_Ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, // ghtLuminance_Dyn
	0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x72, // Desat.w * abs((r
	0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x72, // ight2LeftLum - r
	0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, // ight2RightLum) /
	0x20, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, //  (rightLum + 0.0
	0x30, 0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, // 001));.lDesatCol
	0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, //  = mix(lCol, vec
	0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x29, // 3_splat(leftLum)
	0x2c, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x72, 0x44, // , leftDesat);.rD
	0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x72, 0x43, // esatCol = mix(rC
	0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x72, // ol, vec3_splat(r
	0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, // ightLum), rightD
	0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x4c, 0x69, // esat);.}.vec3 Li
	0x6e, 0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, // nearAnaglyph( ve
	0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, // c3 lCol, vec3 rC
	0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // ol).{.vec3 color
	0x20, 0x3d, 0x20, 0x28, 0x28, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x6c, 0x43, 0x6f, 0x6c, //  = (( (vec4(lCol
	0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // , 1.)) * (Stereo
	0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x20, // _LeftMat) ) + ( 
	0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, // (vec4(rCol, 1.))
	0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, //  * (Stereo_Right
	0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x72, 0x65, 0x74, // Mat) )).rgb;.ret
	0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, // urn color;.}.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // form vec4 Stereo
	0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, // _DeghostGamma;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, // niform mat4 Ster
	0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, // eo_DeghostFilter
	0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x6e, // ;.vec3 DeghostAn
	0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, // aglyph( vec3 lCo
	0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, // l, vec3 rCol).{.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, 0x6e, // vec3 color = Lin
	0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, // earAnaglyph(lCol
	0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // , rCol);.return 
	0x28, 0x20, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x53, 0x74, // ( (pow(color, St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, // ereo_DeghostGamm
	0x61, 0x2e, 0x72, 0x67, 0x62, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, // a.rgb)) * (mat3(
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, // Stereo_DeghostFi
	0x6c, 0x74, 0x65, 0x72, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, // lter[0].xyz, Ste
	0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, // reo_DeghostFilte
	0x72, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // r[1].xyz, Stereo
	0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x32, // _DeghostFilter[2
	0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, // ].xyz)) );.}.voi
	0x64, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // d main().{.vec3 
	0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x3b, 0x0a, 0x67, 0x61, 0x74, 0x68, // lCol, rCol;.gath
	0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, // erLeftRightColor
	0x73, 0x28, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2c, 0x20, 0x6c, // s(v_texcoord0, l
	0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x6c, 0x43, 0x6f, 0x6c, // Col, rCol);.lCol
	0x20, 0x3d, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x6c, 0x43, 0x6f, 0x6c, //  = InvGamma(lCol
	0x29, 0x3b, 0x0a, 0x72, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, // );.rCol = InvGam
	0x6d, 0x61, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, // ma(rCol);.vec3 l
	0x43, 0x6f, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x44, 0x65, // ColDesat, rColDe
	0x73, 0x61, 0x74, 0x3b, 0x0a, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x65, 0x73, 0x61, // sat;.DynamicDesa
	0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // tAnaglyph(lCol, 
	0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2c, // rCol, lColDesat,
	0x20, 0x72, 0x43, 0x6f, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x6c, 0x43, 0x6f, //  rColDesat);.lCo
	0x6c, 0x20, 0x3d, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x3b, 0x0a, 0x72, // l = lColDesat;.r
	0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x3b, // Col = rColDesat;
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, // .vec3 color = Li
	0x6e, 0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, // nearAnaglyph(lCo
	0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, // l, rCol);.bgfx_F
	0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, // ragColor = vec4(
	0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x2c, 0x20, // FBGamma(color), 
	0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x00,                                           // 1.0);.}..
};
static const uint8_t fs_pp_stereo_anaglyph_lin_srgb_dyndesat_st_glsl[8802] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4f, 0x22, // FSH.Jc._......O"
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x34, 0x34, 0x30, 0x0a, 0x23, // ..#version 440.#
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x47, 0x4c, 0x5f, 0x45, 0x58, 0x54, // extension GL_EXT
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x20, 0x3a, // _texture_array :
	0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x0a, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, //  enable.out vec4
	0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, //  bgfx_FragColor;
	0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, // .#define gl_Frag
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, // Color bgfx_FragC
	0x6f, 0x6c, 0x6f, 0x72, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, // olor.#define tex
	0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ture2D          
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, // texture.#define 
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, // texture2DLod    
	0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, //    textureLod.#d
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x47, // efine texture2DG
	0x72, 0x61, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // rad      texture
	0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, // Grad.#define tex
	0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, // ture2DProjLod   
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x4c, 0x6f, 0x64, 0x0a, 0x23, // textureProjLod.#
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, // define texture2D
	0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // ProjGrad  textur
	0x65, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, // eProjGrad.#defin
	0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x4c, 0x6f, 0x64, // e textureCubeLod
	0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x0a, //      textureLod.
	0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, // #define textureC
	0x75, 0x62, 0x65, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, // ubeGrad    textu
	0x72, 0x65, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, // reGrad.#define t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x33, 0x44, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // exture3D        
	0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, //   texture.#defin
	0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x4c, 0x6f, 0x64, 0x4f, 0x66, // e texture2DLodOf
	0x66, 0x73, 0x65, 0x74, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x4f, // fset textureLodO
	0x66, 0x66, 0x73, 0x65, 0x74, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x61, 0x74, // ffset.#define at
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, // tribute in.#defi
	0x6e, 0x65, 0x20, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, // ne varying in.#d
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x62, 0x67, 0x66, 0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, // efine bgfxShadow
	0x32, 0x44, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, // 2D(_sampler, _co
	0x6f, 0x72, 0x64, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, // ord)     vec4_sp
	0x6c, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x5f, 0x73, 0x61, 0x6d, // lat(texture(_sam
	0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x29, 0x0a, // pler, _coord) ).
	0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x62, 0x67, 0x66, 0x78, 0x53, 0x68, 0x61, 0x64, // #define bgfxShad
	0x6f, 0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // ow2DProj(_sample
	0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, // r, _coord) vec4_
	0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, // splat(texturePro
	0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, // j(_sampler, _coo
	0x72, 0x64, 0x29, 0x20, 0x29, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x66, 0x6c, // rd) ).varying fl
	0x6f, 0x61, 0x74, 0x20, 0x76, 0x5f, 0x65, 0x79, 0x65, 0x3b, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, // oat v_eye;.varyi
	0x6e, 0x67, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, // ng vec2 v_texcoo
	0x72, 0x64, 0x30, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, // rd0;.vec3 instMu
	0x6c, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, // l(vec3 _vec, mat
	0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // 3 _mtx) { return
	0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, //  ( (_vec) * (_mt
	0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, // x) ); }.vec3 ins
	0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, // tMul(mat3 _mtx, 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // vec3 _vec) { ret
	0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, // urn ( (_mtx) * (
	0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, // _vec) ); }.vec4 
	0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, // instMul(vec4 _ve
	0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, // c, mat4 _mtx) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, // return ( (_vec) 
	0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, // * (_mtx) ); }.ve
	0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x20, // c4 instMul(mat4 
	0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, // _mtx, vec4 _vec)
	0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, //  { return ( (_mt
	0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, // x) * (_vec) ); }
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, 0x70, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, // .float rcp(float
	0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, //  _a) { return 1.
	0x30, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x63, 0x70, // 0/_a; }.vec2 rcp
	0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // (vec2 _a) { retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, // rn vec2(1.0)/_a;
	0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x33, //  }.vec3 rcp(vec3
	0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, //  _a) { return ve
	0x63, 0x33, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, // c3(1.0)/_a; }.ve
	0x63, 0x34, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x61, 0x29, 0x20, // c4 rcp(vec4 _a) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x31, 0x2e, // { return vec4(1.
	0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x65, // 0)/_a; }.vec2 ve
	0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, // c2_splat(float _
	0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, // x) { return vec2
	0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, // (_x, _x); }.vec3
	0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, //  vec3_splat(floa
	0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // t _x) { return v
	0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, // ec3(_x, _x, _x);
	0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, //  }.vec4 vec4_spl
	0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, // at(float _x) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, // eturn vec4(_x, _
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, // x, _x, _x); }.uv
	0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, // ec2 uvec2_splat(
	0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, // uint _x) { retur
	0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, // n uvec2(_x, _x);
	0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, //  }.uvec3 uvec3_s
	0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, // plat(uint _x) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, // return uvec3(_x,
	0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, //  _x, _x); }.uvec
	0x34, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, // 4 uvec4_splat(ui
	0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // nt _x) { return 
	0x75, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, // uvec4(_x, _x, _x
	0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, // , _x); }.mat4 mt
	0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, // xFromRows(vec4 _
	0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // 0, vec4 _1, vec4
	0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, //  _2, vec4 _3).{.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, // return transpose
	0x28, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, // (mat4(_0, _1, _2
	0x2c, 0x20, 0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, // , _3) );.}.mat4 
	0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, // mtxFromCols(vec4
	0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, //  _0, vec4 _1, ve
	0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, // c4 _2, vec4 _3).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, // {.return mat4(_0
	0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x3b, 0x0a, 0x7d, // , _1, _2, _3);.}
	0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, // .mat3 mtxFromRow
	0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // s(vec3 _0, vec3 
	0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, // _1, vec3 _2).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, // eturn transpose(
	0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, // mat3(_0, _1, _2)
	0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, //  );.}.mat3 mtxFr
	0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, // omCols(vec3 _0, 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, // vec3 _1, vec3 _2
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x28, // ).{.return mat3(
	0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, // _0, _1, _2);.}.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, // niform vec4 u_vi
	0x65, 0x77, 0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // ewRect;.uniform 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x54, 0x65, 0x78, 0x65, 0x6c, // vec4 u_viewTexel
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, // ;.uniform mat4 u
	0x5f, 0x76, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, // _view;.uniform m
	0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, // at4 u_invView;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x70, 0x72, // niform mat4 u_pr
	0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, // oj;.uniform mat4
	0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, //  u_invProj;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x50, // orm mat4 u_viewP
	0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, // roj;.uniform mat
	0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, // 4 u_invViewProj;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, // .uniform mat4 u_
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, // model[32];.unifo
	0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, // rm mat4 u_modelV
	0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, // iew;.uniform mat
	0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, // 4 u_modelViewPro
	0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // j;.uniform vec4 
	0x75, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x66, 0x34, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, // u_alphaRef4;.flo
	0x61, 0x74, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, // at sqr( float v)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, // .{.return v*v;.}
	0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, // .vec2 sqr( vec2 
	0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, // v).{.return v*v;
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, // .}.vec3 sqr( vec
	0x33, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, // 3 v).{.return v*
	0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6d, 0x75, 0x6c, 0x5f, 0x77, 0x31, // v;.}.vec3 mul_w1
	0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, // ( vec3 v, mat4 m
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2e, 0x78, 0x2a, 0x6d, // ).{.return v.x*m
	0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x79, 0x2a, 0x6d, // [0].xyz + (v.y*m
	0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x7a, 0x2a, 0x6d, // [1].xyz + (v.z*m
	0x5b, 0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x6d, 0x5b, 0x33, 0x5d, 0x2e, 0x78, // [2].xyz + m[3].x
	0x79, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x63, // yz));.}.float ac
	0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, // os_approx_divPI(
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, //  float v).{.floa
	0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, // t x = abs(v);.if
	0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, // (1. - x <= 0.000
	0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, // 06103515625).ret
	0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, // urn (v >= 0.) ? 
	0x30, 0x2e, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, // 0. : 1.;.float r
	0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, // es = ((-0.155972
	0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, // /3.1415926535897
	0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, // 9323846264338327
	0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, // 95) * x + (1.564
	0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, // 67/3.14159265358
	0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, // 9793238462643383
	0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, // 2795) ) * sqrt(1
	0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // . - x);.return (
	0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, // v >= 0.) ? res :
	0x20, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, //  1. - res;.}.flo
	0x61, 0x74, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, // at atan2_approx_
	0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x79, 0x2c, // div2PI( float y,
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, //  float x).{.floa
	0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x79, 0x29, // t abs_y = abs(y)
	0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3d, 0x20, // ;.float abs_x = 
	0x61, 0x62, 0x73, 0x28, 0x78, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, // abs(x);.if(abs_x
	0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, //  <= 0.0000610351
	0x35, 0x36, 0x32, 0x35, 0x20, 0x26, 0x26, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3c, 0x3d, // 5625 && abs_y <=
	0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, //  0.0000610351562
	0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x30, 0x2e, 0x3b, 0x0a, 0x66, 0x6c, // 5).return 0.;.fl
	0x6f, 0x61, 0x74, 0x20, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2d, // oat r = (abs_x -
	0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, //  abs_y) / (abs_x
	0x20, 0x2b, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, //  + abs_y);.float
	0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, //  angle = ((x < 0
	0x2e, 0x29, 0x20, 0x3f, 0x20, 0x28, 0x33, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x20, 0x3a, 0x20, 0x28, // .) ? (3./8.) : (
	0x31, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x29, 0x0a, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x32, 0x31, 0x31, // 1./8.)).+ (0.211
	0x38, 0x36, 0x38, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, // 868 /(2.*3.14159
	0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, // 2653589793238462
	0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x72, 0x20, // 6433832795) * r 
	0x2a, 0x20, 0x72, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x39, 0x38, 0x37, 0x33, 0x30, 0x35, 0x20, 0x2f, // * r - 0.987305 /
	0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, // (2.*3.1415926535
	0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, // 8979323846264338
	0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, // 32795)) * ((x < 
	0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x72, 0x20, 0x3a, 0x20, 0x72, 0x29, 0x3b, 0x0a, 0x72, // 0.) ? -r : r);.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x79, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, // eturn (y < 0.) ?
	0x20, 0x2d, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3a, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x3b, //  -angle : angle;
	0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x73, 0x69, 0x6e, 0x5f, 0x61, 0x70, // .}.float asin_ap
	0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, // prox_divPI( floa
	0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, // t v).{.float x =
	0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, //  abs(v);.if(1. -
	0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, //  x <= 0.00006103
	0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // 515625).return (
	0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x3a, // v >= 0.) ? 0.5 :
	0x20, 0x2d, 0x30, 0x2e, 0x35, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, //  -0.5;.float res
	0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, //  = ((-0.155972/3
	0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, // .141592653589793
	0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, // 2384626433832795
	0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, // ) * x + (1.56467
	0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, // /3.1415926535897
	0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, // 9323846264338327
	0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, // 95) ) * sqrt(1. 
	0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, // - x);.return (v 
	0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x2d, 0x20, 0x72, // >= 0.) ? 0.5 - r
	0x65, 0x73, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x65, 0x73, 0x3b, // es : -0.5 + res;
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x61, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x65, // .}.vec2 ray_to_e
	0x71, 0x75, 0x69, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x75, // quirectangular_u
	0x76, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x61, 0x79, 0x29, 0x0a, 0x7b, 0x0a, 0x72, // v( vec3 ray).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x0a, 0x30, 0x2e, 0x35, 0x20, // eturn vec2(.0.5 
	0x2b, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, // + atan2_approx_d
	0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x79, 0x2c, 0x20, 0x72, 0x61, 0x79, // iv2PI(ray.y, ray
	0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, // .x),.acos_approx
	0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, // _divPI(ray.z));.
	0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, // }.float InvsRGB(
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, //  float color).{.
	0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, // if (color <= 0.0
	0x34, 0x30, 0x34, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, // 4045).return col
	0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x29, // or * (1.0/12.92)
	0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, // ;.else.return po
	0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, // w(color * (1.0/1
	0x2e, 0x30, 0x35, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x2f, 0x31, // .055) + (0.055/1
	0x2e, 0x30, 0x35, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // .055), 2.4);.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x20, // loat InvRec709( 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, // float color).{.i
	0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x38, // f (color <= 0.08
	0x31, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, // 1).return color 
	0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x34, 0x2e, 0x35, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, // * (1.0/4.5);.els
	0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, // e.return pow(col
	0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, // or * (1.0/1.099)
	0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, //  + (0.099/1.099)
	0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // , 1.0/0.45);.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x66, // loat InvGamma( f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // loat color).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, // turn InvsRGB(col
	0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x47, // or);.}.vec3 InvG
	0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // amma( vec3 color
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, // ).{.return vec3(
	0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, // InvGamma(color.x
	0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // ),InvGamma(color
	0x2e, 0x79, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, // .y),InvGamma(col
	0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, // or.z));.}.vec3 I
	0x6e, 0x76, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // nvToneMap( vec3 
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x69, // color).{.float i
	0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x30, 0x2e, 0x35, 0x2f, 0x30, 0x2e, 0x32, // nv_2bh = 0.5/0.2
	0x35, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x34, 0x2e, // 5;.float bh = 4.
	0x30, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2d, 0x20, 0x32, 0x2e, 0x30, 0x3b, 0x0a, 0x72, 0x65, // 0*0.25 - 2.0;.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2d, 0x20, 0x31, 0x2e, // turn (color - 1.
	0x30, 0x20, 0x2b, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2a, 0x28, // 0 + sqrt(color*(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x20, 0x62, 0x68, 0x29, 0x20, 0x2b, 0x20, 0x31, 0x2e, // color + bh) + 1.
	0x30, 0x29, 0x29, 0x2a, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // 0))*inv_2bh;.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // loat sRGB( float
	0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, //  f).{.float s;.i
	0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x33, 0x31, 0x33, 0x30, // f (f <= 0.003130
	0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x20, 0x2a, 0x20, 0x66, // 8).s = 12.92 * f
	0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x35, 0x35, // ;.else.s = 1.055
	0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, //  * pow(f, 1.0/2.
	0x34, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // 4) - 0.055;.retu
	0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x52, 0x65, // rn s;.}.float Re
	0x63, 0x37, 0x30, 0x39, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, // c709( float f).{
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, // .float s;.if (f 
	0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x34, 0x2e, // <= 0.018).s = 4.
	0x35, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, // 5 * f;.else.s = 
	0x31, 0x2e, 0x30, 0x39, 0x39, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x30, // 1.099 * pow(f, 0
	0x2e, 0x34, 0x35, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x3b, 0x0a, 0x72, 0x65, // .45) - 0.099;.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // turn s;.}.float 
	0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, // FBGamma( float c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, // olor).{.return s
	0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // RGB(color);.}.ve
	0x63, 0x32, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, // c2 FBGamma( vec2
	0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, //  color).{.return
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, //  vec2(FBGamma(co
	0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, // lor.x),FBGamma(c
	0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, // olor.y));.}.vec3
	0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, //  FBGamma( vec3 c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // olor).{.return v
	0x65, 0x63, 0x33, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // ec3(FBGamma(colo
	0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, // r.x),FBGamma(col
	0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, // or.y),FBGamma(co
	0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // lor.z));.}.vec3 
	0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x32, 0x32, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // FBGamma22( vec3 
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // color).{.return 
	0x76, 0x65, 0x63, 0x33, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, // vec3(pow(color.x
	0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, // , 1.0/2.2),pow(c
	0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, // olor.y, 1.0/2.2)
	0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x2c, 0x20, 0x31, 0x2e, // ,pow(color.z, 1.
	0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // 0/2.2));.}.float
	0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, //  FBToneMap( floa
	0x74, 0x20, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6c, 0x20, // t l).{.return l 
	0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, // * ((l*0.25 + 1.0
	0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, // ) / (l + 1.0));.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, // }.vec2 FBToneMap
	0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, // ( vec2 color).{.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, // float l = dot(co
	0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, // lor,vec2(0.17620
	0x34, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x2c, // 4+0.0108109*0.5,
	0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, // 0.812985+0.01081
	0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // 09*0.5));.return
	0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, //  color * ((l*0.2
	0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, // 5 + 1.0) / (l + 
	0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, // 1.0));.}.vec3 FB
	0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, // ToneMap( vec3 co
	0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, // lor).{.float l =
	0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x33, 0x28, //  dot(color,vec3(
	0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, // 0.176204,0.81298
	0x35, 0x2c, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x29, 0x29, 0x3b, 0x0a, 0x72, // 5,0.0108109));.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, // eturn color * ((
	0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, // l*0.25 + 1.0) / 
	0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // (l + 1.0));.}.ve
	0x63, 0x34, 0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x28, 0x20, 0x76, 0x65, 0x63, // c4 Additive( vec
	0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // 4 cBase, vec4 cB
	0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, // lend, float perc
	0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, // ent).{.return cB
	0x61, 0x73, 0x65, 0x20, 0x2b, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, // ase + cBlend*per
	0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, // cent;.}.vec3 Scr
	0x65, 0x65, 0x6e, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, // een ( vec3 cBase
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, // , vec3 cBlend).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, // .return 1.0 - (1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, // .0 - cBase) * (1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // .0 - cBlend);.}.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x20, 0x76, 0x65, // vec4 Screen ( ve
	0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, // c4 cBase, vec4 c
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // Blend).{.return 
	0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, // 1.0 - (1.0 - cBa
	0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, // se) * (1.0 - cBl
	0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, // end);.}.vec3 Scr
	0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, // eenHDR ( vec3 cB
	0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, // ase, vec3 cBlend
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, // ).{.return max(1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, // .0 - (1.0 - cBas
	0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, // e) * (1.0 - cBle
	0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, // nd), vec3(0.,0.,
	0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, // 0.));.}.vec4 Scr
	0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // eenHDR ( vec4 cB
	0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, // ase, vec4 cBlend
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, // ).{.return max(1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, // .0 - (1.0 - cBas
	0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, // e) * (1.0 - cBle
	0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, // nd), vec4(0.,0.,
	0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, // 0.,0.));.}.vec4 
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // Multiply ( vec4 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, // cBase, vec4 cBle
	0x6e, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, // nd, float percen
	0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, // t).{.return cBas
	0x65, 0x20, 0x2a, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, // e * cBlend*perce
	0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, // nt;.}.vec4 Overl
	0x61, 0x79, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, // ay ( vec4 cBase,
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, //  vec4 cBlend).{.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, // vec4 cNew = step
	0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, // (0.5, cBase);.cN
	0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, // ew = mix(cBase*c
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, // Blend*2.0, 1.0-2
	0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, // .0*(1.0-cBase)*(
	0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, // 1.0-cBlend), cNe
	0x77, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, // w);.return cNew;
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x48, // .}.vec4 OverlayH
	0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, // DR ( vec4 cBase,
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, //  vec4 cBlend).{.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, // vec4 cNew = step
	0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, // (0.5, cBase);.cN
	0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, // ew = max(mix(cBa
	0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, // se*cBlend*2.0, 1
	0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, // .0-2.0*(1.0-cBas
	0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, // e)*(1.0-cBlend),
	0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, //  cNew), vec4(0.,
	0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // 0.,0.,0.));.retu
	0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // rn cNew;.}.vec3 
	0x63, 0x6f, 0x73, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x5f, 0x73, // cos_hemisphere_s
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x29, 0x0a, 0x7b, // ample( vec2 t).{
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x68, 0x69, 0x20, 0x3d, 0x20, 0x74, 0x2e, 0x79, // .float phi = t.y
	0x20, 0x2a, 0x20, 0x28, 0x32, 0x2e, 0x30, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, //  * (2.0*3.141592
	0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, // 6535897932384626
	0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // 433832795);.floa
	0x74, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, // t cosTheta = sqr
	0x74, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, // t(1.0 - t.x);.fl
	0x6f, 0x61, 0x74, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, // oat sinTheta = s
	0x71, 0x72, 0x74, 0x28, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // qrt(t.x);.float 
	0x73, 0x70, 0x2c, 0x63, 0x70, 0x3b, 0x0a, 0x7b, 0x73, 0x70, 0x3d, 0x73, 0x69, 0x6e, 0x28, 0x70, // sp,cp;.{sp=sin(p
	0x68, 0x69, 0x29, 0x3b, 0x63, 0x70, 0x3d, 0x63, 0x6f, 0x73, 0x28, 0x70, 0x68, 0x69, 0x29, 0x3b, // hi);cp=cos(phi);
	0x7d, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x63, // };.return vec3(c
	0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x63, 0x6f, // p * sinTheta, co
	0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x73, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, // sTheta, sp * sin
	0x54, 0x68, 0x65, 0x74, 0x61, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, // Theta);.}.vec3 r
	0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, // otate_to_vector_
	0x75, 0x70, 0x70, 0x65, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x2c, // upper( vec3 vec,
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, //  vec3 normal).{.
	0x69, 0x66, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x3e, 0x20, 0x2d, 0x30, // if(normal.y > -0
	0x2e, 0x39, 0x39, 0x39, 0x39, 0x39, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // .99999).{.float 
	0x68, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x28, 0x31, 0x2e, 0x30, 0x2b, 0x6e, 0x6f, 0x72, // h = 1.0/(1.0+nor
	0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, // mal.y);.float hz
	0x20, 0x3d, 0x20, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x3b, 0x0a, 0x66, //  = h*normal.z;.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x3d, 0x20, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, // loat hzx = hz*no
	0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // rmal.x;.return v
	0x65, 0x63, 0x33, 0x28, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, // ec3(.vec.x * (no
	0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, // rmal.y+hz*normal
	0x2e, 0x7a, 0x29, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, // .z) + vec.y * no
	0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, // rmal.x - vec.z *
	0x20, 0x68, 0x7a, 0x78, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, //  hzx,.vec.y * no
	0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, // rmal.y - vec.x *
	0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, //  normal.x - vec.
	0x7a, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x2c, 0x0a, 0x76, 0x65, // z * normal.z,.ve
	0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x20, 0x2d, // c.y * normal.z -
	0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x2b, 0x20, 0x76, //  vec.x * hzx + v
	0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, // ec.z * (normal.y
	0x2b, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, // +h*normal.x*norm
	0x61, 0x6c, 0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x72, // al.x));.}.else r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x2d, 0x76, 0x65, 0x63, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, // eturn -vec;.}.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // iform vec4 Stere
	0x6f, 0x5f, 0x53, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x0a, 0x75, 0x6e, // o_Saturation;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // iform vec4 Stere
	0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x3b, 0x0a, // o_MS_ZPD_YAxis;.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, // uniform sampler2
	0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // DArray tex_stere
	0x6f, 0x5f, 0x66, 0x62, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, // o_fb;.uniform sa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x20, 0x74, 0x65, 0x78, // mpler2DArray tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x3b, 0x0a, 0x75, // _stereo_depth;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x77, 0x5f, 0x68, 0x5f, // niform vec4 w_h_
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x67, 0x61, 0x74, // height;.vec3 gat
	0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x76, 0x65, 0x63, 0x32, // herEyeColor(vec2
	0x20, 0x75, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x29, //  u, bool isLeft)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // .{.return textur
	0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, // e2DArrayLod(tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, // stereo_fb, vec3(
	0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, 0x20, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, // u.x, u.y, isLeft
	0x20, 0x3f, 0x20, 0x30, 0x2e, 0x30, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x30, //  ? 0.0 : 1.0), 0
	0x2e, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x67, // .).rgb;.}.void g
	0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, // atherLeftRightCo
	0x6c, 0x6f, 0x72, 0x73, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x6f, 0x75, 0x74, // lors(vec2 u, out
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x63, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, //  vec3 lcol, out 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x6c, 0x63, 0x6f, // vec3 rcol).{.lco
	0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x41, 0x72, 0x72, // l = texture2DArr
	0x61, 0x79, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // ayLod(tex_stereo
	0x5f, 0x66, 0x62, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, // _fb, vec3(u.x, u
	0x2e, 0x79, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2e, 0x78, 0x79, 0x7a, // .y, 0.), 0.).xyz
	0x3b, 0x0a, 0x72, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // ;.rcol = texture
	0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, // 2DArrayLod(tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x75, // tereo_fb, vec3(u
	0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, 0x29, 0x2c, 0x20, 0x30, 0x2e, // .x, u.y, 1.), 0.
	0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // ).xyz;.}.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, //  mat4 Stereo_Lef
	0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, // tMat;.uniform ma
	0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, // t4 Stereo_RightM
	0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, // at;.uniform vec4
	0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, //  Stereo_LeftLumi
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, 0x6e, 0x69, // nance_Gamma;.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // form vec4 Stereo
	0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, // _RightLuminance_
	0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x3b, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x44, // DynDesat;.void D
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x65, 0x73, 0x61, 0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, // ynamicDesatAnagl
	0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // yph( vec3 lCol, 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, // vec3 rCol, out v
	0x65, 0x63, 0x33, 0x20, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, // ec3 lDesatCol, o
	0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, // ut vec3 rDesatCo
	0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, // l).{.float left2
	0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, // LeftLum = dot(lC
	0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, // ol, Stereo_LeftL
	0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, // uminance_Gamma.x
	0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, // yz);.float left2
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, // RightLum = dot(l
	0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, // Col, Stereo_Righ
	0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, // tLuminance_DynDe
	0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // sat.xyz);.float 
	0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, // right2LeftLum = 
	0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // dot(rCol, Stereo
	0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, // _LeftLuminance_G
	0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // amma.xyz);.float
	0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, //  right2RightLum 
	0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, // = dot(rCol, Ster
	0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, // eo_RightLuminanc
	0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, // e_DynDesat.xyz);
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, // .float leftLum =
	0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, //  left2LeftLum + 
	0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, 0x0a, 0x66, // left2RightLum;.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, // loat rightLum = 
	0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, // right2LeftLum + 
	0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, 0x0a, // right2RightLum;.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x20, // float leftDesat 
	0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // = Stereo_RightLu
	0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, // minance_DynDesat
	0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, // .w * abs((left2L
	0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, // eftLum - left2Ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, // ghtLum) / (leftL
	0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x66, // um + 0.0001));.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x20, // loat rightDesat 
	0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // = Stereo_RightLu
	0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, // minance_DynDesat
	0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, // .w * abs((right2
	0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, // LeftLum - right2
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x72, 0x69, 0x67, // RightLum) / (rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, 0x29, // htLum + 0.0001))
	0x3b, 0x0a, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, // ;.lDesatCol = mi
	0x78, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, // x(lCol, vec3_spl
	0x61, 0x74, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x66, // at(leftLum), lef
	0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x72, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, // tDesat);.rDesatC
	0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, // ol = mix(rCol, v
	0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, // ec3_splat(rightL
	0x75, 0x6d, 0x29, 0x2c, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, // um), rightDesat)
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x41, // ;.}.vec3 LinearA
	0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, // naglyph( vec3 lC
	0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, // ol, vec3 rCol).{
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x28, // .vec3 color = ((
	0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, 0x29, //  (vec4(lCol, 1.)
	0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, // ) * (Stereo_Left
	0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, // Mat) ) + ( (vec4
	0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, // (rCol, 1.)) * (S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, // tereo_RightMat) 
	0x29, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, // )).rgb;.return c
	0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // olor;.}.uniform 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, // vec4 Stereo_Degh
	0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // ostGamma;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, // m mat4 Stereo_De
	0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3b, 0x0a, 0x76, 0x65, 0x63, // ghostFilter;.vec
	0x33, 0x20, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, // 3 DeghostAnaglyp
	0x68, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, // h( vec3 lCol, ve
	0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // c3 rCol).{.vec3 
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x41, 0x6e, // color = LinearAn
	0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, // aglyph(lCol, rCo
	0x6c, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x70, 0x6f, // l);.return ( (po
	0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // w(color, Stereo_
	0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x72, 0x67, 0x62, // DeghostGamma.rgb
	0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, // )) * (mat3(Stere
	0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, // o_DeghostFilter[
	0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, // 0].xyz, Stereo_D
	0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x31, 0x5d, 0x2e, // eghostFilter[1].
	0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, // xyz, Stereo_Degh
	0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, // ostFilter[2].xyz
	0x29, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x6d, 0x61, 0x69, // )) );.}.void mai
	0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, // n().{.vec3 lCol,
	0x20, 0x72, 0x43, 0x6f, 0x6c, 0x3b, 0x0a, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x66, //  rCol;.gatherLef
	0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x28, 0x76, 0x5f, 0x74, // tRightColors(v_t
	0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2c, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // excoord0, lCol, 
	0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x6c, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x49, 0x6e, // rCol);.lCol = In
	0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x72, 0x43, // vGamma(lCol);.rC
	0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x72, 0x43, // ol = InvGamma(rC
	0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x44, 0x65, // ol);.vec3 lColDe
	0x73, 0x61, 0x74, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x3b, 0x0a, // sat, rColDesat;.
	0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x65, 0x73, 0x61, 0x74, 0x41, 0x6e, 0x61, 0x67, // DynamicDesatAnag
	0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x2c, // lyph(lCol, rCol,
	0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, //  lColDesat, rCol
	0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x6c, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6c, // Desat);.lCol = l
	0x43, 0x6f, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x3b, 0x0a, 0x72, 0x43, 0x6f, 0x6c, 0x20, 0x3d, // ColDesat;.rCol =
	0x20, 0x72, 0x43, 0x6f, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, //  rColDesat;.vec3
	0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x41, //  color = LinearA
	0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, // naglyph(lCol, rC
	0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, // ol);.gl_FragColo
	0x72, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, // r = vec4(FBGamma
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x7d, // (color), 1.0);.}
	0x0a, 0x00,                                                                                     // ..
};
static const uint8_t fs_pp_stereo_anaglyph_lin_srgb_dyndesat_st_dx11[2611] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x0e, 0x53, // FSH.Jc._.......S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x00, 0x00, // tereo_LeftMat...
	0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, // ........Stereo_R
	0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x00, 0x40, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, // ightMat..@......
	0x00, 0x1a, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // ..Stereo_LeftLum
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x12, 0x00, 0x80, 0x00, // inance_Gamma....
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, // .......Stereo_Ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, // ghtLuminance_Dyn
	0x44, 0x65, 0x73, 0x61, 0x74, 0x12, 0x00, 0x90, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, // Desat...........
	0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x30, 0x01, 0x00, // tex_stereo_fb0..
	0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // ........tex_ster
	0x65, 0x6f, 0x5f, 0x66, 0x62, 0x30, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6c, // eo_fb0.........l
	0x09, 0x00, 0x00, 0x44, 0x58, 0x42, 0x43, 0x7d, 0x6a, 0xae, 0x0f, 0x88, 0x47, 0x83, 0x9a, 0x8a, // ...DXBC}j...G...
	0x60, 0xb1, 0x8e, 0xf5, 0xf1, 0x53, 0xd5, 0x01, 0x00, 0x00, 0x00, 0x6c, 0x09, 0x00, 0x00, 0x03, // `....S.....l....
	0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x9c, 0x00, 0x00, 0x00, 0xd0, 0x00, 0x00, 0x00, 0x49, // ...,...........I
	0x53, 0x47, 0x4e, 0x68, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x50, // SGNh...........P
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x5c, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x06, 0x06, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, // .......SV_POSITI
	0x4f, 0x4e, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0xab, 0xab, 0xab, 0x4f, // ON.TEXCOORD....O
	0x53, 0x47, 0x4e, 0x2c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x20, // SGN,........... 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, // .......SV_TARGET
	0x00, 0xab, 0xab, 0x53, 0x48, 0x45, 0x58, 0x94, 0x08, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x25, // ...SHEX....P...%
	0x02, 0x00, 0x00, 0x6a, 0x08, 0x00, 0x01, 0x59, 0x00, 0x00, 0x04, 0x46, 0x8e, 0x20, 0x00, 0x00, // ...j...Y...F. ..
	0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x03, 0x00, 0x60, 0x10, 0x00, 0x00, // .......Z....`...
	0x00, 0x00, 0x00, 0x58, 0x40, 0x00, 0x04, 0x00, 0x70, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, // ...X@...p......U
	0x55, 0x00, 0x00, 0x62, 0x10, 0x00, 0x03, 0x62, 0x10, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x65, // U..b...b.......e
	0x00, 0x00, 0x03, 0xf2, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x02, 0x04, // .... ......h....
	0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x32, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x96, // ...6...2........
	0x15, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x42, 0x00, 0x10, 0x00, 0x00, // .......6...B....
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0x02, // ....@......H....
	0x02, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, // ...CU..r.......F
	0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .......F~.......
	0x60, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, // `.......@......2
	0x00, 0x00, 0x0f, 0x32, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x00, // ...2.......F....
	0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x6e, 0xa7, 0x72, 0x3f, 0x6e, 0xa7, 0x72, 0x3f, 0x00, // ....@..n.r?n.r?.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x19, 0x89, 0x55, 0x3d, 0x19, // ........@....U=.
	0x89, 0x55, 0x3d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x05, 0x32, // .U=......../...2
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x38, // .......F.......8
	0x00, 0x00, 0x0a, 0x32, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x01, // ...2.......F....
	0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x9a, 0x99, 0x19, 0x40, 0x9a, 0x99, 0x19, 0x40, 0x00, // ....@.....@...@.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x05, 0x32, 0x00, 0x10, 0x00, 0x01, // ...........2....
	0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x0a, 0xc2, // ...F.......8....
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x04, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, // ................
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x91, 0x83, 0x9e, 0x3d, 0x91, // @.............=.
	0x83, 0x9e, 0x3d, 0x1d, 0x00, 0x00, 0x0a, 0xb2, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, // ..=.............
	0x40, 0x00, 0x00, 0xe6, 0xae, 0x25, 0x3d, 0xe6, 0xae, 0x25, 0x3d, 0x00, 0x00, 0x00, 0x00, 0xe6, // @....%=..%=.....
	0xae, 0x25, 0x3d, 0x46, 0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x09, 0x32, // .%=F.......7...2
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe6, // .......F........
	0x0a, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, // .......F.......2
	0x00, 0x00, 0x09, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x00, // ...........*....
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x6e, 0xa7, 0x72, 0x3f, 0x01, 0x40, 0x00, 0x00, 0x19, // ....@..n.r?.@...
	0x89, 0x55, 0x3d, 0x2f, 0x00, 0x00, 0x05, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, // .U=/............
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x0a, 0x32, 0x00, 0x10, 0x00, 0x00, // .......8...2....
	0x00, 0x00, 0x00, 0x86, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x9a, // ............@...
	0x99, 0x19, 0x40, 0x91, 0x83, 0x9e, 0x3d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, // ..@...=.........
	0x00, 0x00, 0x05, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x09, 0x42, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3a, // ...7...B.......:
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, // ................
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x08, 0x12, 0x00, 0x10, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x82, 0x20, 0x00, 0x00, // ...F.......F. ..
	0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x08, 0x22, 0x00, 0x10, 0x00, 0x00, // ..........."....
	0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x82, 0x20, 0x00, 0x00, // ...F.......F. ..
	0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x42, 0x00, 0x10, 0x00, 0x00, // ...........B....
	0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, // .......A........
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x22, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, // ......."........
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x17, 0xb7, 0xd1, 0x38, 0x00, // ........@.....8.
	0x00, 0x00, 0x08, 0x72, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x80, 0x41, // ...r.......F...A
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, // ................
	0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x00, // ...........*....
	0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x09, 0x12, // ...........8....
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x80, 0x81, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x3a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x32, // ...:. .........2
	0x00, 0x00, 0x09, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x10, 0x00, 0x00, // ...r............
	0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x01, // ...F.......F....
	0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x82, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, // ...6............
	0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x11, 0x00, 0x00, 0x08, 0x12, 0x00, 0x10, 0x00, 0x01, // @.....?.........
	0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, // ...F.......F. ..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x08, 0x22, 0x00, 0x10, 0x00, 0x01, // ..........."....
	0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, // ...F.......F. ..
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x08, 0x42, 0x00, 0x10, 0x00, 0x01, // ...........B....
	0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, // ...F.......F. ..
	0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x32, 0x00, 0x10, 0x00, 0x00, // .......6...2....
	0x00, 0x00, 0x00, 0x96, 0x15, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x42, // ...........6...B
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x48, // ........@.....?H
	0x00, 0x00, 0x8d, 0x02, 0x02, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x72, 0x00, 0x10, 0x00, 0x00, // .......CU..r....
	0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, 0x00, // ...F.......F~...
	0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, // ....`.......@...
	0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x0f, 0x32, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, // ...2...2.......F
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x6e, 0xa7, 0x72, 0x3f, 0x6e, // ........@..n.r?n
	0xa7, 0x72, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x19, // .r?.........@...
	0x89, 0x55, 0x3d, 0x19, 0x89, 0x55, 0x3d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2f, // .U=..U=......../
	0x00, 0x00, 0x05, 0x32, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x02, // ...2.......F....
	0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x0a, 0x32, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, // ...8...2.......F
	0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x9a, 0x99, 0x19, 0x40, 0x9a, // ........@.....@.
	0x99, 0x19, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x05, 0x32, // ..@............2
	0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x38, // .......F.......8
	0x00, 0x00, 0x0a, 0xc2, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x06, 0x04, 0x10, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x91, // ....@...........
	0x83, 0x9e, 0x3d, 0x91, 0x83, 0x9e, 0x3d, 0x1d, 0x00, 0x00, 0x0a, 0xb2, 0x00, 0x10, 0x00, 0x00, // ..=...=.........
	0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0xe6, 0xae, 0x25, 0x3d, 0xe6, 0xae, 0x25, 0x3d, 0x00, // ....@....%=..%=.
	0x00, 0x00, 0x00, 0xe6, 0xae, 0x25, 0x3d, 0x46, 0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, // .....%=F.......7
	0x00, 0x00, 0x09, 0x32, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x00, // ...2.......F....
	0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x02, // ...........F....
	0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x09, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, // ...2...........*
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x6e, 0xa7, 0x72, 0x3f, 0x01, // ........@..n.r?.
	0x40, 0x00, 0x00, 0x19, 0x89, 0x55, 0x3d, 0x2f, 0x00, 0x00, 0x05, 0x12, 0x00, 0x10, 0x00, 0x00, // @....U=/........
	0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x0a, 0x32, // ...........8...2
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, // ................
	0x40, 0x00, 0x00, 0x9a, 0x99, 0x19, 0x40, 0x91, 0x83, 0x9e, 0x3d, 0x00, 0x00, 0x00, 0x00, 0x00, // @.....@...=.....
	0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x05, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, // ................
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x09, 0x42, 0x00, 0x10, 0x00, 0x02, // .......7...B....
	0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x00, // ...:............
	0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x08, 0x12, // ................
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, // .......F.......F
	0x82, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x08, 0x22, // . ............."
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, // .......F.......F
	0x82, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x42, // . .............B
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x00, // ...........A....
	0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x12, // ................
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, // ................
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x22, 0x00, 0x10, 0x00, 0x00, // ..........."....
	0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x17, // ............@...
	0xb7, 0xd1, 0x38, 0x00, 0x00, 0x00, 0x08, 0x72, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x46, // ..8....r.......F
	0x02, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x06, 0x00, 0x10, 0x00, 0x00, // ...A............
	0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, // ...............*
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, // ...............8
	0x00, 0x00, 0x09, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x80, 0x81, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, // .......:. ......
	0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x09, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, // ...2...r........
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x46, // .......F.......F
	0x02, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x82, 0x00, 0x10, 0x00, 0x00, // .......6........
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x11, 0x00, 0x00, 0x08, 0x12, // ....@.....?.....
	0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, // .......F.......F
	0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x08, 0x22, // . ............."
	0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, // .......F.......F
	0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x08, 0x42, // . .............B
	0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, // .......F.......F
	0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x72, // . .............r
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, // .......F.......F
	0x02, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x05, 0x72, 0x00, 0x10, 0x00, 0x01, // ......./...r....
	0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x0a, 0x72, // ...F.......8...r
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, // .......F........
	0x40, 0x00, 0x00, 0x55, 0x55, 0xd5, 0x3e, 0x55, 0x55, 0xd5, 0x3e, 0x55, 0x55, 0xd5, 0x3e, 0x00, // @..UU.>UU.>UU.>.
	0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x05, 0x72, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, // .......r.......F
	0x02, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x0f, 0x72, 0x00, 0x10, 0x00, 0x01, // .......2...r....
	0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x3d, // ...F........@..=
	0x0a, 0x87, 0x3f, 0x3d, 0x0a, 0x87, 0x3f, 0x3d, 0x0a, 0x87, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x02, // ..?=..?=..?.....
	0x40, 0x00, 0x00, 0xae, 0x47, 0x61, 0xbd, 0xae, 0x47, 0x61, 0xbd, 0xae, 0x47, 0x61, 0xbd, 0x00, // @...Ga..Ga..Ga..
	0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x0a, 0x72, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, // .......r........
	0x40, 0x00, 0x00, 0x1c, 0x2e, 0x4d, 0x3b, 0x1c, 0x2e, 0x4d, 0x3b, 0x1c, 0x2e, 0x4d, 0x3b, 0x00, // @....M;..M;..M;.
	0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x0a, 0x72, // ...F.......8...r
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, // .......F........
	0x40, 0x00, 0x00, 0x52, 0xb8, 0x4e, 0x41, 0x52, 0xb8, 0x4e, 0x41, 0x52, 0xb8, 0x4e, 0x41, 0x00, // @..R.NAR.NAR.NA.
	0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x09, 0x72, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, // ...7...r ......F
	0x02, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, // .......F.......F
	0x02, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x82, 0x20, 0x10, 0x00, 0x00, // .......6.... ...
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x3e, 0x00, 0x00, 0x01, 0x00, // ....@.....?>....
	0x00, 0xa0, 0x00,                                                                               // ...
};
static const uint8_t fs_pp_stereo_anaglyph_lin_srgb_dyndesat_st_spv[5435] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x1a, 0x53, // FSH.Jc._.......S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, // tereo_LeftLumina
	0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x12, 0x01, 0x80, 0x00, 0x01, 0x00, 0x00, // nce_Gamma.......
	0x00, 0x00, 0x00, 0x1e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, // ....Stereo_Right
	0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, // Luminance_DynDes
	0x61, 0x74, 0x12, 0x01, 0x90, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x53, 0x74, 0x65, // at...........Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x01, 0x00, 0x00, 0x04, // reo_LeftMat.....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, // ......Stereo_Rig
	0x68, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x01, 0x40, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, // htMat..@........
	0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x30, 0x00, 0x02, // tex_stereo_fb0..
	0x00, 0x00, 0x00, 0x00, 0x03, 0x22, 0x00, 0x8c, 0x14, 0x00, 0x00, 0x03, 0x02, 0x23, 0x07, 0x00, // .....".......#..
	0x00, 0x01, 0x00, 0x0b, 0x00, 0x08, 0x00, 0xa3, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, // ................
	0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, // ...............G
	0x4c, 0x53, 0x4c, 0x2e, 0x73, 0x74, 0x64, 0x2e, 0x34, 0x35, 0x30, 0x00, 0x00, 0x00, 0x00, 0x0e, // LSL.std.450.....
	0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x07, 0x00, 0x04, // ................
	0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x8d, // .......main.....
	0x01, 0x00, 0x00, 0x9a, 0x01, 0x00, 0x00, 0x10, 0x00, 0x03, 0x00, 0x04, 0x00, 0x00, 0x00, 0x07, // ................
	0x00, 0x00, 0x00, 0x03, 0x00, 0x03, 0x00, 0x05, 0x00, 0x00, 0x00, 0xf4, 0x01, 0x00, 0x00, 0x05, // ................
	0x00, 0x04, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x05, // .......main.....
	0x00, 0x08, 0x00, 0x56, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // ...V...tex_stere
	0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x00, 0x00, 0x00, 0x00, 0x05, // o_fbSampler.....
	0x00, 0x08, 0x00, 0x59, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // ...Y...tex_stere
	0x6f, 0x5f, 0x66, 0x62, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x00, 0x00, 0x00, 0x00, 0x05, // o_fbTexture.....
	0x00, 0x06, 0x00, 0xef, 0x00, 0x00, 0x00, 0x55, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x6c, // .......UniformBl
	0x6f, 0x63, 0x6b, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x07, 0x00, 0xef, 0x00, 0x00, 0x00, 0x00, // ock.............
	0x00, 0x00, 0x00, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, // ...Stereo_LeftMa
	0x74, 0x00, 0x00, 0x06, 0x00, 0x07, 0x00, 0xef, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x53, // t..............S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x00, 0x06, // tereo_RightMat..
	0x00, 0x0a, 0x00, 0xef, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x53, 0x74, 0x65, 0x72, 0x65, // ...........Stere
	0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, // o_LeftLuminance_
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x00, 0x00, 0x06, 0x00, 0x0b, 0x00, 0xef, 0x00, 0x00, 0x00, 0x03, // Gamma...........
	0x00, 0x00, 0x00, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, // ...Stereo_RightL
	0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, // uminance_DynDesa
	0x74, 0x00, 0x00, 0x05, 0x00, 0x03, 0x00, 0xf1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, // t...............
	0x00, 0x05, 0x00, 0x8d, 0x01, 0x00, 0x00, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, // .......v_texcoor
	0x64, 0x30, 0x00, 0x05, 0x00, 0x06, 0x00, 0x9a, 0x01, 0x00, 0x00, 0x62, 0x67, 0x66, 0x78, 0x5f, // d0.........bgfx_
	0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x56, // FragData0..G...V
	0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x56, // ...".......G...V
	0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x59, // ...!.......G...Y
	0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x59, // ...".......G...Y
	0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x48, 0x00, 0x04, 0x00, 0xef, // ...!.......H....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0xef, // ...........H....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, // .......#.......H
	0x00, 0x05, 0x00, 0xef, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x10, // ................
	0x00, 0x00, 0x00, 0x48, 0x00, 0x04, 0x00, 0xef, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04, // ...H............
	0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0xef, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x23, // ...H...........#
	0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0xef, 0x00, 0x00, 0x00, 0x01, // ...@...H........
	0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0xef, // ...........H....
	0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x48, // .......#.......H
	0x00, 0x05, 0x00, 0xef, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x90, // ...........#....
	0x00, 0x00, 0x00, 0x47, 0x00, 0x03, 0x00, 0xef, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x47, // ...G...........G
	0x00, 0x04, 0x00, 0xf1, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, // .......".......G
	0x00, 0x04, 0x00, 0xf1, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, // .......!.......G
	0x00, 0x04, 0x00, 0x8d, 0x01, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, // ...............G
	0x00, 0x04, 0x00, 0x9a, 0x01, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, // ................
	0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x21, 0x00, 0x03, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, // .......!........
	0x00, 0x00, 0x00, 0x1a, 0x00, 0x02, 0x00, 0x06, 0x00, 0x00, 0x00, 0x16, 0x00, 0x03, 0x00, 0x07, // ................
	0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x19, 0x00, 0x09, 0x00, 0x08, 0x00, 0x00, 0x00, 0x07, // ... ............
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x0b, // ................
	0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x0e, // ................
	0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x37, // ...............7
	0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x55, // ........... ...U
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x55, // ...........;...U
	0x00, 0x00, 0x00, 0x56, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x58, // ...V....... ...X
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x58, // ...........;...X
	0x00, 0x00, 0x00, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x00, 0x04, 0x00, 0x62, // ...Y...........b
	0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x62, // ... .......+...b
	0x00, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x62, // ...c.......+...b
	0x00, 0x00, 0x00, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x03, 0x00, 0x6b, // ...g...........k
	0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x81, // .......+........
	0x00, 0x00, 0x00, 0xe6, 0xae, 0x25, 0x3d, 0x14, 0x00, 0x02, 0x00, 0x82, 0x00, 0x00, 0x00, 0x2b, // .....%=........+
	0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x87, 0x00, 0x00, 0x00, 0x91, 0x83, 0x9e, 0x3d, 0x2b, // ..............=+
	0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x8c, 0x00, 0x00, 0x00, 0x6e, 0xa7, 0x72, 0x3f, 0x2b, // ...........n.r?+
	0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x8e, 0x00, 0x00, 0x00, 0x19, 0x89, 0x55, 0x3d, 0x2b, // .............U=+
	0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x9a, 0x99, 0x19, 0x40, 0x15, // ..............@.
	0x00, 0x04, 0x00, 0x9a, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, // ....... .......+
	0x00, 0x04, 0x00, 0x9a, 0x00, 0x00, 0x00, 0x9b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, // ...............+
	0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0xad, 0x00, 0x00, 0x00, 0x1c, 0x2e, 0x4d, 0x3b, 0x2b, // .............M;+
	0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0xb2, 0x00, 0x00, 0x00, 0x52, 0xb8, 0x4e, 0x41, 0x2b, // ...........R.NA+
	0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0xb6, 0x00, 0x00, 0x00, 0x3d, 0x0a, 0x87, 0x3f, 0x2b, // ...........=..?+
	0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0xb8, 0x00, 0x00, 0x00, 0x55, 0x55, 0xd5, 0x3e, 0x2b, // ...........UU.>+
	0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0xbb, 0x00, 0x00, 0x00, 0xae, 0x47, 0x61, 0x3d, 0x2b, // ............Ga=+
	0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0xd8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, // ...............+
	0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0xe4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x18, // ..............?.
	0x00, 0x04, 0x00, 0xee, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x1e, // ................
	0x00, 0x06, 0x00, 0xef, 0x00, 0x00, 0x00, 0xee, 0x00, 0x00, 0x00, 0xee, 0x00, 0x00, 0x00, 0x0e, // ................
	0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x02, // ....... ........
	0x00, 0x00, 0x00, 0xef, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0xf0, 0x00, 0x00, 0x00, 0xf1, // .......;........
	0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x62, 0x00, 0x00, 0x00, 0xf2, // .......+...b....
	0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0xf3, 0x00, 0x00, 0x00, 0x02, // ....... ........
	0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x62, 0x00, 0x00, 0x00, 0xfa, // .......+...b....
	0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x9a, 0x00, 0x00, 0x00, 0x14, // .......+........
	0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x15, 0x01, 0x00, 0x00, 0x02, // ....... ........
	0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x1c, // .......+........
	0x01, 0x00, 0x00, 0x17, 0xb7, 0xd1, 0x38, 0x20, 0x00, 0x04, 0x00, 0x41, 0x01, 0x00, 0x00, 0x02, // ......8 ...A....
	0x00, 0x00, 0x00, 0xee, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x8c, 0x01, 0x00, 0x00, 0x01, // ....... ........
	0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x8c, 0x01, 0x00, 0x00, 0x8d, // ...7...;........
	0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x99, 0x01, 0x00, 0x00, 0x03, // ....... ........
	0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x99, 0x01, 0x00, 0x00, 0x9a, // .......;........
	0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x36, 0x00, 0x05, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, // .......6........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x05, // ................
	0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, 0x56, // ...=.......W...V
	0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x08, 0x00, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x00, 0x59, // ...=.......Z...Y
	0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x37, 0x00, 0x00, 0x00, 0x8e, 0x01, 0x00, 0x00, 0x8d, // ...=...7........
	0x01, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xf3, 0x01, 0x00, 0x00, 0x8e, // ...Q............
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xf5, // .......Q........
	0x01, 0x00, 0x00, 0x8e, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x50, 0x00, 0x06, 0x00, 0x0b, // ...........P....
	0x00, 0x00, 0x00, 0xf6, 0x01, 0x00, 0x00, 0xf3, 0x01, 0x00, 0x00, 0xf5, 0x01, 0x00, 0x00, 0xd8, // ................
	0x00, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, 0x6b, 0x00, 0x00, 0x00, 0x08, 0x02, 0x00, 0x00, 0x5a, // ...V...k.......Z
	0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0b, // ...W...X........
	0x02, 0x00, 0x00, 0x08, 0x02, 0x00, 0x00, 0xf6, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xd8, // ................
	0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xfb, 0x01, 0x00, 0x00, 0x8e, // ...Q............
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xfd, // .......Q........
	0x01, 0x00, 0x00, 0x8e, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x50, 0x00, 0x06, 0x00, 0x0b, // ...........P....
	0x00, 0x00, 0x00, 0xfe, 0x01, 0x00, 0x00, 0xfb, 0x01, 0x00, 0x00, 0xfd, 0x01, 0x00, 0x00, 0xe4, // ................
	0x00, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, 0x6b, 0x00, 0x00, 0x00, 0x12, 0x02, 0x00, 0x00, 0x5a, // ...V...k.......Z
	0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x15, // ...W...X........
	0x02, 0x00, 0x00, 0x12, 0x02, 0x00, 0x00, 0xfe, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xd8, // ................
	0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x1c, 0x02, 0x00, 0x00, 0x0b, // ...Q............
	0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x3a, 0x02, 0x00, 0x00, 0x00, // ...........:....
	0x00, 0x00, 0x00, 0xfb, 0x00, 0x03, 0x00, 0x9b, 0x00, 0x00, 0x00, 0x2e, 0x02, 0x00, 0x00, 0xf8, // ................
	0x00, 0x02, 0x00, 0x2e, 0x02, 0x00, 0x00, 0xbc, 0x00, 0x05, 0x00, 0x82, 0x00, 0x00, 0x00, 0x30, // ...............0
	0x02, 0x00, 0x00, 0x1c, 0x02, 0x00, 0x00, 0x81, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x39, // ...............9
	0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0x30, 0x02, 0x00, 0x00, 0x31, // ...........0...1
	0x02, 0x00, 0x00, 0x34, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x34, 0x02, 0x00, 0x00, 0x85, // ...4.......4....
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x36, 0x02, 0x00, 0x00, 0x1c, 0x02, 0x00, 0x00, 0x8c, // .......6........
	0x00, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x37, 0x02, 0x00, 0x00, 0x36, // ...........7...6
	0x02, 0x00, 0x00, 0x8e, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x38, // ...............8
	0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x37, 0x02, 0x00, 0x00, 0x90, // ...........7....
	0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x3a, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x31, // .......:.......1
	0x02, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x33, 0x02, 0x00, 0x00, 0x1c, // ...........3....
	0x02, 0x00, 0x00, 0x87, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x3a, 0x02, 0x00, 0x00, 0xf8, // ...........:....
	0x00, 0x02, 0x00, 0x39, 0x02, 0x00, 0x00, 0xff, 0x00, 0x01, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x3a, // ...9...........:
	0x02, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x94, 0x03, 0x00, 0x00, 0x38, // ...............8
	0x02, 0x00, 0x00, 0x34, 0x02, 0x00, 0x00, 0x33, 0x02, 0x00, 0x00, 0x31, 0x02, 0x00, 0x00, 0x51, // ...4...3...1...Q
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x1f, 0x02, 0x00, 0x00, 0x0b, 0x02, 0x00, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x51, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfb, // .......Q........
	0x00, 0x03, 0x00, 0x9b, 0x00, 0x00, 0x00, 0x45, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x45, // .......E.......E
	0x02, 0x00, 0x00, 0xbc, 0x00, 0x05, 0x00, 0x82, 0x00, 0x00, 0x00, 0x47, 0x02, 0x00, 0x00, 0x1f, // ...........G....
	0x02, 0x00, 0x00, 0x81, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x50, 0x02, 0x00, 0x00, 0x00, // ...........P....
	0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0x47, 0x02, 0x00, 0x00, 0x48, 0x02, 0x00, 0x00, 0x4b, // .......G...H...K
	0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x4b, 0x02, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, // .......K........
	0x00, 0x00, 0x00, 0x4d, 0x02, 0x00, 0x00, 0x1f, 0x02, 0x00, 0x00, 0x8c, 0x00, 0x00, 0x00, 0x81, // ...M............
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x4e, 0x02, 0x00, 0x00, 0x4d, 0x02, 0x00, 0x00, 0x8e, // .......N...M....
	0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x4f, 0x02, 0x00, 0x00, 0x01, // ...........O....
	0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x4e, 0x02, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0xf9, // .......N........
	0x00, 0x02, 0x00, 0x51, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x48, 0x02, 0x00, 0x00, 0x85, // ...Q.......H....
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x4a, 0x02, 0x00, 0x00, 0x1f, 0x02, 0x00, 0x00, 0x87, // .......J........
	0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x51, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x50, // .......Q.......P
	0x02, 0x00, 0x00, 0xff, 0x00, 0x01, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x51, 0x02, 0x00, 0x00, 0xf5, // ...........Q....
	0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x95, 0x03, 0x00, 0x00, 0x4f, 0x02, 0x00, 0x00, 0x4b, // ...........O...K
	0x02, 0x00, 0x00, 0x4a, 0x02, 0x00, 0x00, 0x48, 0x02, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, // ...J...H...Q....
	0x00, 0x00, 0x00, 0x22, 0x02, 0x00, 0x00, 0x0b, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xf7, // ..."............
	0x00, 0x03, 0x00, 0x68, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfb, 0x00, 0x03, 0x00, 0x9b, // ...h............
	0x00, 0x00, 0x00, 0x5c, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x5c, 0x02, 0x00, 0x00, 0xbc, // ................
	0x00, 0x05, 0x00, 0x82, 0x00, 0x00, 0x00, 0x5e, 0x02, 0x00, 0x00, 0x22, 0x02, 0x00, 0x00, 0x81, // .......^..."....
	0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x67, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, // .......g........
	0x00, 0x04, 0x00, 0x5e, 0x02, 0x00, 0x00, 0x5f, 0x02, 0x00, 0x00, 0x62, 0x02, 0x00, 0x00, 0xf8, // ...^..._...b....
	0x00, 0x02, 0x00, 0x62, 0x02, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x64, // ...b...........d
	0x02, 0x00, 0x00, 0x22, 0x02, 0x00, 0x00, 0x8c, 0x00, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x07, // ..."............
	0x00, 0x00, 0x00, 0x65, 0x02, 0x00, 0x00, 0x64, 0x02, 0x00, 0x00, 0x8e, 0x00, 0x00, 0x00, 0x0c, // ...e...d........
	0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x66, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, // .......f........
	0x00, 0x00, 0x00, 0x65, 0x02, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x68, // ...e...........h
	0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x5f, 0x02, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, // ......._........
	0x00, 0x00, 0x00, 0x61, 0x02, 0x00, 0x00, 0x22, 0x02, 0x00, 0x00, 0x87, 0x00, 0x00, 0x00, 0xf9, // ...a..."........
	0x00, 0x02, 0x00, 0x68, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x67, 0x02, 0x00, 0x00, 0xff, // ...h.......g....
	0x00, 0x01, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x68, 0x02, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x07, // .......h........
	0x00, 0x00, 0x00, 0x96, 0x03, 0x00, 0x00, 0x66, 0x02, 0x00, 0x00, 0x62, 0x02, 0x00, 0x00, 0x61, // .......f...b...a
	0x02, 0x00, 0x00, 0x5f, 0x02, 0x00, 0x00, 0x50, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x24, // ..._...P.......$
	0x02, 0x00, 0x00, 0x94, 0x03, 0x00, 0x00, 0x95, 0x03, 0x00, 0x00, 0x96, 0x03, 0x00, 0x00, 0x51, // ...............Q
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x70, 0x02, 0x00, 0x00, 0x15, 0x02, 0x00, 0x00, 0x00, // .......p........
	0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x8e, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfb, // ................
	0x00, 0x03, 0x00, 0x9b, 0x00, 0x00, 0x00, 0x82, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x82, // ................
	0x02, 0x00, 0x00, 0xbc, 0x00, 0x05, 0x00, 0x82, 0x00, 0x00, 0x00, 0x84, 0x02, 0x00, 0x00, 0x70, // ...............p
	0x02, 0x00, 0x00, 0x81, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x8d, 0x02, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0x84, 0x02, 0x00, 0x00, 0x85, 0x02, 0x00, 0x00, 0x88, // ................
	0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x88, 0x02, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, // ................
	0x00, 0x00, 0x00, 0x8a, 0x02, 0x00, 0x00, 0x70, 0x02, 0x00, 0x00, 0x8c, 0x00, 0x00, 0x00, 0x81, // .......p........
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x8b, 0x02, 0x00, 0x00, 0x8a, 0x02, 0x00, 0x00, 0x8e, // ................
	0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x8c, 0x02, 0x00, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x8b, 0x02, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0xf9, // ................
	0x00, 0x02, 0x00, 0x8e, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x85, 0x02, 0x00, 0x00, 0x85, // ................
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x87, 0x02, 0x00, 0x00, 0x70, 0x02, 0x00, 0x00, 0x87, // ...........p....
	0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x8e, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x8d, // ................
	0x02, 0x00, 0x00, 0xff, 0x00, 0x01, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x8e, 0x02, 0x00, 0x00, 0xf5, // ................
	0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x9a, 0x03, 0x00, 0x00, 0x8c, 0x02, 0x00, 0x00, 0x88, // ................
	0x02, 0x00, 0x00, 0x87, 0x02, 0x00, 0x00, 0x85, 0x02, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, // ...........Q....
	0x00, 0x00, 0x00, 0x73, 0x02, 0x00, 0x00, 0x15, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xf7, // ...s............
	0x00, 0x03, 0x00, 0xa5, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfb, 0x00, 0x03, 0x00, 0x9b, // ................
	0x00, 0x00, 0x00, 0x99, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x99, 0x02, 0x00, 0x00, 0xbc, // ................
	0x00, 0x05, 0x00, 0x82, 0x00, 0x00, 0x00, 0x9b, 0x02, 0x00, 0x00, 0x73, 0x02, 0x00, 0x00, 0x81, // ...........s....
	0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0xa4, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, // ................
	0x00, 0x04, 0x00, 0x9b, 0x02, 0x00, 0x00, 0x9c, 0x02, 0x00, 0x00, 0x9f, 0x02, 0x00, 0x00, 0xf8, // ................
	0x00, 0x02, 0x00, 0x9f, 0x02, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xa1, // ................
	0x02, 0x00, 0x00, 0x73, 0x02, 0x00, 0x00, 0x8c, 0x00, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x07, // ...s............
	0x00, 0x00, 0x00, 0xa2, 0x02, 0x00, 0x00, 0xa1, 0x02, 0x00, 0x00, 0x8e, 0x00, 0x00, 0x00, 0x0c, // ................
	0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0xa3, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, // ................
	0x00, 0x00, 0x00, 0xa2, 0x02, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0xa5, // ................
	0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x9c, 0x02, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, // ................
	0x00, 0x00, 0x00, 0x9e, 0x02, 0x00, 0x00, 0x73, 0x02, 0x00, 0x00, 0x87, 0x00, 0x00, 0x00, 0xf9, // .......s........
	0x00, 0x02, 0x00, 0xa5, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xa4, 0x02, 0x00, 0x00, 0xff, // ................
	0x00, 0x01, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xa5, 0x02, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x07, // ................
	0x00, 0x00, 0x00, 0x9b, 0x03, 0x00, 0x00, 0xa3, 0x02, 0x00, 0x00, 0x9f, 0x02, 0x00, 0x00, 0x9e, // ................
	0x02, 0x00, 0x00, 0x9c, 0x02, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x76, // .......Q.......v
	0x02, 0x00, 0x00, 0x15, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0xbc, // ................
	0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfb, 0x00, 0x03, 0x00, 0x9b, 0x00, 0x00, 0x00, 0xb0, // ................
	0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xb0, 0x02, 0x00, 0x00, 0xbc, 0x00, 0x05, 0x00, 0x82, // ................
	0x00, 0x00, 0x00, 0xb2, 0x02, 0x00, 0x00, 0x76, 0x02, 0x00, 0x00, 0x81, 0x00, 0x00, 0x00, 0xf7, // .......v........
	0x00, 0x03, 0x00, 0xbb, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0xb2, // ................
	0x02, 0x00, 0x00, 0xb3, 0x02, 0x00, 0x00, 0xb6, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xb6, // ................
	0x02, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xb8, 0x02, 0x00, 0x00, 0x76, // ...............v
	0x02, 0x00, 0x00, 0x8c, 0x00, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xb9, // ................
	0x02, 0x00, 0x00, 0xb8, 0x02, 0x00, 0x00, 0x8e, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, // ................
	0x00, 0x00, 0x00, 0xba, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0xb9, // ................
	0x02, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0xbc, 0x02, 0x00, 0x00, 0xf8, // ................
	0x00, 0x02, 0x00, 0xb3, 0x02, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xb5, // ................
	0x02, 0x00, 0x00, 0x76, 0x02, 0x00, 0x00, 0x87, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0xbc, // ...v............
	0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xbb, 0x02, 0x00, 0x00, 0xff, 0x00, 0x01, 0x00, 0xf8, // ................
	0x00, 0x02, 0x00, 0xbc, 0x02, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x9c, // ................
	0x03, 0x00, 0x00, 0xba, 0x02, 0x00, 0x00, 0xb6, 0x02, 0x00, 0x00, 0xb5, 0x02, 0x00, 0x00, 0xb3, // ................
	0x02, 0x00, 0x00, 0x50, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x78, 0x02, 0x00, 0x00, 0x9a, // ...P.......x....
	0x03, 0x00, 0x00, 0x9b, 0x03, 0x00, 0x00, 0x9c, 0x03, 0x00, 0x00, 0x41, 0x00, 0x05, 0x00, 0xf3, // ...........A....
	0x00, 0x00, 0x00, 0xd0, 0x02, 0x00, 0x00, 0xf1, 0x00, 0x00, 0x00, 0xf2, 0x00, 0x00, 0x00, 0x3d, // ...............=
	0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xd1, 0x02, 0x00, 0x00, 0xd0, 0x02, 0x00, 0x00, 0x4f, // ...............O
	0x00, 0x08, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xd2, 0x02, 0x00, 0x00, 0xd1, 0x02, 0x00, 0x00, 0xd1, // ................
	0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x94, // ................
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xd3, 0x02, 0x00, 0x00, 0x24, 0x02, 0x00, 0x00, 0xd2, // ...........$....
	0x02, 0x00, 0x00, 0x41, 0x00, 0x05, 0x00, 0xf3, 0x00, 0x00, 0x00, 0xd5, 0x02, 0x00, 0x00, 0xf1, // ...A............
	0x00, 0x00, 0x00, 0xfa, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xd6, // .......=........
	0x02, 0x00, 0x00, 0xd5, 0x02, 0x00, 0x00, 0x4f, 0x00, 0x08, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xd7, // .......O........
	0x02, 0x00, 0x00, 0xd6, 0x02, 0x00, 0x00, 0xd6, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x94, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xd8, // ................
	0x02, 0x00, 0x00, 0x24, 0x02, 0x00, 0x00, 0xd7, 0x02, 0x00, 0x00, 0x41, 0x00, 0x05, 0x00, 0xf3, // ...$.......A....
	0x00, 0x00, 0x00, 0xda, 0x02, 0x00, 0x00, 0xf1, 0x00, 0x00, 0x00, 0xf2, 0x00, 0x00, 0x00, 0x3d, // ...............=
	0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xdb, 0x02, 0x00, 0x00, 0xda, 0x02, 0x00, 0x00, 0x4f, // ...............O
	0x00, 0x08, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xdc, 0x02, 0x00, 0x00, 0xdb, 0x02, 0x00, 0x00, 0xdb, // ................
	0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x94, // ................
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xdd, 0x02, 0x00, 0x00, 0x78, 0x02, 0x00, 0x00, 0xdc, // ...........x....
	0x02, 0x00, 0x00, 0x41, 0x00, 0x05, 0x00, 0xf3, 0x00, 0x00, 0x00, 0xdf, 0x02, 0x00, 0x00, 0xf1, // ...A............
	0x00, 0x00, 0x00, 0xfa, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xe0, // .......=........
	0x02, 0x00, 0x00, 0xdf, 0x02, 0x00, 0x00, 0x4f, 0x00, 0x08, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xe1, // .......O........
	0x02, 0x00, 0x00, 0xe0, 0x02, 0x00, 0x00, 0xe0, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x94, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xe2, // ................
	0x02, 0x00, 0x00, 0x78, 0x02, 0x00, 0x00, 0xe1, 0x02, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x07, // ...x............
	0x00, 0x00, 0x00, 0xe5, 0x02, 0x00, 0x00, 0xd3, 0x02, 0x00, 0x00, 0xd8, 0x02, 0x00, 0x00, 0x81, // ................
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xe8, 0x02, 0x00, 0x00, 0xdd, 0x02, 0x00, 0x00, 0xe2, // ................
	0x02, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x15, 0x01, 0x00, 0x00, 0xe9, 0x02, 0x00, 0x00, 0xf1, // ...A............
	0x00, 0x00, 0x00, 0xfa, 0x00, 0x00, 0x00, 0x14, 0x01, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, // ...........=....
	0x00, 0x00, 0x00, 0xea, 0x02, 0x00, 0x00, 0xe9, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x07, // ................
	0x00, 0x00, 0x00, 0xed, 0x02, 0x00, 0x00, 0xd3, 0x02, 0x00, 0x00, 0xd8, 0x02, 0x00, 0x00, 0x81, // ................
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xef, 0x02, 0x00, 0x00, 0xe5, 0x02, 0x00, 0x00, 0x1c, // ................
	0x01, 0x00, 0x00, 0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xf0, 0x02, 0x00, 0x00, 0xed, // ................
	0x02, 0x00, 0x00, 0xef, 0x02, 0x00, 0x00, 0x0c, 0x00, 0x06, 0x00, 0x07, 0x00, 0x00, 0x00, 0xf1, // ................
	0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xf0, 0x02, 0x00, 0x00, 0x85, // ................
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xf2, 0x02, 0x00, 0x00, 0xea, 0x02, 0x00, 0x00, 0xf1, // ................
	0x02, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x15, 0x01, 0x00, 0x00, 0xf3, 0x02, 0x00, 0x00, 0xf1, // ...A............
	0x00, 0x00, 0x00, 0xfa, 0x00, 0x00, 0x00, 0x14, 0x01, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, // ...........=....
	0x00, 0x00, 0x00, 0xf4, 0x02, 0x00, 0x00, 0xf3, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x07, // ................
	0x00, 0x00, 0x00, 0xf7, 0x02, 0x00, 0x00, 0xdd, 0x02, 0x00, 0x00, 0xe2, 0x02, 0x00, 0x00, 0x81, // ................
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xf9, 0x02, 0x00, 0x00, 0xe8, 0x02, 0x00, 0x00, 0x1c, // ................
	0x01, 0x00, 0x00, 0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xfa, 0x02, 0x00, 0x00, 0xf7, // ................
	0x02, 0x00, 0x00, 0xf9, 0x02, 0x00, 0x00, 0x0c, 0x00, 0x06, 0x00, 0x07, 0x00, 0x00, 0x00, 0xfb, // ................
	0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xfa, 0x02, 0x00, 0x00, 0x85, // ................
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xfc, 0x02, 0x00, 0x00, 0xf4, 0x02, 0x00, 0x00, 0xfb, // ................
	0x02, 0x00, 0x00, 0x50, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x0c, 0x03, 0x00, 0x00, 0xe5, // ...P............
	0x02, 0x00, 0x00, 0xe5, 0x02, 0x00, 0x00, 0xe5, 0x02, 0x00, 0x00, 0x50, 0x00, 0x06, 0x00, 0x0b, // ...........P....
	0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0xf2, 0x02, 0x00, 0x00, 0xf2, 0x02, 0x00, 0x00, 0xf2, // ................
	0x02, 0x00, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x12, 0x03, 0x00, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x24, 0x02, 0x00, 0x00, 0x0c, 0x03, 0x00, 0x00, 0x00, // .......$........
	0x03, 0x00, 0x00, 0x50, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x16, 0x03, 0x00, 0x00, 0xe8, // ...P............
	0x02, 0x00, 0x00, 0xe8, 0x02, 0x00, 0x00, 0xe8, 0x02, 0x00, 0x00, 0x50, 0x00, 0x06, 0x00, 0x0b, // ...........P....
	0x00, 0x00, 0x00, 0x06, 0x03, 0x00, 0x00, 0xfc, 0x02, 0x00, 0x00, 0xfc, 0x02, 0x00, 0x00, 0xfc, // ................
	0x02, 0x00, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x1c, 0x03, 0x00, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x78, 0x02, 0x00, 0x00, 0x16, 0x03, 0x00, 0x00, 0x06, // .......x........
	0x03, 0x00, 0x00, 0x41, 0x00, 0x05, 0x00, 0x41, 0x01, 0x00, 0x00, 0x20, 0x03, 0x00, 0x00, 0xf1, // ...A...A... ....
	0x00, 0x00, 0x00, 0x67, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0xee, 0x00, 0x00, 0x00, 0x21, // ...g...=.......!
	0x03, 0x00, 0x00, 0x20, 0x03, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x23, // ... ...Q.......#
	0x03, 0x00, 0x00, 0x12, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, // ...........Q....
	0x00, 0x00, 0x00, 0x24, 0x03, 0x00, 0x00, 0x12, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x51, // ...$...........Q
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x25, 0x03, 0x00, 0x00, 0x12, 0x03, 0x00, 0x00, 0x02, // .......%........
	0x00, 0x00, 0x00, 0x50, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x26, 0x03, 0x00, 0x00, 0x23, // ...P.......&...#
	0x03, 0x00, 0x00, 0x24, 0x03, 0x00, 0x00, 0x25, 0x03, 0x00, 0x00, 0xe4, 0x00, 0x00, 0x00, 0x91, // ...$...%........
	0x00, 0x05, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x27, 0x03, 0x00, 0x00, 0x21, 0x03, 0x00, 0x00, 0x26, // .......'...!...&
	0x03, 0x00, 0x00, 0x41, 0x00, 0x05, 0x00, 0x41, 0x01, 0x00, 0x00, 0x28, 0x03, 0x00, 0x00, 0xf1, // ...A...A...(....
	0x00, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0xee, 0x00, 0x00, 0x00, 0x29, // ...c...=.......)
	0x03, 0x00, 0x00, 0x28, 0x03, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x2b, // ...(...Q.......+
	0x03, 0x00, 0x00, 0x1c, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, // ...........Q....
	0x00, 0x00, 0x00, 0x2c, 0x03, 0x00, 0x00, 0x1c, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x51, // ...,...........Q
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x2d, 0x03, 0x00, 0x00, 0x1c, 0x03, 0x00, 0x00, 0x02, // .......-........
	0x00, 0x00, 0x00, 0x50, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x2e, 0x03, 0x00, 0x00, 0x2b, // ...P...........+
	0x03, 0x00, 0x00, 0x2c, 0x03, 0x00, 0x00, 0x2d, 0x03, 0x00, 0x00, 0xe4, 0x00, 0x00, 0x00, 0x91, // ...,...-........
	0x00, 0x05, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x2f, 0x03, 0x00, 0x00, 0x29, 0x03, 0x00, 0x00, 0x2e, // ......./...)....
	0x03, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x30, 0x03, 0x00, 0x00, 0x27, // ...........0...'
	0x03, 0x00, 0x00, 0x2f, 0x03, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x39, // .../...Q.......9
	0x03, 0x00, 0x00, 0x30, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbc, 0x00, 0x05, 0x00, 0x82, // ...0............
	0x00, 0x00, 0x00, 0x4b, 0x03, 0x00, 0x00, 0x39, 0x03, 0x00, 0x00, 0xad, 0x00, 0x00, 0x00, 0xf7, // ...K...9........
	0x00, 0x03, 0x00, 0x54, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0x4b, // ...T...........K
	0x03, 0x00, 0x00, 0x4c, 0x03, 0x00, 0x00, 0x4f, 0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x4f, // ...L...O.......O
	0x03, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x51, 0x03, 0x00, 0x00, 0x01, // ...........Q....
	0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x39, 0x03, 0x00, 0x00, 0xb8, 0x00, 0x00, 0x00, 0x85, // .......9........
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x52, 0x03, 0x00, 0x00, 0xb6, 0x00, 0x00, 0x00, 0x51, // .......R.......Q
	0x03, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x53, 0x03, 0x00, 0x00, 0x52, // ...........S...R
	0x03, 0x00, 0x00, 0xbb, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x54, 0x03, 0x00, 0x00, 0xf8, // ...........T....
	0x00, 0x02, 0x00, 0x4c, 0x03, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x4e, // ...L...........N
	0x03, 0x00, 0x00, 0xb2, 0x00, 0x00, 0x00, 0x39, 0x03, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x54, // .......9.......T
	0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x54, 0x03, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x07, // .......T........
	0x00, 0x00, 0x00, 0xa0, 0x03, 0x00, 0x00, 0x53, 0x03, 0x00, 0x00, 0x4f, 0x03, 0x00, 0x00, 0x4e, // .......S...O...N
	0x03, 0x00, 0x00, 0x4c, 0x03, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x3c, // ...L...Q.......<
	0x03, 0x00, 0x00, 0x30, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xbc, 0x00, 0x05, 0x00, 0x82, // ...0............
	0x00, 0x00, 0x00, 0x5f, 0x03, 0x00, 0x00, 0x3c, 0x03, 0x00, 0x00, 0xad, 0x00, 0x00, 0x00, 0xf7, // ..._...<........
	0x00, 0x03, 0x00, 0x68, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0x5f, // ...h..........._
	0x03, 0x00, 0x00, 0x60, 0x03, 0x00, 0x00, 0x63, 0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x63, // ...`...c.......c
	0x03, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x65, 0x03, 0x00, 0x00, 0x01, // ...........e....
	0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x3c, 0x03, 0x00, 0x00, 0xb8, 0x00, 0x00, 0x00, 0x85, // .......<........
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x66, 0x03, 0x00, 0x00, 0xb6, 0x00, 0x00, 0x00, 0x65, // .......f.......e
	0x03, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x67, 0x03, 0x00, 0x00, 0x66, // ...........g...f
	0x03, 0x00, 0x00, 0xbb, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x68, 0x03, 0x00, 0x00, 0xf8, // ...........h....
	0x00, 0x02, 0x00, 0x60, 0x03, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x62, // ...`...........b
	0x03, 0x00, 0x00, 0xb2, 0x00, 0x00, 0x00, 0x3c, 0x03, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x68, // .......<.......h
	0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x68, 0x03, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x07, // .......h........
	0x00, 0x00, 0x00, 0xa1, 0x03, 0x00, 0x00, 0x67, 0x03, 0x00, 0x00, 0x63, 0x03, 0x00, 0x00, 0x62, // .......g...c...b
	0x03, 0x00, 0x00, 0x60, 0x03, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x3f, // ...`...Q.......?
	0x03, 0x00, 0x00, 0x30, 0x03, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xbc, 0x00, 0x05, 0x00, 0x82, // ...0............
	0x00, 0x00, 0x00, 0x73, 0x03, 0x00, 0x00, 0x3f, 0x03, 0x00, 0x00, 0xad, 0x00, 0x00, 0x00, 0xf7, // ...s...?........
	0x00, 0x03, 0x00, 0x7c, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0x73, // ...|...........s
	0x03, 0x00, 0x00, 0x74, 0x03, 0x00, 0x00, 0x77, 0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x77, // ...t...w.......w
	0x03, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x79, 0x03, 0x00, 0x00, 0x01, // ...........y....
	0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x3f, 0x03, 0x00, 0x00, 0xb8, 0x00, 0x00, 0x00, 0x85, // .......?........
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x7a, 0x03, 0x00, 0x00, 0xb6, 0x00, 0x00, 0x00, 0x79, // .......z.......y
	0x03, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x7b, 0x03, 0x00, 0x00, 0x7a, // ...........{...z
	0x03, 0x00, 0x00, 0xbb, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x7c, 0x03, 0x00, 0x00, 0xf8, // ...........|....
	0x00, 0x02, 0x00, 0x74, 0x03, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x76, // ...t...........v
	0x03, 0x00, 0x00, 0xb2, 0x00, 0x00, 0x00, 0x3f, 0x03, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x7c, // .......?.......|
	0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x7c, 0x03, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x07, // .......|........
	0x00, 0x00, 0x00, 0xa2, 0x03, 0x00, 0x00, 0x7b, 0x03, 0x00, 0x00, 0x77, 0x03, 0x00, 0x00, 0x76, // .......{...w...v
	0x03, 0x00, 0x00, 0x74, 0x03, 0x00, 0x00, 0x50, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xe6, // ...t...P........
	0x01, 0x00, 0x00, 0xa0, 0x03, 0x00, 0x00, 0xa1, 0x03, 0x00, 0x00, 0xa2, 0x03, 0x00, 0x00, 0xe4, // ................
	0x00, 0x00, 0x00, 0x3e, 0x00, 0x03, 0x00, 0x9a, 0x01, 0x00, 0x00, 0xe6, 0x01, 0x00, 0x00, 0xfd, // ...>............
	0x00, 0x01, 0x00, 0x38, 0x00, 0x01, 0x00, 0x00, 0x00, 0xa0, 0x00,                               // ...8.......
};
static const bgfx::EmbeddedShader fs_pp_stereo_anaglyph_lin_srgb_dyndesat_st = BGFX_EMBEDDED_SHADER(fs_pp_stereo_anaglyph_lin_srgb_dyndesat_st);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Build of fragment shader from fs_pp_stereo.sc to fs_pp_stereo_anaglyph_lin_gamma_nodesat_st with options: ANAGLYPH NODESAT GAMMA STEREO
static const uint8_t fs_pp_stereo_anaglyph_lin_gamma_nodesat_st_mtl[1639] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x14, 0x74, // FSH.Jc._.......t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, // ex_stereo_fbSamp
	0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x74, 0x65, // ler...........te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x54, 0x65, 0x78, 0x74, 0x75, // x_stereo_fbTextu
	0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x74, 0x65, 0x78, // re...........tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, // _stereo_depthSam
	0x70, 0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x74, // pler...........t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x54, // ex_stereo_depthT
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, // exture..........
	0x0e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x14, // .Stereo_LeftMat.
	0x01, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // ..........Stereo
	0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x01, 0x40, 0x00, 0x04, 0x00, 0x00, // _RightMat..@....
	0x00, 0x00, 0x00, 0x1a, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, // ....Stereo_LeftL
	0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x12, 0x01, // uminance_Gamma..
	0x80, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, // .........tex_ste
	0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // reo_fb..........
	0x5f, 0x05, 0x00, 0x00, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x6d, 0x65, // _...#include <me
	0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x64, 0x6c, 0x69, 0x62, 0x3e, 0x0a, 0x23, 0x69, 0x6e, 0x63, // tal_stdlib>.#inc
	0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x73, 0x69, 0x6d, 0x64, 0x2f, 0x73, 0x69, 0x6d, 0x64, 0x2e, // lude <simd/simd.
	0x68, 0x3e, 0x0a, 0x0a, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, // h>..using namesp
	0x61, 0x63, 0x65, 0x20, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, // ace metal;..stru
	0x63, 0x74, 0x20, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, // ct _Global.{.   
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x78, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, //  float4x4 Stereo
	0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, // _LeftMat;.    fl
	0x6f, 0x61, 0x74, 0x34, 0x78, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, // oat4x4 Stereo_Ri
	0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, // ghtMat;.    floa
	0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, // t4 Stereo_LeftLu
	0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x7d, // minance_Gamma;.}
	0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, // ;..struct xlatMt
	0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, // lMain_out.{.    
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, // float4 bgfx_Frag
	0x44, 0x61, 0x74, 0x61, 0x30, 0x20, 0x5b, 0x5b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x30, 0x29, // Data0 [[color(0)
	0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x78, // ]];.};..struct x
	0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x0a, 0x7b, 0x0a, // latMtlMain_in.{.
	0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, //     float2 v_tex
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x5b, 0x5b, 0x75, 0x73, 0x65, 0x72, 0x28, 0x6c, 0x6f, // coord0 [[user(lo
	0x63, 0x6e, 0x31, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x66, 0x72, 0x61, 0x67, // cn1)]];.};..frag
	0x6d, 0x65, 0x6e, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, // ment xlatMtlMain
	0x5f, 0x6f, 0x75, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, // _out xlatMtlMain
	0x28, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x20, // (xlatMtlMain_in 
	0x69, 0x6e, 0x20, 0x5b, 0x5b, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x5d, 0x5d, 0x2c, // in [[stage_in]],
	0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x20, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, //  constant _Globa
	0x6c, 0x26, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x20, 0x5b, 0x5b, 0x62, 0x75, 0x66, 0x66, // l& _mtl_u [[buff
	0x65, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // er(0)]], texture
	0x32, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3e, 0x20, // 2d_array<float> 
	0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x20, 0x5b, 0x5b, // tex_stereo_fb [[
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x73, 0x61, // texture(0)]], sa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // mpler tex_stereo
	0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x5b, 0x5b, 0x73, 0x61, 0x6d, // _fbSampler [[sam
	0x70, 0x6c, 0x65, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, // pler(0)]]).{.   
	0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, //  xlatMtlMain_out
	0x20, 0x6f, 0x75, 0x74, 0x20, 0x3d, 0x20, 0x7b, 0x7d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, //  out = {};.    f
	0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x33, 0x30, 0x30, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, // loat3 _300 = flo
	0x61, 0x74, 0x33, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, // at3(in.v_texcoor
	0x64, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, // d0, 0.0);.    fl
	0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x33, 0x30, 0x38, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, // oat3 _308 = floa
	0x74, 0x33, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, // t3(in.v_texcoord
	0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x6f, 0x75, 0x74, // 0, 1.0);.    out
	0x2e, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x20, // .bgfx_FragData0 
	0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x70, 0x6f, 0x77, 0x72, 0x28, 0x28, 0x28, // = float4(powr(((
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x70, 0x6f, 0x77, 0x72, 0x28, 0x74, 0x65, 0x78, 0x5f, // float4(powr(tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // stereo_fb.sample
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, // (tex_stereo_fbSa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x33, 0x30, 0x30, 0x2e, 0x78, 0x79, 0x2c, 0x20, // mpler, _300.xy, 
	0x75, 0x69, 0x6e, 0x74, 0x28, 0x72, 0x69, 0x6e, 0x74, 0x28, 0x5f, 0x33, 0x30, 0x30, 0x2e, 0x7a, // uint(rint(_300.z
	0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, // )), level(0.0)).
	0x78, 0x79, 0x7a, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x6d, 0x74, 0x6c, // xyz, float3(_mtl
	0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, // _u.Stereo_LeftLu
	0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, // minance_Gamma.w,
	0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, //  _mtl_u.Stereo_L
	0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, // eftLuminance_Gam
	0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, // ma.w, _mtl_u.Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, // reo_LeftLuminanc
	0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x29, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, // e_Gamma.w)), 1.0
	0x29, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, // ) * _mtl_u.Stere
	0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x66, 0x6c, // o_LeftMat) + (fl
	0x6f, 0x61, 0x74, 0x34, 0x28, 0x70, 0x6f, 0x77, 0x72, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // oat4(powr(tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, // ereo_fb.sample(t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, // ex_stereo_fbSamp
	0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x33, 0x30, 0x38, 0x2e, 0x78, 0x79, 0x2c, 0x20, 0x75, 0x69, // ler, _308.xy, ui
	0x6e, 0x74, 0x28, 0x72, 0x69, 0x6e, 0x74, 0x28, 0x5f, 0x33, 0x30, 0x38, 0x2e, 0x7a, 0x29, 0x29, // nt(rint(_308.z))
	0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x79, // , level(0.0)).xy
	0x7a, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, // z, float3(_mtl_u
	0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, // .Stereo_LeftLumi
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, 0x5f, // nance_Gamma.w, _
	0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, // mtl_u.Stereo_Lef
	0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, // tLuminance_Gamma
	0x2e, 0x77, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, // .w, _mtl_u.Stere
	0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, // o_LeftLuminance_
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x29, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, // Gamma.w)), 1.0) 
	0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // * _mtl_u.Stereo_
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, // RightMat)).xyz, 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x5f, 0x6d, 0x74, // float3(1.0 / _mt
	0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, // l_u.Stereo_LeftL
	0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, // uminance_Gamma.w
	0x2c, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, // , 1.0 / _mtl_u.S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, // tereo_LeftLumina
	0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, 0x31, 0x2e, 0x30, // nce_Gamma.w, 1.0
	0x20, 0x2f, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, //  / _mtl_u.Stereo
	0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, // _LeftLuminance_G
	0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x29, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, // amma.w)), 1.0);.
	0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6f, 0x75, 0x74, 0x3b, 0x0a, //     return out;.
	0x7d, 0x0a, 0x0a, 0x00, 0x00, 0xd0, 0x00,                                                       // }......
};
static const uint8_t fs_pp_stereo_anaglyph_lin_gamma_nodesat_st_essl[8941] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xda, 0x22, // FSH.Jc._......."
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x33, 0x32, 0x30, 0x20, 0x65, // ..#version 320 e
	0x73, 0x0a, 0x23, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x47, 0x4c, 0x5f, // s.#extension GL_
	0x45, 0x58, 0x54, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, // EXT_shader_textu
	0x72, 0x65, 0x5f, 0x6c, 0x6f, 0x64, 0x20, 0x3a, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x0a, // re_lod : enable.
	0x23, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x47, 0x4c, 0x5f, 0x45, 0x58, // #extension GL_EX
	0x54, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x20, // T_texture_array 
	0x3a, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, // : enable.#define
	0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, //  attribute in.#d
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, // efine varying in
	0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, // .precision highp
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3b, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, //  float;.precisio
	0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x69, 0x6e, 0x74, 0x3b, 0x0a, 0x70, 0x72, 0x65, // n highp int;.pre
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x73, 0x61, 0x6d, // cision highp sam
	0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x3b, 0x0a, 0x23, 0x64, 0x65, // pler2DArray;.#de
	0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x4c, 0x6f, // fine texture2DLo
	0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, // d      texture2D
	0x4c, 0x6f, 0x64, 0x45, 0x58, 0x54, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, // LodEXT.#define t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, 0x20, 0x20, // exture2DGrad    
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x47, 0x72, 0x61, 0x64, 0x45, 0x58, //  texture2DGradEX
	0x54, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // T.#define textur
	0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, // e2DProjLod  text
	0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x4c, 0x6f, 0x64, 0x45, 0x58, 0x54, 0x0a, // ure2DProjLodEXT.
	0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, // #define texture2
	0x44, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // DProjGrad textur
	0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, 0x45, 0x58, 0x54, 0x0a, 0x23, // e2DProjGradEXT.#
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, // define textureCu
	0x62, 0x65, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // beLod    texture
	0x43, 0x75, 0x62, 0x65, 0x4c, 0x6f, 0x64, 0x45, 0x58, 0x54, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, // CubeLodEXT.#defi
	0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x47, 0x72, // ne textureCubeGr
	0x61, 0x64, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, // ad   textureCube
	0x47, 0x72, 0x61, 0x64, 0x45, 0x58, 0x54, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, // GradEXT.#define 
	0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // shadow2D(_sample
	0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, // r, _coord) textu
	0x72, 0x65, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, // re(_sampler, _co
	0x6f, 0x72, 0x64, 0x29, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x73, 0x68, 0x61, // ord).#define sha
	0x64, 0x6f, 0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, // dow2DProj(_sampl
	0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x74, 0x65, 0x78, 0x74, // er, _coord) text
	0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // ureProj(_sampler
	0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x0a, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x65, // , _coord).out me
	0x64, 0x69, 0x75, 0x6d, 0x70, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, // diump vec4 bgfx_
	0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, // FragColor;.varyi
	0x6e, 0x67, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x5f, 0x65, 0x79, 0x65, 0x3b, 0x0a, // ng float v_eye;.
	0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x5f, 0x74, // varying vec2 v_t
	0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, // excoord0;.vec3 i
	0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, // nstMul(vec3 _vec
	0x2c, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, // , mat3 _mtx) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, // eturn ( (_vec) *
	0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, //  (_mtx) ); }.vec
	0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, // 3 instMul(mat3 _
	0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, // mtx, vec3 _vec) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, // { return ( (_mtx
	0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, // ) * (_vec) ); }.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, // vec4 instMul(vec
	0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, // 4 _vec, mat4 _mt
	0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, // x) { return ( (_
	0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, // vec) * (_mtx) );
	0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, //  }.vec4 instMul(
	0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // mat4 _mtx, vec4 
	0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // _vec) { return (
	0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, //  (_mtx) * (_vec)
	0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, 0x70, 0x28, //  ); }.float rcp(
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // float _a) { retu
	0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, // rn 1.0/_a; }.vec
	0x32, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, // 2 rcp(vec2 _a) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, //  return vec2(1.0
	0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x70, // )/_a; }.vec3 rcp
	0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // (vec3 _a) { retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, // rn vec3(1.0)/_a;
	0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x34, //  }.vec4 rcp(vec4
	0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, //  _a) { return ve
	0x63, 0x34, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, // c4(1.0)/_a; }.ve
	0x63, 0x32, 0x20, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, // c2 vec2_splat(fl
	0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // oat _x) { return
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, //  vec2(_x, _x); }
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, // .vec3 vec3_splat
	0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // (float _x) { ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, // urn vec3(_x, _x,
	0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, 0x65, 0x63, //  _x); }.vec4 vec
	0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, // 4_splat(float _x
	0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, // ) { return vec4(
	0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, // _x, _x, _x, _x);
	0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, //  }.uvec2 uvec2_s
	0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, // plat(uint _x) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, // return uvec2(_x,
	0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, 0x75, 0x76, //  _x); }.uvec3 uv
	0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, // ec3_splat(uint _
	0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, // x) { return uvec
	0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, // 3(_x, _x, _x); }
	0x0a, 0x75, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, // .uvec4 uvec4_spl
	0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // at(uint _x) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, // turn uvec4(_x, _
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x6d, 0x61, // x, _x, _x); }.ma
	0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, // t4 mtxFromRows(v
	0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, // ec4 _0, vec4 _1,
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, //  vec4 _2, vec4 _
	0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, // 3).{.return tran
	0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, // spose(mat4(_0, _
	0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // 1, _2, _3) );.}.
	0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, // mat4 mtxFromCols
	0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, // (vec4 _0, vec4 _
	0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // 1, vec4 _2, vec4
	0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, //  _3).{.return ma
	0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, // t4(_0, _1, _2, _
	0x33, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, // 3);.}.mat3 mtxFr
	0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, // omRows(vec3 _0, 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, // vec3 _1, vec3 _2
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, // ).{.return trans
	0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, // pose(mat3(_0, _1
	0x2c, 0x20, 0x5f, 0x32, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, // , _2) );.}.mat3 
	0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, // mtxFromCols(vec3
	0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, //  _0, vec3 _1, ve
	0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // c3 _2).{.return 
	0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, // mat3(_0, _1, _2)
	0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, // ;.}.uniform vec4
	0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, //  u_viewRect;.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, // form vec4 u_view
	0x54, 0x65, 0x78, 0x65, 0x6c, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, // Texel;.uniform m
	0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // at4 u_view;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, // orm mat4 u_invVi
	0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, // ew;.uniform mat4
	0x20, 0x75, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, //  u_proj;.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, 0x6a, 0x3b, //  mat4 u_invProj;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, // .uniform mat4 u_
	0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // viewProj;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, // m mat4 u_invView
	0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, // Proj;.uniform ma
	0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, 0x3b, 0x0a, // t4 u_model[32];.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, // uniform mat4 u_m
	0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // odelView;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, // m mat4 u_modelVi
	0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // ewProj;.uniform 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x66, 0x34, // vec4 u_alphaRef4
	0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x66, 0x6c, 0x6f, // ;.float sqr( flo
	0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // at v).{.return v
	0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, // *v;.}.vec2 sqr( 
	0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // vec2 v).{.return
	0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x73, 0x71, 0x72, //  v*v;.}.vec3 sqr
	0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, // ( vec3 v).{.retu
	0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6d, // rn v*v;.}.vec3 m
	0x75, 0x6c, 0x5f, 0x77, 0x31, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x2c, 0x20, 0x6d, // ul_w1( vec3 v, m
	0x61, 0x74, 0x34, 0x20, 0x6d, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // at4 m).{.return 
	0x76, 0x2e, 0x78, 0x2a, 0x6d, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, // v.x*m[0].xyz + (
	0x76, 0x2e, 0x79, 0x2a, 0x6d, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, // v.y*m[1].xyz + (
	0x76, 0x2e, 0x7a, 0x2a, 0x6d, 0x5b, 0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x6d, // v.z*m[2].xyz + m
	0x5b, 0x33, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // [3].xyz));.}.flo
	0x61, 0x74, 0x20, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, // at acos_approx_d
	0x69, 0x76, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, // ivPI( float v).{
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, // .float x = abs(v
	0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, // );.if(1. - x <= 
	0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, // 0.00006103515625
	0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, // ).return (v >= 0
	0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x3b, 0x0a, 0x66, 0x6c, // .) ? 0. : 1.;.fl
	0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, // oat res = ((-0.1
	0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, // 55972/3.14159265
	0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, // 3589793238462643
	0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, // 3832795) * x + (
	0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, // 1.56467/3.141592
	0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, // 6535897932384626
	0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, // 433832795) ) * s
	0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, // qrt(1. - x);.ret
	0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, // urn (v >= 0.) ? 
	0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, // res : 1. - res;.
	0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, // }.float atan2_ap
	0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, // prox_div2PI( flo
	0x61, 0x74, 0x20, 0x79, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x29, 0x0a, 0x7b, // at y, float x).{
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3d, 0x20, 0x61, // .float abs_y = a
	0x62, 0x73, 0x28, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, // bs(y);.float abs
	0x5f, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x78, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, // _x = abs(x);.if(
	0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, // abs_x <= 0.00006
	0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x20, 0x26, 0x26, 0x20, 0x61, 0x62, 0x73, // 103515625 && abs
	0x5f, 0x79, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, // _y <= 0.00006103
	0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x30, // 515625).return 0
	0x2e, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x61, 0x62, // .;.float r = (ab
	0x73, 0x5f, 0x78, 0x20, 0x2d, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x20, 0x2f, 0x20, 0x28, // s_x - abs_y) / (
	0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2b, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x3b, 0x0a, // abs_x + abs_y);.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3d, 0x20, 0x28, 0x28, // float angle = ((
	0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x28, 0x33, 0x2e, 0x2f, 0x38, 0x2e, // x < 0.) ? (3./8.
	0x29, 0x20, 0x3a, 0x20, 0x28, 0x31, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x29, 0x0a, 0x2b, 0x20, 0x28, // ) : (1./8.)).+ (
	0x30, 0x2e, 0x32, 0x31, 0x31, 0x38, 0x36, 0x38, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, // 0.211868 /(2.*3.
	0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, // 1415926535897932
	0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, // 384626433832795)
	0x20, 0x2a, 0x20, 0x72, 0x20, 0x2a, 0x20, 0x72, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x39, 0x38, 0x37, //  * r * r - 0.987
	0x33, 0x30, 0x35, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, // 305 /(2.*3.14159
	0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, // 2653589793238462
	0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, // 6433832795)) * (
	0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x72, 0x20, 0x3a, 0x20, // (x < 0.) ? -r : 
	0x72, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x79, 0x20, 0x3c, 0x20, // r);.return (y < 
	0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3a, 0x20, 0x61, // 0.) ? -angle : a
	0x6e, 0x67, 0x6c, 0x65, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x73, // ngle;.}.float as
	0x69, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, // in_approx_divPI(
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, //  float v).{.floa
	0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, // t x = abs(v);.if
	0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, // (1. - x <= 0.000
	0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, // 06103515625).ret
	0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, // urn (v >= 0.) ? 
	0x30, 0x2e, 0x35, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // 0.5 : -0.5;.floa
	0x74, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, // t res = ((-0.155
	0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, // 972/3.1415926535
	0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, // 8979323846264338
	0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, // 32795) * x + (1.
	0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, // 56467/3.14159265
	0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, // 3589793238462643
	0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, // 3832795) ) * sqr
	0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // t(1. - x);.retur
	0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, // n (v >= 0.) ? 0.
	0x35, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x20, 0x2b, // 5 - res : -0.5 +
	0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x61, 0x79, //  res;.}.vec2 ray
	0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x75, // _to_equirectangu
	0x6c, 0x61, 0x72, 0x5f, 0x75, 0x76, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x61, 0x79, // lar_uv( vec3 ray
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // ).{.return vec2(
	0x0a, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, // .0.5 + atan2_app
	0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x79, // rox_div2PI(ray.y
	0x2c, 0x20, 0x72, 0x61, 0x79, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, // , ray.x),.acos_a
	0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, // pprox_divPI(ray.
	0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, // z));.}.float Inv
	0x73, 0x52, 0x47, 0x42, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // sRGB( float colo
	0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, // r).{.if (color <
	0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, 0x34, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // = 0.04045).retur
	0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, // n color * (1.0/1
	0x32, 0x2e, 0x39, 0x32, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, // 2.92);.else.retu
	0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, // rn pow(color * (
	0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, // 1.0/1.055) + (0.
	0x30, 0x35, 0x35, 0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x29, // 055/1.055), 2.4)
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x52, 0x65, 0x63, // ;.}.float InvRec
	0x37, 0x30, 0x39, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // 709( float color
	0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, // ).{.if (color <=
	0x20, 0x30, 0x2e, 0x30, 0x38, 0x31, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, //  0.081).return c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x34, 0x2e, 0x35, 0x29, // olor * (1.0/4.5)
	0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, // ;.else.return po
	0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, // w(color * (1.0/1
	0x2e, 0x30, 0x39, 0x39, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x2f, 0x31, // .099) + (0.099/1
	0x2e, 0x30, 0x39, 0x39, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x30, 0x2e, 0x34, 0x35, 0x29, // .099), 1.0/0.45)
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, // ;.}.float InvGam
	0x6d, 0x61, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, // ma( float color)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, // .{.return InvsRG
	0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, // B(color);.}.vec3
	0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, //  InvGamma( vec3 
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // color).{.return 
	0x76, 0x65, 0x63, 0x33, 0x28, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, // vec3(InvGamma(co
	0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, // lor.x),InvGamma(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, // color.y),InvGamm
	0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // a(color.z));.}.v
	0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, // ec3 InvToneMap( 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, // vec3 color).{.fl
	0x6f, 0x61, 0x74, 0x20, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x30, 0x2e, // oat inv_2bh = 0.
	0x35, 0x2f, 0x30, 0x2e, 0x32, 0x35, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x68, // 5/0.25;.float bh
	0x20, 0x3d, 0x20, 0x34, 0x2e, 0x30, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2d, 0x20, 0x32, 0x2e, //  = 4.0*0.25 - 2.
	0x30, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // 0;.return (color
	0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2b, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x63, 0x6f, //  - 1.0 + sqrt(co
	0x6c, 0x6f, 0x72, 0x2a, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x20, 0x62, 0x68, 0x29, // lor*(color + bh)
	0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x2a, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, //  + 1.0))*inv_2bh
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x20, // ;.}.float sRGB( 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // float f).{.float
	0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, //  s;.if (f <= 0.0
	0x30, 0x33, 0x31, 0x33, 0x30, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, // 031308).s = 12.9
	0x32, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, // 2 * f;.else.s = 
	0x31, 0x2e, 0x30, 0x35, 0x35, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x31, // 1.055 * pow(f, 1
	0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x34, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x3b, // .0/2.4) - 0.055;
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // .return s;.}.flo
	0x61, 0x74, 0x20, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // at Rec709( float
	0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, //  f).{.float s;.i
	0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, 0x29, 0x0a, 0x73, // f (f <= 0.018).s
	0x20, 0x3d, 0x20, 0x34, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, //  = 4.5 * f;.else
	0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, // .s = 1.099 * pow
	0x28, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x39, // (f, 0.45) - 0.09
	0x39, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // 9;.return s;.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x66, 0x6c, // loat FBGamma( fl
	0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // oat color).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, // urn sRGB(color);
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, // .}.vec2 FBGamma(
	0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, //  vec2 color).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, // eturn vec2(FBGam
	0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, // ma(color.x),FBGa
	0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, // mma(color.y));.}
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, // .vec3 FBGamma( v
	0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // ec3 color).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, // urn vec3(FBGamma
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, // (color.x),FBGamm
	0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, // a(color.y),FBGam
	0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // ma(color.z));.}.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x32, 0x32, 0x28, 0x20, // vec3 FBGamma22( 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // vec3 color).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, // turn vec3(pow(co
	0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, // lor.x, 1.0/2.2),
	0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, 0x30, // pow(color.y, 1.0
	0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, // /2.2),pow(color.
	0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // z, 1.0/2.2));.}.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, // float FBToneMap(
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, //  float l).{.retu
	0x72, 0x6e, 0x20, 0x6c, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, // rn l * ((l*0.25 
	0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, // + 1.0) / (l + 1.
	0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x54, 0x6f, // 0));.}.vec2 FBTo
	0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // neMap( vec2 colo
	0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, // r).{.float l = d
	0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, // ot(color,vec2(0.
	0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, // 176204+0.0108109
	0x2a, 0x30, 0x2e, 0x35, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2b, 0x30, 0x2e, // *0.5,0.812985+0.
	0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x3b, 0x0a, 0x72, // 0108109*0.5));.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, // eturn color * ((
	0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, // l*0.25 + 1.0) / 
	0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // (l + 1.0));.}.ve
	0x63, 0x33, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, // c3 FBToneMap( ve
	0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // c3 color).{.floa
	0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, // t l = dot(color,
	0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2c, 0x30, 0x2e, // vec3(0.176204,0.
	0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2c, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, // 812985,0.0108109
	0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // ));.return color
	0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, //  * ((l*0.25 + 1.
	0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, // 0) / (l + 1.0));
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, // .}.vec4 Additive
	0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, // ( vec4 cBase, ve
	0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // c4 cBlend, float
	0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, //  percent).{.retu
	0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2b, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // rn cBase + cBlen
	0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // d*percent;.}.vec
	0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // 3 Screen ( vec3 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, // cBase, vec3 cBle
	0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, // nd).{.return 1.0
	0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, //  - (1.0 - cBase)
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, //  * (1.0 - cBlend
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, // );.}.vec4 Screen
	0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, //  ( vec4 cBase, v
	0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // ec4 cBlend).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, // turn 1.0 - (1.0 
	0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, // - cBase) * (1.0 
	0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // - cBlend);.}.vec
	0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, // 3 ScreenHDR ( ve
	0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, // c3 cBase, vec3 c
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // Blend).{.return 
	0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, // max(1.0 - (1.0 -
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, //  cBase) * (1.0 -
	0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, //  cBlend), vec3(0
	0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // .,0.,0.));.}.vec
	0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, // 4 ScreenHDR ( ve
	0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, // c4 cBase, vec4 c
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // Blend).{.return 
	0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, // max(1.0 - (1.0 -
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, //  cBase) * (1.0 -
	0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, //  cBlend), vec4(0
	0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // .,0.,0.,0.));.}.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x20, 0x28, 0x20, // vec4 Multiply ( 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // vec4 cBase, vec4
	0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, //  cBlend, float p
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // ercent).{.return
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2a, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, //  cBase * cBlend*
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, // percent;.}.vec4 
	0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, // Overlay ( vec4 c
	0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // Base, vec4 cBlen
	0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, // d).{.vec4 cNew =
	0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, //  step(0.5, cBase
	0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, // );.cNew = mix(cB
	0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, // ase*cBlend*2.0, 
	0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, // 1.0-2.0*(1.0-cBa
	0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, // se)*(1.0-cBlend)
	0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // , cNew);.return 
	0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, // cNew;.}.vec4 Ove
	0x72, 0x6c, 0x61, 0x79, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, // rlayHDR ( vec4 c
	0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // Base, vec4 cBlen
	0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, // d).{.vec4 cNew =
	0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, //  step(0.5, cBase
	0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x6d, 0x69, // );.cNew = max(mi
	0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, // x(cBase*cBlend*2
	0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, // .0, 1.0-2.0*(1.0
	0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, // -cBase)*(1.0-cBl
	0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, // end), cNew), vec
	0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, // 4(0.,0.,0.,0.));
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, // .return cNew;.}.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x73, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, // vec3 cos_hemisph
	0x65, 0x72, 0x65, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, // ere_sample( vec2
	0x20, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x68, 0x69, 0x20, //  t).{.float phi 
	0x3d, 0x20, 0x74, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x28, 0x32, 0x2e, 0x30, 0x2a, 0x33, 0x2e, 0x31, // = t.y * (2.0*3.1
	0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, // 4159265358979323
	0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x3b, // 84626433832795);
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, // .float cosTheta 
	0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x74, 0x2e, 0x78, // = sqrt(1.0 - t.x
	0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, // );.float sinThet
	0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, // a = sqrt(t.x);.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x70, 0x2c, 0x63, 0x70, 0x3b, 0x0a, 0x7b, 0x73, 0x70, 0x3d, // loat sp,cp;.{sp=
	0x73, 0x69, 0x6e, 0x28, 0x70, 0x68, 0x69, 0x29, 0x3b, 0x63, 0x70, 0x3d, 0x63, 0x6f, 0x73, 0x28, // sin(phi);cp=cos(
	0x70, 0x68, 0x69, 0x29, 0x3b, 0x7d, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // phi);};.return v
	0x65, 0x63, 0x33, 0x28, 0x63, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, // ec3(cp * sinThet
	0x61, 0x2c, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x73, 0x70, 0x20, // a, cosTheta, sp 
	0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // * sinTheta);.}.v
	0x65, 0x63, 0x33, 0x20, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x76, 0x65, // ec3 rotate_to_ve
	0x63, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, // ctor_upper( vec3
	0x20, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, //  vec, vec3 norma
	0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, // l).{.if(normal.y
	0x20, 0x3e, 0x20, 0x2d, 0x30, 0x2e, 0x39, 0x39, 0x39, 0x39, 0x39, 0x29, 0x0a, 0x7b, 0x0a, 0x66, //  > -0.99999).{.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x28, 0x31, 0x2e, // loat h = 1.0/(1.
	0x30, 0x2b, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, // 0+normal.y);.flo
	0x61, 0x74, 0x20, 0x68, 0x7a, 0x20, 0x3d, 0x20, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, // at hz = h*normal
	0x2e, 0x7a, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x3d, 0x20, // .z;.float hzx = 
	0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x3b, 0x0a, 0x72, 0x65, 0x74, // hz*normal.x;.ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, // urn vec3(.vec.x 
	0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x7a, 0x2a, 0x6e, // * (normal.y+hz*n
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x29, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x79, // ormal.z) + vec.y
	0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, //  * normal.x - ve
	0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, // c.z * hzx,.vec.y
	0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x2d, 0x20, 0x76, 0x65, //  * normal.y - ve
	0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, // c.x * normal.x -
	0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, //  vec.z * normal.
	0x7a, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, // z,.vec.y * norma
	0x6c, 0x2e, 0x7a, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x68, 0x7a, // l.z - vec.x * hz
	0x78, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, // x + vec.z * (nor
	0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, // mal.y+h*normal.x
	0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, // *normal.x));.}.e
	0x6c, 0x73, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x2d, 0x76, 0x65, 0x63, 0x3b, // lse return -vec;
	0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // .}.uniform vec4 
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x53, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, // Stereo_Saturatio
	0x6e, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // n;.uniform vec4 
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, // Stereo_MS_ZPD_YA
	0x78, 0x69, 0x73, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, // xis;.uniform sam
	0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x20, 0x74, 0x65, 0x78, 0x5f, // pler2DArray tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, // stereo_fb;.unifo
	0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, // rm sampler2DArra
	0x79, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, // y tex_stereo_dep
	0x74, 0x68, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, // th;.uniform vec4
	0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, 0x76, 0x65, 0x63, //  w_h_height;.vec
	0x33, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, // 3 gatherEyeColor
	0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x69, 0x73, // (vec2 u, bool is
	0x4c, 0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, // Left).{.return t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x6f, 0x64, // exture2DArrayLod
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, // (tex_stereo_fb, 
	0x76, 0x65, 0x63, 0x33, 0x28, 0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, 0x20, 0x69, // vec3(u.x, u.y, i
	0x73, 0x4c, 0x65, 0x66, 0x74, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x30, 0x20, 0x3a, 0x20, 0x31, 0x2e, // sLeft ? 0.0 : 1.
	0x30, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // 0), 0.).rgb;.}.v
	0x6f, 0x69, 0x64, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x69, // oid gatherLeftRi
	0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, // ghtColors(vec2 u
	0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x63, 0x6f, 0x6c, 0x2c, // , out vec3 lcol,
	0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x6f, 0x6c, 0x29, 0x0a, //  out vec3 rcol).
	0x7b, 0x0a, 0x6c, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // {.lcol = texture
	0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, // 2DArrayLod(tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x75, // tereo_fb, vec3(u
	0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2c, 0x20, 0x30, 0x2e, // .x, u.y, 0.), 0.
	0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x72, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, // ).xyz;.rcol = te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x6f, 0x64, 0x28, // xture2DArrayLod(
	0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x76, // tex_stereo_fb, v
	0x65, 0x63, 0x33, 0x28, 0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, // ec3(u.x, u.y, 1.
	0x29, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, // ), 0.).xyz;.}.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // iform mat4 Stere
	0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, // o_LeftMat;.unifo
	0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, // rm mat4 Stereo_R
	0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // ightMat;.uniform
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, //  vec4 Stereo_Lef
	0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, // tLuminance_Gamma
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, // ;.uniform vec4 S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, // tereo_RightLumin
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x3b, 0x0a, 0x76, // ance_DynDesat;.v
	0x6f, 0x69, 0x64, 0x20, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x65, 0x73, 0x61, 0x74, // oid DynamicDesat
	0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, // Anaglyph( vec3 l
	0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // Col, vec3 rCol, 
	0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, // out vec3 lDesatC
	0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x44, 0x65, // ol, out vec3 rDe
	0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // satCol).{.float 
	0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, // left2LeftLum = d
	0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // ot(lCol, Stereo_
	0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, // LeftLuminance_Ga
	0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // mma.xyz);.float 
	0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, // left2RightLum = 
	0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // dot(lCol, Stereo
	0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, // _RightLuminance_
	0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, // DynDesat.xyz);.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, // loat right2LeftL
	0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, // um = dot(rCol, S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, // tereo_LeftLumina
	0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, // nce_Gamma.xyz);.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, // float right2Righ
	0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, // tLum = dot(rCol,
	0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, //  Stereo_RightLum
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, // inance_DynDesat.
	0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, // xyz);.float left
	0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, // Lum = left2LeftL
	0x75, 0x6d, 0x20, 0x2b, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, // um + left2RightL
	0x75, 0x6d, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, // um;.float rightL
	0x75, 0x6d, 0x20, 0x3d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, // um = right2LeftL
	0x75, 0x6d, 0x20, 0x2b, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, // um + right2Right
	0x4c, 0x75, 0x6d, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, // Lum;.float leftD
	0x65, 0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, // esat = Stereo_Ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, // ghtLuminance_Dyn
	0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x6c, // Desat.w * abs((l
	0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x6c, 0x65, // eft2LeftLum - le
	0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, // ft2RightLum) / (
	0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, // leftLum + 0.0001
	0x29, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, // ));.float rightD
	0x65, 0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, // esat = Stereo_Ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, // ghtLuminance_Dyn
	0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x72, // Desat.w * abs((r
	0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x72, // ight2LeftLum - r
	0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, // ight2RightLum) /
	0x20, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, //  (rightLum + 0.0
	0x30, 0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, // 001));.lDesatCol
	0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, //  = mix(lCol, vec
	0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x29, // 3_splat(leftLum)
	0x2c, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x72, 0x44, // , leftDesat);.rD
	0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x72, 0x43, // esatCol = mix(rC
	0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x72, // ol, vec3_splat(r
	0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, // ightLum), rightD
	0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x4c, 0x69, // esat);.}.vec3 Li
	0x6e, 0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, // nearAnaglyph( ve
	0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, // c3 lCol, vec3 rC
	0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // ol).{.vec3 color
	0x20, 0x3d, 0x20, 0x28, 0x28, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x6c, 0x43, 0x6f, 0x6c, //  = (( (vec4(lCol
	0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // , 1.)) * (Stereo
	0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x20, // _LeftMat) ) + ( 
	0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, // (vec4(rCol, 1.))
	0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, //  * (Stereo_Right
	0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x72, 0x65, 0x74, // Mat) )).rgb;.ret
	0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, // urn color;.}.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // form vec4 Stereo
	0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, // _DeghostGamma;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, // niform mat4 Ster
	0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, // eo_DeghostFilter
	0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x6e, // ;.vec3 DeghostAn
	0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, // aglyph( vec3 lCo
	0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, // l, vec3 rCol).{.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, 0x6e, // vec3 color = Lin
	0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, // earAnaglyph(lCol
	0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // , rCol);.return 
	0x28, 0x20, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x53, 0x74, // ( (pow(color, St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, // ereo_DeghostGamm
	0x61, 0x2e, 0x72, 0x67, 0x62, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, // a.rgb)) * (mat3(
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, // Stereo_DeghostFi
	0x6c, 0x74, 0x65, 0x72, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, // lter[0].xyz, Ste
	0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, // reo_DeghostFilte
	0x72, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // r[1].xyz, Stereo
	0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x32, // _DeghostFilter[2
	0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, // ].xyz)) );.}.voi
	0x64, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // d main().{.vec3 
	0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x3b, 0x0a, 0x67, 0x61, 0x74, 0x68, // lCol, rCol;.gath
	0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, // erLeftRightColor
	0x73, 0x28, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2c, 0x20, 0x6c, // s(v_texcoord0, l
	0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x6c, 0x43, 0x6f, 0x6c, // Col, rCol);.lCol
	0x20, 0x3d, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, //  = pow(lCol, vec
	0x33, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // 3(Stereo_LeftLum
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, // inance_Gamma.w, 
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, // Stereo_LeftLumin
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, 0x53, 0x74, // ance_Gamma.w, St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, // ereo_LeftLuminan
	0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x43, // ce_Gamma.w));.rC
	0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, // ol = pow(rCol, v
	0x65, 0x63, 0x33, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, // ec3(Stereo_LeftL
	0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, // uminance_Gamma.w
	0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // , Stereo_LeftLum
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, // inance_Gamma.w, 
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, // Stereo_LeftLumin
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x29, 0x29, 0x3b, 0x0a, // ance_Gamma.w));.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, 0x6e, // vec3 color = Lin
	0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, // earAnaglyph(lCol
	0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, // , rCol);.bgfx_Fr
	0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x70, // agColor = vec4(p
	0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x31, // ow(color, vec3(1
	0x2e, 0x2f, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // ./Stereo_LeftLum
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, // inance_Gamma.w, 
	0x31, 0x2e, 0x2f, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, // 1./Stereo_LeftLu
	0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, // minance_Gamma.w,
	0x20, 0x31, 0x2e, 0x2f, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, //  1./Stereo_LeftL
	0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, // uminance_Gamma.w
	0x29, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x00,                   // )), 1.0);.}..
};
static const uint8_t fs_pp_stereo_anaglyph_lin_gamma_nodesat_st_glsl[8966] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf3, 0x22, // FSH.Jc._......."
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x34, 0x34, 0x30, 0x0a, 0x23, // ..#version 440.#
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x47, 0x4c, 0x5f, 0x45, 0x58, 0x54, // extension GL_EXT
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x20, 0x3a, // _texture_array :
	0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x0a, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, //  enable.out vec4
	0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, //  bgfx_FragColor;
	0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, // .#define gl_Frag
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, // Color bgfx_FragC
	0x6f, 0x6c, 0x6f, 0x72, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, // olor.#define tex
	0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ture2D          
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, // texture.#define 
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, // texture2DLod    
	0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, //    textureLod.#d
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x47, // efine texture2DG
	0x72, 0x61, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // rad      texture
	0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, // Grad.#define tex
	0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, // ture2DProjLod   
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x4c, 0x6f, 0x64, 0x0a, 0x23, // textureProjLod.#
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, // define texture2D
	0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // ProjGrad  textur
	0x65, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, // eProjGrad.#defin
	0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x4c, 0x6f, 0x64, // e textureCubeLod
	0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x0a, //      textureLod.
	0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, // #define textureC
	0x75, 0x62, 0x65, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, // ubeGrad    textu
	0x72, 0x65, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, // reGrad.#define t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x33, 0x44, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // exture3D        
	0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, //   texture.#defin
	0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x4c, 0x6f, 0x64, 0x4f, 0x66, // e texture2DLodOf
	0x66, 0x73, 0x65, 0x74, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x4f, // fset textureLodO
	0x66, 0x66, 0x73, 0x65, 0x74, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x61, 0x74, // ffset.#define at
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, // tribute in.#defi
	0x6e, 0x65, 0x20, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, // ne varying in.#d
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x62, 0x67, 0x66, 0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, // efine bgfxShadow
	0x32, 0x44, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, // 2D(_sampler, _co
	0x6f, 0x72, 0x64, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, // ord)     vec4_sp
	0x6c, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x5f, 0x73, 0x61, 0x6d, // lat(texture(_sam
	0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x29, 0x0a, // pler, _coord) ).
	0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x62, 0x67, 0x66, 0x78, 0x53, 0x68, 0x61, 0x64, // #define bgfxShad
	0x6f, 0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // ow2DProj(_sample
	0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, // r, _coord) vec4_
	0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, // splat(texturePro
	0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, // j(_sampler, _coo
	0x72, 0x64, 0x29, 0x20, 0x29, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x66, 0x6c, // rd) ).varying fl
	0x6f, 0x61, 0x74, 0x20, 0x76, 0x5f, 0x65, 0x79, 0x65, 0x3b, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, // oat v_eye;.varyi
	0x6e, 0x67, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, // ng vec2 v_texcoo
	0x72, 0x64, 0x30, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, // rd0;.vec3 instMu
	0x6c, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, // l(vec3 _vec, mat
	0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // 3 _mtx) { return
	0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, //  ( (_vec) * (_mt
	0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, // x) ); }.vec3 ins
	0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, // tMul(mat3 _mtx, 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // vec3 _vec) { ret
	0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, // urn ( (_mtx) * (
	0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, // _vec) ); }.vec4 
	0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, // instMul(vec4 _ve
	0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, // c, mat4 _mtx) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, // return ( (_vec) 
	0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, // * (_mtx) ); }.ve
	0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x20, // c4 instMul(mat4 
	0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, // _mtx, vec4 _vec)
	0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, //  { return ( (_mt
	0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, // x) * (_vec) ); }
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, 0x70, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, // .float rcp(float
	0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, //  _a) { return 1.
	0x30, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x63, 0x70, // 0/_a; }.vec2 rcp
	0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // (vec2 _a) { retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, // rn vec2(1.0)/_a;
	0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x33, //  }.vec3 rcp(vec3
	0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, //  _a) { return ve
	0x63, 0x33, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, // c3(1.0)/_a; }.ve
	0x63, 0x34, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x61, 0x29, 0x20, // c4 rcp(vec4 _a) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x31, 0x2e, // { return vec4(1.
	0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x65, // 0)/_a; }.vec2 ve
	0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, // c2_splat(float _
	0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, // x) { return vec2
	0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, // (_x, _x); }.vec3
	0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, //  vec3_splat(floa
	0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // t _x) { return v
	0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, // ec3(_x, _x, _x);
	0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, //  }.vec4 vec4_spl
	0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, // at(float _x) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, // eturn vec4(_x, _
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, // x, _x, _x); }.uv
	0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, // ec2 uvec2_splat(
	0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, // uint _x) { retur
	0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, // n uvec2(_x, _x);
	0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, //  }.uvec3 uvec3_s
	0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, // plat(uint _x) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, // return uvec3(_x,
	0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, //  _x, _x); }.uvec
	0x34, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, // 4 uvec4_splat(ui
	0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // nt _x) { return 
	0x75, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, // uvec4(_x, _x, _x
	0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, // , _x); }.mat4 mt
	0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, // xFromRows(vec4 _
	0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // 0, vec4 _1, vec4
	0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, //  _2, vec4 _3).{.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, // return transpose
	0x28, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, // (mat4(_0, _1, _2
	0x2c, 0x20, 0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, // , _3) );.}.mat4 
	0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, // mtxFromCols(vec4
	0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, //  _0, vec4 _1, ve
	0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, // c4 _2, vec4 _3).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, // {.return mat4(_0
	0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x3b, 0x0a, 0x7d, // , _1, _2, _3);.}
	0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, // .mat3 mtxFromRow
	0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // s(vec3 _0, vec3 
	0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, // _1, vec3 _2).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, // eturn transpose(
	0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, // mat3(_0, _1, _2)
	0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, //  );.}.mat3 mtxFr
	0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, // omCols(vec3 _0, 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, // vec3 _1, vec3 _2
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x28, // ).{.return mat3(
	0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, // _0, _1, _2);.}.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, // niform vec4 u_vi
	0x65, 0x77, 0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // ewRect;.uniform 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x54, 0x65, 0x78, 0x65, 0x6c, // vec4 u_viewTexel
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, // ;.uniform mat4 u
	0x5f, 0x76, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, // _view;.uniform m
	0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, // at4 u_invView;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x70, 0x72, // niform mat4 u_pr
	0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, // oj;.uniform mat4
	0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, //  u_invProj;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x50, // orm mat4 u_viewP
	0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, // roj;.uniform mat
	0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, // 4 u_invViewProj;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, // .uniform mat4 u_
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, // model[32];.unifo
	0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, // rm mat4 u_modelV
	0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, // iew;.uniform mat
	0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, // 4 u_modelViewPro
	0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // j;.uniform vec4 
	0x75, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x66, 0x34, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, // u_alphaRef4;.flo
	0x61, 0x74, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, // at sqr( float v)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, // .{.return v*v;.}
	0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, // .vec2 sqr( vec2 
	0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, // v).{.return v*v;
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, // .}.vec3 sqr( vec
	0x33, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, // 3 v).{.return v*
	0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6d, 0x75, 0x6c, 0x5f, 0x77, 0x31, // v;.}.vec3 mul_w1
	0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, // ( vec3 v, mat4 m
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2e, 0x78, 0x2a, 0x6d, // ).{.return v.x*m
	0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x79, 0x2a, 0x6d, // [0].xyz + (v.y*m
	0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x7a, 0x2a, 0x6d, // [1].xyz + (v.z*m
	0x5b, 0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x6d, 0x5b, 0x33, 0x5d, 0x2e, 0x78, // [2].xyz + m[3].x
	0x79, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x63, // yz));.}.float ac
	0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, // os_approx_divPI(
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, //  float v).{.floa
	0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, // t x = abs(v);.if
	0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, // (1. - x <= 0.000
	0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, // 06103515625).ret
	0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, // urn (v >= 0.) ? 
	0x30, 0x2e, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, // 0. : 1.;.float r
	0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, // es = ((-0.155972
	0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, // /3.1415926535897
	0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, // 9323846264338327
	0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, // 95) * x + (1.564
	0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, // 67/3.14159265358
	0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, // 9793238462643383
	0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, // 2795) ) * sqrt(1
	0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // . - x);.return (
	0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, // v >= 0.) ? res :
	0x20, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, //  1. - res;.}.flo
	0x61, 0x74, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, // at atan2_approx_
	0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x79, 0x2c, // div2PI( float y,
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, //  float x).{.floa
	0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x79, 0x29, // t abs_y = abs(y)
	0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3d, 0x20, // ;.float abs_x = 
	0x61, 0x62, 0x73, 0x28, 0x78, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, // abs(x);.if(abs_x
	0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, //  <= 0.0000610351
	0x35, 0x36, 0x32, 0x35, 0x20, 0x26, 0x26, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3c, 0x3d, // 5625 && abs_y <=
	0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, //  0.0000610351562
	0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x30, 0x2e, 0x3b, 0x0a, 0x66, 0x6c, // 5).return 0.;.fl
	0x6f, 0x61, 0x74, 0x20, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2d, // oat r = (abs_x -
	0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, //  abs_y) / (abs_x
	0x20, 0x2b, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, //  + abs_y);.float
	0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, //  angle = ((x < 0
	0x2e, 0x29, 0x20, 0x3f, 0x20, 0x28, 0x33, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x20, 0x3a, 0x20, 0x28, // .) ? (3./8.) : (
	0x31, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x29, 0x0a, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x32, 0x31, 0x31, // 1./8.)).+ (0.211
	0x38, 0x36, 0x38, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, // 868 /(2.*3.14159
	0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, // 2653589793238462
	0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x72, 0x20, // 6433832795) * r 
	0x2a, 0x20, 0x72, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x39, 0x38, 0x37, 0x33, 0x30, 0x35, 0x20, 0x2f, // * r - 0.987305 /
	0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, // (2.*3.1415926535
	0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, // 8979323846264338
	0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, // 32795)) * ((x < 
	0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x72, 0x20, 0x3a, 0x20, 0x72, 0x29, 0x3b, 0x0a, 0x72, // 0.) ? -r : r);.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x79, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, // eturn (y < 0.) ?
	0x20, 0x2d, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3a, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x3b, //  -angle : angle;
	0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x73, 0x69, 0x6e, 0x5f, 0x61, 0x70, // .}.float asin_ap
	0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, // prox_divPI( floa
	0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, // t v).{.float x =
	0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, //  abs(v);.if(1. -
	0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, //  x <= 0.00006103
	0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // 515625).return (
	0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x3a, // v >= 0.) ? 0.5 :
	0x20, 0x2d, 0x30, 0x2e, 0x35, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, //  -0.5;.float res
	0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, //  = ((-0.155972/3
	0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, // .141592653589793
	0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, // 2384626433832795
	0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, // ) * x + (1.56467
	0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, // /3.1415926535897
	0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, // 9323846264338327
	0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, // 95) ) * sqrt(1. 
	0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, // - x);.return (v 
	0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x2d, 0x20, 0x72, // >= 0.) ? 0.5 - r
	0x65, 0x73, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x65, 0x73, 0x3b, // es : -0.5 + res;
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x61, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x65, // .}.vec2 ray_to_e
	0x71, 0x75, 0x69, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x75, // quirectangular_u
	0x76, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x61, 0x79, 0x29, 0x0a, 0x7b, 0x0a, 0x72, // v( vec3 ray).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x0a, 0x30, 0x2e, 0x35, 0x20, // eturn vec2(.0.5 
	0x2b, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, // + atan2_approx_d
	0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x79, 0x2c, 0x20, 0x72, 0x61, 0x79, // iv2PI(ray.y, ray
	0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, // .x),.acos_approx
	0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, // _divPI(ray.z));.
	0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, // }.float InvsRGB(
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, //  float color).{.
	0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, // if (color <= 0.0
	0x34, 0x30, 0x34, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, // 4045).return col
	0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x29, // or * (1.0/12.92)
	0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, // ;.else.return po
	0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, // w(color * (1.0/1
	0x2e, 0x30, 0x35, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x2f, 0x31, // .055) + (0.055/1
	0x2e, 0x30, 0x35, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // .055), 2.4);.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x20, // loat InvRec709( 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, // float color).{.i
	0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x38, // f (color <= 0.08
	0x31, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, // 1).return color 
	0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x34, 0x2e, 0x35, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, // * (1.0/4.5);.els
	0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, // e.return pow(col
	0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, // or * (1.0/1.099)
	0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, //  + (0.099/1.099)
	0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // , 1.0/0.45);.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x66, // loat InvGamma( f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // loat color).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, // turn InvsRGB(col
	0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x47, // or);.}.vec3 InvG
	0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // amma( vec3 color
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, // ).{.return vec3(
	0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, // InvGamma(color.x
	0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // ),InvGamma(color
	0x2e, 0x79, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, // .y),InvGamma(col
	0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, // or.z));.}.vec3 I
	0x6e, 0x76, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // nvToneMap( vec3 
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x69, // color).{.float i
	0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x30, 0x2e, 0x35, 0x2f, 0x30, 0x2e, 0x32, // nv_2bh = 0.5/0.2
	0x35, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x34, 0x2e, // 5;.float bh = 4.
	0x30, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2d, 0x20, 0x32, 0x2e, 0x30, 0x3b, 0x0a, 0x72, 0x65, // 0*0.25 - 2.0;.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2d, 0x20, 0x31, 0x2e, // turn (color - 1.
	0x30, 0x20, 0x2b, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2a, 0x28, // 0 + sqrt(color*(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x20, 0x62, 0x68, 0x29, 0x20, 0x2b, 0x20, 0x31, 0x2e, // color + bh) + 1.
	0x30, 0x29, 0x29, 0x2a, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // 0))*inv_2bh;.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // loat sRGB( float
	0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, //  f).{.float s;.i
	0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x33, 0x31, 0x33, 0x30, // f (f <= 0.003130
	0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x20, 0x2a, 0x20, 0x66, // 8).s = 12.92 * f
	0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x35, 0x35, // ;.else.s = 1.055
	0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, //  * pow(f, 1.0/2.
	0x34, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // 4) - 0.055;.retu
	0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x52, 0x65, // rn s;.}.float Re
	0x63, 0x37, 0x30, 0x39, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, // c709( float f).{
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, // .float s;.if (f 
	0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x34, 0x2e, // <= 0.018).s = 4.
	0x35, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, // 5 * f;.else.s = 
	0x31, 0x2e, 0x30, 0x39, 0x39, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x30, // 1.099 * pow(f, 0
	0x2e, 0x34, 0x35, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x3b, 0x0a, 0x72, 0x65, // .45) - 0.099;.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // turn s;.}.float 
	0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, // FBGamma( float c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, // olor).{.return s
	0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // RGB(color);.}.ve
	0x63, 0x32, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, // c2 FBGamma( vec2
	0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, //  color).{.return
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, //  vec2(FBGamma(co
	0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, // lor.x),FBGamma(c
	0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, // olor.y));.}.vec3
	0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, //  FBGamma( vec3 c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // olor).{.return v
	0x65, 0x63, 0x33, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // ec3(FBGamma(colo
	0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, // r.x),FBGamma(col
	0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, // or.y),FBGamma(co
	0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // lor.z));.}.vec3 
	0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x32, 0x32, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // FBGamma22( vec3 
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // color).{.return 
	0x76, 0x65, 0x63, 0x33, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, // vec3(pow(color.x
	0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, // , 1.0/2.2),pow(c
	0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, // olor.y, 1.0/2.2)
	0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x2c, 0x20, 0x31, 0x2e, // ,pow(color.z, 1.
	0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // 0/2.2));.}.float
	0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, //  FBToneMap( floa
	0x74, 0x20, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6c, 0x20, // t l).{.return l 
	0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, // * ((l*0.25 + 1.0
	0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, // ) / (l + 1.0));.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, // }.vec2 FBToneMap
	0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, // ( vec2 color).{.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, // float l = dot(co
	0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, // lor,vec2(0.17620
	0x34, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x2c, // 4+0.0108109*0.5,
	0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, // 0.812985+0.01081
	0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // 09*0.5));.return
	0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, //  color * ((l*0.2
	0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, // 5 + 1.0) / (l + 
	0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, // 1.0));.}.vec3 FB
	0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, // ToneMap( vec3 co
	0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, // lor).{.float l =
	0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x33, 0x28, //  dot(color,vec3(
	0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, // 0.176204,0.81298
	0x35, 0x2c, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x29, 0x29, 0x3b, 0x0a, 0x72, // 5,0.0108109));.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, // eturn color * ((
	0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, // l*0.25 + 1.0) / 
	0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // (l + 1.0));.}.ve
	0x63, 0x34, 0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x28, 0x20, 0x76, 0x65, 0x63, // c4 Additive( vec
	0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // 4 cBase, vec4 cB
	0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, // lend, float perc
	0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, // ent).{.return cB
	0x61, 0x73, 0x65, 0x20, 0x2b, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, // ase + cBlend*per
	0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, // cent;.}.vec3 Scr
	0x65, 0x65, 0x6e, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, // een ( vec3 cBase
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, // , vec3 cBlend).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, // .return 1.0 - (1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, // .0 - cBase) * (1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // .0 - cBlend);.}.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x20, 0x76, 0x65, // vec4 Screen ( ve
	0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, // c4 cBase, vec4 c
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // Blend).{.return 
	0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, // 1.0 - (1.0 - cBa
	0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, // se) * (1.0 - cBl
	0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, // end);.}.vec3 Scr
	0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, // eenHDR ( vec3 cB
	0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, // ase, vec3 cBlend
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, // ).{.return max(1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, // .0 - (1.0 - cBas
	0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, // e) * (1.0 - cBle
	0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, // nd), vec3(0.,0.,
	0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, // 0.));.}.vec4 Scr
	0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // eenHDR ( vec4 cB
	0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, // ase, vec4 cBlend
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, // ).{.return max(1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, // .0 - (1.0 - cBas
	0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, // e) * (1.0 - cBle
	0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, // nd), vec4(0.,0.,
	0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, // 0.,0.));.}.vec4 
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // Multiply ( vec4 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, // cBase, vec4 cBle
	0x6e, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, // nd, float percen
	0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, // t).{.return cBas
	0x65, 0x20, 0x2a, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, // e * cBlend*perce
	0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, // nt;.}.vec4 Overl
	0x61, 0x79, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, // ay ( vec4 cBase,
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, //  vec4 cBlend).{.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, // vec4 cNew = step
	0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, // (0.5, cBase);.cN
	0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, // ew = mix(cBase*c
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, // Blend*2.0, 1.0-2
	0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, // .0*(1.0-cBase)*(
	0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, // 1.0-cBlend), cNe
	0x77, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, // w);.return cNew;
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x48, // .}.vec4 OverlayH
	0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, // DR ( vec4 cBase,
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, //  vec4 cBlend).{.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, // vec4 cNew = step
	0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, // (0.5, cBase);.cN
	0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, // ew = max(mix(cBa
	0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, // se*cBlend*2.0, 1
	0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, // .0-2.0*(1.0-cBas
	0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, // e)*(1.0-cBlend),
	0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, //  cNew), vec4(0.,
	0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // 0.,0.,0.));.retu
	0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // rn cNew;.}.vec3 
	0x63, 0x6f, 0x73, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x5f, 0x73, // cos_hemisphere_s
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x29, 0x0a, 0x7b, // ample( vec2 t).{
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x68, 0x69, 0x20, 0x3d, 0x20, 0x74, 0x2e, 0x79, // .float phi = t.y
	0x20, 0x2a, 0x20, 0x28, 0x32, 0x2e, 0x30, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, //  * (2.0*3.141592
	0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, // 6535897932384626
	0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // 433832795);.floa
	0x74, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, // t cosTheta = sqr
	0x74, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, // t(1.0 - t.x);.fl
	0x6f, 0x61, 0x74, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, // oat sinTheta = s
	0x71, 0x72, 0x74, 0x28, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // qrt(t.x);.float 
	0x73, 0x70, 0x2c, 0x63, 0x70, 0x3b, 0x0a, 0x7b, 0x73, 0x70, 0x3d, 0x73, 0x69, 0x6e, 0x28, 0x70, // sp,cp;.{sp=sin(p
	0x68, 0x69, 0x29, 0x3b, 0x63, 0x70, 0x3d, 0x63, 0x6f, 0x73, 0x28, 0x70, 0x68, 0x69, 0x29, 0x3b, // hi);cp=cos(phi);
	0x7d, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x63, // };.return vec3(c
	0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x63, 0x6f, // p * sinTheta, co
	0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x73, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, // sTheta, sp * sin
	0x54, 0x68, 0x65, 0x74, 0x61, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, // Theta);.}.vec3 r
	0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, // otate_to_vector_
	0x75, 0x70, 0x70, 0x65, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x2c, // upper( vec3 vec,
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, //  vec3 normal).{.
	0x69, 0x66, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x3e, 0x20, 0x2d, 0x30, // if(normal.y > -0
	0x2e, 0x39, 0x39, 0x39, 0x39, 0x39, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // .99999).{.float 
	0x68, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x28, 0x31, 0x2e, 0x30, 0x2b, 0x6e, 0x6f, 0x72, // h = 1.0/(1.0+nor
	0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, // mal.y);.float hz
	0x20, 0x3d, 0x20, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x3b, 0x0a, 0x66, //  = h*normal.z;.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x3d, 0x20, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, // loat hzx = hz*no
	0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // rmal.x;.return v
	0x65, 0x63, 0x33, 0x28, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, // ec3(.vec.x * (no
	0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, // rmal.y+hz*normal
	0x2e, 0x7a, 0x29, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, // .z) + vec.y * no
	0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, // rmal.x - vec.z *
	0x20, 0x68, 0x7a, 0x78, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, //  hzx,.vec.y * no
	0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, // rmal.y - vec.x *
	0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, //  normal.x - vec.
	0x7a, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x2c, 0x0a, 0x76, 0x65, // z * normal.z,.ve
	0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x20, 0x2d, // c.y * normal.z -
	0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x2b, 0x20, 0x76, //  vec.x * hzx + v
	0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, // ec.z * (normal.y
	0x2b, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, // +h*normal.x*norm
	0x61, 0x6c, 0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x72, // al.x));.}.else r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x2d, 0x76, 0x65, 0x63, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, // eturn -vec;.}.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // iform vec4 Stere
	0x6f, 0x5f, 0x53, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x0a, 0x75, 0x6e, // o_Saturation;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // iform vec4 Stere
	0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x3b, 0x0a, // o_MS_ZPD_YAxis;.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, // uniform sampler2
	0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // DArray tex_stere
	0x6f, 0x5f, 0x66, 0x62, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, // o_fb;.uniform sa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x20, 0x74, 0x65, 0x78, // mpler2DArray tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x3b, 0x0a, 0x75, // _stereo_depth;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x77, 0x5f, 0x68, 0x5f, // niform vec4 w_h_
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x67, 0x61, 0x74, // height;.vec3 gat
	0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x76, 0x65, 0x63, 0x32, // herEyeColor(vec2
	0x20, 0x75, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x29, //  u, bool isLeft)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // .{.return textur
	0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, // e2DArrayLod(tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, // stereo_fb, vec3(
	0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, 0x20, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, // u.x, u.y, isLeft
	0x20, 0x3f, 0x20, 0x30, 0x2e, 0x30, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x30, //  ? 0.0 : 1.0), 0
	0x2e, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x67, // .).rgb;.}.void g
	0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, // atherLeftRightCo
	0x6c, 0x6f, 0x72, 0x73, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x6f, 0x75, 0x74, // lors(vec2 u, out
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x63, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, //  vec3 lcol, out 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x6c, 0x63, 0x6f, // vec3 rcol).{.lco
	0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x41, 0x72, 0x72, // l = texture2DArr
	0x61, 0x79, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // ayLod(tex_stereo
	0x5f, 0x66, 0x62, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, // _fb, vec3(u.x, u
	0x2e, 0x79, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2e, 0x78, 0x79, 0x7a, // .y, 0.), 0.).xyz
	0x3b, 0x0a, 0x72, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // ;.rcol = texture
	0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, // 2DArrayLod(tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x75, // tereo_fb, vec3(u
	0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, 0x29, 0x2c, 0x20, 0x30, 0x2e, // .x, u.y, 1.), 0.
	0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // ).xyz;.}.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, //  mat4 Stereo_Lef
	0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, // tMat;.uniform ma
	0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, // t4 Stereo_RightM
	0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, // at;.uniform vec4
	0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, //  Stereo_LeftLumi
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, 0x6e, 0x69, // nance_Gamma;.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // form vec4 Stereo
	0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, // _RightLuminance_
	0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x3b, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x44, // DynDesat;.void D
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x65, 0x73, 0x61, 0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, // ynamicDesatAnagl
	0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // yph( vec3 lCol, 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, // vec3 rCol, out v
	0x65, 0x63, 0x33, 0x20, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, // ec3 lDesatCol, o
	0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, // ut vec3 rDesatCo
	0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, // l).{.float left2
	0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, // LeftLum = dot(lC
	0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, // ol, Stereo_LeftL
	0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, // uminance_Gamma.x
	0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, // yz);.float left2
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, // RightLum = dot(l
	0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, // Col, Stereo_Righ
	0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, // tLuminance_DynDe
	0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // sat.xyz);.float 
	0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, // right2LeftLum = 
	0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // dot(rCol, Stereo
	0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, // _LeftLuminance_G
	0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // amma.xyz);.float
	0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, //  right2RightLum 
	0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, // = dot(rCol, Ster
	0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, // eo_RightLuminanc
	0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, // e_DynDesat.xyz);
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, // .float leftLum =
	0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, //  left2LeftLum + 
	0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, 0x0a, 0x66, // left2RightLum;.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, // loat rightLum = 
	0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, // right2LeftLum + 
	0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, 0x0a, // right2RightLum;.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x20, // float leftDesat 
	0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // = Stereo_RightLu
	0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, // minance_DynDesat
	0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, // .w * abs((left2L
	0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, // eftLum - left2Ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, // ghtLum) / (leftL
	0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x66, // um + 0.0001));.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x20, // loat rightDesat 
	0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // = Stereo_RightLu
	0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, // minance_DynDesat
	0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, // .w * abs((right2
	0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, // LeftLum - right2
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x72, 0x69, 0x67, // RightLum) / (rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, 0x29, // htLum + 0.0001))
	0x3b, 0x0a, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, // ;.lDesatCol = mi
	0x78, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, // x(lCol, vec3_spl
	0x61, 0x74, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x66, // at(leftLum), lef
	0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x72, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, // tDesat);.rDesatC
	0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, // ol = mix(rCol, v
	0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, // ec3_splat(rightL
	0x75, 0x6d, 0x29, 0x2c, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, // um), rightDesat)
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x41, // ;.}.vec3 LinearA
	0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, // naglyph( vec3 lC
	0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, // ol, vec3 rCol).{
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x28, // .vec3 color = ((
	0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, 0x29, //  (vec4(lCol, 1.)
	0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, // ) * (Stereo_Left
	0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, // Mat) ) + ( (vec4
	0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, // (rCol, 1.)) * (S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, // tereo_RightMat) 
	0x29, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, // )).rgb;.return c
	0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // olor;.}.uniform 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, // vec4 Stereo_Degh
	0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // ostGamma;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, // m mat4 Stereo_De
	0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3b, 0x0a, 0x76, 0x65, 0x63, // ghostFilter;.vec
	0x33, 0x20, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, // 3 DeghostAnaglyp
	0x68, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, // h( vec3 lCol, ve
	0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // c3 rCol).{.vec3 
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x41, 0x6e, // color = LinearAn
	0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, // aglyph(lCol, rCo
	0x6c, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x70, 0x6f, // l);.return ( (po
	0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // w(color, Stereo_
	0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x72, 0x67, 0x62, // DeghostGamma.rgb
	0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, // )) * (mat3(Stere
	0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, // o_DeghostFilter[
	0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, // 0].xyz, Stereo_D
	0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x31, 0x5d, 0x2e, // eghostFilter[1].
	0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, // xyz, Stereo_Degh
	0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, // ostFilter[2].xyz
	0x29, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x6d, 0x61, 0x69, // )) );.}.void mai
	0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, // n().{.vec3 lCol,
	0x20, 0x72, 0x43, 0x6f, 0x6c, 0x3b, 0x0a, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x66, //  rCol;.gatherLef
	0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x28, 0x76, 0x5f, 0x74, // tRightColors(v_t
	0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2c, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // excoord0, lCol, 
	0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x6c, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x70, 0x6f, // rCol);.lCol = po
	0x77, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x53, 0x74, 0x65, // w(lCol, vec3(Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, // reo_LeftLuminanc
	0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // e_Gamma.w, Stere
	0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, // o_LeftLuminance_
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // Gamma.w, Stereo_
	0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, // LeftLuminance_Ga
	0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, // mma.w));.rCol = 
	0x70, 0x6f, 0x77, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x53, // pow(rCol, vec3(S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, // tereo_LeftLumina
	0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, 0x53, 0x74, 0x65, // nce_Gamma.w, Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, // reo_LeftLuminanc
	0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // e_Gamma.w, Stere
	0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, // o_LeftLuminance_
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x29, 0x29, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // Gamma.w));.vec3 
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x41, 0x6e, // color = LinearAn
	0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, // aglyph(lCol, rCo
	0x6c, 0x29, 0x3b, 0x0a, 0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, // l);.gl_FragColor
	0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, //  = vec4(pow(colo
	0x72, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x31, 0x2e, 0x2f, 0x53, 0x74, 0x65, 0x72, 0x65, // r, vec3(1./Stere
	0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, // o_LeftLuminance_
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, 0x31, 0x2e, 0x2f, 0x53, 0x74, 0x65, 0x72, // Gamma.w, 1./Ster
	0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, // eo_LeftLuminance
	0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, 0x31, 0x2e, 0x2f, 0x53, 0x74, 0x65, // _Gamma.w, 1./Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, // reo_LeftLuminanc
	0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x29, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, // e_Gamma.w)), 1.0
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x00,                                                             // );.}..
};
static const uint8_t fs_pp_stereo_anaglyph_lin_gamma_nodesat_st_dx11[1186] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x0e, 0x53, // FSH.Jc._.......S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x00, 0x00, // tereo_LeftMat...
	0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, // ........Stereo_R
	0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x00, 0x40, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, // ightMat..@......
	0x00, 0x1a, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // ..Stereo_LeftLum
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x12, 0x00, 0x80, 0x00, // inance_Gamma....
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // .......tex_stere
	0x6f, 0x5f, 0x66, 0x62, 0x30, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x74, // o_fb0..........t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x30, 0x01, 0x00, 0x00, // ex_stereo_fb0...
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x44, 0x58, 0x42, 0x43, 0xf7, 0xe8, // ..........DXBC..
	0x29, 0x7b, 0x64, 0x7c, 0xe8, 0x19, 0xe7, 0x0d, 0x13, 0xb7, 0x2a, 0xf6, 0x15, 0x02, 0x01, 0x00, // ){d|......*.....
	0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x9c, 0x00, // ..........,.....
	0x00, 0x00, 0xd0, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x4e, 0x68, 0x00, 0x00, 0x00, 0x03, 0x00, // ......ISGNh.....
	0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, // ......P.........
	0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x5c, 0x00, // ................
	0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, // ................
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x06, 0x00, 0x00, 0x53, 0x56, // ..............SV
	0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, // _POSITION.TEXCOO
	0x52, 0x44, 0x00, 0xab, 0xab, 0xab, 0x4f, 0x53, 0x47, 0x4e, 0x2c, 0x00, 0x00, 0x00, 0x01, 0x00, // RD....OSGN,.....
	0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ...... .........
	0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x53, 0x56, // ..............SV
	0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x00, 0xab, 0xab, 0x53, 0x48, 0x45, 0x58, 0x2c, 0x03, // _TARGET...SHEX,.
	0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0xcb, 0x00, 0x00, 0x00, 0x6a, 0x08, 0x00, 0x01, 0x59, 0x00, // ..P.......j...Y.
	0x00, 0x04, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x5a, 0x00, // ..F. .........Z.
	0x00, 0x03, 0x00, 0x60, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x58, 0x40, 0x00, 0x04, 0x00, 0x70, // ...`......X@...p
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x55, 0x00, 0x00, 0x62, 0x10, 0x00, 0x03, 0x62, 0x10, // ......UU..b...b.
	0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x03, 0xf2, 0x20, 0x10, 0x00, 0x00, 0x00, // ......e.... ....
	0x00, 0x00, 0x68, 0x00, 0x00, 0x02, 0x03, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x32, 0x00, // ..h.......6...2.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x96, 0x15, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x36, 0x00, // ..............6.
	0x00, 0x05, 0x42, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, // ..B........@....
	0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0x02, 0x02, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x72, 0x00, // ..H.......CU..r.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x7e, // ......F.......F~
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, // .......`.......@
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x05, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, // ....../...r.....
	0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x08, 0x72, 0x00, // ..F.......8...r.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf6, 0x8f, // ......F.........
	0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x05, 0x72, 0x00, //  .............r.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, // ......F.......6.
	0x00, 0x05, 0x82, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, // ...........@....
	0x80, 0x3f, 0x11, 0x00, 0x00, 0x08, 0x12, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x0e, // .?............F.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ......F. .......
	0x00, 0x00, 0x11, 0x00, 0x00, 0x08, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x0e, // ......".......F.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, // ......F. .......
	0x00, 0x00, 0x11, 0x00, 0x00, 0x08, 0x42, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x0e, // ......B.......F.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, // ......F. .......
	0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x32, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x96, 0x15, // ..6...2.........
	0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x42, 0x00, 0x10, 0x00, 0x00, 0x00, // ......6...B.....
	0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x48, 0x00, 0x00, 0x8d, 0x02, 0x02, // ...@.....?H.....
	0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, // ..CU..r.......F.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, // ......F~.......`
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2f, 0x00, // .......@....../.
	0x00, 0x05, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, // ..r.......F.....
	0x00, 0x00, 0x38, 0x00, 0x00, 0x08, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, // ..8...r.......F.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf6, 0x8f, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, // ........ .......
	0x00, 0x00, 0x19, 0x00, 0x00, 0x05, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, // ......r.......F.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x82, 0x00, 0x10, 0x00, 0x00, 0x00, // ......6.........
	0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x11, 0x00, 0x00, 0x08, 0x12, 0x00, // ...@.....?......
	0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x8e, // ......F.......F.
	0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x08, 0x22, 0x00, //  .............".
	0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x8e, // ......F.......F.
	0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x08, 0x42, 0x00, //  .............B.
	0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x8e, // ......F.......F.
	0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x72, 0x00, //  .............r.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x02, // ......F.......F.
	0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x05, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, // ....../...r.....
	0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x0b, 0x82, 0x00, // ..F.............
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, // .......@.....?..
	0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x3a, 0x80, 0x20, 0x00, 0x00, 0x00, // .?...?...?:. ...
	0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x07, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, // ......8...r.....
	0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf6, 0x0f, 0x10, 0x00, 0x00, 0x00, // ..F.............
	0x00, 0x00, 0x19, 0x00, 0x00, 0x05, 0x72, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, // ......r ......F.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x82, 0x20, 0x10, 0x00, 0x00, 0x00, // ......6.... ....
	0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x3e, 0x00, 0x00, 0x01, 0x00, 0x00, // ...@.....?>.....
	0x90, 0x00,                                                                                     // ..
};
static const uint8_t fs_pp_stereo_anaglyph_lin_gamma_nodesat_st_spv[2658] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x0e, 0x53, // FSH.Jc._.......S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x01, 0x00, // tereo_LeftMat...
	0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, // ........Stereo_R
	0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x01, 0x40, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, // ightMat..@......
	0x00, 0x1a, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // ..Stereo_LeftLum
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x12, 0x01, 0x80, 0x00, // inance_Gamma....
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // .......tex_stere
	0x6f, 0x5f, 0x66, 0x62, 0x30, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x03, 0x22, 0x00, 0xdc, 0x09, // o_fb0......."...
	0x00, 0x00, 0x03, 0x02, 0x23, 0x07, 0x00, 0x00, 0x01, 0x00, 0x0b, 0x00, 0x08, 0x00, 0x67, 0x01, // ....#.........g.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0b, 0x00, // ................
	0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, 0x4c, 0x53, 0x4c, 0x2e, 0x73, 0x74, 0x64, 0x2e, 0x34, // ......GLSL.std.4
	0x35, 0x30, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, // 50..............
	0x00, 0x00, 0x0f, 0x00, 0x07, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, // ..............ma
	0x69, 0x6e, 0x00, 0x00, 0x00, 0x00, 0xc8, 0x00, 0x00, 0x00, 0xd5, 0x00, 0x00, 0x00, 0x10, 0x00, // in..............
	0x03, 0x00, 0x04, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x03, 0x00, 0x03, 0x00, 0x05, 0x00, // ................
	0x00, 0x00, 0xf4, 0x01, 0x00, 0x00, 0x05, 0x00, 0x04, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, // ..............ma
	0x69, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x08, 0x00, 0x31, 0x00, 0x00, 0x00, 0x74, 0x65, // in........1...te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, // x_stereo_fbSampl
	0x65, 0x72, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x08, 0x00, 0x34, 0x00, 0x00, 0x00, 0x74, 0x65, // er........4...te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x54, 0x65, 0x78, 0x74, 0x75, // x_stereo_fbTextu
	0x72, 0x65, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x06, 0x00, 0x6e, 0x00, 0x00, 0x00, 0x55, 0x6e, // re........n...Un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, // iformBlock......
	0x07, 0x00, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // ..n.......Stereo
	0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x00, 0x00, 0x06, 0x00, 0x07, 0x00, 0x6e, 0x00, // _LeftMat......n.
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, // ......Stereo_Rig
	0x68, 0x74, 0x4d, 0x61, 0x74, 0x00, 0x06, 0x00, 0x0a, 0x00, 0x6e, 0x00, 0x00, 0x00, 0x02, 0x00, // htMat.....n.....
	0x00, 0x00, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // ..Stereo_LeftLum
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x00, 0x00, 0x05, 0x00, // inance_Gamma....
	0x03, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x05, 0x00, 0xc8, 0x00, // ..p.............
	0x00, 0x00, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x00, 0x05, 0x00, // ..v_texcoord0...
	0x06, 0x00, 0xd5, 0x00, 0x00, 0x00, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, // ......bgfx_FragD
	0x61, 0x74, 0x61, 0x30, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x31, 0x00, 0x00, 0x00, 0x22, 0x00, // ata0..G...1...".
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x31, 0x00, 0x00, 0x00, 0x21, 0x00, // ......G...1...!.
	0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x34, 0x00, 0x00, 0x00, 0x22, 0x00, // ......G...4...".
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x34, 0x00, 0x00, 0x00, 0x21, 0x00, // ......G...4...!.
	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x48, 0x00, 0x04, 0x00, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, // ......H...n.....
	0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x00, // ......H...n.....
	0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0x6e, 0x00, // ..#.......H...n.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x48, 0x00, // ..............H.
	0x04, 0x00, 0x6e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x48, 0x00, // ..n...........H.
	0x05, 0x00, 0x6e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x40, 0x00, // ..n.......#...@.
	0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0x6e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x07, 0x00, // ..H...n.........
	0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0x6e, 0x00, 0x00, 0x00, 0x02, 0x00, // ......H...n.....
	0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x47, 0x00, 0x03, 0x00, 0x6e, 0x00, // ..#.......G...n.
	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x70, 0x00, 0x00, 0x00, 0x22, 0x00, // ......G...p...".
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x70, 0x00, 0x00, 0x00, 0x21, 0x00, // ......G...p...!.
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0xc8, 0x00, 0x00, 0x00, 0x1e, 0x00, // ......G.........
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0xd5, 0x00, 0x00, 0x00, 0x1e, 0x00, // ......G.........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x21, 0x00, // ..............!.
	0x03, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x02, 0x00, 0x06, 0x00, // ................
	0x00, 0x00, 0x16, 0x00, 0x03, 0x00, 0x07, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x19, 0x00, // .......... .....
	0x09, 0x00, 0x08, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x03, 0x00, // ................
	0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x04, 0x00, // ................
	0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x19, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x02, 0x00, // ................
	0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, // .. ...0.........
	0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x30, 0x00, 0x00, 0x00, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, // ..;...0...1.....
	0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, // .. ...3.........
	0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x33, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, // ..;...3...4.....
	0x00, 0x00, 0x15, 0x00, 0x04, 0x00, 0x3d, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x01, 0x00, // ......=... .....
	0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x3d, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x01, 0x00, // ..+...=...>.....
	0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x3d, 0x00, 0x00, 0x00, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, // ..+...=...B.....
	0x00, 0x00, 0x1b, 0x00, 0x03, 0x00, 0x46, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x15, 0x00, // ......F.........
	0x04, 0x00, 0x51, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, // ..Q... .......+.
	0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x58, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, // ......X.......+.
	0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x18, 0x00, // ......d......?..
	0x04, 0x00, 0x6d, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x1e, 0x00, // ..m.............
	0x05, 0x00, 0x6e, 0x00, 0x00, 0x00, 0x6d, 0x00, 0x00, 0x00, 0x6d, 0x00, 0x00, 0x00, 0x0e, 0x00, // ..n...m...m.....
	0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x6f, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x6e, 0x00, // .. ...o.......n.
	0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x6f, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x02, 0x00, // ..;...o...p.....
	0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x71, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x6d, 0x00, // .. ...q.......m.
	0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x3d, 0x00, 0x00, 0x00, 0x94, 0x00, 0x00, 0x00, 0x02, 0x00, // ..+...=.........
	0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x51, 0x00, 0x00, 0x00, 0x95, 0x00, 0x00, 0x00, 0x03, 0x00, // ..+...Q.........
	0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x96, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x07, 0x00, // .. .............
	0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0xc7, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x19, 0x00, // .. .............
	0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0xc7, 0x00, 0x00, 0x00, 0xc8, 0x00, 0x00, 0x00, 0x01, 0x00, // ..;.............
	0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0xd4, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0e, 0x00, // .. .............
	0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0xd4, 0x00, 0x00, 0x00, 0xd5, 0x00, 0x00, 0x00, 0x03, 0x00, // ..;.............
	0x00, 0x00, 0x36, 0x00, 0x05, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, // ..6.............
	0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x05, 0x00, 0x00, 0x00, 0x3d, 0x00, // ..............=.
	0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x31, 0x00, 0x00, 0x00, 0x3d, 0x00, // ......2...1...=.
	0x04, 0x00, 0x08, 0x00, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x3d, 0x00, // ......5...4...=.
	0x04, 0x00, 0x19, 0x00, 0x00, 0x00, 0xc9, 0x00, 0x00, 0x00, 0xc8, 0x00, 0x00, 0x00, 0x51, 0x00, // ..............Q.
	0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x2f, 0x01, 0x00, 0x00, 0xc9, 0x00, 0x00, 0x00, 0x00, 0x00, // ....../.........
	0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x31, 0x01, 0x00, 0x00, 0xc9, 0x00, // ..Q.......1.....
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x50, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x32, 0x01, // ......P.......2.
	0x00, 0x00, 0x2f, 0x01, 0x00, 0x00, 0x31, 0x01, 0x00, 0x00, 0x58, 0x00, 0x00, 0x00, 0x56, 0x00, // ../...1...X...V.
	0x05, 0x00, 0x46, 0x00, 0x00, 0x00, 0x44, 0x01, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x32, 0x00, // ..F...D...5...2.
	0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x47, 0x01, 0x00, 0x00, 0x44, 0x01, // ..X.......G...D.
	0x00, 0x00, 0x32, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x58, 0x00, 0x00, 0x00, 0x4f, 0x00, // ..2.......X...O.
	0x08, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x35, 0x01, 0x00, 0x00, 0x47, 0x01, 0x00, 0x00, 0x47, 0x01, // ......5...G...G.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x51, 0x00, // ..............Q.
	0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x37, 0x01, 0x00, 0x00, 0xc9, 0x00, 0x00, 0x00, 0x00, 0x00, // ......7.........
	0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x39, 0x01, 0x00, 0x00, 0xc9, 0x00, // ..Q.......9.....
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x50, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x3a, 0x01, // ......P.......:.
	0x00, 0x00, 0x37, 0x01, 0x00, 0x00, 0x39, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x56, 0x00, // ..7...9...d...V.
	0x05, 0x00, 0x46, 0x00, 0x00, 0x00, 0x4e, 0x01, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x32, 0x00, // ..F...N...5...2.
	0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x51, 0x01, 0x00, 0x00, 0x4e, 0x01, // ..X.......Q...N.
	0x00, 0x00, 0x3a, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x58, 0x00, 0x00, 0x00, 0x4f, 0x00, // ..:.......X...O.
	0x08, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x3d, 0x01, 0x00, 0x00, 0x51, 0x01, 0x00, 0x00, 0x51, 0x01, // ......=...Q...Q.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x41, 0x00, // ..............A.
	0x06, 0x00, 0x96, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x94, 0x00, // ..........p.....
	0x00, 0x00, 0x95, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x01, // ......=.........
	0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x96, 0x00, 0x00, 0x00, 0x01, 0x01, // ......A.........
	0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x94, 0x00, 0x00, 0x00, 0x95, 0x00, 0x00, 0x00, 0x3d, 0x00, // ..p...........=.
	0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x41, 0x00, // ..............A.
	0x06, 0x00, 0x96, 0x00, 0x00, 0x00, 0x03, 0x01, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x94, 0x00, // ..........p.....
	0x00, 0x00, 0x95, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x04, 0x01, // ......=.........
	0x00, 0x00, 0x03, 0x01, 0x00, 0x00, 0x50, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x05, 0x01, // ......P.........
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x04, 0x01, 0x00, 0x00, 0x0c, 0x00, // ................
	0x07, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x06, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, // ................
	0x00, 0x00, 0x35, 0x01, 0x00, 0x00, 0x05, 0x01, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x96, 0x00, // ..5.......A.....
	0x00, 0x00, 0x08, 0x01, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x94, 0x00, 0x00, 0x00, 0x95, 0x00, // ......p.........
	0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x09, 0x01, 0x00, 0x00, 0x08, 0x01, // ..=.............
	0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x96, 0x00, 0x00, 0x00, 0x0a, 0x01, 0x00, 0x00, 0x70, 0x00, // ..A...........p.
	0x00, 0x00, 0x94, 0x00, 0x00, 0x00, 0x95, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, // ..........=.....
	0x00, 0x00, 0x0b, 0x01, 0x00, 0x00, 0x0a, 0x01, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x96, 0x00, // ..........A.....
	0x00, 0x00, 0x0c, 0x01, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x94, 0x00, 0x00, 0x00, 0x95, 0x00, // ......p.........
	0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x0d, 0x01, 0x00, 0x00, 0x0c, 0x01, // ..=.............
	0x00, 0x00, 0x50, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x0e, 0x01, 0x00, 0x00, 0x09, 0x01, // ..P.............
	0x00, 0x00, 0x0b, 0x01, 0x00, 0x00, 0x0d, 0x01, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x0b, 0x00, // ................
	0x00, 0x00, 0x0f, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x3d, 0x01, // ..............=.
	0x00, 0x00, 0x0e, 0x01, 0x00, 0x00, 0x41, 0x00, 0x05, 0x00, 0x71, 0x00, 0x00, 0x00, 0x55, 0x01, // ......A...q...U.
	0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x42, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x6d, 0x00, // ..p...B...=...m.
	0x00, 0x00, 0x56, 0x01, 0x00, 0x00, 0x55, 0x01, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, // ..V...U...Q.....
	0x00, 0x00, 0x58, 0x01, 0x00, 0x00, 0x06, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, // ..X...........Q.
	0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x59, 0x01, 0x00, 0x00, 0x06, 0x01, 0x00, 0x00, 0x01, 0x00, // ......Y.........
	0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x5a, 0x01, 0x00, 0x00, 0x06, 0x01, // ..Q.......Z.....
	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x50, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x5b, 0x01, // ......P.......[.
	0x00, 0x00, 0x58, 0x01, 0x00, 0x00, 0x59, 0x01, 0x00, 0x00, 0x5a, 0x01, 0x00, 0x00, 0x64, 0x00, // ..X...Y...Z...d.
	0x00, 0x00, 0x91, 0x00, 0x05, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x5c, 0x01, 0x00, 0x00, 0x56, 0x01, // ..............V.
	0x00, 0x00, 0x5b, 0x01, 0x00, 0x00, 0x41, 0x00, 0x05, 0x00, 0x71, 0x00, 0x00, 0x00, 0x5d, 0x01, // ..[...A...q...].
	0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x6d, 0x00, // ..p...>...=...m.
	0x00, 0x00, 0x5e, 0x01, 0x00, 0x00, 0x5d, 0x01, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, // ..^...]...Q.....
	0x00, 0x00, 0x60, 0x01, 0x00, 0x00, 0x0f, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, // ..`...........Q.
	0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x61, 0x01, 0x00, 0x00, 0x0f, 0x01, 0x00, 0x00, 0x01, 0x00, // ......a.........
	0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x62, 0x01, 0x00, 0x00, 0x0f, 0x01, // ..Q.......b.....
	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x50, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x63, 0x01, // ......P.......c.
	0x00, 0x00, 0x60, 0x01, 0x00, 0x00, 0x61, 0x01, 0x00, 0x00, 0x62, 0x01, 0x00, 0x00, 0x64, 0x00, // ..`...a...b...d.
	0x00, 0x00, 0x91, 0x00, 0x05, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x64, 0x01, 0x00, 0x00, 0x5e, 0x01, // ..........d...^.
	0x00, 0x00, 0x63, 0x01, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x65, 0x01, // ..c...........e.
	0x00, 0x00, 0x5c, 0x01, 0x00, 0x00, 0x64, 0x01, 0x00, 0x00, 0x4f, 0x00, 0x08, 0x00, 0x0b, 0x00, // ......d...O.....
	0x00, 0x00, 0x66, 0x01, 0x00, 0x00, 0x65, 0x01, 0x00, 0x00, 0x65, 0x01, 0x00, 0x00, 0x00, 0x00, // ..f...e...e.....
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x96, 0x00, // ..........A.....
	0x00, 0x00, 0x14, 0x01, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x94, 0x00, 0x00, 0x00, 0x95, 0x00, // ......p.........
	0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x15, 0x01, 0x00, 0x00, 0x14, 0x01, // ..=.............
	0x00, 0x00, 0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x16, 0x01, 0x00, 0x00, 0x64, 0x00, // ..............d.
	0x00, 0x00, 0x15, 0x01, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x96, 0x00, 0x00, 0x00, 0x17, 0x01, // ......A.........
	0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x94, 0x00, 0x00, 0x00, 0x95, 0x00, 0x00, 0x00, 0x3d, 0x00, // ..p...........=.
	0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x18, 0x01, 0x00, 0x00, 0x17, 0x01, 0x00, 0x00, 0x88, 0x00, // ................
	0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x19, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x18, 0x01, // ..........d.....
	0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x96, 0x00, 0x00, 0x00, 0x1a, 0x01, 0x00, 0x00, 0x70, 0x00, // ..A...........p.
	0x00, 0x00, 0x94, 0x00, 0x00, 0x00, 0x95, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, // ..........=.....
	0x00, 0x00, 0x1b, 0x01, 0x00, 0x00, 0x1a, 0x01, 0x00, 0x00, 0x88, 0x00, 0x05, 0x00, 0x07, 0x00, // ................
	0x00, 0x00, 0x1c, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x1b, 0x01, 0x00, 0x00, 0x50, 0x00, // ......d.......P.
	0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x1d, 0x01, 0x00, 0x00, 0x16, 0x01, 0x00, 0x00, 0x19, 0x01, // ................
	0x00, 0x00, 0x1c, 0x01, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x1e, 0x01, // ................
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x66, 0x01, 0x00, 0x00, 0x1d, 0x01, // ..........f.....
	0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x1f, 0x01, 0x00, 0x00, 0x1e, 0x01, // ..Q.............
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x20, 0x01, // ......Q....... .
	0x00, 0x00, 0x1e, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, // ..........Q.....
	0x00, 0x00, 0x21, 0x01, 0x00, 0x00, 0x1e, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x50, 0x00, // ..!...........P.
	0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x22, 0x01, 0x00, 0x00, 0x1f, 0x01, 0x00, 0x00, 0x20, 0x01, // ......"....... .
	0x00, 0x00, 0x21, 0x01, 0x00, 0x00, 0x64, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x03, 0x00, 0xd5, 0x00, // ..!...d...>.....
	0x00, 0x00, 0x22, 0x01, 0x00, 0x00, 0xfd, 0x00, 0x01, 0x00, 0x38, 0x00, 0x01, 0x00, 0x00, 0x00, // ..".......8.....
	0x90, 0x00,                                                                                     // ..
};
static const bgfx::EmbeddedShader fs_pp_stereo_anaglyph_lin_gamma_nodesat_st = BGFX_EMBEDDED_SHADER(fs_pp_stereo_anaglyph_lin_gamma_nodesat_st);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Build of fragment shader from fs_pp_stereo.sc to fs_pp_stereo_anaglyph_lin_gamma_dyndesat_st with options: ANAGLYPH DYNDESAT GAMMA STEREO
static const uint8_t fs_pp_stereo_anaglyph_lin_gamma_dyndesat_st_mtl[2383] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x14, 0x74, // FSH.Jc._.......t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, // ex_stereo_fbSamp
	0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x74, 0x65, // ler...........te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x54, 0x65, 0x78, 0x74, 0x75, // x_stereo_fbTextu
	0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x74, 0x65, 0x78, // re...........tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, // _stereo_depthSam
	0x70, 0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x74, // pler...........t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x54, // ex_stereo_depthT
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, // exture..........
	0x1a, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, // .Stereo_LeftLumi
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x12, 0x01, 0x80, 0x00, 0x01, // nance_Gamma.....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, // ......Stereo_Rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, // htLuminance_DynD
	0x65, 0x73, 0x61, 0x74, 0x12, 0x01, 0x90, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x53, // esat...........S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x01, 0x00, // tereo_LeftMat...
	0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, // ........Stereo_R
	0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x01, 0x40, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, // ightMat..@......
	0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x10, // ..tex_stereo_fb.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x08, 0x00, 0x00, 0x23, 0x69, 0x6e, // .............#in
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x64, // clude <metal_std
	0x6c, 0x69, 0x62, 0x3e, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x73, // lib>.#include <s
	0x69, 0x6d, 0x64, 0x2f, 0x73, 0x69, 0x6d, 0x64, 0x2e, 0x68, 0x3e, 0x0a, 0x0a, 0x75, 0x73, 0x69, // imd/simd.h>..usi
	0x6e, 0x67, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x6d, 0x65, 0x74, // ng namespace met
	0x61, 0x6c, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x5f, 0x47, 0x6c, 0x6f, // al;..struct _Glo
	0x62, 0x61, 0x6c, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, // bal.{.    float4
	0x78, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, // x4 Stereo_LeftMa
	0x74, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x78, 0x34, 0x20, // t;.    float4x4 
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x3b, // Stereo_RightMat;
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, // .    float4 Ster
	0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, // eo_LeftLuminance
	0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, // _Gamma;.    floa
	0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, // t4 Stereo_RightL
	0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, // uminance_DynDesa
	0x74, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x78, 0x6c, // t;.};..struct xl
	0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x0a, 0x7b, 0x0a, // atMtlMain_out.{.
	0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, //     float4 bgfx_
	0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x20, 0x5b, 0x5b, 0x63, 0x6f, 0x6c, 0x6f, // FragData0 [[colo
	0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, // r(0)]];.};..stru
	0x63, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x69, // ct xlatMtlMain_i
	0x6e, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x76, // n.{.    float2 v
	0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x5b, 0x5b, 0x75, 0x73, 0x65, // _texcoord0 [[use
	0x72, 0x28, 0x6c, 0x6f, 0x63, 0x6e, 0x31, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, // r(locn1)]];.};..
	0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, // fragment xlatMtl
	0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, // Main_out xlatMtl
	0x4d, 0x61, 0x69, 0x6e, 0x28, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, // Main(xlatMtlMain
	0x5f, 0x69, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x5b, 0x5b, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, // _in in [[stage_i
	0x6e, 0x5d, 0x5d, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x20, 0x5f, 0x47, // n]], constant _G
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x26, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x20, 0x5b, 0x5b, // lobal& _mtl_u [[
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x74, 0x65, 0x78, // buffer(0)]], tex
	0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x3c, 0x66, 0x6c, 0x6f, // ture2d_array<flo
	0x61, 0x74, 0x3e, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, // at> tex_stereo_f
	0x62, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x30, 0x29, 0x5d, 0x5d, // b [[texture(0)]]
	0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // , sampler tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x5b, // ereo_fbSampler [
	0x5b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x29, 0x0a, 0x7b, // [sampler(0)]]).{
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, // .    xlatMtlMain
	0x5f, 0x6f, 0x75, 0x74, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x3d, 0x20, 0x7b, 0x7d, 0x3b, 0x0a, 0x20, // _out out = {};. 
	0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x34, 0x31, 0x39, 0x20, 0x3d, //    float3 _419 =
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, //  float3(in.v_tex
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, // coord0, 0.0);.  
	0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x34, 0x32, 0x37, 0x20, 0x3d, 0x20, //   float3 _427 = 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, // float3(in.v_texc
	0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, // oord0, 1.0);.   
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x33, 0x36, 0x38, 0x20, 0x3d, 0x20, 0x70, //  float3 _368 = p
	0x6f, 0x77, 0x72, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, // owr(tex_stereo_f
	0x62, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, // b.sample(tex_ste
	0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, // reo_fbSampler, _
	0x34, 0x31, 0x39, 0x2e, 0x78, 0x79, 0x2c, 0x20, 0x75, 0x69, 0x6e, 0x74, 0x28, 0x72, 0x69, 0x6e, // 419.xy, uint(rin
	0x74, 0x28, 0x5f, 0x34, 0x31, 0x39, 0x2e, 0x7a, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, // t(_419.z)), leve
	0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x66, 0x6c, 0x6f, // l(0.0)).xyz, flo
	0x61, 0x74, 0x33, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, // at3(_mtl_u.Stere
	0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, // o_LeftLuminance_
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, // Gamma.w, _mtl_u.
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, // Stereo_LeftLumin
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, 0x5f, 0x6d, // ance_Gamma.w, _m
	0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, // tl_u.Stereo_Left
	0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, // Luminance_Gamma.
	0x77, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, // w));.    float3 
	0x5f, 0x33, 0x37, 0x37, 0x20, 0x3d, 0x20, 0x70, 0x6f, 0x77, 0x72, 0x28, 0x74, 0x65, 0x78, 0x5f, // _377 = powr(tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // stereo_fb.sample
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, // (tex_stereo_fbSa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x34, 0x32, 0x37, 0x2e, 0x78, 0x79, 0x2c, 0x20, // mpler, _427.xy, 
	0x75, 0x69, 0x6e, 0x74, 0x28, 0x72, 0x69, 0x6e, 0x74, 0x28, 0x5f, 0x34, 0x32, 0x37, 0x2e, 0x7a, // uint(rint(_427.z
	0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, // )), level(0.0)).
	0x78, 0x79, 0x7a, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x6d, 0x74, 0x6c, // xyz, float3(_mtl
	0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, // _u.Stereo_LeftLu
	0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, // minance_Gamma.w,
	0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, //  _mtl_u.Stereo_L
	0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, // eftLuminance_Gam
	0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, // ma.w, _mtl_u.Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, // reo_LeftLuminanc
	0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, // e_Gamma.w));.   
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x34, 0x37, 0x31, 0x20, 0x3d, 0x20, 0x64, 0x6f, //  float _471 = do
	0x74, 0x28, 0x5f, 0x33, 0x36, 0x38, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, // t(_368, _mtl_u.S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, // tereo_LeftLumina
	0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, // nce_Gamma.xyz);.
	0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x34, 0x37, 0x35, 0x20, 0x3d, //     float _475 =
	0x20, 0x64, 0x6f, 0x74, 0x28, 0x5f, 0x33, 0x36, 0x38, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, //  dot(_368, _mtl_
	0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // u.Stereo_RightLu
	0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, // minance_DynDesat
	0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // .xyz);.    float
	0x20, 0x5f, 0x34, 0x37, 0x39, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x5f, 0x33, 0x37, 0x37, //  _479 = dot(_377
	0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // , _mtl_u.Stereo_
	0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, // LeftLuminance_Ga
	0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, // mma.xyz);.    fl
	0x6f, 0x61, 0x74, 0x20, 0x5f, 0x34, 0x38, 0x33, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x5f, // oat _483 = dot(_
	0x33, 0x37, 0x37, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, // 377, _mtl_u.Ster
	0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, // eo_RightLuminanc
	0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, // e_DynDesat.xyz);
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x34, 0x38, 0x36, 0x20, // .    float _486 
	0x3d, 0x20, 0x5f, 0x34, 0x37, 0x31, 0x20, 0x2b, 0x20, 0x5f, 0x34, 0x37, 0x35, 0x3b, 0x0a, 0x20, // = _471 + _475;. 
	0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x34, 0x38, 0x39, 0x20, 0x3d, 0x20, //    float _489 = 
	0x5f, 0x34, 0x37, 0x39, 0x20, 0x2b, 0x20, 0x5f, 0x34, 0x38, 0x33, 0x3b, 0x0a, 0x20, 0x20, 0x20, // _479 + _483;.   
	0x20, 0x6f, 0x75, 0x74, 0x2e, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, 0x61, //  out.bgfx_FragDa
	0x74, 0x61, 0x30, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x70, 0x6f, 0x77, // ta0 = float4(pow
	0x72, 0x28, 0x28, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x6d, 0x69, 0x78, 0x28, 0x5f, // r(((float4(mix(_
	0x33, 0x36, 0x38, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x34, 0x38, 0x36, // 368, float3(_486
	0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, // ), float3(_mtl_u
	0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, // .Stereo_RightLum
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, // inance_DynDesat.
	0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x5f, 0x34, 0x37, 0x31, 0x20, 0x2d, 0x20, // w * abs((_471 - 
	0x5f, 0x34, 0x37, 0x35, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x5f, 0x34, 0x38, 0x36, 0x20, 0x2b, 0x20, // _475) / (_486 + 
	0x39, 0x2e, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x37, 0x34, 0x37, 0x33, 0x37, 0x38, 0x37, 0x35, // 9.99999974737875
	0x31, 0x36, 0x33, 0x35, 0x35, 0x35, 0x31, 0x34, 0x35, 0x32, 0x36, 0x33, 0x36, 0x37, 0x31, 0x38, // 1635551452636718
	0x38, 0x65, 0x2d, 0x30, 0x35, 0x29, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, // 8e-05)))), 1.0) 
	0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // * _mtl_u.Stereo_
	0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, // LeftMat) + (floa
	0x74, 0x34, 0x28, 0x6d, 0x69, 0x78, 0x28, 0x5f, 0x33, 0x37, 0x37, 0x2c, 0x20, 0x66, 0x6c, 0x6f, // t4(mix(_377, flo
	0x61, 0x74, 0x33, 0x28, 0x5f, 0x34, 0x38, 0x39, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // at3(_489), float
	0x33, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // 3(_mtl_u.Stereo_
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, // RightLuminance_D
	0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, // ynDesat.w * abs(
	0x28, 0x5f, 0x34, 0x37, 0x39, 0x20, 0x2d, 0x20, 0x5f, 0x34, 0x38, 0x33, 0x29, 0x20, 0x2f, 0x20, // (_479 - _483) / 
	0x28, 0x5f, 0x34, 0x38, 0x39, 0x20, 0x2b, 0x20, 0x39, 0x2e, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, // (_489 + 9.999999
	0x37, 0x34, 0x37, 0x33, 0x37, 0x38, 0x37, 0x35, 0x31, 0x36, 0x33, 0x35, 0x35, 0x35, 0x31, 0x34, // 7473787516355514
	0x35, 0x32, 0x36, 0x33, 0x36, 0x37, 0x31, 0x38, 0x38, 0x65, 0x2d, 0x30, 0x35, 0x29, 0x29, 0x29, // 526367188e-05)))
	0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, // ), 1.0) * _mtl_u
	0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, // .Stereo_RightMat
	0x29, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x31, // )).xyz, float3(1
	0x2e, 0x30, 0x20, 0x2f, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, // .0 / _mtl_u.Ster
	0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, // eo_LeftLuminance
	0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, // _Gamma.w, 1.0 / 
	0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, // _mtl_u.Stereo_Le
	0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, // ftLuminance_Gamm
	0x61, 0x2e, 0x77, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, // a.w, 1.0 / _mtl_
	0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // u.Stereo_LeftLum
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x29, 0x29, // inance_Gamma.w))
	0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, // , 1.0);.    retu
	0x72, 0x6e, 0x20, 0x6f, 0x75, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x0a, 0x00, 0x00, 0xe0, 0x00,       // rn out;.}......
};
static const uint8_t fs_pp_stereo_anaglyph_lin_gamma_dyndesat_st_essl[9060] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x23, // FSH.Jc._......Q#
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x33, 0x32, 0x30, 0x20, 0x65, // ..#version 320 e
	0x73, 0x0a, 0x23, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x47, 0x4c, 0x5f, // s.#extension GL_
	0x45, 0x58, 0x54, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, // EXT_shader_textu
	0x72, 0x65, 0x5f, 0x6c, 0x6f, 0x64, 0x20, 0x3a, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x0a, // re_lod : enable.
	0x23, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x47, 0x4c, 0x5f, 0x45, 0x58, // #extension GL_EX
	0x54, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x20, // T_texture_array 
	0x3a, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, // : enable.#define
	0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, //  attribute in.#d
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, // efine varying in
	0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, // .precision highp
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3b, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, //  float;.precisio
	0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x69, 0x6e, 0x74, 0x3b, 0x0a, 0x70, 0x72, 0x65, // n highp int;.pre
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x73, 0x61, 0x6d, // cision highp sam
	0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x3b, 0x0a, 0x23, 0x64, 0x65, // pler2DArray;.#de
	0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x4c, 0x6f, // fine texture2DLo
	0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, // d      texture2D
	0x4c, 0x6f, 0x64, 0x45, 0x58, 0x54, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, // LodEXT.#define t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, 0x20, 0x20, // exture2DGrad    
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x47, 0x72, 0x61, 0x64, 0x45, 0x58, //  texture2DGradEX
	0x54, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // T.#define textur
	0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, // e2DProjLod  text
	0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x4c, 0x6f, 0x64, 0x45, 0x58, 0x54, 0x0a, // ure2DProjLodEXT.
	0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, // #define texture2
	0x44, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // DProjGrad textur
	0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, 0x45, 0x58, 0x54, 0x0a, 0x23, // e2DProjGradEXT.#
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, // define textureCu
	0x62, 0x65, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // beLod    texture
	0x43, 0x75, 0x62, 0x65, 0x4c, 0x6f, 0x64, 0x45, 0x58, 0x54, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, // CubeLodEXT.#defi
	0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x47, 0x72, // ne textureCubeGr
	0x61, 0x64, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, // ad   textureCube
	0x47, 0x72, 0x61, 0x64, 0x45, 0x58, 0x54, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, // GradEXT.#define 
	0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // shadow2D(_sample
	0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, // r, _coord) textu
	0x72, 0x65, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, // re(_sampler, _co
	0x6f, 0x72, 0x64, 0x29, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x73, 0x68, 0x61, // ord).#define sha
	0x64, 0x6f, 0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, // dow2DProj(_sampl
	0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x74, 0x65, 0x78, 0x74, // er, _coord) text
	0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // ureProj(_sampler
	0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x0a, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x65, // , _coord).out me
	0x64, 0x69, 0x75, 0x6d, 0x70, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, // diump vec4 bgfx_
	0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, // FragColor;.varyi
	0x6e, 0x67, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x5f, 0x65, 0x79, 0x65, 0x3b, 0x0a, // ng float v_eye;.
	0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x5f, 0x74, // varying vec2 v_t
	0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, // excoord0;.vec3 i
	0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, // nstMul(vec3 _vec
	0x2c, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, // , mat3 _mtx) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, // eturn ( (_vec) *
	0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, //  (_mtx) ); }.vec
	0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, // 3 instMul(mat3 _
	0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, // mtx, vec3 _vec) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, // { return ( (_mtx
	0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, // ) * (_vec) ); }.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, // vec4 instMul(vec
	0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, // 4 _vec, mat4 _mt
	0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, // x) { return ( (_
	0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, // vec) * (_mtx) );
	0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, //  }.vec4 instMul(
	0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // mat4 _mtx, vec4 
	0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // _vec) { return (
	0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, //  (_mtx) * (_vec)
	0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, 0x70, 0x28, //  ); }.float rcp(
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // float _a) { retu
	0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, // rn 1.0/_a; }.vec
	0x32, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, // 2 rcp(vec2 _a) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, //  return vec2(1.0
	0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x70, // )/_a; }.vec3 rcp
	0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // (vec3 _a) { retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, // rn vec3(1.0)/_a;
	0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x34, //  }.vec4 rcp(vec4
	0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, //  _a) { return ve
	0x63, 0x34, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, // c4(1.0)/_a; }.ve
	0x63, 0x32, 0x20, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, // c2 vec2_splat(fl
	0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // oat _x) { return
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, //  vec2(_x, _x); }
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, // .vec3 vec3_splat
	0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // (float _x) { ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, // urn vec3(_x, _x,
	0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, 0x65, 0x63, //  _x); }.vec4 vec
	0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, // 4_splat(float _x
	0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, // ) { return vec4(
	0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, // _x, _x, _x, _x);
	0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, //  }.uvec2 uvec2_s
	0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, // plat(uint _x) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, // return uvec2(_x,
	0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, 0x75, 0x76, //  _x); }.uvec3 uv
	0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, // ec3_splat(uint _
	0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, // x) { return uvec
	0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, // 3(_x, _x, _x); }
	0x0a, 0x75, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, // .uvec4 uvec4_spl
	0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // at(uint _x) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, // turn uvec4(_x, _
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x6d, 0x61, // x, _x, _x); }.ma
	0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, // t4 mtxFromRows(v
	0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, // ec4 _0, vec4 _1,
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, //  vec4 _2, vec4 _
	0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, // 3).{.return tran
	0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, // spose(mat4(_0, _
	0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // 1, _2, _3) );.}.
	0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, // mat4 mtxFromCols
	0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, // (vec4 _0, vec4 _
	0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // 1, vec4 _2, vec4
	0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, //  _3).{.return ma
	0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, // t4(_0, _1, _2, _
	0x33, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, // 3);.}.mat3 mtxFr
	0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, // omRows(vec3 _0, 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, // vec3 _1, vec3 _2
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, // ).{.return trans
	0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, // pose(mat3(_0, _1
	0x2c, 0x20, 0x5f, 0x32, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, // , _2) );.}.mat3 
	0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, // mtxFromCols(vec3
	0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, //  _0, vec3 _1, ve
	0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // c3 _2).{.return 
	0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, // mat3(_0, _1, _2)
	0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, // ;.}.uniform vec4
	0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, //  u_viewRect;.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, // form vec4 u_view
	0x54, 0x65, 0x78, 0x65, 0x6c, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, // Texel;.uniform m
	0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // at4 u_view;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, // orm mat4 u_invVi
	0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, // ew;.uniform mat4
	0x20, 0x75, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, //  u_proj;.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, 0x6a, 0x3b, //  mat4 u_invProj;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, // .uniform mat4 u_
	0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // viewProj;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, // m mat4 u_invView
	0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, // Proj;.uniform ma
	0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, 0x3b, 0x0a, // t4 u_model[32];.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, // uniform mat4 u_m
	0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // odelView;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, // m mat4 u_modelVi
	0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // ewProj;.uniform 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x66, 0x34, // vec4 u_alphaRef4
	0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x66, 0x6c, 0x6f, // ;.float sqr( flo
	0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // at v).{.return v
	0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, // *v;.}.vec2 sqr( 
	0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // vec2 v).{.return
	0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x73, 0x71, 0x72, //  v*v;.}.vec3 sqr
	0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, // ( vec3 v).{.retu
	0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6d, // rn v*v;.}.vec3 m
	0x75, 0x6c, 0x5f, 0x77, 0x31, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x2c, 0x20, 0x6d, // ul_w1( vec3 v, m
	0x61, 0x74, 0x34, 0x20, 0x6d, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // at4 m).{.return 
	0x76, 0x2e, 0x78, 0x2a, 0x6d, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, // v.x*m[0].xyz + (
	0x76, 0x2e, 0x79, 0x2a, 0x6d, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, // v.y*m[1].xyz + (
	0x76, 0x2e, 0x7a, 0x2a, 0x6d, 0x5b, 0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x6d, // v.z*m[2].xyz + m
	0x5b, 0x33, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // [3].xyz));.}.flo
	0x61, 0x74, 0x20, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, // at acos_approx_d
	0x69, 0x76, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, // ivPI( float v).{
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, // .float x = abs(v
	0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, // );.if(1. - x <= 
	0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, // 0.00006103515625
	0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, // ).return (v >= 0
	0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x3b, 0x0a, 0x66, 0x6c, // .) ? 0. : 1.;.fl
	0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, // oat res = ((-0.1
	0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, // 55972/3.14159265
	0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, // 3589793238462643
	0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, // 3832795) * x + (
	0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, // 1.56467/3.141592
	0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, // 6535897932384626
	0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, // 433832795) ) * s
	0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, // qrt(1. - x);.ret
	0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, // urn (v >= 0.) ? 
	0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, // res : 1. - res;.
	0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, // }.float atan2_ap
	0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, // prox_div2PI( flo
	0x61, 0x74, 0x20, 0x79, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x29, 0x0a, 0x7b, // at y, float x).{
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3d, 0x20, 0x61, // .float abs_y = a
	0x62, 0x73, 0x28, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, // bs(y);.float abs
	0x5f, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x78, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, // _x = abs(x);.if(
	0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, // abs_x <= 0.00006
	0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x20, 0x26, 0x26, 0x20, 0x61, 0x62, 0x73, // 103515625 && abs
	0x5f, 0x79, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, // _y <= 0.00006103
	0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x30, // 515625).return 0
	0x2e, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x61, 0x62, // .;.float r = (ab
	0x73, 0x5f, 0x78, 0x20, 0x2d, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x20, 0x2f, 0x20, 0x28, // s_x - abs_y) / (
	0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2b, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x3b, 0x0a, // abs_x + abs_y);.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3d, 0x20, 0x28, 0x28, // float angle = ((
	0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x28, 0x33, 0x2e, 0x2f, 0x38, 0x2e, // x < 0.) ? (3./8.
	0x29, 0x20, 0x3a, 0x20, 0x28, 0x31, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x29, 0x0a, 0x2b, 0x20, 0x28, // ) : (1./8.)).+ (
	0x30, 0x2e, 0x32, 0x31, 0x31, 0x38, 0x36, 0x38, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, // 0.211868 /(2.*3.
	0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, // 1415926535897932
	0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, // 384626433832795)
	0x20, 0x2a, 0x20, 0x72, 0x20, 0x2a, 0x20, 0x72, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x39, 0x38, 0x37, //  * r * r - 0.987
	0x33, 0x30, 0x35, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, // 305 /(2.*3.14159
	0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, // 2653589793238462
	0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, // 6433832795)) * (
	0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x72, 0x20, 0x3a, 0x20, // (x < 0.) ? -r : 
	0x72, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x79, 0x20, 0x3c, 0x20, // r);.return (y < 
	0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3a, 0x20, 0x61, // 0.) ? -angle : a
	0x6e, 0x67, 0x6c, 0x65, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x73, // ngle;.}.float as
	0x69, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, // in_approx_divPI(
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, //  float v).{.floa
	0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, // t x = abs(v);.if
	0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, // (1. - x <= 0.000
	0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, // 06103515625).ret
	0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, // urn (v >= 0.) ? 
	0x30, 0x2e, 0x35, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // 0.5 : -0.5;.floa
	0x74, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, // t res = ((-0.155
	0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, // 972/3.1415926535
	0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, // 8979323846264338
	0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, // 32795) * x + (1.
	0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, // 56467/3.14159265
	0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, // 3589793238462643
	0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, // 3832795) ) * sqr
	0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // t(1. - x);.retur
	0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, // n (v >= 0.) ? 0.
	0x35, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x20, 0x2b, // 5 - res : -0.5 +
	0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x61, 0x79, //  res;.}.vec2 ray
	0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x75, // _to_equirectangu
	0x6c, 0x61, 0x72, 0x5f, 0x75, 0x76, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x61, 0x79, // lar_uv( vec3 ray
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // ).{.return vec2(
	0x0a, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, // .0.5 + atan2_app
	0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x79, // rox_div2PI(ray.y
	0x2c, 0x20, 0x72, 0x61, 0x79, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, // , ray.x),.acos_a
	0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, // pprox_divPI(ray.
	0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, // z));.}.float Inv
	0x73, 0x52, 0x47, 0x42, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // sRGB( float colo
	0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, // r).{.if (color <
	0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, 0x34, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // = 0.04045).retur
	0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, // n color * (1.0/1
	0x32, 0x2e, 0x39, 0x32, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, // 2.92);.else.retu
	0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, // rn pow(color * (
	0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, // 1.0/1.055) + (0.
	0x30, 0x35, 0x35, 0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x29, // 055/1.055), 2.4)
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x52, 0x65, 0x63, // ;.}.float InvRec
	0x37, 0x30, 0x39, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // 709( float color
	0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, // ).{.if (color <=
	0x20, 0x30, 0x2e, 0x30, 0x38, 0x31, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, //  0.081).return c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x34, 0x2e, 0x35, 0x29, // olor * (1.0/4.5)
	0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, // ;.else.return po
	0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, // w(color * (1.0/1
	0x2e, 0x30, 0x39, 0x39, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x2f, 0x31, // .099) + (0.099/1
	0x2e, 0x30, 0x39, 0x39, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x30, 0x2e, 0x34, 0x35, 0x29, // .099), 1.0/0.45)
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, // ;.}.float InvGam
	0x6d, 0x61, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, // ma( float color)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, // .{.return InvsRG
	0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, // B(color);.}.vec3
	0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, //  InvGamma( vec3 
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // color).{.return 
	0x76, 0x65, 0x63, 0x33, 0x28, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, // vec3(InvGamma(co
	0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, // lor.x),InvGamma(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, // color.y),InvGamm
	0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // a(color.z));.}.v
	0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, // ec3 InvToneMap( 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, // vec3 color).{.fl
	0x6f, 0x61, 0x74, 0x20, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x30, 0x2e, // oat inv_2bh = 0.
	0x35, 0x2f, 0x30, 0x2e, 0x32, 0x35, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x68, // 5/0.25;.float bh
	0x20, 0x3d, 0x20, 0x34, 0x2e, 0x30, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2d, 0x20, 0x32, 0x2e, //  = 4.0*0.25 - 2.
	0x30, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // 0;.return (color
	0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2b, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x63, 0x6f, //  - 1.0 + sqrt(co
	0x6c, 0x6f, 0x72, 0x2a, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x20, 0x62, 0x68, 0x29, // lor*(color + bh)
	0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x2a, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, //  + 1.0))*inv_2bh
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x20, // ;.}.float sRGB( 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // float f).{.float
	0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, //  s;.if (f <= 0.0
	0x30, 0x33, 0x31, 0x33, 0x30, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, // 031308).s = 12.9
	0x32, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, // 2 * f;.else.s = 
	0x31, 0x2e, 0x30, 0x35, 0x35, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x31, // 1.055 * pow(f, 1
	0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x34, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x3b, // .0/2.4) - 0.055;
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // .return s;.}.flo
	0x61, 0x74, 0x20, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // at Rec709( float
	0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, //  f).{.float s;.i
	0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, 0x29, 0x0a, 0x73, // f (f <= 0.018).s
	0x20, 0x3d, 0x20, 0x34, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, //  = 4.5 * f;.else
	0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, // .s = 1.099 * pow
	0x28, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x39, // (f, 0.45) - 0.09
	0x39, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // 9;.return s;.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x66, 0x6c, // loat FBGamma( fl
	0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // oat color).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, // urn sRGB(color);
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, // .}.vec2 FBGamma(
	0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, //  vec2 color).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, // eturn vec2(FBGam
	0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, // ma(color.x),FBGa
	0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, // mma(color.y));.}
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, // .vec3 FBGamma( v
	0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // ec3 color).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, // urn vec3(FBGamma
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, // (color.x),FBGamm
	0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, // a(color.y),FBGam
	0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // ma(color.z));.}.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x32, 0x32, 0x28, 0x20, // vec3 FBGamma22( 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // vec3 color).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, // turn vec3(pow(co
	0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, // lor.x, 1.0/2.2),
	0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, 0x30, // pow(color.y, 1.0
	0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, // /2.2),pow(color.
	0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // z, 1.0/2.2));.}.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, // float FBToneMap(
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, //  float l).{.retu
	0x72, 0x6e, 0x20, 0x6c, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, // rn l * ((l*0.25 
	0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, // + 1.0) / (l + 1.
	0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x54, 0x6f, // 0));.}.vec2 FBTo
	0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // neMap( vec2 colo
	0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, // r).{.float l = d
	0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, // ot(color,vec2(0.
	0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, // 176204+0.0108109
	0x2a, 0x30, 0x2e, 0x35, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2b, 0x30, 0x2e, // *0.5,0.812985+0.
	0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x3b, 0x0a, 0x72, // 0108109*0.5));.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, // eturn color * ((
	0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, // l*0.25 + 1.0) / 
	0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // (l + 1.0));.}.ve
	0x63, 0x33, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, // c3 FBToneMap( ve
	0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // c3 color).{.floa
	0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, // t l = dot(color,
	0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2c, 0x30, 0x2e, // vec3(0.176204,0.
	0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2c, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, // 812985,0.0108109
	0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // ));.return color
	0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, //  * ((l*0.25 + 1.
	0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, // 0) / (l + 1.0));
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, // .}.vec4 Additive
	0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, // ( vec4 cBase, ve
	0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // c4 cBlend, float
	0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, //  percent).{.retu
	0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2b, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // rn cBase + cBlen
	0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // d*percent;.}.vec
	0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // 3 Screen ( vec3 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, // cBase, vec3 cBle
	0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, // nd).{.return 1.0
	0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, //  - (1.0 - cBase)
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, //  * (1.0 - cBlend
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, // );.}.vec4 Screen
	0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, //  ( vec4 cBase, v
	0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // ec4 cBlend).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, // turn 1.0 - (1.0 
	0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, // - cBase) * (1.0 
	0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // - cBlend);.}.vec
	0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, // 3 ScreenHDR ( ve
	0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, // c3 cBase, vec3 c
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // Blend).{.return 
	0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, // max(1.0 - (1.0 -
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, //  cBase) * (1.0 -
	0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, //  cBlend), vec3(0
	0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // .,0.,0.));.}.vec
	0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, // 4 ScreenHDR ( ve
	0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, // c4 cBase, vec4 c
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // Blend).{.return 
	0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, // max(1.0 - (1.0 -
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, //  cBase) * (1.0 -
	0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, //  cBlend), vec4(0
	0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // .,0.,0.,0.));.}.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x20, 0x28, 0x20, // vec4 Multiply ( 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // vec4 cBase, vec4
	0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, //  cBlend, float p
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // ercent).{.return
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2a, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, //  cBase * cBlend*
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, // percent;.}.vec4 
	0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, // Overlay ( vec4 c
	0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // Base, vec4 cBlen
	0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, // d).{.vec4 cNew =
	0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, //  step(0.5, cBase
	0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, // );.cNew = mix(cB
	0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, // ase*cBlend*2.0, 
	0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, // 1.0-2.0*(1.0-cBa
	0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, // se)*(1.0-cBlend)
	0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // , cNew);.return 
	0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, // cNew;.}.vec4 Ove
	0x72, 0x6c, 0x61, 0x79, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, // rlayHDR ( vec4 c
	0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // Base, vec4 cBlen
	0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, // d).{.vec4 cNew =
	0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, //  step(0.5, cBase
	0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x6d, 0x69, // );.cNew = max(mi
	0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, // x(cBase*cBlend*2
	0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, // .0, 1.0-2.0*(1.0
	0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, // -cBase)*(1.0-cBl
	0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, // end), cNew), vec
	0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, // 4(0.,0.,0.,0.));
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, // .return cNew;.}.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x73, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, // vec3 cos_hemisph
	0x65, 0x72, 0x65, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, // ere_sample( vec2
	0x20, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x68, 0x69, 0x20, //  t).{.float phi 
	0x3d, 0x20, 0x74, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x28, 0x32, 0x2e, 0x30, 0x2a, 0x33, 0x2e, 0x31, // = t.y * (2.0*3.1
	0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, // 4159265358979323
	0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x3b, // 84626433832795);
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, // .float cosTheta 
	0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x74, 0x2e, 0x78, // = sqrt(1.0 - t.x
	0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, // );.float sinThet
	0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, // a = sqrt(t.x);.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x70, 0x2c, 0x63, 0x70, 0x3b, 0x0a, 0x7b, 0x73, 0x70, 0x3d, // loat sp,cp;.{sp=
	0x73, 0x69, 0x6e, 0x28, 0x70, 0x68, 0x69, 0x29, 0x3b, 0x63, 0x70, 0x3d, 0x63, 0x6f, 0x73, 0x28, // sin(phi);cp=cos(
	0x70, 0x68, 0x69, 0x29, 0x3b, 0x7d, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // phi);};.return v
	0x65, 0x63, 0x33, 0x28, 0x63, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, // ec3(cp * sinThet
	0x61, 0x2c, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x73, 0x70, 0x20, // a, cosTheta, sp 
	0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // * sinTheta);.}.v
	0x65, 0x63, 0x33, 0x20, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x76, 0x65, // ec3 rotate_to_ve
	0x63, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, // ctor_upper( vec3
	0x20, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, //  vec, vec3 norma
	0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, // l).{.if(normal.y
	0x20, 0x3e, 0x20, 0x2d, 0x30, 0x2e, 0x39, 0x39, 0x39, 0x39, 0x39, 0x29, 0x0a, 0x7b, 0x0a, 0x66, //  > -0.99999).{.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x28, 0x31, 0x2e, // loat h = 1.0/(1.
	0x30, 0x2b, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, // 0+normal.y);.flo
	0x61, 0x74, 0x20, 0x68, 0x7a, 0x20, 0x3d, 0x20, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, // at hz = h*normal
	0x2e, 0x7a, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x3d, 0x20, // .z;.float hzx = 
	0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x3b, 0x0a, 0x72, 0x65, 0x74, // hz*normal.x;.ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, // urn vec3(.vec.x 
	0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x7a, 0x2a, 0x6e, // * (normal.y+hz*n
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x29, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x79, // ormal.z) + vec.y
	0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, //  * normal.x - ve
	0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, // c.z * hzx,.vec.y
	0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x2d, 0x20, 0x76, 0x65, //  * normal.y - ve
	0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, // c.x * normal.x -
	0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, //  vec.z * normal.
	0x7a, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, // z,.vec.y * norma
	0x6c, 0x2e, 0x7a, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x68, 0x7a, // l.z - vec.x * hz
	0x78, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, // x + vec.z * (nor
	0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, // mal.y+h*normal.x
	0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, // *normal.x));.}.e
	0x6c, 0x73, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x2d, 0x76, 0x65, 0x63, 0x3b, // lse return -vec;
	0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // .}.uniform vec4 
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x53, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, // Stereo_Saturatio
	0x6e, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // n;.uniform vec4 
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, // Stereo_MS_ZPD_YA
	0x78, 0x69, 0x73, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, // xis;.uniform sam
	0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x20, 0x74, 0x65, 0x78, 0x5f, // pler2DArray tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, // stereo_fb;.unifo
	0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, // rm sampler2DArra
	0x79, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, // y tex_stereo_dep
	0x74, 0x68, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, // th;.uniform vec4
	0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, 0x76, 0x65, 0x63, //  w_h_height;.vec
	0x33, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, // 3 gatherEyeColor
	0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x69, 0x73, // (vec2 u, bool is
	0x4c, 0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, // Left).{.return t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x6f, 0x64, // exture2DArrayLod
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, // (tex_stereo_fb, 
	0x76, 0x65, 0x63, 0x33, 0x28, 0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, 0x20, 0x69, // vec3(u.x, u.y, i
	0x73, 0x4c, 0x65, 0x66, 0x74, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x30, 0x20, 0x3a, 0x20, 0x31, 0x2e, // sLeft ? 0.0 : 1.
	0x30, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // 0), 0.).rgb;.}.v
	0x6f, 0x69, 0x64, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x69, // oid gatherLeftRi
	0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, // ghtColors(vec2 u
	0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x63, 0x6f, 0x6c, 0x2c, // , out vec3 lcol,
	0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x6f, 0x6c, 0x29, 0x0a, //  out vec3 rcol).
	0x7b, 0x0a, 0x6c, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // {.lcol = texture
	0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, // 2DArrayLod(tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x75, // tereo_fb, vec3(u
	0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2c, 0x20, 0x30, 0x2e, // .x, u.y, 0.), 0.
	0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x72, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, // ).xyz;.rcol = te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x6f, 0x64, 0x28, // xture2DArrayLod(
	0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x76, // tex_stereo_fb, v
	0x65, 0x63, 0x33, 0x28, 0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, // ec3(u.x, u.y, 1.
	0x29, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, // ), 0.).xyz;.}.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // iform mat4 Stere
	0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, // o_LeftMat;.unifo
	0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, // rm mat4 Stereo_R
	0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // ightMat;.uniform
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, //  vec4 Stereo_Lef
	0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, // tLuminance_Gamma
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, // ;.uniform vec4 S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, // tereo_RightLumin
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x3b, 0x0a, 0x76, // ance_DynDesat;.v
	0x6f, 0x69, 0x64, 0x20, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x65, 0x73, 0x61, 0x74, // oid DynamicDesat
	0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, // Anaglyph( vec3 l
	0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // Col, vec3 rCol, 
	0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, // out vec3 lDesatC
	0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x44, 0x65, // ol, out vec3 rDe
	0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // satCol).{.float 
	0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, // left2LeftLum = d
	0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // ot(lCol, Stereo_
	0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, // LeftLuminance_Ga
	0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // mma.xyz);.float 
	0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, // left2RightLum = 
	0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // dot(lCol, Stereo
	0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, // _RightLuminance_
	0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, // DynDesat.xyz);.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, // loat right2LeftL
	0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, // um = dot(rCol, S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, // tereo_LeftLumina
	0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, // nce_Gamma.xyz);.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, // float right2Righ
	0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, // tLum = dot(rCol,
	0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, //  Stereo_RightLum
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, // inance_DynDesat.
	0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, // xyz);.float left
	0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, // Lum = left2LeftL
	0x75, 0x6d, 0x20, 0x2b, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, // um + left2RightL
	0x75, 0x6d, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, // um;.float rightL
	0x75, 0x6d, 0x20, 0x3d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, // um = right2LeftL
	0x75, 0x6d, 0x20, 0x2b, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, // um + right2Right
	0x4c, 0x75, 0x6d, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, // Lum;.float leftD
	0x65, 0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, // esat = Stereo_Ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, // ghtLuminance_Dyn
	0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x6c, // Desat.w * abs((l
	0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x6c, 0x65, // eft2LeftLum - le
	0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, // ft2RightLum) / (
	0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, // leftLum + 0.0001
	0x29, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, // ));.float rightD
	0x65, 0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, // esat = Stereo_Ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, // ghtLuminance_Dyn
	0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x72, // Desat.w * abs((r
	0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x72, // ight2LeftLum - r
	0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, // ight2RightLum) /
	0x20, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, //  (rightLum + 0.0
	0x30, 0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, // 001));.lDesatCol
	0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, //  = mix(lCol, vec
	0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x29, // 3_splat(leftLum)
	0x2c, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x72, 0x44, // , leftDesat);.rD
	0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x72, 0x43, // esatCol = mix(rC
	0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x72, // ol, vec3_splat(r
	0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, // ightLum), rightD
	0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x4c, 0x69, // esat);.}.vec3 Li
	0x6e, 0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, // nearAnaglyph( ve
	0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, // c3 lCol, vec3 rC
	0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // ol).{.vec3 color
	0x20, 0x3d, 0x20, 0x28, 0x28, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x6c, 0x43, 0x6f, 0x6c, //  = (( (vec4(lCol
	0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // , 1.)) * (Stereo
	0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x20, // _LeftMat) ) + ( 
	0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, // (vec4(rCol, 1.))
	0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, //  * (Stereo_Right
	0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x72, 0x65, 0x74, // Mat) )).rgb;.ret
	0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, // urn color;.}.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // form vec4 Stereo
	0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, // _DeghostGamma;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, // niform mat4 Ster
	0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, // eo_DeghostFilter
	0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x6e, // ;.vec3 DeghostAn
	0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, // aglyph( vec3 lCo
	0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, // l, vec3 rCol).{.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, 0x6e, // vec3 color = Lin
	0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, // earAnaglyph(lCol
	0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // , rCol);.return 
	0x28, 0x20, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x53, 0x74, // ( (pow(color, St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, // ereo_DeghostGamm
	0x61, 0x2e, 0x72, 0x67, 0x62, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, // a.rgb)) * (mat3(
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, // Stereo_DeghostFi
	0x6c, 0x74, 0x65, 0x72, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, // lter[0].xyz, Ste
	0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, // reo_DeghostFilte
	0x72, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // r[1].xyz, Stereo
	0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x32, // _DeghostFilter[2
	0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, // ].xyz)) );.}.voi
	0x64, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // d main().{.vec3 
	0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x3b, 0x0a, 0x67, 0x61, 0x74, 0x68, // lCol, rCol;.gath
	0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, // erLeftRightColor
	0x73, 0x28, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2c, 0x20, 0x6c, // s(v_texcoord0, l
	0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x6c, 0x43, 0x6f, 0x6c, // Col, rCol);.lCol
	0x20, 0x3d, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, //  = pow(lCol, vec
	0x33, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // 3(Stereo_LeftLum
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, // inance_Gamma.w, 
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, // Stereo_LeftLumin
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, 0x53, 0x74, // ance_Gamma.w, St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, // ereo_LeftLuminan
	0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x43, // ce_Gamma.w));.rC
	0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, // ol = pow(rCol, v
	0x65, 0x63, 0x33, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, // ec3(Stereo_LeftL
	0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, // uminance_Gamma.w
	0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // , Stereo_LeftLum
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, // inance_Gamma.w, 
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, // Stereo_LeftLumin
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x29, 0x29, 0x3b, 0x0a, // ance_Gamma.w));.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2c, 0x20, // vec3 lColDesat, 
	0x72, 0x43, 0x6f, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x3b, 0x0a, 0x44, 0x79, 0x6e, 0x61, 0x6d, // rColDesat;.Dynam
	0x69, 0x63, 0x44, 0x65, 0x73, 0x61, 0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, // icDesatAnaglyph(
	0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6c, 0x43, 0x6f, 0x6c, // lCol, rCol, lCol
	0x44, 0x65, 0x73, 0x61, 0x74, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, // Desat, rColDesat
	0x29, 0x3b, 0x0a, 0x6c, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x44, 0x65, // );.lCol = lColDe
	0x73, 0x61, 0x74, 0x3b, 0x0a, 0x72, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x72, 0x43, 0x6f, 0x6c, // sat;.rCol = rCol
	0x44, 0x65, 0x73, 0x61, 0x74, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // Desat;.vec3 colo
	0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, // r = LinearAnagly
	0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, // ph(lCol, rCol);.
	0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, // bgfx_FragColor =
	0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, //  vec4(pow(color,
	0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x31, 0x2e, 0x2f, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, //  vec3(1./Stereo_
	0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, // LeftLuminance_Ga
	0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, 0x31, 0x2e, 0x2f, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // mma.w, 1./Stereo
	0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, // _LeftLuminance_G
	0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, 0x31, 0x2e, 0x2f, 0x53, 0x74, 0x65, 0x72, 0x65, // amma.w, 1./Stere
	0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, // o_LeftLuminance_
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x29, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, // Gamma.w)), 1.0);
	0x0a, 0x7d, 0x0a, 0x00,                                                                         // .}..
};
static const uint8_t fs_pp_stereo_anaglyph_lin_gamma_dyndesat_st_glsl[9085] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6a, 0x23, // FSH.Jc._......j#
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x34, 0x34, 0x30, 0x0a, 0x23, // ..#version 440.#
	0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x47, 0x4c, 0x5f, 0x45, 0x58, 0x54, // extension GL_EXT
	0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x20, 0x3a, // _texture_array :
	0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x0a, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, //  enable.out vec4
	0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, //  bgfx_FragColor;
	0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, // .#define gl_Frag
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, // Color bgfx_FragC
	0x6f, 0x6c, 0x6f, 0x72, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, // olor.#define tex
	0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ture2D          
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, // texture.#define 
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, // texture2DLod    
	0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, //    textureLod.#d
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x47, // efine texture2DG
	0x72, 0x61, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // rad      texture
	0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, // Grad.#define tex
	0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, // ture2DProjLod   
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x4c, 0x6f, 0x64, 0x0a, 0x23, // textureProjLod.#
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, // define texture2D
	0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // ProjGrad  textur
	0x65, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, // eProjGrad.#defin
	0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x4c, 0x6f, 0x64, // e textureCubeLod
	0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x0a, //      textureLod.
	0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, // #define textureC
	0x75, 0x62, 0x65, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, // ubeGrad    textu
	0x72, 0x65, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, // reGrad.#define t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x33, 0x44, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // exture3D        
	0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, //   texture.#defin
	0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x4c, 0x6f, 0x64, 0x4f, 0x66, // e texture2DLodOf
	0x66, 0x73, 0x65, 0x74, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x4f, // fset textureLodO
	0x66, 0x66, 0x73, 0x65, 0x74, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x61, 0x74, // ffset.#define at
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, // tribute in.#defi
	0x6e, 0x65, 0x20, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, // ne varying in.#d
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x62, 0x67, 0x66, 0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, // efine bgfxShadow
	0x32, 0x44, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, // 2D(_sampler, _co
	0x6f, 0x72, 0x64, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, // ord)     vec4_sp
	0x6c, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x5f, 0x73, 0x61, 0x6d, // lat(texture(_sam
	0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x29, 0x0a, // pler, _coord) ).
	0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x62, 0x67, 0x66, 0x78, 0x53, 0x68, 0x61, 0x64, // #define bgfxShad
	0x6f, 0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // ow2DProj(_sample
	0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, // r, _coord) vec4_
	0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, // splat(texturePro
	0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, // j(_sampler, _coo
	0x72, 0x64, 0x29, 0x20, 0x29, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x66, 0x6c, // rd) ).varying fl
	0x6f, 0x61, 0x74, 0x20, 0x76, 0x5f, 0x65, 0x79, 0x65, 0x3b, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, // oat v_eye;.varyi
	0x6e, 0x67, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, // ng vec2 v_texcoo
	0x72, 0x64, 0x30, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, // rd0;.vec3 instMu
	0x6c, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, // l(vec3 _vec, mat
	0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // 3 _mtx) { return
	0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, //  ( (_vec) * (_mt
	0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, // x) ); }.vec3 ins
	0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, // tMul(mat3 _mtx, 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // vec3 _vec) { ret
	0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, // urn ( (_mtx) * (
	0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, // _vec) ); }.vec4 
	0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, // instMul(vec4 _ve
	0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, // c, mat4 _mtx) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, // return ( (_vec) 
	0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, // * (_mtx) ); }.ve
	0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x20, // c4 instMul(mat4 
	0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, // _mtx, vec4 _vec)
	0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, //  { return ( (_mt
	0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, // x) * (_vec) ); }
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, 0x70, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, // .float rcp(float
	0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, //  _a) { return 1.
	0x30, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x63, 0x70, // 0/_a; }.vec2 rcp
	0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // (vec2 _a) { retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, // rn vec2(1.0)/_a;
	0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x33, //  }.vec3 rcp(vec3
	0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, //  _a) { return ve
	0x63, 0x33, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, // c3(1.0)/_a; }.ve
	0x63, 0x34, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x61, 0x29, 0x20, // c4 rcp(vec4 _a) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x31, 0x2e, // { return vec4(1.
	0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x65, // 0)/_a; }.vec2 ve
	0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, // c2_splat(float _
	0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, // x) { return vec2
	0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, // (_x, _x); }.vec3
	0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, //  vec3_splat(floa
	0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // t _x) { return v
	0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, // ec3(_x, _x, _x);
	0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, //  }.vec4 vec4_spl
	0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, // at(float _x) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, // eturn vec4(_x, _
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, // x, _x, _x); }.uv
	0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, // ec2 uvec2_splat(
	0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, // uint _x) { retur
	0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, // n uvec2(_x, _x);
	0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, //  }.uvec3 uvec3_s
	0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, // plat(uint _x) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, // return uvec3(_x,
	0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, //  _x, _x); }.uvec
	0x34, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, // 4 uvec4_splat(ui
	0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // nt _x) { return 
	0x75, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, // uvec4(_x, _x, _x
	0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, // , _x); }.mat4 mt
	0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, // xFromRows(vec4 _
	0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // 0, vec4 _1, vec4
	0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, //  _2, vec4 _3).{.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, // return transpose
	0x28, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, // (mat4(_0, _1, _2
	0x2c, 0x20, 0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, // , _3) );.}.mat4 
	0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, // mtxFromCols(vec4
	0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, //  _0, vec4 _1, ve
	0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, // c4 _2, vec4 _3).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, // {.return mat4(_0
	0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x3b, 0x0a, 0x7d, // , _1, _2, _3);.}
	0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, // .mat3 mtxFromRow
	0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // s(vec3 _0, vec3 
	0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, // _1, vec3 _2).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, // eturn transpose(
	0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, // mat3(_0, _1, _2)
	0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, //  );.}.mat3 mtxFr
	0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, // omCols(vec3 _0, 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, // vec3 _1, vec3 _2
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x28, // ).{.return mat3(
	0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, // _0, _1, _2);.}.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, // niform vec4 u_vi
	0x65, 0x77, 0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // ewRect;.uniform 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x54, 0x65, 0x78, 0x65, 0x6c, // vec4 u_viewTexel
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, // ;.uniform mat4 u
	0x5f, 0x76, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, // _view;.uniform m
	0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, // at4 u_invView;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x70, 0x72, // niform mat4 u_pr
	0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, // oj;.uniform mat4
	0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, //  u_invProj;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x50, // orm mat4 u_viewP
	0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, // roj;.uniform mat
	0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, // 4 u_invViewProj;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, // .uniform mat4 u_
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, // model[32];.unifo
	0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, // rm mat4 u_modelV
	0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, // iew;.uniform mat
	0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, // 4 u_modelViewPro
	0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // j;.uniform vec4 
	0x75, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x66, 0x34, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, // u_alphaRef4;.flo
	0x61, 0x74, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, // at sqr( float v)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, // .{.return v*v;.}
	0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, // .vec2 sqr( vec2 
	0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, // v).{.return v*v;
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, // .}.vec3 sqr( vec
	0x33, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, // 3 v).{.return v*
	0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6d, 0x75, 0x6c, 0x5f, 0x77, 0x31, // v;.}.vec3 mul_w1
	0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, // ( vec3 v, mat4 m
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2e, 0x78, 0x2a, 0x6d, // ).{.return v.x*m
	0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x79, 0x2a, 0x6d, // [0].xyz + (v.y*m
	0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x7a, 0x2a, 0x6d, // [1].xyz + (v.z*m
	0x5b, 0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x6d, 0x5b, 0x33, 0x5d, 0x2e, 0x78, // [2].xyz + m[3].x
	0x79, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x63, // yz));.}.float ac
	0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, // os_approx_divPI(
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, //  float v).{.floa
	0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, // t x = abs(v);.if
	0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, // (1. - x <= 0.000
	0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, // 06103515625).ret
	0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, // urn (v >= 0.) ? 
	0x30, 0x2e, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, // 0. : 1.;.float r
	0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, // es = ((-0.155972
	0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, // /3.1415926535897
	0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, // 9323846264338327
	0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, // 95) * x + (1.564
	0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, // 67/3.14159265358
	0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, // 9793238462643383
	0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, // 2795) ) * sqrt(1
	0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // . - x);.return (
	0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, // v >= 0.) ? res :
	0x20, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, //  1. - res;.}.flo
	0x61, 0x74, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, // at atan2_approx_
	0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x79, 0x2c, // div2PI( float y,
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, //  float x).{.floa
	0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x79, 0x29, // t abs_y = abs(y)
	0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3d, 0x20, // ;.float abs_x = 
	0x61, 0x62, 0x73, 0x28, 0x78, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, // abs(x);.if(abs_x
	0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, //  <= 0.0000610351
	0x35, 0x36, 0x32, 0x35, 0x20, 0x26, 0x26, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3c, 0x3d, // 5625 && abs_y <=
	0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, //  0.0000610351562
	0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x30, 0x2e, 0x3b, 0x0a, 0x66, 0x6c, // 5).return 0.;.fl
	0x6f, 0x61, 0x74, 0x20, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2d, // oat r = (abs_x -
	0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, //  abs_y) / (abs_x
	0x20, 0x2b, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, //  + abs_y);.float
	0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, //  angle = ((x < 0
	0x2e, 0x29, 0x20, 0x3f, 0x20, 0x28, 0x33, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x20, 0x3a, 0x20, 0x28, // .) ? (3./8.) : (
	0x31, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x29, 0x0a, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x32, 0x31, 0x31, // 1./8.)).+ (0.211
	0x38, 0x36, 0x38, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, // 868 /(2.*3.14159
	0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, // 2653589793238462
	0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x72, 0x20, // 6433832795) * r 
	0x2a, 0x20, 0x72, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x39, 0x38, 0x37, 0x33, 0x30, 0x35, 0x20, 0x2f, // * r - 0.987305 /
	0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, // (2.*3.1415926535
	0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, // 8979323846264338
	0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, // 32795)) * ((x < 
	0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x72, 0x20, 0x3a, 0x20, 0x72, 0x29, 0x3b, 0x0a, 0x72, // 0.) ? -r : r);.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x79, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, // eturn (y < 0.) ?
	0x20, 0x2d, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3a, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x3b, //  -angle : angle;
	0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x73, 0x69, 0x6e, 0x5f, 0x61, 0x70, // .}.float asin_ap
	0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, // prox_divPI( floa
	0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, // t v).{.float x =
	0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, //  abs(v);.if(1. -
	0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, //  x <= 0.00006103
	0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // 515625).return (
	0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x3a, // v >= 0.) ? 0.5 :
	0x20, 0x2d, 0x30, 0x2e, 0x35, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, //  -0.5;.float res
	0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, //  = ((-0.155972/3
	0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, // .141592653589793
	0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, // 2384626433832795
	0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, // ) * x + (1.56467
	0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, // /3.1415926535897
	0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, // 9323846264338327
	0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, // 95) ) * sqrt(1. 
	0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, // - x);.return (v 
	0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x2d, 0x20, 0x72, // >= 0.) ? 0.5 - r
	0x65, 0x73, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x65, 0x73, 0x3b, // es : -0.5 + res;
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x61, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x65, // .}.vec2 ray_to_e
	0x71, 0x75, 0x69, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x75, // quirectangular_u
	0x76, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x61, 0x79, 0x29, 0x0a, 0x7b, 0x0a, 0x72, // v( vec3 ray).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x0a, 0x30, 0x2e, 0x35, 0x20, // eturn vec2(.0.5 
	0x2b, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, // + atan2_approx_d
	0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x79, 0x2c, 0x20, 0x72, 0x61, 0x79, // iv2PI(ray.y, ray
	0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, // .x),.acos_approx
	0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, // _divPI(ray.z));.
	0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, // }.float InvsRGB(
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, //  float color).{.
	0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, // if (color <= 0.0
	0x34, 0x30, 0x34, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, // 4045).return col
	0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x29, // or * (1.0/12.92)
	0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, // ;.else.return po
	0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, // w(color * (1.0/1
	0x2e, 0x30, 0x35, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x2f, 0x31, // .055) + (0.055/1
	0x2e, 0x30, 0x35, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // .055), 2.4);.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x20, // loat InvRec709( 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, // float color).{.i
	0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x38, // f (color <= 0.08
	0x31, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, // 1).return color 
	0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x34, 0x2e, 0x35, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, // * (1.0/4.5);.els
	0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, // e.return pow(col
	0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, // or * (1.0/1.099)
	0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, //  + (0.099/1.099)
	0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // , 1.0/0.45);.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x66, // loat InvGamma( f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // loat color).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, // turn InvsRGB(col
	0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x47, // or);.}.vec3 InvG
	0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // amma( vec3 color
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, // ).{.return vec3(
	0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, // InvGamma(color.x
	0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // ),InvGamma(color
	0x2e, 0x79, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, // .y),InvGamma(col
	0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, // or.z));.}.vec3 I
	0x6e, 0x76, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // nvToneMap( vec3 
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x69, // color).{.float i
	0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x30, 0x2e, 0x35, 0x2f, 0x30, 0x2e, 0x32, // nv_2bh = 0.5/0.2
	0x35, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x34, 0x2e, // 5;.float bh = 4.
	0x30, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2d, 0x20, 0x32, 0x2e, 0x30, 0x3b, 0x0a, 0x72, 0x65, // 0*0.25 - 2.0;.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2d, 0x20, 0x31, 0x2e, // turn (color - 1.
	0x30, 0x20, 0x2b, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2a, 0x28, // 0 + sqrt(color*(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x20, 0x62, 0x68, 0x29, 0x20, 0x2b, 0x20, 0x31, 0x2e, // color + bh) + 1.
	0x30, 0x29, 0x29, 0x2a, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // 0))*inv_2bh;.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // loat sRGB( float
	0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, //  f).{.float s;.i
	0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x33, 0x31, 0x33, 0x30, // f (f <= 0.003130
	0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x20, 0x2a, 0x20, 0x66, // 8).s = 12.92 * f
	0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x35, 0x35, // ;.else.s = 1.055
	0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, //  * pow(f, 1.0/2.
	0x34, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // 4) - 0.055;.retu
	0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x52, 0x65, // rn s;.}.float Re
	0x63, 0x37, 0x30, 0x39, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, // c709( float f).{
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, // .float s;.if (f 
	0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x34, 0x2e, // <= 0.018).s = 4.
	0x35, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, // 5 * f;.else.s = 
	0x31, 0x2e, 0x30, 0x39, 0x39, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x30, // 1.099 * pow(f, 0
	0x2e, 0x34, 0x35, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x3b, 0x0a, 0x72, 0x65, // .45) - 0.099;.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // turn s;.}.float 
	0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, // FBGamma( float c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, // olor).{.return s
	0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // RGB(color);.}.ve
	0x63, 0x32, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, // c2 FBGamma( vec2
	0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, //  color).{.return
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, //  vec2(FBGamma(co
	0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, // lor.x),FBGamma(c
	0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, // olor.y));.}.vec3
	0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, //  FBGamma( vec3 c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // olor).{.return v
	0x65, 0x63, 0x33, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // ec3(FBGamma(colo
	0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, // r.x),FBGamma(col
	0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, // or.y),FBGamma(co
	0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // lor.z));.}.vec3 
	0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x32, 0x32, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // FBGamma22( vec3 
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // color).{.return 
	0x76, 0x65, 0x63, 0x33, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, // vec3(pow(color.x
	0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, // , 1.0/2.2),pow(c
	0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, // olor.y, 1.0/2.2)
	0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x2c, 0x20, 0x31, 0x2e, // ,pow(color.z, 1.
	0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // 0/2.2));.}.float
	0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, //  FBToneMap( floa
	0x74, 0x20, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6c, 0x20, // t l).{.return l 
	0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, // * ((l*0.25 + 1.0
	0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, // ) / (l + 1.0));.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, // }.vec2 FBToneMap
	0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, // ( vec2 color).{.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, // float l = dot(co
	0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, // lor,vec2(0.17620
	0x34, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x2c, // 4+0.0108109*0.5,
	0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, // 0.812985+0.01081
	0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // 09*0.5));.return
	0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, //  color * ((l*0.2
	0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, // 5 + 1.0) / (l + 
	0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, // 1.0));.}.vec3 FB
	0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, // ToneMap( vec3 co
	0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, // lor).{.float l =
	0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x33, 0x28, //  dot(color,vec3(
	0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, // 0.176204,0.81298
	0x35, 0x2c, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x29, 0x29, 0x3b, 0x0a, 0x72, // 5,0.0108109));.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, // eturn color * ((
	0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, // l*0.25 + 1.0) / 
	0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // (l + 1.0));.}.ve
	0x63, 0x34, 0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x28, 0x20, 0x76, 0x65, 0x63, // c4 Additive( vec
	0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // 4 cBase, vec4 cB
	0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, // lend, float perc
	0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, // ent).{.return cB
	0x61, 0x73, 0x65, 0x20, 0x2b, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, // ase + cBlend*per
	0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, // cent;.}.vec3 Scr
	0x65, 0x65, 0x6e, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, // een ( vec3 cBase
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, // , vec3 cBlend).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, // .return 1.0 - (1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, // .0 - cBase) * (1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // .0 - cBlend);.}.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x20, 0x76, 0x65, // vec4 Screen ( ve
	0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, // c4 cBase, vec4 c
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // Blend).{.return 
	0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, // 1.0 - (1.0 - cBa
	0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, // se) * (1.0 - cBl
	0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, // end);.}.vec3 Scr
	0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, // eenHDR ( vec3 cB
	0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, // ase, vec3 cBlend
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, // ).{.return max(1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, // .0 - (1.0 - cBas
	0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, // e) * (1.0 - cBle
	0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, // nd), vec3(0.,0.,
	0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, // 0.));.}.vec4 Scr
	0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // eenHDR ( vec4 cB
	0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, // ase, vec4 cBlend
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, // ).{.return max(1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, // .0 - (1.0 - cBas
	0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, // e) * (1.0 - cBle
	0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, // nd), vec4(0.,0.,
	0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, // 0.,0.));.}.vec4 
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // Multiply ( vec4 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, // cBase, vec4 cBle
	0x6e, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, // nd, float percen
	0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, // t).{.return cBas
	0x65, 0x20, 0x2a, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, // e * cBlend*perce
	0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, // nt;.}.vec4 Overl
	0x61, 0x79, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, // ay ( vec4 cBase,
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, //  vec4 cBlend).{.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, // vec4 cNew = step
	0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, // (0.5, cBase);.cN
	0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, // ew = mix(cBase*c
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, // Blend*2.0, 1.0-2
	0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, // .0*(1.0-cBase)*(
	0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, // 1.0-cBlend), cNe
	0x77, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, // w);.return cNew;
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x48, // .}.vec4 OverlayH
	0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, // DR ( vec4 cBase,
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, //  vec4 cBlend).{.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, // vec4 cNew = step
	0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, // (0.5, cBase);.cN
	0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, // ew = max(mix(cBa
	0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, // se*cBlend*2.0, 1
	0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, // .0-2.0*(1.0-cBas
	0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, // e)*(1.0-cBlend),
	0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, //  cNew), vec4(0.,
	0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // 0.,0.,0.));.retu
	0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // rn cNew;.}.vec3 
	0x63, 0x6f, 0x73, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x5f, 0x73, // cos_hemisphere_s
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x29, 0x0a, 0x7b, // ample( vec2 t).{
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x68, 0x69, 0x20, 0x3d, 0x20, 0x74, 0x2e, 0x79, // .float phi = t.y
	0x20, 0x2a, 0x20, 0x28, 0x32, 0x2e, 0x30, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, //  * (2.0*3.141592
	0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, // 6535897932384626
	0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // 433832795);.floa
	0x74, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, // t cosTheta = sqr
	0x74, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, // t(1.0 - t.x);.fl
	0x6f, 0x61, 0x74, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, // oat sinTheta = s
	0x71, 0x72, 0x74, 0x28, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // qrt(t.x);.float 
	0x73, 0x70, 0x2c, 0x63, 0x70, 0x3b, 0x0a, 0x7b, 0x73, 0x70, 0x3d, 0x73, 0x69, 0x6e, 0x28, 0x70, // sp,cp;.{sp=sin(p
	0x68, 0x69, 0x29, 0x3b, 0x63, 0x70, 0x3d, 0x63, 0x6f, 0x73, 0x28, 0x70, 0x68, 0x69, 0x29, 0x3b, // hi);cp=cos(phi);
	0x7d, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x63, // };.return vec3(c
	0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x63, 0x6f, // p * sinTheta, co
	0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x73, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, // sTheta, sp * sin
	0x54, 0x68, 0x65, 0x74, 0x61, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, // Theta);.}.vec3 r
	0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, // otate_to_vector_
	0x75, 0x70, 0x70, 0x65, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x2c, // upper( vec3 vec,
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, //  vec3 normal).{.
	0x69, 0x66, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x3e, 0x20, 0x2d, 0x30, // if(normal.y > -0
	0x2e, 0x39, 0x39, 0x39, 0x39, 0x39, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // .99999).{.float 
	0x68, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x28, 0x31, 0x2e, 0x30, 0x2b, 0x6e, 0x6f, 0x72, // h = 1.0/(1.0+nor
	0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, // mal.y);.float hz
	0x20, 0x3d, 0x20, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x3b, 0x0a, 0x66, //  = h*normal.z;.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x3d, 0x20, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, // loat hzx = hz*no
	0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // rmal.x;.return v
	0x65, 0x63, 0x33, 0x28, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, // ec3(.vec.x * (no
	0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, // rmal.y+hz*normal
	0x2e, 0x7a, 0x29, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, // .z) + vec.y * no
	0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, // rmal.x - vec.z *
	0x20, 0x68, 0x7a, 0x78, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, //  hzx,.vec.y * no
	0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, // rmal.y - vec.x *
	0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, //  normal.x - vec.
	0x7a, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x2c, 0x0a, 0x76, 0x65, // z * normal.z,.ve
	0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x20, 0x2d, // c.y * normal.z -
	0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x2b, 0x20, 0x76, //  vec.x * hzx + v
	0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, // ec.z * (normal.y
	0x2b, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, // +h*normal.x*norm
	0x61, 0x6c, 0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x72, // al.x));.}.else r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x2d, 0x76, 0x65, 0x63, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, // eturn -vec;.}.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // iform vec4 Stere
	0x6f, 0x5f, 0x53, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x0a, 0x75, 0x6e, // o_Saturation;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // iform vec4 Stere
	0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x3b, 0x0a, // o_MS_ZPD_YAxis;.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, // uniform sampler2
	0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // DArray tex_stere
	0x6f, 0x5f, 0x66, 0x62, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, // o_fb;.uniform sa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x20, 0x74, 0x65, 0x78, // mpler2DArray tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x3b, 0x0a, 0x75, // _stereo_depth;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x77, 0x5f, 0x68, 0x5f, // niform vec4 w_h_
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x67, 0x61, 0x74, // height;.vec3 gat
	0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x76, 0x65, 0x63, 0x32, // herEyeColor(vec2
	0x20, 0x75, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x29, //  u, bool isLeft)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // .{.return textur
	0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, // e2DArrayLod(tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, // stereo_fb, vec3(
	0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, 0x20, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, // u.x, u.y, isLeft
	0x20, 0x3f, 0x20, 0x30, 0x2e, 0x30, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x30, //  ? 0.0 : 1.0), 0
	0x2e, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x67, // .).rgb;.}.void g
	0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, // atherLeftRightCo
	0x6c, 0x6f, 0x72, 0x73, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x6f, 0x75, 0x74, // lors(vec2 u, out
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x63, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, //  vec3 lcol, out 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x6c, 0x63, 0x6f, // vec3 rcol).{.lco
	0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x41, 0x72, 0x72, // l = texture2DArr
	0x61, 0x79, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // ayLod(tex_stereo
	0x5f, 0x66, 0x62, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, // _fb, vec3(u.x, u
	0x2e, 0x79, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2e, 0x78, 0x79, 0x7a, // .y, 0.), 0.).xyz
	0x3b, 0x0a, 0x72, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // ;.rcol = texture
	0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, // 2DArrayLod(tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x75, // tereo_fb, vec3(u
	0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, 0x29, 0x2c, 0x20, 0x30, 0x2e, // .x, u.y, 1.), 0.
	0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // ).xyz;.}.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, //  mat4 Stereo_Lef
	0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, // tMat;.uniform ma
	0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, // t4 Stereo_RightM
	0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, // at;.uniform vec4
	0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, //  Stereo_LeftLumi
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, 0x6e, 0x69, // nance_Gamma;.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // form vec4 Stereo
	0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, // _RightLuminance_
	0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x3b, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x44, // DynDesat;.void D
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x65, 0x73, 0x61, 0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, // ynamicDesatAnagl
	0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // yph( vec3 lCol, 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, // vec3 rCol, out v
	0x65, 0x63, 0x33, 0x20, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, // ec3 lDesatCol, o
	0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, // ut vec3 rDesatCo
	0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, // l).{.float left2
	0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, // LeftLum = dot(lC
	0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, // ol, Stereo_LeftL
	0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, // uminance_Gamma.x
	0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, // yz);.float left2
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, // RightLum = dot(l
	0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, // Col, Stereo_Righ
	0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, // tLuminance_DynDe
	0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // sat.xyz);.float 
	0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, // right2LeftLum = 
	0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // dot(rCol, Stereo
	0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, // _LeftLuminance_G
	0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // amma.xyz);.float
	0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, //  right2RightLum 
	0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, // = dot(rCol, Ster
	0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, // eo_RightLuminanc
	0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, // e_DynDesat.xyz);
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, // .float leftLum =
	0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, //  left2LeftLum + 
	0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, 0x0a, 0x66, // left2RightLum;.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, // loat rightLum = 
	0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, // right2LeftLum + 
	0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, 0x0a, // right2RightLum;.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x20, // float leftDesat 
	0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // = Stereo_RightLu
	0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, // minance_DynDesat
	0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, // .w * abs((left2L
	0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, // eftLum - left2Ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, // ghtLum) / (leftL
	0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x66, // um + 0.0001));.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x20, // loat rightDesat 
	0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // = Stereo_RightLu
	0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, // minance_DynDesat
	0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, // .w * abs((right2
	0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, // LeftLum - right2
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x72, 0x69, 0x67, // RightLum) / (rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, 0x29, // htLum + 0.0001))
	0x3b, 0x0a, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, // ;.lDesatCol = mi
	0x78, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, // x(lCol, vec3_spl
	0x61, 0x74, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x66, // at(leftLum), lef
	0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x72, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, // tDesat);.rDesatC
	0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, // ol = mix(rCol, v
	0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, // ec3_splat(rightL
	0x75, 0x6d, 0x29, 0x2c, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, // um), rightDesat)
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x41, // ;.}.vec3 LinearA
	0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, // naglyph( vec3 lC
	0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, // ol, vec3 rCol).{
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x28, // .vec3 color = ((
	0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, 0x29, //  (vec4(lCol, 1.)
	0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, // ) * (Stereo_Left
	0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, // Mat) ) + ( (vec4
	0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, // (rCol, 1.)) * (S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, // tereo_RightMat) 
	0x29, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, // )).rgb;.return c
	0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // olor;.}.uniform 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, // vec4 Stereo_Degh
	0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // ostGamma;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, // m mat4 Stereo_De
	0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3b, 0x0a, 0x76, 0x65, 0x63, // ghostFilter;.vec
	0x33, 0x20, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, // 3 DeghostAnaglyp
	0x68, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, // h( vec3 lCol, ve
	0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // c3 rCol).{.vec3 
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x41, 0x6e, // color = LinearAn
	0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, // aglyph(lCol, rCo
	0x6c, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x70, 0x6f, // l);.return ( (po
	0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // w(color, Stereo_
	0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x72, 0x67, 0x62, // DeghostGamma.rgb
	0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, // )) * (mat3(Stere
	0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, // o_DeghostFilter[
	0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, // 0].xyz, Stereo_D
	0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x31, 0x5d, 0x2e, // eghostFilter[1].
	0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, // xyz, Stereo_Degh
	0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, // ostFilter[2].xyz
	0x29, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x6d, 0x61, 0x69, // )) );.}.void mai
	0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, // n().{.vec3 lCol,
	0x20, 0x72, 0x43, 0x6f, 0x6c, 0x3b, 0x0a, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x66, //  rCol;.gatherLef
	0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x28, 0x76, 0x5f, 0x74, // tRightColors(v_t
	0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2c, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // excoord0, lCol, 
	0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x6c, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x70, 0x6f, // rCol);.lCol = po
	0x77, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x53, 0x74, 0x65, // w(lCol, vec3(Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, // reo_LeftLuminanc
	0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // e_Gamma.w, Stere
	0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, // o_LeftLuminance_
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // Gamma.w, Stereo_
	0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, // LeftLuminance_Ga
	0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, // mma.w));.rCol = 
	0x70, 0x6f, 0x77, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x53, // pow(rCol, vec3(S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, // tereo_LeftLumina
	0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, 0x53, 0x74, 0x65, // nce_Gamma.w, Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, // reo_LeftLuminanc
	0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // e_Gamma.w, Stere
	0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, // o_LeftLuminance_
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x29, 0x29, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // Gamma.w));.vec3 
	0x6c, 0x43, 0x6f, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x44, // lColDesat, rColD
	0x65, 0x73, 0x61, 0x74, 0x3b, 0x0a, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x65, 0x73, // esat;.DynamicDes
	0x61, 0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, // atAnaglyph(lCol,
	0x20, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, //  rCol, lColDesat
	0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x6c, 0x43, // , rColDesat);.lC
	0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x3b, 0x0a, // ol = lColDesat;.
	0x72, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, // rCol = rColDesat
	0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, // ;.vec3 color = L
	0x69, 0x6e, 0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, // inearAnaglyph(lC
	0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x67, 0x6c, 0x5f, 0x46, 0x72, // ol, rCol);.gl_Fr
	0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x70, // agColor = vec4(p
	0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x31, // ow(color, vec3(1
	0x2e, 0x2f, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // ./Stereo_LeftLum
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, // inance_Gamma.w, 
	0x31, 0x2e, 0x2f, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, // 1./Stereo_LeftLu
	0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, // minance_Gamma.w,
	0x20, 0x31, 0x2e, 0x2f, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, //  1./Stereo_LeftL
	0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, // uminance_Gamma.w
	0x29, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x00,                   // )), 1.0);.}..
};
static const uint8_t fs_pp_stereo_anaglyph_lin_gamma_dyndesat_st_dx11[1795] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x0e, 0x53, // FSH.Jc._.......S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x00, 0x00, // tereo_LeftMat...
	0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, // ........Stereo_R
	0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x00, 0x40, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, // ightMat..@......
	0x00, 0x1a, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // ..Stereo_LeftLum
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x12, 0x00, 0x80, 0x00, // inance_Gamma....
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, // .......Stereo_Ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, // ghtLuminance_Dyn
	0x44, 0x65, 0x73, 0x61, 0x74, 0x12, 0x00, 0x90, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, // Desat...........
	0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x30, 0x01, 0x00, // tex_stereo_fb0..
	0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // ........tex_ster
	0x65, 0x6f, 0x5f, 0x66, 0x62, 0x30, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, // eo_fb0.........<
	0x06, 0x00, 0x00, 0x44, 0x58, 0x42, 0x43, 0xc9, 0x1d, 0x8f, 0x72, 0x54, 0x4e, 0x9d, 0x3d, 0x4d, // ...DXBC...rTN.=M
	0x40, 0x6f, 0x52, 0x45, 0x77, 0x7a, 0x37, 0x01, 0x00, 0x00, 0x00, 0x3c, 0x06, 0x00, 0x00, 0x03, // @oREwz7....<....
	0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x9c, 0x00, 0x00, 0x00, 0xd0, 0x00, 0x00, 0x00, 0x49, // ...,...........I
	0x53, 0x47, 0x4e, 0x68, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x50, // SGNh...........P
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x5c, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x06, 0x06, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, // .......SV_POSITI
	0x4f, 0x4e, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0xab, 0xab, 0xab, 0x4f, // ON.TEXCOORD....O
	0x53, 0x47, 0x4e, 0x2c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x20, // SGN,........... 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, // .......SV_TARGET
	0x00, 0xab, 0xab, 0x53, 0x48, 0x45, 0x58, 0x64, 0x05, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x59, // ...SHEXd...P...Y
	0x01, 0x00, 0x00, 0x6a, 0x08, 0x00, 0x01, 0x59, 0x00, 0x00, 0x04, 0x46, 0x8e, 0x20, 0x00, 0x00, // ...j...Y...F. ..
	0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x03, 0x00, 0x60, 0x10, 0x00, 0x00, // .......Z....`...
	0x00, 0x00, 0x00, 0x58, 0x40, 0x00, 0x04, 0x00, 0x70, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, // ...X@...p......U
	0x55, 0x00, 0x00, 0x62, 0x10, 0x00, 0x03, 0x62, 0x10, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x65, // U..b...b.......e
	0x00, 0x00, 0x03, 0xf2, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x02, 0x03, // .... ......h....
	0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x32, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x96, // ...6...2........
	0x15, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x42, 0x00, 0x10, 0x00, 0x00, // .......6...B....
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0x02, // ....@......H....
	0x02, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, // ...CU..r.......F
	0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .......F~.......
	0x60, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2f, // `.......@....../
	0x00, 0x00, 0x05, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, // ...r.......F....
	0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x08, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, // ...8...r.......F
	0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf6, 0x8f, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, // ......... ......
	0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x05, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, // .......r.......F
	0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x08, 0x82, 0x00, 0x10, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x82, 0x20, 0x00, 0x00, // ...F.......F. ..
	0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x08, 0x12, 0x00, 0x10, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x82, 0x20, 0x00, 0x00, // ...F.......F. ..
	0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x22, 0x00, 0x10, 0x00, 0x01, // ..........."....
	0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x80, 0x41, // ...:...........A
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x82, 0x00, 0x10, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x01, // ...:............
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3a, // ...............:
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x17, 0xb7, 0xd1, 0x38, 0x00, // ........@.....8.
	0x00, 0x00, 0x08, 0x72, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x80, 0x41, // ...r.......F...A
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf6, 0x0f, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, // ................
	0x00, 0x00, 0x07, 0x82, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x09, 0x82, // ...........8....
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x80, 0x81, 0x00, 0x00, 0x00, 0x00, // .......:........
	0x00, 0x00, 0x00, 0x3a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x32, // ...:. .........2
	0x00, 0x00, 0x09, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf6, 0x0f, 0x10, 0x00, 0x00, // ...r............
	0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, // ...F.......F....
	0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x82, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, // ...6............
	0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x11, 0x00, 0x00, 0x08, 0x12, 0x00, 0x10, 0x00, 0x01, // @.....?.........
	0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, // ...F.......F. ..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x08, 0x22, 0x00, 0x10, 0x00, 0x01, // ..........."....
	0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, // ...F.......F. ..
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x08, 0x42, 0x00, 0x10, 0x00, 0x01, // ...........B....
	0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, // ...F.......F. ..
	0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x32, 0x00, 0x10, 0x00, 0x00, // .......6...2....
	0x00, 0x00, 0x00, 0x96, 0x15, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x42, // ...........6...B
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x48, // ........@.....?H
	0x00, 0x00, 0x8d, 0x02, 0x02, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x72, 0x00, 0x10, 0x00, 0x00, // .......CU..r....
	0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, 0x00, // ...F.......F~...
	0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, // ....`.......@...
	0x00, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x05, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, // .../...r.......F
	0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x08, 0x72, 0x00, 0x10, 0x00, 0x00, // .......8...r....
	0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf6, 0x8f, 0x20, 0x00, 0x00, // ...F......... ..
	0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x05, 0x72, 0x00, 0x10, 0x00, 0x00, // ...........r....
	0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x08, 0x82, // ...F............
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, // .......F.......F
	0x82, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x08, 0x82, // . ..............
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, // .......F.......F
	0x82, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x12, // . ..............
	0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, // .......:.......:
	0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x82, // ...A............
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, // .......:.......:
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x82, 0x00, 0x10, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x17, // ...:........@...
	0xb7, 0xd1, 0x38, 0x00, 0x00, 0x00, 0x08, 0xe2, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x06, // ..8.............
	0x09, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf6, 0x0f, 0x10, 0x00, 0x00, // ...A............
	0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x07, 0x82, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, // ................
	0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x38, // .......:.......8
	0x00, 0x00, 0x09, 0x82, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x80, 0x81, // ...........:....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, // .......:. ......
	0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x09, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf6, // ...2...r........
	0x0f, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x96, 0x07, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, // ...............F
	0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x82, 0x00, 0x10, 0x00, 0x00, // .......6........
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x11, 0x00, 0x00, 0x08, 0x12, // ....@.....?.....
	0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, // .......F.......F
	0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x08, 0x22, // . ............."
	0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, // .......F.......F
	0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x08, 0x42, // . .............B
	0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, // .......F.......F
	0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x72, // . .............r
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, // .......F.......F
	0x02, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x05, 0x72, 0x00, 0x10, 0x00, 0x00, // ......./...r....
	0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x0b, 0x82, // ...F............
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, // ........@.....?.
	0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x3a, 0x80, 0x20, 0x00, 0x00, // ..?...?...?:. ..
	0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x07, 0x72, 0x00, 0x10, 0x00, 0x00, // .......8...r....
	0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf6, 0x0f, 0x10, 0x00, 0x00, // ...F............
	0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x05, 0x72, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, // .......r ......F
	0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x82, 0x20, 0x10, 0x00, 0x00, // .......6.... ...
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x3e, 0x00, 0x00, 0x01, 0x00, // ....@.....?>....
	0x00, 0xa0, 0x00,                                                                               // ...
};
static const uint8_t fs_pp_stereo_anaglyph_lin_gamma_dyndesat_st_spv[3655] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x1a, 0x53, // FSH.Jc._.......S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, // tereo_LeftLumina
	0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x12, 0x01, 0x80, 0x00, 0x01, 0x00, 0x00, // nce_Gamma.......
	0x00, 0x00, 0x00, 0x1e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, // ....Stereo_Right
	0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, // Luminance_DynDes
	0x61, 0x74, 0x12, 0x01, 0x90, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x53, 0x74, 0x65, // at...........Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x01, 0x00, 0x00, 0x04, // reo_LeftMat.....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, // ......Stereo_Rig
	0x68, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x01, 0x40, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, // htMat..@........
	0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x30, 0x00, 0x02, // tex_stereo_fb0..
	0x00, 0x00, 0x00, 0x00, 0x03, 0x22, 0x00, 0x98, 0x0d, 0x00, 0x00, 0x03, 0x02, 0x23, 0x07, 0x00, // .....".......#..
	0x00, 0x01, 0x00, 0x0b, 0x00, 0x08, 0x00, 0x47, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, // .......G........
	0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, // ...............G
	0x4c, 0x53, 0x4c, 0x2e, 0x73, 0x74, 0x64, 0x2e, 0x34, 0x35, 0x30, 0x00, 0x00, 0x00, 0x00, 0x0e, // LSL.std.450.....
	0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x07, 0x00, 0x04, // ................
	0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x3d, // .......main....=
	0x01, 0x00, 0x00, 0x4a, 0x01, 0x00, 0x00, 0x10, 0x00, 0x03, 0x00, 0x04, 0x00, 0x00, 0x00, 0x07, // ...J............
	0x00, 0x00, 0x00, 0x03, 0x00, 0x03, 0x00, 0x05, 0x00, 0x00, 0x00, 0xf4, 0x01, 0x00, 0x00, 0x05, // ................
	0x00, 0x04, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x05, // .......main.....
	0x00, 0x08, 0x00, 0x42, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // ...B...tex_stere
	0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x00, 0x00, 0x00, 0x00, 0x05, // o_fbSampler.....
	0x00, 0x08, 0x00, 0x45, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // ...E...tex_stere
	0x6f, 0x5f, 0x66, 0x62, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x00, 0x00, 0x00, 0x00, 0x05, // o_fbTexture.....
	0x00, 0x06, 0x00, 0x8a, 0x00, 0x00, 0x00, 0x55, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x6c, // .......UniformBl
	0x6f, 0x63, 0x6b, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x07, 0x00, 0x8a, 0x00, 0x00, 0x00, 0x00, // ock.............
	0x00, 0x00, 0x00, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, // ...Stereo_LeftMa
	0x74, 0x00, 0x00, 0x06, 0x00, 0x07, 0x00, 0x8a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x53, // t..............S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x00, 0x06, // tereo_RightMat..
	0x00, 0x0a, 0x00, 0x8a, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x53, 0x74, 0x65, 0x72, 0x65, // ...........Stere
	0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, // o_LeftLuminance_
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x00, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x8a, 0x00, 0x00, 0x00, 0x03, // Gamma...........
	0x00, 0x00, 0x00, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, // ...Stereo_RightL
	0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, // uminance_DynDesa
	0x74, 0x00, 0x00, 0x05, 0x00, 0x03, 0x00, 0x8c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, // t...............
	0x00, 0x05, 0x00, 0x3d, 0x01, 0x00, 0x00, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, // ...=...v_texcoor
	0x64, 0x30, 0x00, 0x05, 0x00, 0x06, 0x00, 0x4a, 0x01, 0x00, 0x00, 0x62, 0x67, 0x66, 0x78, 0x5f, // d0.....J...bgfx_
	0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x42, // FragData0..G...B
	0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x42, // ...".......G...B
	0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x45, // ...!.......G...E
	0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x45, // ...".......G...E
	0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x48, 0x00, 0x04, 0x00, 0x8a, // ...!.......H....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0x8a, // ...........H....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, // .......#.......H
	0x00, 0x05, 0x00, 0x8a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x10, // ................
	0x00, 0x00, 0x00, 0x48, 0x00, 0x04, 0x00, 0x8a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04, // ...H............
	0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0x8a, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x23, // ...H...........#
	0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0x8a, 0x00, 0x00, 0x00, 0x01, // ...@...H........
	0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0x8a, // ...........H....
	0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x48, // .......#.......H
	0x00, 0x05, 0x00, 0x8a, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x90, // ...........#....
	0x00, 0x00, 0x00, 0x47, 0x00, 0x03, 0x00, 0x8a, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x47, // ...G...........G
	0x00, 0x04, 0x00, 0x8c, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, // .......".......G
	0x00, 0x04, 0x00, 0x8c, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, // .......!.......G
	0x00, 0x04, 0x00, 0x3d, 0x01, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, // ...=...........G
	0x00, 0x04, 0x00, 0x4a, 0x01, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, // ...J............
	0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x21, 0x00, 0x03, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, // .......!........
	0x00, 0x00, 0x00, 0x1a, 0x00, 0x02, 0x00, 0x06, 0x00, 0x00, 0x00, 0x16, 0x00, 0x03, 0x00, 0x07, // ................
	0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x19, 0x00, 0x09, 0x00, 0x08, 0x00, 0x00, 0x00, 0x07, // ... ............
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x0b, // ................
	0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x0e, // ................
	0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x23, // ...............#
	0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x41, // ........... ...A
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x41, // ...........;...A
	0x00, 0x00, 0x00, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x44, // ...B....... ...D
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x44, // ...........;...D
	0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x00, 0x04, 0x00, 0x4e, // ...E...........N
	0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x4e, // ... .......+...N
	0x00, 0x00, 0x00, 0x4f, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x4e, // ...O.......+...N
	0x00, 0x00, 0x00, 0x53, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x03, 0x00, 0x57, // ...S...........W
	0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x15, 0x00, 0x04, 0x00, 0x6c, 0x00, 0x00, 0x00, 0x20, // ...........l... 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x73, // .......+.......s
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x7f, // .......+........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x18, 0x00, 0x04, 0x00, 0x89, 0x00, 0x00, 0x00, 0x0e, // ......?.........
	0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x06, 0x00, 0x8a, 0x00, 0x00, 0x00, 0x89, // ................
	0x00, 0x00, 0x00, 0x89, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x20, // ............... 
	0x00, 0x04, 0x00, 0x8b, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x8a, 0x00, 0x00, 0x00, 0x3b, // ...............;
	0x00, 0x04, 0x00, 0x8b, 0x00, 0x00, 0x00, 0x8c, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2b, // ...............+
	0x00, 0x04, 0x00, 0x4e, 0x00, 0x00, 0x00, 0x8d, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x20, // ...N........... 
	0x00, 0x04, 0x00, 0x8e, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x2b, // ...............+
	0x00, 0x04, 0x00, 0x4e, 0x00, 0x00, 0x00, 0x95, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x2b, // ...N...........+
	0x00, 0x04, 0x00, 0x6c, 0x00, 0x00, 0x00, 0xaf, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x20, // ...l........... 
	0x00, 0x04, 0x00, 0xb0, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x2b, // ...............+
	0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0xb7, 0x00, 0x00, 0x00, 0x17, 0xb7, 0xd1, 0x38, 0x20, // ..............8 
	0x00, 0x04, 0x00, 0xdc, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x89, 0x00, 0x00, 0x00, 0x20, // ............... 
	0x00, 0x04, 0x00, 0x3c, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x3b, // ...<.......#...;
	0x00, 0x04, 0x00, 0x3c, 0x01, 0x00, 0x00, 0x3d, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x20, // ...<...=....... 
	0x00, 0x04, 0x00, 0x49, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x3b, // ...I...........;
	0x00, 0x04, 0x00, 0x49, 0x01, 0x00, 0x00, 0x4a, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x36, // ...I...J.......6
	0x00, 0x05, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, // ................
	0x00, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x05, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x06, // ...........=....
	0x00, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00, 0x42, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x08, // ...C...B...=....
	0x00, 0x00, 0x00, 0x46, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x23, // ...F...E...=...#
	0x00, 0x00, 0x00, 0x3e, 0x01, 0x00, 0x00, 0x3d, 0x01, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, // ...>...=...Q....
	0x00, 0x00, 0x00, 0xb0, 0x01, 0x00, 0x00, 0x3e, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, // .......>.......Q
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xb2, 0x01, 0x00, 0x00, 0x3e, 0x01, 0x00, 0x00, 0x01, // ...........>....
	0x00, 0x00, 0x00, 0x50, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xb3, 0x01, 0x00, 0x00, 0xb0, // ...P............
	0x01, 0x00, 0x00, 0xb2, 0x01, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, 0x57, // .......s...V...W
	0x00, 0x00, 0x00, 0xc5, 0x01, 0x00, 0x00, 0x46, 0x00, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00, 0x58, // .......F...C...X
	0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xc8, 0x01, 0x00, 0x00, 0xc5, 0x01, 0x00, 0x00, 0xb3, // ................
	0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00, 0x4f, 0x00, 0x08, 0x00, 0x0b, // .......s...O....
	0x00, 0x00, 0x00, 0xb6, 0x01, 0x00, 0x00, 0xc8, 0x01, 0x00, 0x00, 0xc8, 0x01, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, // ...........Q....
	0x00, 0x00, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x3e, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, // .......>.......Q
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xba, 0x01, 0x00, 0x00, 0x3e, 0x01, 0x00, 0x00, 0x01, // ...........>....
	0x00, 0x00, 0x00, 0x50, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xbb, 0x01, 0x00, 0x00, 0xb8, // ...P............
	0x01, 0x00, 0x00, 0xba, 0x01, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, 0x57, // ...........V...W
	0x00, 0x00, 0x00, 0xcf, 0x01, 0x00, 0x00, 0x46, 0x00, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00, 0x58, // .......F...C...X
	0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xd2, 0x01, 0x00, 0x00, 0xcf, 0x01, 0x00, 0x00, 0xbb, // ................
	0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00, 0x4f, 0x00, 0x08, 0x00, 0x0b, // .......s...O....
	0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0xd2, 0x01, 0x00, 0x00, 0xd2, 0x01, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0xb0, // ...........A....
	0x00, 0x00, 0x00, 0x79, 0x01, 0x00, 0x00, 0x8c, 0x00, 0x00, 0x00, 0x8d, 0x00, 0x00, 0x00, 0xaf, // ...y............
	0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x7a, 0x01, 0x00, 0x00, 0x79, // ...=.......z...y
	0x01, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0xb0, 0x00, 0x00, 0x00, 0x7b, 0x01, 0x00, 0x00, 0x8c, // ...A.......{....
	0x00, 0x00, 0x00, 0x8d, 0x00, 0x00, 0x00, 0xaf, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, // ...........=....
	0x00, 0x00, 0x00, 0x7c, 0x01, 0x00, 0x00, 0x7b, 0x01, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0xb0, // ...|...{...A....
	0x00, 0x00, 0x00, 0x7d, 0x01, 0x00, 0x00, 0x8c, 0x00, 0x00, 0x00, 0x8d, 0x00, 0x00, 0x00, 0xaf, // ...}............
	0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x7e, 0x01, 0x00, 0x00, 0x7d, // ...=.......~...}
	0x01, 0x00, 0x00, 0x50, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x7f, 0x01, 0x00, 0x00, 0x7a, // ...P...........z
	0x01, 0x00, 0x00, 0x7c, 0x01, 0x00, 0x00, 0x7e, 0x01, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x0b, // ...|...~........
	0x00, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0xb6, // ................
	0x01, 0x00, 0x00, 0x7f, 0x01, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0xb0, 0x00, 0x00, 0x00, 0x82, // .......A........
	0x01, 0x00, 0x00, 0x8c, 0x00, 0x00, 0x00, 0x8d, 0x00, 0x00, 0x00, 0xaf, 0x00, 0x00, 0x00, 0x3d, // ...............=
	0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x83, 0x01, 0x00, 0x00, 0x82, 0x01, 0x00, 0x00, 0x41, // ...............A
	0x00, 0x06, 0x00, 0xb0, 0x00, 0x00, 0x00, 0x84, 0x01, 0x00, 0x00, 0x8c, 0x00, 0x00, 0x00, 0x8d, // ................
	0x00, 0x00, 0x00, 0xaf, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x85, // .......=........
	0x01, 0x00, 0x00, 0x84, 0x01, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0xb0, 0x00, 0x00, 0x00, 0x86, // .......A........
	0x01, 0x00, 0x00, 0x8c, 0x00, 0x00, 0x00, 0x8d, 0x00, 0x00, 0x00, 0xaf, 0x00, 0x00, 0x00, 0x3d, // ...............=
	0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x87, 0x01, 0x00, 0x00, 0x86, 0x01, 0x00, 0x00, 0x50, // ...............P
	0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x88, 0x01, 0x00, 0x00, 0x83, 0x01, 0x00, 0x00, 0x85, // ................
	0x01, 0x00, 0x00, 0x87, 0x01, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x89, // ................
	0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0xbe, 0x01, 0x00, 0x00, 0x88, // ................
	0x01, 0x00, 0x00, 0x41, 0x00, 0x05, 0x00, 0x8e, 0x00, 0x00, 0x00, 0xe5, 0x01, 0x00, 0x00, 0x8c, // ...A............
	0x00, 0x00, 0x00, 0x8d, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xe6, // .......=........
	0x01, 0x00, 0x00, 0xe5, 0x01, 0x00, 0x00, 0x4f, 0x00, 0x08, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xe7, // .......O........
	0x01, 0x00, 0x00, 0xe6, 0x01, 0x00, 0x00, 0xe6, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x94, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xe8, // ................
	0x01, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0xe7, 0x01, 0x00, 0x00, 0x41, 0x00, 0x05, 0x00, 0x8e, // ...........A....
	0x00, 0x00, 0x00, 0xea, 0x01, 0x00, 0x00, 0x8c, 0x00, 0x00, 0x00, 0x95, 0x00, 0x00, 0x00, 0x3d, // ...............=
	0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xeb, 0x01, 0x00, 0x00, 0xea, 0x01, 0x00, 0x00, 0x4f, // ...............O
	0x00, 0x08, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xec, 0x01, 0x00, 0x00, 0xeb, 0x01, 0x00, 0x00, 0xeb, // ................
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x94, // ................
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xed, 0x01, 0x00, 0x00, 0x80, 0x01, 0x00, 0x00, 0xec, // ................
	0x01, 0x00, 0x00, 0x41, 0x00, 0x05, 0x00, 0x8e, 0x00, 0x00, 0x00, 0xef, 0x01, 0x00, 0x00, 0x8c, // ...A............
	0x00, 0x00, 0x00, 0x8d, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xf0, // .......=........
	0x01, 0x00, 0x00, 0xef, 0x01, 0x00, 0x00, 0x4f, 0x00, 0x08, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xf1, // .......O........
	0x01, 0x00, 0x00, 0xf0, 0x01, 0x00, 0x00, 0xf0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x94, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xf2, // ................
	0x01, 0x00, 0x00, 0x89, 0x01, 0x00, 0x00, 0xf1, 0x01, 0x00, 0x00, 0x41, 0x00, 0x05, 0x00, 0x8e, // ...........A....
	0x00, 0x00, 0x00, 0xf4, 0x01, 0x00, 0x00, 0x8c, 0x00, 0x00, 0x00, 0x95, 0x00, 0x00, 0x00, 0x3d, // ...............=
	0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xf5, 0x01, 0x00, 0x00, 0xf4, 0x01, 0x00, 0x00, 0x4f, // ...............O
	0x00, 0x08, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xf6, 0x01, 0x00, 0x00, 0xf5, 0x01, 0x00, 0x00, 0xf5, // ................
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x94, // ................
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xf7, 0x01, 0x00, 0x00, 0x89, 0x01, 0x00, 0x00, 0xf6, // ................
	0x01, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xfa, 0x01, 0x00, 0x00, 0xe8, // ................
	0x01, 0x00, 0x00, 0xed, 0x01, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xfd, // ................
	0x01, 0x00, 0x00, 0xf2, 0x01, 0x00, 0x00, 0xf7, 0x01, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0xb0, // ...........A....
	0x00, 0x00, 0x00, 0xfe, 0x01, 0x00, 0x00, 0x8c, 0x00, 0x00, 0x00, 0x95, 0x00, 0x00, 0x00, 0xaf, // ................
	0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0xff, 0x01, 0x00, 0x00, 0xfe, // ...=............
	0x01, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0xe8, // ................
	0x01, 0x00, 0x00, 0xed, 0x01, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x04, // ................
	0x02, 0x00, 0x00, 0xfa, 0x01, 0x00, 0x00, 0xb7, 0x00, 0x00, 0x00, 0x88, 0x00, 0x05, 0x00, 0x07, // ................
	0x00, 0x00, 0x00, 0x05, 0x02, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x04, 0x02, 0x00, 0x00, 0x0c, // ................
	0x00, 0x06, 0x00, 0x07, 0x00, 0x00, 0x00, 0x06, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04, // ................
	0x00, 0x00, 0x00, 0x05, 0x02, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07, // ................
	0x02, 0x00, 0x00, 0xff, 0x01, 0x00, 0x00, 0x06, 0x02, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0xb0, // ...........A....
	0x00, 0x00, 0x00, 0x08, 0x02, 0x00, 0x00, 0x8c, 0x00, 0x00, 0x00, 0x95, 0x00, 0x00, 0x00, 0xaf, // ................
	0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x09, 0x02, 0x00, 0x00, 0x08, // ...=............
	0x02, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x0c, 0x02, 0x00, 0x00, 0xf2, // ................
	0x01, 0x00, 0x00, 0xf7, 0x01, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x0e, // ................
	0x02, 0x00, 0x00, 0xfd, 0x01, 0x00, 0x00, 0xb7, 0x00, 0x00, 0x00, 0x88, 0x00, 0x05, 0x00, 0x07, // ................
	0x00, 0x00, 0x00, 0x0f, 0x02, 0x00, 0x00, 0x0c, 0x02, 0x00, 0x00, 0x0e, 0x02, 0x00, 0x00, 0x0c, // ................
	0x00, 0x06, 0x00, 0x07, 0x00, 0x00, 0x00, 0x10, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04, // ................
	0x00, 0x00, 0x00, 0x0f, 0x02, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x11, // ................
	0x02, 0x00, 0x00, 0x09, 0x02, 0x00, 0x00, 0x10, 0x02, 0x00, 0x00, 0x50, 0x00, 0x06, 0x00, 0x0b, // ...........P....
	0x00, 0x00, 0x00, 0x21, 0x02, 0x00, 0x00, 0xfa, 0x01, 0x00, 0x00, 0xfa, 0x01, 0x00, 0x00, 0xfa, // ...!............
	0x01, 0x00, 0x00, 0x50, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x15, 0x02, 0x00, 0x00, 0x07, // ...P............
	0x02, 0x00, 0x00, 0x07, 0x02, 0x00, 0x00, 0x07, 0x02, 0x00, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x0b, // ................
	0x00, 0x00, 0x00, 0x27, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x80, // ...'............
	0x01, 0x00, 0x00, 0x21, 0x02, 0x00, 0x00, 0x15, 0x02, 0x00, 0x00, 0x50, 0x00, 0x06, 0x00, 0x0b, // ...!.......P....
	0x00, 0x00, 0x00, 0x2b, 0x02, 0x00, 0x00, 0xfd, 0x01, 0x00, 0x00, 0xfd, 0x01, 0x00, 0x00, 0xfd, // ...+............
	0x01, 0x00, 0x00, 0x50, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x1b, 0x02, 0x00, 0x00, 0x11, // ...P............
	0x02, 0x00, 0x00, 0x11, 0x02, 0x00, 0x00, 0x11, 0x02, 0x00, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x0b, // ................
	0x00, 0x00, 0x00, 0x31, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x89, // ...1............
	0x01, 0x00, 0x00, 0x2b, 0x02, 0x00, 0x00, 0x1b, 0x02, 0x00, 0x00, 0x41, 0x00, 0x05, 0x00, 0xdc, // ...+.......A....
	0x00, 0x00, 0x00, 0x35, 0x02, 0x00, 0x00, 0x8c, 0x00, 0x00, 0x00, 0x53, 0x00, 0x00, 0x00, 0x3d, // ...5.......S...=
	0x00, 0x04, 0x00, 0x89, 0x00, 0x00, 0x00, 0x36, 0x02, 0x00, 0x00, 0x35, 0x02, 0x00, 0x00, 0x51, // .......6...5...Q
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x38, 0x02, 0x00, 0x00, 0x27, 0x02, 0x00, 0x00, 0x00, // .......8...'....
	0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x39, 0x02, 0x00, 0x00, 0x27, // ...Q.......9...'
	0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x3a, // .......Q.......:
	0x02, 0x00, 0x00, 0x27, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x50, 0x00, 0x07, 0x00, 0x0e, // ...'.......P....
	0x00, 0x00, 0x00, 0x3b, 0x02, 0x00, 0x00, 0x38, 0x02, 0x00, 0x00, 0x39, 0x02, 0x00, 0x00, 0x3a, // ...;...8...9...:
	0x02, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x91, 0x00, 0x05, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x3c, // ...............<
	0x02, 0x00, 0x00, 0x36, 0x02, 0x00, 0x00, 0x3b, 0x02, 0x00, 0x00, 0x41, 0x00, 0x05, 0x00, 0xdc, // ...6...;...A....
	0x00, 0x00, 0x00, 0x3d, 0x02, 0x00, 0x00, 0x8c, 0x00, 0x00, 0x00, 0x4f, 0x00, 0x00, 0x00, 0x3d, // ...=.......O...=
	0x00, 0x04, 0x00, 0x89, 0x00, 0x00, 0x00, 0x3e, 0x02, 0x00, 0x00, 0x3d, 0x02, 0x00, 0x00, 0x51, // .......>...=...Q
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0x31, 0x02, 0x00, 0x00, 0x00, // .......@...1....
	0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x41, 0x02, 0x00, 0x00, 0x31, // ...Q.......A...1
	0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x42, // .......Q.......B
	0x02, 0x00, 0x00, 0x31, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x50, 0x00, 0x07, 0x00, 0x0e, // ...1.......P....
	0x00, 0x00, 0x00, 0x43, 0x02, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0x41, 0x02, 0x00, 0x00, 0x42, // ...C...@...A...B
	0x02, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x91, 0x00, 0x05, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x44, // ...............D
	0x02, 0x00, 0x00, 0x3e, 0x02, 0x00, 0x00, 0x43, 0x02, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x0e, // ...>...C........
	0x00, 0x00, 0x00, 0x45, 0x02, 0x00, 0x00, 0x3c, 0x02, 0x00, 0x00, 0x44, 0x02, 0x00, 0x00, 0x4f, // ...E...<...D...O
	0x00, 0x08, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x46, 0x02, 0x00, 0x00, 0x45, 0x02, 0x00, 0x00, 0x45, // .......F...E...E
	0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x41, // ...............A
	0x00, 0x06, 0x00, 0xb0, 0x00, 0x00, 0x00, 0x95, 0x01, 0x00, 0x00, 0x8c, 0x00, 0x00, 0x00, 0x8d, // ................
	0x00, 0x00, 0x00, 0xaf, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x96, // .......=........
	0x01, 0x00, 0x00, 0x95, 0x01, 0x00, 0x00, 0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x97, // ................
	0x01, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x96, 0x01, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0xb0, // ...........A....
	0x00, 0x00, 0x00, 0x98, 0x01, 0x00, 0x00, 0x8c, 0x00, 0x00, 0x00, 0x8d, 0x00, 0x00, 0x00, 0xaf, // ................
	0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x98, // ...=............
	0x01, 0x00, 0x00, 0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x9a, 0x01, 0x00, 0x00, 0x7f, // ................
	0x00, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0xb0, 0x00, 0x00, 0x00, 0x9b, // .......A........
	0x01, 0x00, 0x00, 0x8c, 0x00, 0x00, 0x00, 0x8d, 0x00, 0x00, 0x00, 0xaf, 0x00, 0x00, 0x00, 0x3d, // ...............=
	0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x9c, 0x01, 0x00, 0x00, 0x9b, 0x01, 0x00, 0x00, 0x88, // ................
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x9d, 0x01, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x9c, // ................
	0x01, 0x00, 0x00, 0x50, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x9e, 0x01, 0x00, 0x00, 0x97, // ...P............
	0x01, 0x00, 0x00, 0x9a, 0x01, 0x00, 0x00, 0x9d, 0x01, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x0b, // ................
	0x00, 0x00, 0x00, 0x9f, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x46, // ...............F
	0x02, 0x00, 0x00, 0x9e, 0x01, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xa0, // .......Q........
	0x01, 0x00, 0x00, 0x9f, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, // ...........Q....
	0x00, 0x00, 0x00, 0xa1, 0x01, 0x00, 0x00, 0x9f, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x51, // ...............Q
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xa2, 0x01, 0x00, 0x00, 0x9f, 0x01, 0x00, 0x00, 0x02, // ................
	0x00, 0x00, 0x00, 0x50, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xa3, 0x01, 0x00, 0x00, 0xa0, // ...P............
	0x01, 0x00, 0x00, 0xa1, 0x01, 0x00, 0x00, 0xa2, 0x01, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x3e, // ...............>
	0x00, 0x03, 0x00, 0x4a, 0x01, 0x00, 0x00, 0xa3, 0x01, 0x00, 0x00, 0xfd, 0x00, 0x01, 0x00, 0x38, // ...J...........8
	0x00, 0x01, 0x00, 0x00, 0x00, 0xa0, 0x00,                                                       // .......
};
static const bgfx::EmbeddedShader fs_pp_stereo_anaglyph_lin_gamma_dyndesat_st = BGFX_EMBEDDED_SHADER(fs_pp_stereo_anaglyph_lin_gamma_dyndesat_st);
