// Stereo Shaders

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Build of fragment shader from fs_pp_stereo.sc to fs_pp_stereo_sbs with options: SBS NOSTEREO
static const uint8_t fs_pp_stereo_sbs_mtl[3162] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x14, 0x74, // FSH.o.><.......t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, // ex_stereo_fbSamp
	0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x74, 0x65, // ler...........te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x54, 0x65, 0x78, 0x74, 0x75, // x_stereo_fbTextu
	0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x74, 0x65, 0x78, // re...........tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, // _stereo_depthSam
	0x70, 0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x74, // pler...........t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x54, // ex_stereo_depthT
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, // exture..........
	0x13, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, // .Stereo_MS_ZPD_Y
	0x41, 0x78, 0x69, 0x73, 0x12, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x77, // Axis...........w
	0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x01, 0x10, 0x00, 0x01, 0x00, 0x00, // _h_height.......
	0x00, 0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, // ....tex_stereo_f
	0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x74, 0x65, 0x78, 0x5f, // b...........tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x10, 0x00, 0x00, 0x00, // stereo_depth....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5c, 0x0b, 0x00, 0x00, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, // ..........#inclu
	0x64, 0x65, 0x20, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x64, 0x6c, 0x69, 0x62, // de <metal_stdlib
	0x3e, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x73, 0x69, 0x6d, 0x64, // >.#include <simd
	0x2f, 0x73, 0x69, 0x6d, 0x64, 0x2e, 0x68, 0x3e, 0x0a, 0x0a, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, // /simd.h>..using 
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x3b, // namespace metal;
	0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, // ..struct _Global
	0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, // .{.    float4 St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, // ereo_MS_ZPD_YAxi
	0x73, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x77, 0x5f, // s;.    float4 w_
	0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, // h_height;.};..st
	0x72, 0x75, 0x63, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, // ruct xlatMtlMain
	0x5f, 0x6f, 0x75, 0x74, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // _out.{.    float
	0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, // 4 bgfx_FragData0
	0x20, 0x5b, 0x5b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, //  [[color(0)]];.}
	0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, // ;..struct xlatMt
	0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, // lMain_in.{.    f
	0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, // loat2 v_texcoord
	0x30, 0x20, 0x5b, 0x5b, 0x75, 0x73, 0x65, 0x72, 0x28, 0x6c, 0x6f, 0x63, 0x6e, 0x30, 0x29, 0x5d, // 0 [[user(locn0)]
	0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, // ];.};..fragment 
	0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x20, // xlatMtlMain_out 
	0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x28, 0x78, 0x6c, 0x61, 0x74, // xlatMtlMain(xlat
	0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x5b, 0x5b, // MtlMain_in in [[
	0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x5d, 0x5d, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, // stage_in]], cons
	0x74, 0x61, 0x6e, 0x74, 0x20, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x26, 0x20, 0x5f, 0x6d, // tant _Global& _m
	0x74, 0x6c, 0x5f, 0x75, 0x20, 0x5b, 0x5b, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x28, 0x30, 0x29, // tl_u [[buffer(0)
	0x5d, 0x5d, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, // ]], texture2d<fl
	0x6f, 0x61, 0x74, 0x3e, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // oat> tex_stereo_
	0x66, 0x62, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x30, 0x29, 0x5d, // fb [[texture(0)]
	0x5d, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, 0x6f, // ], texture2d<flo
	0x61, 0x74, 0x3e, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, // at> tex_stereo_d
	0x65, 0x70, 0x74, 0x68, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x31, // epth [[texture(1
	0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x74, 0x65, 0x78, // )]], sampler tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, // _stereo_fbSample
	0x72, 0x20, 0x5b, 0x5b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, // r [[sampler(0)]]
	0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // , sampler tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, // ereo_depthSample
	0x72, 0x20, 0x5b, 0x5b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x31, 0x29, 0x5d, 0x5d, // r [[sampler(1)]]
	0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, // ).{.    xlatMtlM
	0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x3d, 0x20, 0x7b, 0x7d, // ain_out out = {}
	0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x5f, 0x33, 0x35, // ;.    float2 _35
	0x37, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, // 7 = float2(in.v_
	0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x32, 0x2e, // texcoord0.x * 2.
	0x30, 0x2c, 0x20, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, // 0, in.v_texcoord
	0x30, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, // 0.y);.    float3
	0x20, 0x5f, 0x36, 0x37, 0x35, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x64, 0x6f, 0x0a, 0x20, 0x20, //  _675;.    do.  
	0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x6f, 0x6f, 0x6c, //   {.        bool
	0x20, 0x5f, 0x34, 0x31, 0x30, 0x20, 0x3d, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, //  _410 = _mtl_u.S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, // tereo_MS_ZPD_YAx
	0x69, 0x73, 0x2e, 0x7a, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x3b, 0x0a, 0x20, 0x20, 0x20, // is.z != 0.0;.   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, //      if (in.v_te
	0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2e, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x35, 0x29, // xcoord0.x < 0.5)
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // .        {.     
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x34, 0x37, //        float _47
	0x31, 0x20, 0x3d, 0x20, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, // 1 = fast::max(0.
	0x30, 0x2c, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, // 0, fma(_mtl_u.St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, // ereo_MS_ZPD_YAxi
	0x73, 0x2e, 0x78, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, // s.x, 1.0 - (1.0 
	0x2f, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, 0x6e, 0x28, // / fma(fast::min(
	0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // fast::min(tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, // ereo_depth.sampl
	0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, // e(tex_stereo_dep
	0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x5f, 0x33, 0x35, 0x37, // thSampler, (_357
	0x20, 0x2b, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, //  + select(float2
	0x28, 0x30, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, // (0.5 * _mtl_u.St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, // ereo_MS_ZPD_YAxi
	0x73, 0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // s.x, 0.0), float
	0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, // 2(0.0, 0.5 * _mt
	0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, // l_u.Stereo_MS_ZP
	0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, // D_YAxis.x), bool
	0x32, 0x28, 0x5f, 0x34, 0x31, 0x30, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, // 2(_410))), level
	0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // (0.0)).x, tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, // ereo_depth.sampl
	0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, // e(tex_stereo_dep
	0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x5f, 0x33, 0x35, 0x37, // thSampler, (_357
	0x20, 0x2b, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, //  + select(float2
	0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x30, 0x30, 0x30, 0x30, 0x30, 0x38, 0x35, 0x38, 0x33, 0x30, // (0.6660000085830
	0x36, 0x38, 0x38, 0x34, 0x37, 0x36, 0x35, 0x36, 0x32, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, // 6884765625 * _mt
	0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, // l_u.Stereo_MS_ZP
	0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, // D_YAxis.x, 0.0),
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, //  float2(0.0, 0.6
	0x36, 0x36, 0x30, 0x30, 0x30, 0x30, 0x30, 0x38, 0x35, 0x38, 0x33, 0x30, 0x36, 0x38, 0x38, 0x34, // 6600000858306884
	0x37, 0x36, 0x35, 0x36, 0x32, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, // 765625 * _mtl_u.
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, // Stereo_MS_ZPD_YA
	0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x34, // xis.x), bool2(_4
	0x31, 0x30, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, // 10))), level(0.0
	0x29, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // )).x), tex_stere
	0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, // o_depth.sample(t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, // ex_stereo_depthS
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x5f, 0x33, 0x35, 0x37, 0x20, 0x2b, 0x20, // ampler, (_357 + 
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x5f, 0x6d, // select(float2(_m
	0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, // tl_u.Stereo_MS_Z
	0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // PD_YAxis.x, 0.0)
	0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x5f, 0x6d, // , float2(0.0, _m
	0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, // tl_u.Stereo_MS_Z
	0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, // PD_YAxis.x), boo
	0x6c, 0x32, 0x28, 0x5f, 0x34, 0x31, 0x30, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, // l2(_410))), leve
	0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x28, 0x31, 0x2e, 0x30, // l(0.0)).x), (1.0
	0x20, 0x2f, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, //  / _mtl_u.Stereo
	0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, // _MS_ZPD_YAxis.y)
	0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x2c, 0x20, 0x5f, //  - 0.5, 0.5)), _
	0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, // mtl_u.w_h_height
	0x2e, 0x77, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // .w));.          
	0x20, 0x20, 0x5f, 0x36, 0x37, 0x35, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, //   _675 = tex_ste
	0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, // reo_fb.sample(te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, // x_stereo_fbSampl
	0x65, 0x72, 0x2c, 0x20, 0x28, 0x5f, 0x33, 0x35, 0x37, 0x20, 0x2b, 0x20, 0x73, 0x65, 0x6c, 0x65, // er, (_357 + sele
	0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x5f, 0x34, 0x37, 0x31, 0x2c, 0x20, // ct(float2(_471, 
	0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, // 0.0), float2(0.0
	0x2c, 0x20, 0x2d, 0x5f, 0x34, 0x37, 0x31, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, // , -_471), bool2(
	0x5f, 0x34, 0x31, 0x30, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, // _410))), level(0
	0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // .0)).xyz;.      
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, //       break;.   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x65, //      }.        e
	0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, // lse.        {.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, //           float 
	0x5f, 0x35, 0x34, 0x32, 0x20, 0x3d, 0x20, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x61, 0x78, // _542 = fast::max
	0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, // (0.0, fma(_mtl_u
	0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, // .Stereo_MS_ZPD_Y
	0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, // Axis.x, 1.0 - (1
	0x2e, 0x30, 0x20, 0x2f, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, // .0 / fma(fast::m
	0x69, 0x6e, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, // in(fast::min(tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, // _stereo_depth.sa
	0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // mple(tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x5f, // depthSampler, (_
	0x33, 0x35, 0x37, 0x20, 0x2d, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, // 357 - select(flo
	0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, // at2(0.5 * _mtl_u
	0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, // .Stereo_MS_ZPD_Y
	0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, // Axis.x, 0.0), fl
	0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x2a, 0x20, // oat2(0.0, 0.5 * 
	0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, // _mtl_u.Stereo_MS
	0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, // _ZPD_YAxis.x), b
	0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x34, 0x31, 0x30, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, // ool2(_410))), le
	0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x2c, 0x20, 0x74, 0x65, 0x78, // vel(0.0)).x, tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, // _stereo_depth.sa
	0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // mple(tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x5f, // depthSampler, (_
	0x33, 0x35, 0x37, 0x20, 0x2d, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, // 357 - select(flo
	0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x30, 0x30, 0x30, 0x30, 0x30, 0x38, 0x35, // at2(0.6660000085
	0x38, 0x33, 0x30, 0x36, 0x38, 0x38, 0x34, 0x37, 0x36, 0x35, 0x36, 0x32, 0x35, 0x20, 0x2a, 0x20, // 8306884765625 * 
	0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, // _mtl_u.Stereo_MS
	0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, // _ZPD_YAxis.x, 0.
	0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, // 0), float2(0.0, 
	0x30, 0x2e, 0x36, 0x36, 0x36, 0x30, 0x30, 0x30, 0x30, 0x30, 0x38, 0x35, 0x38, 0x33, 0x30, 0x36, // 0.66600000858306
	0x38, 0x38, 0x34, 0x37, 0x36, 0x35, 0x36, 0x32, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, // 884765625 * _mtl
	0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, // _u.Stereo_MS_ZPD
	0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, // _YAxis.x), bool2
	0x28, 0x5f, 0x34, 0x31, 0x30, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, // (_410))), level(
	0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // 0.0)).x), tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, // ereo_depth.sampl
	0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, // e(tex_stereo_dep
	0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x5f, 0x33, 0x35, 0x37, // thSampler, (_357
	0x20, 0x2d, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, //  - select(float2
	0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, // (_mtl_u.Stereo_M
	0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, 0x20, 0x30, // S_ZPD_YAxis.x, 0
	0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, // .0), float2(0.0,
	0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, //  _mtl_u.Stereo_M
	0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, // S_ZPD_YAxis.x), 
	0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x34, 0x31, 0x30, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, // bool2(_410))), l
	0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x28, // evel(0.0)).x), (
	0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, // 1.0 / _mtl_u.Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, // reo_MS_ZPD_YAxis
	0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, // .y) - 0.5, 0.5))
	0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, // , _mtl_u.w_h_hei
	0x67, 0x68, 0x74, 0x2e, 0x77, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ght.w));.       
	0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x36, 0x37, 0x35, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x5f, //      _675 = tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // stereo_fb.sample
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, // (tex_stereo_fbSa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x5f, 0x33, 0x35, 0x37, 0x20, 0x2d, 0x20, 0x73, // mpler, (_357 - s
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x5f, 0x35, 0x34, // elect(float2(_54
	0x32, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, // 2, 0.0), float2(
	0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x5f, 0x35, 0x34, 0x32, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, // 0.0, -_542), boo
	0x6c, 0x32, 0x28, 0x5f, 0x34, 0x31, 0x30, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, // l2(_410))), leve
	0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x20, 0x20, 0x20, // l(0.0)).xyz;.   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, //          break;.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //         }.      
	0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x20, 0x2f, 0x2f, 0x20, 0x75, 0x6e, 0x72, 0x65, //   break; // unre
	0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x61, 0x72, 0x6f, 0x75, // achable workarou
	0x6e, 0x64, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x28, 0x66, // nd.    } while(f
	0x61, 0x6c, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x6f, 0x75, 0x74, 0x2e, 0x62, // alse);.    out.b
	0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x20, 0x3d, 0x20, // gfx_FragData0 = 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x36, 0x37, 0x35, 0x2c, 0x20, 0x31, 0x2e, 0x30, // float4(_675, 1.0
	0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6f, 0x75, // );.    return ou
	0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x0a, 0x00, 0x00, 0x60, 0x00,                                     // t;.}....`.
};
static const uint8_t fs_pp_stereo_sbs_essl[11048] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x2b, // FSH.o.><.......+
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x33, 0x32, 0x30, 0x20, 0x65, // ..#version 320 e
	0x73, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, // s.#define attrib
	0x75, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x76, // ute in.#define v
	0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, // arying in.precis
	0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3b, // ion highp float;
	0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, // .precision highp
	0x20, 0x69, 0x6e, 0x74, 0x3b, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x73, 0x68, //  int;.#define sh
	0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, // adow2D(_sampler,
	0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, //  _coord) texture
	0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, // (_sampler, _coor
	0x64, 0x29, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x73, 0x68, 0x61, 0x64, 0x6f, // d).#define shado
	0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // w2DProj(_sampler
	0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // , _coord) textur
	0x65, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, // eProj(_sampler, 
	0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x0a, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x65, 0x64, 0x69, // _coord).out medi
	0x75, 0x6d, 0x70, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, // ump vec4 bgfx_Fr
	0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, // agColor;.varying
	0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, //  vec2 v_texcoord
	0x30, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, // 0;.vec3 instMul(
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x20, // vec3 _vec, mat3 
	0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // _mtx) { return (
	0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, //  (_vec) * (_mtx)
	0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, //  ); }.vec3 instM
	0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, // ul(mat3 _mtx, ve
	0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, // c3 _vec) { retur
	0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, // n ( (_mtx) * (_v
	0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, // ec) ); }.vec4 in
	0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, // stMul(vec4 _vec,
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, //  mat4 _mtx) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, // turn ( (_vec) * 
	0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, // (_mtx) ); }.vec4
	0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, //  instMul(mat4 _m
	0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, // tx, vec4 _vec) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, //  return ( (_mtx)
	0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, //  * (_vec) ); }.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, 0x70, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, // loat rcp(float _
	0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x2f, // a) { return 1.0/
	0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, // _a; }.vec2 rcp(v
	0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // ec2 _a) { return
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, //  vec2(1.0)/_a; }
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, // .vec3 rcp(vec3 _
	0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, // a) { return vec3
	0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, // (1.0)/_a; }.vec4
	0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, //  rcp(vec4 _a) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x31, 0x2e, 0x30, 0x29, // return vec4(1.0)
	0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x65, 0x63, 0x32, // /_a; }.vec2 vec2
	0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, // _splat(float _x)
	0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, //  { return vec2(_
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, // x, _x); }.vec3 v
	0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // ec3_splat(float 
	0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, // _x) { return vec
	0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, // 3(_x, _x, _x); }
	0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, // .vec4 vec4_splat
	0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // (float _x) { ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, // urn vec4(_x, _x,
	0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, //  _x, _x); }.uvec
	0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, // 2 uvec2_splat(ui
	0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // nt _x) { return 
	0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, // uvec2(_x, _x); }
	0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, // .uvec3 uvec3_spl
	0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // at(uint _x) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, // turn uvec3(_x, _
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x34, 0x20, // x, _x); }.uvec4 
	0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, // uvec4_splat(uint
	0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, //  _x) { return uv
	0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, // ec4(_x, _x, _x, 
	0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, // _x); }.mat4 mtxF
	0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, // romRows(vec4 _0,
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, //  vec4 _1, vec4 _
	0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // 2, vec4 _3).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, // turn transpose(m
	0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, // at4(_0, _1, _2, 
	0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, // _3) );.}.mat4 mt
	0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, // xFromCols(vec4 _
	0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // 0, vec4 _1, vec4
	0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, //  _2, vec4 _3).{.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, // return mat4(_0, 
	0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, // _1, _2, _3);.}.m
	0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, // at3 mtxFromRows(
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, // vec3 _0, vec3 _1
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // , vec3 _2).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, // urn transpose(ma
	0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x20, 0x29, // t3(_0, _1, _2) )
	0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, // ;.}.mat3 mtxFrom
	0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, // Cols(vec3 _0, ve
	0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, // c3 _1, vec3 _2).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, // {.return mat3(_0
	0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, // , _1, _2);.}.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, // form vec4 u_view
	0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, // Rect;.uniform ve
	0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x54, 0x65, 0x78, 0x65, 0x6c, 0x3b, 0x0a, // c4 u_viewTexel;.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, // uniform mat4 u_v
	0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, // iew;.uniform mat
	0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, // 4 u_invView;.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x70, 0x72, 0x6f, 0x6a, // form mat4 u_proj
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, // ;.uniform mat4 u
	0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // _invProj;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, // m mat4 u_viewPro
	0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, // j;.uniform mat4 
	0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, // u_invViewProj;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, // niform mat4 u_mo
	0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // del[32];.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, //  mat4 u_modelVie
	0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, // w;.uniform mat4 
	0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, // u_modelViewProj;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, // .uniform vec4 u_
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x66, 0x34, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // alphaRef4;.float
	0x20, 0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, //  sqr(const float
	0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, //  v).{.return v*v
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, // ;.}.vec2 sqr(con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // st vec2 v).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // urn v*v;.}.vec3 
	0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, // sqr(const vec3 v
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, // ).{.return v*v;.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6d, 0x75, 0x6c, 0x5f, 0x77, 0x31, 0x28, 0x63, 0x6f, // }.vec3 mul_w1(co
	0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, // nst vec3 v, cons
	0x74, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, // t mat4 m).{.retu
	0x72, 0x6e, 0x20, 0x76, 0x2e, 0x78, 0x2a, 0x6d, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, // rn v.x*m[0].xyz 
	0x2b, 0x20, 0x28, 0x76, 0x2e, 0x79, 0x2a, 0x6d, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, // + (v.y*m[1].xyz 
	0x2b, 0x20, 0x28, 0x76, 0x2e, 0x7a, 0x2a, 0x6d, 0x5b, 0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, // + (v.z*m[2].xyz 
	0x2b, 0x20, 0x6d, 0x5b, 0x33, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // + m[3].xyz));.}.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, // float acos_appro
	0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // x_divPI(const fl
	0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // oat v).{.const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, // loat x = abs(v);
	0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, // .if(1. - x <= 0.
	0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, // 00006103515625).
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, // return (v >= 0.)
	0x20, 0x3f, 0x20, 0x30, 0x2e, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, //  ? 0. : 1.;.cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, // t float res = ((
	0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, // -0.155972/3.1415
	0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, // 9265358979323846
	0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, // 26433832795) * x
	0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, //  + (1.56467/3.14
	0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, // 1592653589793238
	0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, // 4626433832795) )
	0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, //  * sqrt(1. - x);
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, // .return (v >= 0.
	0x29, 0x20, 0x3f, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x72, // ) ? res : 1. - r
	0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x74, 0x61, 0x6e, // es;.}.float atan
	0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, // 2_approx_div2PI(
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x79, 0x2c, 0x20, 0x63, // const float y, c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x29, 0x0a, 0x7b, 0x0a, // onst float x).{.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, // const float abs_
	0x79, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x79, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // y = abs(y);.cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3d, 0x20, // t float abs_x = 
	0x61, 0x62, 0x73, 0x28, 0x78, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, // abs(x);.if(abs_x
	0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, //  <= 0.0000610351
	0x35, 0x36, 0x32, 0x35, 0x20, 0x26, 0x26, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3c, 0x3d, // 5625 && abs_y <=
	0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, //  0.0000610351562
	0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x30, 0x2e, 0x3b, 0x0a, 0x63, 0x6f, // 5).return 0.;.co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x61, // nst float r = (a
	0x62, 0x73, 0x5f, 0x78, 0x20, 0x2d, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x20, 0x2f, 0x20, // bs_x - abs_y) / 
	0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2b, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x3b, // (abs_x + abs_y);
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x6e, 0x67, // .const float ang
	0x6c, 0x65, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, // le = ((x < 0.) ?
	0x20, 0x28, 0x33, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x20, 0x3a, 0x20, 0x28, 0x31, 0x2e, 0x2f, 0x38, //  (3./8.) : (1./8
	0x2e, 0x29, 0x29, 0x0a, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x32, 0x31, 0x31, 0x38, 0x36, 0x38, 0x20, // .)).+ (0.211868 
	0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, // /(2.*3.141592653
	0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, // 5897932384626433
	0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x72, 0x20, 0x2a, 0x20, 0x72, 0x20, // 832795) * r * r 
	0x2d, 0x20, 0x30, 0x2e, 0x39, 0x38, 0x37, 0x33, 0x30, 0x35, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, // - 0.987305 /(2.*
	0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, // 3.14159265358979
	0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, // 3238462643383279
	0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, // 5)) * ((x < 0.) 
	0x3f, 0x20, 0x2d, 0x72, 0x20, 0x3a, 0x20, 0x72, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // ? -r : r);.retur
	0x6e, 0x20, 0x28, 0x79, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x61, 0x6e, // n (y < 0.) ? -an
	0x67, 0x6c, 0x65, 0x20, 0x3a, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // gle : angle;.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x73, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, // loat asin_approx
	0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, // _divPI(const flo
	0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // at v).{.const fl
	0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, // oat x = abs(v);.
	0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, // if(1. - x <= 0.0
	0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, // 0006103515625).r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, // eturn (v >= 0.) 
	0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x3b, 0x0a, 0x63, 0x6f, // ? 0.5 : -0.5;.co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, // nst float res = 
	0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, // ((-0.155972/3.14
	0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, // 1592653589793238
	0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, // 4626433832795) *
	0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, //  x + (1.56467/3.
	0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, // 1415926535897932
	0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, // 384626433832795)
	0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, //  ) * sqrt(1. - x
	0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, // );.return (v >= 
	0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x20, // 0.) ? 0.5 - res 
	0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, // : -0.5 + res;.}.
	0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x61, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x71, 0x75, 0x69, // vec2 ray_to_equi
	0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x75, 0x76, 0x28, 0x63, // rectangular_uv(c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x61, 0x79, 0x29, 0x0a, 0x7b, // onst vec3 ray).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x0a, 0x30, 0x2e, // .return vec2(.0.
	0x35, 0x20, 0x2b, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, // 5 + atan2_approx
	0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x79, 0x2c, 0x20, 0x72, // _div2PI(ray.y, r
	0x61, 0x79, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, // ay.x),.acos_appr
	0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x7a, 0x29, 0x29, // ox_divPI(ray.z))
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, // ;.}.float InvsRG
	0x42, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, // B(const float co
	0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // lor).{.if (color
	0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, 0x34, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, //  <= 0.04045).ret
	0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, // urn color * (1.0
	0x2f, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, // /12.92);.else.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, // turn pow(color *
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x28, //  (1.0/1.055) + (
	0x30, 0x2e, 0x30, 0x35, 0x35, 0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, // 0.055/1.055), 2.
	0x34, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x52, // 4);.}.float InvR
	0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, // ec709(const floa
	0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, // t color).{.if (c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x38, 0x31, 0x29, 0x0a, 0x72, // olor <= 0.081).r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, // eturn color * (1
	0x2e, 0x30, 0x2f, 0x34, 0x2e, 0x35, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, // .0/4.5);.else.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, // turn pow(color *
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, 0x20, 0x2b, 0x20, 0x28, //  (1.0/1.099) + (
	0x30, 0x2e, 0x30, 0x39, 0x39, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, 0x2c, 0x20, 0x31, 0x2e, // 0.099/1.099), 1.
	0x30, 0x2f, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // 0/0.45);.}.float
	0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, //  InvGamma(const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, // float color).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, // eturn InvsRGB(co
	0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, // lor);.}.vec3 Inv
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, // Gamma(const vec3
	0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, //  color).{.return
	0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, //  vec3(InvGamma(c
	0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, // olor.x),InvGamma
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, // (color.y),InvGam
	0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // ma(color.z));.}.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, // vec3 InvToneMap(
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // const vec3 color
	0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // ).{.const float 
	0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x30, 0x2e, 0x35, 0x2f, 0x30, 0x2e, // inv_2bh = 0.5/0.
	0x32, 0x35, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // 25;.const float 
	0x62, 0x68, 0x20, 0x3d, 0x20, 0x34, 0x2e, 0x30, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2d, 0x20, // bh = 4.0*0.25 - 
	0x32, 0x2e, 0x30, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6c, // 2.0;.return (col
	0x6f, 0x72, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2b, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, // or - 1.0 + sqrt(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2a, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x20, 0x62, // color*(color + b
	0x68, 0x29, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x2a, 0x69, 0x6e, 0x76, 0x5f, 0x32, // h) + 1.0))*inv_2
	0x62, 0x68, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x52, 0x47, 0x42, // bh;.}.float sRGB
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, // (const float f).
	0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, // {.float s;.if (f
	0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x33, 0x31, 0x33, 0x30, 0x38, 0x29, 0x0a, 0x73, //  <= 0.0031308).s
	0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, //  = 12.92 * f;.el
	0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x20, 0x2a, 0x20, 0x70, // se.s = 1.055 * p
	0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x34, 0x29, 0x20, 0x2d, // ow(f, 1.0/2.4) -
	0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, //  0.055;.return s
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, // ;.}.float Rec709
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, // (const float f).
	0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, // {.float s;.if (f
	0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x34, //  <= 0.018).s = 4
	0x2e, 0x35, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, // .5 * f;.else.s =
	0x20, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, //  1.099 * pow(f, 
	0x30, 0x2e, 0x34, 0x35, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x3b, 0x0a, 0x72, // 0.45) - 0.099;.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // eturn s;.}.float
	0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, //  FBGamma(const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // loat color).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, // turn sRGB(color)
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, // ;.}.vec2 FBGamma
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // (const vec2 colo
	0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, // r).{.return vec2
	0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, // (FBGamma(color.x
	0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, // ),FBGamma(color.
	0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, // y));.}.vec3 FBGa
	0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, // mma(const vec3 c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // olor).{.return v
	0x65, 0x63, 0x33, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // ec3(FBGamma(colo
	0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, // r.x),FBGamma(col
	0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, // or.y),FBGamma(co
	0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // lor.z));.}.vec3 
	0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x32, 0x32, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // FBGamma22(const 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // vec3 color).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, // turn vec3(pow(co
	0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, // lor.x, 1.0/2.2),
	0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, 0x30, // pow(color.y, 1.0
	0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, // /2.2),pow(color.
	0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // z, 1.0/2.2));.}.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, // float FBToneMap(
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x29, 0x0a, 0x7b, // const float l).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6c, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, // .return l * ((l*
	0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, // 0.25 + 1.0) / (l
	0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, //  + 1.0));.}.vec2
	0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, //  FBToneMap(const
	0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x63, //  vec2 color).{.c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, // onst float l = d
	0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, // ot(color,vec2(0.
	0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, // 176204+0.0108109
	0x2a, 0x30, 0x2e, 0x35, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2b, 0x30, 0x2e, // *0.5,0.812985+0.
	0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x3b, 0x0a, 0x72, // 0108109*0.5));.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, // eturn color * ((
	0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, // l*0.25 + 1.0) / 
	0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // (l + 1.0));.}.ve
	0x63, 0x33, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, // c3 FBToneMap(con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, // st vec3 color).{
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, // .const float l =
	0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x33, 0x28, //  dot(color,vec3(
	0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, // 0.176204,0.81298
	0x35, 0x2c, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x29, 0x29, 0x3b, 0x0a, 0x72, // 5,0.0108109));.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, // eturn color * ((
	0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, // l*0.25 + 1.0) / 
	0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // (l + 1.0));.}.ve
	0x63, 0x34, 0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x28, 0x63, 0x6f, 0x6e, 0x73, // c4 Additive(cons
	0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, // t vec4 cBase, co
	0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, // nst vec4 cBlend,
	0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, //  const float per
	0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, // cent).{.return c
	0x42, 0x61, 0x73, 0x65, 0x20, 0x2b, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, // Base + cBlend*pe
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, // rcent;.}.vec3 Sc
	0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, // reen (const vec3
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, //  cBase, const ve
	0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // c3 cBlend).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, // urn 1.0 - (1.0 -
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, //  cBase) * (1.0 -
	0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, //  cBlend);.}.vec4
	0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, //  Screen (const v
	0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, // ec4 cBase, const
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, //  vec4 cBlend).{.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, // return 1.0 - (1.
	0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, // 0 - cBase) * (1.
	0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // 0 - cBlend);.}.v
	0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x63, // ec3 ScreenHDR (c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, // onst vec3 cBase,
	0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, //  const vec3 cBle
	0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, // nd).{.return max
	0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, // (1.0 - (1.0 - cB
	0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, // ase) * (1.0 - cB
	0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x2c, 0x30, // lend), vec3(0.,0
	0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, // .,0.));.}.vec4 S
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // creenHDR (const 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, // vec4 cBase, cons
	0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, // t vec4 cBlend).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, // .return max(1.0 
	0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, // - (1.0 - cBase) 
	0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, // * (1.0 - cBlend)
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, // , vec4(0.,0.,0.,
	0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4d, 0x75, 0x6c, // 0.));.}.vec4 Mul
	0x74, 0x69, 0x70, 0x6c, 0x79, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, // tiply (const vec
	0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, // 4 cBase, const v
	0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, // ec4 cBlend, cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, // t float percent)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, // .{.return cBase 
	0x2a, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, // * cBlend*percent
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, // ;.}.vec4 Overlay
	0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, //  (const vec4 cBa
	0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, // se, const vec4 c
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, // Blend).{.vec4 cN
	0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, // ew = step(0.5, c
	0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x69, // Base);.cNew = mi
	0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, // x(cBase*cBlend*2
	0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, // .0, 1.0-2.0*(1.0
	0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, // -cBase)*(1.0-cBl
	0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, // end), cNew);.ret
	0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, // urn cNew;.}.vec4
	0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x48, 0x44, 0x52, 0x20, 0x28, 0x63, 0x6f, 0x6e, //  OverlayHDR (con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, // st vec4 cBase, c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, // onst vec4 cBlend
	0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, // ).{.vec4 cNew = 
	0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, // step(0.5, cBase)
	0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x6d, 0x69, 0x78, // ;.cNew = max(mix
	0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, // (cBase*cBlend*2.
	0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, // 0, 1.0-2.0*(1.0-
	0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, // cBase)*(1.0-cBle
	0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // nd), cNew), vec4
	0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, // (0.,0.,0.,0.));.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // return cNew;.}.v
	0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x73, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, // ec3 cos_hemisphe
	0x72, 0x65, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // re_sample(const 
	0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // vec2 t).{.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x68, 0x69, 0x20, 0x3d, 0x20, 0x74, 0x2e, 0x79, 0x20, // float phi = t.y 
	0x2a, 0x20, 0x28, 0x32, 0x2e, 0x30, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, // * (2.0*3.1415926
	0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, // 5358979323846264
	0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, // 33832795);.const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, //  float cosTheta 
	0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x74, 0x2e, 0x78, // = sqrt(1.0 - t.x
	0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, // );.const float s
	0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x74, // inTheta = sqrt(t
	0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x70, 0x2c, 0x63, 0x70, // .x);.float sp,cp
	0x3b, 0x0a, 0x73, 0x69, 0x6e, 0x63, 0x6f, 0x73, 0x28, 0x70, 0x68, 0x69, 0x2c, 0x73, 0x70, 0x2c, // ;.sincos(phi,sp,
	0x63, 0x70, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, // cp);.return vec3
	0x28, 0x63, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, // (cp * sinTheta, 
	0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x73, 0x70, 0x20, 0x2a, 0x20, 0x73, // cosTheta, sp * s
	0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, // inTheta);.}.vec3
	0x20, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, //  rotate_to_vecto
	0x72, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // r_upper(const ve
	0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // c3 vec, const ve
	0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x28, // c3 normal).{.if(
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x3e, 0x20, 0x2d, 0x30, 0x2e, 0x39, 0x39, // normal.y > -0.99
	0x39, 0x39, 0x39, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, // 999).{.const flo
	0x61, 0x74, 0x20, 0x68, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x28, 0x31, 0x2e, 0x30, 0x2b, // at h = 1.0/(1.0+
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, // normal.y);.const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x20, 0x3d, 0x20, 0x68, 0x2a, 0x6e, 0x6f, //  float hz = h*no
	0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // rmal.z;.const fl
	0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x3d, 0x20, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, // oat hzx = hz*nor
	0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, // mal.x;.return ve
	0x63, 0x33, 0x28, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, // c3(.vec.x * (nor
	0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, // mal.y+hz*normal.
	0x7a, 0x29, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, // z) + vec.y * nor
	0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, // mal.x - vec.z * 
	0x68, 0x7a, 0x78, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, // hzx,.vec.y * nor
	0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, // mal.y - vec.x * 
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, // normal.x - vec.z
	0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x2c, 0x0a, 0x76, 0x65, 0x63, //  * normal.z,.vec
	0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x20, 0x2d, 0x20, // .y * normal.z - 
	0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x2b, 0x20, 0x76, 0x65, // vec.x * hzx + ve
	0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, // c.z * (normal.y+
	0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, // h*normal.x*norma
	0x6c, 0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x72, 0x65, // l.x));.}.else re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x2d, 0x76, 0x65, 0x63, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, // turn -vec;.}.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // form vec4 Stereo
	0x5f, 0x53, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x0a, 0x75, 0x6e, 0x69, // _Saturation;.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // form vec4 Stereo
	0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x3b, 0x0a, 0x75, // _MS_ZPD_YAxis;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, // niform sampler2D
	0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x3b, 0x0a, //  tex_stereo_fb;.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, // uniform sampler2
	0x44, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, // D tex_stereo_dep
	0x74, 0x68, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, // th;.uniform vec4
	0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, 0x76, 0x65, 0x63, //  w_h_height;.vec
	0x33, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, // 3 gatherEyeColor
	0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x69, 0x73, // (vec2 u, bool is
	0x4c, 0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x62, 0x6f, // Left).{.const bo
	0x6f, 0x6c, 0x20, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, // ol yaxis = (Ster
	0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, // eo_MS_ZPD_YAxis.
	0x7a, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // z != 0.);.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // float MaxSeparat
	0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, // ion = (Stereo_MS
	0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x69, // _ZPD_YAxis.x);.i
	0x66, 0x20, 0x28, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, // f (isLeft).{.con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, // st float lminDep
	0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, // th = min(min(tex
	0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // tureLod(tex_ster
	0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, // eo_depth, u + (y
	0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, // axis ? vec2(0.0,
	0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, //  0.500 * MaxSepa
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, // ration) : vec2(0
	0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, // .500 * MaxSepara
	0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, // tion, 0.0)), 0.0
	0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, // ).x,.textureLod(
	0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, // tex_stereo_depth
	0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, // , u + (yaxis ? v
	0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, // ec2(0.0, 0.666 *
	0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, //  MaxSeparation) 
	0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, // : vec2(0.666 * M
	0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, // axSeparation, 0.
	0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, // 0)), 0.0).x),.te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, // xtureLod(tex_ste
	0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, // reo_depth, u + (
	0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, // yaxis ? vec2(0.0
	0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, // , MaxSeparation)
	0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, //  : vec2( MaxSepa
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, // ration, 0.0)), 0
	0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x70, // .0).x);.float lp
	0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, // arallax = max(0.
	0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, // 0, w_h_height.w 
	0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, // + MaxSeparation 
	0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, // * (1.0 - 1.0 / (
	0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, // 0.5 + lminDepth 
	0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // * (1.0 / (Stereo
	0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, // _MS_ZPD_YAxis.y)
	0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, //  - 0.5))));.retu
	0x72, 0x6e, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, // rn textureLod(te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2b, // x_stereo_fb, u +
	0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, //  (yaxis ? vec2(0
	0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, // .0, -lparallax) 
	0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, // : vec2(lparallax
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, // , 0.0)), 0.0).xy
	0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // z;.}.else.{.cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, // t float rminDept
	0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, // h = min(min(text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // ureLod(tex_stere
	0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, // o_depth, u - (ya
	0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, // xis ? vec2(0.0, 
	0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, // 0.500 * MaxSepar
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, // ation) : vec2(0.
	0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // 500 * MaxSeparat
	0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // ion, 0.0)), 0.0)
	0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, // .x,.textureLod(t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, // ex_stereo_depth,
	0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, //  u - (yaxis ? ve
	0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, // c2(0.0, 0.666 * 
	0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, // MaxSeparation) :
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, //  vec2(0.666 * Ma
	0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, // xSeparation, 0.0
	0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, // )), 0.0).x),.tex
	0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // tureLod(tex_ster
	0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, // eo_depth, u - (y
	0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, // axis ? vec2(0.0,
	0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, //  MaxSeparation) 
	0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, // : vec2( MaxSepar
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, // ation, 0.0)), 0.
	0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x70, 0x61, // 0).x);.float rpa
	0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, // rallax = max(0.0
	0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, // , w_h_height.w +
	0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, //  MaxSeparation *
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, //  (1.0 - 1.0 / (0
	0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, // .5 + rminDepth *
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, //  (1.0 / (Stereo_
	0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, // MS_ZPD_YAxis.y) 
	0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // - 0.5))));.retur
	0x6e, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, // n textureLod(tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, // _stereo_fb, u - 
	0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, // (yaxis ? vec2(0.
	0x30, 0x2c, 0x20, 0x2d, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, // 0, -rparallax) :
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, //  vec2(rparallax,
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, //  0.0)), 0.0).xyz
	0x3b, 0x0a, 0x7d, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, // ;.}.}.void gathe
	0x72, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, // rLeftRightColors
	0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, // (vec2 u, out vec
	0x33, 0x20, 0x6c, 0x63, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, // 3 lcol, out vec3
	0x20, 0x72, 0x63, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x62, //  rcol).{.const b
	0x6f, 0x6f, 0x6c, 0x20, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, // ool yaxis = (Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, // reo_MS_ZPD_YAxis
	0x2e, 0x7a, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, // .z != 0.);.const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, //  float MaxSepara
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, // tion = (Stereo_M
	0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x3b, 0x0a, // S_ZPD_YAxis.x);.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x6d, 0x69, 0x6e, // const float lmin
	0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, // Depth = min(min(
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, // textureLod(tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, // tereo_depth, u +
	0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, //  (yaxis ? vec2(0
	0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, // .0, 0.500 * MaxS
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, // eparation) : vec
	0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // 2(0.500 * MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, // aration, 0.0)), 
	0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, // 0.0).x,.textureL
	0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, // od(tex_stereo_de
	0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, // pth, u + (yaxis 
	0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, // ? vec2(0.0, 0.66
	0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, // 6 * MaxSeparatio
	0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, // n) : vec2(0.666 
	0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, // * MaxSeparation,
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, //  0.0)), 0.0).x),
	0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, // .textureLod(tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, // stereo_depth, u 
	0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // + (yaxis ? vec2(
	0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // 0.0, MaxSeparati
	0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, // on) : vec2( MaxS
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, // eparation, 0.0))
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // , 0.0).x);.float
	0x20, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, //  lparallax = max
	0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, // (0.0, w_h_height
	0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // .w + MaxSeparati
	0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, // on * (1.0 - 1.0 
	0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, // / (0.5 + lminDep
	0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, // th * (1.0 / (Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, // reo_MS_ZPD_YAxis
	0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x6c, // .y) - 0.5))));.l
	0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, // col = textureLod
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, // (tex_stereo_fb, 
	0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, // u + (yaxis ? vec
	0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, // 2(0.0, -lparalla
	0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, // x) : vec2(lparal
	0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // lax, 0.0)), 0.0)
	0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, // .xyz;.const floa
	0x74, 0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, // t rminDepth = mi
	0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, // n(min(textureLod
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, // (tex_stereo_dept
	0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, // h, u - (yaxis ? 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, // vec2(0.0, 0.500 
	0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, // * MaxSeparation)
	0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, //  : vec2(0.500 * 
	0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, // MaxSeparation, 0
	0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, // .0)), 0.0).x,.te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, // xtureLod(tex_ste
	0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, // reo_depth, u - (
	0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, // yaxis ? vec2(0.0
	0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // , 0.666 * MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // aration) : vec2(
	0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, // 0.666 * MaxSepar
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, // ation, 0.0)), 0.
	0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, // 0).x),.textureLo
	0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, // d(tex_stereo_dep
	0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, // th, u - (yaxis ?
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, //  vec2(0.0, MaxSe
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, // paration) : vec2
	0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, // ( MaxSeparation,
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, //  0.0)), 0.0).x);
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, // .float rparallax
	0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, //  = max(0.0, w_h_
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, // height.w + MaxSe
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, // paration * (1.0 
	0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, // - 1.0 / (0.5 + r
	0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, // minDepth * (1.0 
	0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, // / (Stereo_MS_ZPD
	0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, // _YAxis.y) - 0.5)
	0x29, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, // )));.rcol = text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // ureLod(tex_stere
	0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, // o_fb, u - (yaxis
	0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x72, 0x70, //  ? vec2(0.0, -rp
	0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // arallax) : vec2(
	0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, // rparallax, 0.0))
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, // , 0.0).xyz;.}.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // iform mat4 Stere
	0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, // o_LeftMat;.unifo
	0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, // rm mat4 Stereo_R
	0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // ightMat;.uniform
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, //  vec4 Stereo_Lef
	0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, // tLuminance_Gamma
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, // ;.uniform vec4 S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, // tereo_RightLumin
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x3b, 0x0a, 0x76, // ance_DynDesat;.v
	0x6f, 0x69, 0x64, 0x20, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x65, 0x73, 0x61, 0x74, // oid DynamicDesat
	0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, // Anaglyph(const v
	0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // ec3 lCol, const 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, // vec3 rCol, out v
	0x65, 0x63, 0x33, 0x20, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, // ec3 lDesatCol, o
	0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, // ut vec3 rDesatCo
	0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // l).{.const float
	0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, //  left2LeftLum = 
	0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // dot(lCol, Stereo
	0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, // _LeftLuminance_G
	0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, // amma.xyz);.const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, //  float left2Righ
	0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, // tLum = dot(lCol,
	0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, //  Stereo_RightLum
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, // inance_DynDesat.
	0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, // xyz);.const floa
	0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, // t right2LeftLum 
	0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, // = dot(rCol, Ster
	0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, // eo_LeftLuminance
	0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, // _Gamma.xyz);.con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, // st float right2R
	0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, // ightLum = dot(rC
	0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, // ol, Stereo_Right
	0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, // Luminance_DynDes
	0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // at.xyz);.const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x6c, // loat leftLum = l
	0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x6c, 0x65, // eft2LeftLum + le
	0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, // ft2RightLum;.con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // st float rightLu
	0x6d, 0x20, 0x3d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, // m = right2LeftLu
	0x6d, 0x20, 0x2b, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, // m + right2RightL
	0x75, 0x6d, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // um;.const float 
	0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, // leftDesat = Ster
	0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, // eo_RightLuminanc
	0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, // e_DynDesat.w * a
	0x62, 0x73, 0x28, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // bs((left2LeftLum
	0x20, 0x2d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, //  - left2RightLum
	0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, // ) / (leftLum + 0
	0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // .0001));.const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x20, // loat rightDesat 
	0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // = Stereo_RightLu
	0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, // minance_DynDesat
	0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, // .w * abs((right2
	0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, // LeftLum - right2
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x72, 0x69, 0x67, // RightLum) / (rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, 0x29, // htLum + 0.0001))
	0x3b, 0x0a, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, // ;.lDesatCol = mi
	0x78, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, // x(lCol, vec3_spl
	0x61, 0x74, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x66, // at(leftLum), lef
	0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x72, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, // tDesat);.rDesatC
	0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, // ol = mix(rCol, v
	0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, // ec3_splat(rightL
	0x75, 0x6d, 0x29, 0x2c, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, // um), rightDesat)
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x41, // ;.}.vec3 LinearA
	0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // naglyph(const ve
	0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, // c3 lCol, const v
	0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // ec3 rCol).{.cons
	0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x28, // t vec3 color = (
	0x28, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, // ( (vec4(lCol, 1.
	0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, // )) * (Stereo_Lef
	0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x20, 0x28, 0x76, 0x65, 0x63, // tMat) ) + ( (vec
	0x34, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, // 4(rCol, 1.)) * (
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x29, // Stereo_RightMat)
	0x20, 0x29, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, //  )).rgb;.return 
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // color;.}.uniform
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, //  vec4 Stereo_Deg
	0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, // hostGamma;.unifo
	0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, // rm mat4 Stereo_D
	0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3b, 0x0a, 0x76, 0x65, // eghostFilter;.ve
	0x63, 0x33, 0x20, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, // c3 DeghostAnagly
	0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, // ph(const vec3 lC
	0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, // ol, const vec3 r
	0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, // Col).{.const vec
	0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, // 3 color = Linear
	0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, // Anaglyph(lCol, r
	0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, // Col);.return ( (
	0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // pow(color, Stere
	0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x72, // o_DeghostGamma.r
	0x67, 0x62, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x53, 0x74, 0x65, // gb)) * (mat3(Ste
	0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, // reo_DeghostFilte
	0x72, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // r[0].xyz, Stereo
	0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x31, // _DeghostFilter[1
	0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, // ].xyz, Stereo_De
	0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x32, 0x5d, 0x2e, 0x78, // ghostFilter[2].x
	0x79, 0x7a, 0x29, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x6d, // yz)) );.}.void m
	0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, // ain().{.bgfx_Fra
	0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x67, 0x61, // gColor = vec4(ga
	0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x66, 0x6c, 0x6f, // therEyeColor(flo
	0x61, 0x74, 0x32, 0x28, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2e, // at2(v_texcoord0.
	0x78, 0x20, 0x2a, 0x20, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, // x * 2.0, v_texco
	0x6f, 0x72, 0x64, 0x30, 0x2e, 0x79, 0x29, 0x2c, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, // ord0.y), v_texco
	0x6f, 0x72, 0x64, 0x30, 0x2e, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x2c, 0x20, 0x31, // ord0.x < 0.5), 1
	0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x00,                                                 // .0);.}..
};
static const uint8_t fs_pp_stereo_sbs_glsl[11418] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87, 0x2c, // FSH.o.><.......,
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x34, 0x34, 0x30, 0x0a, 0x6f, // ..#version 440.o
	0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, // ut vec4 bgfx_Fra
	0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, // gColor;.#define 
	0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x62, 0x67, 0x66, // gl_FragColor bgf
	0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x0a, 0x23, 0x64, 0x65, 0x66, // x_FragColor.#def
	0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x20, 0x20, 0x20, // ine texture2D   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x0a, 0x23, //        texture.#
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, // define texture2D
	0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // Lod       textur
	0x65, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, // eLod.#define tex
	0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ture2DGrad      
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, // textureGrad.#def
	0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, // ine texture2DPro
	0x6a, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, // jLod   texturePr
	0x6f, 0x6a, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, // ojLod.#define te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, 0x20, // xture2DProjGrad 
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, //  textureProjGrad
	0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // .#define texture
	0x43, 0x75, 0x62, 0x65, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, // CubeLod     text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, // ureLod.#define t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, // extureCubeGrad  
	0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, //   textureGrad.#d
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x33, 0x44, 0x20, // efine texture3D 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, //          texture
	0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // .#define texture
	0x32, 0x44, 0x4c, 0x6f, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x20, 0x74, 0x65, 0x78, 0x74, // 2DLodOffset text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x0a, 0x23, 0x64, 0x65, // ureLodOffset.#de
	0x66, 0x69, 0x6e, 0x65, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x69, // fine attribute i
	0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, // n.#define varyin
	0x67, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x62, 0x67, 0x66, // g in.#define bgf
	0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, // xShadow2D(_sampl
	0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, // er, _coord)     
	0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, // vec4_splat(textu
	0x72, 0x65, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, // re(_sampler, _co
	0x6f, 0x72, 0x64, 0x29, 0x20, 0x29, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x62, // ord) ).#define b
	0x67, 0x66, 0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x28, // gfxShadow2DProj(
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, // _sampler, _coord
	0x29, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, // ) vec4_splat(tex
	0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // tureProj(_sample
	0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x29, 0x0a, 0x76, 0x61, 0x72, // r, _coord) ).var
	0x79, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, // ying vec2 v_texc
	0x6f, 0x6f, 0x72, 0x64, 0x30, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, // oord0;.vec3 inst
	0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, // Mul(vec3 _vec, m
	0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // at3 _mtx) { retu
	0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, // rn ( (_vec) * (_
	0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, // mtx) ); }.vec3 i
	0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, // nstMul(mat3 _mtx
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, // , vec3 _vec) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, // eturn ( (_mtx) *
	0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, //  (_vec) ); }.vec
	0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, // 4 instMul(vec4 _
	0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, // vec, mat4 _mtx) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, // { return ( (_vec
	0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, // ) * (_mtx) ); }.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, // vec4 instMul(mat
	0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, // 4 _mtx, vec4 _ve
	0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, // c) { return ( (_
	0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, // mtx) * (_vec) );
	0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, 0x70, 0x28, 0x66, 0x6c, 0x6f, //  }.float rcp(flo
	0x61, 0x74, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // at _a) { return 
	0x31, 0x2e, 0x30, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, // 1.0/_a; }.vec2 r
	0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // cp(vec2 _a) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, // turn vec2(1.0)/_
	0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, // a; }.vec3 rcp(ve
	0x63, 0x33, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // c3 _a) { return 
	0x76, 0x65, 0x63, 0x33, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, // vec3(1.0)/_a; }.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x61, // vec4 rcp(vec4 _a
	0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, // ) { return vec4(
	0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, // 1.0)/_a; }.vec2 
	0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, // vec2_splat(float
	0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, //  _x) { return ve
	0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, // c2(_x, _x); }.ve
	0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, // c3 vec3_splat(fl
	0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // oat _x) { return
	0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, //  vec3(_x, _x, _x
	0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, // ); }.vec4 vec4_s
	0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, // plat(float _x) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, //  return vec4(_x,
	0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, //  _x, _x, _x); }.
	0x75, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, // uvec2 uvec2_spla
	0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // t(uint _x) { ret
	0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, // urn uvec2(_x, _x
	0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, // ); }.uvec3 uvec3
	0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, // _splat(uint _x) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, // { return uvec3(_
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, // x, _x, _x); }.uv
	0x65, 0x63, 0x34, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, // ec4 uvec4_splat(
	0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, // uint _x) { retur
	0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, // n uvec4(_x, _x, 
	0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, // _x, _x); }.mat4 
	0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, // mtxFromRows(vec4
	0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, //  _0, vec4 _1, ve
	0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, // c4 _2, vec4 _3).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, // {.return transpo
	0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, // se(mat4(_0, _1, 
	0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, // _2, _3) );.}.mat
	0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, // 4 mtxFromCols(ve
	0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, // c4 _0, vec4 _1, 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, // vec4 _2, vec4 _3
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x28, // ).{.return mat4(
	0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x3b, // _0, _1, _2, _3);
	0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, // .}.mat3 mtxFromR
	0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, // ows(vec3 _0, vec
	0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, // 3 _1, vec3 _2).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, // .return transpos
	0x65, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, // e(mat3(_0, _1, _
	0x32, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, // 2) );.}.mat3 mtx
	0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, // FromCols(vec3 _0
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // , vec3 _1, vec3 
	0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, // _2).{.return mat
	0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x3b, 0x0a, 0x7d, // 3(_0, _1, _2);.}
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, // .uniform vec4 u_
	0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // viewRect;.unifor
	0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x54, 0x65, 0x78, // m vec4 u_viewTex
	0x65, 0x6c, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, // el;.uniform mat4
	0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, //  u_view;.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x3b, //  mat4 u_invView;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, // .uniform mat4 u_
	0x70, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, // proj;.uniform ma
	0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, // t4 u_invProj;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, // iform mat4 u_vie
	0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, // wProj;.uniform m
	0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, // at4 u_invViewPro
	0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, // j;.uniform mat4 
	0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, 0x3b, 0x0a, 0x75, 0x6e, 0x69, // u_model[32];.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, // form mat4 u_mode
	0x6c, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, // lView;.uniform m
	0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x50, // at4 u_modelViewP
	0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, // roj;.uniform vec
	0x34, 0x20, 0x75, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x66, 0x34, 0x3b, 0x0a, 0x66, // 4 u_alphaRef4;.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // loat sqr(const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // loat v).{.return
	0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x73, 0x71, 0x72, //  v*v;.}.vec2 sqr
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x29, 0x0a, 0x7b, // (const vec2 v).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // .return v*v;.}.v
	0x65, 0x63, 0x33, 0x20, 0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // ec3 sqr(const ve
	0x63, 0x33, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // c3 v).{.return v
	0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6d, 0x75, 0x6c, 0x5f, 0x77, // *v;.}.vec3 mul_w
	0x31, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x2c, 0x20, // 1(const vec3 v, 
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x29, 0x0a, 0x7b, 0x0a, // const mat4 m).{.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2e, 0x78, 0x2a, 0x6d, 0x5b, 0x30, 0x5d, 0x2e, // return v.x*m[0].
	0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x79, 0x2a, 0x6d, 0x5b, 0x31, 0x5d, 0x2e, // xyz + (v.y*m[1].
	0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x7a, 0x2a, 0x6d, 0x5b, 0x32, 0x5d, 0x2e, // xyz + (v.z*m[2].
	0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x6d, 0x5b, 0x33, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, // xyz + m[3].xyz))
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, // ;.}.float acos_a
	0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x63, 0x6f, 0x6e, 0x73, // pprox_divPI(cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, // t float v).{.con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, // st float x = abs
	0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, // (v);.if(1. - x <
	0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, // = 0.000061035156
	0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, // 25).return (v >=
	0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x3b, 0x0a, //  0.) ? 0. : 1.;.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, 0x20, // const float res 
	0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, // = ((-0.155972/3.
	0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, // 1415926535897932
	0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, // 384626433832795)
	0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, //  * x + (1.56467/
	0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, // 3.14159265358979
	0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, // 3238462643383279
	0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, // 5) ) * sqrt(1. -
	0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, //  x);.return (v >
	0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x31, 0x2e, // = 0.) ? res : 1.
	0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, //  - res;.}.float 
	0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, // atan2_approx_div
	0x32, 0x50, 0x49, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // 2PI(const float 
	0x79, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, // y, const float x
	0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // ).{.const float 
	0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x79, 0x29, 0x3b, 0x0a, // abs_y = abs(y);.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, // const float abs_
	0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x78, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x61, // x = abs(x);.if(a
	0x62, 0x73, 0x5f, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, // bs_x <= 0.000061
	0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x20, 0x26, 0x26, 0x20, 0x61, 0x62, 0x73, 0x5f, // 03515625 && abs_
	0x79, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, // y <= 0.000061035
	0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x30, 0x2e, // 15625).return 0.
	0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x20, // ;.const float r 
	0x3d, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2d, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, // = (abs_x - abs_y
	0x29, 0x20, 0x2f, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2b, 0x20, 0x61, 0x62, 0x73, // ) / (abs_x + abs
	0x5f, 0x79, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // _y);.const float
	0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, //  angle = ((x < 0
	0x2e, 0x29, 0x20, 0x3f, 0x20, 0x28, 0x33, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x20, 0x3a, 0x20, 0x28, // .) ? (3./8.) : (
	0x31, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x29, 0x0a, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x32, 0x31, 0x31, // 1./8.)).+ (0.211
	0x38, 0x36, 0x38, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, // 868 /(2.*3.14159
	0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, // 2653589793238462
	0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x72, 0x20, // 6433832795) * r 
	0x2a, 0x20, 0x72, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x39, 0x38, 0x37, 0x33, 0x30, 0x35, 0x20, 0x2f, // * r - 0.987305 /
	0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, // (2.*3.1415926535
	0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, // 8979323846264338
	0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, // 32795)) * ((x < 
	0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x72, 0x20, 0x3a, 0x20, 0x72, 0x29, 0x3b, 0x0a, 0x72, // 0.) ? -r : r);.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x79, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, // eturn (y < 0.) ?
	0x20, 0x2d, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3a, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x3b, //  -angle : angle;
	0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x73, 0x69, 0x6e, 0x5f, 0x61, 0x70, // .}.float asin_ap
	0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, // prox_divPI(const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, //  float v).{.cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, // t float x = abs(
	0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, // v);.if(1. - x <=
	0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, //  0.0000610351562
	0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, // 5).return (v >= 
	0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, // 0.) ? 0.5 : -0.5
	0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, // ;.const float re
	0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, // s = ((-0.155972/
	0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, // 3.14159265358979
	0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, // 3238462643383279
	0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, // 5) * x + (1.5646
	0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, // 7/3.141592653589
	0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, // 7932384626433832
	0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, // 795) ) * sqrt(1.
	0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, //  - x);.return (v
	0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x2d, 0x20, //  >= 0.) ? 0.5 - 
	0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x65, 0x73, // res : -0.5 + res
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x61, 0x79, 0x5f, 0x74, 0x6f, 0x5f, // ;.}.vec2 ray_to_
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, // equirectangular_
	0x75, 0x76, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x61, // uv(const vec3 ra
	0x79, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, // y).{.return vec2
	0x28, 0x0a, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, // (.0.5 + atan2_ap
	0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, // prox_div2PI(ray.
	0x79, 0x2c, 0x20, 0x72, 0x61, 0x79, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x61, 0x63, 0x6f, 0x73, 0x5f, // y, ray.x),.acos_
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, // approx_divPI(ray
	0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, // .z));.}.float In
	0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, // vsRGB(const floa
	0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, // t color).{.if (c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, 0x34, 0x35, 0x29, // olor <= 0.04045)
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, // .return color * 
	0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, // (1.0/12.92);.els
	0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, // e.return pow(col
	0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, // or * (1.0/1.055)
	0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, //  + (0.055/1.055)
	0x2c, 0x20, 0x32, 0x2e, 0x34, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // , 2.4);.}.float 
	0x49, 0x6e, 0x76, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // InvRec709(const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, // float color).{.i
	0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x38, // f (color <= 0.08
	0x31, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, // 1).return color 
	0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x34, 0x2e, 0x35, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, // * (1.0/4.5);.els
	0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, // e.return pow(col
	0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, // or * (1.0/1.099)
	0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, //  + (0.099/1.099)
	0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // , 1.0/0.45);.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, // loat InvGamma(co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, // nst float color)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, // .{.return InvsRG
	0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, // B(color);.}.vec3
	0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, //  InvGamma(const 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // vec3 color).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, // turn vec3(InvGam
	0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, // ma(color.x),InvG
	0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x49, 0x6e, // amma(color.y),In
	0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, // vGamma(color.z))
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x54, 0x6f, 0x6e, 0x65, // ;.}.vec3 InvTone
	0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, // Map(const vec3 c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // olor).{.const fl
	0x6f, 0x61, 0x74, 0x20, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x30, 0x2e, // oat inv_2bh = 0.
	0x35, 0x2f, 0x30, 0x2e, 0x32, 0x35, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // 5/0.25;.const fl
	0x6f, 0x61, 0x74, 0x20, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x34, 0x2e, 0x30, 0x2a, 0x30, 0x2e, 0x32, // oat bh = 4.0*0.2
	0x35, 0x20, 0x2d, 0x20, 0x32, 0x2e, 0x30, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // 5 - 2.0;.return 
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2b, 0x20, 0x73, // (color - 1.0 + s
	0x71, 0x72, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2a, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // qrt(color*(color
	0x20, 0x2b, 0x20, 0x62, 0x68, 0x29, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x2a, 0x69, //  + bh) + 1.0))*i
	0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // nv_2bh;.}.float 
	0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // sRGB(const float
	0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, //  f).{.float s;.i
	0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x33, 0x31, 0x33, 0x30, // f (f <= 0.003130
	0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x20, 0x2a, 0x20, 0x66, // 8).s = 12.92 * f
	0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x35, 0x35, // ;.else.s = 1.055
	0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, //  * pow(f, 1.0/2.
	0x34, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // 4) - 0.055;.retu
	0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x52, 0x65, // rn s;.}.float Re
	0x63, 0x37, 0x30, 0x39, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // c709(const float
	0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, //  f).{.float s;.i
	0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, 0x29, 0x0a, 0x73, // f (f <= 0.018).s
	0x20, 0x3d, 0x20, 0x34, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, //  = 4.5 * f;.else
	0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, // .s = 1.099 * pow
	0x28, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x39, // (f, 0.45) - 0.09
	0x39, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // 9;.return s;.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, // loat FBGamma(con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, // st float color).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, // {.return sRGB(co
	0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x47, // lor);.}.vec2 FBG
	0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, // amma(const vec2 
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // color).{.return 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, // vec2(FBGamma(col
	0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, // or.x),FBGamma(co
	0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // lor.y));.}.vec3 
	0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // FBGamma(const ve
	0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, // c3 color).{.retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, // rn vec3(FBGamma(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, // color.x),FBGamma
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, // (color.y),FBGamm
	0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // a(color.z));.}.v
	0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x32, 0x32, 0x28, 0x63, 0x6f, // ec3 FBGamma22(co
	0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, // nst vec3 color).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x70, 0x6f, // {.return vec3(po
	0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, // w(color.x, 1.0/2
	0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x2c, // .2),pow(color.y,
	0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, //  1.0/2.2),pow(co
	0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x29, // lor.z, 1.0/2.2))
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, // ;.}.float FBTone
	0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // Map(const float 
	0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6c, 0x20, 0x2a, 0x20, // l).{.return l * 
	0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, // ((l*0.25 + 1.0) 
	0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // / (l + 1.0));.}.
	0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x63, // vec2 FBToneMap(c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, // onst vec2 color)
	0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, // .{.const float l
	0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, //  = dot(color,vec
	0x32, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, // 2(0.176204+0.010
	0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, // 8109*0.5,0.81298
	0x35, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x29, // 5+0.0108109*0.5)
	0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, // );.return color 
	0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, // * ((l*0.25 + 1.0
	0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, // ) / (l + 1.0));.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, // }.vec3 FBToneMap
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // (const vec3 colo
	0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // r).{.const float
	0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, //  l = dot(color,v
	0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2c, 0x30, 0x2e, 0x38, // ec3(0.176204,0.8
	0x31, 0x32, 0x39, 0x38, 0x35, 0x2c, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x29, // 12985,0.0108109)
	0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, // );.return color 
	0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, // * ((l*0.25 + 1.0
	0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, // ) / (l + 1.0));.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x28, // }.vec4 Additive(
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, // const vec4 cBase
	0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, // , const vec4 cBl
	0x65, 0x6e, 0x64, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // end, const float
	0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, //  percent).{.retu
	0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2b, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // rn cBase + cBlen
	0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // d*percent;.}.vec
	0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // 3 Screen (const 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, // vec3 cBase, cons
	0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, // t vec3 cBlend).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, // .return 1.0 - (1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, // .0 - cBase) * (1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // .0 - cBlend);.}.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6e, // vec4 Screen (con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, // st vec4 cBase, c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, // onst vec4 cBlend
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, // ).{.return 1.0 -
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, //  (1.0 - cBase) *
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, //  (1.0 - cBlend);
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, // .}.vec3 ScreenHD
	0x52, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, // R (const vec3 cB
	0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // ase, const vec3 
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // cBlend).{.return
	0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, //  max(1.0 - (1.0 
	0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, // - cBase) * (1.0 
	0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, // - cBlend), vec3(
	0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // 0.,0.,0.));.}.ve
	0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x63, 0x6f, // c4 ScreenHDR (co
	0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, // nst vec4 cBase, 
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // const vec4 cBlen
	0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, // d).{.return max(
	0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, // 1.0 - (1.0 - cBa
	0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, // se) * (1.0 - cBl
	0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, // end), vec4(0.,0.
	0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, // ,0.,0.));.}.vec4
	0x20, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, //  Multiply (const
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, //  vec4 cBase, con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, // st vec4 cBlend, 
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, // const float perc
	0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, // ent).{.return cB
	0x61, 0x73, 0x65, 0x20, 0x2a, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, // ase * cBlend*per
	0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, // cent;.}.vec4 Ove
	0x72, 0x6c, 0x61, 0x79, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, // rlay (const vec4
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, //  cBase, const ve
	0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, // c4 cBlend).{.vec
	0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, // 4 cNew = step(0.
	0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, // 5, cBase);.cNew 
	0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, // = mix(cBase*cBle
	0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, // nd*2.0, 1.0-2.0*
	0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, // (1.0-cBase)*(1.0
	0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x3b, // -cBlend), cNew);
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, // .return cNew;.}.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x48, 0x44, 0x52, 0x20, // vec4 OverlayHDR 
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, // (const vec4 cBas
	0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // e, const vec4 cB
	0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, // lend).{.vec4 cNe
	0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, // w = step(0.5, cB
	0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, // ase);.cNew = max
	0x28, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, // (mix(cBase*cBlen
	0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, // d*2.0, 1.0-2.0*(
	0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, // 1.0-cBase)*(1.0-
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x2c, 0x20, // cBlend), cNew), 
	0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, // vec4(0.,0.,0.,0.
	0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, // ));.return cNew;
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x73, 0x5f, 0x68, 0x65, 0x6d, 0x69, // .}.vec3 cos_hemi
	0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x63, 0x6f, // sphere_sample(co
	0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, // nst vec2 t).{.co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x68, 0x69, 0x20, 0x3d, 0x20, // nst float phi = 
	0x74, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x28, 0x32, 0x2e, 0x30, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, // t.y * (2.0*3.141
	0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, // 5926535897932384
	0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x3b, 0x0a, 0x63, // 626433832795);.c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, // onst float cosTh
	0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, // eta = sqrt(1.0 -
	0x20, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, //  t.x);.const flo
	0x61, 0x74, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, // at sinTheta = sq
	0x72, 0x74, 0x28, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, // rt(t.x);.float s
	0x70, 0x2c, 0x63, 0x70, 0x3b, 0x0a, 0x73, 0x69, 0x6e, 0x63, 0x6f, 0x73, 0x28, 0x70, 0x68, 0x69, // p,cp;.sincos(phi
	0x2c, 0x73, 0x70, 0x2c, 0x63, 0x70, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // ,sp,cp);.return 
	0x76, 0x65, 0x63, 0x33, 0x28, 0x63, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, // vec3(cp * sinThe
	0x74, 0x61, 0x2c, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x73, 0x70, // ta, cosTheta, sp
	0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, //  * sinTheta);.}.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x76, // vec3 rotate_to_v
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, // ector_upper(cons
	0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, // t vec3 vec, cons
	0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x29, 0x0a, 0x7b, // t vec3 normal).{
	0x0a, 0x69, 0x66, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x3e, 0x20, 0x2d, // .if(normal.y > -
	0x30, 0x2e, 0x39, 0x39, 0x39, 0x39, 0x39, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, // 0.99999).{.const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x28, //  float h = 1.0/(
	0x31, 0x2e, 0x30, 0x2b, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x63, // 1.0+normal.y);.c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x20, 0x3d, 0x20, // onst float hz = 
	0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // h*normal.z;.cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x3d, 0x20, 0x68, 0x7a, // t float hzx = hz
	0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // *normal.x;.retur
	0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, // n vec3(.vec.x * 
	0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, // (normal.y+hz*nor
	0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x29, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, // mal.z) + vec.y *
	0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, //  normal.x - vec.
	0x7a, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, // z * hzx,.vec.y *
	0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, //  normal.y - vec.
	0x78, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, // x * normal.x - v
	0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x2c, // ec.z * normal.z,
	0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, // .vec.y * normal.
	0x7a, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x20, // z - vec.x * hzx 
	0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, // + vec.z * (norma
	0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x2a, 0x6e, // l.y+h*normal.x*n
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, // ormal.x));.}.els
	0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x2d, 0x76, 0x65, 0x63, 0x3b, 0x0a, 0x7d, // e return -vec;.}
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, // .uniform vec4 St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x53, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3b, // ereo_Saturation;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, // .uniform vec4 St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, // ereo_MS_ZPD_YAxi
	0x73, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, // s;.uniform sampl
	0x65, 0x72, 0x32, 0x44, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // er2D tex_stereo_
	0x66, 0x62, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, // fb;.uniform samp
	0x6c, 0x65, 0x72, 0x32, 0x44, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // ler2D tex_stereo
	0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // _depth;.uniform 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, // vec4 w_h_height;
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, // .vec3 gatherEyeC
	0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x62, 0x6f, 0x6f, // olor(vec2 u, boo
	0x6c, 0x20, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // l isLeft).{.cons
	0x74, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3d, 0x20, 0x28, // t bool yaxis = (
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, // Stereo_MS_ZPD_YA
	0x78, 0x69, 0x73, 0x2e, 0x7a, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x3b, 0x0a, 0x63, 0x6f, // xis.z != 0.);.co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // nst float MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, // aration = (Stere
	0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, // o_MS_ZPD_YAxis.x
	0x29, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, // );.if (isLeft).{
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x6d, 0x69, // .const float lmi
	0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, // nDepth = min(min
	0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, // (textureLod(tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, // stereo_depth, u 
	0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // + (yaxis ? vec2(
	0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, // 0.0, 0.500 * Max
	0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, // Separation) : ve
	0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, // c2(0.500 * MaxSe
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, // paration, 0.0)),
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, //  0.0).x,.texture
	0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, // Lod(tex_stereo_d
	0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, // epth, u + (yaxis
	0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, //  ? vec2(0.0, 0.6
	0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // 66 * MaxSeparati
	0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, // on) : vec2(0.666
	0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, //  * MaxSeparation
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, // , 0.0)), 0.0).x)
	0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, // ,.textureLod(tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, // _stereo_depth, u
	0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, //  + (yaxis ? vec2
	0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // (0.0, MaxSeparat
	0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, // ion) : vec2( Max
	0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // Separation, 0.0)
	0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // ), 0.0).x);.floa
	0x74, 0x20, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, // t lparallax = ma
	0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, // x(0.0, w_h_heigh
	0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // t.w + MaxSeparat
	0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, // ion * (1.0 - 1.0
	0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, //  / (0.5 + lminDe
	0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, // pth * (1.0 / (St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, // ereo_MS_ZPD_YAxi
	0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, // s.y) - 0.5))));.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, // return textureLo
	0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, // d(tex_stereo_fb,
	0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, //  u + (yaxis ? ve
	0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, // c2(0.0, -lparall
	0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x6c, 0x70, 0x61, 0x72, 0x61, // ax) : vec2(lpara
	0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, // llax, 0.0)), 0.0
	0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x7b, 0x0a, // ).xyz;.}.else.{.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x6d, 0x69, 0x6e, // const float rmin
	0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, // Depth = min(min(
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, // textureLod(tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, // tereo_depth, u -
	0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, //  (yaxis ? vec2(0
	0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, // .0, 0.500 * MaxS
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, // eparation) : vec
	0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // 2(0.500 * MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, // aration, 0.0)), 
	0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, // 0.0).x,.textureL
	0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, // od(tex_stereo_de
	0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, // pth, u - (yaxis 
	0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, // ? vec2(0.0, 0.66
	0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, // 6 * MaxSeparatio
	0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, // n) : vec2(0.666 
	0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, // * MaxSeparation,
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, //  0.0)), 0.0).x),
	0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, // .textureLod(tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, // stereo_depth, u 
	0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // - (yaxis ? vec2(
	0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // 0.0, MaxSeparati
	0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, // on) : vec2( MaxS
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, // eparation, 0.0))
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // , 0.0).x);.float
	0x20, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, //  rparallax = max
	0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, // (0.0, w_h_height
	0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // .w + MaxSeparati
	0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, // on * (1.0 - 1.0 
	0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, // / (0.5 + rminDep
	0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, // th * (1.0 / (Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, // reo_MS_ZPD_YAxis
	0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x72, // .y) - 0.5))));.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, // eturn textureLod
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, // (tex_stereo_fb, 
	0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, // u - (yaxis ? vec
	0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, // 2(0.0, -rparalla
	0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, // x) : vec2(rparal
	0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // lax, 0.0)), 0.0)
	0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x67, // .xyz;.}.}.void g
	0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, // atherLeftRightCo
	0x6c, 0x6f, 0x72, 0x73, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x6f, 0x75, 0x74, // lors(vec2 u, out
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x63, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, //  vec3 lcol, out 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, // vec3 rcol).{.con
	0x73, 0x74, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3d, 0x20, // st bool yaxis = 
	0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, // (Stereo_MS_ZPD_Y
	0x41, 0x78, 0x69, 0x73, 0x2e, 0x7a, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x3b, 0x0a, 0x63, // Axis.z != 0.);.c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, // onst float MaxSe
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, // paration = (Ster
	0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, // eo_MS_ZPD_YAxis.
	0x78, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // x);.const float 
	0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, // lminDepth = min(
	0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, // min(textureLod(t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, // ex_stereo_depth,
	0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, //  u + (yaxis ? ve
	0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, // c2(0.0, 0.500 * 
	0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, // MaxSeparation) :
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, //  vec2(0.500 * Ma
	0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, // xSeparation, 0.0
	0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, // )), 0.0).x,.text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // ureLod(tex_stere
	0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, // o_depth, u + (ya
	0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, // xis ? vec2(0.0, 
	0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, // 0.666 * MaxSepar
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, // ation) : vec2(0.
	0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // 666 * MaxSeparat
	0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // ion, 0.0)), 0.0)
	0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, // .x),.textureLod(
	0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, // tex_stereo_depth
	0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, // , u + (yaxis ? v
	0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, // ec2(0.0, MaxSepa
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x20, // ration) : vec2( 
	0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, // MaxSeparation, 0
	0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, // .0)), 0.0).x);.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, // loat lparallax =
	0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, //  max(0.0, w_h_he
	0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, // ight.w + MaxSepa
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, // ration * (1.0 - 
	0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x6c, 0x6d, 0x69, // 1.0 / (0.5 + lmi
	0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, // nDepth * (1.0 / 
	0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, // (Stereo_MS_ZPD_Y
	0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, // Axis.y) - 0.5)))
	0x29, 0x3b, 0x0a, 0x6c, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // );.lcol = textur
	0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // eLod(tex_stereo_
	0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, // fb, u + (yaxis ?
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x6c, 0x70, 0x61, 0x72, //  vec2(0.0, -lpar
	0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x6c, 0x70, // allax) : vec2(lp
	0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, // arallax, 0.0)), 
	0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // 0.0).xyz;.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, // float rminDepth 
	0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // = min(min(textur
	0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // eLod(tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, // depth, u - (yaxi
	0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, // s ? vec2(0.0, 0.
	0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // 500 * MaxSeparat
	0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, // ion) : vec2(0.50
	0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, // 0 * MaxSeparatio
	0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, // n, 0.0)), 0.0).x
	0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, // ,.textureLod(tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, // _stereo_depth, u
	0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, //  - (yaxis ? vec2
	0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, // (0.0, 0.666 * Ma
	0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, // xSeparation) : v
	0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, // ec2(0.666 * MaxS
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, // eparation, 0.0))
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, // , 0.0).x),.textu
	0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // reLod(tex_stereo
	0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, // _depth, u - (yax
	0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, // is ? vec2(0.0, M
	0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, // axSeparation) : 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // vec2( MaxSeparat
	0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // ion, 0.0)), 0.0)
	0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x70, 0x61, 0x72, 0x61, // .x);.float rpara
	0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, // llax = max(0.0, 
	0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, // w_h_height.w + M
	0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, // axSeparation * (
	0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, // 1.0 - 1.0 / (0.5
	0x20, 0x2b, 0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, //  + rminDepth * (
	0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, // 1.0 / (Stereo_MS
	0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, // _ZPD_YAxis.y) - 
	0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, // 0.5))));.rcol = 
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, // textureLod(tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, // tereo_fb, u - (y
	0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, // axis ? vec2(0.0,
	0x20, 0x2d, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, //  -rparallax) : v
	0x65, 0x63, 0x32, 0x28, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, // ec2(rparallax, 0
	0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, // .0)), 0.0).xyz;.
	0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, // }.uniform mat4 S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, // tereo_LeftMat;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, // niform mat4 Ster
	0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, // eo_RightMat;.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // form vec4 Stereo
	0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, // _LeftLuminance_G
	0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, // amma;.uniform ve
	0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, // c4 Stereo_RightL
	0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, // uminance_DynDesa
	0x74, 0x3b, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, // t;.void DynamicD
	0x65, 0x73, 0x61, 0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, // esatAnaglyph(con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, // st vec3 lCol, co
	0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, // nst vec3 rCol, o
	0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, // ut vec3 lDesatCo
	0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x44, 0x65, 0x73, // l, out vec3 rDes
	0x61, 0x74, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // atCol).{.const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, // loat left2LeftLu
	0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, // m = dot(lCol, St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, // ereo_LeftLuminan
	0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, // ce_Gamma.xyz);.c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, // onst float left2
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, // RightLum = dot(l
	0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, // Col, Stereo_Righ
	0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, // tLuminance_DynDe
	0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // sat.xyz);.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, // float right2Left
	0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // Lum = dot(rCol, 
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, // Stereo_LeftLumin
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, // ance_Gamma.xyz);
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, // .const float rig
	0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, // ht2RightLum = do
	0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, // t(rCol, Stereo_R
	0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, // ightLuminance_Dy
	0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, // nDesat.xyz);.con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // st float leftLum
	0x20, 0x3d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, //  = left2LeftLum 
	0x2b, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, // + left2RightLum;
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, // .const float rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, // htLum = right2Le
	0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, // ftLum + right2Ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // ghtLum;.const fl
	0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, // oat leftDesat = 
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, // Stereo_RightLumi
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, // nance_DynDesat.w
	0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, //  * abs((left2Lef
	0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, // tLum - left2Righ
	0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // tLum) / (leftLum
	0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, //  + 0.0001));.con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, // st float rightDe
	0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, // sat = Stereo_Rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, // htLuminance_DynD
	0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x72, 0x69, // esat.w * abs((ri
	0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x72, 0x69, // ght2LeftLum - ri
	0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, // ght2RightLum) / 
	0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, // (rightLum + 0.00
	0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, // 01));.lDesatCol 
	0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, // = mix(lCol, vec3
	0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, // _splat(leftLum),
	0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x72, 0x44, 0x65, //  leftDesat);.rDe
	0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x72, 0x43, 0x6f, // satCol = mix(rCo
	0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x72, 0x69, // l, vec3_splat(ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, // ghtLum), rightDe
	0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x4c, 0x69, 0x6e, // sat);.}.vec3 Lin
	0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, // earAnaglyph(cons
	0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, // t vec3 lCol, con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, // st vec3 rCol).{.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // const vec3 color
	0x20, 0x3d, 0x20, 0x28, 0x28, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x6c, 0x43, 0x6f, 0x6c, //  = (( (vec4(lCol
	0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // , 1.)) * (Stereo
	0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x20, // _LeftMat) ) + ( 
	0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, // (vec4(rCol, 1.))
	0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, //  * (Stereo_Right
	0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x72, 0x65, 0x74, // Mat) )).rgb;.ret
	0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, // urn color;.}.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // form vec4 Stereo
	0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, // _DeghostGamma;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, // niform mat4 Ster
	0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, // eo_DeghostFilter
	0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x6e, // ;.vec3 DeghostAn
	0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, // aglyph(const vec
	0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // 3 lCol, const ve
	0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, // c3 rCol).{.const
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, //  vec3 color = Li
	0x6e, 0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, // nearAnaglyph(lCo
	0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // l, rCol);.return
	0x20, 0x28, 0x20, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x53, //  ( (pow(color, S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, // tereo_DeghostGam
	0x6d, 0x61, 0x2e, 0x72, 0x67, 0x62, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x6d, 0x61, 0x74, 0x33, // ma.rgb)) * (mat3
	0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, // (Stereo_DeghostF
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, // ilter[0].xyz, St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, // ereo_DeghostFilt
	0x65, 0x72, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // er[1].xyz, Stere
	0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, // o_DeghostFilter[
	0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, // 2].xyz)) );.}.vo
	0x69, 0x64, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x67, 0x6c, 0x5f, 0x46, // id main().{.gl_F
	0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, // ragColor = vec4(
	0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x66, // gatherEyeColor(f
	0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, // loat2(v_texcoord
	0x30, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, // 0.x * 2.0, v_tex
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2e, 0x79, 0x29, 0x2c, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, // coord0.y), v_tex
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2e, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x2c, // coord0.x < 0.5),
	0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x00,                                     //  1.0);.}..
};
static const uint8_t fs_pp_stereo_sbs_dx11[2507] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x13, 0x53, // FSH.o.><.......S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, // tereo_MS_ZPD_YAx
	0x69, 0x73, 0x12, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x77, 0x5f, 0x68, // is...........w_h
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, // _height.........
	0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x30, // ..tex_stereo_fb0
	0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // ..........tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x30, 0x01, 0x01, 0x00, 0x01, 0x00, // ereo_depth0.....
	0x00, 0x00, 0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // .....tex_stereo_
	0x66, 0x62, 0x30, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x74, 0x65, 0x78, // fb0..........tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x30, 0x01, 0x01, // _stereo_depth0..
	0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x09, 0x00, 0x00, 0x44, 0x58, 0x42, 0x43, 0x55, // ...........DXBCU
	0xf5, 0x38, 0xef, 0x03, 0xf6, 0x07, 0x22, 0xbf, 0x27, 0x17, 0x4e, 0x38, 0x1f, 0x69, 0x44, 0x01, // .8....".'.N8.iD.
	0x00, 0x00, 0x00, 0x1c, 0x09, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x84, // ...........,....
	0x00, 0x00, 0x00, 0xb8, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x4e, 0x50, 0x00, 0x00, 0x00, 0x02, // .......ISGNP....
	0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, // .......8........
	0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x44, // ...............D
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, // .......SV_POSITI
	0x4f, 0x4e, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0xab, 0xab, 0xab, 0x4f, // ON.TEXCOORD....O
	0x53, 0x47, 0x4e, 0x2c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x20, // SGN,........... 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, // .......SV_TARGET
	0x00, 0xab, 0xab, 0x53, 0x48, 0x45, 0x58, 0x5c, 0x08, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x17, // ...SHEX....P....
	0x02, 0x00, 0x00, 0x6a, 0x08, 0x00, 0x01, 0x59, 0x00, 0x00, 0x04, 0x46, 0x8e, 0x20, 0x00, 0x00, // ...j...Y...F. ..
	0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x03, 0x00, 0x60, 0x10, 0x00, 0x00, // .......Z....`...
	0x00, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x03, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x58, // ...Z....`......X
	0x18, 0x00, 0x04, 0x00, 0x70, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x55, 0x00, 0x00, 0x58, // ....p......UU..X
	0x18, 0x00, 0x04, 0x00, 0x70, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x55, 0x55, 0x00, 0x00, 0x62, // ....p......UU..b
	0x10, 0x00, 0x03, 0x32, 0x10, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x03, 0xf2, // ...2.......e....
	0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x02, 0x03, 0x00, 0x00, 0x00, 0x31, //  ......h.......1
	0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x10, 0x10, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x39, 0x00, 0x00, 0x08, 0x22, // ....@.....?9..."
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .......*. ......
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x04, 0x03, 0x0a, // ....@...........
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x08, 0x52, 0x00, 0x10, 0x00, 0x01, // .......6...R....
	0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ....@...........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x0b, 0xa2, 0x00, 0x10, 0x00, 0x01, // .......8........
	0x00, 0x00, 0x00, 0x06, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, // ..... ..........
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0xfa, // @.........?.....
	0x7e, 0x2a, 0x3f, 0x37, 0x00, 0x00, 0x09, 0xf2, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x56, // ~*?7...........V
	0x05, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x16, // .......F........
	0x0b, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x0c, 0xf2, 0x00, 0x10, 0x00, 0x01, // .......2........
	0x00, 0x00, 0x00, 0x46, 0x14, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, // ...F........@...
	0x00, 0x00, 0x40, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x80, 0x3f, 0x46, // ..@...?...@...?F
	0x0e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, // .......H.......C
	0x55, 0x15, 0x00, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x01, // U..........F....
	0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, // ...F~.......`...
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, // ....@......H....
	0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x42, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe6, // ...CU..B........
	0x0a, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x96, 0x7c, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, // ........|.......
	0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, // `.......@......3
	0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x00, // ...........*....
	0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x08, 0x52, // ...........6...R
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........@.......
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x06, 0x22, // ...........6..."
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ......... ......
	0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x09, 0xc2, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x56, // ...7...........V
	0x05, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x04, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x56, // ...............V
	0x01, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x0c, 0xc2, 0x00, 0x10, 0x00, 0x00, // .......2........
	0x00, 0x00, 0x00, 0x06, 0x14, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, // ............@...
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x80, 0x3f, 0xa6, // ..........@...?.
	0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, // .......H.......C
	0x55, 0x15, 0x00, 0x42, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x00, // U..B............
	0x00, 0x00, 0x00, 0x96, 0x7c, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, // ....|.......`...
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x07, 0x12, // ....@......3....
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, // .......*........
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x0b, 0x42, 0x00, 0x10, 0x00, 0x00, // ...........B....
	0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, // ....@.....?...?.
	0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x1a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ..?...?.. ......
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x42, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, // .......B.......*
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0x32, // ........@......2
	0x00, 0x00, 0x09, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, // ...*........@...
	0x00, 0x00, 0x3f, 0x0e, 0x00, 0x00, 0x0a, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, // ..?.............
	0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, // @.....?...?...?.
	0x00, 0x80, 0x3f, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x12, // ..?.............
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x00, // ...........A....
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x32, 0x00, 0x00, 0x0b, 0x12, // ....@.....?2....
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ......... ......
	0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, 0x80, 0x20, 0x00, 0x00, // ...........:. ..
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x01, // .......4........
	0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, // ............@...
	0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x06, 0x82, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, // ...6............
	0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x22, // ...A.......6..."
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, // ........@......7
	0x00, 0x00, 0x09, 0x52, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x56, 0x05, 0x10, 0x00, 0x00, // ...R.......V....
	0x00, 0x00, 0x00, 0xa6, 0x0b, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x01, 0x10, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x0c, 0x52, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, // ...2...R........
	0x11, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, // ........@.....@.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x06, 0x02, 0x10, 0x00, 0x00, // ......?.........
	0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0xd2, // ...H.......CU...
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, // ................
	0x79, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, // y.......`.......
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x01, 0x36, 0x00, 0x00, 0x08, 0x52, // @..........6...R
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........@.......
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x0b, 0xa2, // ...........8....
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ......... ......
	0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, // ....@.........?.
	0x00, 0x00, 0x00, 0xfa, 0x7e, 0x2a, 0x3f, 0x37, 0x00, 0x00, 0x09, 0xf2, 0x00, 0x10, 0x00, 0x01, // ....~*?7........
	0x00, 0x00, 0x00, 0x56, 0x05, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x01, // ...V.......F....
	0x00, 0x00, 0x00, 0x16, 0x0b, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x0d, 0xf2, // ...........2....
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x14, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, // .......F........
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x00, 0x40, 0x00, // @.....@...?...@.
	0x00, 0x80, 0x3f, 0x46, 0x0e, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x48, // ..?F...A.......H
	0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x12, 0x00, 0x10, 0x00, 0x01, // .......CU.......
	0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, 0x01, // ...F.......F~...
	0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, // ....`.......@...
	0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x22, // ...H.......CU.."
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x16, // ................
	0x7e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, // ~.......`.......
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x01, // @......3........
	0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x08, 0x52, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, // ...6...R........
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // @...............
	0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x06, 0x22, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0a, // ...6..."........
	0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x09, 0x62, // . .........7...b
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x56, 0x05, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, // .......V........
	0x01, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x56, 0x04, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x32, // .......V.......2
	0x00, 0x00, 0x0d, 0x62, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x11, 0x10, 0x00, 0x01, // ...b............
	0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, // ....@.........@.
	0x00, 0x80, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x56, 0x06, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x01, // ..?....V...A....
	0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x22, // ...H.......CU.."
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x96, 0x05, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x16, // ................
	0x7e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, // ~.......`.......
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x01, // @......3........
	0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x0b, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, // ......."........
	0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, // @.....?...?...?.
	0x00, 0x80, 0x3f, 0x1a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ..?.. ..........
	0x00, 0x00, 0x07, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, // ..."............
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0x32, 0x00, 0x00, 0x09, 0x12, // ....@......2....
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, // ................
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x0e, // ........@.....?.
	0x00, 0x00, 0x0a, 0x12, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, // ............@...
	0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x0a, // ..?...?...?...?.
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x12, 0x00, 0x10, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, // .......A........
	0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x32, 0x00, 0x00, 0x0b, 0x12, 0x00, 0x10, 0x00, 0x01, // @.....?2........
	0x00, 0x00, 0x00, 0x0a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, // ..... ..........
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, // .......:. ......
	0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, // ...4............
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, // ........@......6
	0x00, 0x00, 0x06, 0x82, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x80, 0x41, // ...............A
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x22, 0x00, 0x10, 0x00, 0x01, // .......6..."....
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x09, 0x32, // ....@......7...2
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x56, 0x05, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe6, // .......V........
	0x0a, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, // .......F.......2
	0x00, 0x00, 0x0d, 0x32, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x10, 0x10, 0x00, 0x01, // ...2.......F....
	0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x80, 0x3f, 0x00, // ....@.....@...?.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x01, // .......F...A....
	0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0xd2, // ...H.......CU...
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0xc6, // .......F........
	0x79, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, // y.......`.......
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x01, 0x36, 0x00, 0x00, 0x05, 0x72, // @..........6...r
	0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x03, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, //  ..............6
	0x00, 0x00, 0x05, 0x82, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, // .... .......@...
	0x00, 0x80, 0x3f, 0x3e, 0x00, 0x00, 0x01, 0x00, 0x00, 0x20, 0x00,                               // ..?>..... .
};
static const uint8_t fs_pp_stereo_sbs_spv[4140] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x13, 0x53, // FSH.o.><.......S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, // tereo_MS_ZPD_YAx
	0x69, 0x73, 0x12, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x77, 0x5f, 0x68, // is...........w_h
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x01, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, // _height.........
	0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x30, // ..tex_stereo_fb0
	0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x02, 0x22, 0x00, 0x10, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // ......."..tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x30, 0x00, 0x03, 0x00, 0x00, 0x00, // ereo_depth0.....
	0x00, 0x02, 0x22, 0x00, 0xb0, 0x0f, 0x00, 0x00, 0x03, 0x02, 0x23, 0x07, 0x00, 0x00, 0x01, 0x00, // ..".......#.....
	0x0b, 0x00, 0x08, 0x00, 0xa4, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x02, 0x00, // ................
	0x01, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, 0x4c, 0x53, 0x4c, // ............GLSL
	0x2e, 0x73, 0x74, 0x64, 0x2e, 0x34, 0x35, 0x30, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x03, 0x00, // .std.450........
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x07, 0x00, 0x04, 0x00, 0x00, 0x00, // ................
	0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x2c, 0x01, 0x00, 0x00, // ....main....,...
	0x37, 0x01, 0x00, 0x00, 0x10, 0x00, 0x03, 0x00, 0x04, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, // 7...............
	0x03, 0x00, 0x03, 0x00, 0x05, 0x00, 0x00, 0x00, 0xf4, 0x01, 0x00, 0x00, 0x05, 0x00, 0x04, 0x00, // ................
	0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x08, 0x00, // ....main........
	0x2b, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, // +...tex_stereo_f
	0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x08, 0x00, // bSampler........
	0x2e, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, // ....tex_stereo_f
	0x62, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x08, 0x00, // bTexture........
	0x32, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, // 2...tex_stereo_d
	0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x00, 0x05, 0x00, 0x08, 0x00, // epthSampler.....
	0x34, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, // 4...tex_stereo_d
	0x65, 0x70, 0x74, 0x68, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x00, 0x05, 0x00, 0x06, 0x00, // epthTexture.....
	0x4f, 0x00, 0x00, 0x00, 0x55, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, // O...UniformBlock
	0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x08, 0x00, 0x4f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........O.......
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, // Stereo_MS_ZPD_YA
	0x78, 0x69, 0x73, 0x00, 0x06, 0x00, 0x06, 0x00, 0x4f, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // xis.....O.......
	0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x00, 0x00, 0x05, 0x00, 0x03, 0x00, // w_h_height......
	0x51, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x05, 0x00, 0x2c, 0x01, 0x00, 0x00, // Q...........,...
	0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x00, 0x05, 0x00, 0x06, 0x00, // v_texcoord0.....
	0x37, 0x01, 0x00, 0x00, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, // 7...bgfx_FragDat
	0x61, 0x30, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x2b, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, // a0..G...+..."...
	0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x2b, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, // ....G...+...!...
	0x12, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, // ....G......."...
	0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, // ....G.......!...
	0x02, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x32, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, // ....G...2..."...
	0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x32, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, // ....G...2...!...
	0x13, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x34, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, // ....G...4..."...
	0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x34, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, // ....G...4...!...
	0x03, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0x4f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ....H...O.......
	0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0x4f, 0x00, 0x00, 0x00, // #.......H...O...
	0x01, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x47, 0x00, 0x03, 0x00, // ....#.......G...
	0x4f, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x51, 0x00, 0x00, 0x00, // O.......G...Q...
	0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x51, 0x00, 0x00, 0x00, // ".......G...Q...
	0x21, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x2c, 0x01, 0x00, 0x00, // !.......G...,...
	0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x37, 0x01, 0x00, 0x00, // ........G...7...
	0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, // ................
	0x21, 0x00, 0x03, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x02, 0x00, // !...............
	0x06, 0x00, 0x00, 0x00, 0x16, 0x00, 0x03, 0x00, 0x07, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, // ............ ...
	0x19, 0x00, 0x09, 0x00, 0x08, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, // ................
	0x02, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, // ................
	0x04, 0x00, 0x00, 0x00, 0x14, 0x00, 0x02, 0x00, 0x19, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00, // ................
	0x1b, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, // ............ ...
	0x2a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, // *...........;...
	0x2a, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, // *...+....... ...
	0x2d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, // -...........;...
	0x2d, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, // -...........;...
	0x2a, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, // *...2.......;...
	0x2d, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x00, 0x04, 0x00, // -...4...........
	0x37, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, // 7... .......+...
	0x37, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, // 7...8.......+...
	0x37, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x03, 0x00, // 7...<...........
	0x40, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x04, 0x00, 0x4f, 0x00, 0x00, 0x00, // @...........O...
	0x0e, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x50, 0x00, 0x00, 0x00, // ........ ...P...
	0x02, 0x00, 0x00, 0x00, 0x4f, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x50, 0x00, 0x00, 0x00, // ....O...;...P...
	0x51, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x15, 0x00, 0x04, 0x00, 0x52, 0x00, 0x00, 0x00, // Q...........R...
	0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x52, 0x00, 0x00, 0x00, //  .......+...R...
	0x53, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x54, 0x00, 0x00, 0x00, // S....... ...T...
	0x02, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, // ........+.......
	0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x52, 0x00, 0x00, 0x00, // W.......+...R...
	0x5a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, // Z.......+.......
	0x63, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x17, 0x00, 0x04, 0x00, 0x6a, 0x00, 0x00, 0x00, // c......?....j...
	0x19, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, // ........+.......
	0x76, 0x00, 0x00, 0x00, 0xfa, 0x7e, 0x2a, 0x3f, 0x2b, 0x00, 0x04, 0x00, 0x52, 0x00, 0x00, 0x00, // v....~*?+...R...
	0x98, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, // ........+.......
	0x9c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x2b, 0x00, 0x04, 0x00, 0x52, 0x00, 0x00, 0x00, // .......?+...R...
	0x9e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, // ........+.......
	0x17, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x20, 0x00, 0x04, 0x00, 0x2b, 0x01, 0x00, 0x00, // .......@ ...+...
	0x01, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x2b, 0x01, 0x00, 0x00, // ........;...+...
	0x2c, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x36, 0x01, 0x00, 0x00, // ,....... ...6...
	0x03, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x36, 0x01, 0x00, 0x00, // ........;...6...
	0x37, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x36, 0x00, 0x05, 0x00, 0x02, 0x00, 0x00, 0x00, // 7.......6.......
	0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, // ................
	0x05, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, // ....=.......,...
	0x2b, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x08, 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x00, // +...=......./...
	0x2e, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, // ....=.......3...
	0x32, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x08, 0x00, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, // 2...=.......5...
	0x34, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x2d, 0x01, 0x00, 0x00, // 4...=.......-...
	0x2c, 0x01, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x61, 0x01, 0x00, 0x00, // ,...Q.......a...
	0x2d, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // -...............
	0x62, 0x01, 0x00, 0x00, 0x61, 0x01, 0x00, 0x00, 0x17, 0x01, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, // b...a.......Q...
	0x07, 0x00, 0x00, 0x00, 0x64, 0x01, 0x00, 0x00, 0x2d, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // ....d...-.......
	0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x65, 0x01, 0x00, 0x00, 0x62, 0x01, 0x00, 0x00, // P.......e...b...
	0x64, 0x01, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x67, 0x01, 0x00, 0x00, // d...Q.......g...
	0x2d, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb8, 0x00, 0x05, 0x00, 0x19, 0x00, 0x00, 0x00, // -...............
	0x68, 0x01, 0x00, 0x00, 0x67, 0x01, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, // h...g...c.......
	0x2d, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfb, 0x00, 0x03, 0x00, 0x5a, 0x00, 0x00, 0x00, // -...........Z...
	0x97, 0x01, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x97, 0x01, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, // ............A...
	0x54, 0x00, 0x00, 0x00, 0x98, 0x01, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, // T.......Q...<...
	0x53, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, // S...=...........
	0x98, 0x01, 0x00, 0x00, 0xb7, 0x00, 0x05, 0x00, 0x19, 0x00, 0x00, 0x00, 0x9a, 0x01, 0x00, 0x00, // ................
	0x99, 0x01, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x54, 0x00, 0x00, 0x00, // ....W...A...T...
	0x9b, 0x01, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x00, // ....Q...<...Z...
	0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x9c, 0x01, 0x00, 0x00, 0x9b, 0x01, 0x00, 0x00, // =...............
	0xf7, 0x00, 0x03, 0x00, 0x2c, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, // ....,...........
	0x68, 0x01, 0x00, 0x00, 0x9e, 0x01, 0x00, 0x00, 0xe5, 0x01, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, // h...............
	0xe5, 0x01, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xe9, 0x01, 0x00, 0x00, // ................
	0x63, 0x00, 0x00, 0x00, 0x9c, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, // c.......P.......
	0xea, 0x01, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, 0xe9, 0x01, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, // ....W...........
	0x07, 0x00, 0x00, 0x00, 0xec, 0x01, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, 0x9c, 0x01, 0x00, 0x00, // ........c.......
	0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xed, 0x01, 0x00, 0x00, 0xec, 0x01, 0x00, 0x00, // P...............
	0x57, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x6a, 0x00, 0x00, 0x00, 0xee, 0x01, 0x00, 0x00, // W...P...j.......
	0x9a, 0x01, 0x00, 0x00, 0x9a, 0x01, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, // ................
	0xef, 0x01, 0x00, 0x00, 0xee, 0x01, 0x00, 0x00, 0xea, 0x01, 0x00, 0x00, 0xed, 0x01, 0x00, 0x00, // ................
	0x83, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xf0, 0x01, 0x00, 0x00, 0x65, 0x01, 0x00, 0x00, // ............e...
	0xef, 0x01, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, 0x40, 0x00, 0x00, 0x00, 0x5d, 0x02, 0x00, 0x00, // ....V...@...]...
	0x35, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, // 5...3...X.......
	0x60, 0x02, 0x00, 0x00, 0x5d, 0x02, 0x00, 0x00, 0xf0, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // `...]...........
	0x57, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xf3, 0x01, 0x00, 0x00, // W...Q...........
	0x60, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // `...............
	0xf7, 0x01, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x9c, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, // ....v.......P...
	0x0b, 0x00, 0x00, 0x00, 0xf8, 0x01, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, 0xf7, 0x01, 0x00, 0x00, // ........W.......
	0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xfa, 0x01, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, // ............v...
	0x9c, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xfb, 0x01, 0x00, 0x00, // ....P...........
	0xfa, 0x01, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x6a, 0x00, 0x00, 0x00, // ....W...P...j...
	0xfc, 0x01, 0x00, 0x00, 0x9a, 0x01, 0x00, 0x00, 0x9a, 0x01, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, // ................
	0x0b, 0x00, 0x00, 0x00, 0xfd, 0x01, 0x00, 0x00, 0xfc, 0x01, 0x00, 0x00, 0xf8, 0x01, 0x00, 0x00, // ................
	0xfb, 0x01, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x00, 0x00, // ................
	0x65, 0x01, 0x00, 0x00, 0xfd, 0x01, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, 0x40, 0x00, 0x00, 0x00, // e.......V...@...
	0x67, 0x02, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, // g...5...3...X...
	0x0e, 0x00, 0x00, 0x00, 0x6a, 0x02, 0x00, 0x00, 0x67, 0x02, 0x00, 0x00, 0xfe, 0x01, 0x00, 0x00, // ....j...g.......
	0x02, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // ....W...Q.......
	0x01, 0x02, 0x00, 0x00, 0x6a, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, // ....j...........
	0x07, 0x00, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, // ............%...
	0xf3, 0x01, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, // ........P.......
	0x06, 0x02, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, 0x9c, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, // ....W.......P...
	0x0b, 0x00, 0x00, 0x00, 0x08, 0x02, 0x00, 0x00, 0x9c, 0x01, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, // ............W...
	0x50, 0x00, 0x05, 0x00, 0x6a, 0x00, 0x00, 0x00, 0x09, 0x02, 0x00, 0x00, 0x9a, 0x01, 0x00, 0x00, // P...j...........
	0x9a, 0x01, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x0a, 0x02, 0x00, 0x00, // ................
	0x09, 0x02, 0x00, 0x00, 0x06, 0x02, 0x00, 0x00, 0x08, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, // ................
	0x0b, 0x00, 0x00, 0x00, 0x0b, 0x02, 0x00, 0x00, 0x65, 0x01, 0x00, 0x00, 0x0a, 0x02, 0x00, 0x00, // ........e.......
	0x56, 0x00, 0x05, 0x00, 0x40, 0x00, 0x00, 0x00, 0x71, 0x02, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, // V...@...q...5...
	0x33, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x74, 0x02, 0x00, 0x00, // 3...X.......t...
	0x71, 0x02, 0x00, 0x00, 0x0b, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, // q...........W...
	0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x02, 0x00, 0x00, 0x74, 0x02, 0x00, 0x00, // Q...........t...
	0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x0f, 0x02, 0x00, 0x00, // ................
	0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x0e, 0x02, 0x00, 0x00, // ....%...........
	0x41, 0x00, 0x06, 0x00, 0x54, 0x00, 0x00, 0x00, 0x10, 0x02, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00, // A...T.......Q...
	0x38, 0x00, 0x00, 0x00, 0x98, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, // 8.......=.......
	0x11, 0x02, 0x00, 0x00, 0x10, 0x02, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x54, 0x00, 0x00, 0x00, // ........A...T...
	0x14, 0x02, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x9e, 0x00, 0x00, 0x00, // ....Q...<.......
	0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x15, 0x02, 0x00, 0x00, 0x14, 0x02, 0x00, 0x00, // =...............
	0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x16, 0x02, 0x00, 0x00, 0x9c, 0x00, 0x00, 0x00, // ................
	0x15, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x17, 0x02, 0x00, 0x00, // ................
	0x16, 0x02, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x07, 0x00, 0x00, 0x00, // ....c...........
	0x19, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x0f, 0x02, 0x00, 0x00, // ........2.......
	0x17, 0x02, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, 0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // ....c...........
	0x1a, 0x02, 0x00, 0x00, 0x9c, 0x00, 0x00, 0x00, 0x19, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, // ................
	0x07, 0x00, 0x00, 0x00, 0x1b, 0x02, 0x00, 0x00, 0x9c, 0x00, 0x00, 0x00, 0x1a, 0x02, 0x00, 0x00, // ................
	0x0c, 0x00, 0x08, 0x00, 0x07, 0x00, 0x00, 0x00, 0x1d, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // ................
	0x32, 0x00, 0x00, 0x00, 0x9c, 0x01, 0x00, 0x00, 0x1b, 0x02, 0x00, 0x00, 0x11, 0x02, 0x00, 0x00, // 2...............
	0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x1e, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // ................
	0x28, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, 0x1d, 0x02, 0x00, 0x00, 0x7f, 0x00, 0x04, 0x00, // (...W...........
	0x07, 0x00, 0x00, 0x00, 0x22, 0x02, 0x00, 0x00, 0x1e, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, // ....".......P...
	0x0b, 0x00, 0x00, 0x00, 0x23, 0x02, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, 0x22, 0x02, 0x00, 0x00, // ....#...W..."...
	0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x25, 0x02, 0x00, 0x00, 0x1e, 0x02, 0x00, 0x00, // P.......%.......
	0x57, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x6a, 0x00, 0x00, 0x00, 0x26, 0x02, 0x00, 0x00, // W...P...j...&...
	0x9a, 0x01, 0x00, 0x00, 0x9a, 0x01, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, // ................
	0x27, 0x02, 0x00, 0x00, 0x26, 0x02, 0x00, 0x00, 0x23, 0x02, 0x00, 0x00, 0x25, 0x02, 0x00, 0x00, // '...&...#...%...
	0x83, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x28, 0x02, 0x00, 0x00, 0x65, 0x01, 0x00, 0x00, // ........(...e...
	0x27, 0x02, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, 0x40, 0x00, 0x00, 0x00, 0x7b, 0x02, 0x00, 0x00, // '...V...@...{...
	0x2f, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, // /...,...X.......
	0x7e, 0x02, 0x00, 0x00, 0x7b, 0x02, 0x00, 0x00, 0x28, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // ~...{...(.......
	0x57, 0x00, 0x00, 0x00, 0x4f, 0x00, 0x08, 0x00, 0x1b, 0x00, 0x00, 0x00, 0x2b, 0x02, 0x00, 0x00, // W...O.......+...
	0x7e, 0x02, 0x00, 0x00, 0x7e, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // ~...~...........
	0x02, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x2d, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, // ........-.......
	0x9e, 0x01, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xa2, 0x01, 0x00, 0x00, // ................
	0x63, 0x00, 0x00, 0x00, 0x9c, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, // c.......P.......
	0xa3, 0x01, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, 0xa2, 0x01, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, // ....W...........
	0x07, 0x00, 0x00, 0x00, 0xa5, 0x01, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, 0x9c, 0x01, 0x00, 0x00, // ........c.......
	0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xa6, 0x01, 0x00, 0x00, 0xa5, 0x01, 0x00, 0x00, // P...............
	0x57, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x6a, 0x00, 0x00, 0x00, 0xa7, 0x01, 0x00, 0x00, // W...P...j.......
	0x9a, 0x01, 0x00, 0x00, 0x9a, 0x01, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, // ................
	0xa8, 0x01, 0x00, 0x00, 0xa7, 0x01, 0x00, 0x00, 0xa3, 0x01, 0x00, 0x00, 0xa6, 0x01, 0x00, 0x00, // ................
	0x81, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xa9, 0x01, 0x00, 0x00, 0x65, 0x01, 0x00, 0x00, // ............e...
	0xa8, 0x01, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, 0x40, 0x00, 0x00, 0x00, 0x35, 0x02, 0x00, 0x00, // ....V...@...5...
	0x35, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, // 5...3...X.......
	0x38, 0x02, 0x00, 0x00, 0x35, 0x02, 0x00, 0x00, 0xa9, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // 8...5...........
	0x57, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xac, 0x01, 0x00, 0x00, // W...Q...........
	0x38, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // 8...............
	0xb0, 0x01, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x9c, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, // ....v.......P...
	0x0b, 0x00, 0x00, 0x00, 0xb1, 0x01, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, 0xb0, 0x01, 0x00, 0x00, // ........W.......
	0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xb3, 0x01, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, // ............v...
	0x9c, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xb4, 0x01, 0x00, 0x00, // ....P...........
	0xb3, 0x01, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x6a, 0x00, 0x00, 0x00, // ....W...P...j...
	0xb5, 0x01, 0x00, 0x00, 0x9a, 0x01, 0x00, 0x00, 0x9a, 0x01, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, // ................
	0x0b, 0x00, 0x00, 0x00, 0xb6, 0x01, 0x00, 0x00, 0xb5, 0x01, 0x00, 0x00, 0xb1, 0x01, 0x00, 0x00, // ................
	0xb4, 0x01, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xb7, 0x01, 0x00, 0x00, // ................
	0x65, 0x01, 0x00, 0x00, 0xb6, 0x01, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, 0x40, 0x00, 0x00, 0x00, // e.......V...@...
	0x3f, 0x02, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, // ?...5...3...X...
	0x0e, 0x00, 0x00, 0x00, 0x42, 0x02, 0x00, 0x00, 0x3f, 0x02, 0x00, 0x00, 0xb7, 0x01, 0x00, 0x00, // ....B...?.......
	0x02, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // ....W...Q.......
	0xba, 0x01, 0x00, 0x00, 0x42, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, // ....B...........
	0x07, 0x00, 0x00, 0x00, 0xbb, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, // ............%...
	0xac, 0x01, 0x00, 0x00, 0xba, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, // ........P.......
	0xbf, 0x01, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, 0x9c, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, // ....W.......P...
	0x0b, 0x00, 0x00, 0x00, 0xc1, 0x01, 0x00, 0x00, 0x9c, 0x01, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, // ............W...
	0x50, 0x00, 0x05, 0x00, 0x6a, 0x00, 0x00, 0x00, 0xc2, 0x01, 0x00, 0x00, 0x9a, 0x01, 0x00, 0x00, // P...j...........
	0x9a, 0x01, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xc3, 0x01, 0x00, 0x00, // ................
	0xc2, 0x01, 0x00, 0x00, 0xbf, 0x01, 0x00, 0x00, 0xc1, 0x01, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, // ................
	0x0b, 0x00, 0x00, 0x00, 0xc4, 0x01, 0x00, 0x00, 0x65, 0x01, 0x00, 0x00, 0xc3, 0x01, 0x00, 0x00, // ........e.......
	0x56, 0x00, 0x05, 0x00, 0x40, 0x00, 0x00, 0x00, 0x49, 0x02, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, // V...@...I...5...
	0x33, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x4c, 0x02, 0x00, 0x00, // 3...X.......L...
	0x49, 0x02, 0x00, 0x00, 0xc4, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, // I...........W...
	0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xc7, 0x01, 0x00, 0x00, 0x4c, 0x02, 0x00, 0x00, // Q...........L...
	0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0xc8, 0x01, 0x00, 0x00, // ................
	0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0xbb, 0x01, 0x00, 0x00, 0xc7, 0x01, 0x00, 0x00, // ....%...........
	0x41, 0x00, 0x06, 0x00, 0x54, 0x00, 0x00, 0x00, 0xc9, 0x01, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00, // A...T.......Q...
	0x38, 0x00, 0x00, 0x00, 0x98, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, // 8.......=.......
	0xca, 0x01, 0x00, 0x00, 0xc9, 0x01, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x54, 0x00, 0x00, 0x00, // ........A...T...
	0xcd, 0x01, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x9e, 0x00, 0x00, 0x00, // ....Q...<.......
	0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0xce, 0x01, 0x00, 0x00, 0xcd, 0x01, 0x00, 0x00, // =...............
	0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xcf, 0x01, 0x00, 0x00, 0x9c, 0x00, 0x00, 0x00, // ................
	0xce, 0x01, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xd0, 0x01, 0x00, 0x00, // ................
	0xcf, 0x01, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x07, 0x00, 0x00, 0x00, // ....c...........
	0xd2, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0xc8, 0x01, 0x00, 0x00, // ........2.......
	0xd0, 0x01, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, 0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // ....c...........
	0xd3, 0x01, 0x00, 0x00, 0x9c, 0x00, 0x00, 0x00, 0xd2, 0x01, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, // ................
	0x07, 0x00, 0x00, 0x00, 0xd4, 0x01, 0x00, 0x00, 0x9c, 0x00, 0x00, 0x00, 0xd3, 0x01, 0x00, 0x00, // ................
	0x0c, 0x00, 0x08, 0x00, 0x07, 0x00, 0x00, 0x00, 0xd6, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // ................
	0x32, 0x00, 0x00, 0x00, 0x9c, 0x01, 0x00, 0x00, 0xd4, 0x01, 0x00, 0x00, 0xca, 0x01, 0x00, 0x00, // 2...............
	0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0xd7, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // ................
	0x28, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, 0xd6, 0x01, 0x00, 0x00, 0x7f, 0x00, 0x04, 0x00, // (...W...........
	0x07, 0x00, 0x00, 0x00, 0xdb, 0x01, 0x00, 0x00, 0xd7, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, // ............P...
	0x0b, 0x00, 0x00, 0x00, 0xdc, 0x01, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, 0xdb, 0x01, 0x00, 0x00, // ........W.......
	0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xde, 0x01, 0x00, 0x00, 0xd7, 0x01, 0x00, 0x00, // P...............
	0x57, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x6a, 0x00, 0x00, 0x00, 0xdf, 0x01, 0x00, 0x00, // W...P...j.......
	0x9a, 0x01, 0x00, 0x00, 0x9a, 0x01, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, // ................
	0xe0, 0x01, 0x00, 0x00, 0xdf, 0x01, 0x00, 0x00, 0xdc, 0x01, 0x00, 0x00, 0xde, 0x01, 0x00, 0x00, // ................
	0x81, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xe1, 0x01, 0x00, 0x00, 0x65, 0x01, 0x00, 0x00, // ............e...
	0xe0, 0x01, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, 0x40, 0x00, 0x00, 0x00, 0x53, 0x02, 0x00, 0x00, // ....V...@...S...
	0x2f, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, // /...,...X.......
	0x56, 0x02, 0x00, 0x00, 0x53, 0x02, 0x00, 0x00, 0xe1, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // V...S...........
	0x57, 0x00, 0x00, 0x00, 0x4f, 0x00, 0x08, 0x00, 0x1b, 0x00, 0x00, 0x00, 0xe4, 0x01, 0x00, 0x00, // W...O...........
	0x56, 0x02, 0x00, 0x00, 0x56, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // V...V...........
	0x02, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x2d, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, // ........-.......
	0x2c, 0x02, 0x00, 0x00, 0xff, 0x00, 0x01, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x2d, 0x02, 0x00, 0x00, // ,...........-...
	0xf5, 0x00, 0x07, 0x00, 0x1b, 0x00, 0x00, 0x00, 0xa3, 0x02, 0x00, 0x00, 0x2b, 0x02, 0x00, 0x00, // ............+...
	0xe5, 0x01, 0x00, 0x00, 0xe4, 0x01, 0x00, 0x00, 0x9e, 0x01, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, // ............Q...
	0x07, 0x00, 0x00, 0x00, 0x6a, 0x01, 0x00, 0x00, 0xa3, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ....j...........
	0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x6b, 0x01, 0x00, 0x00, 0xa3, 0x02, 0x00, 0x00, // Q.......k.......
	0x01, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x6c, 0x01, 0x00, 0x00, // ....Q.......l...
	0xa3, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x50, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, // ........P.......
	0x6d, 0x01, 0x00, 0x00, 0x6a, 0x01, 0x00, 0x00, 0x6b, 0x01, 0x00, 0x00, 0x6c, 0x01, 0x00, 0x00, // m...j...k...l...
	0x9c, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x03, 0x00, 0x37, 0x01, 0x00, 0x00, 0x6d, 0x01, 0x00, 0x00, // ....>...7...m...
	0xfd, 0x00, 0x01, 0x00, 0x38, 0x00, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00,                         // ....8..... .
};
static const bgfx::EmbeddedShader fs_pp_stereo_sbs = BGFX_EMBEDDED_SHADER(fs_pp_stereo_sbs);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Build of fragment shader from fs_pp_stereo.sc to fs_pp_stereo_tb with options: TB NOSTEREO
static const uint8_t fs_pp_stereo_tb_mtl[3162] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x14, 0x74, // FSH.o.><.......t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, // ex_stereo_fbSamp
	0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x74, 0x65, // ler...........te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x54, 0x65, 0x78, 0x74, 0x75, // x_stereo_fbTextu
	0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x74, 0x65, 0x78, // re...........tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, // _stereo_depthSam
	0x70, 0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x74, // pler...........t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x54, // ex_stereo_depthT
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, // exture..........
	0x13, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, // .Stereo_MS_ZPD_Y
	0x41, 0x78, 0x69, 0x73, 0x12, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x77, // Axis...........w
	0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x01, 0x10, 0x00, 0x01, 0x00, 0x00, // _h_height.......
	0x00, 0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, // ....tex_stereo_f
	0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x74, 0x65, 0x78, 0x5f, // b...........tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x10, 0x00, 0x00, 0x00, // stereo_depth....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5c, 0x0b, 0x00, 0x00, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, // ..........#inclu
	0x64, 0x65, 0x20, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x64, 0x6c, 0x69, 0x62, // de <metal_stdlib
	0x3e, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x73, 0x69, 0x6d, 0x64, // >.#include <simd
	0x2f, 0x73, 0x69, 0x6d, 0x64, 0x2e, 0x68, 0x3e, 0x0a, 0x0a, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, // /simd.h>..using 
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x3b, // namespace metal;
	0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, // ..struct _Global
	0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, // .{.    float4 St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, // ereo_MS_ZPD_YAxi
	0x73, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x77, 0x5f, // s;.    float4 w_
	0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, // h_height;.};..st
	0x72, 0x75, 0x63, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, // ruct xlatMtlMain
	0x5f, 0x6f, 0x75, 0x74, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // _out.{.    float
	0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, // 4 bgfx_FragData0
	0x20, 0x5b, 0x5b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, //  [[color(0)]];.}
	0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, // ;..struct xlatMt
	0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, // lMain_in.{.    f
	0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, // loat2 v_texcoord
	0x30, 0x20, 0x5b, 0x5b, 0x75, 0x73, 0x65, 0x72, 0x28, 0x6c, 0x6f, 0x63, 0x6e, 0x30, 0x29, 0x5d, // 0 [[user(locn0)]
	0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, // ];.};..fragment 
	0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x20, // xlatMtlMain_out 
	0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x28, 0x78, 0x6c, 0x61, 0x74, // xlatMtlMain(xlat
	0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x5b, 0x5b, // MtlMain_in in [[
	0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x5d, 0x5d, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, // stage_in]], cons
	0x74, 0x61, 0x6e, 0x74, 0x20, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x26, 0x20, 0x5f, 0x6d, // tant _Global& _m
	0x74, 0x6c, 0x5f, 0x75, 0x20, 0x5b, 0x5b, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x28, 0x30, 0x29, // tl_u [[buffer(0)
	0x5d, 0x5d, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, // ]], texture2d<fl
	0x6f, 0x61, 0x74, 0x3e, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // oat> tex_stereo_
	0x66, 0x62, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x30, 0x29, 0x5d, // fb [[texture(0)]
	0x5d, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, 0x6f, // ], texture2d<flo
	0x61, 0x74, 0x3e, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, // at> tex_stereo_d
	0x65, 0x70, 0x74, 0x68, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x31, // epth [[texture(1
	0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x74, 0x65, 0x78, // )]], sampler tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, // _stereo_fbSample
	0x72, 0x20, 0x5b, 0x5b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, // r [[sampler(0)]]
	0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // , sampler tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, // ereo_depthSample
	0x72, 0x20, 0x5b, 0x5b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x31, 0x29, 0x5d, 0x5d, // r [[sampler(1)]]
	0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, // ).{.    xlatMtlM
	0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x3d, 0x20, 0x7b, 0x7d, // ain_out out = {}
	0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x5f, 0x33, 0x35, // ;.    float2 _35
	0x37, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, // 7 = float2(in.v_
	0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2e, 0x78, 0x2c, 0x20, 0x69, 0x6e, 0x2e, // texcoord0.x, in.
	0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2e, 0x79, 0x20, 0x2a, 0x20, // v_texcoord0.y * 
	0x32, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, // 2.0);.    float3
	0x20, 0x5f, 0x36, 0x37, 0x35, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x64, 0x6f, 0x0a, 0x20, 0x20, //  _675;.    do.  
	0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x6f, 0x6f, 0x6c, //   {.        bool
	0x20, 0x5f, 0x34, 0x31, 0x30, 0x20, 0x3d, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, //  _410 = _mtl_u.S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, // tereo_MS_ZPD_YAx
	0x69, 0x73, 0x2e, 0x7a, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x3b, 0x0a, 0x20, 0x20, 0x20, // is.z != 0.0;.   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, //      if (in.v_te
	0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2e, 0x79, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x35, 0x29, // xcoord0.y < 0.5)
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // .        {.     
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x34, 0x37, //        float _47
	0x31, 0x20, 0x3d, 0x20, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, // 1 = fast::max(0.
	0x30, 0x2c, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, // 0, fma(_mtl_u.St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, // ereo_MS_ZPD_YAxi
	0x73, 0x2e, 0x78, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, // s.x, 1.0 - (1.0 
	0x2f, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, 0x6e, 0x28, // / fma(fast::min(
	0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // fast::min(tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, // ereo_depth.sampl
	0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, // e(tex_stereo_dep
	0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x5f, 0x33, 0x35, 0x37, // thSampler, (_357
	0x20, 0x2b, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, //  + select(float2
	0x28, 0x30, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, // (0.5 * _mtl_u.St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, // ereo_MS_ZPD_YAxi
	0x73, 0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // s.x, 0.0), float
	0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, // 2(0.0, 0.5 * _mt
	0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, // l_u.Stereo_MS_ZP
	0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, // D_YAxis.x), bool
	0x32, 0x28, 0x5f, 0x34, 0x31, 0x30, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, // 2(_410))), level
	0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // (0.0)).x, tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, // ereo_depth.sampl
	0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, // e(tex_stereo_dep
	0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x5f, 0x33, 0x35, 0x37, // thSampler, (_357
	0x20, 0x2b, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, //  + select(float2
	0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x30, 0x30, 0x30, 0x30, 0x30, 0x38, 0x35, 0x38, 0x33, 0x30, // (0.6660000085830
	0x36, 0x38, 0x38, 0x34, 0x37, 0x36, 0x35, 0x36, 0x32, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, // 6884765625 * _mt
	0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, // l_u.Stereo_MS_ZP
	0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, // D_YAxis.x, 0.0),
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, //  float2(0.0, 0.6
	0x36, 0x36, 0x30, 0x30, 0x30, 0x30, 0x30, 0x38, 0x35, 0x38, 0x33, 0x30, 0x36, 0x38, 0x38, 0x34, // 6600000858306884
	0x37, 0x36, 0x35, 0x36, 0x32, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, // 765625 * _mtl_u.
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, // Stereo_MS_ZPD_YA
	0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x34, // xis.x), bool2(_4
	0x31, 0x30, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, // 10))), level(0.0
	0x29, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // )).x), tex_stere
	0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, // o_depth.sample(t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, // ex_stereo_depthS
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x5f, 0x33, 0x35, 0x37, 0x20, 0x2b, 0x20, // ampler, (_357 + 
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x5f, 0x6d, // select(float2(_m
	0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, // tl_u.Stereo_MS_Z
	0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // PD_YAxis.x, 0.0)
	0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x5f, 0x6d, // , float2(0.0, _m
	0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, // tl_u.Stereo_MS_Z
	0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, // PD_YAxis.x), boo
	0x6c, 0x32, 0x28, 0x5f, 0x34, 0x31, 0x30, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, // l2(_410))), leve
	0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x28, 0x31, 0x2e, 0x30, // l(0.0)).x), (1.0
	0x20, 0x2f, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, //  / _mtl_u.Stereo
	0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, // _MS_ZPD_YAxis.y)
	0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x2c, 0x20, 0x5f, //  - 0.5, 0.5)), _
	0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, // mtl_u.w_h_height
	0x2e, 0x77, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // .w));.          
	0x20, 0x20, 0x5f, 0x36, 0x37, 0x35, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, //   _675 = tex_ste
	0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, // reo_fb.sample(te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, // x_stereo_fbSampl
	0x65, 0x72, 0x2c, 0x20, 0x28, 0x5f, 0x33, 0x35, 0x37, 0x20, 0x2b, 0x20, 0x73, 0x65, 0x6c, 0x65, // er, (_357 + sele
	0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x5f, 0x34, 0x37, 0x31, 0x2c, 0x20, // ct(float2(_471, 
	0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, // 0.0), float2(0.0
	0x2c, 0x20, 0x2d, 0x5f, 0x34, 0x37, 0x31, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, // , -_471), bool2(
	0x5f, 0x34, 0x31, 0x30, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, // _410))), level(0
	0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // .0)).xyz;.      
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, //       break;.   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x65, //      }.        e
	0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, // lse.        {.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, //           float 
	0x5f, 0x35, 0x34, 0x32, 0x20, 0x3d, 0x20, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x61, 0x78, // _542 = fast::max
	0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, // (0.0, fma(_mtl_u
	0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, // .Stereo_MS_ZPD_Y
	0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, // Axis.x, 1.0 - (1
	0x2e, 0x30, 0x20, 0x2f, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, // .0 / fma(fast::m
	0x69, 0x6e, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, // in(fast::min(tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, // _stereo_depth.sa
	0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // mple(tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x5f, // depthSampler, (_
	0x33, 0x35, 0x37, 0x20, 0x2d, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, // 357 - select(flo
	0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, // at2(0.5 * _mtl_u
	0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, // .Stereo_MS_ZPD_Y
	0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, // Axis.x, 0.0), fl
	0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x2a, 0x20, // oat2(0.0, 0.5 * 
	0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, // _mtl_u.Stereo_MS
	0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, // _ZPD_YAxis.x), b
	0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x34, 0x31, 0x30, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, // ool2(_410))), le
	0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x2c, 0x20, 0x74, 0x65, 0x78, // vel(0.0)).x, tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, // _stereo_depth.sa
	0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // mple(tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x5f, // depthSampler, (_
	0x33, 0x35, 0x37, 0x20, 0x2d, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, // 357 - select(flo
	0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x30, 0x30, 0x30, 0x30, 0x30, 0x38, 0x35, // at2(0.6660000085
	0x38, 0x33, 0x30, 0x36, 0x38, 0x38, 0x34, 0x37, 0x36, 0x35, 0x36, 0x32, 0x35, 0x20, 0x2a, 0x20, // 8306884765625 * 
	0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, // _mtl_u.Stereo_MS
	0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, // _ZPD_YAxis.x, 0.
	0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, // 0), float2(0.0, 
	0x30, 0x2e, 0x36, 0x36, 0x36, 0x30, 0x30, 0x30, 0x30, 0x30, 0x38, 0x35, 0x38, 0x33, 0x30, 0x36, // 0.66600000858306
	0x38, 0x38, 0x34, 0x37, 0x36, 0x35, 0x36, 0x32, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, // 884765625 * _mtl
	0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, // _u.Stereo_MS_ZPD
	0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, // _YAxis.x), bool2
	0x28, 0x5f, 0x34, 0x31, 0x30, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, // (_410))), level(
	0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // 0.0)).x), tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, // ereo_depth.sampl
	0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, // e(tex_stereo_dep
	0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x5f, 0x33, 0x35, 0x37, // thSampler, (_357
	0x20, 0x2d, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, //  - select(float2
	0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, // (_mtl_u.Stereo_M
	0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, 0x20, 0x30, // S_ZPD_YAxis.x, 0
	0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, // .0), float2(0.0,
	0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, //  _mtl_u.Stereo_M
	0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, // S_ZPD_YAxis.x), 
	0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x34, 0x31, 0x30, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, // bool2(_410))), l
	0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x28, // evel(0.0)).x), (
	0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, // 1.0 / _mtl_u.Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, // reo_MS_ZPD_YAxis
	0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, // .y) - 0.5, 0.5))
	0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, // , _mtl_u.w_h_hei
	0x67, 0x68, 0x74, 0x2e, 0x77, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ght.w));.       
	0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x36, 0x37, 0x35, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x5f, //      _675 = tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // stereo_fb.sample
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, // (tex_stereo_fbSa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x5f, 0x33, 0x35, 0x37, 0x20, 0x2d, 0x20, 0x73, // mpler, (_357 - s
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x5f, 0x35, 0x34, // elect(float2(_54
	0x32, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, // 2, 0.0), float2(
	0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x5f, 0x35, 0x34, 0x32, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, // 0.0, -_542), boo
	0x6c, 0x32, 0x28, 0x5f, 0x34, 0x31, 0x30, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, // l2(_410))), leve
	0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x20, 0x20, 0x20, // l(0.0)).xyz;.   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, //          break;.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //         }.      
	0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x20, 0x2f, 0x2f, 0x20, 0x75, 0x6e, 0x72, 0x65, //   break; // unre
	0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x61, 0x72, 0x6f, 0x75, // achable workarou
	0x6e, 0x64, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x28, 0x66, // nd.    } while(f
	0x61, 0x6c, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x6f, 0x75, 0x74, 0x2e, 0x62, // alse);.    out.b
	0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x20, 0x3d, 0x20, // gfx_FragData0 = 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x36, 0x37, 0x35, 0x2c, 0x20, 0x31, 0x2e, 0x30, // float4(_675, 1.0
	0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6f, 0x75, // );.    return ou
	0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x0a, 0x00, 0x00, 0x60, 0x00,                                     // t;.}....`.
};
static const uint8_t fs_pp_stereo_tb_essl[11048] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x2b, // FSH.o.><.......+
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x33, 0x32, 0x30, 0x20, 0x65, // ..#version 320 e
	0x73, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, // s.#define attrib
	0x75, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x76, // ute in.#define v
	0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, // arying in.precis
	0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3b, // ion highp float;
	0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, // .precision highp
	0x20, 0x69, 0x6e, 0x74, 0x3b, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x73, 0x68, //  int;.#define sh
	0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, // adow2D(_sampler,
	0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, //  _coord) texture
	0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, // (_sampler, _coor
	0x64, 0x29, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x73, 0x68, 0x61, 0x64, 0x6f, // d).#define shado
	0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // w2DProj(_sampler
	0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // , _coord) textur
	0x65, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, // eProj(_sampler, 
	0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x0a, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x65, 0x64, 0x69, // _coord).out medi
	0x75, 0x6d, 0x70, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, // ump vec4 bgfx_Fr
	0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, // agColor;.varying
	0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, //  vec2 v_texcoord
	0x30, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, // 0;.vec3 instMul(
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x20, // vec3 _vec, mat3 
	0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // _mtx) { return (
	0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, //  (_vec) * (_mtx)
	0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, //  ); }.vec3 instM
	0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, // ul(mat3 _mtx, ve
	0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, // c3 _vec) { retur
	0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, // n ( (_mtx) * (_v
	0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, // ec) ); }.vec4 in
	0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, // stMul(vec4 _vec,
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, //  mat4 _mtx) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, // turn ( (_vec) * 
	0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, // (_mtx) ); }.vec4
	0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, //  instMul(mat4 _m
	0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, // tx, vec4 _vec) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, //  return ( (_mtx)
	0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, //  * (_vec) ); }.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, 0x70, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, // loat rcp(float _
	0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x2f, // a) { return 1.0/
	0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, // _a; }.vec2 rcp(v
	0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // ec2 _a) { return
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, //  vec2(1.0)/_a; }
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, // .vec3 rcp(vec3 _
	0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, // a) { return vec3
	0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, // (1.0)/_a; }.vec4
	0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, //  rcp(vec4 _a) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x31, 0x2e, 0x30, 0x29, // return vec4(1.0)
	0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x65, 0x63, 0x32, // /_a; }.vec2 vec2
	0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, // _splat(float _x)
	0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, //  { return vec2(_
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, // x, _x); }.vec3 v
	0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // ec3_splat(float 
	0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, // _x) { return vec
	0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, // 3(_x, _x, _x); }
	0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, // .vec4 vec4_splat
	0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // (float _x) { ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, // urn vec4(_x, _x,
	0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, //  _x, _x); }.uvec
	0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, // 2 uvec2_splat(ui
	0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // nt _x) { return 
	0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, // uvec2(_x, _x); }
	0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, // .uvec3 uvec3_spl
	0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // at(uint _x) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, // turn uvec3(_x, _
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x34, 0x20, // x, _x); }.uvec4 
	0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, // uvec4_splat(uint
	0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, //  _x) { return uv
	0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, // ec4(_x, _x, _x, 
	0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, // _x); }.mat4 mtxF
	0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, // romRows(vec4 _0,
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, //  vec4 _1, vec4 _
	0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // 2, vec4 _3).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, // turn transpose(m
	0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, // at4(_0, _1, _2, 
	0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, // _3) );.}.mat4 mt
	0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, // xFromCols(vec4 _
	0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // 0, vec4 _1, vec4
	0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, //  _2, vec4 _3).{.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, // return mat4(_0, 
	0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, // _1, _2, _3);.}.m
	0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, // at3 mtxFromRows(
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, // vec3 _0, vec3 _1
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // , vec3 _2).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, // urn transpose(ma
	0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x20, 0x29, // t3(_0, _1, _2) )
	0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, // ;.}.mat3 mtxFrom
	0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, // Cols(vec3 _0, ve
	0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, // c3 _1, vec3 _2).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, // {.return mat3(_0
	0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, // , _1, _2);.}.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, // form vec4 u_view
	0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, // Rect;.uniform ve
	0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x54, 0x65, 0x78, 0x65, 0x6c, 0x3b, 0x0a, // c4 u_viewTexel;.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, // uniform mat4 u_v
	0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, // iew;.uniform mat
	0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, // 4 u_invView;.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x70, 0x72, 0x6f, 0x6a, // form mat4 u_proj
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, // ;.uniform mat4 u
	0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // _invProj;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, // m mat4 u_viewPro
	0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, // j;.uniform mat4 
	0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, // u_invViewProj;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, // niform mat4 u_mo
	0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // del[32];.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, //  mat4 u_modelVie
	0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, // w;.uniform mat4 
	0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, // u_modelViewProj;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, // .uniform vec4 u_
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x66, 0x34, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // alphaRef4;.float
	0x20, 0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, //  sqr(const float
	0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, //  v).{.return v*v
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, // ;.}.vec2 sqr(con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // st vec2 v).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // urn v*v;.}.vec3 
	0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, // sqr(const vec3 v
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, // ).{.return v*v;.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6d, 0x75, 0x6c, 0x5f, 0x77, 0x31, 0x28, 0x63, 0x6f, // }.vec3 mul_w1(co
	0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, // nst vec3 v, cons
	0x74, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, // t mat4 m).{.retu
	0x72, 0x6e, 0x20, 0x76, 0x2e, 0x78, 0x2a, 0x6d, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, // rn v.x*m[0].xyz 
	0x2b, 0x20, 0x28, 0x76, 0x2e, 0x79, 0x2a, 0x6d, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, // + (v.y*m[1].xyz 
	0x2b, 0x20, 0x28, 0x76, 0x2e, 0x7a, 0x2a, 0x6d, 0x5b, 0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, // + (v.z*m[2].xyz 
	0x2b, 0x20, 0x6d, 0x5b, 0x33, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // + m[3].xyz));.}.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, // float acos_appro
	0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // x_divPI(const fl
	0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // oat v).{.const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, // loat x = abs(v);
	0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, // .if(1. - x <= 0.
	0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, // 00006103515625).
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, // return (v >= 0.)
	0x20, 0x3f, 0x20, 0x30, 0x2e, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, //  ? 0. : 1.;.cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, // t float res = ((
	0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, // -0.155972/3.1415
	0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, // 9265358979323846
	0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, // 26433832795) * x
	0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, //  + (1.56467/3.14
	0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, // 1592653589793238
	0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, // 4626433832795) )
	0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, //  * sqrt(1. - x);
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, // .return (v >= 0.
	0x29, 0x20, 0x3f, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x72, // ) ? res : 1. - r
	0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x74, 0x61, 0x6e, // es;.}.float atan
	0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, // 2_approx_div2PI(
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x79, 0x2c, 0x20, 0x63, // const float y, c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x29, 0x0a, 0x7b, 0x0a, // onst float x).{.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, // const float abs_
	0x79, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x79, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // y = abs(y);.cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3d, 0x20, // t float abs_x = 
	0x61, 0x62, 0x73, 0x28, 0x78, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, // abs(x);.if(abs_x
	0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, //  <= 0.0000610351
	0x35, 0x36, 0x32, 0x35, 0x20, 0x26, 0x26, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3c, 0x3d, // 5625 && abs_y <=
	0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, //  0.0000610351562
	0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x30, 0x2e, 0x3b, 0x0a, 0x63, 0x6f, // 5).return 0.;.co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x61, // nst float r = (a
	0x62, 0x73, 0x5f, 0x78, 0x20, 0x2d, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x20, 0x2f, 0x20, // bs_x - abs_y) / 
	0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2b, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x3b, // (abs_x + abs_y);
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x6e, 0x67, // .const float ang
	0x6c, 0x65, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, // le = ((x < 0.) ?
	0x20, 0x28, 0x33, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x20, 0x3a, 0x20, 0x28, 0x31, 0x2e, 0x2f, 0x38, //  (3./8.) : (1./8
	0x2e, 0x29, 0x29, 0x0a, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x32, 0x31, 0x31, 0x38, 0x36, 0x38, 0x20, // .)).+ (0.211868 
	0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, // /(2.*3.141592653
	0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, // 5897932384626433
	0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x72, 0x20, 0x2a, 0x20, 0x72, 0x20, // 832795) * r * r 
	0x2d, 0x20, 0x30, 0x2e, 0x39, 0x38, 0x37, 0x33, 0x30, 0x35, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, // - 0.987305 /(2.*
	0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, // 3.14159265358979
	0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, // 3238462643383279
	0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, // 5)) * ((x < 0.) 
	0x3f, 0x20, 0x2d, 0x72, 0x20, 0x3a, 0x20, 0x72, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // ? -r : r);.retur
	0x6e, 0x20, 0x28, 0x79, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x61, 0x6e, // n (y < 0.) ? -an
	0x67, 0x6c, 0x65, 0x20, 0x3a, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // gle : angle;.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x73, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, // loat asin_approx
	0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, // _divPI(const flo
	0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // at v).{.const fl
	0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, // oat x = abs(v);.
	0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, // if(1. - x <= 0.0
	0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, // 0006103515625).r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, // eturn (v >= 0.) 
	0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x3b, 0x0a, 0x63, 0x6f, // ? 0.5 : -0.5;.co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, // nst float res = 
	0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, // ((-0.155972/3.14
	0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, // 1592653589793238
	0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, // 4626433832795) *
	0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, //  x + (1.56467/3.
	0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, // 1415926535897932
	0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, // 384626433832795)
	0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, //  ) * sqrt(1. - x
	0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, // );.return (v >= 
	0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x20, // 0.) ? 0.5 - res 
	0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, // : -0.5 + res;.}.
	0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x61, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x71, 0x75, 0x69, // vec2 ray_to_equi
	0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x75, 0x76, 0x28, 0x63, // rectangular_uv(c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x61, 0x79, 0x29, 0x0a, 0x7b, // onst vec3 ray).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x0a, 0x30, 0x2e, // .return vec2(.0.
	0x35, 0x20, 0x2b, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, // 5 + atan2_approx
	0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x79, 0x2c, 0x20, 0x72, // _div2PI(ray.y, r
	0x61, 0x79, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, // ay.x),.acos_appr
	0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x7a, 0x29, 0x29, // ox_divPI(ray.z))
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, // ;.}.float InvsRG
	0x42, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, // B(const float co
	0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // lor).{.if (color
	0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, 0x34, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, //  <= 0.04045).ret
	0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, // urn color * (1.0
	0x2f, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, // /12.92);.else.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, // turn pow(color *
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x28, //  (1.0/1.055) + (
	0x30, 0x2e, 0x30, 0x35, 0x35, 0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, // 0.055/1.055), 2.
	0x34, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x52, // 4);.}.float InvR
	0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, // ec709(const floa
	0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, // t color).{.if (c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x38, 0x31, 0x29, 0x0a, 0x72, // olor <= 0.081).r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, // eturn color * (1
	0x2e, 0x30, 0x2f, 0x34, 0x2e, 0x35, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, // .0/4.5);.else.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, // turn pow(color *
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, 0x20, 0x2b, 0x20, 0x28, //  (1.0/1.099) + (
	0x30, 0x2e, 0x30, 0x39, 0x39, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, 0x2c, 0x20, 0x31, 0x2e, // 0.099/1.099), 1.
	0x30, 0x2f, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // 0/0.45);.}.float
	0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, //  InvGamma(const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, // float color).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, // eturn InvsRGB(co
	0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, // lor);.}.vec3 Inv
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, // Gamma(const vec3
	0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, //  color).{.return
	0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, //  vec3(InvGamma(c
	0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, // olor.x),InvGamma
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, // (color.y),InvGam
	0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // ma(color.z));.}.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, // vec3 InvToneMap(
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // const vec3 color
	0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // ).{.const float 
	0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x30, 0x2e, 0x35, 0x2f, 0x30, 0x2e, // inv_2bh = 0.5/0.
	0x32, 0x35, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // 25;.const float 
	0x62, 0x68, 0x20, 0x3d, 0x20, 0x34, 0x2e, 0x30, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2d, 0x20, // bh = 4.0*0.25 - 
	0x32, 0x2e, 0x30, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6c, // 2.0;.return (col
	0x6f, 0x72, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2b, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, // or - 1.0 + sqrt(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2a, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x20, 0x62, // color*(color + b
	0x68, 0x29, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x2a, 0x69, 0x6e, 0x76, 0x5f, 0x32, // h) + 1.0))*inv_2
	0x62, 0x68, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x52, 0x47, 0x42, // bh;.}.float sRGB
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, // (const float f).
	0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, // {.float s;.if (f
	0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x33, 0x31, 0x33, 0x30, 0x38, 0x29, 0x0a, 0x73, //  <= 0.0031308).s
	0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, //  = 12.92 * f;.el
	0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x20, 0x2a, 0x20, 0x70, // se.s = 1.055 * p
	0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x34, 0x29, 0x20, 0x2d, // ow(f, 1.0/2.4) -
	0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, //  0.055;.return s
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, // ;.}.float Rec709
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, // (const float f).
	0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, // {.float s;.if (f
	0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x34, //  <= 0.018).s = 4
	0x2e, 0x35, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, // .5 * f;.else.s =
	0x20, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, //  1.099 * pow(f, 
	0x30, 0x2e, 0x34, 0x35, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x3b, 0x0a, 0x72, // 0.45) - 0.099;.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // eturn s;.}.float
	0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, //  FBGamma(const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // loat color).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, // turn sRGB(color)
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, // ;.}.vec2 FBGamma
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // (const vec2 colo
	0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, // r).{.return vec2
	0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, // (FBGamma(color.x
	0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, // ),FBGamma(color.
	0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, // y));.}.vec3 FBGa
	0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, // mma(const vec3 c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // olor).{.return v
	0x65, 0x63, 0x33, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // ec3(FBGamma(colo
	0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, // r.x),FBGamma(col
	0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, // or.y),FBGamma(co
	0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // lor.z));.}.vec3 
	0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x32, 0x32, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // FBGamma22(const 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // vec3 color).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, // turn vec3(pow(co
	0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, // lor.x, 1.0/2.2),
	0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, 0x30, // pow(color.y, 1.0
	0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, // /2.2),pow(color.
	0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // z, 1.0/2.2));.}.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, // float FBToneMap(
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x29, 0x0a, 0x7b, // const float l).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6c, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, // .return l * ((l*
	0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, // 0.25 + 1.0) / (l
	0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, //  + 1.0));.}.vec2
	0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, //  FBToneMap(const
	0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x63, //  vec2 color).{.c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, // onst float l = d
	0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, // ot(color,vec2(0.
	0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, // 176204+0.0108109
	0x2a, 0x30, 0x2e, 0x35, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2b, 0x30, 0x2e, // *0.5,0.812985+0.
	0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x3b, 0x0a, 0x72, // 0108109*0.5));.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, // eturn color * ((
	0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, // l*0.25 + 1.0) / 
	0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // (l + 1.0));.}.ve
	0x63, 0x33, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, // c3 FBToneMap(con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, // st vec3 color).{
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, // .const float l =
	0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x33, 0x28, //  dot(color,vec3(
	0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, // 0.176204,0.81298
	0x35, 0x2c, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x29, 0x29, 0x3b, 0x0a, 0x72, // 5,0.0108109));.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, // eturn color * ((
	0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, // l*0.25 + 1.0) / 
	0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // (l + 1.0));.}.ve
	0x63, 0x34, 0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x28, 0x63, 0x6f, 0x6e, 0x73, // c4 Additive(cons
	0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, // t vec4 cBase, co
	0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, // nst vec4 cBlend,
	0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, //  const float per
	0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, // cent).{.return c
	0x42, 0x61, 0x73, 0x65, 0x20, 0x2b, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, // Base + cBlend*pe
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, // rcent;.}.vec3 Sc
	0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, // reen (const vec3
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, //  cBase, const ve
	0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // c3 cBlend).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, // urn 1.0 - (1.0 -
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, //  cBase) * (1.0 -
	0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, //  cBlend);.}.vec4
	0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, //  Screen (const v
	0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, // ec4 cBase, const
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, //  vec4 cBlend).{.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, // return 1.0 - (1.
	0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, // 0 - cBase) * (1.
	0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // 0 - cBlend);.}.v
	0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x63, // ec3 ScreenHDR (c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, // onst vec3 cBase,
	0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, //  const vec3 cBle
	0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, // nd).{.return max
	0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, // (1.0 - (1.0 - cB
	0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, // ase) * (1.0 - cB
	0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x2c, 0x30, // lend), vec3(0.,0
	0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, // .,0.));.}.vec4 S
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // creenHDR (const 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, // vec4 cBase, cons
	0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, // t vec4 cBlend).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, // .return max(1.0 
	0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, // - (1.0 - cBase) 
	0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, // * (1.0 - cBlend)
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, // , vec4(0.,0.,0.,
	0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4d, 0x75, 0x6c, // 0.));.}.vec4 Mul
	0x74, 0x69, 0x70, 0x6c, 0x79, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, // tiply (const vec
	0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, // 4 cBase, const v
	0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, // ec4 cBlend, cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, // t float percent)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, // .{.return cBase 
	0x2a, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, // * cBlend*percent
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, // ;.}.vec4 Overlay
	0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, //  (const vec4 cBa
	0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, // se, const vec4 c
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, // Blend).{.vec4 cN
	0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, // ew = step(0.5, c
	0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x69, // Base);.cNew = mi
	0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, // x(cBase*cBlend*2
	0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, // .0, 1.0-2.0*(1.0
	0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, // -cBase)*(1.0-cBl
	0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, // end), cNew);.ret
	0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, // urn cNew;.}.vec4
	0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x48, 0x44, 0x52, 0x20, 0x28, 0x63, 0x6f, 0x6e, //  OverlayHDR (con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, // st vec4 cBase, c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, // onst vec4 cBlend
	0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, // ).{.vec4 cNew = 
	0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, // step(0.5, cBase)
	0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x6d, 0x69, 0x78, // ;.cNew = max(mix
	0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, // (cBase*cBlend*2.
	0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, // 0, 1.0-2.0*(1.0-
	0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, // cBase)*(1.0-cBle
	0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // nd), cNew), vec4
	0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, // (0.,0.,0.,0.));.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // return cNew;.}.v
	0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x73, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, // ec3 cos_hemisphe
	0x72, 0x65, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // re_sample(const 
	0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // vec2 t).{.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x68, 0x69, 0x20, 0x3d, 0x20, 0x74, 0x2e, 0x79, 0x20, // float phi = t.y 
	0x2a, 0x20, 0x28, 0x32, 0x2e, 0x30, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, // * (2.0*3.1415926
	0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, // 5358979323846264
	0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, // 33832795);.const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, //  float cosTheta 
	0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x74, 0x2e, 0x78, // = sqrt(1.0 - t.x
	0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, // );.const float s
	0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x74, // inTheta = sqrt(t
	0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x70, 0x2c, 0x63, 0x70, // .x);.float sp,cp
	0x3b, 0x0a, 0x73, 0x69, 0x6e, 0x63, 0x6f, 0x73, 0x28, 0x70, 0x68, 0x69, 0x2c, 0x73, 0x70, 0x2c, // ;.sincos(phi,sp,
	0x63, 0x70, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, // cp);.return vec3
	0x28, 0x63, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, // (cp * sinTheta, 
	0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x73, 0x70, 0x20, 0x2a, 0x20, 0x73, // cosTheta, sp * s
	0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, // inTheta);.}.vec3
	0x20, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, //  rotate_to_vecto
	0x72, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // r_upper(const ve
	0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // c3 vec, const ve
	0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x28, // c3 normal).{.if(
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x3e, 0x20, 0x2d, 0x30, 0x2e, 0x39, 0x39, // normal.y > -0.99
	0x39, 0x39, 0x39, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, // 999).{.const flo
	0x61, 0x74, 0x20, 0x68, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x28, 0x31, 0x2e, 0x30, 0x2b, // at h = 1.0/(1.0+
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, // normal.y);.const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x20, 0x3d, 0x20, 0x68, 0x2a, 0x6e, 0x6f, //  float hz = h*no
	0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // rmal.z;.const fl
	0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x3d, 0x20, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, // oat hzx = hz*nor
	0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, // mal.x;.return ve
	0x63, 0x33, 0x28, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, // c3(.vec.x * (nor
	0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, // mal.y+hz*normal.
	0x7a, 0x29, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, // z) + vec.y * nor
	0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, // mal.x - vec.z * 
	0x68, 0x7a, 0x78, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, // hzx,.vec.y * nor
	0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, // mal.y - vec.x * 
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, // normal.x - vec.z
	0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x2c, 0x0a, 0x76, 0x65, 0x63, //  * normal.z,.vec
	0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x20, 0x2d, 0x20, // .y * normal.z - 
	0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x2b, 0x20, 0x76, 0x65, // vec.x * hzx + ve
	0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, // c.z * (normal.y+
	0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, // h*normal.x*norma
	0x6c, 0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x72, 0x65, // l.x));.}.else re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x2d, 0x76, 0x65, 0x63, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, // turn -vec;.}.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // form vec4 Stereo
	0x5f, 0x53, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x0a, 0x75, 0x6e, 0x69, // _Saturation;.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // form vec4 Stereo
	0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x3b, 0x0a, 0x75, // _MS_ZPD_YAxis;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, // niform sampler2D
	0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x3b, 0x0a, //  tex_stereo_fb;.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, // uniform sampler2
	0x44, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, // D tex_stereo_dep
	0x74, 0x68, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, // th;.uniform vec4
	0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, 0x76, 0x65, 0x63, //  w_h_height;.vec
	0x33, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, // 3 gatherEyeColor
	0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x69, 0x73, // (vec2 u, bool is
	0x4c, 0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x62, 0x6f, // Left).{.const bo
	0x6f, 0x6c, 0x20, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, // ol yaxis = (Ster
	0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, // eo_MS_ZPD_YAxis.
	0x7a, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // z != 0.);.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // float MaxSeparat
	0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, // ion = (Stereo_MS
	0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x69, // _ZPD_YAxis.x);.i
	0x66, 0x20, 0x28, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, // f (isLeft).{.con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, // st float lminDep
	0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, // th = min(min(tex
	0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // tureLod(tex_ster
	0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, // eo_depth, u + (y
	0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, // axis ? vec2(0.0,
	0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, //  0.500 * MaxSepa
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, // ration) : vec2(0
	0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, // .500 * MaxSepara
	0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, // tion, 0.0)), 0.0
	0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, // ).x,.textureLod(
	0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, // tex_stereo_depth
	0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, // , u + (yaxis ? v
	0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, // ec2(0.0, 0.666 *
	0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, //  MaxSeparation) 
	0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, // : vec2(0.666 * M
	0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, // axSeparation, 0.
	0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, // 0)), 0.0).x),.te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, // xtureLod(tex_ste
	0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, // reo_depth, u + (
	0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, // yaxis ? vec2(0.0
	0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, // , MaxSeparation)
	0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, //  : vec2( MaxSepa
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, // ration, 0.0)), 0
	0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x70, // .0).x);.float lp
	0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, // arallax = max(0.
	0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, // 0, w_h_height.w 
	0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, // + MaxSeparation 
	0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, // * (1.0 - 1.0 / (
	0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, // 0.5 + lminDepth 
	0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // * (1.0 / (Stereo
	0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, // _MS_ZPD_YAxis.y)
	0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, //  - 0.5))));.retu
	0x72, 0x6e, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, // rn textureLod(te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2b, // x_stereo_fb, u +
	0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, //  (yaxis ? vec2(0
	0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, // .0, -lparallax) 
	0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, // : vec2(lparallax
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, // , 0.0)), 0.0).xy
	0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // z;.}.else.{.cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, // t float rminDept
	0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, // h = min(min(text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // ureLod(tex_stere
	0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, // o_depth, u - (ya
	0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, // xis ? vec2(0.0, 
	0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, // 0.500 * MaxSepar
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, // ation) : vec2(0.
	0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // 500 * MaxSeparat
	0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // ion, 0.0)), 0.0)
	0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, // .x,.textureLod(t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, // ex_stereo_depth,
	0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, //  u - (yaxis ? ve
	0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, // c2(0.0, 0.666 * 
	0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, // MaxSeparation) :
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, //  vec2(0.666 * Ma
	0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, // xSeparation, 0.0
	0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, // )), 0.0).x),.tex
	0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // tureLod(tex_ster
	0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, // eo_depth, u - (y
	0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, // axis ? vec2(0.0,
	0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, //  MaxSeparation) 
	0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, // : vec2( MaxSepar
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, // ation, 0.0)), 0.
	0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x70, 0x61, // 0).x);.float rpa
	0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, // rallax = max(0.0
	0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, // , w_h_height.w +
	0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, //  MaxSeparation *
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, //  (1.0 - 1.0 / (0
	0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, // .5 + rminDepth *
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, //  (1.0 / (Stereo_
	0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, // MS_ZPD_YAxis.y) 
	0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // - 0.5))));.retur
	0x6e, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, // n textureLod(tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, // _stereo_fb, u - 
	0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, // (yaxis ? vec2(0.
	0x30, 0x2c, 0x20, 0x2d, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, // 0, -rparallax) :
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, //  vec2(rparallax,
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, //  0.0)), 0.0).xyz
	0x3b, 0x0a, 0x7d, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, // ;.}.}.void gathe
	0x72, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, // rLeftRightColors
	0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, // (vec2 u, out vec
	0x33, 0x20, 0x6c, 0x63, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, // 3 lcol, out vec3
	0x20, 0x72, 0x63, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x62, //  rcol).{.const b
	0x6f, 0x6f, 0x6c, 0x20, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, // ool yaxis = (Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, // reo_MS_ZPD_YAxis
	0x2e, 0x7a, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, // .z != 0.);.const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, //  float MaxSepara
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, // tion = (Stereo_M
	0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x3b, 0x0a, // S_ZPD_YAxis.x);.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x6d, 0x69, 0x6e, // const float lmin
	0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, // Depth = min(min(
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, // textureLod(tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, // tereo_depth, u +
	0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, //  (yaxis ? vec2(0
	0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, // .0, 0.500 * MaxS
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, // eparation) : vec
	0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // 2(0.500 * MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, // aration, 0.0)), 
	0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, // 0.0).x,.textureL
	0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, // od(tex_stereo_de
	0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, // pth, u + (yaxis 
	0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, // ? vec2(0.0, 0.66
	0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, // 6 * MaxSeparatio
	0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, // n) : vec2(0.666 
	0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, // * MaxSeparation,
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, //  0.0)), 0.0).x),
	0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, // .textureLod(tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, // stereo_depth, u 
	0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // + (yaxis ? vec2(
	0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // 0.0, MaxSeparati
	0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, // on) : vec2( MaxS
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, // eparation, 0.0))
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // , 0.0).x);.float
	0x20, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, //  lparallax = max
	0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, // (0.0, w_h_height
	0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // .w + MaxSeparati
	0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, // on * (1.0 - 1.0 
	0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, // / (0.5 + lminDep
	0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, // th * (1.0 / (Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, // reo_MS_ZPD_YAxis
	0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x6c, // .y) - 0.5))));.l
	0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, // col = textureLod
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, // (tex_stereo_fb, 
	0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, // u + (yaxis ? vec
	0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, // 2(0.0, -lparalla
	0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, // x) : vec2(lparal
	0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // lax, 0.0)), 0.0)
	0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, // .xyz;.const floa
	0x74, 0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, // t rminDepth = mi
	0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, // n(min(textureLod
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, // (tex_stereo_dept
	0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, // h, u - (yaxis ? 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, // vec2(0.0, 0.500 
	0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, // * MaxSeparation)
	0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, //  : vec2(0.500 * 
	0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, // MaxSeparation, 0
	0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, // .0)), 0.0).x,.te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, // xtureLod(tex_ste
	0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, // reo_depth, u - (
	0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, // yaxis ? vec2(0.0
	0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // , 0.666 * MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // aration) : vec2(
	0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, // 0.666 * MaxSepar
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, // ation, 0.0)), 0.
	0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, // 0).x),.textureLo
	0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, // d(tex_stereo_dep
	0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, // th, u - (yaxis ?
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, //  vec2(0.0, MaxSe
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, // paration) : vec2
	0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, // ( MaxSeparation,
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, //  0.0)), 0.0).x);
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, // .float rparallax
	0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, //  = max(0.0, w_h_
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, // height.w + MaxSe
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, // paration * (1.0 
	0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, // - 1.0 / (0.5 + r
	0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, // minDepth * (1.0 
	0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, // / (Stereo_MS_ZPD
	0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, // _YAxis.y) - 0.5)
	0x29, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, // )));.rcol = text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // ureLod(tex_stere
	0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, // o_fb, u - (yaxis
	0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x72, 0x70, //  ? vec2(0.0, -rp
	0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // arallax) : vec2(
	0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, // rparallax, 0.0))
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, // , 0.0).xyz;.}.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // iform mat4 Stere
	0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, // o_LeftMat;.unifo
	0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, // rm mat4 Stereo_R
	0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // ightMat;.uniform
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, //  vec4 Stereo_Lef
	0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, // tLuminance_Gamma
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, // ;.uniform vec4 S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, // tereo_RightLumin
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x3b, 0x0a, 0x76, // ance_DynDesat;.v
	0x6f, 0x69, 0x64, 0x20, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x65, 0x73, 0x61, 0x74, // oid DynamicDesat
	0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, // Anaglyph(const v
	0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // ec3 lCol, const 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, // vec3 rCol, out v
	0x65, 0x63, 0x33, 0x20, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, // ec3 lDesatCol, o
	0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, // ut vec3 rDesatCo
	0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // l).{.const float
	0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, //  left2LeftLum = 
	0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // dot(lCol, Stereo
	0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, // _LeftLuminance_G
	0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, // amma.xyz);.const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, //  float left2Righ
	0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, // tLum = dot(lCol,
	0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, //  Stereo_RightLum
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, // inance_DynDesat.
	0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, // xyz);.const floa
	0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, // t right2LeftLum 
	0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, // = dot(rCol, Ster
	0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, // eo_LeftLuminance
	0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, // _Gamma.xyz);.con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, // st float right2R
	0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, // ightLum = dot(rC
	0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, // ol, Stereo_Right
	0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, // Luminance_DynDes
	0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // at.xyz);.const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x6c, // loat leftLum = l
	0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x6c, 0x65, // eft2LeftLum + le
	0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, // ft2RightLum;.con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // st float rightLu
	0x6d, 0x20, 0x3d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, // m = right2LeftLu
	0x6d, 0x20, 0x2b, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, // m + right2RightL
	0x75, 0x6d, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // um;.const float 
	0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, // leftDesat = Ster
	0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, // eo_RightLuminanc
	0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, // e_DynDesat.w * a
	0x62, 0x73, 0x28, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // bs((left2LeftLum
	0x20, 0x2d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, //  - left2RightLum
	0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, // ) / (leftLum + 0
	0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // .0001));.const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x20, // loat rightDesat 
	0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // = Stereo_RightLu
	0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, // minance_DynDesat
	0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, // .w * abs((right2
	0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, // LeftLum - right2
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x72, 0x69, 0x67, // RightLum) / (rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, 0x29, // htLum + 0.0001))
	0x3b, 0x0a, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, // ;.lDesatCol = mi
	0x78, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, // x(lCol, vec3_spl
	0x61, 0x74, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x66, // at(leftLum), lef
	0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x72, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, // tDesat);.rDesatC
	0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, // ol = mix(rCol, v
	0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, // ec3_splat(rightL
	0x75, 0x6d, 0x29, 0x2c, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, // um), rightDesat)
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x41, // ;.}.vec3 LinearA
	0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // naglyph(const ve
	0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, // c3 lCol, const v
	0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // ec3 rCol).{.cons
	0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x28, // t vec3 color = (
	0x28, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, // ( (vec4(lCol, 1.
	0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, // )) * (Stereo_Lef
	0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x20, 0x28, 0x76, 0x65, 0x63, // tMat) ) + ( (vec
	0x34, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, // 4(rCol, 1.)) * (
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x29, // Stereo_RightMat)
	0x20, 0x29, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, //  )).rgb;.return 
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // color;.}.uniform
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, //  vec4 Stereo_Deg
	0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, // hostGamma;.unifo
	0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, // rm mat4 Stereo_D
	0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3b, 0x0a, 0x76, 0x65, // eghostFilter;.ve
	0x63, 0x33, 0x20, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, // c3 DeghostAnagly
	0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, // ph(const vec3 lC
	0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, // ol, const vec3 r
	0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, // Col).{.const vec
	0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, // 3 color = Linear
	0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, // Anaglyph(lCol, r
	0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, // Col);.return ( (
	0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // pow(color, Stere
	0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x72, // o_DeghostGamma.r
	0x67, 0x62, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x53, 0x74, 0x65, // gb)) * (mat3(Ste
	0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, // reo_DeghostFilte
	0x72, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // r[0].xyz, Stereo
	0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x31, // _DeghostFilter[1
	0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, // ].xyz, Stereo_De
	0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x32, 0x5d, 0x2e, 0x78, // ghostFilter[2].x
	0x79, 0x7a, 0x29, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x6d, // yz)) );.}.void m
	0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, // ain().{.bgfx_Fra
	0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x67, 0x61, // gColor = vec4(ga
	0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x66, 0x6c, 0x6f, // therEyeColor(flo
	0x61, 0x74, 0x32, 0x28, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2e, // at2(v_texcoord0.
	0x78, 0x2c, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2e, 0x79, // x, v_texcoord0.y
	0x20, 0x2a, 0x20, 0x32, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, //  * 2.0), v_texco
	0x6f, 0x72, 0x64, 0x30, 0x2e, 0x79, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x2c, 0x20, 0x31, // ord0.y < 0.5), 1
	0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x00,                                                 // .0);.}..
};
static const uint8_t fs_pp_stereo_tb_glsl[11418] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87, 0x2c, // FSH.o.><.......,
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x34, 0x34, 0x30, 0x0a, 0x6f, // ..#version 440.o
	0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, // ut vec4 bgfx_Fra
	0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, // gColor;.#define 
	0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x62, 0x67, 0x66, // gl_FragColor bgf
	0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x0a, 0x23, 0x64, 0x65, 0x66, // x_FragColor.#def
	0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x20, 0x20, 0x20, // ine texture2D   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x0a, 0x23, //        texture.#
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, // define texture2D
	0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // Lod       textur
	0x65, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, // eLod.#define tex
	0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ture2DGrad      
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, // textureGrad.#def
	0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, // ine texture2DPro
	0x6a, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, // jLod   texturePr
	0x6f, 0x6a, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, // ojLod.#define te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, 0x20, // xture2DProjGrad 
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, //  textureProjGrad
	0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // .#define texture
	0x43, 0x75, 0x62, 0x65, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, // CubeLod     text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, // ureLod.#define t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, // extureCubeGrad  
	0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, //   textureGrad.#d
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x33, 0x44, 0x20, // efine texture3D 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, //          texture
	0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // .#define texture
	0x32, 0x44, 0x4c, 0x6f, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x20, 0x74, 0x65, 0x78, 0x74, // 2DLodOffset text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x0a, 0x23, 0x64, 0x65, // ureLodOffset.#de
	0x66, 0x69, 0x6e, 0x65, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x69, // fine attribute i
	0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, // n.#define varyin
	0x67, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x62, 0x67, 0x66, // g in.#define bgf
	0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, // xShadow2D(_sampl
	0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, // er, _coord)     
	0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, // vec4_splat(textu
	0x72, 0x65, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, // re(_sampler, _co
	0x6f, 0x72, 0x64, 0x29, 0x20, 0x29, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x62, // ord) ).#define b
	0x67, 0x66, 0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x28, // gfxShadow2DProj(
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, // _sampler, _coord
	0x29, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, // ) vec4_splat(tex
	0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // tureProj(_sample
	0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x29, 0x0a, 0x76, 0x61, 0x72, // r, _coord) ).var
	0x79, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, // ying vec2 v_texc
	0x6f, 0x6f, 0x72, 0x64, 0x30, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, // oord0;.vec3 inst
	0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, // Mul(vec3 _vec, m
	0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // at3 _mtx) { retu
	0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, // rn ( (_vec) * (_
	0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, // mtx) ); }.vec3 i
	0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, // nstMul(mat3 _mtx
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, // , vec3 _vec) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, // eturn ( (_mtx) *
	0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, //  (_vec) ); }.vec
	0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, // 4 instMul(vec4 _
	0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, // vec, mat4 _mtx) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, // { return ( (_vec
	0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, // ) * (_mtx) ); }.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, // vec4 instMul(mat
	0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, // 4 _mtx, vec4 _ve
	0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, // c) { return ( (_
	0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, // mtx) * (_vec) );
	0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, 0x70, 0x28, 0x66, 0x6c, 0x6f, //  }.float rcp(flo
	0x61, 0x74, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // at _a) { return 
	0x31, 0x2e, 0x30, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, // 1.0/_a; }.vec2 r
	0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // cp(vec2 _a) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, // turn vec2(1.0)/_
	0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, // a; }.vec3 rcp(ve
	0x63, 0x33, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // c3 _a) { return 
	0x76, 0x65, 0x63, 0x33, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, // vec3(1.0)/_a; }.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x61, // vec4 rcp(vec4 _a
	0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, // ) { return vec4(
	0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, // 1.0)/_a; }.vec2 
	0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, // vec2_splat(float
	0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, //  _x) { return ve
	0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, // c2(_x, _x); }.ve
	0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, // c3 vec3_splat(fl
	0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // oat _x) { return
	0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, //  vec3(_x, _x, _x
	0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, // ); }.vec4 vec4_s
	0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, // plat(float _x) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, //  return vec4(_x,
	0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, //  _x, _x, _x); }.
	0x75, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, // uvec2 uvec2_spla
	0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // t(uint _x) { ret
	0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, // urn uvec2(_x, _x
	0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, // ); }.uvec3 uvec3
	0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, // _splat(uint _x) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, // { return uvec3(_
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, // x, _x, _x); }.uv
	0x65, 0x63, 0x34, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, // ec4 uvec4_splat(
	0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, // uint _x) { retur
	0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, // n uvec4(_x, _x, 
	0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, // _x, _x); }.mat4 
	0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, // mtxFromRows(vec4
	0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, //  _0, vec4 _1, ve
	0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, // c4 _2, vec4 _3).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, // {.return transpo
	0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, // se(mat4(_0, _1, 
	0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, // _2, _3) );.}.mat
	0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, // 4 mtxFromCols(ve
	0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, // c4 _0, vec4 _1, 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, // vec4 _2, vec4 _3
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x28, // ).{.return mat4(
	0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x3b, // _0, _1, _2, _3);
	0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, // .}.mat3 mtxFromR
	0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, // ows(vec3 _0, vec
	0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, // 3 _1, vec3 _2).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, // .return transpos
	0x65, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, // e(mat3(_0, _1, _
	0x32, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, // 2) );.}.mat3 mtx
	0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, // FromCols(vec3 _0
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // , vec3 _1, vec3 
	0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, // _2).{.return mat
	0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x3b, 0x0a, 0x7d, // 3(_0, _1, _2);.}
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, // .uniform vec4 u_
	0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // viewRect;.unifor
	0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x54, 0x65, 0x78, // m vec4 u_viewTex
	0x65, 0x6c, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, // el;.uniform mat4
	0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, //  u_view;.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x3b, //  mat4 u_invView;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, // .uniform mat4 u_
	0x70, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, // proj;.uniform ma
	0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, // t4 u_invProj;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, // iform mat4 u_vie
	0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, // wProj;.uniform m
	0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, // at4 u_invViewPro
	0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, // j;.uniform mat4 
	0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, 0x3b, 0x0a, 0x75, 0x6e, 0x69, // u_model[32];.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, // form mat4 u_mode
	0x6c, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, // lView;.uniform m
	0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x50, // at4 u_modelViewP
	0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, // roj;.uniform vec
	0x34, 0x20, 0x75, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x66, 0x34, 0x3b, 0x0a, 0x66, // 4 u_alphaRef4;.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // loat sqr(const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // loat v).{.return
	0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x73, 0x71, 0x72, //  v*v;.}.vec2 sqr
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x29, 0x0a, 0x7b, // (const vec2 v).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // .return v*v;.}.v
	0x65, 0x63, 0x33, 0x20, 0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // ec3 sqr(const ve
	0x63, 0x33, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // c3 v).{.return v
	0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6d, 0x75, 0x6c, 0x5f, 0x77, // *v;.}.vec3 mul_w
	0x31, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x2c, 0x20, // 1(const vec3 v, 
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x29, 0x0a, 0x7b, 0x0a, // const mat4 m).{.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2e, 0x78, 0x2a, 0x6d, 0x5b, 0x30, 0x5d, 0x2e, // return v.x*m[0].
	0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x79, 0x2a, 0x6d, 0x5b, 0x31, 0x5d, 0x2e, // xyz + (v.y*m[1].
	0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x7a, 0x2a, 0x6d, 0x5b, 0x32, 0x5d, 0x2e, // xyz + (v.z*m[2].
	0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x6d, 0x5b, 0x33, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, // xyz + m[3].xyz))
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, // ;.}.float acos_a
	0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x63, 0x6f, 0x6e, 0x73, // pprox_divPI(cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, // t float v).{.con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, // st float x = abs
	0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, // (v);.if(1. - x <
	0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, // = 0.000061035156
	0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, // 25).return (v >=
	0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x3b, 0x0a, //  0.) ? 0. : 1.;.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, 0x20, // const float res 
	0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, // = ((-0.155972/3.
	0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, // 1415926535897932
	0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, // 384626433832795)
	0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, //  * x + (1.56467/
	0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, // 3.14159265358979
	0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, // 3238462643383279
	0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, // 5) ) * sqrt(1. -
	0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, //  x);.return (v >
	0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x31, 0x2e, // = 0.) ? res : 1.
	0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, //  - res;.}.float 
	0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, // atan2_approx_div
	0x32, 0x50, 0x49, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // 2PI(const float 
	0x79, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, // y, const float x
	0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // ).{.const float 
	0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x79, 0x29, 0x3b, 0x0a, // abs_y = abs(y);.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, // const float abs_
	0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x78, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x61, // x = abs(x);.if(a
	0x62, 0x73, 0x5f, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, // bs_x <= 0.000061
	0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x20, 0x26, 0x26, 0x20, 0x61, 0x62, 0x73, 0x5f, // 03515625 && abs_
	0x79, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, // y <= 0.000061035
	0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x30, 0x2e, // 15625).return 0.
	0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x20, // ;.const float r 
	0x3d, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2d, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, // = (abs_x - abs_y
	0x29, 0x20, 0x2f, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2b, 0x20, 0x61, 0x62, 0x73, // ) / (abs_x + abs
	0x5f, 0x79, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // _y);.const float
	0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, //  angle = ((x < 0
	0x2e, 0x29, 0x20, 0x3f, 0x20, 0x28, 0x33, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x20, 0x3a, 0x20, 0x28, // .) ? (3./8.) : (
	0x31, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x29, 0x0a, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x32, 0x31, 0x31, // 1./8.)).+ (0.211
	0x38, 0x36, 0x38, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, // 868 /(2.*3.14159
	0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, // 2653589793238462
	0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x72, 0x20, // 6433832795) * r 
	0x2a, 0x20, 0x72, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x39, 0x38, 0x37, 0x33, 0x30, 0x35, 0x20, 0x2f, // * r - 0.987305 /
	0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, // (2.*3.1415926535
	0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, // 8979323846264338
	0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, // 32795)) * ((x < 
	0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x72, 0x20, 0x3a, 0x20, 0x72, 0x29, 0x3b, 0x0a, 0x72, // 0.) ? -r : r);.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x79, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, // eturn (y < 0.) ?
	0x20, 0x2d, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3a, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x3b, //  -angle : angle;
	0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x73, 0x69, 0x6e, 0x5f, 0x61, 0x70, // .}.float asin_ap
	0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, // prox_divPI(const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, //  float v).{.cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, // t float x = abs(
	0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, // v);.if(1. - x <=
	0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, //  0.0000610351562
	0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, // 5).return (v >= 
	0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, // 0.) ? 0.5 : -0.5
	0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, // ;.const float re
	0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, // s = ((-0.155972/
	0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, // 3.14159265358979
	0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, // 3238462643383279
	0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, // 5) * x + (1.5646
	0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, // 7/3.141592653589
	0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, // 7932384626433832
	0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, // 795) ) * sqrt(1.
	0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, //  - x);.return (v
	0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x2d, 0x20, //  >= 0.) ? 0.5 - 
	0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x65, 0x73, // res : -0.5 + res
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x61, 0x79, 0x5f, 0x74, 0x6f, 0x5f, // ;.}.vec2 ray_to_
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, // equirectangular_
	0x75, 0x76, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x61, // uv(const vec3 ra
	0x79, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, // y).{.return vec2
	0x28, 0x0a, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, // (.0.5 + atan2_ap
	0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, // prox_div2PI(ray.
	0x79, 0x2c, 0x20, 0x72, 0x61, 0x79, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x61, 0x63, 0x6f, 0x73, 0x5f, // y, ray.x),.acos_
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, // approx_divPI(ray
	0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, // .z));.}.float In
	0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, // vsRGB(const floa
	0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, // t color).{.if (c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, 0x34, 0x35, 0x29, // olor <= 0.04045)
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, // .return color * 
	0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, // (1.0/12.92);.els
	0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, // e.return pow(col
	0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, // or * (1.0/1.055)
	0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, //  + (0.055/1.055)
	0x2c, 0x20, 0x32, 0x2e, 0x34, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // , 2.4);.}.float 
	0x49, 0x6e, 0x76, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // InvRec709(const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, // float color).{.i
	0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x38, // f (color <= 0.08
	0x31, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, // 1).return color 
	0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x34, 0x2e, 0x35, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, // * (1.0/4.5);.els
	0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, // e.return pow(col
	0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, // or * (1.0/1.099)
	0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, //  + (0.099/1.099)
	0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // , 1.0/0.45);.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, // loat InvGamma(co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, // nst float color)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, // .{.return InvsRG
	0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, // B(color);.}.vec3
	0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, //  InvGamma(const 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // vec3 color).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, // turn vec3(InvGam
	0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, // ma(color.x),InvG
	0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x49, 0x6e, // amma(color.y),In
	0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, // vGamma(color.z))
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x54, 0x6f, 0x6e, 0x65, // ;.}.vec3 InvTone
	0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, // Map(const vec3 c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // olor).{.const fl
	0x6f, 0x61, 0x74, 0x20, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x30, 0x2e, // oat inv_2bh = 0.
	0x35, 0x2f, 0x30, 0x2e, 0x32, 0x35, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // 5/0.25;.const fl
	0x6f, 0x61, 0x74, 0x20, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x34, 0x2e, 0x30, 0x2a, 0x30, 0x2e, 0x32, // oat bh = 4.0*0.2
	0x35, 0x20, 0x2d, 0x20, 0x32, 0x2e, 0x30, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // 5 - 2.0;.return 
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2b, 0x20, 0x73, // (color - 1.0 + s
	0x71, 0x72, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2a, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // qrt(color*(color
	0x20, 0x2b, 0x20, 0x62, 0x68, 0x29, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x2a, 0x69, //  + bh) + 1.0))*i
	0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // nv_2bh;.}.float 
	0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // sRGB(const float
	0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, //  f).{.float s;.i
	0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x33, 0x31, 0x33, 0x30, // f (f <= 0.003130
	0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x20, 0x2a, 0x20, 0x66, // 8).s = 12.92 * f
	0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x35, 0x35, // ;.else.s = 1.055
	0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, //  * pow(f, 1.0/2.
	0x34, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // 4) - 0.055;.retu
	0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x52, 0x65, // rn s;.}.float Re
	0x63, 0x37, 0x30, 0x39, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // c709(const float
	0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, //  f).{.float s;.i
	0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, 0x29, 0x0a, 0x73, // f (f <= 0.018).s
	0x20, 0x3d, 0x20, 0x34, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, //  = 4.5 * f;.else
	0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, // .s = 1.099 * pow
	0x28, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x39, // (f, 0.45) - 0.09
	0x39, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // 9;.return s;.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, // loat FBGamma(con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, // st float color).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, // {.return sRGB(co
	0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x47, // lor);.}.vec2 FBG
	0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, // amma(const vec2 
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // color).{.return 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, // vec2(FBGamma(col
	0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, // or.x),FBGamma(co
	0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // lor.y));.}.vec3 
	0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // FBGamma(const ve
	0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, // c3 color).{.retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, // rn vec3(FBGamma(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, // color.x),FBGamma
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, // (color.y),FBGamm
	0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // a(color.z));.}.v
	0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x32, 0x32, 0x28, 0x63, 0x6f, // ec3 FBGamma22(co
	0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, // nst vec3 color).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x70, 0x6f, // {.return vec3(po
	0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, // w(color.x, 1.0/2
	0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x2c, // .2),pow(color.y,
	0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, //  1.0/2.2),pow(co
	0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x29, // lor.z, 1.0/2.2))
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, // ;.}.float FBTone
	0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // Map(const float 
	0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6c, 0x20, 0x2a, 0x20, // l).{.return l * 
	0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, // ((l*0.25 + 1.0) 
	0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // / (l + 1.0));.}.
	0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x63, // vec2 FBToneMap(c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, // onst vec2 color)
	0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, // .{.const float l
	0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, //  = dot(color,vec
	0x32, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, // 2(0.176204+0.010
	0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, // 8109*0.5,0.81298
	0x35, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x29, // 5+0.0108109*0.5)
	0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, // );.return color 
	0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, // * ((l*0.25 + 1.0
	0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, // ) / (l + 1.0));.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, // }.vec3 FBToneMap
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // (const vec3 colo
	0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // r).{.const float
	0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, //  l = dot(color,v
	0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2c, 0x30, 0x2e, 0x38, // ec3(0.176204,0.8
	0x31, 0x32, 0x39, 0x38, 0x35, 0x2c, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x29, // 12985,0.0108109)
	0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, // );.return color 
	0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, // * ((l*0.25 + 1.0
	0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, // ) / (l + 1.0));.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x28, // }.vec4 Additive(
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, // const vec4 cBase
	0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, // , const vec4 cBl
	0x65, 0x6e, 0x64, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // end, const float
	0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, //  percent).{.retu
	0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2b, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // rn cBase + cBlen
	0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // d*percent;.}.vec
	0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // 3 Screen (const 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, // vec3 cBase, cons
	0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, // t vec3 cBlend).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, // .return 1.0 - (1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, // .0 - cBase) * (1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // .0 - cBlend);.}.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6e, // vec4 Screen (con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, // st vec4 cBase, c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, // onst vec4 cBlend
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, // ).{.return 1.0 -
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, //  (1.0 - cBase) *
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, //  (1.0 - cBlend);
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, // .}.vec3 ScreenHD
	0x52, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, // R (const vec3 cB
	0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // ase, const vec3 
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // cBlend).{.return
	0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, //  max(1.0 - (1.0 
	0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, // - cBase) * (1.0 
	0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, // - cBlend), vec3(
	0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // 0.,0.,0.));.}.ve
	0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x63, 0x6f, // c4 ScreenHDR (co
	0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, // nst vec4 cBase, 
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // const vec4 cBlen
	0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, // d).{.return max(
	0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, // 1.0 - (1.0 - cBa
	0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, // se) * (1.0 - cBl
	0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, // end), vec4(0.,0.
	0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, // ,0.,0.));.}.vec4
	0x20, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, //  Multiply (const
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, //  vec4 cBase, con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, // st vec4 cBlend, 
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, // const float perc
	0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, // ent).{.return cB
	0x61, 0x73, 0x65, 0x20, 0x2a, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, // ase * cBlend*per
	0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, // cent;.}.vec4 Ove
	0x72, 0x6c, 0x61, 0x79, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, // rlay (const vec4
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, //  cBase, const ve
	0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, // c4 cBlend).{.vec
	0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, // 4 cNew = step(0.
	0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, // 5, cBase);.cNew 
	0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, // = mix(cBase*cBle
	0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, // nd*2.0, 1.0-2.0*
	0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, // (1.0-cBase)*(1.0
	0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x3b, // -cBlend), cNew);
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, // .return cNew;.}.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x48, 0x44, 0x52, 0x20, // vec4 OverlayHDR 
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, // (const vec4 cBas
	0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // e, const vec4 cB
	0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, // lend).{.vec4 cNe
	0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, // w = step(0.5, cB
	0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, // ase);.cNew = max
	0x28, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, // (mix(cBase*cBlen
	0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, // d*2.0, 1.0-2.0*(
	0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, // 1.0-cBase)*(1.0-
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x2c, 0x20, // cBlend), cNew), 
	0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, // vec4(0.,0.,0.,0.
	0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, // ));.return cNew;
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x73, 0x5f, 0x68, 0x65, 0x6d, 0x69, // .}.vec3 cos_hemi
	0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x63, 0x6f, // sphere_sample(co
	0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, // nst vec2 t).{.co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x68, 0x69, 0x20, 0x3d, 0x20, // nst float phi = 
	0x74, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x28, 0x32, 0x2e, 0x30, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, // t.y * (2.0*3.141
	0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, // 5926535897932384
	0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x3b, 0x0a, 0x63, // 626433832795);.c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, // onst float cosTh
	0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, // eta = sqrt(1.0 -
	0x20, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, //  t.x);.const flo
	0x61, 0x74, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, // at sinTheta = sq
	0x72, 0x74, 0x28, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, // rt(t.x);.float s
	0x70, 0x2c, 0x63, 0x70, 0x3b, 0x0a, 0x73, 0x69, 0x6e, 0x63, 0x6f, 0x73, 0x28, 0x70, 0x68, 0x69, // p,cp;.sincos(phi
	0x2c, 0x73, 0x70, 0x2c, 0x63, 0x70, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // ,sp,cp);.return 
	0x76, 0x65, 0x63, 0x33, 0x28, 0x63, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, // vec3(cp * sinThe
	0x74, 0x61, 0x2c, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x73, 0x70, // ta, cosTheta, sp
	0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, //  * sinTheta);.}.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x76, // vec3 rotate_to_v
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, // ector_upper(cons
	0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, // t vec3 vec, cons
	0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x29, 0x0a, 0x7b, // t vec3 normal).{
	0x0a, 0x69, 0x66, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x3e, 0x20, 0x2d, // .if(normal.y > -
	0x30, 0x2e, 0x39, 0x39, 0x39, 0x39, 0x39, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, // 0.99999).{.const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x28, //  float h = 1.0/(
	0x31, 0x2e, 0x30, 0x2b, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x63, // 1.0+normal.y);.c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x20, 0x3d, 0x20, // onst float hz = 
	0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // h*normal.z;.cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x3d, 0x20, 0x68, 0x7a, // t float hzx = hz
	0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // *normal.x;.retur
	0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, // n vec3(.vec.x * 
	0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, // (normal.y+hz*nor
	0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x29, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, // mal.z) + vec.y *
	0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, //  normal.x - vec.
	0x7a, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, // z * hzx,.vec.y *
	0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, //  normal.y - vec.
	0x78, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, // x * normal.x - v
	0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x2c, // ec.z * normal.z,
	0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, // .vec.y * normal.
	0x7a, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x20, // z - vec.x * hzx 
	0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, // + vec.z * (norma
	0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x2a, 0x6e, // l.y+h*normal.x*n
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, // ormal.x));.}.els
	0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x2d, 0x76, 0x65, 0x63, 0x3b, 0x0a, 0x7d, // e return -vec;.}
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, // .uniform vec4 St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x53, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3b, // ereo_Saturation;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, // .uniform vec4 St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, // ereo_MS_ZPD_YAxi
	0x73, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, // s;.uniform sampl
	0x65, 0x72, 0x32, 0x44, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // er2D tex_stereo_
	0x66, 0x62, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, // fb;.uniform samp
	0x6c, 0x65, 0x72, 0x32, 0x44, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // ler2D tex_stereo
	0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // _depth;.uniform 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, // vec4 w_h_height;
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, // .vec3 gatherEyeC
	0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x62, 0x6f, 0x6f, // olor(vec2 u, boo
	0x6c, 0x20, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // l isLeft).{.cons
	0x74, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3d, 0x20, 0x28, // t bool yaxis = (
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, // Stereo_MS_ZPD_YA
	0x78, 0x69, 0x73, 0x2e, 0x7a, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x3b, 0x0a, 0x63, 0x6f, // xis.z != 0.);.co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // nst float MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, // aration = (Stere
	0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, // o_MS_ZPD_YAxis.x
	0x29, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, // );.if (isLeft).{
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x6d, 0x69, // .const float lmi
	0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, // nDepth = min(min
	0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, // (textureLod(tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, // stereo_depth, u 
	0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // + (yaxis ? vec2(
	0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, // 0.0, 0.500 * Max
	0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, // Separation) : ve
	0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, // c2(0.500 * MaxSe
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, // paration, 0.0)),
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, //  0.0).x,.texture
	0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, // Lod(tex_stereo_d
	0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, // epth, u + (yaxis
	0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, //  ? vec2(0.0, 0.6
	0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // 66 * MaxSeparati
	0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, // on) : vec2(0.666
	0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, //  * MaxSeparation
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, // , 0.0)), 0.0).x)
	0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, // ,.textureLod(tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, // _stereo_depth, u
	0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, //  + (yaxis ? vec2
	0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // (0.0, MaxSeparat
	0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, // ion) : vec2( Max
	0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // Separation, 0.0)
	0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // ), 0.0).x);.floa
	0x74, 0x20, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, // t lparallax = ma
	0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, // x(0.0, w_h_heigh
	0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // t.w + MaxSeparat
	0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, // ion * (1.0 - 1.0
	0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, //  / (0.5 + lminDe
	0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, // pth * (1.0 / (St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, // ereo_MS_ZPD_YAxi
	0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, // s.y) - 0.5))));.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, // return textureLo
	0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, // d(tex_stereo_fb,
	0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, //  u + (yaxis ? ve
	0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, // c2(0.0, -lparall
	0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x6c, 0x70, 0x61, 0x72, 0x61, // ax) : vec2(lpara
	0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, // llax, 0.0)), 0.0
	0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x7b, 0x0a, // ).xyz;.}.else.{.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x6d, 0x69, 0x6e, // const float rmin
	0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, // Depth = min(min(
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, // textureLod(tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, // tereo_depth, u -
	0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, //  (yaxis ? vec2(0
	0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, // .0, 0.500 * MaxS
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, // eparation) : vec
	0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // 2(0.500 * MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, // aration, 0.0)), 
	0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, // 0.0).x,.textureL
	0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, // od(tex_stereo_de
	0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, // pth, u - (yaxis 
	0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, // ? vec2(0.0, 0.66
	0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, // 6 * MaxSeparatio
	0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, // n) : vec2(0.666 
	0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, // * MaxSeparation,
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, //  0.0)), 0.0).x),
	0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, // .textureLod(tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, // stereo_depth, u 
	0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // - (yaxis ? vec2(
	0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // 0.0, MaxSeparati
	0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, // on) : vec2( MaxS
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, // eparation, 0.0))
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // , 0.0).x);.float
	0x20, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, //  rparallax = max
	0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, // (0.0, w_h_height
	0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // .w + MaxSeparati
	0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, // on * (1.0 - 1.0 
	0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, // / (0.5 + rminDep
	0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, // th * (1.0 / (Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, // reo_MS_ZPD_YAxis
	0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x72, // .y) - 0.5))));.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, // eturn textureLod
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, // (tex_stereo_fb, 
	0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, // u - (yaxis ? vec
	0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, // 2(0.0, -rparalla
	0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, // x) : vec2(rparal
	0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // lax, 0.0)), 0.0)
	0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x67, // .xyz;.}.}.void g
	0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, // atherLeftRightCo
	0x6c, 0x6f, 0x72, 0x73, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x6f, 0x75, 0x74, // lors(vec2 u, out
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x63, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, //  vec3 lcol, out 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, // vec3 rcol).{.con
	0x73, 0x74, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3d, 0x20, // st bool yaxis = 
	0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, // (Stereo_MS_ZPD_Y
	0x41, 0x78, 0x69, 0x73, 0x2e, 0x7a, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x3b, 0x0a, 0x63, // Axis.z != 0.);.c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, // onst float MaxSe
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, // paration = (Ster
	0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, // eo_MS_ZPD_YAxis.
	0x78, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // x);.const float 
	0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, // lminDepth = min(
	0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, // min(textureLod(t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, // ex_stereo_depth,
	0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, //  u + (yaxis ? ve
	0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, // c2(0.0, 0.500 * 
	0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, // MaxSeparation) :
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, //  vec2(0.500 * Ma
	0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, // xSeparation, 0.0
	0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, // )), 0.0).x,.text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // ureLod(tex_stere
	0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, // o_depth, u + (ya
	0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, // xis ? vec2(0.0, 
	0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, // 0.666 * MaxSepar
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, // ation) : vec2(0.
	0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // 666 * MaxSeparat
	0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // ion, 0.0)), 0.0)
	0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, // .x),.textureLod(
	0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, // tex_stereo_depth
	0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, // , u + (yaxis ? v
	0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, // ec2(0.0, MaxSepa
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x20, // ration) : vec2( 
	0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, // MaxSeparation, 0
	0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, // .0)), 0.0).x);.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, // loat lparallax =
	0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, //  max(0.0, w_h_he
	0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, // ight.w + MaxSepa
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, // ration * (1.0 - 
	0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x6c, 0x6d, 0x69, // 1.0 / (0.5 + lmi
	0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, // nDepth * (1.0 / 
	0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, // (Stereo_MS_ZPD_Y
	0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, // Axis.y) - 0.5)))
	0x29, 0x3b, 0x0a, 0x6c, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // );.lcol = textur
	0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // eLod(tex_stereo_
	0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, // fb, u + (yaxis ?
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x6c, 0x70, 0x61, 0x72, //  vec2(0.0, -lpar
	0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x6c, 0x70, // allax) : vec2(lp
	0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, // arallax, 0.0)), 
	0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // 0.0).xyz;.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, // float rminDepth 
	0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // = min(min(textur
	0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // eLod(tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, // depth, u - (yaxi
	0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, // s ? vec2(0.0, 0.
	0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // 500 * MaxSeparat
	0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, // ion) : vec2(0.50
	0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, // 0 * MaxSeparatio
	0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, // n, 0.0)), 0.0).x
	0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, // ,.textureLod(tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, // _stereo_depth, u
	0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, //  - (yaxis ? vec2
	0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, // (0.0, 0.666 * Ma
	0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, // xSeparation) : v
	0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, // ec2(0.666 * MaxS
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, // eparation, 0.0))
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, // , 0.0).x),.textu
	0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // reLod(tex_stereo
	0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, // _depth, u - (yax
	0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, // is ? vec2(0.0, M
	0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, // axSeparation) : 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // vec2( MaxSeparat
	0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // ion, 0.0)), 0.0)
	0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x70, 0x61, 0x72, 0x61, // .x);.float rpara
	0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, // llax = max(0.0, 
	0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, // w_h_height.w + M
	0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, // axSeparation * (
	0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, // 1.0 - 1.0 / (0.5
	0x20, 0x2b, 0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, //  + rminDepth * (
	0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, // 1.0 / (Stereo_MS
	0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, // _ZPD_YAxis.y) - 
	0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, // 0.5))));.rcol = 
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, // textureLod(tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, // tereo_fb, u - (y
	0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, // axis ? vec2(0.0,
	0x20, 0x2d, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, //  -rparallax) : v
	0x65, 0x63, 0x32, 0x28, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, // ec2(rparallax, 0
	0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, // .0)), 0.0).xyz;.
	0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, // }.uniform mat4 S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, // tereo_LeftMat;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, // niform mat4 Ster
	0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, // eo_RightMat;.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // form vec4 Stereo
	0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, // _LeftLuminance_G
	0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, // amma;.uniform ve
	0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, // c4 Stereo_RightL
	0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, // uminance_DynDesa
	0x74, 0x3b, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, // t;.void DynamicD
	0x65, 0x73, 0x61, 0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, // esatAnaglyph(con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, // st vec3 lCol, co
	0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, // nst vec3 rCol, o
	0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, // ut vec3 lDesatCo
	0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x44, 0x65, 0x73, // l, out vec3 rDes
	0x61, 0x74, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // atCol).{.const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, // loat left2LeftLu
	0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, // m = dot(lCol, St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, // ereo_LeftLuminan
	0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, // ce_Gamma.xyz);.c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, // onst float left2
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, // RightLum = dot(l
	0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, // Col, Stereo_Righ
	0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, // tLuminance_DynDe
	0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // sat.xyz);.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, // float right2Left
	0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // Lum = dot(rCol, 
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, // Stereo_LeftLumin
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, // ance_Gamma.xyz);
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, // .const float rig
	0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, // ht2RightLum = do
	0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, // t(rCol, Stereo_R
	0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, // ightLuminance_Dy
	0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, // nDesat.xyz);.con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // st float leftLum
	0x20, 0x3d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, //  = left2LeftLum 
	0x2b, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, // + left2RightLum;
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, // .const float rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, // htLum = right2Le
	0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, // ftLum + right2Ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // ghtLum;.const fl
	0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, // oat leftDesat = 
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, // Stereo_RightLumi
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, // nance_DynDesat.w
	0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, //  * abs((left2Lef
	0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, // tLum - left2Righ
	0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // tLum) / (leftLum
	0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, //  + 0.0001));.con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, // st float rightDe
	0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, // sat = Stereo_Rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, // htLuminance_DynD
	0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x72, 0x69, // esat.w * abs((ri
	0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x72, 0x69, // ght2LeftLum - ri
	0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, // ght2RightLum) / 
	0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, // (rightLum + 0.00
	0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, // 01));.lDesatCol 
	0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, // = mix(lCol, vec3
	0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, // _splat(leftLum),
	0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x72, 0x44, 0x65, //  leftDesat);.rDe
	0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x72, 0x43, 0x6f, // satCol = mix(rCo
	0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x72, 0x69, // l, vec3_splat(ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, // ghtLum), rightDe
	0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x4c, 0x69, 0x6e, // sat);.}.vec3 Lin
	0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, // earAnaglyph(cons
	0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, // t vec3 lCol, con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, // st vec3 rCol).{.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // const vec3 color
	0x20, 0x3d, 0x20, 0x28, 0x28, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x6c, 0x43, 0x6f, 0x6c, //  = (( (vec4(lCol
	0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // , 1.)) * (Stereo
	0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x20, // _LeftMat) ) + ( 
	0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, // (vec4(rCol, 1.))
	0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, //  * (Stereo_Right
	0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x72, 0x65, 0x74, // Mat) )).rgb;.ret
	0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, // urn color;.}.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // form vec4 Stereo
	0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, // _DeghostGamma;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, // niform mat4 Ster
	0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, // eo_DeghostFilter
	0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x6e, // ;.vec3 DeghostAn
	0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, // aglyph(const vec
	0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // 3 lCol, const ve
	0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, // c3 rCol).{.const
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, //  vec3 color = Li
	0x6e, 0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, // nearAnaglyph(lCo
	0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // l, rCol);.return
	0x20, 0x28, 0x20, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x53, //  ( (pow(color, S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, // tereo_DeghostGam
	0x6d, 0x61, 0x2e, 0x72, 0x67, 0x62, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x6d, 0x61, 0x74, 0x33, // ma.rgb)) * (mat3
	0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, // (Stereo_DeghostF
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, // ilter[0].xyz, St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, // ereo_DeghostFilt
	0x65, 0x72, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // er[1].xyz, Stere
	0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, // o_DeghostFilter[
	0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, // 2].xyz)) );.}.vo
	0x69, 0x64, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x67, 0x6c, 0x5f, 0x46, // id main().{.gl_F
	0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, // ragColor = vec4(
	0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x66, // gatherEyeColor(f
	0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, // loat2(v_texcoord
	0x30, 0x2e, 0x78, 0x2c, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, // 0.x, v_texcoord0
	0x2e, 0x79, 0x20, 0x2a, 0x20, 0x32, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, // .y * 2.0), v_tex
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2e, 0x79, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x2c, // coord0.y < 0.5),
	0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x00,                                     //  1.0);.}..
};
static const uint8_t fs_pp_stereo_tb_dx11[2507] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x13, 0x53, // FSH.o.><.......S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, // tereo_MS_ZPD_YAx
	0x69, 0x73, 0x12, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x77, 0x5f, 0x68, // is...........w_h
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, // _height.........
	0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x30, // ..tex_stereo_fb0
	0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // ..........tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x30, 0x01, 0x01, 0x00, 0x01, 0x00, // ereo_depth0.....
	0x00, 0x00, 0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // .....tex_stereo_
	0x66, 0x62, 0x30, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x74, 0x65, 0x78, // fb0..........tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x30, 0x01, 0x01, // _stereo_depth0..
	0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x09, 0x00, 0x00, 0x44, 0x58, 0x42, 0x43, 0x01, // ...........DXBC.
	0xef, 0xa3, 0x61, 0x04, 0xc6, 0xd7, 0x90, 0x84, 0x49, 0x52, 0xde, 0xb7, 0x22, 0xc3, 0x0a, 0x01, // ..a.....IR.."...
	0x00, 0x00, 0x00, 0x1c, 0x09, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x84, // ...........,....
	0x00, 0x00, 0x00, 0xb8, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x4e, 0x50, 0x00, 0x00, 0x00, 0x02, // .......ISGNP....
	0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, // .......8........
	0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x44, // ...............D
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, // .......SV_POSITI
	0x4f, 0x4e, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0xab, 0xab, 0xab, 0x4f, // ON.TEXCOORD....O
	0x53, 0x47, 0x4e, 0x2c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x20, // SGN,........... 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, // .......SV_TARGET
	0x00, 0xab, 0xab, 0x53, 0x48, 0x45, 0x58, 0x5c, 0x08, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x17, // ...SHEX....P....
	0x02, 0x00, 0x00, 0x6a, 0x08, 0x00, 0x01, 0x59, 0x00, 0x00, 0x04, 0x46, 0x8e, 0x20, 0x00, 0x00, // ...j...Y...F. ..
	0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x03, 0x00, 0x60, 0x10, 0x00, 0x00, // .......Z....`...
	0x00, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x03, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x58, // ...Z....`......X
	0x18, 0x00, 0x04, 0x00, 0x70, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x55, 0x00, 0x00, 0x58, // ....p......UU..X
	0x18, 0x00, 0x04, 0x00, 0x70, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x55, 0x55, 0x00, 0x00, 0x62, // ....p......UU..b
	0x10, 0x00, 0x03, 0x32, 0x10, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x03, 0xf2, // ...2.......e....
	0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x02, 0x03, 0x00, 0x00, 0x00, 0x31, //  ......h.......1
	0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x10, 0x10, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x39, 0x00, 0x00, 0x08, 0x22, // ....@.....?9..."
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .......*. ......
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x04, 0x03, 0x0a, // ....@...........
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x08, 0x52, 0x00, 0x10, 0x00, 0x01, // .......6...R....
	0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ....@...........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x0b, 0xa2, 0x00, 0x10, 0x00, 0x01, // .......8........
	0x00, 0x00, 0x00, 0x06, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, // ..... ..........
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0xfa, // @.........?.....
	0x7e, 0x2a, 0x3f, 0x37, 0x00, 0x00, 0x09, 0xf2, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x56, // ~*?7...........V
	0x05, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x16, // .......F........
	0x0b, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x0c, 0xf2, 0x00, 0x10, 0x00, 0x01, // .......2........
	0x00, 0x00, 0x00, 0x46, 0x14, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, // ...F........@...
	0x00, 0x80, 0x3f, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x00, 0x40, 0x46, // ..?...@...?...@F
	0x0e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, // .......H.......C
	0x55, 0x15, 0x00, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x01, // U..........F....
	0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, // ...F~.......`...
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, // ....@......H....
	0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x42, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe6, // ...CU..B........
	0x0a, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x96, 0x7c, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, // ........|.......
	0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, // `.......@......3
	0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x00, // ...........*....
	0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x08, 0x52, // ...........6...R
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........@.......
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x06, 0x22, // ...........6..."
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ......... ......
	0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x09, 0xc2, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x56, // ...7...........V
	0x05, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x04, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x56, // ...............V
	0x01, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x0c, 0xc2, 0x00, 0x10, 0x00, 0x00, // .......2........
	0x00, 0x00, 0x00, 0x06, 0x14, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, // ............@...
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x00, 0x40, 0xa6, // ..........?...@.
	0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, // .......H.......C
	0x55, 0x15, 0x00, 0x42, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x00, // U..B............
	0x00, 0x00, 0x00, 0x96, 0x7c, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, // ....|.......`...
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x07, 0x12, // ....@......3....
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, // .......*........
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x0b, 0x42, 0x00, 0x10, 0x00, 0x00, // ...........B....
	0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, // ....@.....?...?.
	0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x1a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ..?...?.. ......
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x42, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, // .......B.......*
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0x32, // ........@......2
	0x00, 0x00, 0x09, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, // ...*........@...
	0x00, 0x00, 0x3f, 0x0e, 0x00, 0x00, 0x0a, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, // ..?.............
	0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, // @.....?...?...?.
	0x00, 0x80, 0x3f, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x12, // ..?.............
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x00, // ...........A....
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x32, 0x00, 0x00, 0x0b, 0x12, // ....@.....?2....
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ......... ......
	0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, 0x80, 0x20, 0x00, 0x00, // ...........:. ..
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x01, // .......4........
	0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, // ............@...
	0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x06, 0x82, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, // ...6............
	0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x22, // ...A.......6..."
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, // ........@......7
	0x00, 0x00, 0x09, 0x52, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x56, 0x05, 0x10, 0x00, 0x00, // ...R.......V....
	0x00, 0x00, 0x00, 0xa6, 0x0b, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x01, 0x10, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x0c, 0x52, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, // ...2...R........
	0x11, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, // ........@.....?.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x06, 0x02, 0x10, 0x00, 0x00, // ......@.........
	0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0xd2, // ...H.......CU...
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc6, // ................
	0x79, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, // y.......`.......
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x01, 0x36, 0x00, 0x00, 0x08, 0x52, // @..........6...R
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........@.......
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x0b, 0xa2, // ...........8....
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ......... ......
	0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, // ....@.........?.
	0x00, 0x00, 0x00, 0xfa, 0x7e, 0x2a, 0x3f, 0x37, 0x00, 0x00, 0x09, 0xf2, 0x00, 0x10, 0x00, 0x01, // ....~*?7........
	0x00, 0x00, 0x00, 0x56, 0x05, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x01, // ...V.......F....
	0x00, 0x00, 0x00, 0x16, 0x0b, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x0d, 0xf2, // ...........2....
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x14, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, // .......F........
	0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x80, 0x3f, 0x00, // @.....?...@...?.
	0x00, 0x00, 0x40, 0x46, 0x0e, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x48, // ..@F...A.......H
	0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x12, 0x00, 0x10, 0x00, 0x01, // .......CU.......
	0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, 0x01, // ...F.......F~...
	0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, // ....`.......@...
	0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x22, // ...H.......CU.."
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x16, // ................
	0x7e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, // ~.......`.......
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x01, // @......3........
	0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x08, 0x52, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, // ...6...R........
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // @...............
	0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x06, 0x22, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0a, // ...6..."........
	0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x09, 0x62, // . .........7...b
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x56, 0x05, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, // .......V........
	0x01, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x56, 0x04, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x32, // .......V.......2
	0x00, 0x00, 0x0d, 0x62, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x11, 0x10, 0x00, 0x01, // ...b............
	0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, // ....@.........?.
	0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x56, 0x06, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x01, // ..@....V...A....
	0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x22, // ...H.......CU.."
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x96, 0x05, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x16, // ................
	0x7e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, // ~.......`.......
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x01, // @......3........
	0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x0b, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, // ......."........
	0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, // @.....?...?...?.
	0x00, 0x80, 0x3f, 0x1a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ..?.. ..........
	0x00, 0x00, 0x07, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, // ..."............
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0x32, 0x00, 0x00, 0x09, 0x12, // ....@......2....
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, // ................
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x0e, // ........@.....?.
	0x00, 0x00, 0x0a, 0x12, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, // ............@...
	0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x0a, // ..?...?...?...?.
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x12, 0x00, 0x10, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, // .......A........
	0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x32, 0x00, 0x00, 0x0b, 0x12, 0x00, 0x10, 0x00, 0x01, // @.....?2........
	0x00, 0x00, 0x00, 0x0a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, // ..... ..........
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, // .......:. ......
	0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, // ...4............
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, // ........@......6
	0x00, 0x00, 0x06, 0x82, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x80, 0x41, // ...............A
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x22, 0x00, 0x10, 0x00, 0x01, // .......6..."....
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x09, 0x32, // ....@......7...2
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x56, 0x05, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe6, // .......V........
	0x0a, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, // .......F.......2
	0x00, 0x00, 0x0d, 0x32, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x10, 0x10, 0x00, 0x01, // ...2.......F....
	0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x00, 0x40, 0x00, // ....@.....?...@.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x01, // .......F...A....
	0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0xd2, // ...H.......CU...
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0xc6, // .......F........
	0x79, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, // y.......`.......
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x01, 0x36, 0x00, 0x00, 0x05, 0x72, // @..........6...r
	0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x03, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, //  ..............6
	0x00, 0x00, 0x05, 0x82, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, // .... .......@...
	0x00, 0x80, 0x3f, 0x3e, 0x00, 0x00, 0x01, 0x00, 0x00, 0x20, 0x00,                               // ..?>..... .
};
static const uint8_t fs_pp_stereo_tb_spv[4140] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x13, 0x53, // FSH.o.><.......S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, // tereo_MS_ZPD_YAx
	0x69, 0x73, 0x12, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x77, 0x5f, 0x68, // is...........w_h
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x01, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, // _height.........
	0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x30, // ..tex_stereo_fb0
	0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x02, 0x22, 0x00, 0x10, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // ......."..tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x30, 0x00, 0x03, 0x00, 0x00, 0x00, // ereo_depth0.....
	0x00, 0x02, 0x22, 0x00, 0xb0, 0x0f, 0x00, 0x00, 0x03, 0x02, 0x23, 0x07, 0x00, 0x00, 0x01, 0x00, // ..".......#.....
	0x0b, 0x00, 0x08, 0x00, 0xa4, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x02, 0x00, // ................
	0x01, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, 0x4c, 0x53, 0x4c, // ............GLSL
	0x2e, 0x73, 0x74, 0x64, 0x2e, 0x34, 0x35, 0x30, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x03, 0x00, // .std.450........
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x07, 0x00, 0x04, 0x00, 0x00, 0x00, // ................
	0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x2c, 0x01, 0x00, 0x00, // ....main....,...
	0x37, 0x01, 0x00, 0x00, 0x10, 0x00, 0x03, 0x00, 0x04, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, // 7...............
	0x03, 0x00, 0x03, 0x00, 0x05, 0x00, 0x00, 0x00, 0xf4, 0x01, 0x00, 0x00, 0x05, 0x00, 0x04, 0x00, // ................
	0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x08, 0x00, // ....main........
	0x2b, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, // +...tex_stereo_f
	0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x08, 0x00, // bSampler........
	0x2e, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, // ....tex_stereo_f
	0x62, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x08, 0x00, // bTexture........
	0x32, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, // 2...tex_stereo_d
	0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x00, 0x05, 0x00, 0x08, 0x00, // epthSampler.....
	0x34, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, // 4...tex_stereo_d
	0x65, 0x70, 0x74, 0x68, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x00, 0x05, 0x00, 0x06, 0x00, // epthTexture.....
	0x4f, 0x00, 0x00, 0x00, 0x55, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, // O...UniformBlock
	0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x08, 0x00, 0x4f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........O.......
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, // Stereo_MS_ZPD_YA
	0x78, 0x69, 0x73, 0x00, 0x06, 0x00, 0x06, 0x00, 0x4f, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // xis.....O.......
	0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x00, 0x00, 0x05, 0x00, 0x03, 0x00, // w_h_height......
	0x51, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x05, 0x00, 0x2c, 0x01, 0x00, 0x00, // Q...........,...
	0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x00, 0x05, 0x00, 0x06, 0x00, // v_texcoord0.....
	0x37, 0x01, 0x00, 0x00, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, // 7...bgfx_FragDat
	0x61, 0x30, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x2b, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, // a0..G...+..."...
	0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x2b, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, // ....G...+...!...
	0x12, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, // ....G......."...
	0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, // ....G.......!...
	0x02, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x32, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, // ....G...2..."...
	0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x32, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, // ....G...2...!...
	0x13, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x34, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, // ....G...4..."...
	0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x34, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, // ....G...4...!...
	0x03, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0x4f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ....H...O.......
	0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0x4f, 0x00, 0x00, 0x00, // #.......H...O...
	0x01, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x47, 0x00, 0x03, 0x00, // ....#.......G...
	0x4f, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x51, 0x00, 0x00, 0x00, // O.......G...Q...
	0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x51, 0x00, 0x00, 0x00, // ".......G...Q...
	0x21, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x2c, 0x01, 0x00, 0x00, // !.......G...,...
	0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x37, 0x01, 0x00, 0x00, // ........G...7...
	0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, // ................
	0x21, 0x00, 0x03, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x02, 0x00, // !...............
	0x06, 0x00, 0x00, 0x00, 0x16, 0x00, 0x03, 0x00, 0x07, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, // ............ ...
	0x19, 0x00, 0x09, 0x00, 0x08, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, // ................
	0x02, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, // ................
	0x04, 0x00, 0x00, 0x00, 0x14, 0x00, 0x02, 0x00, 0x19, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00, // ................
	0x1b, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, // ............ ...
	0x2a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, // *...........;...
	0x2a, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, // *...+....... ...
	0x2d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, // -...........;...
	0x2d, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, // -...........;...
	0x2a, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, // *...2.......;...
	0x2d, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x00, 0x04, 0x00, // -...4...........
	0x37, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, // 7... .......+...
	0x37, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, // 7...8.......+...
	0x37, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x03, 0x00, // 7...<...........
	0x40, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x04, 0x00, 0x4f, 0x00, 0x00, 0x00, // @...........O...
	0x0e, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x50, 0x00, 0x00, 0x00, // ........ ...P...
	0x02, 0x00, 0x00, 0x00, 0x4f, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x50, 0x00, 0x00, 0x00, // ....O...;...P...
	0x51, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x15, 0x00, 0x04, 0x00, 0x52, 0x00, 0x00, 0x00, // Q...........R...
	0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x52, 0x00, 0x00, 0x00, //  .......+...R...
	0x53, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x54, 0x00, 0x00, 0x00, // S....... ...T...
	0x02, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, // ........+.......
	0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x52, 0x00, 0x00, 0x00, // W.......+...R...
	0x5a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, // Z.......+.......
	0x63, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x17, 0x00, 0x04, 0x00, 0x6a, 0x00, 0x00, 0x00, // c......?....j...
	0x19, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, // ........+.......
	0x76, 0x00, 0x00, 0x00, 0xfa, 0x7e, 0x2a, 0x3f, 0x2b, 0x00, 0x04, 0x00, 0x52, 0x00, 0x00, 0x00, // v....~*?+...R...
	0x98, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, // ........+.......
	0x9c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x2b, 0x00, 0x04, 0x00, 0x52, 0x00, 0x00, 0x00, // .......?+...R...
	0x9e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, // ........+.......
	0x19, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x20, 0x00, 0x04, 0x00, 0x2b, 0x01, 0x00, 0x00, // .......@ ...+...
	0x01, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x2b, 0x01, 0x00, 0x00, // ........;...+...
	0x2c, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x36, 0x01, 0x00, 0x00, // ,....... ...6...
	0x03, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x36, 0x01, 0x00, 0x00, // ........;...6...
	0x37, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x36, 0x00, 0x05, 0x00, 0x02, 0x00, 0x00, 0x00, // 7.......6.......
	0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, // ................
	0x05, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, // ....=.......,...
	0x2b, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x08, 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x00, // +...=......./...
	0x2e, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, // ....=.......3...
	0x32, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x08, 0x00, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, // 2...=.......5...
	0x34, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x2d, 0x01, 0x00, 0x00, // 4...=.......-...
	0x2c, 0x01, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x61, 0x01, 0x00, 0x00, // ,...Q.......a...
	0x2d, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // -.......Q.......
	0x63, 0x01, 0x00, 0x00, 0x2d, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, // c...-...........
	0x07, 0x00, 0x00, 0x00, 0x64, 0x01, 0x00, 0x00, 0x63, 0x01, 0x00, 0x00, 0x19, 0x01, 0x00, 0x00, // ....d...c.......
	0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x65, 0x01, 0x00, 0x00, 0x61, 0x01, 0x00, 0x00, // P.......e...a...
	0x64, 0x01, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x67, 0x01, 0x00, 0x00, // d...Q.......g...
	0x2d, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xb8, 0x00, 0x05, 0x00, 0x19, 0x00, 0x00, 0x00, // -...............
	0x68, 0x01, 0x00, 0x00, 0x67, 0x01, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, // h...g...c.......
	0x2d, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfb, 0x00, 0x03, 0x00, 0x5a, 0x00, 0x00, 0x00, // -...........Z...
	0x97, 0x01, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x97, 0x01, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, // ............A...
	0x54, 0x00, 0x00, 0x00, 0x98, 0x01, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, // T.......Q...<...
	0x53, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, // S...=...........
	0x98, 0x01, 0x00, 0x00, 0xb7, 0x00, 0x05, 0x00, 0x19, 0x00, 0x00, 0x00, 0x9a, 0x01, 0x00, 0x00, // ................
	0x99, 0x01, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x54, 0x00, 0x00, 0x00, // ....W...A...T...
	0x9b, 0x01, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x00, // ....Q...<...Z...
	0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x9c, 0x01, 0x00, 0x00, 0x9b, 0x01, 0x00, 0x00, // =...............
	0xf7, 0x00, 0x03, 0x00, 0x2c, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, // ....,...........
	0x68, 0x01, 0x00, 0x00, 0x9e, 0x01, 0x00, 0x00, 0xe5, 0x01, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, // h...............
	0xe5, 0x01, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xe9, 0x01, 0x00, 0x00, // ................
	0x63, 0x00, 0x00, 0x00, 0x9c, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, // c.......P.......
	0xea, 0x01, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, 0xe9, 0x01, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, // ....W...........
	0x07, 0x00, 0x00, 0x00, 0xec, 0x01, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, 0x9c, 0x01, 0x00, 0x00, // ........c.......
	0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xed, 0x01, 0x00, 0x00, 0xec, 0x01, 0x00, 0x00, // P...............
	0x57, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x6a, 0x00, 0x00, 0x00, 0xee, 0x01, 0x00, 0x00, // W...P...j.......
	0x9a, 0x01, 0x00, 0x00, 0x9a, 0x01, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, // ................
	0xef, 0x01, 0x00, 0x00, 0xee, 0x01, 0x00, 0x00, 0xea, 0x01, 0x00, 0x00, 0xed, 0x01, 0x00, 0x00, // ................
	0x83, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xf0, 0x01, 0x00, 0x00, 0x65, 0x01, 0x00, 0x00, // ............e...
	0xef, 0x01, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, 0x40, 0x00, 0x00, 0x00, 0x5d, 0x02, 0x00, 0x00, // ....V...@...]...
	0x35, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, // 5...3...X.......
	0x60, 0x02, 0x00, 0x00, 0x5d, 0x02, 0x00, 0x00, 0xf0, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // `...]...........
	0x57, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xf3, 0x01, 0x00, 0x00, // W...Q...........
	0x60, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // `...............
	0xf7, 0x01, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x9c, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, // ....v.......P...
	0x0b, 0x00, 0x00, 0x00, 0xf8, 0x01, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, 0xf7, 0x01, 0x00, 0x00, // ........W.......
	0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xfa, 0x01, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, // ............v...
	0x9c, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xfb, 0x01, 0x00, 0x00, // ....P...........
	0xfa, 0x01, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x6a, 0x00, 0x00, 0x00, // ....W...P...j...
	0xfc, 0x01, 0x00, 0x00, 0x9a, 0x01, 0x00, 0x00, 0x9a, 0x01, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, // ................
	0x0b, 0x00, 0x00, 0x00, 0xfd, 0x01, 0x00, 0x00, 0xfc, 0x01, 0x00, 0x00, 0xf8, 0x01, 0x00, 0x00, // ................
	0xfb, 0x01, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x00, 0x00, // ................
	0x65, 0x01, 0x00, 0x00, 0xfd, 0x01, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, 0x40, 0x00, 0x00, 0x00, // e.......V...@...
	0x67, 0x02, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, // g...5...3...X...
	0x0e, 0x00, 0x00, 0x00, 0x6a, 0x02, 0x00, 0x00, 0x67, 0x02, 0x00, 0x00, 0xfe, 0x01, 0x00, 0x00, // ....j...g.......
	0x02, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // ....W...Q.......
	0x01, 0x02, 0x00, 0x00, 0x6a, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, // ....j...........
	0x07, 0x00, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, // ............%...
	0xf3, 0x01, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, // ........P.......
	0x06, 0x02, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, 0x9c, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, // ....W.......P...
	0x0b, 0x00, 0x00, 0x00, 0x08, 0x02, 0x00, 0x00, 0x9c, 0x01, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, // ............W...
	0x50, 0x00, 0x05, 0x00, 0x6a, 0x00, 0x00, 0x00, 0x09, 0x02, 0x00, 0x00, 0x9a, 0x01, 0x00, 0x00, // P...j...........
	0x9a, 0x01, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x0a, 0x02, 0x00, 0x00, // ................
	0x09, 0x02, 0x00, 0x00, 0x06, 0x02, 0x00, 0x00, 0x08, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, // ................
	0x0b, 0x00, 0x00, 0x00, 0x0b, 0x02, 0x00, 0x00, 0x65, 0x01, 0x00, 0x00, 0x0a, 0x02, 0x00, 0x00, // ........e.......
	0x56, 0x00, 0x05, 0x00, 0x40, 0x00, 0x00, 0x00, 0x71, 0x02, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, // V...@...q...5...
	0x33, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x74, 0x02, 0x00, 0x00, // 3...X.......t...
	0x71, 0x02, 0x00, 0x00, 0x0b, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, // q...........W...
	0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x02, 0x00, 0x00, 0x74, 0x02, 0x00, 0x00, // Q...........t...
	0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x0f, 0x02, 0x00, 0x00, // ................
	0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x0e, 0x02, 0x00, 0x00, // ....%...........
	0x41, 0x00, 0x06, 0x00, 0x54, 0x00, 0x00, 0x00, 0x10, 0x02, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00, // A...T.......Q...
	0x38, 0x00, 0x00, 0x00, 0x98, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, // 8.......=.......
	0x11, 0x02, 0x00, 0x00, 0x10, 0x02, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x54, 0x00, 0x00, 0x00, // ........A...T...
	0x14, 0x02, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x9e, 0x00, 0x00, 0x00, // ....Q...<.......
	0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x15, 0x02, 0x00, 0x00, 0x14, 0x02, 0x00, 0x00, // =...............
	0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x16, 0x02, 0x00, 0x00, 0x9c, 0x00, 0x00, 0x00, // ................
	0x15, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x17, 0x02, 0x00, 0x00, // ................
	0x16, 0x02, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x07, 0x00, 0x00, 0x00, // ....c...........
	0x19, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x0f, 0x02, 0x00, 0x00, // ........2.......
	0x17, 0x02, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, 0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // ....c...........
	0x1a, 0x02, 0x00, 0x00, 0x9c, 0x00, 0x00, 0x00, 0x19, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, // ................
	0x07, 0x00, 0x00, 0x00, 0x1b, 0x02, 0x00, 0x00, 0x9c, 0x00, 0x00, 0x00, 0x1a, 0x02, 0x00, 0x00, // ................
	0x0c, 0x00, 0x08, 0x00, 0x07, 0x00, 0x00, 0x00, 0x1d, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // ................
	0x32, 0x00, 0x00, 0x00, 0x9c, 0x01, 0x00, 0x00, 0x1b, 0x02, 0x00, 0x00, 0x11, 0x02, 0x00, 0x00, // 2...............
	0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x1e, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // ................
	0x28, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, 0x1d, 0x02, 0x00, 0x00, 0x7f, 0x00, 0x04, 0x00, // (...W...........
	0x07, 0x00, 0x00, 0x00, 0x22, 0x02, 0x00, 0x00, 0x1e, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, // ....".......P...
	0x0b, 0x00, 0x00, 0x00, 0x23, 0x02, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, 0x22, 0x02, 0x00, 0x00, // ....#...W..."...
	0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x25, 0x02, 0x00, 0x00, 0x1e, 0x02, 0x00, 0x00, // P.......%.......
	0x57, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x6a, 0x00, 0x00, 0x00, 0x26, 0x02, 0x00, 0x00, // W...P...j...&...
	0x9a, 0x01, 0x00, 0x00, 0x9a, 0x01, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, // ................
	0x27, 0x02, 0x00, 0x00, 0x26, 0x02, 0x00, 0x00, 0x23, 0x02, 0x00, 0x00, 0x25, 0x02, 0x00, 0x00, // '...&...#...%...
	0x83, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x28, 0x02, 0x00, 0x00, 0x65, 0x01, 0x00, 0x00, // ........(...e...
	0x27, 0x02, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, 0x40, 0x00, 0x00, 0x00, 0x7b, 0x02, 0x00, 0x00, // '...V...@...{...
	0x2f, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, // /...,...X.......
	0x7e, 0x02, 0x00, 0x00, 0x7b, 0x02, 0x00, 0x00, 0x28, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // ~...{...(.......
	0x57, 0x00, 0x00, 0x00, 0x4f, 0x00, 0x08, 0x00, 0x1b, 0x00, 0x00, 0x00, 0x2b, 0x02, 0x00, 0x00, // W...O.......+...
	0x7e, 0x02, 0x00, 0x00, 0x7e, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // ~...~...........
	0x02, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x2d, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, // ........-.......
	0x9e, 0x01, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xa2, 0x01, 0x00, 0x00, // ................
	0x63, 0x00, 0x00, 0x00, 0x9c, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, // c.......P.......
	0xa3, 0x01, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, 0xa2, 0x01, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, // ....W...........
	0x07, 0x00, 0x00, 0x00, 0xa5, 0x01, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, 0x9c, 0x01, 0x00, 0x00, // ........c.......
	0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xa6, 0x01, 0x00, 0x00, 0xa5, 0x01, 0x00, 0x00, // P...............
	0x57, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x6a, 0x00, 0x00, 0x00, 0xa7, 0x01, 0x00, 0x00, // W...P...j.......
	0x9a, 0x01, 0x00, 0x00, 0x9a, 0x01, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, // ................
	0xa8, 0x01, 0x00, 0x00, 0xa7, 0x01, 0x00, 0x00, 0xa3, 0x01, 0x00, 0x00, 0xa6, 0x01, 0x00, 0x00, // ................
	0x81, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xa9, 0x01, 0x00, 0x00, 0x65, 0x01, 0x00, 0x00, // ............e...
	0xa8, 0x01, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, 0x40, 0x00, 0x00, 0x00, 0x35, 0x02, 0x00, 0x00, // ....V...@...5...
	0x35, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, // 5...3...X.......
	0x38, 0x02, 0x00, 0x00, 0x35, 0x02, 0x00, 0x00, 0xa9, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // 8...5...........
	0x57, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xac, 0x01, 0x00, 0x00, // W...Q...........
	0x38, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // 8...............
	0xb0, 0x01, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x9c, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, // ....v.......P...
	0x0b, 0x00, 0x00, 0x00, 0xb1, 0x01, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, 0xb0, 0x01, 0x00, 0x00, // ........W.......
	0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xb3, 0x01, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, // ............v...
	0x9c, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xb4, 0x01, 0x00, 0x00, // ....P...........
	0xb3, 0x01, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x6a, 0x00, 0x00, 0x00, // ....W...P...j...
	0xb5, 0x01, 0x00, 0x00, 0x9a, 0x01, 0x00, 0x00, 0x9a, 0x01, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, // ................
	0x0b, 0x00, 0x00, 0x00, 0xb6, 0x01, 0x00, 0x00, 0xb5, 0x01, 0x00, 0x00, 0xb1, 0x01, 0x00, 0x00, // ................
	0xb4, 0x01, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xb7, 0x01, 0x00, 0x00, // ................
	0x65, 0x01, 0x00, 0x00, 0xb6, 0x01, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, 0x40, 0x00, 0x00, 0x00, // e.......V...@...
	0x3f, 0x02, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, // ?...5...3...X...
	0x0e, 0x00, 0x00, 0x00, 0x42, 0x02, 0x00, 0x00, 0x3f, 0x02, 0x00, 0x00, 0xb7, 0x01, 0x00, 0x00, // ....B...?.......
	0x02, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // ....W...Q.......
	0xba, 0x01, 0x00, 0x00, 0x42, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, // ....B...........
	0x07, 0x00, 0x00, 0x00, 0xbb, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, // ............%...
	0xac, 0x01, 0x00, 0x00, 0xba, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, // ........P.......
	0xbf, 0x01, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, 0x9c, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, // ....W.......P...
	0x0b, 0x00, 0x00, 0x00, 0xc1, 0x01, 0x00, 0x00, 0x9c, 0x01, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, // ............W...
	0x50, 0x00, 0x05, 0x00, 0x6a, 0x00, 0x00, 0x00, 0xc2, 0x01, 0x00, 0x00, 0x9a, 0x01, 0x00, 0x00, // P...j...........
	0x9a, 0x01, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xc3, 0x01, 0x00, 0x00, // ................
	0xc2, 0x01, 0x00, 0x00, 0xbf, 0x01, 0x00, 0x00, 0xc1, 0x01, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, // ................
	0x0b, 0x00, 0x00, 0x00, 0xc4, 0x01, 0x00, 0x00, 0x65, 0x01, 0x00, 0x00, 0xc3, 0x01, 0x00, 0x00, // ........e.......
	0x56, 0x00, 0x05, 0x00, 0x40, 0x00, 0x00, 0x00, 0x49, 0x02, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, // V...@...I...5...
	0x33, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x4c, 0x02, 0x00, 0x00, // 3...X.......L...
	0x49, 0x02, 0x00, 0x00, 0xc4, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, // I...........W...
	0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xc7, 0x01, 0x00, 0x00, 0x4c, 0x02, 0x00, 0x00, // Q...........L...
	0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0xc8, 0x01, 0x00, 0x00, // ................
	0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0xbb, 0x01, 0x00, 0x00, 0xc7, 0x01, 0x00, 0x00, // ....%...........
	0x41, 0x00, 0x06, 0x00, 0x54, 0x00, 0x00, 0x00, 0xc9, 0x01, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00, // A...T.......Q...
	0x38, 0x00, 0x00, 0x00, 0x98, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, // 8.......=.......
	0xca, 0x01, 0x00, 0x00, 0xc9, 0x01, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x54, 0x00, 0x00, 0x00, // ........A...T...
	0xcd, 0x01, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x9e, 0x00, 0x00, 0x00, // ....Q...<.......
	0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0xce, 0x01, 0x00, 0x00, 0xcd, 0x01, 0x00, 0x00, // =...............
	0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xcf, 0x01, 0x00, 0x00, 0x9c, 0x00, 0x00, 0x00, // ................
	0xce, 0x01, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xd0, 0x01, 0x00, 0x00, // ................
	0xcf, 0x01, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x07, 0x00, 0x00, 0x00, // ....c...........
	0xd2, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0xc8, 0x01, 0x00, 0x00, // ........2.......
	0xd0, 0x01, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, 0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // ....c...........
	0xd3, 0x01, 0x00, 0x00, 0x9c, 0x00, 0x00, 0x00, 0xd2, 0x01, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, // ................
	0x07, 0x00, 0x00, 0x00, 0xd4, 0x01, 0x00, 0x00, 0x9c, 0x00, 0x00, 0x00, 0xd3, 0x01, 0x00, 0x00, // ................
	0x0c, 0x00, 0x08, 0x00, 0x07, 0x00, 0x00, 0x00, 0xd6, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // ................
	0x32, 0x00, 0x00, 0x00, 0x9c, 0x01, 0x00, 0x00, 0xd4, 0x01, 0x00, 0x00, 0xca, 0x01, 0x00, 0x00, // 2...............
	0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0xd7, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // ................
	0x28, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, 0xd6, 0x01, 0x00, 0x00, 0x7f, 0x00, 0x04, 0x00, // (...W...........
	0x07, 0x00, 0x00, 0x00, 0xdb, 0x01, 0x00, 0x00, 0xd7, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, // ............P...
	0x0b, 0x00, 0x00, 0x00, 0xdc, 0x01, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, 0xdb, 0x01, 0x00, 0x00, // ........W.......
	0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xde, 0x01, 0x00, 0x00, 0xd7, 0x01, 0x00, 0x00, // P...............
	0x57, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x6a, 0x00, 0x00, 0x00, 0xdf, 0x01, 0x00, 0x00, // W...P...j.......
	0x9a, 0x01, 0x00, 0x00, 0x9a, 0x01, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, // ................
	0xe0, 0x01, 0x00, 0x00, 0xdf, 0x01, 0x00, 0x00, 0xdc, 0x01, 0x00, 0x00, 0xde, 0x01, 0x00, 0x00, // ................
	0x81, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xe1, 0x01, 0x00, 0x00, 0x65, 0x01, 0x00, 0x00, // ............e...
	0xe0, 0x01, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, 0x40, 0x00, 0x00, 0x00, 0x53, 0x02, 0x00, 0x00, // ....V...@...S...
	0x2f, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, // /...,...X.......
	0x56, 0x02, 0x00, 0x00, 0x53, 0x02, 0x00, 0x00, 0xe1, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // V...S...........
	0x57, 0x00, 0x00, 0x00, 0x4f, 0x00, 0x08, 0x00, 0x1b, 0x00, 0x00, 0x00, 0xe4, 0x01, 0x00, 0x00, // W...O...........
	0x56, 0x02, 0x00, 0x00, 0x56, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // V...V...........
	0x02, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x2d, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, // ........-.......
	0x2c, 0x02, 0x00, 0x00, 0xff, 0x00, 0x01, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x2d, 0x02, 0x00, 0x00, // ,...........-...
	0xf5, 0x00, 0x07, 0x00, 0x1b, 0x00, 0x00, 0x00, 0xa3, 0x02, 0x00, 0x00, 0x2b, 0x02, 0x00, 0x00, // ............+...
	0xe5, 0x01, 0x00, 0x00, 0xe4, 0x01, 0x00, 0x00, 0x9e, 0x01, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, // ............Q...
	0x07, 0x00, 0x00, 0x00, 0x6a, 0x01, 0x00, 0x00, 0xa3, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ....j...........
	0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x6b, 0x01, 0x00, 0x00, 0xa3, 0x02, 0x00, 0x00, // Q.......k.......
	0x01, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x6c, 0x01, 0x00, 0x00, // ....Q.......l...
	0xa3, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x50, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, // ........P.......
	0x6d, 0x01, 0x00, 0x00, 0x6a, 0x01, 0x00, 0x00, 0x6b, 0x01, 0x00, 0x00, 0x6c, 0x01, 0x00, 0x00, // m...j...k...l...
	0x9c, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x03, 0x00, 0x37, 0x01, 0x00, 0x00, 0x6d, 0x01, 0x00, 0x00, // ....>...7...m...
	0xfd, 0x00, 0x01, 0x00, 0x38, 0x00, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00,                         // ....8..... .
};
static const bgfx::EmbeddedShader fs_pp_stereo_tb = BGFX_EMBEDDED_SHADER(fs_pp_stereo_tb);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Build of fragment shader from fs_pp_stereo.sc to fs_pp_stereo_int with options: INT NOSTEREO
static const uint8_t fs_pp_stereo_int_mtl[3219] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x14, 0x74, // FSH.o.><.......t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, // ex_stereo_fbSamp
	0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x74, 0x65, // ler...........te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x54, 0x65, 0x78, 0x74, 0x75, // x_stereo_fbTextu
	0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x74, 0x65, 0x78, // re...........tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, // _stereo_depthSam
	0x70, 0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x74, // pler...........t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x54, // ex_stereo_depthT
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, // exture..........
	0x13, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, // .Stereo_MS_ZPD_Y
	0x41, 0x78, 0x69, 0x73, 0x12, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x77, // Axis...........w
	0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x01, 0x10, 0x00, 0x01, 0x00, 0x00, // _h_height.......
	0x00, 0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, // ....tex_stereo_f
	0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x74, 0x65, 0x78, 0x5f, // b...........tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x10, 0x00, 0x00, 0x00, // stereo_depth....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x95, 0x0b, 0x00, 0x00, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, // ..........#inclu
	0x64, 0x65, 0x20, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x64, 0x6c, 0x69, 0x62, // de <metal_stdlib
	0x3e, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x73, 0x69, 0x6d, 0x64, // >.#include <simd
	0x2f, 0x73, 0x69, 0x6d, 0x64, 0x2e, 0x68, 0x3e, 0x0a, 0x0a, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, // /simd.h>..using 
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x3b, // namespace metal;
	0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, // ..struct _Global
	0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, // .{.    float4 St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, // ereo_MS_ZPD_YAxi
	0x73, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x77, 0x5f, // s;.    float4 w_
	0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, // h_height;.};..st
	0x72, 0x75, 0x63, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, // ruct xlatMtlMain
	0x5f, 0x6f, 0x75, 0x74, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // _out.{.    float
	0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, // 4 bgfx_FragData0
	0x20, 0x5b, 0x5b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, //  [[color(0)]];.}
	0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, // ;..struct xlatMt
	0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, // lMain_in.{.    f
	0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, // loat2 v_texcoord
	0x30, 0x20, 0x5b, 0x5b, 0x75, 0x73, 0x65, 0x72, 0x28, 0x6c, 0x6f, 0x63, 0x6e, 0x30, 0x29, 0x5d, // 0 [[user(locn0)]
	0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, // ];.};..fragment 
	0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x20, // xlatMtlMain_out 
	0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x28, 0x78, 0x6c, 0x61, 0x74, // xlatMtlMain(xlat
	0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x5b, 0x5b, // MtlMain_in in [[
	0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x5d, 0x5d, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, // stage_in]], cons
	0x74, 0x61, 0x6e, 0x74, 0x20, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x26, 0x20, 0x5f, 0x6d, // tant _Global& _m
	0x74, 0x6c, 0x5f, 0x75, 0x20, 0x5b, 0x5b, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x28, 0x30, 0x29, // tl_u [[buffer(0)
	0x5d, 0x5d, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, // ]], texture2d<fl
	0x6f, 0x61, 0x74, 0x3e, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // oat> tex_stereo_
	0x66, 0x62, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x30, 0x29, 0x5d, // fb [[texture(0)]
	0x5d, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, 0x6f, // ], texture2d<flo
	0x61, 0x74, 0x3e, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, // at> tex_stereo_d
	0x65, 0x70, 0x74, 0x68, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x31, // epth [[texture(1
	0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x74, 0x65, 0x78, // )]], sampler tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, // _stereo_fbSample
	0x72, 0x20, 0x5b, 0x5b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, // r [[sampler(0)]]
	0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // , sampler tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, // ereo_depthSample
	0x72, 0x20, 0x5b, 0x5b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x31, 0x29, 0x5d, 0x5d, // r [[sampler(1)]]
	0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, // , float4 gl_Frag
	0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x5b, 0x5b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, // Coord [[position
	0x5d, 0x5d, 0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, // ]]).{.    xlatMt
	0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x3d, 0x20, // lMain_out out = 
	0x7b, 0x7d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, // {};.    float3 _
	0x36, 0x36, 0x36, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x64, 0x6f, 0x0a, 0x20, 0x20, 0x20, 0x20, // 666;.    do.    
	0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x5f, // {.        bool _
	0x34, 0x30, 0x33, 0x20, 0x3d, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, // 403 = _mtl_u.Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, // reo_MS_ZPD_YAxis
	0x2e, 0x7a, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // .z != 0.0;.     
	0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x66, 0x72, 0x61, 0x63, 0x74, 0x28, 0x67, 0x6c, 0x5f, //    if (fract(gl_
	0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x30, 0x2e, // FragCoord.y * 0.
	0x35, 0x29, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 5) < 0.5).      
	0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //   {.            
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x34, 0x36, 0x34, 0x20, 0x3d, 0x20, 0x66, 0x61, 0x73, // float _464 = fas
	0x74, 0x3a, 0x3a, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x66, 0x6d, 0x61, 0x28, // t::max(0.0, fma(
	0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, // _mtl_u.Stereo_MS
	0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, 0x20, 0x31, 0x2e, // _ZPD_YAxis.x, 1.
	0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x66, // 0 - (1.0 / fma(f
	0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, 0x6e, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, // ast::min(fast::m
	0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, // in(tex_stereo_de
	0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, // pth.sample(tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, // tereo_depthSampl
	0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, // er, (in.v_texcoo
	0x72, 0x64, 0x30, 0x20, 0x2b, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, // rd0 + select(flo
	0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, // at2(0.5 * _mtl_u
	0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, // .Stereo_MS_ZPD_Y
	0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, // Axis.x, 0.0), fl
	0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x2a, 0x20, // oat2(0.0, 0.5 * 
	0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, // _mtl_u.Stereo_MS
	0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, // _ZPD_YAxis.x), b
	0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x34, 0x30, 0x33, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, // ool2(_403))), le
	0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x2c, 0x20, 0x74, 0x65, 0x78, // vel(0.0)).x, tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, // _stereo_depth.sa
	0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // mple(tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, // depthSampler, (i
	0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2b, 0x20, // n.v_texcoord0 + 
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, // select(float2(0.
	0x36, 0x36, 0x36, 0x30, 0x30, 0x30, 0x30, 0x30, 0x38, 0x35, 0x38, 0x33, 0x30, 0x36, 0x38, 0x38, // 6660000085830688
	0x34, 0x37, 0x36, 0x35, 0x36, 0x32, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, // 4765625 * _mtl_u
	0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, // .Stereo_MS_ZPD_Y
	0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, // Axis.x, 0.0), fl
	0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x30, // oat2(0.0, 0.6660
	0x30, 0x30, 0x30, 0x30, 0x38, 0x35, 0x38, 0x33, 0x30, 0x36, 0x38, 0x38, 0x34, 0x37, 0x36, 0x35, // 0000858306884765
	0x36, 0x32, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, // 625 * _mtl_u.Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, // reo_MS_ZPD_YAxis
	0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x34, 0x30, 0x33, 0x29, // .x), bool2(_403)
	0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, // )), level(0.0)).
	0x78, 0x29, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, // x), tex_stereo_d
	0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, // epth.sample(tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, // stereo_depthSamp
	0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, // ler, (in.v_texco
	0x6f, 0x72, 0x64, 0x30, 0x20, 0x2b, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, // ord0 + select(fl
	0x6f, 0x61, 0x74, 0x32, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, // oat2(_mtl_u.Ster
	0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, // eo_MS_ZPD_YAxis.
	0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, // x, 0.0), float2(
	0x30, 0x2e, 0x30, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, // 0.0, _mtl_u.Ster
	0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, // eo_MS_ZPD_YAxis.
	0x78, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x34, 0x30, 0x33, 0x29, 0x29, // x), bool2(_403))
	0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, // ), level(0.0)).x
	0x29, 0x2c, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, // ), (1.0 / _mtl_u
	0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, // .Stereo_MS_ZPD_Y
	0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x30, // Axis.y) - 0.5, 0
	0x2e, 0x35, 0x29, 0x29, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x77, 0x5f, 0x68, // .5)), _mtl_u.w_h
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, // _height.w));.   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x36, 0x36, 0x36, 0x20, 0x3d, 0x20, //          _666 = 
	0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2e, 0x73, 0x61, // tex_stereo_fb.sa
	0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // mple(tex_stereo_
	0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, 0x6e, 0x2e, 0x76, // fbSampler, (in.v
	0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2b, 0x20, 0x73, 0x65, 0x6c, // _texcoord0 + sel
	0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x5f, 0x34, 0x36, 0x34, 0x2c, // ect(float2(_464,
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, //  0.0), float2(0.
	0x30, 0x2c, 0x20, 0x2d, 0x5f, 0x34, 0x36, 0x34, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, // 0, -_464), bool2
	0x28, 0x5f, 0x34, 0x30, 0x33, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, // (_403))), level(
	0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // 0.0)).xyz;.     
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, //        break;.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //       }.        
	0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, // else.        {. 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, //            float
	0x20, 0x5f, 0x35, 0x33, 0x35, 0x20, 0x3d, 0x20, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x61, //  _535 = fast::ma
	0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, // x(0.0, fma(_mtl_
	0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, // u.Stereo_MS_ZPD_
	0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, // YAxis.x, 1.0 - (
	0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, // 1.0 / fma(fast::
	0x6d, 0x69, 0x6e, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, // min(fast::min(te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, // x_stereo_depth.s
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // ample(tex_stereo
	0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, // _depthSampler, (
	0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2d, // in.v_texcoord0 -
	0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, //  select(float2(0
	0x2e, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, // .5 * _mtl_u.Ster
	0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, // eo_MS_ZPD_YAxis.
	0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, // x, 0.0), float2(
	0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, // 0.0, 0.5 * _mtl_
	0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, // u.Stereo_MS_ZPD_
	0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, // YAxis.x), bool2(
	0x5f, 0x34, 0x30, 0x33, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, // _403))), level(0
	0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // .0)).x, tex_ster
	0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, // eo_depth.sample(
	0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, // tex_stereo_depth
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, // Sampler, (in.v_t
	0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2d, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, // excoord0 - selec
	0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x30, 0x30, // t(float2(0.66600
	0x30, 0x30, 0x30, 0x38, 0x35, 0x38, 0x33, 0x30, 0x36, 0x38, 0x38, 0x34, 0x37, 0x36, 0x35, 0x36, // 0008583068847656
	0x32, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, // 25 * _mtl_u.Ster
	0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, // eo_MS_ZPD_YAxis.
	0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, // x, 0.0), float2(
	0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x30, 0x30, 0x30, 0x30, 0x30, 0x38, // 0.0, 0.666000008
	0x35, 0x38, 0x33, 0x30, 0x36, 0x38, 0x38, 0x34, 0x37, 0x36, 0x35, 0x36, 0x32, 0x35, 0x20, 0x2a, // 58306884765625 *
	0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, //  _mtl_u.Stereo_M
	0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, // S_ZPD_YAxis.x), 
	0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x34, 0x30, 0x33, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, // bool2(_403))), l
	0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x74, // evel(0.0)).x), t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, // ex_stereo_depth.
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // sample(tex_stere
	0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, // o_depthSampler, 
	0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, // (in.v_texcoord0 
	0x2d, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, // - select(float2(
	0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, // _mtl_u.Stereo_MS
	0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, // _ZPD_YAxis.x, 0.
	0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, // 0), float2(0.0, 
	0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, // _mtl_u.Stereo_MS
	0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, // _ZPD_YAxis.x), b
	0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x34, 0x30, 0x33, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, // ool2(_403))), le
	0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x28, 0x31, // vel(0.0)).x), (1
	0x2e, 0x30, 0x20, 0x2f, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, // .0 / _mtl_u.Ster
	0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, // eo_MS_ZPD_YAxis.
	0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x2c, // y) - 0.5, 0.5)),
	0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, //  _mtl_u.w_h_heig
	0x68, 0x74, 0x2e, 0x77, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ht.w));.        
	0x20, 0x20, 0x20, 0x20, 0x5f, 0x36, 0x36, 0x36, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, //     _666 = tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, // tereo_fb.sample(
	0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, // tex_stereo_fbSam
	0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, // pler, (in.v_texc
	0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2d, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, // oord0 - select(f
	0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x5f, 0x35, 0x33, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // loat2(_535, 0.0)
	0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x5f, // , float2(0.0, -_
	0x35, 0x33, 0x35, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x34, 0x30, 0x33, // 535), bool2(_403
	0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, // ))), level(0.0))
	0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // .xyz;.          
	0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //   break;.       
	0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, //  }.        break
	0x3b, 0x20, 0x2f, 0x2f, 0x20, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, // ; // unreachable
	0x20, 0x77, 0x6f, 0x72, 0x6b, 0x61, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x0a, 0x20, 0x20, 0x20, 0x20, //  workaround.    
	0x7d, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x28, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x29, 0x3b, 0x0a, // } while(false);.
	0x20, 0x20, 0x20, 0x20, 0x6f, 0x75, 0x74, 0x2e, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, //     out.bgfx_Fra
	0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, // gData0 = float4(
	0x5f, 0x36, 0x36, 0x36, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, // _666, 1.0);.    
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6f, 0x75, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x0a, 0x00, // return out;.}...
	0x00, 0x60, 0x00,                                                                               // .`.
};
static const uint8_t fs_pp_stereo_int_essl[11028] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x2b, // FSH.o.><.......+
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x33, 0x32, 0x30, 0x20, 0x65, // ..#version 320 e
	0x73, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, // s.#define attrib
	0x75, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x76, // ute in.#define v
	0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, // arying in.precis
	0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3b, // ion highp float;
	0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, // .precision highp
	0x20, 0x69, 0x6e, 0x74, 0x3b, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x73, 0x68, //  int;.#define sh
	0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, // adow2D(_sampler,
	0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, //  _coord) texture
	0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, // (_sampler, _coor
	0x64, 0x29, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x73, 0x68, 0x61, 0x64, 0x6f, // d).#define shado
	0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // w2DProj(_sampler
	0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // , _coord) textur
	0x65, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, // eProj(_sampler, 
	0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x0a, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x65, 0x64, 0x69, // _coord).out medi
	0x75, 0x6d, 0x70, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, // ump vec4 bgfx_Fr
	0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, // agColor;.varying
	0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, //  vec2 v_texcoord
	0x30, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, // 0;.vec3 instMul(
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x20, // vec3 _vec, mat3 
	0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // _mtx) { return (
	0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, //  (_vec) * (_mtx)
	0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, //  ); }.vec3 instM
	0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, // ul(mat3 _mtx, ve
	0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, // c3 _vec) { retur
	0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, // n ( (_mtx) * (_v
	0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, // ec) ); }.vec4 in
	0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, // stMul(vec4 _vec,
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, //  mat4 _mtx) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, // turn ( (_vec) * 
	0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, // (_mtx) ); }.vec4
	0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, //  instMul(mat4 _m
	0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, // tx, vec4 _vec) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, //  return ( (_mtx)
	0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, //  * (_vec) ); }.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, 0x70, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, // loat rcp(float _
	0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x2f, // a) { return 1.0/
	0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, // _a; }.vec2 rcp(v
	0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // ec2 _a) { return
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, //  vec2(1.0)/_a; }
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, // .vec3 rcp(vec3 _
	0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, // a) { return vec3
	0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, // (1.0)/_a; }.vec4
	0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, //  rcp(vec4 _a) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x31, 0x2e, 0x30, 0x29, // return vec4(1.0)
	0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x65, 0x63, 0x32, // /_a; }.vec2 vec2
	0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, // _splat(float _x)
	0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, //  { return vec2(_
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, // x, _x); }.vec3 v
	0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // ec3_splat(float 
	0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, // _x) { return vec
	0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, // 3(_x, _x, _x); }
	0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, // .vec4 vec4_splat
	0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // (float _x) { ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, // urn vec4(_x, _x,
	0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, //  _x, _x); }.uvec
	0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, // 2 uvec2_splat(ui
	0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // nt _x) { return 
	0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, // uvec2(_x, _x); }
	0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, // .uvec3 uvec3_spl
	0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // at(uint _x) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, // turn uvec3(_x, _
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x34, 0x20, // x, _x); }.uvec4 
	0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, // uvec4_splat(uint
	0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, //  _x) { return uv
	0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, // ec4(_x, _x, _x, 
	0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, // _x); }.mat4 mtxF
	0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, // romRows(vec4 _0,
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, //  vec4 _1, vec4 _
	0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // 2, vec4 _3).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, // turn transpose(m
	0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, // at4(_0, _1, _2, 
	0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, // _3) );.}.mat4 mt
	0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, // xFromCols(vec4 _
	0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // 0, vec4 _1, vec4
	0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, //  _2, vec4 _3).{.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, // return mat4(_0, 
	0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, // _1, _2, _3);.}.m
	0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, // at3 mtxFromRows(
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, // vec3 _0, vec3 _1
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // , vec3 _2).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, // urn transpose(ma
	0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x20, 0x29, // t3(_0, _1, _2) )
	0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, // ;.}.mat3 mtxFrom
	0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, // Cols(vec3 _0, ve
	0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, // c3 _1, vec3 _2).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, // {.return mat3(_0
	0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, // , _1, _2);.}.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, // form vec4 u_view
	0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, // Rect;.uniform ve
	0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x54, 0x65, 0x78, 0x65, 0x6c, 0x3b, 0x0a, // c4 u_viewTexel;.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, // uniform mat4 u_v
	0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, // iew;.uniform mat
	0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, // 4 u_invView;.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x70, 0x72, 0x6f, 0x6a, // form mat4 u_proj
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, // ;.uniform mat4 u
	0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // _invProj;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, // m mat4 u_viewPro
	0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, // j;.uniform mat4 
	0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, // u_invViewProj;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, // niform mat4 u_mo
	0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // del[32];.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, //  mat4 u_modelVie
	0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, // w;.uniform mat4 
	0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, // u_modelViewProj;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, // .uniform vec4 u_
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x66, 0x34, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // alphaRef4;.float
	0x20, 0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, //  sqr(const float
	0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, //  v).{.return v*v
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, // ;.}.vec2 sqr(con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // st vec2 v).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // urn v*v;.}.vec3 
	0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, // sqr(const vec3 v
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, // ).{.return v*v;.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6d, 0x75, 0x6c, 0x5f, 0x77, 0x31, 0x28, 0x63, 0x6f, // }.vec3 mul_w1(co
	0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, // nst vec3 v, cons
	0x74, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, // t mat4 m).{.retu
	0x72, 0x6e, 0x20, 0x76, 0x2e, 0x78, 0x2a, 0x6d, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, // rn v.x*m[0].xyz 
	0x2b, 0x20, 0x28, 0x76, 0x2e, 0x79, 0x2a, 0x6d, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, // + (v.y*m[1].xyz 
	0x2b, 0x20, 0x28, 0x76, 0x2e, 0x7a, 0x2a, 0x6d, 0x5b, 0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, // + (v.z*m[2].xyz 
	0x2b, 0x20, 0x6d, 0x5b, 0x33, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // + m[3].xyz));.}.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, // float acos_appro
	0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // x_divPI(const fl
	0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // oat v).{.const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, // loat x = abs(v);
	0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, // .if(1. - x <= 0.
	0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, // 00006103515625).
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, // return (v >= 0.)
	0x20, 0x3f, 0x20, 0x30, 0x2e, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, //  ? 0. : 1.;.cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, // t float res = ((
	0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, // -0.155972/3.1415
	0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, // 9265358979323846
	0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, // 26433832795) * x
	0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, //  + (1.56467/3.14
	0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, // 1592653589793238
	0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, // 4626433832795) )
	0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, //  * sqrt(1. - x);
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, // .return (v >= 0.
	0x29, 0x20, 0x3f, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x72, // ) ? res : 1. - r
	0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x74, 0x61, 0x6e, // es;.}.float atan
	0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, // 2_approx_div2PI(
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x79, 0x2c, 0x20, 0x63, // const float y, c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x29, 0x0a, 0x7b, 0x0a, // onst float x).{.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, // const float abs_
	0x79, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x79, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // y = abs(y);.cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3d, 0x20, // t float abs_x = 
	0x61, 0x62, 0x73, 0x28, 0x78, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, // abs(x);.if(abs_x
	0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, //  <= 0.0000610351
	0x35, 0x36, 0x32, 0x35, 0x20, 0x26, 0x26, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3c, 0x3d, // 5625 && abs_y <=
	0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, //  0.0000610351562
	0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x30, 0x2e, 0x3b, 0x0a, 0x63, 0x6f, // 5).return 0.;.co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x61, // nst float r = (a
	0x62, 0x73, 0x5f, 0x78, 0x20, 0x2d, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x20, 0x2f, 0x20, // bs_x - abs_y) / 
	0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2b, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x3b, // (abs_x + abs_y);
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x6e, 0x67, // .const float ang
	0x6c, 0x65, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, // le = ((x < 0.) ?
	0x20, 0x28, 0x33, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x20, 0x3a, 0x20, 0x28, 0x31, 0x2e, 0x2f, 0x38, //  (3./8.) : (1./8
	0x2e, 0x29, 0x29, 0x0a, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x32, 0x31, 0x31, 0x38, 0x36, 0x38, 0x20, // .)).+ (0.211868 
	0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, // /(2.*3.141592653
	0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, // 5897932384626433
	0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x72, 0x20, 0x2a, 0x20, 0x72, 0x20, // 832795) * r * r 
	0x2d, 0x20, 0x30, 0x2e, 0x39, 0x38, 0x37, 0x33, 0x30, 0x35, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, // - 0.987305 /(2.*
	0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, // 3.14159265358979
	0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, // 3238462643383279
	0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, // 5)) * ((x < 0.) 
	0x3f, 0x20, 0x2d, 0x72, 0x20, 0x3a, 0x20, 0x72, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // ? -r : r);.retur
	0x6e, 0x20, 0x28, 0x79, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x61, 0x6e, // n (y < 0.) ? -an
	0x67, 0x6c, 0x65, 0x20, 0x3a, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // gle : angle;.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x73, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, // loat asin_approx
	0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, // _divPI(const flo
	0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // at v).{.const fl
	0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, // oat x = abs(v);.
	0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, // if(1. - x <= 0.0
	0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, // 0006103515625).r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, // eturn (v >= 0.) 
	0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x3b, 0x0a, 0x63, 0x6f, // ? 0.5 : -0.5;.co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, // nst float res = 
	0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, // ((-0.155972/3.14
	0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, // 1592653589793238
	0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, // 4626433832795) *
	0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, //  x + (1.56467/3.
	0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, // 1415926535897932
	0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, // 384626433832795)
	0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, //  ) * sqrt(1. - x
	0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, // );.return (v >= 
	0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x20, // 0.) ? 0.5 - res 
	0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, // : -0.5 + res;.}.
	0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x61, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x71, 0x75, 0x69, // vec2 ray_to_equi
	0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x75, 0x76, 0x28, 0x63, // rectangular_uv(c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x61, 0x79, 0x29, 0x0a, 0x7b, // onst vec3 ray).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x0a, 0x30, 0x2e, // .return vec2(.0.
	0x35, 0x20, 0x2b, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, // 5 + atan2_approx
	0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x79, 0x2c, 0x20, 0x72, // _div2PI(ray.y, r
	0x61, 0x79, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, // ay.x),.acos_appr
	0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x7a, 0x29, 0x29, // ox_divPI(ray.z))
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, // ;.}.float InvsRG
	0x42, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, // B(const float co
	0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // lor).{.if (color
	0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, 0x34, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, //  <= 0.04045).ret
	0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, // urn color * (1.0
	0x2f, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, // /12.92);.else.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, // turn pow(color *
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x28, //  (1.0/1.055) + (
	0x30, 0x2e, 0x30, 0x35, 0x35, 0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, // 0.055/1.055), 2.
	0x34, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x52, // 4);.}.float InvR
	0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, // ec709(const floa
	0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, // t color).{.if (c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x38, 0x31, 0x29, 0x0a, 0x72, // olor <= 0.081).r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, // eturn color * (1
	0x2e, 0x30, 0x2f, 0x34, 0x2e, 0x35, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, // .0/4.5);.else.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, // turn pow(color *
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, 0x20, 0x2b, 0x20, 0x28, //  (1.0/1.099) + (
	0x30, 0x2e, 0x30, 0x39, 0x39, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, 0x2c, 0x20, 0x31, 0x2e, // 0.099/1.099), 1.
	0x30, 0x2f, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // 0/0.45);.}.float
	0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, //  InvGamma(const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, // float color).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, // eturn InvsRGB(co
	0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, // lor);.}.vec3 Inv
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, // Gamma(const vec3
	0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, //  color).{.return
	0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, //  vec3(InvGamma(c
	0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, // olor.x),InvGamma
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, // (color.y),InvGam
	0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // ma(color.z));.}.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, // vec3 InvToneMap(
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // const vec3 color
	0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // ).{.const float 
	0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x30, 0x2e, 0x35, 0x2f, 0x30, 0x2e, // inv_2bh = 0.5/0.
	0x32, 0x35, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // 25;.const float 
	0x62, 0x68, 0x20, 0x3d, 0x20, 0x34, 0x2e, 0x30, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2d, 0x20, // bh = 4.0*0.25 - 
	0x32, 0x2e, 0x30, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6c, // 2.0;.return (col
	0x6f, 0x72, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2b, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, // or - 1.0 + sqrt(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2a, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x20, 0x62, // color*(color + b
	0x68, 0x29, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x2a, 0x69, 0x6e, 0x76, 0x5f, 0x32, // h) + 1.0))*inv_2
	0x62, 0x68, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x52, 0x47, 0x42, // bh;.}.float sRGB
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, // (const float f).
	0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, // {.float s;.if (f
	0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x33, 0x31, 0x33, 0x30, 0x38, 0x29, 0x0a, 0x73, //  <= 0.0031308).s
	0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, //  = 12.92 * f;.el
	0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x20, 0x2a, 0x20, 0x70, // se.s = 1.055 * p
	0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x34, 0x29, 0x20, 0x2d, // ow(f, 1.0/2.4) -
	0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, //  0.055;.return s
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, // ;.}.float Rec709
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, // (const float f).
	0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, // {.float s;.if (f
	0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x34, //  <= 0.018).s = 4
	0x2e, 0x35, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, // .5 * f;.else.s =
	0x20, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, //  1.099 * pow(f, 
	0x30, 0x2e, 0x34, 0x35, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x3b, 0x0a, 0x72, // 0.45) - 0.099;.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // eturn s;.}.float
	0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, //  FBGamma(const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // loat color).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, // turn sRGB(color)
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, // ;.}.vec2 FBGamma
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // (const vec2 colo
	0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, // r).{.return vec2
	0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, // (FBGamma(color.x
	0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, // ),FBGamma(color.
	0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, // y));.}.vec3 FBGa
	0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, // mma(const vec3 c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // olor).{.return v
	0x65, 0x63, 0x33, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // ec3(FBGamma(colo
	0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, // r.x),FBGamma(col
	0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, // or.y),FBGamma(co
	0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // lor.z));.}.vec3 
	0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x32, 0x32, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // FBGamma22(const 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // vec3 color).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, // turn vec3(pow(co
	0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, // lor.x, 1.0/2.2),
	0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, 0x30, // pow(color.y, 1.0
	0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, // /2.2),pow(color.
	0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // z, 1.0/2.2));.}.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, // float FBToneMap(
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x29, 0x0a, 0x7b, // const float l).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6c, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, // .return l * ((l*
	0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, // 0.25 + 1.0) / (l
	0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, //  + 1.0));.}.vec2
	0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, //  FBToneMap(const
	0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x63, //  vec2 color).{.c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, // onst float l = d
	0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, // ot(color,vec2(0.
	0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, // 176204+0.0108109
	0x2a, 0x30, 0x2e, 0x35, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2b, 0x30, 0x2e, // *0.5,0.812985+0.
	0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x3b, 0x0a, 0x72, // 0108109*0.5));.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, // eturn color * ((
	0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, // l*0.25 + 1.0) / 
	0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // (l + 1.0));.}.ve
	0x63, 0x33, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, // c3 FBToneMap(con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, // st vec3 color).{
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, // .const float l =
	0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x33, 0x28, //  dot(color,vec3(
	0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, // 0.176204,0.81298
	0x35, 0x2c, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x29, 0x29, 0x3b, 0x0a, 0x72, // 5,0.0108109));.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, // eturn color * ((
	0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, // l*0.25 + 1.0) / 
	0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // (l + 1.0));.}.ve
	0x63, 0x34, 0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x28, 0x63, 0x6f, 0x6e, 0x73, // c4 Additive(cons
	0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, // t vec4 cBase, co
	0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, // nst vec4 cBlend,
	0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, //  const float per
	0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, // cent).{.return c
	0x42, 0x61, 0x73, 0x65, 0x20, 0x2b, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, // Base + cBlend*pe
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, // rcent;.}.vec3 Sc
	0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, // reen (const vec3
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, //  cBase, const ve
	0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // c3 cBlend).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, // urn 1.0 - (1.0 -
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, //  cBase) * (1.0 -
	0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, //  cBlend);.}.vec4
	0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, //  Screen (const v
	0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, // ec4 cBase, const
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, //  vec4 cBlend).{.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, // return 1.0 - (1.
	0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, // 0 - cBase) * (1.
	0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // 0 - cBlend);.}.v
	0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x63, // ec3 ScreenHDR (c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, // onst vec3 cBase,
	0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, //  const vec3 cBle
	0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, // nd).{.return max
	0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, // (1.0 - (1.0 - cB
	0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, // ase) * (1.0 - cB
	0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x2c, 0x30, // lend), vec3(0.,0
	0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, // .,0.));.}.vec4 S
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // creenHDR (const 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, // vec4 cBase, cons
	0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, // t vec4 cBlend).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, // .return max(1.0 
	0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, // - (1.0 - cBase) 
	0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, // * (1.0 - cBlend)
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, // , vec4(0.,0.,0.,
	0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4d, 0x75, 0x6c, // 0.));.}.vec4 Mul
	0x74, 0x69, 0x70, 0x6c, 0x79, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, // tiply (const vec
	0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, // 4 cBase, const v
	0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, // ec4 cBlend, cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, // t float percent)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, // .{.return cBase 
	0x2a, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, // * cBlend*percent
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, // ;.}.vec4 Overlay
	0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, //  (const vec4 cBa
	0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, // se, const vec4 c
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, // Blend).{.vec4 cN
	0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, // ew = step(0.5, c
	0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x69, // Base);.cNew = mi
	0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, // x(cBase*cBlend*2
	0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, // .0, 1.0-2.0*(1.0
	0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, // -cBase)*(1.0-cBl
	0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, // end), cNew);.ret
	0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, // urn cNew;.}.vec4
	0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x48, 0x44, 0x52, 0x20, 0x28, 0x63, 0x6f, 0x6e, //  OverlayHDR (con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, // st vec4 cBase, c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, // onst vec4 cBlend
	0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, // ).{.vec4 cNew = 
	0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, // step(0.5, cBase)
	0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x6d, 0x69, 0x78, // ;.cNew = max(mix
	0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, // (cBase*cBlend*2.
	0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, // 0, 1.0-2.0*(1.0-
	0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, // cBase)*(1.0-cBle
	0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // nd), cNew), vec4
	0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, // (0.,0.,0.,0.));.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // return cNew;.}.v
	0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x73, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, // ec3 cos_hemisphe
	0x72, 0x65, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // re_sample(const 
	0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // vec2 t).{.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x68, 0x69, 0x20, 0x3d, 0x20, 0x74, 0x2e, 0x79, 0x20, // float phi = t.y 
	0x2a, 0x20, 0x28, 0x32, 0x2e, 0x30, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, // * (2.0*3.1415926
	0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, // 5358979323846264
	0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, // 33832795);.const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, //  float cosTheta 
	0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x74, 0x2e, 0x78, // = sqrt(1.0 - t.x
	0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, // );.const float s
	0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x74, // inTheta = sqrt(t
	0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x70, 0x2c, 0x63, 0x70, // .x);.float sp,cp
	0x3b, 0x0a, 0x73, 0x69, 0x6e, 0x63, 0x6f, 0x73, 0x28, 0x70, 0x68, 0x69, 0x2c, 0x73, 0x70, 0x2c, // ;.sincos(phi,sp,
	0x63, 0x70, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, // cp);.return vec3
	0x28, 0x63, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, // (cp * sinTheta, 
	0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x73, 0x70, 0x20, 0x2a, 0x20, 0x73, // cosTheta, sp * s
	0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, // inTheta);.}.vec3
	0x20, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, //  rotate_to_vecto
	0x72, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // r_upper(const ve
	0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // c3 vec, const ve
	0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x28, // c3 normal).{.if(
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x3e, 0x20, 0x2d, 0x30, 0x2e, 0x39, 0x39, // normal.y > -0.99
	0x39, 0x39, 0x39, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, // 999).{.const flo
	0x61, 0x74, 0x20, 0x68, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x28, 0x31, 0x2e, 0x30, 0x2b, // at h = 1.0/(1.0+
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, // normal.y);.const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x20, 0x3d, 0x20, 0x68, 0x2a, 0x6e, 0x6f, //  float hz = h*no
	0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // rmal.z;.const fl
	0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x3d, 0x20, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, // oat hzx = hz*nor
	0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, // mal.x;.return ve
	0x63, 0x33, 0x28, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, // c3(.vec.x * (nor
	0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, // mal.y+hz*normal.
	0x7a, 0x29, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, // z) + vec.y * nor
	0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, // mal.x - vec.z * 
	0x68, 0x7a, 0x78, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, // hzx,.vec.y * nor
	0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, // mal.y - vec.x * 
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, // normal.x - vec.z
	0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x2c, 0x0a, 0x76, 0x65, 0x63, //  * normal.z,.vec
	0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x20, 0x2d, 0x20, // .y * normal.z - 
	0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x2b, 0x20, 0x76, 0x65, // vec.x * hzx + ve
	0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, // c.z * (normal.y+
	0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, // h*normal.x*norma
	0x6c, 0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x72, 0x65, // l.x));.}.else re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x2d, 0x76, 0x65, 0x63, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, // turn -vec;.}.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // form vec4 Stereo
	0x5f, 0x53, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x0a, 0x75, 0x6e, 0x69, // _Saturation;.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // form vec4 Stereo
	0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x3b, 0x0a, 0x75, // _MS_ZPD_YAxis;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, // niform sampler2D
	0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x3b, 0x0a, //  tex_stereo_fb;.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, // uniform sampler2
	0x44, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, // D tex_stereo_dep
	0x74, 0x68, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, // th;.uniform vec4
	0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, 0x76, 0x65, 0x63, //  w_h_height;.vec
	0x33, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, // 3 gatherEyeColor
	0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x69, 0x73, // (vec2 u, bool is
	0x4c, 0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x62, 0x6f, // Left).{.const bo
	0x6f, 0x6c, 0x20, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, // ol yaxis = (Ster
	0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, // eo_MS_ZPD_YAxis.
	0x7a, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // z != 0.);.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // float MaxSeparat
	0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, // ion = (Stereo_MS
	0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x69, // _ZPD_YAxis.x);.i
	0x66, 0x20, 0x28, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, // f (isLeft).{.con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, // st float lminDep
	0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, // th = min(min(tex
	0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // tureLod(tex_ster
	0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, // eo_depth, u + (y
	0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, // axis ? vec2(0.0,
	0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, //  0.500 * MaxSepa
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, // ration) : vec2(0
	0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, // .500 * MaxSepara
	0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, // tion, 0.0)), 0.0
	0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, // ).x,.textureLod(
	0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, // tex_stereo_depth
	0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, // , u + (yaxis ? v
	0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, // ec2(0.0, 0.666 *
	0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, //  MaxSeparation) 
	0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, // : vec2(0.666 * M
	0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, // axSeparation, 0.
	0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, // 0)), 0.0).x),.te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, // xtureLod(tex_ste
	0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, // reo_depth, u + (
	0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, // yaxis ? vec2(0.0
	0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, // , MaxSeparation)
	0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, //  : vec2( MaxSepa
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, // ration, 0.0)), 0
	0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x70, // .0).x);.float lp
	0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, // arallax = max(0.
	0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, // 0, w_h_height.w 
	0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, // + MaxSeparation 
	0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, // * (1.0 - 1.0 / (
	0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, // 0.5 + lminDepth 
	0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // * (1.0 / (Stereo
	0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, // _MS_ZPD_YAxis.y)
	0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, //  - 0.5))));.retu
	0x72, 0x6e, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, // rn textureLod(te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2b, // x_stereo_fb, u +
	0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, //  (yaxis ? vec2(0
	0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, // .0, -lparallax) 
	0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, // : vec2(lparallax
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, // , 0.0)), 0.0).xy
	0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // z;.}.else.{.cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, // t float rminDept
	0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, // h = min(min(text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // ureLod(tex_stere
	0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, // o_depth, u - (ya
	0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, // xis ? vec2(0.0, 
	0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, // 0.500 * MaxSepar
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, // ation) : vec2(0.
	0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // 500 * MaxSeparat
	0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // ion, 0.0)), 0.0)
	0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, // .x,.textureLod(t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, // ex_stereo_depth,
	0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, //  u - (yaxis ? ve
	0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, // c2(0.0, 0.666 * 
	0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, // MaxSeparation) :
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, //  vec2(0.666 * Ma
	0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, // xSeparation, 0.0
	0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, // )), 0.0).x),.tex
	0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // tureLod(tex_ster
	0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, // eo_depth, u - (y
	0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, // axis ? vec2(0.0,
	0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, //  MaxSeparation) 
	0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, // : vec2( MaxSepar
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, // ation, 0.0)), 0.
	0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x70, 0x61, // 0).x);.float rpa
	0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, // rallax = max(0.0
	0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, // , w_h_height.w +
	0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, //  MaxSeparation *
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, //  (1.0 - 1.0 / (0
	0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, // .5 + rminDepth *
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, //  (1.0 / (Stereo_
	0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, // MS_ZPD_YAxis.y) 
	0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // - 0.5))));.retur
	0x6e, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, // n textureLod(tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, // _stereo_fb, u - 
	0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, // (yaxis ? vec2(0.
	0x30, 0x2c, 0x20, 0x2d, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, // 0, -rparallax) :
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, //  vec2(rparallax,
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, //  0.0)), 0.0).xyz
	0x3b, 0x0a, 0x7d, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, // ;.}.}.void gathe
	0x72, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, // rLeftRightColors
	0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, // (vec2 u, out vec
	0x33, 0x20, 0x6c, 0x63, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, // 3 lcol, out vec3
	0x20, 0x72, 0x63, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x62, //  rcol).{.const b
	0x6f, 0x6f, 0x6c, 0x20, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, // ool yaxis = (Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, // reo_MS_ZPD_YAxis
	0x2e, 0x7a, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, // .z != 0.);.const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, //  float MaxSepara
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, // tion = (Stereo_M
	0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x3b, 0x0a, // S_ZPD_YAxis.x);.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x6d, 0x69, 0x6e, // const float lmin
	0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, // Depth = min(min(
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, // textureLod(tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, // tereo_depth, u +
	0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, //  (yaxis ? vec2(0
	0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, // .0, 0.500 * MaxS
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, // eparation) : vec
	0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // 2(0.500 * MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, // aration, 0.0)), 
	0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, // 0.0).x,.textureL
	0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, // od(tex_stereo_de
	0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, // pth, u + (yaxis 
	0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, // ? vec2(0.0, 0.66
	0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, // 6 * MaxSeparatio
	0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, // n) : vec2(0.666 
	0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, // * MaxSeparation,
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, //  0.0)), 0.0).x),
	0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, // .textureLod(tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, // stereo_depth, u 
	0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // + (yaxis ? vec2(
	0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // 0.0, MaxSeparati
	0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, // on) : vec2( MaxS
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, // eparation, 0.0))
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // , 0.0).x);.float
	0x20, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, //  lparallax = max
	0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, // (0.0, w_h_height
	0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // .w + MaxSeparati
	0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, // on * (1.0 - 1.0 
	0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, // / (0.5 + lminDep
	0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, // th * (1.0 / (Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, // reo_MS_ZPD_YAxis
	0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x6c, // .y) - 0.5))));.l
	0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, // col = textureLod
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, // (tex_stereo_fb, 
	0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, // u + (yaxis ? vec
	0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, // 2(0.0, -lparalla
	0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, // x) : vec2(lparal
	0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // lax, 0.0)), 0.0)
	0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, // .xyz;.const floa
	0x74, 0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, // t rminDepth = mi
	0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, // n(min(textureLod
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, // (tex_stereo_dept
	0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, // h, u - (yaxis ? 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, // vec2(0.0, 0.500 
	0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, // * MaxSeparation)
	0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, //  : vec2(0.500 * 
	0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, // MaxSeparation, 0
	0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, // .0)), 0.0).x,.te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, // xtureLod(tex_ste
	0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, // reo_depth, u - (
	0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, // yaxis ? vec2(0.0
	0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // , 0.666 * MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // aration) : vec2(
	0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, // 0.666 * MaxSepar
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, // ation, 0.0)), 0.
	0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, // 0).x),.textureLo
	0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, // d(tex_stereo_dep
	0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, // th, u - (yaxis ?
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, //  vec2(0.0, MaxSe
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, // paration) : vec2
	0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, // ( MaxSeparation,
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, //  0.0)), 0.0).x);
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, // .float rparallax
	0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, //  = max(0.0, w_h_
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, // height.w + MaxSe
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, // paration * (1.0 
	0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, // - 1.0 / (0.5 + r
	0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, // minDepth * (1.0 
	0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, // / (Stereo_MS_ZPD
	0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, // _YAxis.y) - 0.5)
	0x29, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, // )));.rcol = text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // ureLod(tex_stere
	0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, // o_fb, u - (yaxis
	0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x72, 0x70, //  ? vec2(0.0, -rp
	0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // arallax) : vec2(
	0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, // rparallax, 0.0))
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, // , 0.0).xyz;.}.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // iform mat4 Stere
	0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, // o_LeftMat;.unifo
	0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, // rm mat4 Stereo_R
	0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // ightMat;.uniform
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, //  vec4 Stereo_Lef
	0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, // tLuminance_Gamma
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, // ;.uniform vec4 S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, // tereo_RightLumin
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x3b, 0x0a, 0x76, // ance_DynDesat;.v
	0x6f, 0x69, 0x64, 0x20, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x65, 0x73, 0x61, 0x74, // oid DynamicDesat
	0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, // Anaglyph(const v
	0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // ec3 lCol, const 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, // vec3 rCol, out v
	0x65, 0x63, 0x33, 0x20, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, // ec3 lDesatCol, o
	0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, // ut vec3 rDesatCo
	0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // l).{.const float
	0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, //  left2LeftLum = 
	0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // dot(lCol, Stereo
	0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, // _LeftLuminance_G
	0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, // amma.xyz);.const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, //  float left2Righ
	0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, // tLum = dot(lCol,
	0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, //  Stereo_RightLum
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, // inance_DynDesat.
	0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, // xyz);.const floa
	0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, // t right2LeftLum 
	0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, // = dot(rCol, Ster
	0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, // eo_LeftLuminance
	0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, // _Gamma.xyz);.con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, // st float right2R
	0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, // ightLum = dot(rC
	0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, // ol, Stereo_Right
	0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, // Luminance_DynDes
	0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // at.xyz);.const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x6c, // loat leftLum = l
	0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x6c, 0x65, // eft2LeftLum + le
	0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, // ft2RightLum;.con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // st float rightLu
	0x6d, 0x20, 0x3d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, // m = right2LeftLu
	0x6d, 0x20, 0x2b, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, // m + right2RightL
	0x75, 0x6d, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // um;.const float 
	0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, // leftDesat = Ster
	0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, // eo_RightLuminanc
	0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, // e_DynDesat.w * a
	0x62, 0x73, 0x28, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // bs((left2LeftLum
	0x20, 0x2d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, //  - left2RightLum
	0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, // ) / (leftLum + 0
	0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // .0001));.const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x20, // loat rightDesat 
	0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // = Stereo_RightLu
	0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, // minance_DynDesat
	0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, // .w * abs((right2
	0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, // LeftLum - right2
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x72, 0x69, 0x67, // RightLum) / (rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, 0x29, // htLum + 0.0001))
	0x3b, 0x0a, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, // ;.lDesatCol = mi
	0x78, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, // x(lCol, vec3_spl
	0x61, 0x74, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x66, // at(leftLum), lef
	0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x72, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, // tDesat);.rDesatC
	0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, // ol = mix(rCol, v
	0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, // ec3_splat(rightL
	0x75, 0x6d, 0x29, 0x2c, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, // um), rightDesat)
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x41, // ;.}.vec3 LinearA
	0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // naglyph(const ve
	0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, // c3 lCol, const v
	0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // ec3 rCol).{.cons
	0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x28, // t vec3 color = (
	0x28, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, // ( (vec4(lCol, 1.
	0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, // )) * (Stereo_Lef
	0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x20, 0x28, 0x76, 0x65, 0x63, // tMat) ) + ( (vec
	0x34, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, // 4(rCol, 1.)) * (
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x29, // Stereo_RightMat)
	0x20, 0x29, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, //  )).rgb;.return 
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // color;.}.uniform
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, //  vec4 Stereo_Deg
	0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, // hostGamma;.unifo
	0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, // rm mat4 Stereo_D
	0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3b, 0x0a, 0x76, 0x65, // eghostFilter;.ve
	0x63, 0x33, 0x20, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, // c3 DeghostAnagly
	0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, // ph(const vec3 lC
	0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, // ol, const vec3 r
	0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, // Col).{.const vec
	0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, // 3 color = Linear
	0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, // Anaglyph(lCol, r
	0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, // Col);.return ( (
	0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // pow(color, Stere
	0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x72, // o_DeghostGamma.r
	0x67, 0x62, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x53, 0x74, 0x65, // gb)) * (mat3(Ste
	0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, // reo_DeghostFilte
	0x72, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // r[0].xyz, Stereo
	0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x31, // _DeghostFilter[1
	0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, // ].xyz, Stereo_De
	0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x32, 0x5d, 0x2e, 0x78, // ghostFilter[2].x
	0x79, 0x7a, 0x29, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x6d, // yz)) );.}.void m
	0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, // ain().{.bgfx_Fra
	0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x67, 0x61, // gColor = vec4(ga
	0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x76, 0x5f, 0x74, // therEyeColor(v_t
	0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2c, 0x20, 0x66, 0x72, 0x61, 0x63, 0x28, 0x67, // excoord0, frac(g
	0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x2e, 0x79, 0x2a, 0x30, 0x2e, // l_FragCoord.y*0.
	0x35, 0x29, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, // 5) < 0.5), 1.0);
	0x0a, 0x7d, 0x0a, 0x00,                                                                         // .}..
};
static const uint8_t fs_pp_stereo_int_glsl[11398] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x73, 0x2c, // FSH.o.><......s,
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x34, 0x34, 0x30, 0x0a, 0x6f, // ..#version 440.o
	0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, // ut vec4 bgfx_Fra
	0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, // gColor;.#define 
	0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x62, 0x67, 0x66, // gl_FragColor bgf
	0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x0a, 0x23, 0x64, 0x65, 0x66, // x_FragColor.#def
	0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x20, 0x20, 0x20, // ine texture2D   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x0a, 0x23, //        texture.#
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, // define texture2D
	0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // Lod       textur
	0x65, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, // eLod.#define tex
	0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ture2DGrad      
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, // textureGrad.#def
	0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, // ine texture2DPro
	0x6a, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, // jLod   texturePr
	0x6f, 0x6a, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, // ojLod.#define te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, 0x20, // xture2DProjGrad 
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, //  textureProjGrad
	0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // .#define texture
	0x43, 0x75, 0x62, 0x65, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, // CubeLod     text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, // ureLod.#define t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, // extureCubeGrad  
	0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, //   textureGrad.#d
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x33, 0x44, 0x20, // efine texture3D 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, //          texture
	0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // .#define texture
	0x32, 0x44, 0x4c, 0x6f, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x20, 0x74, 0x65, 0x78, 0x74, // 2DLodOffset text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x0a, 0x23, 0x64, 0x65, // ureLodOffset.#de
	0x66, 0x69, 0x6e, 0x65, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x69, // fine attribute i
	0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, // n.#define varyin
	0x67, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x62, 0x67, 0x66, // g in.#define bgf
	0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, // xShadow2D(_sampl
	0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, // er, _coord)     
	0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, // vec4_splat(textu
	0x72, 0x65, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, // re(_sampler, _co
	0x6f, 0x72, 0x64, 0x29, 0x20, 0x29, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x62, // ord) ).#define b
	0x67, 0x66, 0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x28, // gfxShadow2DProj(
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, // _sampler, _coord
	0x29, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, // ) vec4_splat(tex
	0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // tureProj(_sample
	0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x29, 0x0a, 0x76, 0x61, 0x72, // r, _coord) ).var
	0x79, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, // ying vec2 v_texc
	0x6f, 0x6f, 0x72, 0x64, 0x30, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, // oord0;.vec3 inst
	0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, // Mul(vec3 _vec, m
	0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // at3 _mtx) { retu
	0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, // rn ( (_vec) * (_
	0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, // mtx) ); }.vec3 i
	0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, // nstMul(mat3 _mtx
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, // , vec3 _vec) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, // eturn ( (_mtx) *
	0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, //  (_vec) ); }.vec
	0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, // 4 instMul(vec4 _
	0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, // vec, mat4 _mtx) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, // { return ( (_vec
	0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, // ) * (_mtx) ); }.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, // vec4 instMul(mat
	0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, // 4 _mtx, vec4 _ve
	0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, // c) { return ( (_
	0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, // mtx) * (_vec) );
	0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, 0x70, 0x28, 0x66, 0x6c, 0x6f, //  }.float rcp(flo
	0x61, 0x74, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // at _a) { return 
	0x31, 0x2e, 0x30, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, // 1.0/_a; }.vec2 r
	0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // cp(vec2 _a) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, // turn vec2(1.0)/_
	0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, // a; }.vec3 rcp(ve
	0x63, 0x33, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // c3 _a) { return 
	0x76, 0x65, 0x63, 0x33, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, // vec3(1.0)/_a; }.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x61, // vec4 rcp(vec4 _a
	0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, // ) { return vec4(
	0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, // 1.0)/_a; }.vec2 
	0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, // vec2_splat(float
	0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, //  _x) { return ve
	0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, // c2(_x, _x); }.ve
	0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, // c3 vec3_splat(fl
	0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // oat _x) { return
	0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, //  vec3(_x, _x, _x
	0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, // ); }.vec4 vec4_s
	0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, // plat(float _x) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, //  return vec4(_x,
	0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, //  _x, _x, _x); }.
	0x75, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, // uvec2 uvec2_spla
	0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // t(uint _x) { ret
	0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, // urn uvec2(_x, _x
	0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, // ); }.uvec3 uvec3
	0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, // _splat(uint _x) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, // { return uvec3(_
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, // x, _x, _x); }.uv
	0x65, 0x63, 0x34, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, // ec4 uvec4_splat(
	0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, // uint _x) { retur
	0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, // n uvec4(_x, _x, 
	0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, // _x, _x); }.mat4 
	0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, // mtxFromRows(vec4
	0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, //  _0, vec4 _1, ve
	0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, // c4 _2, vec4 _3).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, // {.return transpo
	0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, // se(mat4(_0, _1, 
	0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, // _2, _3) );.}.mat
	0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, // 4 mtxFromCols(ve
	0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, // c4 _0, vec4 _1, 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, // vec4 _2, vec4 _3
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x28, // ).{.return mat4(
	0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x3b, // _0, _1, _2, _3);
	0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, // .}.mat3 mtxFromR
	0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, // ows(vec3 _0, vec
	0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, // 3 _1, vec3 _2).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, // .return transpos
	0x65, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, // e(mat3(_0, _1, _
	0x32, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, // 2) );.}.mat3 mtx
	0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, // FromCols(vec3 _0
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // , vec3 _1, vec3 
	0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, // _2).{.return mat
	0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x3b, 0x0a, 0x7d, // 3(_0, _1, _2);.}
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, // .uniform vec4 u_
	0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // viewRect;.unifor
	0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x54, 0x65, 0x78, // m vec4 u_viewTex
	0x65, 0x6c, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, // el;.uniform mat4
	0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, //  u_view;.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x3b, //  mat4 u_invView;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, // .uniform mat4 u_
	0x70, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, // proj;.uniform ma
	0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, // t4 u_invProj;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, // iform mat4 u_vie
	0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, // wProj;.uniform m
	0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, // at4 u_invViewPro
	0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, // j;.uniform mat4 
	0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, 0x3b, 0x0a, 0x75, 0x6e, 0x69, // u_model[32];.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, // form mat4 u_mode
	0x6c, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, // lView;.uniform m
	0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x50, // at4 u_modelViewP
	0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, // roj;.uniform vec
	0x34, 0x20, 0x75, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x66, 0x34, 0x3b, 0x0a, 0x66, // 4 u_alphaRef4;.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // loat sqr(const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // loat v).{.return
	0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x73, 0x71, 0x72, //  v*v;.}.vec2 sqr
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x29, 0x0a, 0x7b, // (const vec2 v).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // .return v*v;.}.v
	0x65, 0x63, 0x33, 0x20, 0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // ec3 sqr(const ve
	0x63, 0x33, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // c3 v).{.return v
	0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6d, 0x75, 0x6c, 0x5f, 0x77, // *v;.}.vec3 mul_w
	0x31, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x2c, 0x20, // 1(const vec3 v, 
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x29, 0x0a, 0x7b, 0x0a, // const mat4 m).{.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2e, 0x78, 0x2a, 0x6d, 0x5b, 0x30, 0x5d, 0x2e, // return v.x*m[0].
	0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x79, 0x2a, 0x6d, 0x5b, 0x31, 0x5d, 0x2e, // xyz + (v.y*m[1].
	0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x7a, 0x2a, 0x6d, 0x5b, 0x32, 0x5d, 0x2e, // xyz + (v.z*m[2].
	0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x6d, 0x5b, 0x33, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, // xyz + m[3].xyz))
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, // ;.}.float acos_a
	0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x63, 0x6f, 0x6e, 0x73, // pprox_divPI(cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, // t float v).{.con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, // st float x = abs
	0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, // (v);.if(1. - x <
	0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, // = 0.000061035156
	0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, // 25).return (v >=
	0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x3b, 0x0a, //  0.) ? 0. : 1.;.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, 0x20, // const float res 
	0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, // = ((-0.155972/3.
	0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, // 1415926535897932
	0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, // 384626433832795)
	0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, //  * x + (1.56467/
	0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, // 3.14159265358979
	0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, // 3238462643383279
	0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, // 5) ) * sqrt(1. -
	0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, //  x);.return (v >
	0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x31, 0x2e, // = 0.) ? res : 1.
	0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, //  - res;.}.float 
	0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, // atan2_approx_div
	0x32, 0x50, 0x49, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // 2PI(const float 
	0x79, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, // y, const float x
	0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // ).{.const float 
	0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x79, 0x29, 0x3b, 0x0a, // abs_y = abs(y);.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, // const float abs_
	0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x78, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x61, // x = abs(x);.if(a
	0x62, 0x73, 0x5f, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, // bs_x <= 0.000061
	0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x20, 0x26, 0x26, 0x20, 0x61, 0x62, 0x73, 0x5f, // 03515625 && abs_
	0x79, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, // y <= 0.000061035
	0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x30, 0x2e, // 15625).return 0.
	0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x20, // ;.const float r 
	0x3d, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2d, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, // = (abs_x - abs_y
	0x29, 0x20, 0x2f, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2b, 0x20, 0x61, 0x62, 0x73, // ) / (abs_x + abs
	0x5f, 0x79, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // _y);.const float
	0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, //  angle = ((x < 0
	0x2e, 0x29, 0x20, 0x3f, 0x20, 0x28, 0x33, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x20, 0x3a, 0x20, 0x28, // .) ? (3./8.) : (
	0x31, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x29, 0x0a, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x32, 0x31, 0x31, // 1./8.)).+ (0.211
	0x38, 0x36, 0x38, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, // 868 /(2.*3.14159
	0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, // 2653589793238462
	0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x72, 0x20, // 6433832795) * r 
	0x2a, 0x20, 0x72, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x39, 0x38, 0x37, 0x33, 0x30, 0x35, 0x20, 0x2f, // * r - 0.987305 /
	0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, // (2.*3.1415926535
	0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, // 8979323846264338
	0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, // 32795)) * ((x < 
	0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x72, 0x20, 0x3a, 0x20, 0x72, 0x29, 0x3b, 0x0a, 0x72, // 0.) ? -r : r);.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x79, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, // eturn (y < 0.) ?
	0x20, 0x2d, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3a, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x3b, //  -angle : angle;
	0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x73, 0x69, 0x6e, 0x5f, 0x61, 0x70, // .}.float asin_ap
	0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, // prox_divPI(const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, //  float v).{.cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, // t float x = abs(
	0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, // v);.if(1. - x <=
	0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, //  0.0000610351562
	0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, // 5).return (v >= 
	0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, // 0.) ? 0.5 : -0.5
	0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, // ;.const float re
	0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, // s = ((-0.155972/
	0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, // 3.14159265358979
	0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, // 3238462643383279
	0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, // 5) * x + (1.5646
	0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, // 7/3.141592653589
	0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, // 7932384626433832
	0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, // 795) ) * sqrt(1.
	0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, //  - x);.return (v
	0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x2d, 0x20, //  >= 0.) ? 0.5 - 
	0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x65, 0x73, // res : -0.5 + res
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x61, 0x79, 0x5f, 0x74, 0x6f, 0x5f, // ;.}.vec2 ray_to_
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, // equirectangular_
	0x75, 0x76, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x61, // uv(const vec3 ra
	0x79, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, // y).{.return vec2
	0x28, 0x0a, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, // (.0.5 + atan2_ap
	0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, // prox_div2PI(ray.
	0x79, 0x2c, 0x20, 0x72, 0x61, 0x79, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x61, 0x63, 0x6f, 0x73, 0x5f, // y, ray.x),.acos_
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, // approx_divPI(ray
	0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, // .z));.}.float In
	0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, // vsRGB(const floa
	0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, // t color).{.if (c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, 0x34, 0x35, 0x29, // olor <= 0.04045)
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, // .return color * 
	0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, // (1.0/12.92);.els
	0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, // e.return pow(col
	0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, // or * (1.0/1.055)
	0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, //  + (0.055/1.055)
	0x2c, 0x20, 0x32, 0x2e, 0x34, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // , 2.4);.}.float 
	0x49, 0x6e, 0x76, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // InvRec709(const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, // float color).{.i
	0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x38, // f (color <= 0.08
	0x31, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, // 1).return color 
	0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x34, 0x2e, 0x35, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, // * (1.0/4.5);.els
	0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, // e.return pow(col
	0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, // or * (1.0/1.099)
	0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, //  + (0.099/1.099)
	0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // , 1.0/0.45);.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, // loat InvGamma(co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, // nst float color)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, // .{.return InvsRG
	0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, // B(color);.}.vec3
	0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, //  InvGamma(const 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // vec3 color).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, // turn vec3(InvGam
	0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, // ma(color.x),InvG
	0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x49, 0x6e, // amma(color.y),In
	0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, // vGamma(color.z))
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x54, 0x6f, 0x6e, 0x65, // ;.}.vec3 InvTone
	0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, // Map(const vec3 c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // olor).{.const fl
	0x6f, 0x61, 0x74, 0x20, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x30, 0x2e, // oat inv_2bh = 0.
	0x35, 0x2f, 0x30, 0x2e, 0x32, 0x35, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // 5/0.25;.const fl
	0x6f, 0x61, 0x74, 0x20, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x34, 0x2e, 0x30, 0x2a, 0x30, 0x2e, 0x32, // oat bh = 4.0*0.2
	0x35, 0x20, 0x2d, 0x20, 0x32, 0x2e, 0x30, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // 5 - 2.0;.return 
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2b, 0x20, 0x73, // (color - 1.0 + s
	0x71, 0x72, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2a, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // qrt(color*(color
	0x20, 0x2b, 0x20, 0x62, 0x68, 0x29, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x2a, 0x69, //  + bh) + 1.0))*i
	0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // nv_2bh;.}.float 
	0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // sRGB(const float
	0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, //  f).{.float s;.i
	0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x33, 0x31, 0x33, 0x30, // f (f <= 0.003130
	0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x20, 0x2a, 0x20, 0x66, // 8).s = 12.92 * f
	0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x35, 0x35, // ;.else.s = 1.055
	0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, //  * pow(f, 1.0/2.
	0x34, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // 4) - 0.055;.retu
	0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x52, 0x65, // rn s;.}.float Re
	0x63, 0x37, 0x30, 0x39, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // c709(const float
	0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, //  f).{.float s;.i
	0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, 0x29, 0x0a, 0x73, // f (f <= 0.018).s
	0x20, 0x3d, 0x20, 0x34, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, //  = 4.5 * f;.else
	0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, // .s = 1.099 * pow
	0x28, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x39, // (f, 0.45) - 0.09
	0x39, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // 9;.return s;.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, // loat FBGamma(con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, // st float color).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, // {.return sRGB(co
	0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x47, // lor);.}.vec2 FBG
	0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, // amma(const vec2 
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // color).{.return 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, // vec2(FBGamma(col
	0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, // or.x),FBGamma(co
	0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // lor.y));.}.vec3 
	0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // FBGamma(const ve
	0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, // c3 color).{.retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, // rn vec3(FBGamma(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, // color.x),FBGamma
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, // (color.y),FBGamm
	0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // a(color.z));.}.v
	0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x32, 0x32, 0x28, 0x63, 0x6f, // ec3 FBGamma22(co
	0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, // nst vec3 color).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x70, 0x6f, // {.return vec3(po
	0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, // w(color.x, 1.0/2
	0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x2c, // .2),pow(color.y,
	0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, //  1.0/2.2),pow(co
	0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x29, // lor.z, 1.0/2.2))
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, // ;.}.float FBTone
	0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // Map(const float 
	0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6c, 0x20, 0x2a, 0x20, // l).{.return l * 
	0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, // ((l*0.25 + 1.0) 
	0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // / (l + 1.0));.}.
	0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x63, // vec2 FBToneMap(c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, // onst vec2 color)
	0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, // .{.const float l
	0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, //  = dot(color,vec
	0x32, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, // 2(0.176204+0.010
	0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, // 8109*0.5,0.81298
	0x35, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x29, // 5+0.0108109*0.5)
	0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, // );.return color 
	0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, // * ((l*0.25 + 1.0
	0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, // ) / (l + 1.0));.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, // }.vec3 FBToneMap
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // (const vec3 colo
	0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // r).{.const float
	0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, //  l = dot(color,v
	0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2c, 0x30, 0x2e, 0x38, // ec3(0.176204,0.8
	0x31, 0x32, 0x39, 0x38, 0x35, 0x2c, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x29, // 12985,0.0108109)
	0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, // );.return color 
	0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, // * ((l*0.25 + 1.0
	0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, // ) / (l + 1.0));.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x28, // }.vec4 Additive(
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, // const vec4 cBase
	0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, // , const vec4 cBl
	0x65, 0x6e, 0x64, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // end, const float
	0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, //  percent).{.retu
	0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2b, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // rn cBase + cBlen
	0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // d*percent;.}.vec
	0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // 3 Screen (const 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, // vec3 cBase, cons
	0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, // t vec3 cBlend).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, // .return 1.0 - (1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, // .0 - cBase) * (1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // .0 - cBlend);.}.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6e, // vec4 Screen (con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, // st vec4 cBase, c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, // onst vec4 cBlend
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, // ).{.return 1.0 -
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, //  (1.0 - cBase) *
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, //  (1.0 - cBlend);
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, // .}.vec3 ScreenHD
	0x52, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, // R (const vec3 cB
	0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // ase, const vec3 
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // cBlend).{.return
	0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, //  max(1.0 - (1.0 
	0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, // - cBase) * (1.0 
	0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, // - cBlend), vec3(
	0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // 0.,0.,0.));.}.ve
	0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x63, 0x6f, // c4 ScreenHDR (co
	0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, // nst vec4 cBase, 
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // const vec4 cBlen
	0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, // d).{.return max(
	0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, // 1.0 - (1.0 - cBa
	0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, // se) * (1.0 - cBl
	0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, // end), vec4(0.,0.
	0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, // ,0.,0.));.}.vec4
	0x20, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, //  Multiply (const
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, //  vec4 cBase, con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, // st vec4 cBlend, 
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, // const float perc
	0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, // ent).{.return cB
	0x61, 0x73, 0x65, 0x20, 0x2a, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, // ase * cBlend*per
	0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, // cent;.}.vec4 Ove
	0x72, 0x6c, 0x61, 0x79, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, // rlay (const vec4
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, //  cBase, const ve
	0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, // c4 cBlend).{.vec
	0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, // 4 cNew = step(0.
	0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, // 5, cBase);.cNew 
	0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, // = mix(cBase*cBle
	0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, // nd*2.0, 1.0-2.0*
	0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, // (1.0-cBase)*(1.0
	0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x3b, // -cBlend), cNew);
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, // .return cNew;.}.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x48, 0x44, 0x52, 0x20, // vec4 OverlayHDR 
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, // (const vec4 cBas
	0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // e, const vec4 cB
	0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, // lend).{.vec4 cNe
	0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, // w = step(0.5, cB
	0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, // ase);.cNew = max
	0x28, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, // (mix(cBase*cBlen
	0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, // d*2.0, 1.0-2.0*(
	0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, // 1.0-cBase)*(1.0-
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x2c, 0x20, // cBlend), cNew), 
	0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, // vec4(0.,0.,0.,0.
	0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, // ));.return cNew;
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x73, 0x5f, 0x68, 0x65, 0x6d, 0x69, // .}.vec3 cos_hemi
	0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x63, 0x6f, // sphere_sample(co
	0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, // nst vec2 t).{.co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x68, 0x69, 0x20, 0x3d, 0x20, // nst float phi = 
	0x74, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x28, 0x32, 0x2e, 0x30, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, // t.y * (2.0*3.141
	0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, // 5926535897932384
	0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x3b, 0x0a, 0x63, // 626433832795);.c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, // onst float cosTh
	0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, // eta = sqrt(1.0 -
	0x20, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, //  t.x);.const flo
	0x61, 0x74, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, // at sinTheta = sq
	0x72, 0x74, 0x28, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, // rt(t.x);.float s
	0x70, 0x2c, 0x63, 0x70, 0x3b, 0x0a, 0x73, 0x69, 0x6e, 0x63, 0x6f, 0x73, 0x28, 0x70, 0x68, 0x69, // p,cp;.sincos(phi
	0x2c, 0x73, 0x70, 0x2c, 0x63, 0x70, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // ,sp,cp);.return 
	0x76, 0x65, 0x63, 0x33, 0x28, 0x63, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, // vec3(cp * sinThe
	0x74, 0x61, 0x2c, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x73, 0x70, // ta, cosTheta, sp
	0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, //  * sinTheta);.}.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x76, // vec3 rotate_to_v
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, // ector_upper(cons
	0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, // t vec3 vec, cons
	0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x29, 0x0a, 0x7b, // t vec3 normal).{
	0x0a, 0x69, 0x66, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x3e, 0x20, 0x2d, // .if(normal.y > -
	0x30, 0x2e, 0x39, 0x39, 0x39, 0x39, 0x39, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, // 0.99999).{.const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x28, //  float h = 1.0/(
	0x31, 0x2e, 0x30, 0x2b, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x63, // 1.0+normal.y);.c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x20, 0x3d, 0x20, // onst float hz = 
	0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // h*normal.z;.cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x3d, 0x20, 0x68, 0x7a, // t float hzx = hz
	0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // *normal.x;.retur
	0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, // n vec3(.vec.x * 
	0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, // (normal.y+hz*nor
	0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x29, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, // mal.z) + vec.y *
	0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, //  normal.x - vec.
	0x7a, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, // z * hzx,.vec.y *
	0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, //  normal.y - vec.
	0x78, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, // x * normal.x - v
	0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x2c, // ec.z * normal.z,
	0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, // .vec.y * normal.
	0x7a, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x20, // z - vec.x * hzx 
	0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, // + vec.z * (norma
	0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x2a, 0x6e, // l.y+h*normal.x*n
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, // ormal.x));.}.els
	0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x2d, 0x76, 0x65, 0x63, 0x3b, 0x0a, 0x7d, // e return -vec;.}
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, // .uniform vec4 St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x53, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3b, // ereo_Saturation;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, // .uniform vec4 St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, // ereo_MS_ZPD_YAxi
	0x73, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, // s;.uniform sampl
	0x65, 0x72, 0x32, 0x44, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // er2D tex_stereo_
	0x66, 0x62, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, // fb;.uniform samp
	0x6c, 0x65, 0x72, 0x32, 0x44, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // ler2D tex_stereo
	0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // _depth;.uniform 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, // vec4 w_h_height;
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, // .vec3 gatherEyeC
	0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x62, 0x6f, 0x6f, // olor(vec2 u, boo
	0x6c, 0x20, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // l isLeft).{.cons
	0x74, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3d, 0x20, 0x28, // t bool yaxis = (
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, // Stereo_MS_ZPD_YA
	0x78, 0x69, 0x73, 0x2e, 0x7a, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x3b, 0x0a, 0x63, 0x6f, // xis.z != 0.);.co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // nst float MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, // aration = (Stere
	0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, // o_MS_ZPD_YAxis.x
	0x29, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, // );.if (isLeft).{
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x6d, 0x69, // .const float lmi
	0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, // nDepth = min(min
	0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, // (textureLod(tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, // stereo_depth, u 
	0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // + (yaxis ? vec2(
	0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, // 0.0, 0.500 * Max
	0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, // Separation) : ve
	0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, // c2(0.500 * MaxSe
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, // paration, 0.0)),
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, //  0.0).x,.texture
	0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, // Lod(tex_stereo_d
	0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, // epth, u + (yaxis
	0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, //  ? vec2(0.0, 0.6
	0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // 66 * MaxSeparati
	0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, // on) : vec2(0.666
	0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, //  * MaxSeparation
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, // , 0.0)), 0.0).x)
	0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, // ,.textureLod(tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, // _stereo_depth, u
	0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, //  + (yaxis ? vec2
	0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // (0.0, MaxSeparat
	0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, // ion) : vec2( Max
	0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // Separation, 0.0)
	0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // ), 0.0).x);.floa
	0x74, 0x20, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, // t lparallax = ma
	0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, // x(0.0, w_h_heigh
	0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // t.w + MaxSeparat
	0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, // ion * (1.0 - 1.0
	0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, //  / (0.5 + lminDe
	0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, // pth * (1.0 / (St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, // ereo_MS_ZPD_YAxi
	0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, // s.y) - 0.5))));.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, // return textureLo
	0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, // d(tex_stereo_fb,
	0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, //  u + (yaxis ? ve
	0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, // c2(0.0, -lparall
	0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x6c, 0x70, 0x61, 0x72, 0x61, // ax) : vec2(lpara
	0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, // llax, 0.0)), 0.0
	0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x7b, 0x0a, // ).xyz;.}.else.{.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x6d, 0x69, 0x6e, // const float rmin
	0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, // Depth = min(min(
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, // textureLod(tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, // tereo_depth, u -
	0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, //  (yaxis ? vec2(0
	0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, // .0, 0.500 * MaxS
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, // eparation) : vec
	0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // 2(0.500 * MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, // aration, 0.0)), 
	0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, // 0.0).x,.textureL
	0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, // od(tex_stereo_de
	0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, // pth, u - (yaxis 
	0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, // ? vec2(0.0, 0.66
	0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, // 6 * MaxSeparatio
	0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, // n) : vec2(0.666 
	0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, // * MaxSeparation,
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, //  0.0)), 0.0).x),
	0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, // .textureLod(tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, // stereo_depth, u 
	0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // - (yaxis ? vec2(
	0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // 0.0, MaxSeparati
	0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, // on) : vec2( MaxS
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, // eparation, 0.0))
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // , 0.0).x);.float
	0x20, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, //  rparallax = max
	0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, // (0.0, w_h_height
	0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // .w + MaxSeparati
	0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, // on * (1.0 - 1.0 
	0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, // / (0.5 + rminDep
	0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, // th * (1.0 / (Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, // reo_MS_ZPD_YAxis
	0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x72, // .y) - 0.5))));.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, // eturn textureLod
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, // (tex_stereo_fb, 
	0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, // u - (yaxis ? vec
	0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, // 2(0.0, -rparalla
	0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, // x) : vec2(rparal
	0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // lax, 0.0)), 0.0)
	0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x67, // .xyz;.}.}.void g
	0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, // atherLeftRightCo
	0x6c, 0x6f, 0x72, 0x73, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x6f, 0x75, 0x74, // lors(vec2 u, out
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x63, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, //  vec3 lcol, out 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, // vec3 rcol).{.con
	0x73, 0x74, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3d, 0x20, // st bool yaxis = 
	0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, // (Stereo_MS_ZPD_Y
	0x41, 0x78, 0x69, 0x73, 0x2e, 0x7a, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x3b, 0x0a, 0x63, // Axis.z != 0.);.c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, // onst float MaxSe
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, // paration = (Ster
	0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, // eo_MS_ZPD_YAxis.
	0x78, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // x);.const float 
	0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, // lminDepth = min(
	0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, // min(textureLod(t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, // ex_stereo_depth,
	0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, //  u + (yaxis ? ve
	0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, // c2(0.0, 0.500 * 
	0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, // MaxSeparation) :
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, //  vec2(0.500 * Ma
	0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, // xSeparation, 0.0
	0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, // )), 0.0).x,.text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // ureLod(tex_stere
	0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, // o_depth, u + (ya
	0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, // xis ? vec2(0.0, 
	0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, // 0.666 * MaxSepar
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, // ation) : vec2(0.
	0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // 666 * MaxSeparat
	0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // ion, 0.0)), 0.0)
	0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, // .x),.textureLod(
	0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, // tex_stereo_depth
	0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, // , u + (yaxis ? v
	0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, // ec2(0.0, MaxSepa
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x20, // ration) : vec2( 
	0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, // MaxSeparation, 0
	0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, // .0)), 0.0).x);.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, // loat lparallax =
	0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, //  max(0.0, w_h_he
	0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, // ight.w + MaxSepa
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, // ration * (1.0 - 
	0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x6c, 0x6d, 0x69, // 1.0 / (0.5 + lmi
	0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, // nDepth * (1.0 / 
	0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, // (Stereo_MS_ZPD_Y
	0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, // Axis.y) - 0.5)))
	0x29, 0x3b, 0x0a, 0x6c, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // );.lcol = textur
	0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // eLod(tex_stereo_
	0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, // fb, u + (yaxis ?
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x6c, 0x70, 0x61, 0x72, //  vec2(0.0, -lpar
	0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x6c, 0x70, // allax) : vec2(lp
	0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, // arallax, 0.0)), 
	0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // 0.0).xyz;.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, // float rminDepth 
	0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // = min(min(textur
	0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // eLod(tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, // depth, u - (yaxi
	0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, // s ? vec2(0.0, 0.
	0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // 500 * MaxSeparat
	0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, // ion) : vec2(0.50
	0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, // 0 * MaxSeparatio
	0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, // n, 0.0)), 0.0).x
	0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, // ,.textureLod(tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, // _stereo_depth, u
	0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, //  - (yaxis ? vec2
	0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, // (0.0, 0.666 * Ma
	0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, // xSeparation) : v
	0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, // ec2(0.666 * MaxS
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, // eparation, 0.0))
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, // , 0.0).x),.textu
	0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // reLod(tex_stereo
	0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, // _depth, u - (yax
	0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, // is ? vec2(0.0, M
	0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, // axSeparation) : 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // vec2( MaxSeparat
	0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // ion, 0.0)), 0.0)
	0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x70, 0x61, 0x72, 0x61, // .x);.float rpara
	0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, // llax = max(0.0, 
	0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, // w_h_height.w + M
	0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, // axSeparation * (
	0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, // 1.0 - 1.0 / (0.5
	0x20, 0x2b, 0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, //  + rminDepth * (
	0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, // 1.0 / (Stereo_MS
	0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, // _ZPD_YAxis.y) - 
	0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, // 0.5))));.rcol = 
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, // textureLod(tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, // tereo_fb, u - (y
	0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, // axis ? vec2(0.0,
	0x20, 0x2d, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, //  -rparallax) : v
	0x65, 0x63, 0x32, 0x28, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, // ec2(rparallax, 0
	0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, // .0)), 0.0).xyz;.
	0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, // }.uniform mat4 S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, // tereo_LeftMat;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, // niform mat4 Ster
	0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, // eo_RightMat;.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // form vec4 Stereo
	0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, // _LeftLuminance_G
	0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, // amma;.uniform ve
	0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, // c4 Stereo_RightL
	0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, // uminance_DynDesa
	0x74, 0x3b, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, // t;.void DynamicD
	0x65, 0x73, 0x61, 0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, // esatAnaglyph(con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, // st vec3 lCol, co
	0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, // nst vec3 rCol, o
	0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, // ut vec3 lDesatCo
	0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x44, 0x65, 0x73, // l, out vec3 rDes
	0x61, 0x74, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // atCol).{.const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, // loat left2LeftLu
	0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, // m = dot(lCol, St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, // ereo_LeftLuminan
	0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, // ce_Gamma.xyz);.c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, // onst float left2
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, // RightLum = dot(l
	0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, // Col, Stereo_Righ
	0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, // tLuminance_DynDe
	0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // sat.xyz);.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, // float right2Left
	0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // Lum = dot(rCol, 
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, // Stereo_LeftLumin
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, // ance_Gamma.xyz);
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, // .const float rig
	0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, // ht2RightLum = do
	0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, // t(rCol, Stereo_R
	0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, // ightLuminance_Dy
	0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, // nDesat.xyz);.con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // st float leftLum
	0x20, 0x3d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, //  = left2LeftLum 
	0x2b, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, // + left2RightLum;
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, // .const float rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, // htLum = right2Le
	0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, // ftLum + right2Ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // ghtLum;.const fl
	0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, // oat leftDesat = 
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, // Stereo_RightLumi
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, // nance_DynDesat.w
	0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, //  * abs((left2Lef
	0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, // tLum - left2Righ
	0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // tLum) / (leftLum
	0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, //  + 0.0001));.con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, // st float rightDe
	0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, // sat = Stereo_Rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, // htLuminance_DynD
	0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x72, 0x69, // esat.w * abs((ri
	0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x72, 0x69, // ght2LeftLum - ri
	0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, // ght2RightLum) / 
	0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, // (rightLum + 0.00
	0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, // 01));.lDesatCol 
	0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, // = mix(lCol, vec3
	0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, // _splat(leftLum),
	0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x72, 0x44, 0x65, //  leftDesat);.rDe
	0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x72, 0x43, 0x6f, // satCol = mix(rCo
	0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x72, 0x69, // l, vec3_splat(ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, // ghtLum), rightDe
	0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x4c, 0x69, 0x6e, // sat);.}.vec3 Lin
	0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, // earAnaglyph(cons
	0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, // t vec3 lCol, con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, // st vec3 rCol).{.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // const vec3 color
	0x20, 0x3d, 0x20, 0x28, 0x28, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x6c, 0x43, 0x6f, 0x6c, //  = (( (vec4(lCol
	0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // , 1.)) * (Stereo
	0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x20, // _LeftMat) ) + ( 
	0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, // (vec4(rCol, 1.))
	0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, //  * (Stereo_Right
	0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x72, 0x65, 0x74, // Mat) )).rgb;.ret
	0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, // urn color;.}.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // form vec4 Stereo
	0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, // _DeghostGamma;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, // niform mat4 Ster
	0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, // eo_DeghostFilter
	0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x6e, // ;.vec3 DeghostAn
	0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, // aglyph(const vec
	0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // 3 lCol, const ve
	0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, // c3 rCol).{.const
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, //  vec3 color = Li
	0x6e, 0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, // nearAnaglyph(lCo
	0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // l, rCol);.return
	0x20, 0x28, 0x20, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x53, //  ( (pow(color, S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, // tereo_DeghostGam
	0x6d, 0x61, 0x2e, 0x72, 0x67, 0x62, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x6d, 0x61, 0x74, 0x33, // ma.rgb)) * (mat3
	0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, // (Stereo_DeghostF
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, // ilter[0].xyz, St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, // ereo_DeghostFilt
	0x65, 0x72, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // er[1].xyz, Stere
	0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, // o_DeghostFilter[
	0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, // 2].xyz)) );.}.vo
	0x69, 0x64, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x67, 0x6c, 0x5f, 0x46, // id main().{.gl_F
	0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, // ragColor = vec4(
	0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x76, // gatherEyeColor(v
	0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2c, 0x20, 0x66, 0x72, 0x61, 0x63, // _texcoord0, frac
	0x28, 0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x2e, 0x79, 0x2a, // (gl_FragCoord.y*
	0x30, 0x2e, 0x35, 0x29, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, // 0.5) < 0.5), 1.0
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x00,                                                             // );.}..
};
static const uint8_t fs_pp_stereo_int_dx11[2451] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x13, 0x53, // FSH.o.><.......S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, // tereo_MS_ZPD_YAx
	0x69, 0x73, 0x12, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x77, 0x5f, 0x68, // is...........w_h
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, // _height.........
	0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x30, // ..tex_stereo_fb0
	0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // ..........tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x30, 0x01, 0x01, 0x00, 0x01, 0x00, // ereo_depth0.....
	0x00, 0x00, 0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // .....tex_stereo_
	0x66, 0x62, 0x30, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x74, 0x65, 0x78, // fb0..........tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x30, 0x01, 0x01, // _stereo_depth0..
	0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe4, 0x08, 0x00, 0x00, 0x44, 0x58, 0x42, 0x43, 0xd7, // ...........DXBC.
	0x39, 0xf6, 0x06, 0x40, 0x9c, 0x6a, 0xa6, 0x1b, 0x3f, 0xc5, 0x67, 0x71, 0xd8, 0xc0, 0x65, 0x01, // 9..@.j..?.gq..e.
	0x00, 0x00, 0x00, 0xe4, 0x08, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x84, // ...........,....
	0x00, 0x00, 0x00, 0xb8, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x4e, 0x50, 0x00, 0x00, 0x00, 0x02, // .......ISGNP....
	0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, // .......8........
	0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x02, 0x00, 0x00, 0x44, // ...............D
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, // .......SV_POSITI
	0x4f, 0x4e, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0xab, 0xab, 0xab, 0x4f, // ON.TEXCOORD....O
	0x53, 0x47, 0x4e, 0x2c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x20, // SGN,........... 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, // .......SV_TARGET
	0x00, 0xab, 0xab, 0x53, 0x48, 0x45, 0x58, 0x24, 0x08, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x09, // ...SHEX$...P....
	0x02, 0x00, 0x00, 0x6a, 0x08, 0x00, 0x01, 0x59, 0x00, 0x00, 0x04, 0x46, 0x8e, 0x20, 0x00, 0x00, // ...j...Y...F. ..
	0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x03, 0x00, 0x60, 0x10, 0x00, 0x00, // .......Z....`...
	0x00, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x03, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x58, // ...Z....`......X
	0x18, 0x00, 0x04, 0x00, 0x70, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x55, 0x00, 0x00, 0x58, // ....p......UU..X
	0x18, 0x00, 0x04, 0x00, 0x70, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x55, 0x55, 0x00, 0x00, 0x64, // ....p......UU..d
	0x20, 0x00, 0x04, 0x22, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x62, //  .."...........b
	0x10, 0x00, 0x03, 0x32, 0x10, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x03, 0xf2, // ...2.......e....
	0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x02, 0x03, 0x00, 0x00, 0x00, 0x38, //  ......h.......8
	0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x10, 0x10, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x1a, 0x00, 0x00, 0x05, 0x12, // ....@.....?.....
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x31, // ...............1
	0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x39, 0x00, 0x00, 0x08, 0x22, // ....@.....?9..."
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .......*. ......
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x04, 0x03, 0x0a, // ....@...........
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x08, 0x52, 0x00, 0x10, 0x00, 0x01, // .......6...R....
	0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ....@...........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x0b, 0xa2, 0x00, 0x10, 0x00, 0x01, // .......8........
	0x00, 0x00, 0x00, 0x06, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, // ..... ..........
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0xfa, // @.........?.....
	0x7e, 0x2a, 0x3f, 0x37, 0x00, 0x00, 0x09, 0xf2, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x56, // ~*?7...........V
	0x05, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x16, // .......F........
	0x0b, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf2, 0x00, 0x10, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x14, 0x10, 0x00, 0x01, // ...F.......F....
	0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x12, // ...H.......CU...
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, // .......F.......F
	0x7e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, // ~.......`.......
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, // @......H.......C
	0x55, 0x15, 0x00, 0x42, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x01, // U..B............
	0x00, 0x00, 0x00, 0x96, 0x7c, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, // ....|.......`...
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x07, 0x12, // ....@......3....
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, // .......*........
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x08, 0x52, 0x00, 0x10, 0x00, 0x01, // .......6...R....
	0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ....@...........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x06, 0x22, 0x00, 0x10, 0x00, 0x01, // .......6..."....
	0x00, 0x00, 0x00, 0x0a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, // ..... .........7
	0x00, 0x00, 0x09, 0xc2, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x56, 0x05, 0x10, 0x00, 0x00, // ...........V....
	0x00, 0x00, 0x00, 0x06, 0x04, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x56, 0x01, 0x10, 0x00, 0x01, // ...........V....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc2, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa6, // ................
	0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x14, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x48, // ...............H
	0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x42, 0x00, 0x10, 0x00, 0x00, // .......CU..B....
	0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x96, 0x7c, 0x10, 0x00, 0x01, // ............|...
	0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, // ....`.......@...
	0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, // ...3...........*
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, // ................
	0x00, 0x00, 0x0b, 0x42, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, // ...B........@...
	0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x1a, // ..?...?...?...?.
	0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x42, // . .............B
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, // .......*........
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0x32, 0x00, 0x00, 0x09, 0x12, 0x00, 0x10, 0x00, 0x00, // @......2........
	0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x00, // ...........*....
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x0e, 0x00, 0x00, 0x0a, 0x12, // ....@.....?.....
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, // ........@.....?.
	0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x0a, 0x00, 0x10, 0x00, 0x00, // ..?...?...?.....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, // ................
	0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, // ...A........@...
	0x00, 0x80, 0x3f, 0x32, 0x00, 0x00, 0x0b, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, // ..?2............
	0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, // . ..............
	0x00, 0x00, 0x00, 0x3a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x34, // ...:. .........4
	0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x06, 0x82, // ....@......6....
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x01, // ...........A....
	0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, // ...6..."........
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x09, 0x52, 0x00, 0x10, 0x00, 0x00, // @......7...R....
	0x00, 0x00, 0x00, 0x56, 0x05, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa6, 0x0b, 0x10, 0x00, 0x01, // ...V............
	0x00, 0x00, 0x00, 0x06, 0x01, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x52, // ...............R
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, // ................
	0x11, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, // .......H.......C
	0x55, 0x15, 0x00, 0xd2, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x00, 0x10, 0x00, 0x00, // U...............
	0x00, 0x00, 0x00, 0xc6, 0x79, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x00, // ....y.......`...
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x01, 0x36, // ....@..........6
	0x00, 0x00, 0x08, 0x52, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, // ...R........@...
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, // ...............8
	0x00, 0x00, 0x0b, 0xa2, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x80, 0x20, 0x00, 0x00, // ............. ..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........@.......
	0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x7e, 0x2a, 0x3f, 0x37, 0x00, 0x00, 0x09, 0xf2, // ..?.....~*?7....
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x56, 0x05, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, // .......V.......F
	0x0e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x16, 0x0b, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x08, 0xf2, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x80, 0x41, // ...........F...A
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x14, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x48, // .......F.......H
	0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x12, 0x00, 0x10, 0x00, 0x01, // .......CU.......
	0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, 0x01, // ...F.......F~...
	0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, // ....`.......@...
	0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x22, // ...H.......CU.."
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x16, // ................
	0x7e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, // ~.......`.......
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x01, // @......3........
	0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x08, 0x52, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, // ...6...R........
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // @...............
	0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x06, 0x22, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0a, // ...6..."........
	0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x09, 0x62, // . .........7...b
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x56, 0x05, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, // .......V........
	0x01, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x56, 0x04, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, // .......V........
	0x00, 0x00, 0x08, 0x62, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x56, 0x06, 0x10, 0x80, 0x41, // ...b.......V...A
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x11, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x48, // ...............H
	0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x22, 0x00, 0x10, 0x00, 0x01, // .......CU.."....
	0x00, 0x00, 0x00, 0x96, 0x05, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x16, 0x7e, 0x10, 0x00, 0x01, // ............~...
	0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, // ....`.......@...
	0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, // ...3............
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0e, // ................
	0x00, 0x00, 0x0b, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, // ..."........@...
	0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x1a, // ..?...?...?...?.
	0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x22, // . ............."
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, // ................
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0x32, 0x00, 0x00, 0x09, 0x12, 0x00, 0x10, 0x00, 0x01, // @......2........
	0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x0e, 0x00, 0x00, 0x0a, 0x12, // ....@.....?.....
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, // ........@.....?.
	0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x0a, 0x00, 0x10, 0x00, 0x01, // ..?...?...?.....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x12, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, // ................
	0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, // ...A........@...
	0x00, 0x80, 0x3f, 0x32, 0x00, 0x00, 0x0b, 0x12, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, // ..?2............
	0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x01, // . ..............
	0x00, 0x00, 0x00, 0x3a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x34, // ...:. .........4
	0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x06, 0x82, // ....@......6....
	0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x01, // ...........A....
	0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, // ...6..."........
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x09, 0x32, 0x00, 0x10, 0x00, 0x01, // @......7...2....
	0x00, 0x00, 0x00, 0x56, 0x05, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x02, // ...V............
	0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x32, // ...F...........2
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x01, // .......F...A....
	0x00, 0x00, 0x00, 0x46, 0x10, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, // ...F.......H....
	0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0xd2, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, // ...CU..........F
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0xc6, 0x79, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........y.......
	0x60, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, // `.......@.......
	0x00, 0x00, 0x01, 0x36, 0x00, 0x00, 0x05, 0x72, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, // ...6...r .......
	0x03, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x82, 0x20, 0x10, 0x00, 0x00, // .......6.... ...
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x3e, 0x00, 0x00, 0x01, 0x00, // ....@.....?>....
	0x00, 0x20, 0x00,                                                                               // . .
};
static const uint8_t fs_pp_stereo_int_spv[4180] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x13, 0x53, // FSH.o.><.......S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, // tereo_MS_ZPD_YAx
	0x69, 0x73, 0x12, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x77, 0x5f, 0x68, // is...........w_h
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x01, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, // _height.........
	0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x30, // ..tex_stereo_fb0
	0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x02, 0x22, 0x00, 0x10, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // ......."..tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x30, 0x00, 0x03, 0x00, 0x00, 0x00, // ereo_depth0.....
	0x00, 0x02, 0x22, 0x00, 0xd8, 0x0f, 0x00, 0x00, 0x03, 0x02, 0x23, 0x07, 0x00, 0x00, 0x01, 0x00, // ..".......#.....
	0x0b, 0x00, 0x08, 0x00, 0x9b, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x02, 0x00, // ................
	0x01, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, 0x4c, 0x53, 0x4c, // ............GLSL
	0x2e, 0x73, 0x74, 0x64, 0x2e, 0x34, 0x35, 0x30, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x03, 0x00, // .std.450........
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x08, 0x00, 0x04, 0x00, 0x00, 0x00, // ................
	0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x24, 0x01, 0x00, 0x00, // ....main....$...
	0x28, 0x01, 0x00, 0x00, 0x33, 0x01, 0x00, 0x00, 0x10, 0x00, 0x03, 0x00, 0x04, 0x00, 0x00, 0x00, // (...3...........
	0x07, 0x00, 0x00, 0x00, 0x03, 0x00, 0x03, 0x00, 0x05, 0x00, 0x00, 0x00, 0xf4, 0x01, 0x00, 0x00, // ................
	0x05, 0x00, 0x04, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, 0x00, // ........main....
	0x05, 0x00, 0x08, 0x00, 0x2b, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // ....+...tex_ster
	0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x00, 0x00, 0x00, 0x00, // eo_fbSampler....
	0x05, 0x00, 0x08, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // ........tex_ster
	0x65, 0x6f, 0x5f, 0x66, 0x62, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x00, 0x00, 0x00, 0x00, // eo_fbTexture....
	0x05, 0x00, 0x08, 0x00, 0x32, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // ....2...tex_ster
	0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x00, // eo_depthSampler.
	0x05, 0x00, 0x08, 0x00, 0x34, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // ....4...tex_ster
	0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x00, // eo_depthTexture.
	0x05, 0x00, 0x06, 0x00, 0x4f, 0x00, 0x00, 0x00, 0x55, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x42, // ....O...UniformB
	0x6c, 0x6f, 0x63, 0x6b, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x08, 0x00, 0x4f, 0x00, 0x00, 0x00, // lock........O...
	0x00, 0x00, 0x00, 0x00, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, // ....Stereo_MS_ZP
	0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x00, 0x06, 0x00, 0x06, 0x00, 0x4f, 0x00, 0x00, 0x00, // D_YAxis.....O...
	0x01, 0x00, 0x00, 0x00, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x00, 0x00, // ....w_h_height..
	0x05, 0x00, 0x03, 0x00, 0x51, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x06, 0x00, // ....Q...........
	0x24, 0x01, 0x00, 0x00, 0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6f, 0x72, 0x64, // $...gl_FragCoord
	0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x05, 0x00, 0x28, 0x01, 0x00, 0x00, 0x76, 0x5f, 0x74, 0x65, // ........(...v_te
	0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x00, 0x05, 0x00, 0x06, 0x00, 0x33, 0x01, 0x00, 0x00, // xcoord0.....3...
	0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x00, 0x00, // bgfx_FragData0..
	0x47, 0x00, 0x04, 0x00, 0x2b, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // G...+...".......
	0x47, 0x00, 0x04, 0x00, 0x2b, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, // G...+...!.......
	0x47, 0x00, 0x04, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // G.......".......
	0x47, 0x00, 0x04, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // G.......!.......
	0x47, 0x00, 0x04, 0x00, 0x32, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // G...2...".......
	0x47, 0x00, 0x04, 0x00, 0x32, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, // G...2...!.......
	0x47, 0x00, 0x04, 0x00, 0x34, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // G...4...".......
	0x47, 0x00, 0x04, 0x00, 0x34, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, // G...4...!.......
	0x48, 0x00, 0x05, 0x00, 0x4f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, // H...O.......#...
	0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0x4f, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // ....H...O.......
	0x23, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x47, 0x00, 0x03, 0x00, 0x4f, 0x00, 0x00, 0x00, // #.......G...O...
	0x02, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x51, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, // ....G...Q..."...
	0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x51, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, // ....G...Q...!...
	0x01, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x24, 0x01, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, // ....G...$.......
	0x0f, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x28, 0x01, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, // ....G...(.......
	0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x33, 0x01, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, // ....G...3.......
	0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x21, 0x00, 0x03, 0x00, // ............!...
	0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x02, 0x00, 0x06, 0x00, 0x00, 0x00, // ................
	0x16, 0x00, 0x03, 0x00, 0x07, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x19, 0x00, 0x09, 0x00, // ........ .......
	0x08, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x17, 0x00, 0x04, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // ................
	0x17, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, // ................
	0x14, 0x00, 0x02, 0x00, 0x19, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x1b, 0x00, 0x00, 0x00, // ................
	0x07, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x2a, 0x00, 0x00, 0x00, // ........ ...*...
	0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x2a, 0x00, 0x00, 0x00, // ........;...*...
	0x2b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x2d, 0x00, 0x00, 0x00, // +....... ...-...
	0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x2d, 0x00, 0x00, 0x00, // ........;...-...
	0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x2a, 0x00, 0x00, 0x00, // ........;...*...
	0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x2d, 0x00, 0x00, 0x00, // 2.......;...-...
	0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x00, 0x04, 0x00, 0x37, 0x00, 0x00, 0x00, // 4...........7...
	0x20, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x37, 0x00, 0x00, 0x00, //  .......+...7...
	0x38, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x37, 0x00, 0x00, 0x00, // 8.......+...7...
	0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x03, 0x00, 0x40, 0x00, 0x00, 0x00, // <...........@...
	0x08, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x04, 0x00, 0x4f, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, // ........O.......
	0x0e, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x50, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // .... ...P.......
	0x4f, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x50, 0x00, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00, // O...;...P...Q...
	0x02, 0x00, 0x00, 0x00, 0x15, 0x00, 0x04, 0x00, 0x52, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, // ........R... ...
	0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x52, 0x00, 0x00, 0x00, 0x53, 0x00, 0x00, 0x00, // ....+...R...S...
	0x02, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x54, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // .... ...T.......
	0x07, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, // ....+.......W...
	0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x52, 0x00, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x00, // ....+...R...Z...
	0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, // ....+.......c...
	0x00, 0x00, 0x00, 0x3f, 0x17, 0x00, 0x04, 0x00, 0x6a, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, // ...?....j.......
	0x02, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, // ....+.......v...
	0xfa, 0x7e, 0x2a, 0x3f, 0x2b, 0x00, 0x04, 0x00, 0x52, 0x00, 0x00, 0x00, 0x98, 0x00, 0x00, 0x00, // .~*?+...R.......
	0x03, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x9c, 0x00, 0x00, 0x00, // ....+...........
	0x00, 0x00, 0x80, 0x3f, 0x2b, 0x00, 0x04, 0x00, 0x52, 0x00, 0x00, 0x00, 0x9e, 0x00, 0x00, 0x00, // ...?+...R.......
	0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x23, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // .... ...#.......
	0x0e, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x23, 0x01, 0x00, 0x00, 0x24, 0x01, 0x00, 0x00, // ....;...#...$...
	0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x27, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // .... ...'.......
	0x0b, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x27, 0x01, 0x00, 0x00, 0x28, 0x01, 0x00, 0x00, // ....;...'...(...
	0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x32, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, // .... ...2.......
	0x0e, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x32, 0x01, 0x00, 0x00, 0x33, 0x01, 0x00, 0x00, // ....;...2...3...
	0x03, 0x00, 0x00, 0x00, 0x36, 0x00, 0x05, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, // ....6...........
	0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x05, 0x00, 0x00, 0x00, // ................
	0x3d, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x00, 0x00, // =.......,...+...
	0x3d, 0x00, 0x04, 0x00, 0x08, 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, // =......./.......
	0x3d, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, // =.......3...2...
	0x3d, 0x00, 0x04, 0x00, 0x08, 0x00, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, // =.......5...4...
	0x3d, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x25, 0x01, 0x00, 0x00, 0x24, 0x01, 0x00, 0x00, // =.......%...$...
	0x3d, 0x00, 0x04, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x29, 0x01, 0x00, 0x00, 0x28, 0x01, 0x00, 0x00, // =.......)...(...
	0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x5d, 0x01, 0x00, 0x00, 0x25, 0x01, 0x00, 0x00, // Q.......]...%...
	0x01, 0x00, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x5e, 0x01, 0x00, 0x00, // ............^...
	0x5d, 0x01, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x06, 0x00, 0x07, 0x00, 0x00, 0x00, // ]...c...........
	0x5f, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x5e, 0x01, 0x00, 0x00, // _...........^...
	0xb8, 0x00, 0x05, 0x00, 0x19, 0x00, 0x00, 0x00, 0x60, 0x01, 0x00, 0x00, 0x5f, 0x01, 0x00, 0x00, // ........`..._...
	0x63, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x26, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // c.......&.......
	0xfb, 0x00, 0x03, 0x00, 0x5a, 0x00, 0x00, 0x00, 0x90, 0x01, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, // ....Z...........
	0x90, 0x01, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x54, 0x00, 0x00, 0x00, 0x91, 0x01, 0x00, 0x00, // ....A...T.......
	0x51, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x53, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, // Q...<...S...=...
	0x07, 0x00, 0x00, 0x00, 0x92, 0x01, 0x00, 0x00, 0x91, 0x01, 0x00, 0x00, 0xb7, 0x00, 0x05, 0x00, // ................
	0x19, 0x00, 0x00, 0x00, 0x93, 0x01, 0x00, 0x00, 0x92, 0x01, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, // ............W...
	0x41, 0x00, 0x06, 0x00, 0x54, 0x00, 0x00, 0x00, 0x94, 0x01, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00, // A...T.......Q...
	0x3c, 0x00, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, // <...Z...=.......
	0x95, 0x01, 0x00, 0x00, 0x94, 0x01, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x25, 0x02, 0x00, 0x00, // ............%...
	0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0x60, 0x01, 0x00, 0x00, 0x97, 0x01, 0x00, 0x00, // ........`.......
	0xde, 0x01, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xde, 0x01, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, // ................
	0x07, 0x00, 0x00, 0x00, 0xe2, 0x01, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, 0x95, 0x01, 0x00, 0x00, // ........c.......
	0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xe3, 0x01, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, // P...........W...
	0xe2, 0x01, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xe5, 0x01, 0x00, 0x00, // ................
	0x63, 0x00, 0x00, 0x00, 0x95, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, // c.......P.......
	0xe6, 0x01, 0x00, 0x00, 0xe5, 0x01, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, // ........W...P...
	0x6a, 0x00, 0x00, 0x00, 0xe7, 0x01, 0x00, 0x00, 0x93, 0x01, 0x00, 0x00, 0x93, 0x01, 0x00, 0x00, // j...............
	0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xe8, 0x01, 0x00, 0x00, 0xe7, 0x01, 0x00, 0x00, // ................
	0xe3, 0x01, 0x00, 0x00, 0xe6, 0x01, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, // ................
	0xe9, 0x01, 0x00, 0x00, 0x29, 0x01, 0x00, 0x00, 0xe8, 0x01, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, // ....).......V...
	0x40, 0x00, 0x00, 0x00, 0x56, 0x02, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, // @...V...5...3...
	0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x59, 0x02, 0x00, 0x00, 0x56, 0x02, 0x00, 0x00, // X.......Y...V...
	0xe9, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, // ........W...Q...
	0x07, 0x00, 0x00, 0x00, 0xec, 0x01, 0x00, 0x00, 0x59, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........Y.......
	0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xf0, 0x01, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, // ............v...
	0x95, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xf1, 0x01, 0x00, 0x00, // ....P...........
	0x57, 0x00, 0x00, 0x00, 0xf0, 0x01, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // W...............
	0xf3, 0x01, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x95, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, // ....v.......P...
	0x0b, 0x00, 0x00, 0x00, 0xf4, 0x01, 0x00, 0x00, 0xf3, 0x01, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, // ............W...
	0x50, 0x00, 0x05, 0x00, 0x6a, 0x00, 0x00, 0x00, 0xf5, 0x01, 0x00, 0x00, 0x93, 0x01, 0x00, 0x00, // P...j...........
	0x93, 0x01, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xf6, 0x01, 0x00, 0x00, // ................
	0xf5, 0x01, 0x00, 0x00, 0xf1, 0x01, 0x00, 0x00, 0xf4, 0x01, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, // ................
	0x0b, 0x00, 0x00, 0x00, 0xf7, 0x01, 0x00, 0x00, 0x29, 0x01, 0x00, 0x00, 0xf6, 0x01, 0x00, 0x00, // ........).......
	0x56, 0x00, 0x05, 0x00, 0x40, 0x00, 0x00, 0x00, 0x60, 0x02, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, // V...@...`...5...
	0x33, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x63, 0x02, 0x00, 0x00, // 3...X.......c...
	0x60, 0x02, 0x00, 0x00, 0xf7, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, // `...........W...
	0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xfa, 0x01, 0x00, 0x00, 0x63, 0x02, 0x00, 0x00, // Q...........c...
	0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0xfb, 0x01, 0x00, 0x00, // ................
	0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0xec, 0x01, 0x00, 0x00, 0xfa, 0x01, 0x00, 0x00, // ....%...........
	0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xff, 0x01, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, // P...........W...
	0x95, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00, // ....P...........
	0x95, 0x01, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x6a, 0x00, 0x00, 0x00, // ....W...P...j...
	0x02, 0x02, 0x00, 0x00, 0x93, 0x01, 0x00, 0x00, 0x93, 0x01, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, // ................
	0x0b, 0x00, 0x00, 0x00, 0x03, 0x02, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0xff, 0x01, 0x00, 0x00, // ................
	0x01, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x04, 0x02, 0x00, 0x00, // ................
	0x29, 0x01, 0x00, 0x00, 0x03, 0x02, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, 0x40, 0x00, 0x00, 0x00, // ).......V...@...
	0x6a, 0x02, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, // j...5...3...X...
	0x0e, 0x00, 0x00, 0x00, 0x6d, 0x02, 0x00, 0x00, 0x6a, 0x02, 0x00, 0x00, 0x04, 0x02, 0x00, 0x00, // ....m...j.......
	0x02, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // ....W...Q.......
	0x07, 0x02, 0x00, 0x00, 0x6d, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, // ....m...........
	0x07, 0x00, 0x00, 0x00, 0x08, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, // ............%...
	0xfb, 0x01, 0x00, 0x00, 0x07, 0x02, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x54, 0x00, 0x00, 0x00, // ........A...T...
	0x09, 0x02, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x98, 0x00, 0x00, 0x00, // ....Q...8.......
	0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x0a, 0x02, 0x00, 0x00, 0x09, 0x02, 0x00, 0x00, // =...............
	0x41, 0x00, 0x06, 0x00, 0x54, 0x00, 0x00, 0x00, 0x0d, 0x02, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00, // A...T.......Q...
	0x3c, 0x00, 0x00, 0x00, 0x9e, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, // <.......=.......
	0x0e, 0x02, 0x00, 0x00, 0x0d, 0x02, 0x00, 0x00, 0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // ................
	0x0f, 0x02, 0x00, 0x00, 0x9c, 0x00, 0x00, 0x00, 0x0e, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, // ................
	0x07, 0x00, 0x00, 0x00, 0x10, 0x02, 0x00, 0x00, 0x0f, 0x02, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, // ............c...
	0x0c, 0x00, 0x08, 0x00, 0x07, 0x00, 0x00, 0x00, 0x12, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // ................
	0x32, 0x00, 0x00, 0x00, 0x08, 0x02, 0x00, 0x00, 0x10, 0x02, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, // 2...........c...
	0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x13, 0x02, 0x00, 0x00, 0x9c, 0x00, 0x00, 0x00, // ................
	0x12, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x14, 0x02, 0x00, 0x00, // ................
	0x9c, 0x00, 0x00, 0x00, 0x13, 0x02, 0x00, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x07, 0x00, 0x00, 0x00, // ................
	0x16, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x95, 0x01, 0x00, 0x00, // ........2.......
	0x14, 0x02, 0x00, 0x00, 0x0a, 0x02, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, // ................
	0x17, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, // ........(...W...
	0x16, 0x02, 0x00, 0x00, 0x7f, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x1b, 0x02, 0x00, 0x00, // ................
	0x17, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x1c, 0x02, 0x00, 0x00, // ....P...........
	0x57, 0x00, 0x00, 0x00, 0x1b, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, // W.......P.......
	0x1e, 0x02, 0x00, 0x00, 0x17, 0x02, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, // ........W...P...
	0x6a, 0x00, 0x00, 0x00, 0x1f, 0x02, 0x00, 0x00, 0x93, 0x01, 0x00, 0x00, 0x93, 0x01, 0x00, 0x00, // j...............
	0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00, 0x1f, 0x02, 0x00, 0x00, // ........ .......
	0x1c, 0x02, 0x00, 0x00, 0x1e, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, // ................
	0x21, 0x02, 0x00, 0x00, 0x29, 0x01, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, // !...)... ...V...
	0x40, 0x00, 0x00, 0x00, 0x74, 0x02, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, // @...t.../...,...
	0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x77, 0x02, 0x00, 0x00, 0x74, 0x02, 0x00, 0x00, // X.......w...t...
	0x21, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, 0x4f, 0x00, 0x08, 0x00, // !.......W...O...
	0x1b, 0x00, 0x00, 0x00, 0x24, 0x02, 0x00, 0x00, 0x77, 0x02, 0x00, 0x00, 0x77, 0x02, 0x00, 0x00, // ....$...w...w...
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, // ................
	0x26, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x97, 0x01, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, // &...............
	0x07, 0x00, 0x00, 0x00, 0x9b, 0x01, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, 0x95, 0x01, 0x00, 0x00, // ........c.......
	0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x9c, 0x01, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, // P...........W...
	0x9b, 0x01, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x9e, 0x01, 0x00, 0x00, // ................
	0x63, 0x00, 0x00, 0x00, 0x95, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, // c.......P.......
	0x9f, 0x01, 0x00, 0x00, 0x9e, 0x01, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, // ........W...P...
	0x6a, 0x00, 0x00, 0x00, 0xa0, 0x01, 0x00, 0x00, 0x93, 0x01, 0x00, 0x00, 0x93, 0x01, 0x00, 0x00, // j...............
	0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xa1, 0x01, 0x00, 0x00, 0xa0, 0x01, 0x00, 0x00, // ................
	0x9c, 0x01, 0x00, 0x00, 0x9f, 0x01, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, // ................
	0xa2, 0x01, 0x00, 0x00, 0x29, 0x01, 0x00, 0x00, 0xa1, 0x01, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, // ....).......V...
	0x40, 0x00, 0x00, 0x00, 0x2e, 0x02, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, // @.......5...3...
	0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x31, 0x02, 0x00, 0x00, 0x2e, 0x02, 0x00, 0x00, // X.......1.......
	0xa2, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, // ........W...Q...
	0x07, 0x00, 0x00, 0x00, 0xa5, 0x01, 0x00, 0x00, 0x31, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........1.......
	0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xa9, 0x01, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, // ............v...
	0x95, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xaa, 0x01, 0x00, 0x00, // ....P...........
	0x57, 0x00, 0x00, 0x00, 0xa9, 0x01, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // W...............
	0xac, 0x01, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x95, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, // ....v.......P...
	0x0b, 0x00, 0x00, 0x00, 0xad, 0x01, 0x00, 0x00, 0xac, 0x01, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, // ............W...
	0x50, 0x00, 0x05, 0x00, 0x6a, 0x00, 0x00, 0x00, 0xae, 0x01, 0x00, 0x00, 0x93, 0x01, 0x00, 0x00, // P...j...........
	0x93, 0x01, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xaf, 0x01, 0x00, 0x00, // ................
	0xae, 0x01, 0x00, 0x00, 0xaa, 0x01, 0x00, 0x00, 0xad, 0x01, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, // ................
	0x0b, 0x00, 0x00, 0x00, 0xb0, 0x01, 0x00, 0x00, 0x29, 0x01, 0x00, 0x00, 0xaf, 0x01, 0x00, 0x00, // ........).......
	0x56, 0x00, 0x05, 0x00, 0x40, 0x00, 0x00, 0x00, 0x38, 0x02, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, // V...@...8...5...
	0x33, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x3b, 0x02, 0x00, 0x00, // 3...X.......;...
	0x38, 0x02, 0x00, 0x00, 0xb0, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, // 8...........W...
	0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xb3, 0x01, 0x00, 0x00, 0x3b, 0x02, 0x00, 0x00, // Q...........;...
	0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0xb4, 0x01, 0x00, 0x00, // ................
	0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0xa5, 0x01, 0x00, 0x00, 0xb3, 0x01, 0x00, 0x00, // ....%...........
	0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, // P...........W...
	0x95, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xba, 0x01, 0x00, 0x00, // ....P...........
	0x95, 0x01, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x6a, 0x00, 0x00, 0x00, // ....W...P...j...
	0xbb, 0x01, 0x00, 0x00, 0x93, 0x01, 0x00, 0x00, 0x93, 0x01, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, // ................
	0x0b, 0x00, 0x00, 0x00, 0xbc, 0x01, 0x00, 0x00, 0xbb, 0x01, 0x00, 0x00, 0xb8, 0x01, 0x00, 0x00, // ................
	0xba, 0x01, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xbd, 0x01, 0x00, 0x00, // ................
	0x29, 0x01, 0x00, 0x00, 0xbc, 0x01, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, 0x40, 0x00, 0x00, 0x00, // ).......V...@...
	0x42, 0x02, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, // B...5...3...X...
	0x0e, 0x00, 0x00, 0x00, 0x45, 0x02, 0x00, 0x00, 0x42, 0x02, 0x00, 0x00, 0xbd, 0x01, 0x00, 0x00, // ....E...B.......
	0x02, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // ....W...Q.......
	0xc0, 0x01, 0x00, 0x00, 0x45, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, // ....E...........
	0x07, 0x00, 0x00, 0x00, 0xc1, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, // ............%...
	0xb4, 0x01, 0x00, 0x00, 0xc0, 0x01, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x54, 0x00, 0x00, 0x00, // ........A...T...
	0xc2, 0x01, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x98, 0x00, 0x00, 0x00, // ....Q...8.......
	0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0xc3, 0x01, 0x00, 0x00, 0xc2, 0x01, 0x00, 0x00, // =...............
	0x41, 0x00, 0x06, 0x00, 0x54, 0x00, 0x00, 0x00, 0xc6, 0x01, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00, // A...T.......Q...
	0x3c, 0x00, 0x00, 0x00, 0x9e, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, // <.......=.......
	0xc7, 0x01, 0x00, 0x00, 0xc6, 0x01, 0x00, 0x00, 0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // ................
	0xc8, 0x01, 0x00, 0x00, 0x9c, 0x00, 0x00, 0x00, 0xc7, 0x01, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, // ................
	0x07, 0x00, 0x00, 0x00, 0xc9, 0x01, 0x00, 0x00, 0xc8, 0x01, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, // ............c...
	0x0c, 0x00, 0x08, 0x00, 0x07, 0x00, 0x00, 0x00, 0xcb, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // ................
	0x32, 0x00, 0x00, 0x00, 0xc1, 0x01, 0x00, 0x00, 0xc9, 0x01, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, // 2...........c...
	0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xcc, 0x01, 0x00, 0x00, 0x9c, 0x00, 0x00, 0x00, // ................
	0xcb, 0x01, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xcd, 0x01, 0x00, 0x00, // ................
	0x9c, 0x00, 0x00, 0x00, 0xcc, 0x01, 0x00, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x07, 0x00, 0x00, 0x00, // ................
	0xcf, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x95, 0x01, 0x00, 0x00, // ........2.......
	0xcd, 0x01, 0x00, 0x00, 0xc3, 0x01, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, // ................
	0xd0, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, // ........(...W...
	0xcf, 0x01, 0x00, 0x00, 0x7f, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0xd4, 0x01, 0x00, 0x00, // ................
	0xd0, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xd5, 0x01, 0x00, 0x00, // ....P...........
	0x57, 0x00, 0x00, 0x00, 0xd4, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, // W.......P.......
	0xd7, 0x01, 0x00, 0x00, 0xd0, 0x01, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, // ........W...P...
	0x6a, 0x00, 0x00, 0x00, 0xd8, 0x01, 0x00, 0x00, 0x93, 0x01, 0x00, 0x00, 0x93, 0x01, 0x00, 0x00, // j...............
	0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xd9, 0x01, 0x00, 0x00, 0xd8, 0x01, 0x00, 0x00, // ................
	0xd5, 0x01, 0x00, 0x00, 0xd7, 0x01, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, // ................
	0xda, 0x01, 0x00, 0x00, 0x29, 0x01, 0x00, 0x00, 0xd9, 0x01, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, // ....).......V...
	0x40, 0x00, 0x00, 0x00, 0x4c, 0x02, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, // @...L.../...,...
	0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x4f, 0x02, 0x00, 0x00, 0x4c, 0x02, 0x00, 0x00, // X.......O...L...
	0xda, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, 0x4f, 0x00, 0x08, 0x00, // ........W...O...
	0x1b, 0x00, 0x00, 0x00, 0xdd, 0x01, 0x00, 0x00, 0x4f, 0x02, 0x00, 0x00, 0x4f, 0x02, 0x00, 0x00, // ........O...O...
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, // ................
	0x26, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x25, 0x02, 0x00, 0x00, 0xff, 0x00, 0x01, 0x00, // &.......%.......
	0xf8, 0x00, 0x02, 0x00, 0x26, 0x02, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x1b, 0x00, 0x00, 0x00, // ....&...........
	0x9a, 0x02, 0x00, 0x00, 0x24, 0x02, 0x00, 0x00, 0xde, 0x01, 0x00, 0x00, 0xdd, 0x01, 0x00, 0x00, // ....$...........
	0x97, 0x01, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x63, 0x01, 0x00, 0x00, // ....Q.......c...
	0x9a, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // ........Q.......
	0x64, 0x01, 0x00, 0x00, 0x9a, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, // d...........Q...
	0x07, 0x00, 0x00, 0x00, 0x65, 0x01, 0x00, 0x00, 0x9a, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // ....e...........
	0x50, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x66, 0x01, 0x00, 0x00, 0x63, 0x01, 0x00, 0x00, // P.......f...c...
	0x64, 0x01, 0x00, 0x00, 0x65, 0x01, 0x00, 0x00, 0x9c, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x03, 0x00, // d...e.......>...
	0x33, 0x01, 0x00, 0x00, 0x66, 0x01, 0x00, 0x00, 0xfd, 0x00, 0x01, 0x00, 0x38, 0x00, 0x01, 0x00, // 3...f.......8...
	0x00, 0x00, 0x20, 0x00,                                                                         // .. .
};
static const bgfx::EmbeddedShader fs_pp_stereo_int = BGFX_EMBEDDED_SHADER(fs_pp_stereo_int);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Build of fragment shader from fs_pp_stereo.sc to fs_pp_stereo_flipped_int with options: FLIPPED_INT NOSTEREO
static const uint8_t fs_pp_stereo_flipped_int_mtl[3220] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x14, 0x74, // FSH.o.><.......t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, // ex_stereo_fbSamp
	0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x74, 0x65, // ler...........te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x54, 0x65, 0x78, 0x74, 0x75, // x_stereo_fbTextu
	0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x74, 0x65, 0x78, // re...........tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, // _stereo_depthSam
	0x70, 0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x74, // pler...........t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x54, // ex_stereo_depthT
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, // exture..........
	0x13, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, // .Stereo_MS_ZPD_Y
	0x41, 0x78, 0x69, 0x73, 0x12, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x77, // Axis...........w
	0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x01, 0x10, 0x00, 0x01, 0x00, 0x00, // _h_height.......
	0x00, 0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, // ....tex_stereo_f
	0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x74, 0x65, 0x78, 0x5f, // b...........tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x10, 0x00, 0x00, 0x00, // stereo_depth....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x96, 0x0b, 0x00, 0x00, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, // ..........#inclu
	0x64, 0x65, 0x20, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x64, 0x6c, 0x69, 0x62, // de <metal_stdlib
	0x3e, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x73, 0x69, 0x6d, 0x64, // >.#include <simd
	0x2f, 0x73, 0x69, 0x6d, 0x64, 0x2e, 0x68, 0x3e, 0x0a, 0x0a, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, // /simd.h>..using 
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x3b, // namespace metal;
	0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, // ..struct _Global
	0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, // .{.    float4 St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, // ereo_MS_ZPD_YAxi
	0x73, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x77, 0x5f, // s;.    float4 w_
	0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, // h_height;.};..st
	0x72, 0x75, 0x63, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, // ruct xlatMtlMain
	0x5f, 0x6f, 0x75, 0x74, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // _out.{.    float
	0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, // 4 bgfx_FragData0
	0x20, 0x5b, 0x5b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, //  [[color(0)]];.}
	0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, // ;..struct xlatMt
	0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, // lMain_in.{.    f
	0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, // loat2 v_texcoord
	0x30, 0x20, 0x5b, 0x5b, 0x75, 0x73, 0x65, 0x72, 0x28, 0x6c, 0x6f, 0x63, 0x6e, 0x30, 0x29, 0x5d, // 0 [[user(locn0)]
	0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, // ];.};..fragment 
	0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x20, // xlatMtlMain_out 
	0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x28, 0x78, 0x6c, 0x61, 0x74, // xlatMtlMain(xlat
	0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x5b, 0x5b, // MtlMain_in in [[
	0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x5d, 0x5d, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, // stage_in]], cons
	0x74, 0x61, 0x6e, 0x74, 0x20, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x26, 0x20, 0x5f, 0x6d, // tant _Global& _m
	0x74, 0x6c, 0x5f, 0x75, 0x20, 0x5b, 0x5b, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x28, 0x30, 0x29, // tl_u [[buffer(0)
	0x5d, 0x5d, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, // ]], texture2d<fl
	0x6f, 0x61, 0x74, 0x3e, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // oat> tex_stereo_
	0x66, 0x62, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x30, 0x29, 0x5d, // fb [[texture(0)]
	0x5d, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, 0x6f, // ], texture2d<flo
	0x61, 0x74, 0x3e, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, // at> tex_stereo_d
	0x65, 0x70, 0x74, 0x68, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x31, // epth [[texture(1
	0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x74, 0x65, 0x78, // )]], sampler tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, // _stereo_fbSample
	0x72, 0x20, 0x5b, 0x5b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, // r [[sampler(0)]]
	0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // , sampler tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, // ereo_depthSample
	0x72, 0x20, 0x5b, 0x5b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x31, 0x29, 0x5d, 0x5d, // r [[sampler(1)]]
	0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, // , float4 gl_Frag
	0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x5b, 0x5b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, // Coord [[position
	0x5d, 0x5d, 0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, // ]]).{.    xlatMt
	0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x3d, 0x20, // lMain_out out = 
	0x7b, 0x7d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, // {};.    float3 _
	0x36, 0x36, 0x36, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x64, 0x6f, 0x0a, 0x20, 0x20, 0x20, 0x20, // 666;.    do.    
	0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x5f, // {.        bool _
	0x34, 0x30, 0x33, 0x20, 0x3d, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, // 403 = _mtl_u.Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, // reo_MS_ZPD_YAxis
	0x2e, 0x7a, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // .z != 0.0;.     
	0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x66, 0x72, 0x61, 0x63, 0x74, 0x28, 0x67, 0x6c, 0x5f, //    if (fract(gl_
	0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x30, 0x2e, // FragCoord.y * 0.
	0x35, 0x29, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // 5) >= 0.5).     
	0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //    {.           
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x34, 0x36, 0x34, 0x20, 0x3d, 0x20, 0x66, 0x61, //  float _464 = fa
	0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x66, 0x6d, 0x61, // st::max(0.0, fma
	0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, // (_mtl_u.Stereo_M
	0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, 0x20, 0x31, // S_ZPD_YAxis.x, 1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x66, 0x6d, 0x61, 0x28, // .0 - (1.0 / fma(
	0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, 0x6e, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, // fast::min(fast::
	0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, // min(tex_stereo_d
	0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, // epth.sample(tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, // stereo_depthSamp
	0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, // ler, (in.v_texco
	0x6f, 0x72, 0x64, 0x30, 0x20, 0x2b, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, // ord0 + select(fl
	0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, // oat2(0.5 * _mtl_
	0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, // u.Stereo_MS_ZPD_
	0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, // YAxis.x, 0.0), f
	0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x2a, // loat2(0.0, 0.5 *
	0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, //  _mtl_u.Stereo_M
	0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, // S_ZPD_YAxis.x), 
	0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x34, 0x30, 0x33, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, // bool2(_403))), l
	0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x2c, 0x20, 0x74, 0x65, // evel(0.0)).x, te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, // x_stereo_depth.s
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // ample(tex_stereo
	0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, // _depthSampler, (
	0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2b, // in.v_texcoord0 +
	0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, //  select(float2(0
	0x2e, 0x36, 0x36, 0x36, 0x30, 0x30, 0x30, 0x30, 0x30, 0x38, 0x35, 0x38, 0x33, 0x30, 0x36, 0x38, // .666000008583068
	0x38, 0x34, 0x37, 0x36, 0x35, 0x36, 0x32, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, // 84765625 * _mtl_
	0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, // u.Stereo_MS_ZPD_
	0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, // YAxis.x, 0.0), f
	0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, // loat2(0.0, 0.666
	0x30, 0x30, 0x30, 0x30, 0x30, 0x38, 0x35, 0x38, 0x33, 0x30, 0x36, 0x38, 0x38, 0x34, 0x37, 0x36, // 0000085830688476
	0x35, 0x36, 0x32, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, // 5625 * _mtl_u.St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, // ereo_MS_ZPD_YAxi
	0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x34, 0x30, 0x33, // s.x), bool2(_403
	0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, // ))), level(0.0))
	0x2e, 0x78, 0x29, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // .x), tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, // depth.sample(tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, // _stereo_depthSam
	0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, // pler, (in.v_texc
	0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2b, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, // oord0 + select(f
	0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, // loat2(_mtl_u.Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, // reo_MS_ZPD_YAxis
	0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, // .x, 0.0), float2
	0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, // (0.0, _mtl_u.Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, // reo_MS_ZPD_YAxis
	0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x34, 0x30, 0x33, 0x29, // .x), bool2(_403)
	0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, // )), level(0.0)).
	0x78, 0x29, 0x2c, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, // x), (1.0 / _mtl_
	0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, // u.Stereo_MS_ZPD_
	0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x2c, 0x20, // YAxis.y) - 0.5, 
	0x30, 0x2e, 0x35, 0x29, 0x29, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x77, 0x5f, // 0.5)), _mtl_u.w_
	0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, // h_height.w));.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x36, 0x36, 0x36, 0x20, 0x3d, //           _666 =
	0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2e, 0x73, //  tex_stereo_fb.s
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // ample(tex_stereo
	0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, 0x6e, 0x2e, // _fbSampler, (in.
	0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2b, 0x20, 0x73, 0x65, // v_texcoord0 + se
	0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x5f, 0x34, 0x36, 0x34, // lect(float2(_464
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, // , 0.0), float2(0
	0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x5f, 0x34, 0x36, 0x34, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, // .0, -_464), bool
	0x32, 0x28, 0x5f, 0x34, 0x30, 0x33, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, // 2(_403))), level
	0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, // (0.0)).xyz;.    
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, //         break;. 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //        }.       
	0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, //  else.        {.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, //             floa
	0x74, 0x20, 0x5f, 0x35, 0x33, 0x35, 0x20, 0x3d, 0x20, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, // t _535 = fast::m
	0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x5f, 0x6d, 0x74, 0x6c, // ax(0.0, fma(_mtl
	0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, // _u.Stereo_MS_ZPD
	0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, // _YAxis.x, 1.0 - 
	0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, // (1.0 / fma(fast:
	0x3a, 0x6d, 0x69, 0x6e, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, 0x6e, 0x28, 0x74, // :min(fast::min(t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, // ex_stereo_depth.
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // sample(tex_stere
	0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, // o_depthSampler, 
	0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, // (in.v_texcoord0 
	0x2d, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, // - select(float2(
	0x30, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, // 0.5 * _mtl_u.Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, // reo_MS_ZPD_YAxis
	0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, // .x, 0.0), float2
	0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, // (0.0, 0.5 * _mtl
	0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, // _u.Stereo_MS_ZPD
	0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, // _YAxis.x), bool2
	0x28, 0x5f, 0x34, 0x30, 0x33, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, // (_403))), level(
	0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, // 0.0)).x, tex_ste
	0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // reo_depth.sample
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, // (tex_stereo_dept
	0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, // hSampler, (in.v_
	0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2d, 0x20, 0x73, 0x65, 0x6c, 0x65, // texcoord0 - sele
	0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x30, // ct(float2(0.6660
	0x30, 0x30, 0x30, 0x30, 0x38, 0x35, 0x38, 0x33, 0x30, 0x36, 0x38, 0x38, 0x34, 0x37, 0x36, 0x35, // 0000858306884765
	0x36, 0x32, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, // 625 * _mtl_u.Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, // reo_MS_ZPD_YAxis
	0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, // .x, 0.0), float2
	0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x30, 0x30, 0x30, 0x30, 0x30, // (0.0, 0.66600000
	0x38, 0x35, 0x38, 0x33, 0x30, 0x36, 0x38, 0x38, 0x34, 0x37, 0x36, 0x35, 0x36, 0x32, 0x35, 0x20, // 858306884765625 
	0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // * _mtl_u.Stereo_
	0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, // MS_ZPD_YAxis.x),
	0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x34, 0x30, 0x33, 0x29, 0x29, 0x29, 0x2c, 0x20, //  bool2(_403))), 
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x20, // level(0.0)).x), 
	0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, // tex_stereo_depth
	0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // .sample(tex_ster
	0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, // eo_depthSampler,
	0x20, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, //  (in.v_texcoord0
	0x20, 0x2d, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, //  - select(float2
	0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, // (_mtl_u.Stereo_M
	0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, 0x20, 0x30, // S_ZPD_YAxis.x, 0
	0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, // .0), float2(0.0,
	0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, //  _mtl_u.Stereo_M
	0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, // S_ZPD_YAxis.x), 
	0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x34, 0x30, 0x33, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, // bool2(_403))), l
	0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x28, // evel(0.0)).x), (
	0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, // 1.0 / _mtl_u.Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, // reo_MS_ZPD_YAxis
	0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, // .y) - 0.5, 0.5))
	0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, // , _mtl_u.w_h_hei
	0x67, 0x68, 0x74, 0x2e, 0x77, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ght.w));.       
	0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x36, 0x36, 0x36, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x5f, //      _666 = tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // stereo_fb.sample
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, // (tex_stereo_fbSa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, // mpler, (in.v_tex
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2d, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, // coord0 - select(
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x5f, 0x35, 0x33, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, // float2(_535, 0.0
	0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, // ), float2(0.0, -
	0x5f, 0x35, 0x33, 0x35, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x34, 0x30, // _535), bool2(_40
	0x33, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, // 3))), level(0.0)
	0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ).xyz;.         
	0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //    break;.      
	0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, //   }.        brea
	0x6b, 0x3b, 0x20, 0x2f, 0x2f, 0x20, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, // k; // unreachabl
	0x65, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x61, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x0a, 0x20, 0x20, 0x20, // e workaround.   
	0x20, 0x7d, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x28, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x29, 0x3b, //  } while(false);
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x6f, 0x75, 0x74, 0x2e, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, // .    out.bgfx_Fr
	0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, // agData0 = float4
	0x28, 0x5f, 0x36, 0x36, 0x36, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, // (_666, 1.0);.   
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6f, 0x75, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x0a, //  return out;.}..
	0x00, 0x00, 0x60, 0x00,                                                                         // ..`.
};
static const uint8_t fs_pp_stereo_flipped_int_essl[11029] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x2b, // FSH.o.><.......+
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x33, 0x32, 0x30, 0x20, 0x65, // ..#version 320 e
	0x73, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, // s.#define attrib
	0x75, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x76, // ute in.#define v
	0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, // arying in.precis
	0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3b, // ion highp float;
	0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, // .precision highp
	0x20, 0x69, 0x6e, 0x74, 0x3b, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x73, 0x68, //  int;.#define sh
	0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, // adow2D(_sampler,
	0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, //  _coord) texture
	0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, // (_sampler, _coor
	0x64, 0x29, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x73, 0x68, 0x61, 0x64, 0x6f, // d).#define shado
	0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // w2DProj(_sampler
	0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // , _coord) textur
	0x65, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, // eProj(_sampler, 
	0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x0a, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x65, 0x64, 0x69, // _coord).out medi
	0x75, 0x6d, 0x70, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, // ump vec4 bgfx_Fr
	0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, // agColor;.varying
	0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, //  vec2 v_texcoord
	0x30, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, // 0;.vec3 instMul(
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x20, // vec3 _vec, mat3 
	0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // _mtx) { return (
	0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, //  (_vec) * (_mtx)
	0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, //  ); }.vec3 instM
	0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, // ul(mat3 _mtx, ve
	0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, // c3 _vec) { retur
	0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, // n ( (_mtx) * (_v
	0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, // ec) ); }.vec4 in
	0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, // stMul(vec4 _vec,
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, //  mat4 _mtx) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, // turn ( (_vec) * 
	0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, // (_mtx) ); }.vec4
	0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, //  instMul(mat4 _m
	0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, // tx, vec4 _vec) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, //  return ( (_mtx)
	0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, //  * (_vec) ); }.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, 0x70, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, // loat rcp(float _
	0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x2f, // a) { return 1.0/
	0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, // _a; }.vec2 rcp(v
	0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // ec2 _a) { return
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, //  vec2(1.0)/_a; }
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, // .vec3 rcp(vec3 _
	0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, // a) { return vec3
	0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, // (1.0)/_a; }.vec4
	0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, //  rcp(vec4 _a) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x31, 0x2e, 0x30, 0x29, // return vec4(1.0)
	0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x65, 0x63, 0x32, // /_a; }.vec2 vec2
	0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, // _splat(float _x)
	0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, //  { return vec2(_
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, // x, _x); }.vec3 v
	0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // ec3_splat(float 
	0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, // _x) { return vec
	0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, // 3(_x, _x, _x); }
	0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, // .vec4 vec4_splat
	0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // (float _x) { ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, // urn vec4(_x, _x,
	0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, //  _x, _x); }.uvec
	0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, // 2 uvec2_splat(ui
	0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // nt _x) { return 
	0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, // uvec2(_x, _x); }
	0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, // .uvec3 uvec3_spl
	0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // at(uint _x) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, // turn uvec3(_x, _
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x34, 0x20, // x, _x); }.uvec4 
	0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, // uvec4_splat(uint
	0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, //  _x) { return uv
	0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, // ec4(_x, _x, _x, 
	0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, // _x); }.mat4 mtxF
	0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, // romRows(vec4 _0,
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, //  vec4 _1, vec4 _
	0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // 2, vec4 _3).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, // turn transpose(m
	0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, // at4(_0, _1, _2, 
	0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, // _3) );.}.mat4 mt
	0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, // xFromCols(vec4 _
	0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // 0, vec4 _1, vec4
	0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, //  _2, vec4 _3).{.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, // return mat4(_0, 
	0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, // _1, _2, _3);.}.m
	0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, // at3 mtxFromRows(
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, // vec3 _0, vec3 _1
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // , vec3 _2).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, // urn transpose(ma
	0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x20, 0x29, // t3(_0, _1, _2) )
	0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, // ;.}.mat3 mtxFrom
	0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, // Cols(vec3 _0, ve
	0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, // c3 _1, vec3 _2).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, // {.return mat3(_0
	0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, // , _1, _2);.}.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, // form vec4 u_view
	0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, // Rect;.uniform ve
	0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x54, 0x65, 0x78, 0x65, 0x6c, 0x3b, 0x0a, // c4 u_viewTexel;.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, // uniform mat4 u_v
	0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, // iew;.uniform mat
	0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, // 4 u_invView;.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x70, 0x72, 0x6f, 0x6a, // form mat4 u_proj
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, // ;.uniform mat4 u
	0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // _invProj;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, // m mat4 u_viewPro
	0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, // j;.uniform mat4 
	0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, // u_invViewProj;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, // niform mat4 u_mo
	0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // del[32];.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, //  mat4 u_modelVie
	0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, // w;.uniform mat4 
	0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, // u_modelViewProj;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, // .uniform vec4 u_
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x66, 0x34, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // alphaRef4;.float
	0x20, 0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, //  sqr(const float
	0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, //  v).{.return v*v
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, // ;.}.vec2 sqr(con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // st vec2 v).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // urn v*v;.}.vec3 
	0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, // sqr(const vec3 v
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, // ).{.return v*v;.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6d, 0x75, 0x6c, 0x5f, 0x77, 0x31, 0x28, 0x63, 0x6f, // }.vec3 mul_w1(co
	0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, // nst vec3 v, cons
	0x74, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, // t mat4 m).{.retu
	0x72, 0x6e, 0x20, 0x76, 0x2e, 0x78, 0x2a, 0x6d, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, // rn v.x*m[0].xyz 
	0x2b, 0x20, 0x28, 0x76, 0x2e, 0x79, 0x2a, 0x6d, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, // + (v.y*m[1].xyz 
	0x2b, 0x20, 0x28, 0x76, 0x2e, 0x7a, 0x2a, 0x6d, 0x5b, 0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, // + (v.z*m[2].xyz 
	0x2b, 0x20, 0x6d, 0x5b, 0x33, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // + m[3].xyz));.}.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, // float acos_appro
	0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // x_divPI(const fl
	0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // oat v).{.const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, // loat x = abs(v);
	0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, // .if(1. - x <= 0.
	0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, // 00006103515625).
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, // return (v >= 0.)
	0x20, 0x3f, 0x20, 0x30, 0x2e, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, //  ? 0. : 1.;.cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, // t float res = ((
	0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, // -0.155972/3.1415
	0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, // 9265358979323846
	0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, // 26433832795) * x
	0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, //  + (1.56467/3.14
	0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, // 1592653589793238
	0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, // 4626433832795) )
	0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, //  * sqrt(1. - x);
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, // .return (v >= 0.
	0x29, 0x20, 0x3f, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x72, // ) ? res : 1. - r
	0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x74, 0x61, 0x6e, // es;.}.float atan
	0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, // 2_approx_div2PI(
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x79, 0x2c, 0x20, 0x63, // const float y, c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x29, 0x0a, 0x7b, 0x0a, // onst float x).{.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, // const float abs_
	0x79, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x79, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // y = abs(y);.cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3d, 0x20, // t float abs_x = 
	0x61, 0x62, 0x73, 0x28, 0x78, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, // abs(x);.if(abs_x
	0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, //  <= 0.0000610351
	0x35, 0x36, 0x32, 0x35, 0x20, 0x26, 0x26, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3c, 0x3d, // 5625 && abs_y <=
	0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, //  0.0000610351562
	0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x30, 0x2e, 0x3b, 0x0a, 0x63, 0x6f, // 5).return 0.;.co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x61, // nst float r = (a
	0x62, 0x73, 0x5f, 0x78, 0x20, 0x2d, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x20, 0x2f, 0x20, // bs_x - abs_y) / 
	0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2b, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x3b, // (abs_x + abs_y);
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x6e, 0x67, // .const float ang
	0x6c, 0x65, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, // le = ((x < 0.) ?
	0x20, 0x28, 0x33, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x20, 0x3a, 0x20, 0x28, 0x31, 0x2e, 0x2f, 0x38, //  (3./8.) : (1./8
	0x2e, 0x29, 0x29, 0x0a, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x32, 0x31, 0x31, 0x38, 0x36, 0x38, 0x20, // .)).+ (0.211868 
	0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, // /(2.*3.141592653
	0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, // 5897932384626433
	0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x72, 0x20, 0x2a, 0x20, 0x72, 0x20, // 832795) * r * r 
	0x2d, 0x20, 0x30, 0x2e, 0x39, 0x38, 0x37, 0x33, 0x30, 0x35, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, // - 0.987305 /(2.*
	0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, // 3.14159265358979
	0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, // 3238462643383279
	0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, // 5)) * ((x < 0.) 
	0x3f, 0x20, 0x2d, 0x72, 0x20, 0x3a, 0x20, 0x72, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // ? -r : r);.retur
	0x6e, 0x20, 0x28, 0x79, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x61, 0x6e, // n (y < 0.) ? -an
	0x67, 0x6c, 0x65, 0x20, 0x3a, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // gle : angle;.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x73, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, // loat asin_approx
	0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, // _divPI(const flo
	0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // at v).{.const fl
	0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, // oat x = abs(v);.
	0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, // if(1. - x <= 0.0
	0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, // 0006103515625).r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, // eturn (v >= 0.) 
	0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x3b, 0x0a, 0x63, 0x6f, // ? 0.5 : -0.5;.co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, // nst float res = 
	0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, // ((-0.155972/3.14
	0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, // 1592653589793238
	0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, // 4626433832795) *
	0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, //  x + (1.56467/3.
	0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, // 1415926535897932
	0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, // 384626433832795)
	0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, //  ) * sqrt(1. - x
	0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, // );.return (v >= 
	0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x20, // 0.) ? 0.5 - res 
	0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, // : -0.5 + res;.}.
	0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x61, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x71, 0x75, 0x69, // vec2 ray_to_equi
	0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x75, 0x76, 0x28, 0x63, // rectangular_uv(c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x61, 0x79, 0x29, 0x0a, 0x7b, // onst vec3 ray).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x0a, 0x30, 0x2e, // .return vec2(.0.
	0x35, 0x20, 0x2b, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, // 5 + atan2_approx
	0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x79, 0x2c, 0x20, 0x72, // _div2PI(ray.y, r
	0x61, 0x79, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, // ay.x),.acos_appr
	0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x7a, 0x29, 0x29, // ox_divPI(ray.z))
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, // ;.}.float InvsRG
	0x42, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, // B(const float co
	0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // lor).{.if (color
	0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, 0x34, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, //  <= 0.04045).ret
	0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, // urn color * (1.0
	0x2f, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, // /12.92);.else.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, // turn pow(color *
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x28, //  (1.0/1.055) + (
	0x30, 0x2e, 0x30, 0x35, 0x35, 0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, // 0.055/1.055), 2.
	0x34, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x52, // 4);.}.float InvR
	0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, // ec709(const floa
	0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, // t color).{.if (c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x38, 0x31, 0x29, 0x0a, 0x72, // olor <= 0.081).r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, // eturn color * (1
	0x2e, 0x30, 0x2f, 0x34, 0x2e, 0x35, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, // .0/4.5);.else.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, // turn pow(color *
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, 0x20, 0x2b, 0x20, 0x28, //  (1.0/1.099) + (
	0x30, 0x2e, 0x30, 0x39, 0x39, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, 0x2c, 0x20, 0x31, 0x2e, // 0.099/1.099), 1.
	0x30, 0x2f, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // 0/0.45);.}.float
	0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, //  InvGamma(const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, // float color).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, // eturn InvsRGB(co
	0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, // lor);.}.vec3 Inv
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, // Gamma(const vec3
	0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, //  color).{.return
	0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, //  vec3(InvGamma(c
	0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, // olor.x),InvGamma
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, // (color.y),InvGam
	0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // ma(color.z));.}.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, // vec3 InvToneMap(
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // const vec3 color
	0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // ).{.const float 
	0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x30, 0x2e, 0x35, 0x2f, 0x30, 0x2e, // inv_2bh = 0.5/0.
	0x32, 0x35, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // 25;.const float 
	0x62, 0x68, 0x20, 0x3d, 0x20, 0x34, 0x2e, 0x30, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2d, 0x20, // bh = 4.0*0.25 - 
	0x32, 0x2e, 0x30, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6c, // 2.0;.return (col
	0x6f, 0x72, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2b, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, // or - 1.0 + sqrt(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2a, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x20, 0x62, // color*(color + b
	0x68, 0x29, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x2a, 0x69, 0x6e, 0x76, 0x5f, 0x32, // h) + 1.0))*inv_2
	0x62, 0x68, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x52, 0x47, 0x42, // bh;.}.float sRGB
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, // (const float f).
	0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, // {.float s;.if (f
	0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x33, 0x31, 0x33, 0x30, 0x38, 0x29, 0x0a, 0x73, //  <= 0.0031308).s
	0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, //  = 12.92 * f;.el
	0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x20, 0x2a, 0x20, 0x70, // se.s = 1.055 * p
	0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x34, 0x29, 0x20, 0x2d, // ow(f, 1.0/2.4) -
	0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, //  0.055;.return s
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, // ;.}.float Rec709
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, // (const float f).
	0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, // {.float s;.if (f
	0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x34, //  <= 0.018).s = 4
	0x2e, 0x35, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, // .5 * f;.else.s =
	0x20, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, //  1.099 * pow(f, 
	0x30, 0x2e, 0x34, 0x35, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x3b, 0x0a, 0x72, // 0.45) - 0.099;.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // eturn s;.}.float
	0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, //  FBGamma(const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // loat color).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, // turn sRGB(color)
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, // ;.}.vec2 FBGamma
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // (const vec2 colo
	0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, // r).{.return vec2
	0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, // (FBGamma(color.x
	0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, // ),FBGamma(color.
	0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, // y));.}.vec3 FBGa
	0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, // mma(const vec3 c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // olor).{.return v
	0x65, 0x63, 0x33, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // ec3(FBGamma(colo
	0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, // r.x),FBGamma(col
	0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, // or.y),FBGamma(co
	0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // lor.z));.}.vec3 
	0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x32, 0x32, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // FBGamma22(const 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // vec3 color).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, // turn vec3(pow(co
	0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, // lor.x, 1.0/2.2),
	0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, 0x30, // pow(color.y, 1.0
	0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, // /2.2),pow(color.
	0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // z, 1.0/2.2));.}.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, // float FBToneMap(
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x29, 0x0a, 0x7b, // const float l).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6c, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, // .return l * ((l*
	0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, // 0.25 + 1.0) / (l
	0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, //  + 1.0));.}.vec2
	0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, //  FBToneMap(const
	0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x63, //  vec2 color).{.c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, // onst float l = d
	0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, // ot(color,vec2(0.
	0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, // 176204+0.0108109
	0x2a, 0x30, 0x2e, 0x35, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2b, 0x30, 0x2e, // *0.5,0.812985+0.
	0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x3b, 0x0a, 0x72, // 0108109*0.5));.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, // eturn color * ((
	0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, // l*0.25 + 1.0) / 
	0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // (l + 1.0));.}.ve
	0x63, 0x33, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, // c3 FBToneMap(con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, // st vec3 color).{
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, // .const float l =
	0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x33, 0x28, //  dot(color,vec3(
	0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, // 0.176204,0.81298
	0x35, 0x2c, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x29, 0x29, 0x3b, 0x0a, 0x72, // 5,0.0108109));.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, // eturn color * ((
	0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, // l*0.25 + 1.0) / 
	0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // (l + 1.0));.}.ve
	0x63, 0x34, 0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x28, 0x63, 0x6f, 0x6e, 0x73, // c4 Additive(cons
	0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, // t vec4 cBase, co
	0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, // nst vec4 cBlend,
	0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, //  const float per
	0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, // cent).{.return c
	0x42, 0x61, 0x73, 0x65, 0x20, 0x2b, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, // Base + cBlend*pe
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, // rcent;.}.vec3 Sc
	0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, // reen (const vec3
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, //  cBase, const ve
	0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // c3 cBlend).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, // urn 1.0 - (1.0 -
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, //  cBase) * (1.0 -
	0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, //  cBlend);.}.vec4
	0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, //  Screen (const v
	0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, // ec4 cBase, const
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, //  vec4 cBlend).{.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, // return 1.0 - (1.
	0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, // 0 - cBase) * (1.
	0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // 0 - cBlend);.}.v
	0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x63, // ec3 ScreenHDR (c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, // onst vec3 cBase,
	0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, //  const vec3 cBle
	0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, // nd).{.return max
	0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, // (1.0 - (1.0 - cB
	0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, // ase) * (1.0 - cB
	0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x2c, 0x30, // lend), vec3(0.,0
	0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, // .,0.));.}.vec4 S
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // creenHDR (const 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, // vec4 cBase, cons
	0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, // t vec4 cBlend).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, // .return max(1.0 
	0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, // - (1.0 - cBase) 
	0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, // * (1.0 - cBlend)
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, // , vec4(0.,0.,0.,
	0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4d, 0x75, 0x6c, // 0.));.}.vec4 Mul
	0x74, 0x69, 0x70, 0x6c, 0x79, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, // tiply (const vec
	0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, // 4 cBase, const v
	0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, // ec4 cBlend, cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, // t float percent)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, // .{.return cBase 
	0x2a, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, // * cBlend*percent
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, // ;.}.vec4 Overlay
	0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, //  (const vec4 cBa
	0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, // se, const vec4 c
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, // Blend).{.vec4 cN
	0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, // ew = step(0.5, c
	0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x69, // Base);.cNew = mi
	0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, // x(cBase*cBlend*2
	0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, // .0, 1.0-2.0*(1.0
	0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, // -cBase)*(1.0-cBl
	0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, // end), cNew);.ret
	0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, // urn cNew;.}.vec4
	0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x48, 0x44, 0x52, 0x20, 0x28, 0x63, 0x6f, 0x6e, //  OverlayHDR (con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, // st vec4 cBase, c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, // onst vec4 cBlend
	0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, // ).{.vec4 cNew = 
	0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, // step(0.5, cBase)
	0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x6d, 0x69, 0x78, // ;.cNew = max(mix
	0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, // (cBase*cBlend*2.
	0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, // 0, 1.0-2.0*(1.0-
	0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, // cBase)*(1.0-cBle
	0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // nd), cNew), vec4
	0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, // (0.,0.,0.,0.));.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // return cNew;.}.v
	0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x73, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, // ec3 cos_hemisphe
	0x72, 0x65, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // re_sample(const 
	0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // vec2 t).{.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x68, 0x69, 0x20, 0x3d, 0x20, 0x74, 0x2e, 0x79, 0x20, // float phi = t.y 
	0x2a, 0x20, 0x28, 0x32, 0x2e, 0x30, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, // * (2.0*3.1415926
	0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, // 5358979323846264
	0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, // 33832795);.const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, //  float cosTheta 
	0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x74, 0x2e, 0x78, // = sqrt(1.0 - t.x
	0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, // );.const float s
	0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x74, // inTheta = sqrt(t
	0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x70, 0x2c, 0x63, 0x70, // .x);.float sp,cp
	0x3b, 0x0a, 0x73, 0x69, 0x6e, 0x63, 0x6f, 0x73, 0x28, 0x70, 0x68, 0x69, 0x2c, 0x73, 0x70, 0x2c, // ;.sincos(phi,sp,
	0x63, 0x70, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, // cp);.return vec3
	0x28, 0x63, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, // (cp * sinTheta, 
	0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x73, 0x70, 0x20, 0x2a, 0x20, 0x73, // cosTheta, sp * s
	0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, // inTheta);.}.vec3
	0x20, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, //  rotate_to_vecto
	0x72, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // r_upper(const ve
	0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // c3 vec, const ve
	0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x28, // c3 normal).{.if(
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x3e, 0x20, 0x2d, 0x30, 0x2e, 0x39, 0x39, // normal.y > -0.99
	0x39, 0x39, 0x39, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, // 999).{.const flo
	0x61, 0x74, 0x20, 0x68, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x28, 0x31, 0x2e, 0x30, 0x2b, // at h = 1.0/(1.0+
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, // normal.y);.const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x20, 0x3d, 0x20, 0x68, 0x2a, 0x6e, 0x6f, //  float hz = h*no
	0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // rmal.z;.const fl
	0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x3d, 0x20, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, // oat hzx = hz*nor
	0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, // mal.x;.return ve
	0x63, 0x33, 0x28, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, // c3(.vec.x * (nor
	0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, // mal.y+hz*normal.
	0x7a, 0x29, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, // z) + vec.y * nor
	0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, // mal.x - vec.z * 
	0x68, 0x7a, 0x78, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, // hzx,.vec.y * nor
	0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, // mal.y - vec.x * 
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, // normal.x - vec.z
	0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x2c, 0x0a, 0x76, 0x65, 0x63, //  * normal.z,.vec
	0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x20, 0x2d, 0x20, // .y * normal.z - 
	0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x2b, 0x20, 0x76, 0x65, // vec.x * hzx + ve
	0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, // c.z * (normal.y+
	0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, // h*normal.x*norma
	0x6c, 0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x72, 0x65, // l.x));.}.else re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x2d, 0x76, 0x65, 0x63, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, // turn -vec;.}.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // form vec4 Stereo
	0x5f, 0x53, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x0a, 0x75, 0x6e, 0x69, // _Saturation;.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // form vec4 Stereo
	0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x3b, 0x0a, 0x75, // _MS_ZPD_YAxis;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, // niform sampler2D
	0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x3b, 0x0a, //  tex_stereo_fb;.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, // uniform sampler2
	0x44, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, // D tex_stereo_dep
	0x74, 0x68, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, // th;.uniform vec4
	0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, 0x76, 0x65, 0x63, //  w_h_height;.vec
	0x33, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, // 3 gatherEyeColor
	0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x69, 0x73, // (vec2 u, bool is
	0x4c, 0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x62, 0x6f, // Left).{.const bo
	0x6f, 0x6c, 0x20, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, // ol yaxis = (Ster
	0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, // eo_MS_ZPD_YAxis.
	0x7a, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // z != 0.);.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // float MaxSeparat
	0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, // ion = (Stereo_MS
	0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x69, // _ZPD_YAxis.x);.i
	0x66, 0x20, 0x28, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, // f (isLeft).{.con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, // st float lminDep
	0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, // th = min(min(tex
	0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // tureLod(tex_ster
	0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, // eo_depth, u + (y
	0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, // axis ? vec2(0.0,
	0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, //  0.500 * MaxSepa
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, // ration) : vec2(0
	0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, // .500 * MaxSepara
	0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, // tion, 0.0)), 0.0
	0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, // ).x,.textureLod(
	0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, // tex_stereo_depth
	0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, // , u + (yaxis ? v
	0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, // ec2(0.0, 0.666 *
	0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, //  MaxSeparation) 
	0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, // : vec2(0.666 * M
	0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, // axSeparation, 0.
	0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, // 0)), 0.0).x),.te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, // xtureLod(tex_ste
	0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, // reo_depth, u + (
	0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, // yaxis ? vec2(0.0
	0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, // , MaxSeparation)
	0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, //  : vec2( MaxSepa
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, // ration, 0.0)), 0
	0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x70, // .0).x);.float lp
	0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, // arallax = max(0.
	0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, // 0, w_h_height.w 
	0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, // + MaxSeparation 
	0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, // * (1.0 - 1.0 / (
	0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, // 0.5 + lminDepth 
	0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // * (1.0 / (Stereo
	0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, // _MS_ZPD_YAxis.y)
	0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, //  - 0.5))));.retu
	0x72, 0x6e, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, // rn textureLod(te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2b, // x_stereo_fb, u +
	0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, //  (yaxis ? vec2(0
	0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, // .0, -lparallax) 
	0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, // : vec2(lparallax
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, // , 0.0)), 0.0).xy
	0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // z;.}.else.{.cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, // t float rminDept
	0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, // h = min(min(text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // ureLod(tex_stere
	0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, // o_depth, u - (ya
	0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, // xis ? vec2(0.0, 
	0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, // 0.500 * MaxSepar
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, // ation) : vec2(0.
	0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // 500 * MaxSeparat
	0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // ion, 0.0)), 0.0)
	0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, // .x,.textureLod(t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, // ex_stereo_depth,
	0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, //  u - (yaxis ? ve
	0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, // c2(0.0, 0.666 * 
	0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, // MaxSeparation) :
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, //  vec2(0.666 * Ma
	0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, // xSeparation, 0.0
	0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, // )), 0.0).x),.tex
	0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // tureLod(tex_ster
	0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, // eo_depth, u - (y
	0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, // axis ? vec2(0.0,
	0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, //  MaxSeparation) 
	0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, // : vec2( MaxSepar
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, // ation, 0.0)), 0.
	0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x70, 0x61, // 0).x);.float rpa
	0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, // rallax = max(0.0
	0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, // , w_h_height.w +
	0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, //  MaxSeparation *
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, //  (1.0 - 1.0 / (0
	0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, // .5 + rminDepth *
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, //  (1.0 / (Stereo_
	0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, // MS_ZPD_YAxis.y) 
	0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // - 0.5))));.retur
	0x6e, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, // n textureLod(tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, // _stereo_fb, u - 
	0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, // (yaxis ? vec2(0.
	0x30, 0x2c, 0x20, 0x2d, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, // 0, -rparallax) :
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, //  vec2(rparallax,
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, //  0.0)), 0.0).xyz
	0x3b, 0x0a, 0x7d, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, // ;.}.}.void gathe
	0x72, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, // rLeftRightColors
	0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, // (vec2 u, out vec
	0x33, 0x20, 0x6c, 0x63, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, // 3 lcol, out vec3
	0x20, 0x72, 0x63, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x62, //  rcol).{.const b
	0x6f, 0x6f, 0x6c, 0x20, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, // ool yaxis = (Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, // reo_MS_ZPD_YAxis
	0x2e, 0x7a, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, // .z != 0.);.const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, //  float MaxSepara
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, // tion = (Stereo_M
	0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x3b, 0x0a, // S_ZPD_YAxis.x);.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x6d, 0x69, 0x6e, // const float lmin
	0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, // Depth = min(min(
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, // textureLod(tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, // tereo_depth, u +
	0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, //  (yaxis ? vec2(0
	0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, // .0, 0.500 * MaxS
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, // eparation) : vec
	0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // 2(0.500 * MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, // aration, 0.0)), 
	0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, // 0.0).x,.textureL
	0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, // od(tex_stereo_de
	0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, // pth, u + (yaxis 
	0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, // ? vec2(0.0, 0.66
	0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, // 6 * MaxSeparatio
	0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, // n) : vec2(0.666 
	0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, // * MaxSeparation,
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, //  0.0)), 0.0).x),
	0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, // .textureLod(tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, // stereo_depth, u 
	0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // + (yaxis ? vec2(
	0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // 0.0, MaxSeparati
	0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, // on) : vec2( MaxS
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, // eparation, 0.0))
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // , 0.0).x);.float
	0x20, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, //  lparallax = max
	0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, // (0.0, w_h_height
	0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // .w + MaxSeparati
	0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, // on * (1.0 - 1.0 
	0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, // / (0.5 + lminDep
	0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, // th * (1.0 / (Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, // reo_MS_ZPD_YAxis
	0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x6c, // .y) - 0.5))));.l
	0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, // col = textureLod
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, // (tex_stereo_fb, 
	0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, // u + (yaxis ? vec
	0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, // 2(0.0, -lparalla
	0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, // x) : vec2(lparal
	0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // lax, 0.0)), 0.0)
	0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, // .xyz;.const floa
	0x74, 0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, // t rminDepth = mi
	0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, // n(min(textureLod
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, // (tex_stereo_dept
	0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, // h, u - (yaxis ? 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, // vec2(0.0, 0.500 
	0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, // * MaxSeparation)
	0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, //  : vec2(0.500 * 
	0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, // MaxSeparation, 0
	0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, // .0)), 0.0).x,.te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, // xtureLod(tex_ste
	0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, // reo_depth, u - (
	0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, // yaxis ? vec2(0.0
	0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // , 0.666 * MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // aration) : vec2(
	0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, // 0.666 * MaxSepar
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, // ation, 0.0)), 0.
	0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, // 0).x),.textureLo
	0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, // d(tex_stereo_dep
	0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, // th, u - (yaxis ?
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, //  vec2(0.0, MaxSe
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, // paration) : vec2
	0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, // ( MaxSeparation,
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, //  0.0)), 0.0).x);
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, // .float rparallax
	0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, //  = max(0.0, w_h_
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, // height.w + MaxSe
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, // paration * (1.0 
	0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, // - 1.0 / (0.5 + r
	0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, // minDepth * (1.0 
	0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, // / (Stereo_MS_ZPD
	0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, // _YAxis.y) - 0.5)
	0x29, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, // )));.rcol = text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // ureLod(tex_stere
	0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, // o_fb, u - (yaxis
	0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x72, 0x70, //  ? vec2(0.0, -rp
	0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // arallax) : vec2(
	0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, // rparallax, 0.0))
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, // , 0.0).xyz;.}.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // iform mat4 Stere
	0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, // o_LeftMat;.unifo
	0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, // rm mat4 Stereo_R
	0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // ightMat;.uniform
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, //  vec4 Stereo_Lef
	0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, // tLuminance_Gamma
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, // ;.uniform vec4 S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, // tereo_RightLumin
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x3b, 0x0a, 0x76, // ance_DynDesat;.v
	0x6f, 0x69, 0x64, 0x20, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x65, 0x73, 0x61, 0x74, // oid DynamicDesat
	0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, // Anaglyph(const v
	0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // ec3 lCol, const 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, // vec3 rCol, out v
	0x65, 0x63, 0x33, 0x20, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, // ec3 lDesatCol, o
	0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, // ut vec3 rDesatCo
	0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // l).{.const float
	0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, //  left2LeftLum = 
	0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // dot(lCol, Stereo
	0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, // _LeftLuminance_G
	0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, // amma.xyz);.const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, //  float left2Righ
	0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, // tLum = dot(lCol,
	0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, //  Stereo_RightLum
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, // inance_DynDesat.
	0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, // xyz);.const floa
	0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, // t right2LeftLum 
	0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, // = dot(rCol, Ster
	0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, // eo_LeftLuminance
	0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, // _Gamma.xyz);.con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, // st float right2R
	0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, // ightLum = dot(rC
	0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, // ol, Stereo_Right
	0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, // Luminance_DynDes
	0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // at.xyz);.const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x6c, // loat leftLum = l
	0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x6c, 0x65, // eft2LeftLum + le
	0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, // ft2RightLum;.con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // st float rightLu
	0x6d, 0x20, 0x3d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, // m = right2LeftLu
	0x6d, 0x20, 0x2b, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, // m + right2RightL
	0x75, 0x6d, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // um;.const float 
	0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, // leftDesat = Ster
	0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, // eo_RightLuminanc
	0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, // e_DynDesat.w * a
	0x62, 0x73, 0x28, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // bs((left2LeftLum
	0x20, 0x2d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, //  - left2RightLum
	0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, // ) / (leftLum + 0
	0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // .0001));.const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x20, // loat rightDesat 
	0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // = Stereo_RightLu
	0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, // minance_DynDesat
	0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, // .w * abs((right2
	0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, // LeftLum - right2
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x72, 0x69, 0x67, // RightLum) / (rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, 0x29, // htLum + 0.0001))
	0x3b, 0x0a, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, // ;.lDesatCol = mi
	0x78, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, // x(lCol, vec3_spl
	0x61, 0x74, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x66, // at(leftLum), lef
	0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x72, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, // tDesat);.rDesatC
	0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, // ol = mix(rCol, v
	0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, // ec3_splat(rightL
	0x75, 0x6d, 0x29, 0x2c, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, // um), rightDesat)
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x41, // ;.}.vec3 LinearA
	0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // naglyph(const ve
	0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, // c3 lCol, const v
	0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // ec3 rCol).{.cons
	0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x28, // t vec3 color = (
	0x28, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, // ( (vec4(lCol, 1.
	0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, // )) * (Stereo_Lef
	0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x20, 0x28, 0x76, 0x65, 0x63, // tMat) ) + ( (vec
	0x34, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, // 4(rCol, 1.)) * (
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x29, // Stereo_RightMat)
	0x20, 0x29, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, //  )).rgb;.return 
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // color;.}.uniform
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, //  vec4 Stereo_Deg
	0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, // hostGamma;.unifo
	0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, // rm mat4 Stereo_D
	0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3b, 0x0a, 0x76, 0x65, // eghostFilter;.ve
	0x63, 0x33, 0x20, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, // c3 DeghostAnagly
	0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, // ph(const vec3 lC
	0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, // ol, const vec3 r
	0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, // Col).{.const vec
	0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, // 3 color = Linear
	0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, // Anaglyph(lCol, r
	0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, // Col);.return ( (
	0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // pow(color, Stere
	0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x72, // o_DeghostGamma.r
	0x67, 0x62, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x53, 0x74, 0x65, // gb)) * (mat3(Ste
	0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, // reo_DeghostFilte
	0x72, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // r[0].xyz, Stereo
	0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x31, // _DeghostFilter[1
	0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, // ].xyz, Stereo_De
	0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x32, 0x5d, 0x2e, 0x78, // ghostFilter[2].x
	0x79, 0x7a, 0x29, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x6d, // yz)) );.}.void m
	0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, // ain().{.bgfx_Fra
	0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x67, 0x61, // gColor = vec4(ga
	0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x76, 0x5f, 0x74, // therEyeColor(v_t
	0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2c, 0x20, 0x66, 0x72, 0x61, 0x63, 0x28, 0x67, // excoord0, frac(g
	0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x2e, 0x79, 0x2a, 0x30, 0x2e, // l_FragCoord.y*0.
	0x35, 0x29, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, // 5) >= 0.5), 1.0)
	0x3b, 0x0a, 0x7d, 0x0a, 0x00,                                                                   // ;.}..
};
static const uint8_t fs_pp_stereo_flipped_int_glsl[11399] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x74, 0x2c, // FSH.o.><......t,
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x34, 0x34, 0x30, 0x0a, 0x6f, // ..#version 440.o
	0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, // ut vec4 bgfx_Fra
	0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, // gColor;.#define 
	0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x62, 0x67, 0x66, // gl_FragColor bgf
	0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x0a, 0x23, 0x64, 0x65, 0x66, // x_FragColor.#def
	0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x20, 0x20, 0x20, // ine texture2D   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x0a, 0x23, //        texture.#
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, // define texture2D
	0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // Lod       textur
	0x65, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, // eLod.#define tex
	0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ture2DGrad      
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, // textureGrad.#def
	0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, // ine texture2DPro
	0x6a, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, // jLod   texturePr
	0x6f, 0x6a, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, // ojLod.#define te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, 0x20, // xture2DProjGrad 
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, //  textureProjGrad
	0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // .#define texture
	0x43, 0x75, 0x62, 0x65, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, // CubeLod     text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, // ureLod.#define t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, // extureCubeGrad  
	0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, //   textureGrad.#d
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x33, 0x44, 0x20, // efine texture3D 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, //          texture
	0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // .#define texture
	0x32, 0x44, 0x4c, 0x6f, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x20, 0x74, 0x65, 0x78, 0x74, // 2DLodOffset text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x0a, 0x23, 0x64, 0x65, // ureLodOffset.#de
	0x66, 0x69, 0x6e, 0x65, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x69, // fine attribute i
	0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, // n.#define varyin
	0x67, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x62, 0x67, 0x66, // g in.#define bgf
	0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, // xShadow2D(_sampl
	0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, // er, _coord)     
	0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, // vec4_splat(textu
	0x72, 0x65, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, // re(_sampler, _co
	0x6f, 0x72, 0x64, 0x29, 0x20, 0x29, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x62, // ord) ).#define b
	0x67, 0x66, 0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x28, // gfxShadow2DProj(
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, // _sampler, _coord
	0x29, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, // ) vec4_splat(tex
	0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // tureProj(_sample
	0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x29, 0x0a, 0x76, 0x61, 0x72, // r, _coord) ).var
	0x79, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, // ying vec2 v_texc
	0x6f, 0x6f, 0x72, 0x64, 0x30, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, // oord0;.vec3 inst
	0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, // Mul(vec3 _vec, m
	0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // at3 _mtx) { retu
	0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, // rn ( (_vec) * (_
	0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, // mtx) ); }.vec3 i
	0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, // nstMul(mat3 _mtx
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, // , vec3 _vec) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, // eturn ( (_mtx) *
	0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, //  (_vec) ); }.vec
	0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, // 4 instMul(vec4 _
	0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, // vec, mat4 _mtx) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, // { return ( (_vec
	0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, // ) * (_mtx) ); }.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, // vec4 instMul(mat
	0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, // 4 _mtx, vec4 _ve
	0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, // c) { return ( (_
	0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, // mtx) * (_vec) );
	0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, 0x70, 0x28, 0x66, 0x6c, 0x6f, //  }.float rcp(flo
	0x61, 0x74, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // at _a) { return 
	0x31, 0x2e, 0x30, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, // 1.0/_a; }.vec2 r
	0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // cp(vec2 _a) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, // turn vec2(1.0)/_
	0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, // a; }.vec3 rcp(ve
	0x63, 0x33, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // c3 _a) { return 
	0x76, 0x65, 0x63, 0x33, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, // vec3(1.0)/_a; }.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x61, // vec4 rcp(vec4 _a
	0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, // ) { return vec4(
	0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, // 1.0)/_a; }.vec2 
	0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, // vec2_splat(float
	0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, //  _x) { return ve
	0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, // c2(_x, _x); }.ve
	0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, // c3 vec3_splat(fl
	0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // oat _x) { return
	0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, //  vec3(_x, _x, _x
	0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, // ); }.vec4 vec4_s
	0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, // plat(float _x) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, //  return vec4(_x,
	0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, //  _x, _x, _x); }.
	0x75, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, // uvec2 uvec2_spla
	0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // t(uint _x) { ret
	0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, // urn uvec2(_x, _x
	0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, // ); }.uvec3 uvec3
	0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, // _splat(uint _x) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, // { return uvec3(_
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, // x, _x, _x); }.uv
	0x65, 0x63, 0x34, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, // ec4 uvec4_splat(
	0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, // uint _x) { retur
	0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, // n uvec4(_x, _x, 
	0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, // _x, _x); }.mat4 
	0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, // mtxFromRows(vec4
	0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, //  _0, vec4 _1, ve
	0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, // c4 _2, vec4 _3).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, // {.return transpo
	0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, // se(mat4(_0, _1, 
	0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, // _2, _3) );.}.mat
	0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, // 4 mtxFromCols(ve
	0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, // c4 _0, vec4 _1, 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, // vec4 _2, vec4 _3
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x28, // ).{.return mat4(
	0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x3b, // _0, _1, _2, _3);
	0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, // .}.mat3 mtxFromR
	0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, // ows(vec3 _0, vec
	0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, // 3 _1, vec3 _2).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, // .return transpos
	0x65, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, // e(mat3(_0, _1, _
	0x32, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, // 2) );.}.mat3 mtx
	0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, // FromCols(vec3 _0
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // , vec3 _1, vec3 
	0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, // _2).{.return mat
	0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x3b, 0x0a, 0x7d, // 3(_0, _1, _2);.}
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, // .uniform vec4 u_
	0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // viewRect;.unifor
	0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x54, 0x65, 0x78, // m vec4 u_viewTex
	0x65, 0x6c, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, // el;.uniform mat4
	0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, //  u_view;.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x3b, //  mat4 u_invView;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, // .uniform mat4 u_
	0x70, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, // proj;.uniform ma
	0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, // t4 u_invProj;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, // iform mat4 u_vie
	0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, // wProj;.uniform m
	0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, // at4 u_invViewPro
	0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, // j;.uniform mat4 
	0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, 0x3b, 0x0a, 0x75, 0x6e, 0x69, // u_model[32];.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, // form mat4 u_mode
	0x6c, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, // lView;.uniform m
	0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x50, // at4 u_modelViewP
	0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, // roj;.uniform vec
	0x34, 0x20, 0x75, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x66, 0x34, 0x3b, 0x0a, 0x66, // 4 u_alphaRef4;.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // loat sqr(const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // loat v).{.return
	0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x73, 0x71, 0x72, //  v*v;.}.vec2 sqr
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x29, 0x0a, 0x7b, // (const vec2 v).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // .return v*v;.}.v
	0x65, 0x63, 0x33, 0x20, 0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // ec3 sqr(const ve
	0x63, 0x33, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // c3 v).{.return v
	0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6d, 0x75, 0x6c, 0x5f, 0x77, // *v;.}.vec3 mul_w
	0x31, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x2c, 0x20, // 1(const vec3 v, 
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x29, 0x0a, 0x7b, 0x0a, // const mat4 m).{.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2e, 0x78, 0x2a, 0x6d, 0x5b, 0x30, 0x5d, 0x2e, // return v.x*m[0].
	0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x79, 0x2a, 0x6d, 0x5b, 0x31, 0x5d, 0x2e, // xyz + (v.y*m[1].
	0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x7a, 0x2a, 0x6d, 0x5b, 0x32, 0x5d, 0x2e, // xyz + (v.z*m[2].
	0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x6d, 0x5b, 0x33, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, // xyz + m[3].xyz))
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, // ;.}.float acos_a
	0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x63, 0x6f, 0x6e, 0x73, // pprox_divPI(cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, // t float v).{.con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, // st float x = abs
	0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, // (v);.if(1. - x <
	0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, // = 0.000061035156
	0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, // 25).return (v >=
	0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x3b, 0x0a, //  0.) ? 0. : 1.;.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, 0x20, // const float res 
	0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, // = ((-0.155972/3.
	0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, // 1415926535897932
	0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, // 384626433832795)
	0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, //  * x + (1.56467/
	0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, // 3.14159265358979
	0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, // 3238462643383279
	0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, // 5) ) * sqrt(1. -
	0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, //  x);.return (v >
	0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x31, 0x2e, // = 0.) ? res : 1.
	0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, //  - res;.}.float 
	0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, // atan2_approx_div
	0x32, 0x50, 0x49, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // 2PI(const float 
	0x79, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, // y, const float x
	0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // ).{.const float 
	0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x79, 0x29, 0x3b, 0x0a, // abs_y = abs(y);.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, // const float abs_
	0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x78, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x61, // x = abs(x);.if(a
	0x62, 0x73, 0x5f, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, // bs_x <= 0.000061
	0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x20, 0x26, 0x26, 0x20, 0x61, 0x62, 0x73, 0x5f, // 03515625 && abs_
	0x79, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, // y <= 0.000061035
	0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x30, 0x2e, // 15625).return 0.
	0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x20, // ;.const float r 
	0x3d, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2d, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, // = (abs_x - abs_y
	0x29, 0x20, 0x2f, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2b, 0x20, 0x61, 0x62, 0x73, // ) / (abs_x + abs
	0x5f, 0x79, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // _y);.const float
	0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, //  angle = ((x < 0
	0x2e, 0x29, 0x20, 0x3f, 0x20, 0x28, 0x33, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x20, 0x3a, 0x20, 0x28, // .) ? (3./8.) : (
	0x31, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x29, 0x0a, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x32, 0x31, 0x31, // 1./8.)).+ (0.211
	0x38, 0x36, 0x38, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, // 868 /(2.*3.14159
	0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, // 2653589793238462
	0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x72, 0x20, // 6433832795) * r 
	0x2a, 0x20, 0x72, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x39, 0x38, 0x37, 0x33, 0x30, 0x35, 0x20, 0x2f, // * r - 0.987305 /
	0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, // (2.*3.1415926535
	0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, // 8979323846264338
	0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, // 32795)) * ((x < 
	0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x72, 0x20, 0x3a, 0x20, 0x72, 0x29, 0x3b, 0x0a, 0x72, // 0.) ? -r : r);.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x79, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, // eturn (y < 0.) ?
	0x20, 0x2d, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3a, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x3b, //  -angle : angle;
	0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x73, 0x69, 0x6e, 0x5f, 0x61, 0x70, // .}.float asin_ap
	0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, // prox_divPI(const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, //  float v).{.cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, // t float x = abs(
	0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, // v);.if(1. - x <=
	0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, //  0.0000610351562
	0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, // 5).return (v >= 
	0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, // 0.) ? 0.5 : -0.5
	0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, // ;.const float re
	0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, // s = ((-0.155972/
	0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, // 3.14159265358979
	0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, // 3238462643383279
	0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, // 5) * x + (1.5646
	0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, // 7/3.141592653589
	0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, // 7932384626433832
	0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, // 795) ) * sqrt(1.
	0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, //  - x);.return (v
	0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x2d, 0x20, //  >= 0.) ? 0.5 - 
	0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x65, 0x73, // res : -0.5 + res
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x61, 0x79, 0x5f, 0x74, 0x6f, 0x5f, // ;.}.vec2 ray_to_
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, // equirectangular_
	0x75, 0x76, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x61, // uv(const vec3 ra
	0x79, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, // y).{.return vec2
	0x28, 0x0a, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, // (.0.5 + atan2_ap
	0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, // prox_div2PI(ray.
	0x79, 0x2c, 0x20, 0x72, 0x61, 0x79, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x61, 0x63, 0x6f, 0x73, 0x5f, // y, ray.x),.acos_
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, // approx_divPI(ray
	0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, // .z));.}.float In
	0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, // vsRGB(const floa
	0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, // t color).{.if (c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, 0x34, 0x35, 0x29, // olor <= 0.04045)
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, // .return color * 
	0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, // (1.0/12.92);.els
	0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, // e.return pow(col
	0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, // or * (1.0/1.055)
	0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, //  + (0.055/1.055)
	0x2c, 0x20, 0x32, 0x2e, 0x34, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // , 2.4);.}.float 
	0x49, 0x6e, 0x76, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // InvRec709(const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, // float color).{.i
	0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x38, // f (color <= 0.08
	0x31, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, // 1).return color 
	0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x34, 0x2e, 0x35, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, // * (1.0/4.5);.els
	0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, // e.return pow(col
	0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, // or * (1.0/1.099)
	0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, //  + (0.099/1.099)
	0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // , 1.0/0.45);.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, // loat InvGamma(co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, // nst float color)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, // .{.return InvsRG
	0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, // B(color);.}.vec3
	0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, //  InvGamma(const 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // vec3 color).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, // turn vec3(InvGam
	0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, // ma(color.x),InvG
	0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x49, 0x6e, // amma(color.y),In
	0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, // vGamma(color.z))
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x54, 0x6f, 0x6e, 0x65, // ;.}.vec3 InvTone
	0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, // Map(const vec3 c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // olor).{.const fl
	0x6f, 0x61, 0x74, 0x20, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x30, 0x2e, // oat inv_2bh = 0.
	0x35, 0x2f, 0x30, 0x2e, 0x32, 0x35, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // 5/0.25;.const fl
	0x6f, 0x61, 0x74, 0x20, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x34, 0x2e, 0x30, 0x2a, 0x30, 0x2e, 0x32, // oat bh = 4.0*0.2
	0x35, 0x20, 0x2d, 0x20, 0x32, 0x2e, 0x30, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // 5 - 2.0;.return 
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2b, 0x20, 0x73, // (color - 1.0 + s
	0x71, 0x72, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2a, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // qrt(color*(color
	0x20, 0x2b, 0x20, 0x62, 0x68, 0x29, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x2a, 0x69, //  + bh) + 1.0))*i
	0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // nv_2bh;.}.float 
	0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // sRGB(const float
	0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, //  f).{.float s;.i
	0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x33, 0x31, 0x33, 0x30, // f (f <= 0.003130
	0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x20, 0x2a, 0x20, 0x66, // 8).s = 12.92 * f
	0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x35, 0x35, // ;.else.s = 1.055
	0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, //  * pow(f, 1.0/2.
	0x34, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // 4) - 0.055;.retu
	0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x52, 0x65, // rn s;.}.float Re
	0x63, 0x37, 0x30, 0x39, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // c709(const float
	0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, //  f).{.float s;.i
	0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, 0x29, 0x0a, 0x73, // f (f <= 0.018).s
	0x20, 0x3d, 0x20, 0x34, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, //  = 4.5 * f;.else
	0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, // .s = 1.099 * pow
	0x28, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x39, // (f, 0.45) - 0.09
	0x39, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // 9;.return s;.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, // loat FBGamma(con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, // st float color).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, // {.return sRGB(co
	0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x47, // lor);.}.vec2 FBG
	0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, // amma(const vec2 
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // color).{.return 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, // vec2(FBGamma(col
	0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, // or.x),FBGamma(co
	0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // lor.y));.}.vec3 
	0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // FBGamma(const ve
	0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, // c3 color).{.retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, // rn vec3(FBGamma(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, // color.x),FBGamma
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, // (color.y),FBGamm
	0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // a(color.z));.}.v
	0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x32, 0x32, 0x28, 0x63, 0x6f, // ec3 FBGamma22(co
	0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, // nst vec3 color).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x70, 0x6f, // {.return vec3(po
	0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, // w(color.x, 1.0/2
	0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x2c, // .2),pow(color.y,
	0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, //  1.0/2.2),pow(co
	0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x29, // lor.z, 1.0/2.2))
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, // ;.}.float FBTone
	0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // Map(const float 
	0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6c, 0x20, 0x2a, 0x20, // l).{.return l * 
	0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, // ((l*0.25 + 1.0) 
	0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // / (l + 1.0));.}.
	0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x63, // vec2 FBToneMap(c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, // onst vec2 color)
	0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, // .{.const float l
	0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, //  = dot(color,vec
	0x32, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, // 2(0.176204+0.010
	0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, // 8109*0.5,0.81298
	0x35, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x29, // 5+0.0108109*0.5)
	0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, // );.return color 
	0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, // * ((l*0.25 + 1.0
	0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, // ) / (l + 1.0));.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, // }.vec3 FBToneMap
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // (const vec3 colo
	0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // r).{.const float
	0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, //  l = dot(color,v
	0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2c, 0x30, 0x2e, 0x38, // ec3(0.176204,0.8
	0x31, 0x32, 0x39, 0x38, 0x35, 0x2c, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x29, // 12985,0.0108109)
	0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, // );.return color 
	0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, // * ((l*0.25 + 1.0
	0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, // ) / (l + 1.0));.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x28, // }.vec4 Additive(
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, // const vec4 cBase
	0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, // , const vec4 cBl
	0x65, 0x6e, 0x64, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // end, const float
	0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, //  percent).{.retu
	0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2b, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // rn cBase + cBlen
	0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // d*percent;.}.vec
	0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // 3 Screen (const 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, // vec3 cBase, cons
	0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, // t vec3 cBlend).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, // .return 1.0 - (1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, // .0 - cBase) * (1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // .0 - cBlend);.}.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6e, // vec4 Screen (con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, // st vec4 cBase, c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, // onst vec4 cBlend
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, // ).{.return 1.0 -
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, //  (1.0 - cBase) *
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, //  (1.0 - cBlend);
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, // .}.vec3 ScreenHD
	0x52, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, // R (const vec3 cB
	0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // ase, const vec3 
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // cBlend).{.return
	0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, //  max(1.0 - (1.0 
	0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, // - cBase) * (1.0 
	0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, // - cBlend), vec3(
	0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // 0.,0.,0.));.}.ve
	0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x63, 0x6f, // c4 ScreenHDR (co
	0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, // nst vec4 cBase, 
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // const vec4 cBlen
	0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, // d).{.return max(
	0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, // 1.0 - (1.0 - cBa
	0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, // se) * (1.0 - cBl
	0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, // end), vec4(0.,0.
	0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, // ,0.,0.));.}.vec4
	0x20, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, //  Multiply (const
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, //  vec4 cBase, con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, // st vec4 cBlend, 
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, // const float perc
	0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, // ent).{.return cB
	0x61, 0x73, 0x65, 0x20, 0x2a, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, // ase * cBlend*per
	0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, // cent;.}.vec4 Ove
	0x72, 0x6c, 0x61, 0x79, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, // rlay (const vec4
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, //  cBase, const ve
	0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, // c4 cBlend).{.vec
	0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, // 4 cNew = step(0.
	0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, // 5, cBase);.cNew 
	0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, // = mix(cBase*cBle
	0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, // nd*2.0, 1.0-2.0*
	0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, // (1.0-cBase)*(1.0
	0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x3b, // -cBlend), cNew);
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, // .return cNew;.}.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x48, 0x44, 0x52, 0x20, // vec4 OverlayHDR 
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, // (const vec4 cBas
	0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // e, const vec4 cB
	0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, // lend).{.vec4 cNe
	0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, // w = step(0.5, cB
	0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, // ase);.cNew = max
	0x28, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, // (mix(cBase*cBlen
	0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, // d*2.0, 1.0-2.0*(
	0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, // 1.0-cBase)*(1.0-
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x2c, 0x20, // cBlend), cNew), 
	0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, // vec4(0.,0.,0.,0.
	0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, // ));.return cNew;
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x73, 0x5f, 0x68, 0x65, 0x6d, 0x69, // .}.vec3 cos_hemi
	0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x63, 0x6f, // sphere_sample(co
	0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, // nst vec2 t).{.co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x68, 0x69, 0x20, 0x3d, 0x20, // nst float phi = 
	0x74, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x28, 0x32, 0x2e, 0x30, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, // t.y * (2.0*3.141
	0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, // 5926535897932384
	0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x3b, 0x0a, 0x63, // 626433832795);.c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, // onst float cosTh
	0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, // eta = sqrt(1.0 -
	0x20, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, //  t.x);.const flo
	0x61, 0x74, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, // at sinTheta = sq
	0x72, 0x74, 0x28, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, // rt(t.x);.float s
	0x70, 0x2c, 0x63, 0x70, 0x3b, 0x0a, 0x73, 0x69, 0x6e, 0x63, 0x6f, 0x73, 0x28, 0x70, 0x68, 0x69, // p,cp;.sincos(phi
	0x2c, 0x73, 0x70, 0x2c, 0x63, 0x70, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // ,sp,cp);.return 
	0x76, 0x65, 0x63, 0x33, 0x28, 0x63, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, // vec3(cp * sinThe
	0x74, 0x61, 0x2c, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x73, 0x70, // ta, cosTheta, sp
	0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, //  * sinTheta);.}.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x76, // vec3 rotate_to_v
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, // ector_upper(cons
	0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, // t vec3 vec, cons
	0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x29, 0x0a, 0x7b, // t vec3 normal).{
	0x0a, 0x69, 0x66, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x3e, 0x20, 0x2d, // .if(normal.y > -
	0x30, 0x2e, 0x39, 0x39, 0x39, 0x39, 0x39, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, // 0.99999).{.const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x28, //  float h = 1.0/(
	0x31, 0x2e, 0x30, 0x2b, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x63, // 1.0+normal.y);.c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x20, 0x3d, 0x20, // onst float hz = 
	0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // h*normal.z;.cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x3d, 0x20, 0x68, 0x7a, // t float hzx = hz
	0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // *normal.x;.retur
	0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, // n vec3(.vec.x * 
	0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, // (normal.y+hz*nor
	0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x29, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, // mal.z) + vec.y *
	0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, //  normal.x - vec.
	0x7a, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, // z * hzx,.vec.y *
	0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, //  normal.y - vec.
	0x78, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, // x * normal.x - v
	0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x2c, // ec.z * normal.z,
	0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, // .vec.y * normal.
	0x7a, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x20, // z - vec.x * hzx 
	0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, // + vec.z * (norma
	0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x2a, 0x6e, // l.y+h*normal.x*n
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, // ormal.x));.}.els
	0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x2d, 0x76, 0x65, 0x63, 0x3b, 0x0a, 0x7d, // e return -vec;.}
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, // .uniform vec4 St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x53, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3b, // ereo_Saturation;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, // .uniform vec4 St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, // ereo_MS_ZPD_YAxi
	0x73, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, // s;.uniform sampl
	0x65, 0x72, 0x32, 0x44, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // er2D tex_stereo_
	0x66, 0x62, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, // fb;.uniform samp
	0x6c, 0x65, 0x72, 0x32, 0x44, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // ler2D tex_stereo
	0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // _depth;.uniform 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, // vec4 w_h_height;
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, // .vec3 gatherEyeC
	0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x62, 0x6f, 0x6f, // olor(vec2 u, boo
	0x6c, 0x20, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // l isLeft).{.cons
	0x74, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3d, 0x20, 0x28, // t bool yaxis = (
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, // Stereo_MS_ZPD_YA
	0x78, 0x69, 0x73, 0x2e, 0x7a, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x3b, 0x0a, 0x63, 0x6f, // xis.z != 0.);.co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // nst float MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, // aration = (Stere
	0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, // o_MS_ZPD_YAxis.x
	0x29, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, // );.if (isLeft).{
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x6d, 0x69, // .const float lmi
	0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, // nDepth = min(min
	0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, // (textureLod(tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, // stereo_depth, u 
	0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // + (yaxis ? vec2(
	0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, // 0.0, 0.500 * Max
	0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, // Separation) : ve
	0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, // c2(0.500 * MaxSe
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, // paration, 0.0)),
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, //  0.0).x,.texture
	0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, // Lod(tex_stereo_d
	0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, // epth, u + (yaxis
	0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, //  ? vec2(0.0, 0.6
	0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // 66 * MaxSeparati
	0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, // on) : vec2(0.666
	0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, //  * MaxSeparation
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, // , 0.0)), 0.0).x)
	0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, // ,.textureLod(tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, // _stereo_depth, u
	0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, //  + (yaxis ? vec2
	0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // (0.0, MaxSeparat
	0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, // ion) : vec2( Max
	0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // Separation, 0.0)
	0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // ), 0.0).x);.floa
	0x74, 0x20, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, // t lparallax = ma
	0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, // x(0.0, w_h_heigh
	0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // t.w + MaxSeparat
	0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, // ion * (1.0 - 1.0
	0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, //  / (0.5 + lminDe
	0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, // pth * (1.0 / (St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, // ereo_MS_ZPD_YAxi
	0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, // s.y) - 0.5))));.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, // return textureLo
	0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, // d(tex_stereo_fb,
	0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, //  u + (yaxis ? ve
	0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, // c2(0.0, -lparall
	0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x6c, 0x70, 0x61, 0x72, 0x61, // ax) : vec2(lpara
	0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, // llax, 0.0)), 0.0
	0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x7b, 0x0a, // ).xyz;.}.else.{.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x6d, 0x69, 0x6e, // const float rmin
	0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, // Depth = min(min(
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, // textureLod(tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, // tereo_depth, u -
	0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, //  (yaxis ? vec2(0
	0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, // .0, 0.500 * MaxS
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, // eparation) : vec
	0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // 2(0.500 * MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, // aration, 0.0)), 
	0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, // 0.0).x,.textureL
	0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, // od(tex_stereo_de
	0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, // pth, u - (yaxis 
	0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, // ? vec2(0.0, 0.66
	0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, // 6 * MaxSeparatio
	0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, // n) : vec2(0.666 
	0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, // * MaxSeparation,
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, //  0.0)), 0.0).x),
	0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, // .textureLod(tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, // stereo_depth, u 
	0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // - (yaxis ? vec2(
	0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // 0.0, MaxSeparati
	0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, // on) : vec2( MaxS
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, // eparation, 0.0))
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // , 0.0).x);.float
	0x20, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, //  rparallax = max
	0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, // (0.0, w_h_height
	0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // .w + MaxSeparati
	0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, // on * (1.0 - 1.0 
	0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, // / (0.5 + rminDep
	0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, // th * (1.0 / (Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, // reo_MS_ZPD_YAxis
	0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x72, // .y) - 0.5))));.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, // eturn textureLod
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, // (tex_stereo_fb, 
	0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, // u - (yaxis ? vec
	0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, // 2(0.0, -rparalla
	0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, // x) : vec2(rparal
	0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // lax, 0.0)), 0.0)
	0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x67, // .xyz;.}.}.void g
	0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, // atherLeftRightCo
	0x6c, 0x6f, 0x72, 0x73, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x6f, 0x75, 0x74, // lors(vec2 u, out
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x63, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, //  vec3 lcol, out 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, // vec3 rcol).{.con
	0x73, 0x74, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3d, 0x20, // st bool yaxis = 
	0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, // (Stereo_MS_ZPD_Y
	0x41, 0x78, 0x69, 0x73, 0x2e, 0x7a, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x3b, 0x0a, 0x63, // Axis.z != 0.);.c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, // onst float MaxSe
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, // paration = (Ster
	0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, // eo_MS_ZPD_YAxis.
	0x78, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // x);.const float 
	0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, // lminDepth = min(
	0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, // min(textureLod(t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, // ex_stereo_depth,
	0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, //  u + (yaxis ? ve
	0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, // c2(0.0, 0.500 * 
	0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, // MaxSeparation) :
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, //  vec2(0.500 * Ma
	0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, // xSeparation, 0.0
	0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, // )), 0.0).x,.text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // ureLod(tex_stere
	0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, // o_depth, u + (ya
	0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, // xis ? vec2(0.0, 
	0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, // 0.666 * MaxSepar
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, // ation) : vec2(0.
	0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // 666 * MaxSeparat
	0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // ion, 0.0)), 0.0)
	0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, // .x),.textureLod(
	0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, // tex_stereo_depth
	0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, // , u + (yaxis ? v
	0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, // ec2(0.0, MaxSepa
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x20, // ration) : vec2( 
	0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, // MaxSeparation, 0
	0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, // .0)), 0.0).x);.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, // loat lparallax =
	0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, //  max(0.0, w_h_he
	0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, // ight.w + MaxSepa
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, // ration * (1.0 - 
	0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x6c, 0x6d, 0x69, // 1.0 / (0.5 + lmi
	0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, // nDepth * (1.0 / 
	0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, // (Stereo_MS_ZPD_Y
	0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, // Axis.y) - 0.5)))
	0x29, 0x3b, 0x0a, 0x6c, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // );.lcol = textur
	0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // eLod(tex_stereo_
	0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, // fb, u + (yaxis ?
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x6c, 0x70, 0x61, 0x72, //  vec2(0.0, -lpar
	0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x6c, 0x70, // allax) : vec2(lp
	0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, // arallax, 0.0)), 
	0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // 0.0).xyz;.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, // float rminDepth 
	0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // = min(min(textur
	0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // eLod(tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, // depth, u - (yaxi
	0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, // s ? vec2(0.0, 0.
	0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // 500 * MaxSeparat
	0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, // ion) : vec2(0.50
	0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, // 0 * MaxSeparatio
	0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, // n, 0.0)), 0.0).x
	0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, // ,.textureLod(tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, // _stereo_depth, u
	0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, //  - (yaxis ? vec2
	0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, // (0.0, 0.666 * Ma
	0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, // xSeparation) : v
	0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, // ec2(0.666 * MaxS
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, // eparation, 0.0))
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, // , 0.0).x),.textu
	0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // reLod(tex_stereo
	0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, // _depth, u - (yax
	0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, // is ? vec2(0.0, M
	0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, // axSeparation) : 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // vec2( MaxSeparat
	0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // ion, 0.0)), 0.0)
	0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x70, 0x61, 0x72, 0x61, // .x);.float rpara
	0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, // llax = max(0.0, 
	0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, // w_h_height.w + M
	0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, // axSeparation * (
	0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, // 1.0 - 1.0 / (0.5
	0x20, 0x2b, 0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, //  + rminDepth * (
	0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, // 1.0 / (Stereo_MS
	0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, // _ZPD_YAxis.y) - 
	0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, // 0.5))));.rcol = 
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, // textureLod(tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, // tereo_fb, u - (y
	0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, // axis ? vec2(0.0,
	0x20, 0x2d, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, //  -rparallax) : v
	0x65, 0x63, 0x32, 0x28, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, // ec2(rparallax, 0
	0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, // .0)), 0.0).xyz;.
	0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, // }.uniform mat4 S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, // tereo_LeftMat;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, // niform mat4 Ster
	0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, // eo_RightMat;.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // form vec4 Stereo
	0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, // _LeftLuminance_G
	0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, // amma;.uniform ve
	0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, // c4 Stereo_RightL
	0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, // uminance_DynDesa
	0x74, 0x3b, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, // t;.void DynamicD
	0x65, 0x73, 0x61, 0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, // esatAnaglyph(con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, // st vec3 lCol, co
	0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, // nst vec3 rCol, o
	0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, // ut vec3 lDesatCo
	0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x44, 0x65, 0x73, // l, out vec3 rDes
	0x61, 0x74, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // atCol).{.const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, // loat left2LeftLu
	0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, // m = dot(lCol, St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, // ereo_LeftLuminan
	0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, // ce_Gamma.xyz);.c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, // onst float left2
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, // RightLum = dot(l
	0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, // Col, Stereo_Righ
	0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, // tLuminance_DynDe
	0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // sat.xyz);.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, // float right2Left
	0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // Lum = dot(rCol, 
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, // Stereo_LeftLumin
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, // ance_Gamma.xyz);
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, // .const float rig
	0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, // ht2RightLum = do
	0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, // t(rCol, Stereo_R
	0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, // ightLuminance_Dy
	0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, // nDesat.xyz);.con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // st float leftLum
	0x20, 0x3d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, //  = left2LeftLum 
	0x2b, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, // + left2RightLum;
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, // .const float rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, // htLum = right2Le
	0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, // ftLum + right2Ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // ghtLum;.const fl
	0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, // oat leftDesat = 
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, // Stereo_RightLumi
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, // nance_DynDesat.w
	0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, //  * abs((left2Lef
	0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, // tLum - left2Righ
	0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // tLum) / (leftLum
	0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, //  + 0.0001));.con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, // st float rightDe
	0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, // sat = Stereo_Rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, // htLuminance_DynD
	0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x72, 0x69, // esat.w * abs((ri
	0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x72, 0x69, // ght2LeftLum - ri
	0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, // ght2RightLum) / 
	0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, // (rightLum + 0.00
	0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, // 01));.lDesatCol 
	0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, // = mix(lCol, vec3
	0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, // _splat(leftLum),
	0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x72, 0x44, 0x65, //  leftDesat);.rDe
	0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x72, 0x43, 0x6f, // satCol = mix(rCo
	0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x72, 0x69, // l, vec3_splat(ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, // ghtLum), rightDe
	0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x4c, 0x69, 0x6e, // sat);.}.vec3 Lin
	0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, // earAnaglyph(cons
	0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, // t vec3 lCol, con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, // st vec3 rCol).{.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // const vec3 color
	0x20, 0x3d, 0x20, 0x28, 0x28, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x6c, 0x43, 0x6f, 0x6c, //  = (( (vec4(lCol
	0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // , 1.)) * (Stereo
	0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x20, // _LeftMat) ) + ( 
	0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, // (vec4(rCol, 1.))
	0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, //  * (Stereo_Right
	0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x72, 0x65, 0x74, // Mat) )).rgb;.ret
	0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, // urn color;.}.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // form vec4 Stereo
	0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, // _DeghostGamma;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, // niform mat4 Ster
	0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, // eo_DeghostFilter
	0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x6e, // ;.vec3 DeghostAn
	0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, // aglyph(const vec
	0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // 3 lCol, const ve
	0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, // c3 rCol).{.const
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, //  vec3 color = Li
	0x6e, 0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, // nearAnaglyph(lCo
	0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // l, rCol);.return
	0x20, 0x28, 0x20, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x53, //  ( (pow(color, S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, // tereo_DeghostGam
	0x6d, 0x61, 0x2e, 0x72, 0x67, 0x62, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x6d, 0x61, 0x74, 0x33, // ma.rgb)) * (mat3
	0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, // (Stereo_DeghostF
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, // ilter[0].xyz, St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, // ereo_DeghostFilt
	0x65, 0x72, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // er[1].xyz, Stere
	0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, // o_DeghostFilter[
	0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, // 2].xyz)) );.}.vo
	0x69, 0x64, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x67, 0x6c, 0x5f, 0x46, // id main().{.gl_F
	0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, // ragColor = vec4(
	0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x76, // gatherEyeColor(v
	0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2c, 0x20, 0x66, 0x72, 0x61, 0x63, // _texcoord0, frac
	0x28, 0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x2e, 0x79, 0x2a, // (gl_FragCoord.y*
	0x30, 0x2e, 0x35, 0x29, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x2c, 0x20, 0x31, 0x2e, // 0.5) >= 0.5), 1.
	0x30, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x00,                                                       // 0);.}..
};
static const uint8_t fs_pp_stereo_flipped_int_dx11[2451] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x13, 0x53, // FSH.o.><.......S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, // tereo_MS_ZPD_YAx
	0x69, 0x73, 0x12, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x77, 0x5f, 0x68, // is...........w_h
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, // _height.........
	0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x30, // ..tex_stereo_fb0
	0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // ..........tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x30, 0x01, 0x01, 0x00, 0x01, 0x00, // ereo_depth0.....
	0x00, 0x00, 0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // .....tex_stereo_
	0x66, 0x62, 0x30, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x74, 0x65, 0x78, // fb0..........tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x30, 0x01, 0x01, // _stereo_depth0..
	0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe4, 0x08, 0x00, 0x00, 0x44, 0x58, 0x42, 0x43, 0xe1, // ...........DXBC.
	0xa4, 0x2f, 0xd7, 0x45, 0xb9, 0x0c, 0x36, 0x52, 0x65, 0x68, 0x19, 0x17, 0x62, 0x9a, 0x34, 0x01, // ./.E..6Reh..b.4.
	0x00, 0x00, 0x00, 0xe4, 0x08, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x84, // ...........,....
	0x00, 0x00, 0x00, 0xb8, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x4e, 0x50, 0x00, 0x00, 0x00, 0x02, // .......ISGNP....
	0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, // .......8........
	0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x02, 0x00, 0x00, 0x44, // ...............D
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, // .......SV_POSITI
	0x4f, 0x4e, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0xab, 0xab, 0xab, 0x4f, // ON.TEXCOORD....O
	0x53, 0x47, 0x4e, 0x2c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x20, // SGN,........... 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, // .......SV_TARGET
	0x00, 0xab, 0xab, 0x53, 0x48, 0x45, 0x58, 0x24, 0x08, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x09, // ...SHEX$...P....
	0x02, 0x00, 0x00, 0x6a, 0x08, 0x00, 0x01, 0x59, 0x00, 0x00, 0x04, 0x46, 0x8e, 0x20, 0x00, 0x00, // ...j...Y...F. ..
	0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x03, 0x00, 0x60, 0x10, 0x00, 0x00, // .......Z....`...
	0x00, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x03, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x58, // ...Z....`......X
	0x18, 0x00, 0x04, 0x00, 0x70, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x55, 0x00, 0x00, 0x58, // ....p......UU..X
	0x18, 0x00, 0x04, 0x00, 0x70, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x55, 0x55, 0x00, 0x00, 0x64, // ....p......UU..d
	0x20, 0x00, 0x04, 0x22, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x62, //  .."...........b
	0x10, 0x00, 0x03, 0x32, 0x10, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x03, 0xf2, // ...2.......e....
	0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x02, 0x03, 0x00, 0x00, 0x00, 0x38, //  ......h.......8
	0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x10, 0x10, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x1a, 0x00, 0x00, 0x05, 0x12, // ....@.....?.....
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1d, // ................
	0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x39, 0x00, 0x00, 0x08, 0x22, // ....@.....?9..."
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .......*. ......
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x04, 0x03, 0x0a, // ....@...........
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x08, 0x52, 0x00, 0x10, 0x00, 0x01, // .......6...R....
	0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ....@...........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x0b, 0xa2, 0x00, 0x10, 0x00, 0x01, // .......8........
	0x00, 0x00, 0x00, 0x06, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, // ..... ..........
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0xfa, // @.........?.....
	0x7e, 0x2a, 0x3f, 0x37, 0x00, 0x00, 0x09, 0xf2, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x56, // ~*?7...........V
	0x05, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x16, // .......F........
	0x0b, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf2, 0x00, 0x10, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x14, 0x10, 0x00, 0x01, // ...F.......F....
	0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x12, // ...H.......CU...
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, // .......F.......F
	0x7e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, // ~.......`.......
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, // @......H.......C
	0x55, 0x15, 0x00, 0x42, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x01, // U..B............
	0x00, 0x00, 0x00, 0x96, 0x7c, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, // ....|.......`...
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x07, 0x12, // ....@......3....
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, // .......*........
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x08, 0x52, 0x00, 0x10, 0x00, 0x01, // .......6...R....
	0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ....@...........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x06, 0x22, 0x00, 0x10, 0x00, 0x01, // .......6..."....
	0x00, 0x00, 0x00, 0x0a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, // ..... .........7
	0x00, 0x00, 0x09, 0xc2, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x56, 0x05, 0x10, 0x00, 0x00, // ...........V....
	0x00, 0x00, 0x00, 0x06, 0x04, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x56, 0x01, 0x10, 0x00, 0x01, // ...........V....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc2, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa6, // ................
	0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x14, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x48, // ...............H
	0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x42, 0x00, 0x10, 0x00, 0x00, // .......CU..B....
	0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x96, 0x7c, 0x10, 0x00, 0x01, // ............|...
	0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, // ....`.......@...
	0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, // ...3...........*
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, // ................
	0x00, 0x00, 0x0b, 0x42, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, // ...B........@...
	0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x1a, // ..?...?...?...?.
	0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x42, // . .............B
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, // .......*........
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0x32, 0x00, 0x00, 0x09, 0x12, 0x00, 0x10, 0x00, 0x00, // @......2........
	0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x00, // ...........*....
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x0e, 0x00, 0x00, 0x0a, 0x12, // ....@.....?.....
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, // ........@.....?.
	0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x0a, 0x00, 0x10, 0x00, 0x00, // ..?...?...?.....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, // ................
	0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, // ...A........@...
	0x00, 0x80, 0x3f, 0x32, 0x00, 0x00, 0x0b, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, // ..?2............
	0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, // . ..............
	0x00, 0x00, 0x00, 0x3a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x34, // ...:. .........4
	0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x06, 0x82, // ....@......6....
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x01, // ...........A....
	0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, // ...6..."........
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x09, 0x52, 0x00, 0x10, 0x00, 0x00, // @......7...R....
	0x00, 0x00, 0x00, 0x56, 0x05, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa6, 0x0b, 0x10, 0x00, 0x01, // ...V............
	0x00, 0x00, 0x00, 0x06, 0x01, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x52, // ...............R
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, // ................
	0x11, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, // .......H.......C
	0x55, 0x15, 0x00, 0xd2, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x00, 0x10, 0x00, 0x00, // U...............
	0x00, 0x00, 0x00, 0xc6, 0x79, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x00, // ....y.......`...
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x01, 0x36, // ....@..........6
	0x00, 0x00, 0x08, 0x52, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, // ...R........@...
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, // ...............8
	0x00, 0x00, 0x0b, 0xa2, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x80, 0x20, 0x00, 0x00, // ............. ..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........@.......
	0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x7e, 0x2a, 0x3f, 0x37, 0x00, 0x00, 0x09, 0xf2, // ..?.....~*?7....
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x56, 0x05, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, // .......V.......F
	0x0e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x16, 0x0b, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x08, 0xf2, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x80, 0x41, // ...........F...A
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x14, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x48, // .......F.......H
	0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x12, 0x00, 0x10, 0x00, 0x01, // .......CU.......
	0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, 0x01, // ...F.......F~...
	0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, // ....`.......@...
	0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x22, // ...H.......CU.."
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x16, // ................
	0x7e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, // ~.......`.......
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x01, // @......3........
	0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x08, 0x52, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, // ...6...R........
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // @...............
	0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x06, 0x22, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0a, // ...6..."........
	0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x09, 0x62, // . .........7...b
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x56, 0x05, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, // .......V........
	0x01, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x56, 0x04, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, // .......V........
	0x00, 0x00, 0x08, 0x62, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x56, 0x06, 0x10, 0x80, 0x41, // ...b.......V...A
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x11, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x48, // ...............H
	0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x22, 0x00, 0x10, 0x00, 0x01, // .......CU.."....
	0x00, 0x00, 0x00, 0x96, 0x05, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x16, 0x7e, 0x10, 0x00, 0x01, // ............~...
	0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, // ....`.......@...
	0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, // ...3............
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0e, // ................
	0x00, 0x00, 0x0b, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, // ..."........@...
	0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x1a, // ..?...?...?...?.
	0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x22, // . ............."
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, // ................
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0x32, 0x00, 0x00, 0x09, 0x12, 0x00, 0x10, 0x00, 0x01, // @......2........
	0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x0e, 0x00, 0x00, 0x0a, 0x12, // ....@.....?.....
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, // ........@.....?.
	0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x0a, 0x00, 0x10, 0x00, 0x01, // ..?...?...?.....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x12, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, // ................
	0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, // ...A........@...
	0x00, 0x80, 0x3f, 0x32, 0x00, 0x00, 0x0b, 0x12, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, // ..?2............
	0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x01, // . ..............
	0x00, 0x00, 0x00, 0x3a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x34, // ...:. .........4
	0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x06, 0x82, // ....@......6....
	0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x01, // ...........A....
	0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, // ...6..."........
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x09, 0x32, 0x00, 0x10, 0x00, 0x01, // @......7...2....
	0x00, 0x00, 0x00, 0x56, 0x05, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x02, // ...V............
	0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x32, // ...F...........2
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x01, // .......F...A....
	0x00, 0x00, 0x00, 0x46, 0x10, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, // ...F.......H....
	0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0xd2, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, // ...CU..........F
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0xc6, 0x79, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........y.......
	0x60, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, // `.......@.......
	0x00, 0x00, 0x01, 0x36, 0x00, 0x00, 0x05, 0x72, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, // ...6...r .......
	0x03, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x82, 0x20, 0x10, 0x00, 0x00, // .......6.... ...
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x3e, 0x00, 0x00, 0x01, 0x00, // ....@.....?>....
	0x00, 0x20, 0x00,                                                                               // . .
};
static const uint8_t fs_pp_stereo_flipped_int_spv[4180] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x13, 0x53, // FSH.o.><.......S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, // tereo_MS_ZPD_YAx
	0x69, 0x73, 0x12, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x77, 0x5f, 0x68, // is...........w_h
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x01, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, // _height.........
	0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x30, // ..tex_stereo_fb0
	0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x02, 0x22, 0x00, 0x10, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // ......."..tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x30, 0x00, 0x03, 0x00, 0x00, 0x00, // ereo_depth0.....
	0x00, 0x02, 0x22, 0x00, 0xd8, 0x0f, 0x00, 0x00, 0x03, 0x02, 0x23, 0x07, 0x00, 0x00, 0x01, 0x00, // ..".......#.....
	0x0b, 0x00, 0x08, 0x00, 0x9b, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x02, 0x00, // ................
	0x01, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, 0x4c, 0x53, 0x4c, // ............GLSL
	0x2e, 0x73, 0x74, 0x64, 0x2e, 0x34, 0x35, 0x30, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x03, 0x00, // .std.450........
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x08, 0x00, 0x04, 0x00, 0x00, 0x00, // ................
	0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x24, 0x01, 0x00, 0x00, // ....main....$...
	0x28, 0x01, 0x00, 0x00, 0x33, 0x01, 0x00, 0x00, 0x10, 0x00, 0x03, 0x00, 0x04, 0x00, 0x00, 0x00, // (...3...........
	0x07, 0x00, 0x00, 0x00, 0x03, 0x00, 0x03, 0x00, 0x05, 0x00, 0x00, 0x00, 0xf4, 0x01, 0x00, 0x00, // ................
	0x05, 0x00, 0x04, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, 0x00, // ........main....
	0x05, 0x00, 0x08, 0x00, 0x2b, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // ....+...tex_ster
	0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x00, 0x00, 0x00, 0x00, // eo_fbSampler....
	0x05, 0x00, 0x08, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // ........tex_ster
	0x65, 0x6f, 0x5f, 0x66, 0x62, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x00, 0x00, 0x00, 0x00, // eo_fbTexture....
	0x05, 0x00, 0x08, 0x00, 0x32, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // ....2...tex_ster
	0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x00, // eo_depthSampler.
	0x05, 0x00, 0x08, 0x00, 0x34, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // ....4...tex_ster
	0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x00, // eo_depthTexture.
	0x05, 0x00, 0x06, 0x00, 0x4f, 0x00, 0x00, 0x00, 0x55, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x42, // ....O...UniformB
	0x6c, 0x6f, 0x63, 0x6b, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x08, 0x00, 0x4f, 0x00, 0x00, 0x00, // lock........O...
	0x00, 0x00, 0x00, 0x00, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, // ....Stereo_MS_ZP
	0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x00, 0x06, 0x00, 0x06, 0x00, 0x4f, 0x00, 0x00, 0x00, // D_YAxis.....O...
	0x01, 0x00, 0x00, 0x00, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x00, 0x00, // ....w_h_height..
	0x05, 0x00, 0x03, 0x00, 0x51, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x06, 0x00, // ....Q...........
	0x24, 0x01, 0x00, 0x00, 0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6f, 0x72, 0x64, // $...gl_FragCoord
	0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x05, 0x00, 0x28, 0x01, 0x00, 0x00, 0x76, 0x5f, 0x74, 0x65, // ........(...v_te
	0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x00, 0x05, 0x00, 0x06, 0x00, 0x33, 0x01, 0x00, 0x00, // xcoord0.....3...
	0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x00, 0x00, // bgfx_FragData0..
	0x47, 0x00, 0x04, 0x00, 0x2b, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // G...+...".......
	0x47, 0x00, 0x04, 0x00, 0x2b, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, // G...+...!.......
	0x47, 0x00, 0x04, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // G.......".......
	0x47, 0x00, 0x04, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // G.......!.......
	0x47, 0x00, 0x04, 0x00, 0x32, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // G...2...".......
	0x47, 0x00, 0x04, 0x00, 0x32, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, // G...2...!.......
	0x47, 0x00, 0x04, 0x00, 0x34, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // G...4...".......
	0x47, 0x00, 0x04, 0x00, 0x34, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, // G...4...!.......
	0x48, 0x00, 0x05, 0x00, 0x4f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, // H...O.......#...
	0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0x4f, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // ....H...O.......
	0x23, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x47, 0x00, 0x03, 0x00, 0x4f, 0x00, 0x00, 0x00, // #.......G...O...
	0x02, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x51, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, // ....G...Q..."...
	0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x51, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, // ....G...Q...!...
	0x01, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x24, 0x01, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, // ....G...$.......
	0x0f, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x28, 0x01, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, // ....G...(.......
	0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x33, 0x01, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, // ....G...3.......
	0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x21, 0x00, 0x03, 0x00, // ............!...
	0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x02, 0x00, 0x06, 0x00, 0x00, 0x00, // ................
	0x16, 0x00, 0x03, 0x00, 0x07, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x19, 0x00, 0x09, 0x00, // ........ .......
	0x08, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x17, 0x00, 0x04, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // ................
	0x17, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, // ................
	0x14, 0x00, 0x02, 0x00, 0x19, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x1b, 0x00, 0x00, 0x00, // ................
	0x07, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x2a, 0x00, 0x00, 0x00, // ........ ...*...
	0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x2a, 0x00, 0x00, 0x00, // ........;...*...
	0x2b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x2d, 0x00, 0x00, 0x00, // +....... ...-...
	0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x2d, 0x00, 0x00, 0x00, // ........;...-...
	0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x2a, 0x00, 0x00, 0x00, // ........;...*...
	0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x2d, 0x00, 0x00, 0x00, // 2.......;...-...
	0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x00, 0x04, 0x00, 0x37, 0x00, 0x00, 0x00, // 4...........7...
	0x20, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x37, 0x00, 0x00, 0x00, //  .......+...7...
	0x38, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x37, 0x00, 0x00, 0x00, // 8.......+...7...
	0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x03, 0x00, 0x40, 0x00, 0x00, 0x00, // <...........@...
	0x08, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x04, 0x00, 0x4f, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, // ........O.......
	0x0e, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x50, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // .... ...P.......
	0x4f, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x50, 0x00, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00, // O...;...P...Q...
	0x02, 0x00, 0x00, 0x00, 0x15, 0x00, 0x04, 0x00, 0x52, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, // ........R... ...
	0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x52, 0x00, 0x00, 0x00, 0x53, 0x00, 0x00, 0x00, // ....+...R...S...
	0x02, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x54, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // .... ...T.......
	0x07, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, // ....+.......W...
	0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x52, 0x00, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x00, // ....+...R...Z...
	0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, // ....+.......c...
	0x00, 0x00, 0x00, 0x3f, 0x17, 0x00, 0x04, 0x00, 0x6a, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, // ...?....j.......
	0x02, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, // ....+.......v...
	0xfa, 0x7e, 0x2a, 0x3f, 0x2b, 0x00, 0x04, 0x00, 0x52, 0x00, 0x00, 0x00, 0x98, 0x00, 0x00, 0x00, // .~*?+...R.......
	0x03, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x9c, 0x00, 0x00, 0x00, // ....+...........
	0x00, 0x00, 0x80, 0x3f, 0x2b, 0x00, 0x04, 0x00, 0x52, 0x00, 0x00, 0x00, 0x9e, 0x00, 0x00, 0x00, // ...?+...R.......
	0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x23, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // .... ...#.......
	0x0e, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x23, 0x01, 0x00, 0x00, 0x24, 0x01, 0x00, 0x00, // ....;...#...$...
	0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x27, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // .... ...'.......
	0x0b, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x27, 0x01, 0x00, 0x00, 0x28, 0x01, 0x00, 0x00, // ....;...'...(...
	0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x32, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, // .... ...2.......
	0x0e, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x32, 0x01, 0x00, 0x00, 0x33, 0x01, 0x00, 0x00, // ....;...2...3...
	0x03, 0x00, 0x00, 0x00, 0x36, 0x00, 0x05, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, // ....6...........
	0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x05, 0x00, 0x00, 0x00, // ................
	0x3d, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x00, 0x00, // =.......,...+...
	0x3d, 0x00, 0x04, 0x00, 0x08, 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, // =......./.......
	0x3d, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, // =.......3...2...
	0x3d, 0x00, 0x04, 0x00, 0x08, 0x00, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, // =.......5...4...
	0x3d, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x25, 0x01, 0x00, 0x00, 0x24, 0x01, 0x00, 0x00, // =.......%...$...
	0x3d, 0x00, 0x04, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x29, 0x01, 0x00, 0x00, 0x28, 0x01, 0x00, 0x00, // =.......)...(...
	0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x5d, 0x01, 0x00, 0x00, 0x25, 0x01, 0x00, 0x00, // Q.......]...%...
	0x01, 0x00, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x5e, 0x01, 0x00, 0x00, // ............^...
	0x5d, 0x01, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x06, 0x00, 0x07, 0x00, 0x00, 0x00, // ]...c...........
	0x5f, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x5e, 0x01, 0x00, 0x00, // _...........^...
	0xbe, 0x00, 0x05, 0x00, 0x19, 0x00, 0x00, 0x00, 0x60, 0x01, 0x00, 0x00, 0x5f, 0x01, 0x00, 0x00, // ........`..._...
	0x63, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x26, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // c.......&.......
	0xfb, 0x00, 0x03, 0x00, 0x5a, 0x00, 0x00, 0x00, 0x90, 0x01, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, // ....Z...........
	0x90, 0x01, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x54, 0x00, 0x00, 0x00, 0x91, 0x01, 0x00, 0x00, // ....A...T.......
	0x51, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x53, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, // Q...<...S...=...
	0x07, 0x00, 0x00, 0x00, 0x92, 0x01, 0x00, 0x00, 0x91, 0x01, 0x00, 0x00, 0xb7, 0x00, 0x05, 0x00, // ................
	0x19, 0x00, 0x00, 0x00, 0x93, 0x01, 0x00, 0x00, 0x92, 0x01, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, // ............W...
	0x41, 0x00, 0x06, 0x00, 0x54, 0x00, 0x00, 0x00, 0x94, 0x01, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00, // A...T.......Q...
	0x3c, 0x00, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, // <...Z...=.......
	0x95, 0x01, 0x00, 0x00, 0x94, 0x01, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x25, 0x02, 0x00, 0x00, // ............%...
	0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0x60, 0x01, 0x00, 0x00, 0x97, 0x01, 0x00, 0x00, // ........`.......
	0xde, 0x01, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xde, 0x01, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, // ................
	0x07, 0x00, 0x00, 0x00, 0xe2, 0x01, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, 0x95, 0x01, 0x00, 0x00, // ........c.......
	0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xe3, 0x01, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, // P...........W...
	0xe2, 0x01, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xe5, 0x01, 0x00, 0x00, // ................
	0x63, 0x00, 0x00, 0x00, 0x95, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, // c.......P.......
	0xe6, 0x01, 0x00, 0x00, 0xe5, 0x01, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, // ........W...P...
	0x6a, 0x00, 0x00, 0x00, 0xe7, 0x01, 0x00, 0x00, 0x93, 0x01, 0x00, 0x00, 0x93, 0x01, 0x00, 0x00, // j...............
	0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xe8, 0x01, 0x00, 0x00, 0xe7, 0x01, 0x00, 0x00, // ................
	0xe3, 0x01, 0x00, 0x00, 0xe6, 0x01, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, // ................
	0xe9, 0x01, 0x00, 0x00, 0x29, 0x01, 0x00, 0x00, 0xe8, 0x01, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, // ....).......V...
	0x40, 0x00, 0x00, 0x00, 0x56, 0x02, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, // @...V...5...3...
	0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x59, 0x02, 0x00, 0x00, 0x56, 0x02, 0x00, 0x00, // X.......Y...V...
	0xe9, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, // ........W...Q...
	0x07, 0x00, 0x00, 0x00, 0xec, 0x01, 0x00, 0x00, 0x59, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........Y.......
	0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xf0, 0x01, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, // ............v...
	0x95, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xf1, 0x01, 0x00, 0x00, // ....P...........
	0x57, 0x00, 0x00, 0x00, 0xf0, 0x01, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // W...............
	0xf3, 0x01, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x95, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, // ....v.......P...
	0x0b, 0x00, 0x00, 0x00, 0xf4, 0x01, 0x00, 0x00, 0xf3, 0x01, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, // ............W...
	0x50, 0x00, 0x05, 0x00, 0x6a, 0x00, 0x00, 0x00, 0xf5, 0x01, 0x00, 0x00, 0x93, 0x01, 0x00, 0x00, // P...j...........
	0x93, 0x01, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xf6, 0x01, 0x00, 0x00, // ................
	0xf5, 0x01, 0x00, 0x00, 0xf1, 0x01, 0x00, 0x00, 0xf4, 0x01, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, // ................
	0x0b, 0x00, 0x00, 0x00, 0xf7, 0x01, 0x00, 0x00, 0x29, 0x01, 0x00, 0x00, 0xf6, 0x01, 0x00, 0x00, // ........).......
	0x56, 0x00, 0x05, 0x00, 0x40, 0x00, 0x00, 0x00, 0x60, 0x02, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, // V...@...`...5...
	0x33, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x63, 0x02, 0x00, 0x00, // 3...X.......c...
	0x60, 0x02, 0x00, 0x00, 0xf7, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, // `...........W...
	0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xfa, 0x01, 0x00, 0x00, 0x63, 0x02, 0x00, 0x00, // Q...........c...
	0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0xfb, 0x01, 0x00, 0x00, // ................
	0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0xec, 0x01, 0x00, 0x00, 0xfa, 0x01, 0x00, 0x00, // ....%...........
	0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xff, 0x01, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, // P...........W...
	0x95, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x01, 0x02, 0x00, 0x00, // ....P...........
	0x95, 0x01, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x6a, 0x00, 0x00, 0x00, // ....W...P...j...
	0x02, 0x02, 0x00, 0x00, 0x93, 0x01, 0x00, 0x00, 0x93, 0x01, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, // ................
	0x0b, 0x00, 0x00, 0x00, 0x03, 0x02, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0xff, 0x01, 0x00, 0x00, // ................
	0x01, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x04, 0x02, 0x00, 0x00, // ................
	0x29, 0x01, 0x00, 0x00, 0x03, 0x02, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, 0x40, 0x00, 0x00, 0x00, // ).......V...@...
	0x6a, 0x02, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, // j...5...3...X...
	0x0e, 0x00, 0x00, 0x00, 0x6d, 0x02, 0x00, 0x00, 0x6a, 0x02, 0x00, 0x00, 0x04, 0x02, 0x00, 0x00, // ....m...j.......
	0x02, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // ....W...Q.......
	0x07, 0x02, 0x00, 0x00, 0x6d, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, // ....m...........
	0x07, 0x00, 0x00, 0x00, 0x08, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, // ............%...
	0xfb, 0x01, 0x00, 0x00, 0x07, 0x02, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x54, 0x00, 0x00, 0x00, // ........A...T...
	0x09, 0x02, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x98, 0x00, 0x00, 0x00, // ....Q...8.......
	0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x0a, 0x02, 0x00, 0x00, 0x09, 0x02, 0x00, 0x00, // =...............
	0x41, 0x00, 0x06, 0x00, 0x54, 0x00, 0x00, 0x00, 0x0d, 0x02, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00, // A...T.......Q...
	0x3c, 0x00, 0x00, 0x00, 0x9e, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, // <.......=.......
	0x0e, 0x02, 0x00, 0x00, 0x0d, 0x02, 0x00, 0x00, 0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // ................
	0x0f, 0x02, 0x00, 0x00, 0x9c, 0x00, 0x00, 0x00, 0x0e, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, // ................
	0x07, 0x00, 0x00, 0x00, 0x10, 0x02, 0x00, 0x00, 0x0f, 0x02, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, // ............c...
	0x0c, 0x00, 0x08, 0x00, 0x07, 0x00, 0x00, 0x00, 0x12, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // ................
	0x32, 0x00, 0x00, 0x00, 0x08, 0x02, 0x00, 0x00, 0x10, 0x02, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, // 2...........c...
	0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x13, 0x02, 0x00, 0x00, 0x9c, 0x00, 0x00, 0x00, // ................
	0x12, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x14, 0x02, 0x00, 0x00, // ................
	0x9c, 0x00, 0x00, 0x00, 0x13, 0x02, 0x00, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x07, 0x00, 0x00, 0x00, // ................
	0x16, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x95, 0x01, 0x00, 0x00, // ........2.......
	0x14, 0x02, 0x00, 0x00, 0x0a, 0x02, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, // ................
	0x17, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, // ........(...W...
	0x16, 0x02, 0x00, 0x00, 0x7f, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x1b, 0x02, 0x00, 0x00, // ................
	0x17, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x1c, 0x02, 0x00, 0x00, // ....P...........
	0x57, 0x00, 0x00, 0x00, 0x1b, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, // W.......P.......
	0x1e, 0x02, 0x00, 0x00, 0x17, 0x02, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, // ........W...P...
	0x6a, 0x00, 0x00, 0x00, 0x1f, 0x02, 0x00, 0x00, 0x93, 0x01, 0x00, 0x00, 0x93, 0x01, 0x00, 0x00, // j...............
	0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00, 0x1f, 0x02, 0x00, 0x00, // ........ .......
	0x1c, 0x02, 0x00, 0x00, 0x1e, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, // ................
	0x21, 0x02, 0x00, 0x00, 0x29, 0x01, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, // !...)... ...V...
	0x40, 0x00, 0x00, 0x00, 0x74, 0x02, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, // @...t.../...,...
	0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x77, 0x02, 0x00, 0x00, 0x74, 0x02, 0x00, 0x00, // X.......w...t...
	0x21, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, 0x4f, 0x00, 0x08, 0x00, // !.......W...O...
	0x1b, 0x00, 0x00, 0x00, 0x24, 0x02, 0x00, 0x00, 0x77, 0x02, 0x00, 0x00, 0x77, 0x02, 0x00, 0x00, // ....$...w...w...
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, // ................
	0x26, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x97, 0x01, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, // &...............
	0x07, 0x00, 0x00, 0x00, 0x9b, 0x01, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, 0x95, 0x01, 0x00, 0x00, // ........c.......
	0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x9c, 0x01, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, // P...........W...
	0x9b, 0x01, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x9e, 0x01, 0x00, 0x00, // ................
	0x63, 0x00, 0x00, 0x00, 0x95, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, // c.......P.......
	0x9f, 0x01, 0x00, 0x00, 0x9e, 0x01, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, // ........W...P...
	0x6a, 0x00, 0x00, 0x00, 0xa0, 0x01, 0x00, 0x00, 0x93, 0x01, 0x00, 0x00, 0x93, 0x01, 0x00, 0x00, // j...............
	0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xa1, 0x01, 0x00, 0x00, 0xa0, 0x01, 0x00, 0x00, // ................
	0x9c, 0x01, 0x00, 0x00, 0x9f, 0x01, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, // ................
	0xa2, 0x01, 0x00, 0x00, 0x29, 0x01, 0x00, 0x00, 0xa1, 0x01, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, // ....).......V...
	0x40, 0x00, 0x00, 0x00, 0x2e, 0x02, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, // @.......5...3...
	0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x31, 0x02, 0x00, 0x00, 0x2e, 0x02, 0x00, 0x00, // X.......1.......
	0xa2, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, // ........W...Q...
	0x07, 0x00, 0x00, 0x00, 0xa5, 0x01, 0x00, 0x00, 0x31, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........1.......
	0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xa9, 0x01, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, // ............v...
	0x95, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xaa, 0x01, 0x00, 0x00, // ....P...........
	0x57, 0x00, 0x00, 0x00, 0xa9, 0x01, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // W...............
	0xac, 0x01, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x95, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, // ....v.......P...
	0x0b, 0x00, 0x00, 0x00, 0xad, 0x01, 0x00, 0x00, 0xac, 0x01, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, // ............W...
	0x50, 0x00, 0x05, 0x00, 0x6a, 0x00, 0x00, 0x00, 0xae, 0x01, 0x00, 0x00, 0x93, 0x01, 0x00, 0x00, // P...j...........
	0x93, 0x01, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xaf, 0x01, 0x00, 0x00, // ................
	0xae, 0x01, 0x00, 0x00, 0xaa, 0x01, 0x00, 0x00, 0xad, 0x01, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, // ................
	0x0b, 0x00, 0x00, 0x00, 0xb0, 0x01, 0x00, 0x00, 0x29, 0x01, 0x00, 0x00, 0xaf, 0x01, 0x00, 0x00, // ........).......
	0x56, 0x00, 0x05, 0x00, 0x40, 0x00, 0x00, 0x00, 0x38, 0x02, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, // V...@...8...5...
	0x33, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x3b, 0x02, 0x00, 0x00, // 3...X.......;...
	0x38, 0x02, 0x00, 0x00, 0xb0, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, // 8...........W...
	0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xb3, 0x01, 0x00, 0x00, 0x3b, 0x02, 0x00, 0x00, // Q...........;...
	0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0xb4, 0x01, 0x00, 0x00, // ................
	0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0xa5, 0x01, 0x00, 0x00, 0xb3, 0x01, 0x00, 0x00, // ....%...........
	0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, // P...........W...
	0x95, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xba, 0x01, 0x00, 0x00, // ....P...........
	0x95, 0x01, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x6a, 0x00, 0x00, 0x00, // ....W...P...j...
	0xbb, 0x01, 0x00, 0x00, 0x93, 0x01, 0x00, 0x00, 0x93, 0x01, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, // ................
	0x0b, 0x00, 0x00, 0x00, 0xbc, 0x01, 0x00, 0x00, 0xbb, 0x01, 0x00, 0x00, 0xb8, 0x01, 0x00, 0x00, // ................
	0xba, 0x01, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xbd, 0x01, 0x00, 0x00, // ................
	0x29, 0x01, 0x00, 0x00, 0xbc, 0x01, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, 0x40, 0x00, 0x00, 0x00, // ).......V...@...
	0x42, 0x02, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, // B...5...3...X...
	0x0e, 0x00, 0x00, 0x00, 0x45, 0x02, 0x00, 0x00, 0x42, 0x02, 0x00, 0x00, 0xbd, 0x01, 0x00, 0x00, // ....E...B.......
	0x02, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // ....W...Q.......
	0xc0, 0x01, 0x00, 0x00, 0x45, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, // ....E...........
	0x07, 0x00, 0x00, 0x00, 0xc1, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, // ............%...
	0xb4, 0x01, 0x00, 0x00, 0xc0, 0x01, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x54, 0x00, 0x00, 0x00, // ........A...T...
	0xc2, 0x01, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x98, 0x00, 0x00, 0x00, // ....Q...8.......
	0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0xc3, 0x01, 0x00, 0x00, 0xc2, 0x01, 0x00, 0x00, // =...............
	0x41, 0x00, 0x06, 0x00, 0x54, 0x00, 0x00, 0x00, 0xc6, 0x01, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00, // A...T.......Q...
	0x3c, 0x00, 0x00, 0x00, 0x9e, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, // <.......=.......
	0xc7, 0x01, 0x00, 0x00, 0xc6, 0x01, 0x00, 0x00, 0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // ................
	0xc8, 0x01, 0x00, 0x00, 0x9c, 0x00, 0x00, 0x00, 0xc7, 0x01, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, // ................
	0x07, 0x00, 0x00, 0x00, 0xc9, 0x01, 0x00, 0x00, 0xc8, 0x01, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, // ............c...
	0x0c, 0x00, 0x08, 0x00, 0x07, 0x00, 0x00, 0x00, 0xcb, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // ................
	0x32, 0x00, 0x00, 0x00, 0xc1, 0x01, 0x00, 0x00, 0xc9, 0x01, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, // 2...........c...
	0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xcc, 0x01, 0x00, 0x00, 0x9c, 0x00, 0x00, 0x00, // ................
	0xcb, 0x01, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xcd, 0x01, 0x00, 0x00, // ................
	0x9c, 0x00, 0x00, 0x00, 0xcc, 0x01, 0x00, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x07, 0x00, 0x00, 0x00, // ................
	0xcf, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x95, 0x01, 0x00, 0x00, // ........2.......
	0xcd, 0x01, 0x00, 0x00, 0xc3, 0x01, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, // ................
	0xd0, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, // ........(...W...
	0xcf, 0x01, 0x00, 0x00, 0x7f, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0xd4, 0x01, 0x00, 0x00, // ................
	0xd0, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xd5, 0x01, 0x00, 0x00, // ....P...........
	0x57, 0x00, 0x00, 0x00, 0xd4, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, // W.......P.......
	0xd7, 0x01, 0x00, 0x00, 0xd0, 0x01, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, // ........W...P...
	0x6a, 0x00, 0x00, 0x00, 0xd8, 0x01, 0x00, 0x00, 0x93, 0x01, 0x00, 0x00, 0x93, 0x01, 0x00, 0x00, // j...............
	0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xd9, 0x01, 0x00, 0x00, 0xd8, 0x01, 0x00, 0x00, // ................
	0xd5, 0x01, 0x00, 0x00, 0xd7, 0x01, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, // ................
	0xda, 0x01, 0x00, 0x00, 0x29, 0x01, 0x00, 0x00, 0xd9, 0x01, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, // ....).......V...
	0x40, 0x00, 0x00, 0x00, 0x4c, 0x02, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, // @...L.../...,...
	0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x4f, 0x02, 0x00, 0x00, 0x4c, 0x02, 0x00, 0x00, // X.......O...L...
	0xda, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, 0x4f, 0x00, 0x08, 0x00, // ........W...O...
	0x1b, 0x00, 0x00, 0x00, 0xdd, 0x01, 0x00, 0x00, 0x4f, 0x02, 0x00, 0x00, 0x4f, 0x02, 0x00, 0x00, // ........O...O...
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, // ................
	0x26, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x25, 0x02, 0x00, 0x00, 0xff, 0x00, 0x01, 0x00, // &.......%.......
	0xf8, 0x00, 0x02, 0x00, 0x26, 0x02, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x1b, 0x00, 0x00, 0x00, // ....&...........
	0x9a, 0x02, 0x00, 0x00, 0x24, 0x02, 0x00, 0x00, 0xde, 0x01, 0x00, 0x00, 0xdd, 0x01, 0x00, 0x00, // ....$...........
	0x97, 0x01, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x63, 0x01, 0x00, 0x00, // ....Q.......c...
	0x9a, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // ........Q.......
	0x64, 0x01, 0x00, 0x00, 0x9a, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, // d...........Q...
	0x07, 0x00, 0x00, 0x00, 0x65, 0x01, 0x00, 0x00, 0x9a, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // ....e...........
	0x50, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x66, 0x01, 0x00, 0x00, 0x63, 0x01, 0x00, 0x00, // P.......f...c...
	0x64, 0x01, 0x00, 0x00, 0x65, 0x01, 0x00, 0x00, 0x9c, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x03, 0x00, // d...e.......>...
	0x33, 0x01, 0x00, 0x00, 0x66, 0x01, 0x00, 0x00, 0xfd, 0x00, 0x01, 0x00, 0x38, 0x00, 0x01, 0x00, // 3...f.......8...
	0x00, 0x00, 0x20, 0x00,                                                                         // .. .
};
static const bgfx::EmbeddedShader fs_pp_stereo_flipped_int = BGFX_EMBEDDED_SHADER(fs_pp_stereo_flipped_int);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Build of fragment shader from fs_pp_stereo.sc to fs_pp_stereo_anaglyph_deghost with options: ANAGLYPH DEGHOST NOSTEREO
static const uint8_t fs_pp_stereo_anaglyph_deghost_mtl[3604] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x14, 0x74, // FSH.o.><.......t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, // ex_stereo_fbSamp
	0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x74, 0x65, // ler...........te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x54, 0x65, 0x78, 0x74, 0x75, // x_stereo_fbTextu
	0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x74, 0x65, 0x78, // re...........tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, // _stereo_depthSam
	0x70, 0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x74, // pler...........t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x54, // ex_stereo_depthT
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, // exture..........
	0x13, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, // .Stereo_MS_ZPD_Y
	0x41, 0x78, 0x69, 0x73, 0x12, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x77, // Axis...........w
	0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x01, 0x10, 0x00, 0x01, 0x00, 0x00, // _h_height.......
	0x00, 0x00, 0x00, 0x0e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, // ....Stereo_LeftM
	0x61, 0x74, 0x14, 0x01, 0x20, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x53, 0x74, 0x65, // at.. ........Ste
	0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x01, 0x60, 0x00, // reo_RightMat..`.
	0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, // .......Stereo_De
	0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x14, 0x01, 0xb0, 0x00, 0x04, // ghostFilter.....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, // ......Stereo_Deg
	0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x12, 0x01, 0xa0, 0x00, 0x01, 0x00, 0x00, // hostGamma.......
	0x00, 0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, // ....tex_stereo_f
	0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x74, 0x65, 0x78, 0x5f, // b...........tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x10, 0x00, 0x00, 0x00, // stereo_depth....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa6, 0x0c, 0x00, 0x00, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, // ..........#inclu
	0x64, 0x65, 0x20, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x64, 0x6c, 0x69, 0x62, // de <metal_stdlib
	0x3e, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x73, 0x69, 0x6d, 0x64, // >.#include <simd
	0x2f, 0x73, 0x69, 0x6d, 0x64, 0x2e, 0x68, 0x3e, 0x0a, 0x0a, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, // /simd.h>..using 
	0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x3b, // namespace metal;
	0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, // ..struct _Global
	0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, // .{.    float4 St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, // ereo_MS_ZPD_YAxi
	0x73, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x77, 0x5f, // s;.    float4 w_
	0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, // h_height;.    fl
	0x6f, 0x61, 0x74, 0x34, 0x78, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, // oat4x4 Stereo_Le
	0x66, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // ftMat;.    float
	0x34, 0x78, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, // 4x4 Stereo_Right
	0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, // Mat;.    float4 
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, // Stereo_DeghostGa
	0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x78, // mma;.    float4x
	0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, // 4 Stereo_Deghost
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, // Filter;.};..stru
	0x63, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, // ct xlatMtlMain_o
	0x75, 0x74, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, // ut.{.    float4 
	0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x20, 0x5b, // bgfx_FragData0 [
	0x5b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, // [color(0)]];.};.
	0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, // .struct xlatMtlM
	0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, // ain_in.{.    flo
	0x61, 0x74, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, // at2 v_texcoord0 
	0x5b, 0x5b, 0x75, 0x73, 0x65, 0x72, 0x28, 0x6c, 0x6f, 0x63, 0x6e, 0x30, 0x29, 0x5d, 0x5d, 0x3b, // [[user(locn0)]];
	0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x78, 0x6c, // .};..fragment xl
	0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x78, 0x6c, // atMtlMain_out xl
	0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x28, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, // atMtlMain(xlatMt
	0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x5b, 0x5b, 0x73, 0x74, // lMain_in in [[st
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x5d, 0x5d, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, // age_in]], consta
	0x6e, 0x74, 0x20, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x26, 0x20, 0x5f, 0x6d, 0x74, 0x6c, // nt _Global& _mtl
	0x5f, 0x75, 0x20, 0x5b, 0x5b, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, // _u [[buffer(0)]]
	0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, 0x6f, 0x61, // , texture2d<floa
	0x74, 0x3e, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, // t> tex_stereo_fb
	0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x2c, //  [[texture(0)]],
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, //  texture2d<float
	0x3e, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, // > tex_stereo_dep
	0x74, 0x68, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x31, 0x29, 0x5d, // th [[texture(1)]
	0x5d, 0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, // ], sampler tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, // tereo_fbSampler 
	0x5b, 0x5b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x2c, 0x20, // [[sampler(0)]], 
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // sampler tex_ster
	0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, // eo_depthSampler 
	0x5b, 0x5b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x31, 0x29, 0x5d, 0x5d, 0x29, 0x0a, // [[sampler(1)]]).
	0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, // {.    xlatMtlMai
	0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x3d, 0x20, 0x7b, 0x7d, 0x3b, 0x0a, // n_out out = {};.
	0x20, 0x20, 0x20, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x5f, 0x34, 0x35, 0x36, 0x20, 0x3d, 0x20, //     bool _456 = 
	0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, // _mtl_u.Stereo_MS
	0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x7a, 0x20, 0x21, 0x3d, 0x20, // _ZPD_YAxis.z != 
	0x30, 0x2e, 0x30, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, // 0.0;.    float _
	0x35, 0x31, 0x35, 0x20, 0x3d, 0x20, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x61, 0x78, 0x28, // 515 = fast::max(
	0x30, 0x2e, 0x30, 0x2c, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, // 0.0, fma(_mtl_u.
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, // Stereo_MS_ZPD_YA
	0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, // xis.x, 1.0 - (1.
	0x30, 0x20, 0x2f, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, // 0 / fma(fast::mi
	0x6e, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x5f, // n(fast::min(tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, 0x6d, // stereo_depth.sam
	0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, // ple(tex_stereo_d
	0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, 0x6e, // epthSampler, (in
	0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2b, 0x20, 0x73, // .v_texcoord0 + s
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x35, // elect(float2(0.5
	0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, //  * _mtl_u.Stereo
	0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, // _MS_ZPD_YAxis.x,
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, //  0.0), float2(0.
	0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, // 0, 0.5 * _mtl_u.
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, // Stereo_MS_ZPD_YA
	0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x34, // xis.x), bool2(_4
	0x35, 0x36, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, // 56))), level(0.0
	0x29, 0x29, 0x2e, 0x78, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // )).x, tex_stereo
	0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, // _depth.sample(te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, // x_stereo_depthSa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, // mpler, (in.v_tex
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2b, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, // coord0 + select(
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x30, 0x30, 0x30, 0x30, // float2(0.6660000
	0x30, 0x38, 0x35, 0x38, 0x33, 0x30, 0x36, 0x38, 0x38, 0x34, 0x37, 0x36, 0x35, 0x36, 0x32, 0x35, // 0858306884765625
	0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, //  * _mtl_u.Stereo
	0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, // _MS_ZPD_YAxis.x,
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, //  0.0), float2(0.
	0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x30, 0x30, 0x30, 0x30, 0x30, 0x38, 0x35, 0x38, // 0, 0.66600000858
	0x33, 0x30, 0x36, 0x38, 0x38, 0x34, 0x37, 0x36, 0x35, 0x36, 0x32, 0x35, 0x20, 0x2a, 0x20, 0x5f, // 306884765625 * _
	0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, // mtl_u.Stereo_MS_
	0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, 0x6f, // ZPD_YAxis.x), bo
	0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x34, 0x35, 0x36, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, // ol2(_456))), lev
	0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x74, 0x65, 0x78, // el(0.0)).x), tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, // _stereo_depth.sa
	0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // mple(tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, // depthSampler, (i
	0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2b, 0x20, // n.v_texcoord0 + 
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x5f, 0x6d, // select(float2(_m
	0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, // tl_u.Stereo_MS_Z
	0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // PD_YAxis.x, 0.0)
	0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x5f, 0x6d, // , float2(0.0, _m
	0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, // tl_u.Stereo_MS_Z
	0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, // PD_YAxis.x), boo
	0x6c, 0x32, 0x28, 0x5f, 0x34, 0x35, 0x36, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, // l2(_456))), leve
	0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x28, 0x31, 0x2e, 0x30, // l(0.0)).x), (1.0
	0x20, 0x2f, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, //  / _mtl_u.Stereo
	0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, // _MS_ZPD_YAxis.y)
	0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x2c, 0x20, 0x5f, //  - 0.5, 0.5)), _
	0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, // mtl_u.w_h_height
	0x2e, 0x77, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // .w));.    float 
	0x5f, 0x35, 0x38, 0x35, 0x20, 0x3d, 0x20, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x61, 0x78, // _585 = fast::max
	0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, // (0.0, fma(_mtl_u
	0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, // .Stereo_MS_ZPD_Y
	0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, // Axis.x, 1.0 - (1
	0x2e, 0x30, 0x20, 0x2f, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, // .0 / fma(fast::m
	0x69, 0x6e, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, // in(fast::min(tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, // _stereo_depth.sa
	0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // mple(tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, // depthSampler, (i
	0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2d, 0x20, // n.v_texcoord0 - 
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, // select(float2(0.
	0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, // 5 * _mtl_u.Stere
	0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, // o_MS_ZPD_YAxis.x
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, // , 0.0), float2(0
	0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, // .0, 0.5 * _mtl_u
	0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, // .Stereo_MS_ZPD_Y
	0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, // Axis.x), bool2(_
	0x34, 0x35, 0x36, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, // 456))), level(0.
	0x30, 0x29, 0x29, 0x2e, 0x78, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // 0)).x, tex_stere
	0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, // o_depth.sample(t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, // ex_stereo_depthS
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, // ampler, (in.v_te
	0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2d, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, // xcoord0 - select
	0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x30, 0x30, 0x30, // (float2(0.666000
	0x30, 0x30, 0x38, 0x35, 0x38, 0x33, 0x30, 0x36, 0x38, 0x38, 0x34, 0x37, 0x36, 0x35, 0x36, 0x32, // 0085830688476562
	0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, // 5 * _mtl_u.Stere
	0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, // o_MS_ZPD_YAxis.x
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, // , 0.0), float2(0
	0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x30, 0x30, 0x30, 0x30, 0x30, 0x38, 0x35, // .0, 0.6660000085
	0x38, 0x33, 0x30, 0x36, 0x38, 0x38, 0x34, 0x37, 0x36, 0x35, 0x36, 0x32, 0x35, 0x20, 0x2a, 0x20, // 8306884765625 * 
	0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, // _mtl_u.Stereo_MS
	0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, // _ZPD_YAxis.x), b
	0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x34, 0x35, 0x36, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, // ool2(_456))), le
	0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x74, 0x65, // vel(0.0)).x), te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, // x_stereo_depth.s
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // ample(tex_stereo
	0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, // _depthSampler, (
	0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2d, // in.v_texcoord0 -
	0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x5f, //  select(float2(_
	0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, // mtl_u.Stereo_MS_
	0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, // ZPD_YAxis.x, 0.0
	0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x5f, // ), float2(0.0, _
	0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, // mtl_u.Stereo_MS_
	0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, 0x6f, // ZPD_YAxis.x), bo
	0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x34, 0x35, 0x36, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, // ol2(_456))), lev
	0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x28, 0x31, 0x2e, // el(0.0)).x), (1.
	0x30, 0x20, 0x2f, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, // 0 / _mtl_u.Stere
	0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, // o_MS_ZPD_YAxis.y
	0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x2c, 0x20, // ) - 0.5, 0.5)), 
	0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, // _mtl_u.w_h_heigh
	0x74, 0x2e, 0x77, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x6f, 0x75, 0x74, 0x2e, 0x62, // t.w));.    out.b
	0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x20, 0x3d, 0x20, // gfx_FragData0 = 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x78, 0x33, 0x28, // float4(float3x3(
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, // float3(_mtl_u.St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, // ereo_DeghostFilt
	0x65, 0x72, 0x5b, 0x30, 0x5d, 0x5b, 0x30, 0x5d, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, // er[0][0], _mtl_u
	0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, // .Stereo_DeghostF
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x31, 0x5d, 0x5b, 0x30, 0x5d, 0x2c, 0x20, 0x5f, 0x6d, 0x74, // ilter[1][0], _mt
	0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, // l_u.Stereo_Degho
	0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x32, 0x5d, 0x5b, 0x30, 0x5d, 0x29, 0x2c, // stFilter[2][0]),
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, //  float3(_mtl_u.S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, // tereo_DeghostFil
	0x74, 0x65, 0x72, 0x5b, 0x30, 0x5d, 0x5b, 0x31, 0x5d, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, // ter[0][1], _mtl_
	0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, // u.Stereo_Deghost
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x31, 0x5d, 0x5b, 0x31, 0x5d, 0x2c, 0x20, 0x5f, 0x6d, // Filter[1][1], _m
	0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, // tl_u.Stereo_Degh
	0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x32, 0x5d, 0x5b, 0x31, 0x5d, 0x29, // ostFilter[2][1])
	0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, // , float3(_mtl_u.
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, // Stereo_DeghostFi
	0x6c, 0x74, 0x65, 0x72, 0x5b, 0x30, 0x5d, 0x5b, 0x32, 0x5d, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, // lter[0][2], _mtl
	0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, // _u.Stereo_Deghos
	0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x31, 0x5d, 0x5b, 0x32, 0x5d, 0x2c, 0x20, 0x5f, // tFilter[1][2], _
	0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, // mtl_u.Stereo_Deg
	0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x32, 0x5d, 0x5b, 0x32, 0x5d, // hostFilter[2][2]
	0x29, 0x29, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x72, 0x28, 0x28, 0x28, 0x66, 0x6c, 0x6f, 0x61, // )) * powr(((floa
	0x74, 0x34, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, // t4(tex_stereo_fb
	0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // .sample(tex_ster
	0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, // eo_fbSampler, (i
	0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2b, 0x20, // n.v_texcoord0 + 
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x5f, 0x35, // select(float2(_5
	0x31, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, // 15, 0.0), float2
	0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x5f, 0x35, 0x31, 0x35, 0x29, 0x2c, 0x20, 0x62, 0x6f, // (0.0, -_515), bo
	0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x34, 0x35, 0x36, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, // ol2(_456))), lev
	0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x31, 0x2e, // el(0.0)).xyz, 1.
	0x30, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, // 0) * _mtl_u.Ster
	0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x66, // eo_LeftMat) + (f
	0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // loat4(tex_stereo
	0x5f, 0x66, 0x62, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, // _fb.sample(tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, // tereo_fbSampler,
	0x20, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, //  (in.v_texcoord0
	0x20, 0x2d, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, //  - select(float2
	0x28, 0x5f, 0x35, 0x38, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, // (_585, 0.0), flo
	0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x5f, 0x35, 0x38, 0x35, 0x29, 0x2c, // at2(0.0, -_585),
	0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x34, 0x35, 0x36, 0x29, 0x29, 0x29, 0x2c, 0x20, //  bool2(_456))), 
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x2c, // level(0.0)).xyz,
	0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, //  1.0) * _mtl_u.S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x29, // tereo_RightMat))
	0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, // .xyz, _mtl_u.Ste
	0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, // reo_DeghostGamma
	0x2e, 0x78, 0x79, 0x7a, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, // .xyz), 1.0);.   
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6f, 0x75, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x0a, //  return out;.}..
	0x00, 0x00, 0x30, 0x01,                                                                         // ..0.
};
static const uint8_t fs_pp_stereo_anaglyph_deghost_essl[11061] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x22, 0x2b, // FSH.o.><......"+
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x33, 0x32, 0x30, 0x20, 0x65, // ..#version 320 e
	0x73, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, // s.#define attrib
	0x75, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x76, // ute in.#define v
	0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, // arying in.precis
	0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3b, // ion highp float;
	0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, // .precision highp
	0x20, 0x69, 0x6e, 0x74, 0x3b, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x73, 0x68, //  int;.#define sh
	0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, // adow2D(_sampler,
	0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, //  _coord) texture
	0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, // (_sampler, _coor
	0x64, 0x29, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x73, 0x68, 0x61, 0x64, 0x6f, // d).#define shado
	0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // w2DProj(_sampler
	0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // , _coord) textur
	0x65, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, // eProj(_sampler, 
	0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x0a, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x65, 0x64, 0x69, // _coord).out medi
	0x75, 0x6d, 0x70, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, // ump vec4 bgfx_Fr
	0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, // agColor;.varying
	0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, //  vec2 v_texcoord
	0x30, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, // 0;.vec3 instMul(
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x20, // vec3 _vec, mat3 
	0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // _mtx) { return (
	0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, //  (_vec) * (_mtx)
	0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, //  ); }.vec3 instM
	0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, // ul(mat3 _mtx, ve
	0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, // c3 _vec) { retur
	0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, // n ( (_mtx) * (_v
	0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, // ec) ); }.vec4 in
	0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, // stMul(vec4 _vec,
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, //  mat4 _mtx) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, // turn ( (_vec) * 
	0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, // (_mtx) ); }.vec4
	0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, //  instMul(mat4 _m
	0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, // tx, vec4 _vec) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, //  return ( (_mtx)
	0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, //  * (_vec) ); }.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, 0x70, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, // loat rcp(float _
	0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x2f, // a) { return 1.0/
	0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, // _a; }.vec2 rcp(v
	0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // ec2 _a) { return
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, //  vec2(1.0)/_a; }
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, // .vec3 rcp(vec3 _
	0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, // a) { return vec3
	0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, // (1.0)/_a; }.vec4
	0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, //  rcp(vec4 _a) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x31, 0x2e, 0x30, 0x29, // return vec4(1.0)
	0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x65, 0x63, 0x32, // /_a; }.vec2 vec2
	0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, // _splat(float _x)
	0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, //  { return vec2(_
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, // x, _x); }.vec3 v
	0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // ec3_splat(float 
	0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, // _x) { return vec
	0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, // 3(_x, _x, _x); }
	0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, // .vec4 vec4_splat
	0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // (float _x) { ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, // urn vec4(_x, _x,
	0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, //  _x, _x); }.uvec
	0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, // 2 uvec2_splat(ui
	0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // nt _x) { return 
	0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, // uvec2(_x, _x); }
	0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, // .uvec3 uvec3_spl
	0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // at(uint _x) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, // turn uvec3(_x, _
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x34, 0x20, // x, _x); }.uvec4 
	0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, // uvec4_splat(uint
	0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, //  _x) { return uv
	0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, // ec4(_x, _x, _x, 
	0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, // _x); }.mat4 mtxF
	0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, // romRows(vec4 _0,
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, //  vec4 _1, vec4 _
	0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // 2, vec4 _3).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, // turn transpose(m
	0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, // at4(_0, _1, _2, 
	0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, // _3) );.}.mat4 mt
	0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, // xFromCols(vec4 _
	0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // 0, vec4 _1, vec4
	0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, //  _2, vec4 _3).{.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, // return mat4(_0, 
	0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, // _1, _2, _3);.}.m
	0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, // at3 mtxFromRows(
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, // vec3 _0, vec3 _1
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // , vec3 _2).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, // urn transpose(ma
	0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x20, 0x29, // t3(_0, _1, _2) )
	0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, // ;.}.mat3 mtxFrom
	0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, // Cols(vec3 _0, ve
	0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, // c3 _1, vec3 _2).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, // {.return mat3(_0
	0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, // , _1, _2);.}.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, // form vec4 u_view
	0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, // Rect;.uniform ve
	0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x54, 0x65, 0x78, 0x65, 0x6c, 0x3b, 0x0a, // c4 u_viewTexel;.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, // uniform mat4 u_v
	0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, // iew;.uniform mat
	0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, // 4 u_invView;.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x70, 0x72, 0x6f, 0x6a, // form mat4 u_proj
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, // ;.uniform mat4 u
	0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // _invProj;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, // m mat4 u_viewPro
	0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, // j;.uniform mat4 
	0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, // u_invViewProj;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, // niform mat4 u_mo
	0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // del[32];.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, //  mat4 u_modelVie
	0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, // w;.uniform mat4 
	0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, // u_modelViewProj;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, // .uniform vec4 u_
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x66, 0x34, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // alphaRef4;.float
	0x20, 0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, //  sqr(const float
	0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, //  v).{.return v*v
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, // ;.}.vec2 sqr(con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // st vec2 v).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // urn v*v;.}.vec3 
	0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, // sqr(const vec3 v
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, // ).{.return v*v;.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6d, 0x75, 0x6c, 0x5f, 0x77, 0x31, 0x28, 0x63, 0x6f, // }.vec3 mul_w1(co
	0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, // nst vec3 v, cons
	0x74, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, // t mat4 m).{.retu
	0x72, 0x6e, 0x20, 0x76, 0x2e, 0x78, 0x2a, 0x6d, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, // rn v.x*m[0].xyz 
	0x2b, 0x20, 0x28, 0x76, 0x2e, 0x79, 0x2a, 0x6d, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, // + (v.y*m[1].xyz 
	0x2b, 0x20, 0x28, 0x76, 0x2e, 0x7a, 0x2a, 0x6d, 0x5b, 0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, // + (v.z*m[2].xyz 
	0x2b, 0x20, 0x6d, 0x5b, 0x33, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // + m[3].xyz));.}.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, // float acos_appro
	0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // x_divPI(const fl
	0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // oat v).{.const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, // loat x = abs(v);
	0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, // .if(1. - x <= 0.
	0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, // 00006103515625).
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, // return (v >= 0.)
	0x20, 0x3f, 0x20, 0x30, 0x2e, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, //  ? 0. : 1.;.cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, // t float res = ((
	0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, // -0.155972/3.1415
	0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, // 9265358979323846
	0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, // 26433832795) * x
	0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, //  + (1.56467/3.14
	0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, // 1592653589793238
	0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, // 4626433832795) )
	0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, //  * sqrt(1. - x);
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, // .return (v >= 0.
	0x29, 0x20, 0x3f, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x72, // ) ? res : 1. - r
	0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x74, 0x61, 0x6e, // es;.}.float atan
	0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, // 2_approx_div2PI(
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x79, 0x2c, 0x20, 0x63, // const float y, c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x29, 0x0a, 0x7b, 0x0a, // onst float x).{.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, // const float abs_
	0x79, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x79, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // y = abs(y);.cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3d, 0x20, // t float abs_x = 
	0x61, 0x62, 0x73, 0x28, 0x78, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, // abs(x);.if(abs_x
	0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, //  <= 0.0000610351
	0x35, 0x36, 0x32, 0x35, 0x20, 0x26, 0x26, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3c, 0x3d, // 5625 && abs_y <=
	0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, //  0.0000610351562
	0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x30, 0x2e, 0x3b, 0x0a, 0x63, 0x6f, // 5).return 0.;.co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x61, // nst float r = (a
	0x62, 0x73, 0x5f, 0x78, 0x20, 0x2d, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x20, 0x2f, 0x20, // bs_x - abs_y) / 
	0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2b, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x3b, // (abs_x + abs_y);
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x6e, 0x67, // .const float ang
	0x6c, 0x65, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, // le = ((x < 0.) ?
	0x20, 0x28, 0x33, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x20, 0x3a, 0x20, 0x28, 0x31, 0x2e, 0x2f, 0x38, //  (3./8.) : (1./8
	0x2e, 0x29, 0x29, 0x0a, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x32, 0x31, 0x31, 0x38, 0x36, 0x38, 0x20, // .)).+ (0.211868 
	0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, // /(2.*3.141592653
	0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, // 5897932384626433
	0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x72, 0x20, 0x2a, 0x20, 0x72, 0x20, // 832795) * r * r 
	0x2d, 0x20, 0x30, 0x2e, 0x39, 0x38, 0x37, 0x33, 0x30, 0x35, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, // - 0.987305 /(2.*
	0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, // 3.14159265358979
	0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, // 3238462643383279
	0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, // 5)) * ((x < 0.) 
	0x3f, 0x20, 0x2d, 0x72, 0x20, 0x3a, 0x20, 0x72, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // ? -r : r);.retur
	0x6e, 0x20, 0x28, 0x79, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x61, 0x6e, // n (y < 0.) ? -an
	0x67, 0x6c, 0x65, 0x20, 0x3a, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // gle : angle;.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x73, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, // loat asin_approx
	0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, // _divPI(const flo
	0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // at v).{.const fl
	0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, // oat x = abs(v);.
	0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, // if(1. - x <= 0.0
	0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, // 0006103515625).r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, // eturn (v >= 0.) 
	0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x3b, 0x0a, 0x63, 0x6f, // ? 0.5 : -0.5;.co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, // nst float res = 
	0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, // ((-0.155972/3.14
	0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, // 1592653589793238
	0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, // 4626433832795) *
	0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, //  x + (1.56467/3.
	0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, // 1415926535897932
	0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, // 384626433832795)
	0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, //  ) * sqrt(1. - x
	0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, // );.return (v >= 
	0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x20, // 0.) ? 0.5 - res 
	0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, // : -0.5 + res;.}.
	0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x61, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x71, 0x75, 0x69, // vec2 ray_to_equi
	0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x75, 0x76, 0x28, 0x63, // rectangular_uv(c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x61, 0x79, 0x29, 0x0a, 0x7b, // onst vec3 ray).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x0a, 0x30, 0x2e, // .return vec2(.0.
	0x35, 0x20, 0x2b, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, // 5 + atan2_approx
	0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x79, 0x2c, 0x20, 0x72, // _div2PI(ray.y, r
	0x61, 0x79, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, // ay.x),.acos_appr
	0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x7a, 0x29, 0x29, // ox_divPI(ray.z))
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, // ;.}.float InvsRG
	0x42, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, // B(const float co
	0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // lor).{.if (color
	0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, 0x34, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, //  <= 0.04045).ret
	0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, // urn color * (1.0
	0x2f, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, // /12.92);.else.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, // turn pow(color *
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x28, //  (1.0/1.055) + (
	0x30, 0x2e, 0x30, 0x35, 0x35, 0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, // 0.055/1.055), 2.
	0x34, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x52, // 4);.}.float InvR
	0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, // ec709(const floa
	0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, // t color).{.if (c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x38, 0x31, 0x29, 0x0a, 0x72, // olor <= 0.081).r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, // eturn color * (1
	0x2e, 0x30, 0x2f, 0x34, 0x2e, 0x35, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, // .0/4.5);.else.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, // turn pow(color *
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, 0x20, 0x2b, 0x20, 0x28, //  (1.0/1.099) + (
	0x30, 0x2e, 0x30, 0x39, 0x39, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, 0x2c, 0x20, 0x31, 0x2e, // 0.099/1.099), 1.
	0x30, 0x2f, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // 0/0.45);.}.float
	0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, //  InvGamma(const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, // float color).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, // eturn InvsRGB(co
	0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, // lor);.}.vec3 Inv
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, // Gamma(const vec3
	0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, //  color).{.return
	0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, //  vec3(InvGamma(c
	0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, // olor.x),InvGamma
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, // (color.y),InvGam
	0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // ma(color.z));.}.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, // vec3 InvToneMap(
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // const vec3 color
	0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // ).{.const float 
	0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x30, 0x2e, 0x35, 0x2f, 0x30, 0x2e, // inv_2bh = 0.5/0.
	0x32, 0x35, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // 25;.const float 
	0x62, 0x68, 0x20, 0x3d, 0x20, 0x34, 0x2e, 0x30, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2d, 0x20, // bh = 4.0*0.25 - 
	0x32, 0x2e, 0x30, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6c, // 2.0;.return (col
	0x6f, 0x72, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2b, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, // or - 1.0 + sqrt(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2a, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x20, 0x62, // color*(color + b
	0x68, 0x29, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x2a, 0x69, 0x6e, 0x76, 0x5f, 0x32, // h) + 1.0))*inv_2
	0x62, 0x68, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x52, 0x47, 0x42, // bh;.}.float sRGB
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, // (const float f).
	0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, // {.float s;.if (f
	0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x33, 0x31, 0x33, 0x30, 0x38, 0x29, 0x0a, 0x73, //  <= 0.0031308).s
	0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, //  = 12.92 * f;.el
	0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x20, 0x2a, 0x20, 0x70, // se.s = 1.055 * p
	0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x34, 0x29, 0x20, 0x2d, // ow(f, 1.0/2.4) -
	0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, //  0.055;.return s
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, // ;.}.float Rec709
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, // (const float f).
	0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, // {.float s;.if (f
	0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x34, //  <= 0.018).s = 4
	0x2e, 0x35, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, // .5 * f;.else.s =
	0x20, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, //  1.099 * pow(f, 
	0x30, 0x2e, 0x34, 0x35, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x3b, 0x0a, 0x72, // 0.45) - 0.099;.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // eturn s;.}.float
	0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, //  FBGamma(const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // loat color).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, // turn sRGB(color)
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, // ;.}.vec2 FBGamma
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // (const vec2 colo
	0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, // r).{.return vec2
	0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, // (FBGamma(color.x
	0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, // ),FBGamma(color.
	0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, // y));.}.vec3 FBGa
	0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, // mma(const vec3 c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // olor).{.return v
	0x65, 0x63, 0x33, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // ec3(FBGamma(colo
	0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, // r.x),FBGamma(col
	0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, // or.y),FBGamma(co
	0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // lor.z));.}.vec3 
	0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x32, 0x32, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // FBGamma22(const 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // vec3 color).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, // turn vec3(pow(co
	0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, // lor.x, 1.0/2.2),
	0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, 0x30, // pow(color.y, 1.0
	0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, // /2.2),pow(color.
	0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // z, 1.0/2.2));.}.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, // float FBToneMap(
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x29, 0x0a, 0x7b, // const float l).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6c, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, // .return l * ((l*
	0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, // 0.25 + 1.0) / (l
	0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, //  + 1.0));.}.vec2
	0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, //  FBToneMap(const
	0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x63, //  vec2 color).{.c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, // onst float l = d
	0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, // ot(color,vec2(0.
	0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, // 176204+0.0108109
	0x2a, 0x30, 0x2e, 0x35, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2b, 0x30, 0x2e, // *0.5,0.812985+0.
	0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x3b, 0x0a, 0x72, // 0108109*0.5));.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, // eturn color * ((
	0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, // l*0.25 + 1.0) / 
	0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // (l + 1.0));.}.ve
	0x63, 0x33, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, // c3 FBToneMap(con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, // st vec3 color).{
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, // .const float l =
	0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x33, 0x28, //  dot(color,vec3(
	0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, // 0.176204,0.81298
	0x35, 0x2c, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x29, 0x29, 0x3b, 0x0a, 0x72, // 5,0.0108109));.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, // eturn color * ((
	0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, // l*0.25 + 1.0) / 
	0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // (l + 1.0));.}.ve
	0x63, 0x34, 0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x28, 0x63, 0x6f, 0x6e, 0x73, // c4 Additive(cons
	0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, // t vec4 cBase, co
	0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, // nst vec4 cBlend,
	0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, //  const float per
	0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, // cent).{.return c
	0x42, 0x61, 0x73, 0x65, 0x20, 0x2b, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, // Base + cBlend*pe
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, // rcent;.}.vec3 Sc
	0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, // reen (const vec3
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, //  cBase, const ve
	0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // c3 cBlend).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, // urn 1.0 - (1.0 -
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, //  cBase) * (1.0 -
	0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, //  cBlend);.}.vec4
	0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, //  Screen (const v
	0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, // ec4 cBase, const
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, //  vec4 cBlend).{.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, // return 1.0 - (1.
	0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, // 0 - cBase) * (1.
	0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // 0 - cBlend);.}.v
	0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x63, // ec3 ScreenHDR (c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, // onst vec3 cBase,
	0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, //  const vec3 cBle
	0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, // nd).{.return max
	0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, // (1.0 - (1.0 - cB
	0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, // ase) * (1.0 - cB
	0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x2c, 0x30, // lend), vec3(0.,0
	0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, // .,0.));.}.vec4 S
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // creenHDR (const 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, // vec4 cBase, cons
	0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, // t vec4 cBlend).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, // .return max(1.0 
	0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, // - (1.0 - cBase) 
	0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, // * (1.0 - cBlend)
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, // , vec4(0.,0.,0.,
	0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4d, 0x75, 0x6c, // 0.));.}.vec4 Mul
	0x74, 0x69, 0x70, 0x6c, 0x79, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, // tiply (const vec
	0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, // 4 cBase, const v
	0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, // ec4 cBlend, cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, // t float percent)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, // .{.return cBase 
	0x2a, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, // * cBlend*percent
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, // ;.}.vec4 Overlay
	0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, //  (const vec4 cBa
	0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, // se, const vec4 c
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, // Blend).{.vec4 cN
	0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, // ew = step(0.5, c
	0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x69, // Base);.cNew = mi
	0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, // x(cBase*cBlend*2
	0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, // .0, 1.0-2.0*(1.0
	0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, // -cBase)*(1.0-cBl
	0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, // end), cNew);.ret
	0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, // urn cNew;.}.vec4
	0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x48, 0x44, 0x52, 0x20, 0x28, 0x63, 0x6f, 0x6e, //  OverlayHDR (con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, // st vec4 cBase, c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, // onst vec4 cBlend
	0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, // ).{.vec4 cNew = 
	0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, // step(0.5, cBase)
	0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x6d, 0x69, 0x78, // ;.cNew = max(mix
	0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, // (cBase*cBlend*2.
	0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, // 0, 1.0-2.0*(1.0-
	0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, // cBase)*(1.0-cBle
	0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // nd), cNew), vec4
	0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, // (0.,0.,0.,0.));.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // return cNew;.}.v
	0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x73, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, // ec3 cos_hemisphe
	0x72, 0x65, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // re_sample(const 
	0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // vec2 t).{.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x68, 0x69, 0x20, 0x3d, 0x20, 0x74, 0x2e, 0x79, 0x20, // float phi = t.y 
	0x2a, 0x20, 0x28, 0x32, 0x2e, 0x30, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, // * (2.0*3.1415926
	0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, // 5358979323846264
	0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, // 33832795);.const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, //  float cosTheta 
	0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x74, 0x2e, 0x78, // = sqrt(1.0 - t.x
	0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, // );.const float s
	0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x74, // inTheta = sqrt(t
	0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x70, 0x2c, 0x63, 0x70, // .x);.float sp,cp
	0x3b, 0x0a, 0x73, 0x69, 0x6e, 0x63, 0x6f, 0x73, 0x28, 0x70, 0x68, 0x69, 0x2c, 0x73, 0x70, 0x2c, // ;.sincos(phi,sp,
	0x63, 0x70, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, // cp);.return vec3
	0x28, 0x63, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, // (cp * sinTheta, 
	0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x73, 0x70, 0x20, 0x2a, 0x20, 0x73, // cosTheta, sp * s
	0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, // inTheta);.}.vec3
	0x20, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, //  rotate_to_vecto
	0x72, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // r_upper(const ve
	0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // c3 vec, const ve
	0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x28, // c3 normal).{.if(
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x3e, 0x20, 0x2d, 0x30, 0x2e, 0x39, 0x39, // normal.y > -0.99
	0x39, 0x39, 0x39, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, // 999).{.const flo
	0x61, 0x74, 0x20, 0x68, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x28, 0x31, 0x2e, 0x30, 0x2b, // at h = 1.0/(1.0+
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, // normal.y);.const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x20, 0x3d, 0x20, 0x68, 0x2a, 0x6e, 0x6f, //  float hz = h*no
	0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // rmal.z;.const fl
	0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x3d, 0x20, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, // oat hzx = hz*nor
	0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, // mal.x;.return ve
	0x63, 0x33, 0x28, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, // c3(.vec.x * (nor
	0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, // mal.y+hz*normal.
	0x7a, 0x29, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, // z) + vec.y * nor
	0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, // mal.x - vec.z * 
	0x68, 0x7a, 0x78, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, // hzx,.vec.y * nor
	0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, // mal.y - vec.x * 
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, // normal.x - vec.z
	0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x2c, 0x0a, 0x76, 0x65, 0x63, //  * normal.z,.vec
	0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x20, 0x2d, 0x20, // .y * normal.z - 
	0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x2b, 0x20, 0x76, 0x65, // vec.x * hzx + ve
	0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, // c.z * (normal.y+
	0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, // h*normal.x*norma
	0x6c, 0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x72, 0x65, // l.x));.}.else re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x2d, 0x76, 0x65, 0x63, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, // turn -vec;.}.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // form vec4 Stereo
	0x5f, 0x53, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x0a, 0x75, 0x6e, 0x69, // _Saturation;.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // form vec4 Stereo
	0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x3b, 0x0a, 0x75, // _MS_ZPD_YAxis;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, // niform sampler2D
	0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x3b, 0x0a, //  tex_stereo_fb;.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, // uniform sampler2
	0x44, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, // D tex_stereo_dep
	0x74, 0x68, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, // th;.uniform vec4
	0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, 0x76, 0x65, 0x63, //  w_h_height;.vec
	0x33, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, // 3 gatherEyeColor
	0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x69, 0x73, // (vec2 u, bool is
	0x4c, 0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x62, 0x6f, // Left).{.const bo
	0x6f, 0x6c, 0x20, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, // ol yaxis = (Ster
	0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, // eo_MS_ZPD_YAxis.
	0x7a, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // z != 0.);.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // float MaxSeparat
	0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, // ion = (Stereo_MS
	0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x69, // _ZPD_YAxis.x);.i
	0x66, 0x20, 0x28, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, // f (isLeft).{.con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, // st float lminDep
	0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, // th = min(min(tex
	0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // tureLod(tex_ster
	0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, // eo_depth, u + (y
	0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, // axis ? vec2(0.0,
	0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, //  0.500 * MaxSepa
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, // ration) : vec2(0
	0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, // .500 * MaxSepara
	0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, // tion, 0.0)), 0.0
	0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, // ).x,.textureLod(
	0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, // tex_stereo_depth
	0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, // , u + (yaxis ? v
	0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, // ec2(0.0, 0.666 *
	0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, //  MaxSeparation) 
	0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, // : vec2(0.666 * M
	0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, // axSeparation, 0.
	0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, // 0)), 0.0).x),.te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, // xtureLod(tex_ste
	0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, // reo_depth, u + (
	0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, // yaxis ? vec2(0.0
	0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, // , MaxSeparation)
	0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, //  : vec2( MaxSepa
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, // ration, 0.0)), 0
	0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x70, // .0).x);.float lp
	0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, // arallax = max(0.
	0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, // 0, w_h_height.w 
	0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, // + MaxSeparation 
	0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, // * (1.0 - 1.0 / (
	0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, // 0.5 + lminDepth 
	0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // * (1.0 / (Stereo
	0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, // _MS_ZPD_YAxis.y)
	0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, //  - 0.5))));.retu
	0x72, 0x6e, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, // rn textureLod(te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2b, // x_stereo_fb, u +
	0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, //  (yaxis ? vec2(0
	0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, // .0, -lparallax) 
	0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, // : vec2(lparallax
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, // , 0.0)), 0.0).xy
	0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // z;.}.else.{.cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, // t float rminDept
	0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, // h = min(min(text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // ureLod(tex_stere
	0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, // o_depth, u - (ya
	0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, // xis ? vec2(0.0, 
	0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, // 0.500 * MaxSepar
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, // ation) : vec2(0.
	0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // 500 * MaxSeparat
	0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // ion, 0.0)), 0.0)
	0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, // .x,.textureLod(t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, // ex_stereo_depth,
	0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, //  u - (yaxis ? ve
	0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, // c2(0.0, 0.666 * 
	0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, // MaxSeparation) :
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, //  vec2(0.666 * Ma
	0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, // xSeparation, 0.0
	0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, // )), 0.0).x),.tex
	0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // tureLod(tex_ster
	0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, // eo_depth, u - (y
	0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, // axis ? vec2(0.0,
	0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, //  MaxSeparation) 
	0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, // : vec2( MaxSepar
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, // ation, 0.0)), 0.
	0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x70, 0x61, // 0).x);.float rpa
	0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, // rallax = max(0.0
	0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, // , w_h_height.w +
	0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, //  MaxSeparation *
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, //  (1.0 - 1.0 / (0
	0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, // .5 + rminDepth *
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, //  (1.0 / (Stereo_
	0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, // MS_ZPD_YAxis.y) 
	0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // - 0.5))));.retur
	0x6e, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, // n textureLod(tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, // _stereo_fb, u - 
	0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, // (yaxis ? vec2(0.
	0x30, 0x2c, 0x20, 0x2d, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, // 0, -rparallax) :
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, //  vec2(rparallax,
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, //  0.0)), 0.0).xyz
	0x3b, 0x0a, 0x7d, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, // ;.}.}.void gathe
	0x72, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, // rLeftRightColors
	0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, // (vec2 u, out vec
	0x33, 0x20, 0x6c, 0x63, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, // 3 lcol, out vec3
	0x20, 0x72, 0x63, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x62, //  rcol).{.const b
	0x6f, 0x6f, 0x6c, 0x20, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, // ool yaxis = (Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, // reo_MS_ZPD_YAxis
	0x2e, 0x7a, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, // .z != 0.);.const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, //  float MaxSepara
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, // tion = (Stereo_M
	0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x3b, 0x0a, // S_ZPD_YAxis.x);.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x6d, 0x69, 0x6e, // const float lmin
	0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, // Depth = min(min(
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, // textureLod(tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, // tereo_depth, u +
	0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, //  (yaxis ? vec2(0
	0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, // .0, 0.500 * MaxS
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, // eparation) : vec
	0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // 2(0.500 * MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, // aration, 0.0)), 
	0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, // 0.0).x,.textureL
	0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, // od(tex_stereo_de
	0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, // pth, u + (yaxis 
	0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, // ? vec2(0.0, 0.66
	0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, // 6 * MaxSeparatio
	0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, // n) : vec2(0.666 
	0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, // * MaxSeparation,
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, //  0.0)), 0.0).x),
	0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, // .textureLod(tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, // stereo_depth, u 
	0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // + (yaxis ? vec2(
	0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // 0.0, MaxSeparati
	0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, // on) : vec2( MaxS
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, // eparation, 0.0))
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // , 0.0).x);.float
	0x20, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, //  lparallax = max
	0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, // (0.0, w_h_height
	0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // .w + MaxSeparati
	0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, // on * (1.0 - 1.0 
	0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, // / (0.5 + lminDep
	0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, // th * (1.0 / (Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, // reo_MS_ZPD_YAxis
	0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x6c, // .y) - 0.5))));.l
	0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, // col = textureLod
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, // (tex_stereo_fb, 
	0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, // u + (yaxis ? vec
	0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, // 2(0.0, -lparalla
	0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, // x) : vec2(lparal
	0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // lax, 0.0)), 0.0)
	0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, // .xyz;.const floa
	0x74, 0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, // t rminDepth = mi
	0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, // n(min(textureLod
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, // (tex_stereo_dept
	0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, // h, u - (yaxis ? 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, // vec2(0.0, 0.500 
	0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, // * MaxSeparation)
	0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, //  : vec2(0.500 * 
	0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, // MaxSeparation, 0
	0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, // .0)), 0.0).x,.te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, // xtureLod(tex_ste
	0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, // reo_depth, u - (
	0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, // yaxis ? vec2(0.0
	0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // , 0.666 * MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // aration) : vec2(
	0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, // 0.666 * MaxSepar
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, // ation, 0.0)), 0.
	0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, // 0).x),.textureLo
	0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, // d(tex_stereo_dep
	0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, // th, u - (yaxis ?
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, //  vec2(0.0, MaxSe
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, // paration) : vec2
	0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, // ( MaxSeparation,
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, //  0.0)), 0.0).x);
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, // .float rparallax
	0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, //  = max(0.0, w_h_
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, // height.w + MaxSe
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, // paration * (1.0 
	0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, // - 1.0 / (0.5 + r
	0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, // minDepth * (1.0 
	0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, // / (Stereo_MS_ZPD
	0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, // _YAxis.y) - 0.5)
	0x29, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, // )));.rcol = text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // ureLod(tex_stere
	0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, // o_fb, u - (yaxis
	0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x72, 0x70, //  ? vec2(0.0, -rp
	0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // arallax) : vec2(
	0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, // rparallax, 0.0))
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, // , 0.0).xyz;.}.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // iform mat4 Stere
	0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, // o_LeftMat;.unifo
	0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, // rm mat4 Stereo_R
	0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // ightMat;.uniform
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, //  vec4 Stereo_Lef
	0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, // tLuminance_Gamma
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, // ;.uniform vec4 S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, // tereo_RightLumin
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x3b, 0x0a, 0x76, // ance_DynDesat;.v
	0x6f, 0x69, 0x64, 0x20, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x65, 0x73, 0x61, 0x74, // oid DynamicDesat
	0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, // Anaglyph(const v
	0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // ec3 lCol, const 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, // vec3 rCol, out v
	0x65, 0x63, 0x33, 0x20, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, // ec3 lDesatCol, o
	0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, // ut vec3 rDesatCo
	0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // l).{.const float
	0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, //  left2LeftLum = 
	0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // dot(lCol, Stereo
	0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, // _LeftLuminance_G
	0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, // amma.xyz);.const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, //  float left2Righ
	0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, // tLum = dot(lCol,
	0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, //  Stereo_RightLum
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, // inance_DynDesat.
	0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, // xyz);.const floa
	0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, // t right2LeftLum 
	0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, // = dot(rCol, Ster
	0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, // eo_LeftLuminance
	0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, // _Gamma.xyz);.con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, // st float right2R
	0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, // ightLum = dot(rC
	0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, // ol, Stereo_Right
	0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, // Luminance_DynDes
	0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // at.xyz);.const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x6c, // loat leftLum = l
	0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x6c, 0x65, // eft2LeftLum + le
	0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, // ft2RightLum;.con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // st float rightLu
	0x6d, 0x20, 0x3d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, // m = right2LeftLu
	0x6d, 0x20, 0x2b, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, // m + right2RightL
	0x75, 0x6d, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // um;.const float 
	0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, // leftDesat = Ster
	0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, // eo_RightLuminanc
	0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, // e_DynDesat.w * a
	0x62, 0x73, 0x28, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // bs((left2LeftLum
	0x20, 0x2d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, //  - left2RightLum
	0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, // ) / (leftLum + 0
	0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // .0001));.const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x20, // loat rightDesat 
	0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // = Stereo_RightLu
	0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, // minance_DynDesat
	0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, // .w * abs((right2
	0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, // LeftLum - right2
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x72, 0x69, 0x67, // RightLum) / (rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, 0x29, // htLum + 0.0001))
	0x3b, 0x0a, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, // ;.lDesatCol = mi
	0x78, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, // x(lCol, vec3_spl
	0x61, 0x74, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x66, // at(leftLum), lef
	0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x72, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, // tDesat);.rDesatC
	0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, // ol = mix(rCol, v
	0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, // ec3_splat(rightL
	0x75, 0x6d, 0x29, 0x2c, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, // um), rightDesat)
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x41, // ;.}.vec3 LinearA
	0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // naglyph(const ve
	0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, // c3 lCol, const v
	0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // ec3 rCol).{.cons
	0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x28, // t vec3 color = (
	0x28, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, // ( (vec4(lCol, 1.
	0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, // )) * (Stereo_Lef
	0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x20, 0x28, 0x76, 0x65, 0x63, // tMat) ) + ( (vec
	0x34, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, // 4(rCol, 1.)) * (
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x29, // Stereo_RightMat)
	0x20, 0x29, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, //  )).rgb;.return 
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // color;.}.uniform
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, //  vec4 Stereo_Deg
	0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, // hostGamma;.unifo
	0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, // rm mat4 Stereo_D
	0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3b, 0x0a, 0x76, 0x65, // eghostFilter;.ve
	0x63, 0x33, 0x20, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, // c3 DeghostAnagly
	0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, // ph(const vec3 lC
	0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, // ol, const vec3 r
	0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, // Col).{.const vec
	0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, // 3 color = Linear
	0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, // Anaglyph(lCol, r
	0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, // Col);.return ( (
	0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // pow(color, Stere
	0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x72, // o_DeghostGamma.r
	0x67, 0x62, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x53, 0x74, 0x65, // gb)) * (mat3(Ste
	0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, // reo_DeghostFilte
	0x72, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // r[0].xyz, Stereo
	0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x31, // _DeghostFilter[1
	0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, // ].xyz, Stereo_De
	0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x32, 0x5d, 0x2e, 0x78, // ghostFilter[2].x
	0x79, 0x7a, 0x29, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x6d, // yz)) );.}.void m
	0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, // ain().{.vec3 lCo
	0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x3b, 0x0a, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, // l, rCol;.gatherL
	0x65, 0x66, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x28, 0x76, // eftRightColors(v
	0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2c, 0x20, 0x6c, 0x43, 0x6f, 0x6c, // _texcoord0, lCol
	0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, // , rCol);.bgfx_Fr
	0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x44, // agColor = vec4(D
	0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, // eghostAnaglyph(l
	0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, // Col, rCol), 1.0)
	0x3b, 0x0a, 0x7d, 0x0a, 0x00,                                                                   // ;.}..
};
static const uint8_t fs_pp_stereo_anaglyph_deghost_glsl[11431] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x94, 0x2c, // FSH.o.><.......,
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x34, 0x34, 0x30, 0x0a, 0x6f, // ..#version 440.o
	0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, // ut vec4 bgfx_Fra
	0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, // gColor;.#define 
	0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x62, 0x67, 0x66, // gl_FragColor bgf
	0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x0a, 0x23, 0x64, 0x65, 0x66, // x_FragColor.#def
	0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x20, 0x20, 0x20, // ine texture2D   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x0a, 0x23, //        texture.#
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, // define texture2D
	0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // Lod       textur
	0x65, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, // eLod.#define tex
	0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ture2DGrad      
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, // textureGrad.#def
	0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, // ine texture2DPro
	0x6a, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, // jLod   texturePr
	0x6f, 0x6a, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, // ojLod.#define te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, 0x20, // xture2DProjGrad 
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, //  textureProjGrad
	0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // .#define texture
	0x43, 0x75, 0x62, 0x65, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, // CubeLod     text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, // ureLod.#define t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, // extureCubeGrad  
	0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, //   textureGrad.#d
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x33, 0x44, 0x20, // efine texture3D 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, //          texture
	0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // .#define texture
	0x32, 0x44, 0x4c, 0x6f, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x20, 0x74, 0x65, 0x78, 0x74, // 2DLodOffset text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x0a, 0x23, 0x64, 0x65, // ureLodOffset.#de
	0x66, 0x69, 0x6e, 0x65, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x69, // fine attribute i
	0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, // n.#define varyin
	0x67, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x62, 0x67, 0x66, // g in.#define bgf
	0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, // xShadow2D(_sampl
	0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, // er, _coord)     
	0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, // vec4_splat(textu
	0x72, 0x65, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, // re(_sampler, _co
	0x6f, 0x72, 0x64, 0x29, 0x20, 0x29, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x62, // ord) ).#define b
	0x67, 0x66, 0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x28, // gfxShadow2DProj(
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, // _sampler, _coord
	0x29, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, // ) vec4_splat(tex
	0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // tureProj(_sample
	0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x29, 0x0a, 0x76, 0x61, 0x72, // r, _coord) ).var
	0x79, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, // ying vec2 v_texc
	0x6f, 0x6f, 0x72, 0x64, 0x30, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, // oord0;.vec3 inst
	0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, // Mul(vec3 _vec, m
	0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // at3 _mtx) { retu
	0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, // rn ( (_vec) * (_
	0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, // mtx) ); }.vec3 i
	0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, // nstMul(mat3 _mtx
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, // , vec3 _vec) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, // eturn ( (_mtx) *
	0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, //  (_vec) ); }.vec
	0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, // 4 instMul(vec4 _
	0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, // vec, mat4 _mtx) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, // { return ( (_vec
	0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, // ) * (_mtx) ); }.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, // vec4 instMul(mat
	0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, // 4 _mtx, vec4 _ve
	0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, // c) { return ( (_
	0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, // mtx) * (_vec) );
	0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, 0x70, 0x28, 0x66, 0x6c, 0x6f, //  }.float rcp(flo
	0x61, 0x74, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // at _a) { return 
	0x31, 0x2e, 0x30, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, // 1.0/_a; }.vec2 r
	0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // cp(vec2 _a) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, // turn vec2(1.0)/_
	0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, // a; }.vec3 rcp(ve
	0x63, 0x33, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // c3 _a) { return 
	0x76, 0x65, 0x63, 0x33, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, // vec3(1.0)/_a; }.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x61, // vec4 rcp(vec4 _a
	0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, // ) { return vec4(
	0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, // 1.0)/_a; }.vec2 
	0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, // vec2_splat(float
	0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, //  _x) { return ve
	0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, // c2(_x, _x); }.ve
	0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, // c3 vec3_splat(fl
	0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // oat _x) { return
	0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, //  vec3(_x, _x, _x
	0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, // ); }.vec4 vec4_s
	0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, // plat(float _x) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, //  return vec4(_x,
	0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, //  _x, _x, _x); }.
	0x75, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, // uvec2 uvec2_spla
	0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // t(uint _x) { ret
	0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, // urn uvec2(_x, _x
	0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, // ); }.uvec3 uvec3
	0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, // _splat(uint _x) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, // { return uvec3(_
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, // x, _x, _x); }.uv
	0x65, 0x63, 0x34, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, // ec4 uvec4_splat(
	0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, // uint _x) { retur
	0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, // n uvec4(_x, _x, 
	0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, // _x, _x); }.mat4 
	0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, // mtxFromRows(vec4
	0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, //  _0, vec4 _1, ve
	0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, // c4 _2, vec4 _3).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, // {.return transpo
	0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, // se(mat4(_0, _1, 
	0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, // _2, _3) );.}.mat
	0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, // 4 mtxFromCols(ve
	0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, // c4 _0, vec4 _1, 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, // vec4 _2, vec4 _3
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x28, // ).{.return mat4(
	0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x3b, // _0, _1, _2, _3);
	0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, // .}.mat3 mtxFromR
	0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, // ows(vec3 _0, vec
	0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, // 3 _1, vec3 _2).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, // .return transpos
	0x65, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, // e(mat3(_0, _1, _
	0x32, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, // 2) );.}.mat3 mtx
	0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, // FromCols(vec3 _0
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // , vec3 _1, vec3 
	0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, // _2).{.return mat
	0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x3b, 0x0a, 0x7d, // 3(_0, _1, _2);.}
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, // .uniform vec4 u_
	0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // viewRect;.unifor
	0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x54, 0x65, 0x78, // m vec4 u_viewTex
	0x65, 0x6c, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, // el;.uniform mat4
	0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, //  u_view;.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x3b, //  mat4 u_invView;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, // .uniform mat4 u_
	0x70, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, // proj;.uniform ma
	0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, // t4 u_invProj;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, // iform mat4 u_vie
	0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, // wProj;.uniform m
	0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, // at4 u_invViewPro
	0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, // j;.uniform mat4 
	0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, 0x3b, 0x0a, 0x75, 0x6e, 0x69, // u_model[32];.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, // form mat4 u_mode
	0x6c, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, // lView;.uniform m
	0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x50, // at4 u_modelViewP
	0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, // roj;.uniform vec
	0x34, 0x20, 0x75, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x66, 0x34, 0x3b, 0x0a, 0x66, // 4 u_alphaRef4;.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // loat sqr(const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // loat v).{.return
	0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x73, 0x71, 0x72, //  v*v;.}.vec2 sqr
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x29, 0x0a, 0x7b, // (const vec2 v).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // .return v*v;.}.v
	0x65, 0x63, 0x33, 0x20, 0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // ec3 sqr(const ve
	0x63, 0x33, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // c3 v).{.return v
	0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6d, 0x75, 0x6c, 0x5f, 0x77, // *v;.}.vec3 mul_w
	0x31, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x2c, 0x20, // 1(const vec3 v, 
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x29, 0x0a, 0x7b, 0x0a, // const mat4 m).{.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2e, 0x78, 0x2a, 0x6d, 0x5b, 0x30, 0x5d, 0x2e, // return v.x*m[0].
	0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x79, 0x2a, 0x6d, 0x5b, 0x31, 0x5d, 0x2e, // xyz + (v.y*m[1].
	0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x7a, 0x2a, 0x6d, 0x5b, 0x32, 0x5d, 0x2e, // xyz + (v.z*m[2].
	0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x6d, 0x5b, 0x33, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, // xyz + m[3].xyz))
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, // ;.}.float acos_a
	0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x63, 0x6f, 0x6e, 0x73, // pprox_divPI(cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, // t float v).{.con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, // st float x = abs
	0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, // (v);.if(1. - x <
	0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, // = 0.000061035156
	0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, // 25).return (v >=
	0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x3b, 0x0a, //  0.) ? 0. : 1.;.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, 0x20, // const float res 
	0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, // = ((-0.155972/3.
	0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, // 1415926535897932
	0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, // 384626433832795)
	0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, //  * x + (1.56467/
	0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, // 3.14159265358979
	0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, // 3238462643383279
	0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, // 5) ) * sqrt(1. -
	0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, //  x);.return (v >
	0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x31, 0x2e, // = 0.) ? res : 1.
	0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, //  - res;.}.float 
	0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, // atan2_approx_div
	0x32, 0x50, 0x49, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // 2PI(const float 
	0x79, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, // y, const float x
	0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // ).{.const float 
	0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x79, 0x29, 0x3b, 0x0a, // abs_y = abs(y);.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, // const float abs_
	0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x78, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x61, // x = abs(x);.if(a
	0x62, 0x73, 0x5f, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, // bs_x <= 0.000061
	0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x20, 0x26, 0x26, 0x20, 0x61, 0x62, 0x73, 0x5f, // 03515625 && abs_
	0x79, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, // y <= 0.000061035
	0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x30, 0x2e, // 15625).return 0.
	0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x20, // ;.const float r 
	0x3d, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2d, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, // = (abs_x - abs_y
	0x29, 0x20, 0x2f, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2b, 0x20, 0x61, 0x62, 0x73, // ) / (abs_x + abs
	0x5f, 0x79, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // _y);.const float
	0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, //  angle = ((x < 0
	0x2e, 0x29, 0x20, 0x3f, 0x20, 0x28, 0x33, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x20, 0x3a, 0x20, 0x28, // .) ? (3./8.) : (
	0x31, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x29, 0x0a, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x32, 0x31, 0x31, // 1./8.)).+ (0.211
	0x38, 0x36, 0x38, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, // 868 /(2.*3.14159
	0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, // 2653589793238462
	0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x72, 0x20, // 6433832795) * r 
	0x2a, 0x20, 0x72, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x39, 0x38, 0x37, 0x33, 0x30, 0x35, 0x20, 0x2f, // * r - 0.987305 /
	0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, // (2.*3.1415926535
	0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, // 8979323846264338
	0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, // 32795)) * ((x < 
	0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x72, 0x20, 0x3a, 0x20, 0x72, 0x29, 0x3b, 0x0a, 0x72, // 0.) ? -r : r);.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x79, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, // eturn (y < 0.) ?
	0x20, 0x2d, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3a, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x3b, //  -angle : angle;
	0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x73, 0x69, 0x6e, 0x5f, 0x61, 0x70, // .}.float asin_ap
	0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, // prox_divPI(const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, //  float v).{.cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, // t float x = abs(
	0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, // v);.if(1. - x <=
	0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, //  0.0000610351562
	0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, // 5).return (v >= 
	0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, // 0.) ? 0.5 : -0.5
	0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, // ;.const float re
	0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, // s = ((-0.155972/
	0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, // 3.14159265358979
	0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, // 3238462643383279
	0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, // 5) * x + (1.5646
	0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, // 7/3.141592653589
	0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, // 7932384626433832
	0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, // 795) ) * sqrt(1.
	0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, //  - x);.return (v
	0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x2d, 0x20, //  >= 0.) ? 0.5 - 
	0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x65, 0x73, // res : -0.5 + res
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x61, 0x79, 0x5f, 0x74, 0x6f, 0x5f, // ;.}.vec2 ray_to_
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, // equirectangular_
	0x75, 0x76, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x61, // uv(const vec3 ra
	0x79, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, // y).{.return vec2
	0x28, 0x0a, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, // (.0.5 + atan2_ap
	0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, // prox_div2PI(ray.
	0x79, 0x2c, 0x20, 0x72, 0x61, 0x79, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x61, 0x63, 0x6f, 0x73, 0x5f, // y, ray.x),.acos_
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, // approx_divPI(ray
	0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, // .z));.}.float In
	0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, // vsRGB(const floa
	0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, // t color).{.if (c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, 0x34, 0x35, 0x29, // olor <= 0.04045)
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, // .return color * 
	0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, // (1.0/12.92);.els
	0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, // e.return pow(col
	0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, // or * (1.0/1.055)
	0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, //  + (0.055/1.055)
	0x2c, 0x20, 0x32, 0x2e, 0x34, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // , 2.4);.}.float 
	0x49, 0x6e, 0x76, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // InvRec709(const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, // float color).{.i
	0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x38, // f (color <= 0.08
	0x31, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, // 1).return color 
	0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x34, 0x2e, 0x35, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, // * (1.0/4.5);.els
	0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, // e.return pow(col
	0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, // or * (1.0/1.099)
	0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, //  + (0.099/1.099)
	0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // , 1.0/0.45);.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, // loat InvGamma(co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, // nst float color)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, // .{.return InvsRG
	0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, // B(color);.}.vec3
	0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, //  InvGamma(const 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // vec3 color).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, // turn vec3(InvGam
	0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, // ma(color.x),InvG
	0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x49, 0x6e, // amma(color.y),In
	0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, // vGamma(color.z))
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x54, 0x6f, 0x6e, 0x65, // ;.}.vec3 InvTone
	0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, // Map(const vec3 c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // olor).{.const fl
	0x6f, 0x61, 0x74, 0x20, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x30, 0x2e, // oat inv_2bh = 0.
	0x35, 0x2f, 0x30, 0x2e, 0x32, 0x35, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // 5/0.25;.const fl
	0x6f, 0x61, 0x74, 0x20, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x34, 0x2e, 0x30, 0x2a, 0x30, 0x2e, 0x32, // oat bh = 4.0*0.2
	0x35, 0x20, 0x2d, 0x20, 0x32, 0x2e, 0x30, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // 5 - 2.0;.return 
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2b, 0x20, 0x73, // (color - 1.0 + s
	0x71, 0x72, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2a, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // qrt(color*(color
	0x20, 0x2b, 0x20, 0x62, 0x68, 0x29, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x2a, 0x69, //  + bh) + 1.0))*i
	0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // nv_2bh;.}.float 
	0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // sRGB(const float
	0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, //  f).{.float s;.i
	0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x33, 0x31, 0x33, 0x30, // f (f <= 0.003130
	0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x20, 0x2a, 0x20, 0x66, // 8).s = 12.92 * f
	0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x35, 0x35, // ;.else.s = 1.055
	0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, //  * pow(f, 1.0/2.
	0x34, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // 4) - 0.055;.retu
	0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x52, 0x65, // rn s;.}.float Re
	0x63, 0x37, 0x30, 0x39, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // c709(const float
	0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, //  f).{.float s;.i
	0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, 0x29, 0x0a, 0x73, // f (f <= 0.018).s
	0x20, 0x3d, 0x20, 0x34, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, //  = 4.5 * f;.else
	0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, // .s = 1.099 * pow
	0x28, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x39, // (f, 0.45) - 0.09
	0x39, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // 9;.return s;.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, // loat FBGamma(con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, // st float color).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, // {.return sRGB(co
	0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x47, // lor);.}.vec2 FBG
	0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, // amma(const vec2 
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // color).{.return 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, // vec2(FBGamma(col
	0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, // or.x),FBGamma(co
	0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // lor.y));.}.vec3 
	0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // FBGamma(const ve
	0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, // c3 color).{.retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, // rn vec3(FBGamma(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, // color.x),FBGamma
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, // (color.y),FBGamm
	0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // a(color.z));.}.v
	0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x32, 0x32, 0x28, 0x63, 0x6f, // ec3 FBGamma22(co
	0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, // nst vec3 color).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x70, 0x6f, // {.return vec3(po
	0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, // w(color.x, 1.0/2
	0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x2c, // .2),pow(color.y,
	0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, //  1.0/2.2),pow(co
	0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x29, // lor.z, 1.0/2.2))
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, // ;.}.float FBTone
	0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // Map(const float 
	0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6c, 0x20, 0x2a, 0x20, // l).{.return l * 
	0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, // ((l*0.25 + 1.0) 
	0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // / (l + 1.0));.}.
	0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x63, // vec2 FBToneMap(c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, // onst vec2 color)
	0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, // .{.const float l
	0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, //  = dot(color,vec
	0x32, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, // 2(0.176204+0.010
	0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, // 8109*0.5,0.81298
	0x35, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x29, // 5+0.0108109*0.5)
	0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, // );.return color 
	0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, // * ((l*0.25 + 1.0
	0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, // ) / (l + 1.0));.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, // }.vec3 FBToneMap
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // (const vec3 colo
	0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // r).{.const float
	0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, //  l = dot(color,v
	0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2c, 0x30, 0x2e, 0x38, // ec3(0.176204,0.8
	0x31, 0x32, 0x39, 0x38, 0x35, 0x2c, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x29, // 12985,0.0108109)
	0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, // );.return color 
	0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, // * ((l*0.25 + 1.0
	0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, // ) / (l + 1.0));.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x28, // }.vec4 Additive(
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, // const vec4 cBase
	0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, // , const vec4 cBl
	0x65, 0x6e, 0x64, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // end, const float
	0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, //  percent).{.retu
	0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2b, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // rn cBase + cBlen
	0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // d*percent;.}.vec
	0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // 3 Screen (const 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, // vec3 cBase, cons
	0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, // t vec3 cBlend).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, // .return 1.0 - (1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, // .0 - cBase) * (1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // .0 - cBlend);.}.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6e, // vec4 Screen (con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, // st vec4 cBase, c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, // onst vec4 cBlend
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, // ).{.return 1.0 -
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, //  (1.0 - cBase) *
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, //  (1.0 - cBlend);
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, // .}.vec3 ScreenHD
	0x52, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, // R (const vec3 cB
	0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // ase, const vec3 
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // cBlend).{.return
	0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, //  max(1.0 - (1.0 
	0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, // - cBase) * (1.0 
	0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, // - cBlend), vec3(
	0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // 0.,0.,0.));.}.ve
	0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x63, 0x6f, // c4 ScreenHDR (co
	0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, // nst vec4 cBase, 
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // const vec4 cBlen
	0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, // d).{.return max(
	0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, // 1.0 - (1.0 - cBa
	0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, // se) * (1.0 - cBl
	0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, // end), vec4(0.,0.
	0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, // ,0.,0.));.}.vec4
	0x20, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, //  Multiply (const
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, //  vec4 cBase, con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, // st vec4 cBlend, 
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, // const float perc
	0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, // ent).{.return cB
	0x61, 0x73, 0x65, 0x20, 0x2a, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, // ase * cBlend*per
	0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, // cent;.}.vec4 Ove
	0x72, 0x6c, 0x61, 0x79, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, // rlay (const vec4
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, //  cBase, const ve
	0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, // c4 cBlend).{.vec
	0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, // 4 cNew = step(0.
	0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, // 5, cBase);.cNew 
	0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, // = mix(cBase*cBle
	0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, // nd*2.0, 1.0-2.0*
	0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, // (1.0-cBase)*(1.0
	0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x3b, // -cBlend), cNew);
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, // .return cNew;.}.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x48, 0x44, 0x52, 0x20, // vec4 OverlayHDR 
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, // (const vec4 cBas
	0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // e, const vec4 cB
	0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, // lend).{.vec4 cNe
	0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, // w = step(0.5, cB
	0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, // ase);.cNew = max
	0x28, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, // (mix(cBase*cBlen
	0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, // d*2.0, 1.0-2.0*(
	0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, // 1.0-cBase)*(1.0-
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x2c, 0x20, // cBlend), cNew), 
	0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, // vec4(0.,0.,0.,0.
	0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, // ));.return cNew;
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x73, 0x5f, 0x68, 0x65, 0x6d, 0x69, // .}.vec3 cos_hemi
	0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x63, 0x6f, // sphere_sample(co
	0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, // nst vec2 t).{.co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x68, 0x69, 0x20, 0x3d, 0x20, // nst float phi = 
	0x74, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x28, 0x32, 0x2e, 0x30, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, // t.y * (2.0*3.141
	0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, // 5926535897932384
	0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x3b, 0x0a, 0x63, // 626433832795);.c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, // onst float cosTh
	0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, // eta = sqrt(1.0 -
	0x20, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, //  t.x);.const flo
	0x61, 0x74, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, // at sinTheta = sq
	0x72, 0x74, 0x28, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, // rt(t.x);.float s
	0x70, 0x2c, 0x63, 0x70, 0x3b, 0x0a, 0x73, 0x69, 0x6e, 0x63, 0x6f, 0x73, 0x28, 0x70, 0x68, 0x69, // p,cp;.sincos(phi
	0x2c, 0x73, 0x70, 0x2c, 0x63, 0x70, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // ,sp,cp);.return 
	0x76, 0x65, 0x63, 0x33, 0x28, 0x63, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, // vec3(cp * sinThe
	0x74, 0x61, 0x2c, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x73, 0x70, // ta, cosTheta, sp
	0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, //  * sinTheta);.}.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x76, // vec3 rotate_to_v
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, // ector_upper(cons
	0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, // t vec3 vec, cons
	0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x29, 0x0a, 0x7b, // t vec3 normal).{
	0x0a, 0x69, 0x66, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x3e, 0x20, 0x2d, // .if(normal.y > -
	0x30, 0x2e, 0x39, 0x39, 0x39, 0x39, 0x39, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, // 0.99999).{.const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x28, //  float h = 1.0/(
	0x31, 0x2e, 0x30, 0x2b, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x63, // 1.0+normal.y);.c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x20, 0x3d, 0x20, // onst float hz = 
	0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // h*normal.z;.cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x3d, 0x20, 0x68, 0x7a, // t float hzx = hz
	0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // *normal.x;.retur
	0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, // n vec3(.vec.x * 
	0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, // (normal.y+hz*nor
	0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x29, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, // mal.z) + vec.y *
	0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, //  normal.x - vec.
	0x7a, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, // z * hzx,.vec.y *
	0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, //  normal.y - vec.
	0x78, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, // x * normal.x - v
	0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x2c, // ec.z * normal.z,
	0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, // .vec.y * normal.
	0x7a, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x20, // z - vec.x * hzx 
	0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, // + vec.z * (norma
	0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x2a, 0x6e, // l.y+h*normal.x*n
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, // ormal.x));.}.els
	0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x2d, 0x76, 0x65, 0x63, 0x3b, 0x0a, 0x7d, // e return -vec;.}
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, // .uniform vec4 St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x53, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3b, // ereo_Saturation;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, // .uniform vec4 St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, // ereo_MS_ZPD_YAxi
	0x73, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, // s;.uniform sampl
	0x65, 0x72, 0x32, 0x44, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // er2D tex_stereo_
	0x66, 0x62, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, // fb;.uniform samp
	0x6c, 0x65, 0x72, 0x32, 0x44, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // ler2D tex_stereo
	0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // _depth;.uniform 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, // vec4 w_h_height;
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, // .vec3 gatherEyeC
	0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x62, 0x6f, 0x6f, // olor(vec2 u, boo
	0x6c, 0x20, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // l isLeft).{.cons
	0x74, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3d, 0x20, 0x28, // t bool yaxis = (
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, // Stereo_MS_ZPD_YA
	0x78, 0x69, 0x73, 0x2e, 0x7a, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x3b, 0x0a, 0x63, 0x6f, // xis.z != 0.);.co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // nst float MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, // aration = (Stere
	0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, // o_MS_ZPD_YAxis.x
	0x29, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, // );.if (isLeft).{
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x6d, 0x69, // .const float lmi
	0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, // nDepth = min(min
	0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, // (textureLod(tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, // stereo_depth, u 
	0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // + (yaxis ? vec2(
	0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, // 0.0, 0.500 * Max
	0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, // Separation) : ve
	0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, // c2(0.500 * MaxSe
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, // paration, 0.0)),
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, //  0.0).x,.texture
	0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, // Lod(tex_stereo_d
	0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, // epth, u + (yaxis
	0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, //  ? vec2(0.0, 0.6
	0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // 66 * MaxSeparati
	0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, // on) : vec2(0.666
	0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, //  * MaxSeparation
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, // , 0.0)), 0.0).x)
	0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, // ,.textureLod(tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, // _stereo_depth, u
	0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, //  + (yaxis ? vec2
	0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // (0.0, MaxSeparat
	0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, // ion) : vec2( Max
	0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // Separation, 0.0)
	0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // ), 0.0).x);.floa
	0x74, 0x20, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, // t lparallax = ma
	0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, // x(0.0, w_h_heigh
	0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // t.w + MaxSeparat
	0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, // ion * (1.0 - 1.0
	0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, //  / (0.5 + lminDe
	0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, // pth * (1.0 / (St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, // ereo_MS_ZPD_YAxi
	0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, // s.y) - 0.5))));.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, // return textureLo
	0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, // d(tex_stereo_fb,
	0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, //  u + (yaxis ? ve
	0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, // c2(0.0, -lparall
	0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x6c, 0x70, 0x61, 0x72, 0x61, // ax) : vec2(lpara
	0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, // llax, 0.0)), 0.0
	0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x7b, 0x0a, // ).xyz;.}.else.{.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x6d, 0x69, 0x6e, // const float rmin
	0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, // Depth = min(min(
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, // textureLod(tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, // tereo_depth, u -
	0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, //  (yaxis ? vec2(0
	0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, // .0, 0.500 * MaxS
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, // eparation) : vec
	0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // 2(0.500 * MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, // aration, 0.0)), 
	0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, // 0.0).x,.textureL
	0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, // od(tex_stereo_de
	0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, // pth, u - (yaxis 
	0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, // ? vec2(0.0, 0.66
	0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, // 6 * MaxSeparatio
	0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, // n) : vec2(0.666 
	0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, // * MaxSeparation,
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, //  0.0)), 0.0).x),
	0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, // .textureLod(tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, // stereo_depth, u 
	0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // - (yaxis ? vec2(
	0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // 0.0, MaxSeparati
	0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, // on) : vec2( MaxS
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, // eparation, 0.0))
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // , 0.0).x);.float
	0x20, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, //  rparallax = max
	0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, // (0.0, w_h_height
	0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // .w + MaxSeparati
	0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, // on * (1.0 - 1.0 
	0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, // / (0.5 + rminDep
	0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, // th * (1.0 / (Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, // reo_MS_ZPD_YAxis
	0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x72, // .y) - 0.5))));.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, // eturn textureLod
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, // (tex_stereo_fb, 
	0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, // u - (yaxis ? vec
	0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, // 2(0.0, -rparalla
	0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, // x) : vec2(rparal
	0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // lax, 0.0)), 0.0)
	0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x67, // .xyz;.}.}.void g
	0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, // atherLeftRightCo
	0x6c, 0x6f, 0x72, 0x73, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x6f, 0x75, 0x74, // lors(vec2 u, out
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x63, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, //  vec3 lcol, out 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, // vec3 rcol).{.con
	0x73, 0x74, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3d, 0x20, // st bool yaxis = 
	0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, // (Stereo_MS_ZPD_Y
	0x41, 0x78, 0x69, 0x73, 0x2e, 0x7a, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x3b, 0x0a, 0x63, // Axis.z != 0.);.c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, // onst float MaxSe
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, // paration = (Ster
	0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, // eo_MS_ZPD_YAxis.
	0x78, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // x);.const float 
	0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, // lminDepth = min(
	0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, // min(textureLod(t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, // ex_stereo_depth,
	0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, //  u + (yaxis ? ve
	0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, // c2(0.0, 0.500 * 
	0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, // MaxSeparation) :
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, //  vec2(0.500 * Ma
	0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, // xSeparation, 0.0
	0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, // )), 0.0).x,.text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // ureLod(tex_stere
	0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, // o_depth, u + (ya
	0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, // xis ? vec2(0.0, 
	0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, // 0.666 * MaxSepar
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, // ation) : vec2(0.
	0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // 666 * MaxSeparat
	0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // ion, 0.0)), 0.0)
	0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, // .x),.textureLod(
	0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, // tex_stereo_depth
	0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, // , u + (yaxis ? v
	0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, // ec2(0.0, MaxSepa
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x20, // ration) : vec2( 
	0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, // MaxSeparation, 0
	0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, // .0)), 0.0).x);.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, // loat lparallax =
	0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, //  max(0.0, w_h_he
	0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, // ight.w + MaxSepa
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, // ration * (1.0 - 
	0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x6c, 0x6d, 0x69, // 1.0 / (0.5 + lmi
	0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, // nDepth * (1.0 / 
	0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, // (Stereo_MS_ZPD_Y
	0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, // Axis.y) - 0.5)))
	0x29, 0x3b, 0x0a, 0x6c, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // );.lcol = textur
	0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // eLod(tex_stereo_
	0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, // fb, u + (yaxis ?
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x6c, 0x70, 0x61, 0x72, //  vec2(0.0, -lpar
	0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x6c, 0x70, // allax) : vec2(lp
	0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, // arallax, 0.0)), 
	0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // 0.0).xyz;.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, // float rminDepth 
	0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // = min(min(textur
	0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // eLod(tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, // depth, u - (yaxi
	0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, // s ? vec2(0.0, 0.
	0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // 500 * MaxSeparat
	0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, // ion) : vec2(0.50
	0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, // 0 * MaxSeparatio
	0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, // n, 0.0)), 0.0).x
	0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, // ,.textureLod(tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, // _stereo_depth, u
	0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, //  - (yaxis ? vec2
	0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, // (0.0, 0.666 * Ma
	0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, // xSeparation) : v
	0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, // ec2(0.666 * MaxS
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, // eparation, 0.0))
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, // , 0.0).x),.textu
	0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // reLod(tex_stereo
	0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, // _depth, u - (yax
	0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, // is ? vec2(0.0, M
	0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, // axSeparation) : 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // vec2( MaxSeparat
	0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // ion, 0.0)), 0.0)
	0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x70, 0x61, 0x72, 0x61, // .x);.float rpara
	0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, // llax = max(0.0, 
	0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, // w_h_height.w + M
	0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, // axSeparation * (
	0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, // 1.0 - 1.0 / (0.5
	0x20, 0x2b, 0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, //  + rminDepth * (
	0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, // 1.0 / (Stereo_MS
	0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, // _ZPD_YAxis.y) - 
	0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, // 0.5))));.rcol = 
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, // textureLod(tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, // tereo_fb, u - (y
	0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, // axis ? vec2(0.0,
	0x20, 0x2d, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, //  -rparallax) : v
	0x65, 0x63, 0x32, 0x28, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, // ec2(rparallax, 0
	0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, // .0)), 0.0).xyz;.
	0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, // }.uniform mat4 S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, // tereo_LeftMat;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, // niform mat4 Ster
	0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, // eo_RightMat;.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // form vec4 Stereo
	0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, // _LeftLuminance_G
	0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, // amma;.uniform ve
	0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, // c4 Stereo_RightL
	0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, // uminance_DynDesa
	0x74, 0x3b, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, // t;.void DynamicD
	0x65, 0x73, 0x61, 0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, // esatAnaglyph(con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, // st vec3 lCol, co
	0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, // nst vec3 rCol, o
	0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, // ut vec3 lDesatCo
	0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x44, 0x65, 0x73, // l, out vec3 rDes
	0x61, 0x74, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // atCol).{.const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, // loat left2LeftLu
	0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, // m = dot(lCol, St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, // ereo_LeftLuminan
	0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, // ce_Gamma.xyz);.c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, // onst float left2
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, // RightLum = dot(l
	0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, // Col, Stereo_Righ
	0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, // tLuminance_DynDe
	0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // sat.xyz);.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, // float right2Left
	0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // Lum = dot(rCol, 
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, // Stereo_LeftLumin
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, // ance_Gamma.xyz);
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, // .const float rig
	0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, // ht2RightLum = do
	0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, // t(rCol, Stereo_R
	0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, // ightLuminance_Dy
	0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, // nDesat.xyz);.con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // st float leftLum
	0x20, 0x3d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, //  = left2LeftLum 
	0x2b, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, // + left2RightLum;
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, // .const float rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, // htLum = right2Le
	0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, // ftLum + right2Ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // ghtLum;.const fl
	0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, // oat leftDesat = 
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, // Stereo_RightLumi
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, // nance_DynDesat.w
	0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, //  * abs((left2Lef
	0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, // tLum - left2Righ
	0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // tLum) / (leftLum
	0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, //  + 0.0001));.con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, // st float rightDe
	0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, // sat = Stereo_Rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, // htLuminance_DynD
	0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x72, 0x69, // esat.w * abs((ri
	0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x72, 0x69, // ght2LeftLum - ri
	0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, // ght2RightLum) / 
	0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, // (rightLum + 0.00
	0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, // 01));.lDesatCol 
	0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, // = mix(lCol, vec3
	0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, // _splat(leftLum),
	0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x72, 0x44, 0x65, //  leftDesat);.rDe
	0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x72, 0x43, 0x6f, // satCol = mix(rCo
	0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x72, 0x69, // l, vec3_splat(ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, // ghtLum), rightDe
	0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x4c, 0x69, 0x6e, // sat);.}.vec3 Lin
	0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, // earAnaglyph(cons
	0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, // t vec3 lCol, con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, // st vec3 rCol).{.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // const vec3 color
	0x20, 0x3d, 0x20, 0x28, 0x28, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x6c, 0x43, 0x6f, 0x6c, //  = (( (vec4(lCol
	0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // , 1.)) * (Stereo
	0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x20, // _LeftMat) ) + ( 
	0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, // (vec4(rCol, 1.))
	0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, //  * (Stereo_Right
	0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x72, 0x65, 0x74, // Mat) )).rgb;.ret
	0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, // urn color;.}.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // form vec4 Stereo
	0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, // _DeghostGamma;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, // niform mat4 Ster
	0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, // eo_DeghostFilter
	0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x6e, // ;.vec3 DeghostAn
	0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, // aglyph(const vec
	0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // 3 lCol, const ve
	0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, // c3 rCol).{.const
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, //  vec3 color = Li
	0x6e, 0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, // nearAnaglyph(lCo
	0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // l, rCol);.return
	0x20, 0x28, 0x20, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x53, //  ( (pow(color, S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, // tereo_DeghostGam
	0x6d, 0x61, 0x2e, 0x72, 0x67, 0x62, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x6d, 0x61, 0x74, 0x33, // ma.rgb)) * (mat3
	0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, // (Stereo_DeghostF
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, // ilter[0].xyz, St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, // ereo_DeghostFilt
	0x65, 0x72, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // er[1].xyz, Stere
	0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, // o_DeghostFilter[
	0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, // 2].xyz)) );.}.vo
	0x69, 0x64, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, // id main().{.vec3
	0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x3b, 0x0a, 0x67, 0x61, 0x74, //  lCol, rCol;.gat
	0x68, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, // herLeftRightColo
	0x72, 0x73, 0x28, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2c, 0x20, // rs(v_texcoord0, 
	0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x67, 0x6c, 0x5f, // lCol, rCol);.gl_
	0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, // FragColor = vec4
	0x28, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, // (DeghostAnaglyph
	0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x2c, 0x20, 0x31, 0x2e, // (lCol, rCol), 1.
	0x30, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x00,                                                       // 0);.}..
};
static const uint8_t fs_pp_stereo_anaglyph_deghost_dx11[2595] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x13, 0x53, // FSH.o.><.......S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, // tereo_MS_ZPD_YAx
	0x69, 0x73, 0x12, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x77, 0x5f, 0x68, // is...........w_h
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, // _height.........
	0x00, 0x0e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, // ..Stereo_LeftMat
	0x14, 0x00, 0x20, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x53, 0x74, 0x65, 0x72, 0x65, // .. ........Stere
	0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x00, 0x60, 0x00, 0x04, 0x00, // o_RightMat..`...
	0x00, 0x00, 0x00, 0x00, 0x13, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, // .....Stereo_Degh
	0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x12, 0x00, 0xa0, 0x00, 0x01, 0x00, 0x00, 0x00, // ostGamma........
	0x00, 0x00, 0x14, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, // ...Stereo_Deghos
	0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x14, 0x00, 0xb0, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, // tFilter.........
	0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x30, // ..tex_stereo_fb0
	0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // ..........tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x30, 0x01, 0x01, 0x00, 0x01, 0x00, // ereo_depth0.....
	0x00, 0x00, 0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // .....tex_stereo_
	0x66, 0x62, 0x30, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x74, 0x65, 0x78, // fb0..........tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x30, 0x01, 0x01, // _stereo_depth0..
	0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x09, 0x00, 0x00, 0x44, 0x58, 0x42, 0x43, 0x40, // ...........DXBC@
	0xc3, 0x36, 0x80, 0x8c, 0xfe, 0xd2, 0x70, 0xba, 0xfe, 0x91, 0x0e, 0x4d, 0xb6, 0xb3, 0xca, 0x01, // .6....p....M....
	0x00, 0x00, 0x00, 0x04, 0x09, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x84, // ...........,....
	0x00, 0x00, 0x00, 0xb8, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x4e, 0x50, 0x00, 0x00, 0x00, 0x02, // .......ISGNP....
	0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, // .......8........
	0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x44, // ...............D
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, // .......SV_POSITI
	0x4f, 0x4e, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0xab, 0xab, 0xab, 0x4f, // ON.TEXCOORD....O
	0x53, 0x47, 0x4e, 0x2c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x20, // SGN,........... 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, // .......SV_TARGET
	0x00, 0xab, 0xab, 0x53, 0x48, 0x45, 0x58, 0x44, 0x08, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x11, // ...SHEXD...P....
	0x02, 0x00, 0x00, 0x6a, 0x08, 0x00, 0x01, 0x59, 0x00, 0x00, 0x04, 0x46, 0x8e, 0x20, 0x00, 0x00, // ...j...Y...F. ..
	0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x03, 0x00, 0x60, 0x10, 0x00, 0x00, // .......Z....`...
	0x00, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x03, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x58, // ...Z....`......X
	0x18, 0x00, 0x04, 0x00, 0x70, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x55, 0x00, 0x00, 0x58, // ....p......UU..X
	0x18, 0x00, 0x04, 0x00, 0x70, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x55, 0x55, 0x00, 0x00, 0x62, // ....p......UU..b
	0x10, 0x00, 0x03, 0x32, 0x10, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x03, 0xf2, // ...2.......e....
	0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x02, 0x05, 0x00, 0x00, 0x00, 0x36, //  ......h.......6
	0x00, 0x00, 0x08, 0x52, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, // ...R........@...
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, // ...............8
	0x00, 0x00, 0x0b, 0xa2, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x80, 0x20, 0x00, 0x00, // ............. ..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........@.......
	0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x7e, 0x2a, 0x3f, 0x39, 0x00, 0x00, 0x08, 0x12, // ..?.....~*?9....
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .......*. ......
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x09, 0xf2, // ....@......7....
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, // ...............F
	0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x0b, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x07, 0xf2, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, // ...........F....
	0x00, 0x00, 0x00, 0x46, 0x14, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0xf2, // ...F............
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x00, // .......F...A....
	0x00, 0x00, 0x00, 0x46, 0x14, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, // ...F.......H....
	0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, // ...CU..".......F
	0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x16, 0x7e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, // ........~.......
	0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, // `.......@......H
	0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x42, 0x00, 0x10, 0x00, 0x01, // .......CU..B....
	0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x96, 0x7c, 0x10, 0x00, 0x01, // ............|...
	0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, // ....`.......@...
	0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x07, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2a, // ...3...".......*
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x36, // ...............6
	0x00, 0x00, 0x06, 0x22, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0a, 0x80, 0x20, 0x00, 0x00, // ..."......... ..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x08, 0x52, 0x00, 0x10, 0x00, 0x02, // .......6...R....
	0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ....@...........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x09, 0xc2, 0x00, 0x10, 0x00, 0x01, // .......7........
	0x00, 0x00, 0x00, 0x06, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x04, 0x10, 0x00, 0x02, // ................
	0x00, 0x00, 0x00, 0x56, 0x01, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x32, // ...V...........2
	0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, // ...............F
	0x10, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0xc2, 0x00, 0x10, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0xa6, 0x0e, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, // .......A........
	0x14, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, // .......H.......C
	0x55, 0x15, 0x00, 0x42, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x01, // U..B............
	0x00, 0x00, 0x00, 0x96, 0x7c, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, // ....|.......`...
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, // ....@......H....
	0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x82, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, // ...CU..........F
	0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x96, 0x73, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, // ........s.......
	0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, // `.......@......3
	0x00, 0x00, 0x07, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x01, // ...".......:....
	0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x0b, 0x82, // ................
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, // ........@.....?.
	0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x1a, 0x80, 0x20, 0x00, 0x00, // ..?...?...?.. ..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x82, 0x00, 0x10, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, // ...:........@...
	0x00, 0x00, 0xbf, 0x32, 0x00, 0x00, 0x09, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, // ...2..."........
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, // .......:........
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x0e, 0x00, 0x00, 0x0a, 0x22, 0x00, 0x10, 0x00, 0x01, // @.....?...."....
	0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, // ....@.....?...?.
	0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, // ..?...?.........
	0x00, 0x00, 0x08, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x80, 0x41, // ..."...........A
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x32, // ........@.....?2
	0x00, 0x00, 0x0b, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, 0x80, 0x20, 0x00, 0x00, // ..."......... ..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3a, // ...............:
	0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x07, 0x12, // . .........4....
	0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, // ................
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x06, 0x82, 0x00, 0x10, 0x00, 0x02, // @......6........
	0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x36, // .......A.......6
	0x00, 0x00, 0x08, 0x62, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, // ...b........@...
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, // ...............7
	0x00, 0x00, 0x09, 0x32, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x06, 0x00, 0x10, 0x00, 0x01, // ...2............
	0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x03, // ...........F....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x32, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, // .......2.......F
	0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x10, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x48, // .......F.......H
	0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x72, 0x00, 0x10, 0x00, 0x02, // .......CU..r....
	0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, 0x00, // ...F.......F~...
	0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, // ....`.......@...
	0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x82, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, // ...6............
	0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x11, 0x00, 0x00, 0x08, 0x12, 0x00, 0x10, 0x00, 0x04, // @.....?.........
	0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, // ...F.......F. ..
	0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x08, 0x22, 0x00, 0x10, 0x00, 0x04, // ..........."....
	0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, // ...F.......F. ..
	0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x08, 0x42, 0x00, 0x10, 0x00, 0x04, // ...........B....
	0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, // ...F.......F. ..
	0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, // .......H.......C
	0x55, 0x15, 0x00, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x00, // U..........F....
	0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, // ...F~.......`...
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, // ....@......H....
	0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x22, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe6, // ...CU.."........
	0x0a, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x7e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, // ........~.......
	0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, // `.......@......3
	0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x07, 0x12, // ...........3....
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, // .......*........
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x09, 0x12, 0x00, 0x10, 0x00, 0x00, // .......2........
	0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x01, // ...........:....
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x0e, 0x00, 0x00, 0x0a, 0x12, // ....@.....?.....
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, // ........@.....?.
	0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x0a, 0x00, 0x10, 0x00, 0x00, // ..?...?...?.....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, // ................
	0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, // ...A........@...
	0x00, 0x80, 0x3f, 0x32, 0x00, 0x00, 0x0b, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, // ..?2............
	0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, // . ..............
	0x00, 0x00, 0x00, 0x3a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x34, // ...:. .........4
	0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x06, 0x82, // ....@......6....
	0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x00, // ...........A....
	0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x22, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, // ...6..."........
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x09, 0x32, 0x00, 0x10, 0x00, 0x00, // @......7...2....
	0x00, 0x00, 0x00, 0x06, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x03, // ................
	0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x32, // ...F...........2
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x00, // .......F...A....
	0x00, 0x00, 0x00, 0x46, 0x10, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, // ...F.......H....
	0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, // ...CU..r.......F
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .......F~.......
	0x60, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, // `.......@......6
	0x00, 0x00, 0x05, 0x82, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, // ............@...
	0x00, 0x80, 0x3f, 0x11, 0x00, 0x00, 0x08, 0x12, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, // ..?............F
	0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, // .......F. ......
	0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x08, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, // .......".......F
	0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, // .......F. ......
	0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x08, 0x42, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, // .......B.......F
	0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, // .......F. ......
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, // .......r.......F
	0x02, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x2f, // .......F......./
	0x00, 0x00, 0x05, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, // ...r.......F....
	0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x08, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, // ...8...r.......F
	0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x82, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, // .......F. ......
	0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x05, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, // .......r.......F
	0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x08, 0x12, 0x20, 0x10, 0x00, 0x00, // ............ ...
	0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x82, 0x20, 0x00, 0x00, // ...F.......F. ..
	0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x08, 0x22, 0x20, 0x10, 0x00, 0x00, // ..........." ...
	0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x82, 0x20, 0x00, 0x00, // ...F.......F. ..
	0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x08, 0x42, 0x20, 0x10, 0x00, 0x00, // ...........B ...
	0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x82, 0x20, 0x00, 0x00, // ...F.......F. ..
	0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x82, 0x20, 0x10, 0x00, 0x00, // .......6.... ...
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x3e, 0x00, 0x00, 0x01, 0x00, // ....@.....?>....
	0x00, 0xf0, 0x00,                                                                               // ...
};
static const uint8_t fs_pp_stereo_anaglyph_deghost_spv[5220] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x13, 0x53, // FSH.o.><.......S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, // tereo_MS_ZPD_YAx
	0x69, 0x73, 0x12, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x77, 0x5f, 0x68, // is...........w_h
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x01, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, // _height.........
	0x00, 0x0e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, // ..Stereo_LeftMat
	0x14, 0x01, 0x20, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x53, 0x74, 0x65, 0x72, 0x65, // .. ........Stere
	0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x01, 0x60, 0x00, 0x04, 0x00, // o_RightMat..`...
	0x00, 0x00, 0x00, 0x00, 0x14, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, // .....Stereo_Degh
	0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x14, 0x01, 0xb0, 0x00, 0x04, 0x00, 0x00, // ostFilter.......
	0x00, 0x00, 0x00, 0x13, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, // ....Stereo_Degho
	0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x12, 0x01, 0xa0, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, // stGamma.........
	0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x30, // ..tex_stereo_fb0
	0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x02, 0x22, 0x00, 0x10, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // ......."..tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x30, 0x00, 0x03, 0x00, 0x00, 0x00, // ereo_depth0.....
	0x00, 0x02, 0x22, 0x00, 0x78, 0x13, 0x00, 0x00, 0x03, 0x02, 0x23, 0x07, 0x00, 0x00, 0x01, 0x00, // ..".x.....#.....
	0x0b, 0x00, 0x08, 0x00, 0xda, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x02, 0x00, // ................
	0x01, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, 0x4c, 0x53, 0x4c, // ............GLSL
	0x2e, 0x73, 0x74, 0x64, 0x2e, 0x34, 0x35, 0x30, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x03, 0x00, // .std.450........
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x07, 0x00, 0x04, 0x00, 0x00, 0x00, // ................
	0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x6b, 0x01, 0x00, 0x00, // ....main....k...
	0x76, 0x01, 0x00, 0x00, 0x10, 0x00, 0x03, 0x00, 0x04, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, // v...............
	0x03, 0x00, 0x03, 0x00, 0x05, 0x00, 0x00, 0x00, 0xf4, 0x01, 0x00, 0x00, 0x05, 0x00, 0x04, 0x00, // ................
	0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x08, 0x00, // ....main........
	0x34, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, // 4...tex_stereo_f
	0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x08, 0x00, // bSampler........
	0x37, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, // 7...tex_stereo_f
	0x62, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x08, 0x00, // bTexture........
	0x3b, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, // ;...tex_stereo_d
	0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x00, 0x05, 0x00, 0x08, 0x00, // epthSampler.....
	0x3d, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, // =...tex_stereo_d
	0x65, 0x70, 0x74, 0x68, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x00, 0x05, 0x00, 0x06, 0x00, // epthTexture.....
	0x5b, 0x00, 0x00, 0x00, 0x55, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, // [...UniformBlock
	0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x08, 0x00, 0x5b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........[.......
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, // Stereo_MS_ZPD_YA
	0x78, 0x69, 0x73, 0x00, 0x06, 0x00, 0x06, 0x00, 0x5b, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // xis.....[.......
	0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x00, 0x00, 0x06, 0x00, 0x07, 0x00, // w_h_height......
	0x5b, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, // [.......Stereo_L
	0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x00, 0x00, 0x06, 0x00, 0x07, 0x00, 0x5b, 0x00, 0x00, 0x00, // eftMat......[...
	0x03, 0x00, 0x00, 0x00, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, // ....Stereo_Right
	0x4d, 0x61, 0x74, 0x00, 0x06, 0x00, 0x08, 0x00, 0x5b, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, // Mat.....[.......
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, // Stereo_DeghostGa
	0x6d, 0x6d, 0x61, 0x00, 0x06, 0x00, 0x09, 0x00, 0x5b, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, // mma.....[.......
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, // Stereo_DeghostFi
	0x6c, 0x74, 0x65, 0x72, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x03, 0x00, 0x5d, 0x00, 0x00, 0x00, // lter........]...
	0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x05, 0x00, 0x6b, 0x01, 0x00, 0x00, 0x76, 0x5f, 0x74, 0x65, // ........k...v_te
	0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x00, 0x05, 0x00, 0x06, 0x00, 0x76, 0x01, 0x00, 0x00, // xcoord0.....v...
	0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x00, 0x00, // bgfx_FragData0..
	0x47, 0x00, 0x04, 0x00, 0x34, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // G...4...".......
	0x47, 0x00, 0x04, 0x00, 0x34, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, // G...4...!.......
	0x47, 0x00, 0x04, 0x00, 0x37, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // G...7...".......
	0x47, 0x00, 0x04, 0x00, 0x37, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // G...7...!.......
	0x47, 0x00, 0x04, 0x00, 0x3b, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // G...;...".......
	0x47, 0x00, 0x04, 0x00, 0x3b, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, // G...;...!.......
	0x47, 0x00, 0x04, 0x00, 0x3d, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // G...=...".......
	0x47, 0x00, 0x04, 0x00, 0x3d, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, // G...=...!.......
	0x48, 0x00, 0x05, 0x00, 0x5b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, // H...[.......#...
	0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0x5b, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // ....H...[.......
	0x23, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x48, 0x00, 0x04, 0x00, 0x5b, 0x00, 0x00, 0x00, // #.......H...[...
	0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0x5b, 0x00, 0x00, 0x00, // ........H...[...
	0x02, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, // ....#... ...H...
	0x5b, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, // [...............
	0x48, 0x00, 0x04, 0x00, 0x5b, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, // H...[...........
	0x48, 0x00, 0x05, 0x00, 0x5b, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, // H...[.......#...
	0x60, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0x5b, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, // `...H...[.......
	0x07, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0x5b, 0x00, 0x00, 0x00, // ........H...[...
	0x04, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x48, 0x00, 0x04, 0x00, // ....#.......H...
	0x5b, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, // [...........H...
	0x5b, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0xb0, 0x00, 0x00, 0x00, // [.......#.......
	0x48, 0x00, 0x05, 0x00, 0x5b, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, // H...[...........
	0x10, 0x00, 0x00, 0x00, 0x47, 0x00, 0x03, 0x00, 0x5b, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // ....G...[.......
	0x47, 0x00, 0x04, 0x00, 0x5d, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // G...]...".......
	0x47, 0x00, 0x04, 0x00, 0x5d, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // G...]...!.......
	0x47, 0x00, 0x04, 0x00, 0x6b, 0x01, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // G...k...........
	0x47, 0x00, 0x04, 0x00, 0x76, 0x01, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // G...v...........
	0x13, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x21, 0x00, 0x03, 0x00, 0x03, 0x00, 0x00, 0x00, // ........!.......
	0x02, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x02, 0x00, 0x06, 0x00, 0x00, 0x00, 0x16, 0x00, 0x03, 0x00, // ................
	0x07, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x19, 0x00, 0x09, 0x00, 0x08, 0x00, 0x00, 0x00, // .... ...........
	0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00, // ................
	0x0b, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00, // ................
	0x0e, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00, // ................
	0x19, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, // ............ ...
	0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, // 3...........;...
	0x33, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, // 3...4....... ...
	0x36, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, // 6...........;...
	0x36, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, // 6...7.......;...
	0x33, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, // 3...;.......;...
	0x36, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x00, 0x04, 0x00, // 6...=...........
	0x40, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, // @... .......+...
	0x40, 0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, // @...A.......+...
	0x40, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x03, 0x00, // @...E...........
	0x49, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x14, 0x00, 0x02, 0x00, 0x57, 0x00, 0x00, 0x00, // I...........W...
	0x18, 0x00, 0x04, 0x00, 0x5a, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, // ....Z...........
	0x1e, 0x00, 0x08, 0x00, 0x5b, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, // ....[...........
	0x5a, 0x00, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x00, // Z...Z.......Z...
	0x20, 0x00, 0x04, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x5b, 0x00, 0x00, 0x00, //  ...........[...
	0x3b, 0x00, 0x04, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x5d, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // ;.......].......
	0x15, 0x00, 0x04, 0x00, 0x5e, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ....^... .......
	0x2b, 0x00, 0x04, 0x00, 0x5e, 0x00, 0x00, 0x00, 0x5f, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // +...^..._.......
	0x20, 0x00, 0x04, 0x00, 0x60, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, //  ...`...........
	0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // +.......c.......
	0x2b, 0x00, 0x04, 0x00, 0x5e, 0x00, 0x00, 0x00, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // +...^...f.......
	0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x6c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, // +.......l......?
	0x17, 0x00, 0x04, 0x00, 0x73, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // ....s...W.......
	0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0xfa, 0x7e, 0x2a, 0x3f, // +............~*?
	0x2b, 0x00, 0x04, 0x00, 0x5e, 0x00, 0x00, 0x00, 0xa1, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, // +...^...........
	0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0xa5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, // +..............?
	0x2b, 0x00, 0x04, 0x00, 0x5e, 0x00, 0x00, 0x00, 0xa7, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // +...^...........
	0x2b, 0x00, 0x04, 0x00, 0x40, 0x00, 0x00, 0x00, 0x18, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // +...@...........
	0x20, 0x00, 0x04, 0x00, 0x19, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x00, //  ...........Z...
	0x2b, 0x00, 0x04, 0x00, 0x40, 0x00, 0x00, 0x00, 0x21, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, // +...@...!.......
	0x2b, 0x00, 0x04, 0x00, 0x40, 0x00, 0x00, 0x00, 0x30, 0x01, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, // +...@...0.......
	0x20, 0x00, 0x04, 0x00, 0x31, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, //  ...1...........
	0x18, 0x00, 0x04, 0x00, 0x3b, 0x01, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, // ....;...........
	0x2b, 0x00, 0x04, 0x00, 0x40, 0x00, 0x00, 0x00, 0x4a, 0x01, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, // +...@...J.......
	0x20, 0x00, 0x04, 0x00, 0x6a, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, //  ...j...........
	0x3b, 0x00, 0x04, 0x00, 0x6a, 0x01, 0x00, 0x00, 0x6b, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // ;...j...k.......
	0x20, 0x00, 0x04, 0x00, 0x75, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, //  ...u...........
	0x3b, 0x00, 0x04, 0x00, 0x75, 0x01, 0x00, 0x00, 0x76, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, // ;...u...v.......
	0x36, 0x00, 0x05, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 6...............
	0x03, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x05, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, // ............=...
	0x06, 0x00, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, // ....5...4...=...
	0x08, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, // ....8...7...=...
	0x06, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, // ....<...;...=...
	0x08, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, // ....>...=...=...
	0x0b, 0x00, 0x00, 0x00, 0x6c, 0x01, 0x00, 0x00, 0x6b, 0x01, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, // ....l...k...A...
	0x60, 0x00, 0x00, 0x00, 0xc6, 0x01, 0x00, 0x00, 0x5d, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x00, // `.......]...E...
	0x5f, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0xc7, 0x01, 0x00, 0x00, // _...=...........
	0xc6, 0x01, 0x00, 0x00, 0xb7, 0x00, 0x05, 0x00, 0x57, 0x00, 0x00, 0x00, 0xc8, 0x01, 0x00, 0x00, // ........W.......
	0xc7, 0x01, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x60, 0x00, 0x00, 0x00, // ....c...A...`...
	0xc9, 0x01, 0x00, 0x00, 0x5d, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x00, 0x66, 0x00, 0x00, 0x00, // ....]...E...f...
	0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0xca, 0x01, 0x00, 0x00, 0xc9, 0x01, 0x00, 0x00, // =...............
	0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xce, 0x01, 0x00, 0x00, 0x6c, 0x00, 0x00, 0x00, // ............l...
	0xca, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xcf, 0x01, 0x00, 0x00, // ....P...........
	0x63, 0x00, 0x00, 0x00, 0xce, 0x01, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // c...............
	0xd1, 0x01, 0x00, 0x00, 0x6c, 0x00, 0x00, 0x00, 0xca, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, // ....l.......P...
	0x0b, 0x00, 0x00, 0x00, 0xd2, 0x01, 0x00, 0x00, 0xd1, 0x01, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, // ............c...
	0x50, 0x00, 0x05, 0x00, 0x73, 0x00, 0x00, 0x00, 0xd3, 0x01, 0x00, 0x00, 0xc8, 0x01, 0x00, 0x00, // P...s...........
	0xc8, 0x01, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xd4, 0x01, 0x00, 0x00, // ................
	0xd3, 0x01, 0x00, 0x00, 0xcf, 0x01, 0x00, 0x00, 0xd2, 0x01, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, // ................
	0x0b, 0x00, 0x00, 0x00, 0xd5, 0x01, 0x00, 0x00, 0x6c, 0x01, 0x00, 0x00, 0xd4, 0x01, 0x00, 0x00, // ........l.......
	0x56, 0x00, 0x05, 0x00, 0x49, 0x00, 0x00, 0x00, 0x5d, 0x02, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, // V...I...]...>...
	0x3c, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x60, 0x02, 0x00, 0x00, // <...X.......`...
	0x5d, 0x02, 0x00, 0x00, 0xd5, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, // ]...........c...
	0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xd8, 0x01, 0x00, 0x00, 0x60, 0x02, 0x00, 0x00, // Q...........`...
	0x00, 0x00, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xdc, 0x01, 0x00, 0x00, // ................
	0x7f, 0x00, 0x00, 0x00, 0xca, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, // ........P.......
	0xdd, 0x01, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, 0xdc, 0x01, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, // ....c...........
	0x07, 0x00, 0x00, 0x00, 0xdf, 0x01, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0xca, 0x01, 0x00, 0x00, // ................
	0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xe0, 0x01, 0x00, 0x00, 0xdf, 0x01, 0x00, 0x00, // P...............
	0x63, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x73, 0x00, 0x00, 0x00, 0xe1, 0x01, 0x00, 0x00, // c...P...s.......
	0xc8, 0x01, 0x00, 0x00, 0xc8, 0x01, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, // ................
	0xe2, 0x01, 0x00, 0x00, 0xe1, 0x01, 0x00, 0x00, 0xdd, 0x01, 0x00, 0x00, 0xe0, 0x01, 0x00, 0x00, // ................
	0x81, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xe3, 0x01, 0x00, 0x00, 0x6c, 0x01, 0x00, 0x00, // ............l...
	0xe2, 0x01, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, 0x49, 0x00, 0x00, 0x00, 0x67, 0x02, 0x00, 0x00, // ....V...I...g...
	0x3e, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, // >...<...X.......
	0x6a, 0x02, 0x00, 0x00, 0x67, 0x02, 0x00, 0x00, 0xe3, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // j...g...........
	0x63, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xe6, 0x01, 0x00, 0x00, // c...Q...........
	0x6a, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, // j...............
	0xe7, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0xd8, 0x01, 0x00, 0x00, // ........%.......
	0xe6, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xeb, 0x01, 0x00, 0x00, // ....P...........
	0x63, 0x00, 0x00, 0x00, 0xca, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, // c.......P.......
	0xed, 0x01, 0x00, 0x00, 0xca, 0x01, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, // ........c...P...
	0x73, 0x00, 0x00, 0x00, 0xee, 0x01, 0x00, 0x00, 0xc8, 0x01, 0x00, 0x00, 0xc8, 0x01, 0x00, 0x00, // s...............
	0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xef, 0x01, 0x00, 0x00, 0xee, 0x01, 0x00, 0x00, // ................
	0xeb, 0x01, 0x00, 0x00, 0xed, 0x01, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, // ................
	0xf0, 0x01, 0x00, 0x00, 0x6c, 0x01, 0x00, 0x00, 0xef, 0x01, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, // ....l.......V...
	0x49, 0x00, 0x00, 0x00, 0x71, 0x02, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, // I...q...>...<...
	0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x74, 0x02, 0x00, 0x00, 0x71, 0x02, 0x00, 0x00, // X.......t...q...
	0xf0, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, // ........c...Q...
	0x07, 0x00, 0x00, 0x00, 0xf3, 0x01, 0x00, 0x00, 0x74, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........t.......
	0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0xf4, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // ................
	0x25, 0x00, 0x00, 0x00, 0xe7, 0x01, 0x00, 0x00, 0xf3, 0x01, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, // %...........A...
	0x60, 0x00, 0x00, 0x00, 0xf5, 0x01, 0x00, 0x00, 0x5d, 0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00, // `.......]...A...
	0xa1, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0xf6, 0x01, 0x00, 0x00, // ....=...........
	0xf5, 0x01, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x60, 0x00, 0x00, 0x00, 0xf9, 0x01, 0x00, 0x00, // ....A...`.......
	0x5d, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x00, 0xa7, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, // ]...E.......=...
	0x07, 0x00, 0x00, 0x00, 0xfa, 0x01, 0x00, 0x00, 0xf9, 0x01, 0x00, 0x00, 0x88, 0x00, 0x05, 0x00, // ................
	0x07, 0x00, 0x00, 0x00, 0xfb, 0x01, 0x00, 0x00, 0xa5, 0x00, 0x00, 0x00, 0xfa, 0x01, 0x00, 0x00, // ................
	0x83, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xfc, 0x01, 0x00, 0x00, 0xfb, 0x01, 0x00, 0x00, // ................
	0x6c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x07, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x00, 0x00, // l...............
	0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0xf4, 0x01, 0x00, 0x00, 0xfc, 0x01, 0x00, 0x00, // ....2...........
	0x6c, 0x00, 0x00, 0x00, 0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xff, 0x01, 0x00, 0x00, // l...............
	0xa5, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // ................
	0x00, 0x02, 0x00, 0x00, 0xa5, 0x00, 0x00, 0x00, 0xff, 0x01, 0x00, 0x00, 0x0c, 0x00, 0x08, 0x00, // ................
	0x07, 0x00, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, // ............2...
	0xca, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0xf6, 0x01, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, // ................
	0x07, 0x00, 0x00, 0x00, 0x03, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, // ............(...
	0x63, 0x00, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x7f, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, // c...............
	0x07, 0x02, 0x00, 0x00, 0x03, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, // ........P.......
	0x08, 0x02, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, 0x07, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, // ....c.......P...
	0x0b, 0x00, 0x00, 0x00, 0x0a, 0x02, 0x00, 0x00, 0x03, 0x02, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, // ............c...
	0x50, 0x00, 0x05, 0x00, 0x73, 0x00, 0x00, 0x00, 0x0b, 0x02, 0x00, 0x00, 0xc8, 0x01, 0x00, 0x00, // P...s...........
	0xc8, 0x01, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x0c, 0x02, 0x00, 0x00, // ................
	0x0b, 0x02, 0x00, 0x00, 0x08, 0x02, 0x00, 0x00, 0x0a, 0x02, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, // ................
	0x0b, 0x00, 0x00, 0x00, 0x0d, 0x02, 0x00, 0x00, 0x6c, 0x01, 0x00, 0x00, 0x0c, 0x02, 0x00, 0x00, // ........l.......
	0x56, 0x00, 0x05, 0x00, 0x49, 0x00, 0x00, 0x00, 0x7b, 0x02, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, // V...I...{...8...
	0x35, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x7e, 0x02, 0x00, 0x00, // 5...X.......~...
	0x7b, 0x02, 0x00, 0x00, 0x0d, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, // {...........c...
	0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x14, 0x02, 0x00, 0x00, 0x6c, 0x00, 0x00, 0x00, // ............l...
	0xca, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x15, 0x02, 0x00, 0x00, // ....P...........
	0x63, 0x00, 0x00, 0x00, 0x14, 0x02, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // c...............
	0x17, 0x02, 0x00, 0x00, 0x6c, 0x00, 0x00, 0x00, 0xca, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, // ....l.......P...
	0x0b, 0x00, 0x00, 0x00, 0x18, 0x02, 0x00, 0x00, 0x17, 0x02, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, // ............c...
	0x50, 0x00, 0x05, 0x00, 0x73, 0x00, 0x00, 0x00, 0x19, 0x02, 0x00, 0x00, 0xc8, 0x01, 0x00, 0x00, // P...s...........
	0xc8, 0x01, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x1a, 0x02, 0x00, 0x00, // ................
	0x19, 0x02, 0x00, 0x00, 0x15, 0x02, 0x00, 0x00, 0x18, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, // ................
	0x0b, 0x00, 0x00, 0x00, 0x1b, 0x02, 0x00, 0x00, 0x6c, 0x01, 0x00, 0x00, 0x1a, 0x02, 0x00, 0x00, // ........l.......
	0x56, 0x00, 0x05, 0x00, 0x49, 0x00, 0x00, 0x00, 0x85, 0x02, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, // V...I.......>...
	0x3c, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x88, 0x02, 0x00, 0x00, // <...X...........
	0x85, 0x02, 0x00, 0x00, 0x1b, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, // ............c...
	0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x1e, 0x02, 0x00, 0x00, 0x88, 0x02, 0x00, 0x00, // Q...............
	0x00, 0x00, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x22, 0x02, 0x00, 0x00, // ............"...
	0x7f, 0x00, 0x00, 0x00, 0xca, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, // ........P.......
	0x23, 0x02, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, 0x22, 0x02, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, // #...c...".......
	0x07, 0x00, 0x00, 0x00, 0x25, 0x02, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0xca, 0x01, 0x00, 0x00, // ....%...........
	0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x26, 0x02, 0x00, 0x00, 0x25, 0x02, 0x00, 0x00, // P.......&...%...
	0x63, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x73, 0x00, 0x00, 0x00, 0x27, 0x02, 0x00, 0x00, // c...P...s...'...
	0xc8, 0x01, 0x00, 0x00, 0xc8, 0x01, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, // ................
	0x28, 0x02, 0x00, 0x00, 0x27, 0x02, 0x00, 0x00, 0x23, 0x02, 0x00, 0x00, 0x26, 0x02, 0x00, 0x00, // (...'...#...&...
	0x83, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x29, 0x02, 0x00, 0x00, 0x6c, 0x01, 0x00, 0x00, // ........)...l...
	0x28, 0x02, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, 0x49, 0x00, 0x00, 0x00, 0x8f, 0x02, 0x00, 0x00, // (...V...I.......
	0x3e, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, // >...<...X.......
	0x92, 0x02, 0x00, 0x00, 0x8f, 0x02, 0x00, 0x00, 0x29, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // ........).......
	0x63, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x2c, 0x02, 0x00, 0x00, // c...Q.......,...
	0x92, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, // ................
	0x2d, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x1e, 0x02, 0x00, 0x00, // -.......%.......
	0x2c, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x31, 0x02, 0x00, 0x00, // ,...P.......1...
	0x63, 0x00, 0x00, 0x00, 0xca, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, // c.......P.......
	0x33, 0x02, 0x00, 0x00, 0xca, 0x01, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, // 3.......c...P...
	0x73, 0x00, 0x00, 0x00, 0x34, 0x02, 0x00, 0x00, 0xc8, 0x01, 0x00, 0x00, 0xc8, 0x01, 0x00, 0x00, // s...4...........
	0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x35, 0x02, 0x00, 0x00, 0x34, 0x02, 0x00, 0x00, // ........5...4...
	0x31, 0x02, 0x00, 0x00, 0x33, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, // 1...3...........
	0x36, 0x02, 0x00, 0x00, 0x6c, 0x01, 0x00, 0x00, 0x35, 0x02, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, // 6...l...5...V...
	0x49, 0x00, 0x00, 0x00, 0x99, 0x02, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, // I.......>...<...
	0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x9c, 0x02, 0x00, 0x00, 0x99, 0x02, 0x00, 0x00, // X...............
	0x36, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, // 6.......c...Q...
	0x07, 0x00, 0x00, 0x00, 0x39, 0x02, 0x00, 0x00, 0x9c, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ....9...........
	0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x3a, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // ........:.......
	0x25, 0x00, 0x00, 0x00, 0x2d, 0x02, 0x00, 0x00, 0x39, 0x02, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, // %...-...9...A...
	0x60, 0x00, 0x00, 0x00, 0x3b, 0x02, 0x00, 0x00, 0x5d, 0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00, // `...;...]...A...
	0xa1, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x3c, 0x02, 0x00, 0x00, // ....=.......<...
	0x3b, 0x02, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x60, 0x00, 0x00, 0x00, 0x3f, 0x02, 0x00, 0x00, // ;...A...`...?...
	0x5d, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x00, 0xa7, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, // ]...E.......=...
	0x07, 0x00, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00, 0x3f, 0x02, 0x00, 0x00, 0x88, 0x00, 0x05, 0x00, // ....@...?.......
	0x07, 0x00, 0x00, 0x00, 0x41, 0x02, 0x00, 0x00, 0xa5, 0x00, 0x00, 0x00, 0x40, 0x02, 0x00, 0x00, // ....A.......@...
	0x83, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x42, 0x02, 0x00, 0x00, 0x41, 0x02, 0x00, 0x00, // ........B...A...
	0x6c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x07, 0x00, 0x00, 0x00, 0x44, 0x02, 0x00, 0x00, // l...........D...
	0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x3a, 0x02, 0x00, 0x00, 0x42, 0x02, 0x00, 0x00, // ....2...:...B...
	0x6c, 0x00, 0x00, 0x00, 0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x45, 0x02, 0x00, 0x00, // l...........E...
	0xa5, 0x00, 0x00, 0x00, 0x44, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // ....D...........
	0x46, 0x02, 0x00, 0x00, 0xa5, 0x00, 0x00, 0x00, 0x45, 0x02, 0x00, 0x00, 0x0c, 0x00, 0x08, 0x00, // F.......E.......
	0x07, 0x00, 0x00, 0x00, 0x48, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, // ....H.......2...
	0xca, 0x01, 0x00, 0x00, 0x46, 0x02, 0x00, 0x00, 0x3c, 0x02, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, // ....F...<.......
	0x07, 0x00, 0x00, 0x00, 0x49, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, // ....I.......(...
	0x63, 0x00, 0x00, 0x00, 0x48, 0x02, 0x00, 0x00, 0x7f, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, // c...H...........
	0x4d, 0x02, 0x00, 0x00, 0x49, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, // M...I...P.......
	0x4e, 0x02, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, 0x4d, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, // N...c...M...P...
	0x0b, 0x00, 0x00, 0x00, 0x50, 0x02, 0x00, 0x00, 0x49, 0x02, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, // ....P...I...c...
	0x50, 0x00, 0x05, 0x00, 0x73, 0x00, 0x00, 0x00, 0x51, 0x02, 0x00, 0x00, 0xc8, 0x01, 0x00, 0x00, // P...s...Q.......
	0xc8, 0x01, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x52, 0x02, 0x00, 0x00, // ............R...
	0x51, 0x02, 0x00, 0x00, 0x4e, 0x02, 0x00, 0x00, 0x50, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, // Q...N...P.......
	0x0b, 0x00, 0x00, 0x00, 0x53, 0x02, 0x00, 0x00, 0x6c, 0x01, 0x00, 0x00, 0x52, 0x02, 0x00, 0x00, // ....S...l...R...
	0x56, 0x00, 0x05, 0x00, 0x49, 0x00, 0x00, 0x00, 0xa3, 0x02, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, // V...I.......8...
	0x35, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xa6, 0x02, 0x00, 0x00, // 5...X...........
	0xa3, 0x02, 0x00, 0x00, 0x53, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, // ....S.......c...
	0x41, 0x00, 0x05, 0x00, 0x19, 0x01, 0x00, 0x00, 0xca, 0x02, 0x00, 0x00, 0x5d, 0x00, 0x00, 0x00, // A...........]...
	0x18, 0x01, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x5a, 0x00, 0x00, 0x00, 0xcb, 0x02, 0x00, 0x00, // ....=...Z.......
	0xca, 0x02, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xcc, 0x02, 0x00, 0x00, // ....Q...........
	0x7e, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // ~.......Q.......
	0xcd, 0x02, 0x00, 0x00, 0x7e, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, // ....~.......Q...
	0x07, 0x00, 0x00, 0x00, 0xce, 0x02, 0x00, 0x00, 0x7e, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // ........~.......
	0x50, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xcf, 0x02, 0x00, 0x00, 0xcc, 0x02, 0x00, 0x00, // P...............
	0xcd, 0x02, 0x00, 0x00, 0xce, 0x02, 0x00, 0x00, 0xa5, 0x00, 0x00, 0x00, 0x91, 0x00, 0x05, 0x00, // ................
	0x0e, 0x00, 0x00, 0x00, 0xd0, 0x02, 0x00, 0x00, 0xcb, 0x02, 0x00, 0x00, 0xcf, 0x02, 0x00, 0x00, // ................
	0x41, 0x00, 0x05, 0x00, 0x19, 0x01, 0x00, 0x00, 0xd1, 0x02, 0x00, 0x00, 0x5d, 0x00, 0x00, 0x00, // A...........]...
	0x21, 0x01, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x5a, 0x00, 0x00, 0x00, 0xd2, 0x02, 0x00, 0x00, // !...=...Z.......
	0xd1, 0x02, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xd3, 0x02, 0x00, 0x00, // ....Q...........
	0xa6, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // ........Q.......
	0xd4, 0x02, 0x00, 0x00, 0xa6, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, // ............Q...
	0x07, 0x00, 0x00, 0x00, 0xd5, 0x02, 0x00, 0x00, 0xa6, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // ................
	0x50, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xd6, 0x02, 0x00, 0x00, 0xd3, 0x02, 0x00, 0x00, // P...............
	0xd4, 0x02, 0x00, 0x00, 0xd5, 0x02, 0x00, 0x00, 0xa5, 0x00, 0x00, 0x00, 0x91, 0x00, 0x05, 0x00, // ................
	0x0e, 0x00, 0x00, 0x00, 0xd7, 0x02, 0x00, 0x00, 0xd2, 0x02, 0x00, 0x00, 0xd6, 0x02, 0x00, 0x00, // ................
	0x81, 0x00, 0x05, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xd8, 0x02, 0x00, 0x00, 0xd0, 0x02, 0x00, 0x00, // ................
	0xd7, 0x02, 0x00, 0x00, 0x4f, 0x00, 0x08, 0x00, 0x19, 0x00, 0x00, 0x00, 0xd9, 0x02, 0x00, 0x00, // ....O...........
	0xd8, 0x02, 0x00, 0x00, 0xd8, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // ................
	0x02, 0x00, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x31, 0x01, 0x00, 0x00, 0xab, 0x02, 0x00, 0x00, // ....A...1.......
	0x5d, 0x00, 0x00, 0x00, 0x30, 0x01, 0x00, 0x00, 0x45, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, // ]...0...E...=...
	0x0e, 0x00, 0x00, 0x00, 0xac, 0x02, 0x00, 0x00, 0xab, 0x02, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, // ............A...
	0x31, 0x01, 0x00, 0x00, 0xae, 0x02, 0x00, 0x00, 0x5d, 0x00, 0x00, 0x00, 0x30, 0x01, 0x00, 0x00, // 1.......]...0...
	0x41, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xaf, 0x02, 0x00, 0x00, // A...=...........
	0xae, 0x02, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x31, 0x01, 0x00, 0x00, 0xb1, 0x02, 0x00, 0x00, // ....A...1.......
	0x5d, 0x00, 0x00, 0x00, 0x30, 0x01, 0x00, 0x00, 0x18, 0x01, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, // ]...0.......=...
	0x0e, 0x00, 0x00, 0x00, 0xb2, 0x02, 0x00, 0x00, 0xb1, 0x02, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, // ............Q...
	0x07, 0x00, 0x00, 0x00, 0xb4, 0x02, 0x00, 0x00, 0xac, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xb5, 0x02, 0x00, 0x00, 0xac, 0x02, 0x00, 0x00, // Q...............
	0x01, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xb6, 0x02, 0x00, 0x00, // ....Q...........
	0xac, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // ........Q.......
	0xb7, 0x02, 0x00, 0x00, 0xaf, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, // ............Q...
	0x07, 0x00, 0x00, 0x00, 0xb8, 0x02, 0x00, 0x00, 0xaf, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // ................
	0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xb9, 0x02, 0x00, 0x00, 0xaf, 0x02, 0x00, 0x00, // Q...............
	0x02, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xba, 0x02, 0x00, 0x00, // ....Q...........
	0xb2, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // ........Q.......
	0xbb, 0x02, 0x00, 0x00, 0xb2, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, // ............Q...
	0x07, 0x00, 0x00, 0x00, 0xbc, 0x02, 0x00, 0x00, 0xb2, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // ................
	0x50, 0x00, 0x06, 0x00, 0x19, 0x00, 0x00, 0x00, 0xbd, 0x02, 0x00, 0x00, 0xb4, 0x02, 0x00, 0x00, // P...............
	0xb5, 0x02, 0x00, 0x00, 0xb6, 0x02, 0x00, 0x00, 0x50, 0x00, 0x06, 0x00, 0x19, 0x00, 0x00, 0x00, // ........P.......
	0xbe, 0x02, 0x00, 0x00, 0xb7, 0x02, 0x00, 0x00, 0xb8, 0x02, 0x00, 0x00, 0xb9, 0x02, 0x00, 0x00, // ................
	0x50, 0x00, 0x06, 0x00, 0x19, 0x00, 0x00, 0x00, 0xbf, 0x02, 0x00, 0x00, 0xba, 0x02, 0x00, 0x00, // P...............
	0xbb, 0x02, 0x00, 0x00, 0xbc, 0x02, 0x00, 0x00, 0x50, 0x00, 0x06, 0x00, 0x3b, 0x01, 0x00, 0x00, // ........P...;...
	0xc0, 0x02, 0x00, 0x00, 0xbd, 0x02, 0x00, 0x00, 0xbe, 0x02, 0x00, 0x00, 0xbf, 0x02, 0x00, 0x00, // ................
	0x41, 0x00, 0x05, 0x00, 0x31, 0x01, 0x00, 0x00, 0xc2, 0x02, 0x00, 0x00, 0x5d, 0x00, 0x00, 0x00, // A...1.......]...
	0x4a, 0x01, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xc3, 0x02, 0x00, 0x00, // J...=...........
	0xc2, 0x02, 0x00, 0x00, 0x4f, 0x00, 0x08, 0x00, 0x19, 0x00, 0x00, 0x00, 0xc4, 0x02, 0x00, 0x00, // ....O...........
	0xc3, 0x02, 0x00, 0x00, 0xc3, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // ................
	0x02, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x19, 0x00, 0x00, 0x00, 0xc5, 0x02, 0x00, 0x00, // ................
	0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0xd9, 0x02, 0x00, 0x00, 0xc4, 0x02, 0x00, 0x00, // ................
	0x91, 0x00, 0x05, 0x00, 0x19, 0x00, 0x00, 0x00, 0xc6, 0x02, 0x00, 0x00, 0xc0, 0x02, 0x00, 0x00, // ................
	0xc5, 0x02, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x9c, 0x01, 0x00, 0x00, // ....Q...........
	0xc6, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // ........Q.......
	0x9d, 0x01, 0x00, 0x00, 0xc6, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, // ............Q...
	0x07, 0x00, 0x00, 0x00, 0x9e, 0x01, 0x00, 0x00, 0xc6, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // ................
	0x50, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x9f, 0x01, 0x00, 0x00, 0x9c, 0x01, 0x00, 0x00, // P...............
	0x9d, 0x01, 0x00, 0x00, 0x9e, 0x01, 0x00, 0x00, 0xa5, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x03, 0x00, // ............>...
	0x76, 0x01, 0x00, 0x00, 0x9f, 0x01, 0x00, 0x00, 0xfd, 0x00, 0x01, 0x00, 0x38, 0x00, 0x01, 0x00, // v...........8...
	0x00, 0x00, 0xf0, 0x00,                                                                         // ....
};
static const bgfx::EmbeddedShader fs_pp_stereo_anaglyph_deghost = BGFX_EMBEDDED_SHADER(fs_pp_stereo_anaglyph_deghost);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Build of fragment shader from fs_pp_stereo.sc to fs_pp_stereo_anaglyph_lin_srgb_nodesat with options: ANAGLYPH NODESAT SRGB NOSTEREO
static const uint8_t fs_pp_stereo_anaglyph_lin_srgb_nodesat_mtl[6656] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x14, 0x74, // FSH.o.><.......t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, // ex_stereo_fbSamp
	0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x74, 0x65, // ler...........te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x54, 0x65, 0x78, 0x74, 0x75, // x_stereo_fbTextu
	0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x74, 0x65, 0x78, // re...........tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, // _stereo_depthSam
	0x70, 0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x74, // pler...........t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x54, // ex_stereo_depthT
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, // exture..........
	0x13, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, // .Stereo_MS_ZPD_Y
	0x41, 0x78, 0x69, 0x73, 0x12, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x77, // Axis...........w
	0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x01, 0x10, 0x00, 0x01, 0x00, 0x00, // _h_height.......
	0x00, 0x00, 0x00, 0x0e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, // ....Stereo_LeftM
	0x61, 0x74, 0x14, 0x01, 0x20, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x53, 0x74, 0x65, // at.. ........Ste
	0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x01, 0x60, 0x00, // reo_RightMat..`.
	0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // .......tex_stere
	0x6f, 0x5f, 0x66, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x74, // o_fb...........t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x10, // ex_stereo_depth.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcf, 0x18, 0x00, 0x00, 0x23, 0x69, 0x6e, // .............#in
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x64, // clude <metal_std
	0x6c, 0x69, 0x62, 0x3e, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x73, // lib>.#include <s
	0x69, 0x6d, 0x64, 0x2f, 0x73, 0x69, 0x6d, 0x64, 0x2e, 0x68, 0x3e, 0x0a, 0x0a, 0x75, 0x73, 0x69, // imd/simd.h>..usi
	0x6e, 0x67, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x6d, 0x65, 0x74, // ng namespace met
	0x61, 0x6c, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x5f, 0x47, 0x6c, 0x6f, // al;..struct _Glo
	0x62, 0x61, 0x6c, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, // bal.{.    float4
	0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, //  Stereo_MS_ZPD_Y
	0x41, 0x78, 0x69, 0x73, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, // Axis;.    float4
	0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, 0x20, 0x20, 0x20, //  w_h_height;.   
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x78, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, //  float4x4 Stereo
	0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, // _LeftMat;.    fl
	0x6f, 0x61, 0x74, 0x34, 0x78, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, // oat4x4 Stereo_Ri
	0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, // ghtMat;.};..stru
	0x63, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, // ct xlatMtlMain_o
	0x75, 0x74, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, // ut.{.    float4 
	0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x20, 0x5b, // bgfx_FragData0 [
	0x5b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, // [color(0)]];.};.
	0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, // .struct xlatMtlM
	0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, // ain_in.{.    flo
	0x61, 0x74, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, // at2 v_texcoord0 
	0x5b, 0x5b, 0x75, 0x73, 0x65, 0x72, 0x28, 0x6c, 0x6f, 0x63, 0x6e, 0x30, 0x29, 0x5d, 0x5d, 0x3b, // [[user(locn0)]];
	0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x78, 0x6c, // .};..fragment xl
	0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x78, 0x6c, // atMtlMain_out xl
	0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x28, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, // atMtlMain(xlatMt
	0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x5b, 0x5b, 0x73, 0x74, // lMain_in in [[st
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x5d, 0x5d, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, // age_in]], consta
	0x6e, 0x74, 0x20, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x26, 0x20, 0x5f, 0x6d, 0x74, 0x6c, // nt _Global& _mtl
	0x5f, 0x75, 0x20, 0x5b, 0x5b, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, // _u [[buffer(0)]]
	0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, 0x6f, 0x61, // , texture2d<floa
	0x74, 0x3e, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, // t> tex_stereo_fb
	0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x2c, //  [[texture(0)]],
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, //  texture2d<float
	0x3e, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, // > tex_stereo_dep
	0x74, 0x68, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x31, 0x29, 0x5d, // th [[texture(1)]
	0x5d, 0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, // ], sampler tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, // tereo_fbSampler 
	0x5b, 0x5b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x2c, 0x20, // [[sampler(0)]], 
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // sampler tex_ster
	0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, // eo_depthSampler 
	0x5b, 0x5b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x31, 0x29, 0x5d, 0x5d, 0x29, 0x0a, // [[sampler(1)]]).
	0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, // {.    xlatMtlMai
	0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x3d, 0x20, 0x7b, 0x7d, 0x3b, 0x0a, // n_out out = {};.
	0x20, 0x20, 0x20, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x5f, 0x35, 0x31, 0x36, 0x20, 0x3d, 0x20, //     bool _516 = 
	0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, // _mtl_u.Stereo_MS
	0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x7a, 0x20, 0x21, 0x3d, 0x20, // _ZPD_YAxis.z != 
	0x30, 0x2e, 0x30, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, // 0.0;.    float _
	0x35, 0x37, 0x35, 0x20, 0x3d, 0x20, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x61, 0x78, 0x28, // 575 = fast::max(
	0x30, 0x2e, 0x30, 0x2c, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, // 0.0, fma(_mtl_u.
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, // Stereo_MS_ZPD_YA
	0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, // xis.x, 1.0 - (1.
	0x30, 0x20, 0x2f, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, // 0 / fma(fast::mi
	0x6e, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x5f, // n(fast::min(tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, 0x6d, // stereo_depth.sam
	0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, // ple(tex_stereo_d
	0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, 0x6e, // epthSampler, (in
	0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2b, 0x20, 0x73, // .v_texcoord0 + s
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x35, // elect(float2(0.5
	0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, //  * _mtl_u.Stereo
	0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, // _MS_ZPD_YAxis.x,
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, //  0.0), float2(0.
	0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, // 0, 0.5 * _mtl_u.
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, // Stereo_MS_ZPD_YA
	0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x35, // xis.x), bool2(_5
	0x31, 0x36, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, // 16))), level(0.0
	0x29, 0x29, 0x2e, 0x78, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // )).x, tex_stereo
	0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, // _depth.sample(te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, // x_stereo_depthSa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, // mpler, (in.v_tex
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2b, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, // coord0 + select(
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x30, 0x30, 0x30, 0x30, // float2(0.6660000
	0x30, 0x38, 0x35, 0x38, 0x33, 0x30, 0x36, 0x38, 0x38, 0x34, 0x37, 0x36, 0x35, 0x36, 0x32, 0x35, // 0858306884765625
	0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, //  * _mtl_u.Stereo
	0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, // _MS_ZPD_YAxis.x,
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, //  0.0), float2(0.
	0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x30, 0x30, 0x30, 0x30, 0x30, 0x38, 0x35, 0x38, // 0, 0.66600000858
	0x33, 0x30, 0x36, 0x38, 0x38, 0x34, 0x37, 0x36, 0x35, 0x36, 0x32, 0x35, 0x20, 0x2a, 0x20, 0x5f, // 306884765625 * _
	0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, // mtl_u.Stereo_MS_
	0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, 0x6f, // ZPD_YAxis.x), bo
	0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x35, 0x31, 0x36, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, // ol2(_516))), lev
	0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x74, 0x65, 0x78, // el(0.0)).x), tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, // _stereo_depth.sa
	0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // mple(tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, // depthSampler, (i
	0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2b, 0x20, // n.v_texcoord0 + 
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x5f, 0x6d, // select(float2(_m
	0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, // tl_u.Stereo_MS_Z
	0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // PD_YAxis.x, 0.0)
	0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x5f, 0x6d, // , float2(0.0, _m
	0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, // tl_u.Stereo_MS_Z
	0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, // PD_YAxis.x), boo
	0x6c, 0x32, 0x28, 0x5f, 0x35, 0x31, 0x36, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, // l2(_516))), leve
	0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x28, 0x31, 0x2e, 0x30, // l(0.0)).x), (1.0
	0x20, 0x2f, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, //  / _mtl_u.Stereo
	0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, // _MS_ZPD_YAxis.y)
	0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x2c, 0x20, 0x5f, //  - 0.5, 0.5)), _
	0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, // mtl_u.w_h_height
	0x2e, 0x77, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, // .w));.    float4
	0x20, 0x5f, 0x36, 0x39, 0x38, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, //  _698 = tex_ster
	0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, // eo_fb.sample(tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, // _stereo_fbSample
	0x72, 0x2c, 0x20, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, // r, (in.v_texcoor
	0x64, 0x30, 0x20, 0x2b, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, // d0 + select(floa
	0x74, 0x32, 0x28, 0x5f, 0x35, 0x37, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, // t2(_575, 0.0), f
	0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x5f, 0x35, 0x37, 0x35, // loat2(0.0, -_575
	0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x35, 0x31, 0x36, 0x29, 0x29, 0x29, // ), bool2(_516)))
	0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x20, // , level(0.0));. 
	0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x36, 0x34, 0x35, 0x20, 0x3d, 0x20, //    float _645 = 
	0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x66, // fast::max(0.0, f
	0x6d, 0x61, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // ma(_mtl_u.Stereo
	0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, // _MS_ZPD_YAxis.x,
	0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x66, 0x6d, //  1.0 - (1.0 / fm
	0x61, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, 0x6e, 0x28, 0x66, 0x61, 0x73, 0x74, // a(fast::min(fast
	0x3a, 0x3a, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // ::min(tex_stereo
	0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, // _depth.sample(te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, // x_stereo_depthSa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, // mpler, (in.v_tex
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2d, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, // coord0 - select(
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, // float2(0.5 * _mt
	0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, // l_u.Stereo_MS_ZP
	0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, // D_YAxis.x, 0.0),
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, //  float2(0.0, 0.5
	0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, //  * _mtl_u.Stereo
	0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, // _MS_ZPD_YAxis.x)
	0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x35, 0x31, 0x36, 0x29, 0x29, 0x29, 0x2c, // , bool2(_516))),
	0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x2c, 0x20, //  level(0.0)).x, 
	0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, // tex_stereo_depth
	0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // .sample(tex_ster
	0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, // eo_depthSampler,
	0x20, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, //  (in.v_texcoord0
	0x20, 0x2d, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, //  - select(float2
	0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x30, 0x30, 0x30, 0x30, 0x30, 0x38, 0x35, 0x38, 0x33, 0x30, // (0.6660000085830
	0x36, 0x38, 0x38, 0x34, 0x37, 0x36, 0x35, 0x36, 0x32, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, // 6884765625 * _mt
	0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, // l_u.Stereo_MS_ZP
	0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, // D_YAxis.x, 0.0),
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, //  float2(0.0, 0.6
	0x36, 0x36, 0x30, 0x30, 0x30, 0x30, 0x30, 0x38, 0x35, 0x38, 0x33, 0x30, 0x36, 0x38, 0x38, 0x34, // 6600000858306884
	0x37, 0x36, 0x35, 0x36, 0x32, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, // 765625 * _mtl_u.
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, // Stereo_MS_ZPD_YA
	0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x35, // xis.x), bool2(_5
	0x31, 0x36, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, // 16))), level(0.0
	0x29, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // )).x), tex_stere
	0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, // o_depth.sample(t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, // ex_stereo_depthS
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, // ampler, (in.v_te
	0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2d, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, // xcoord0 - select
	0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, // (float2(_mtl_u.S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, // tereo_MS_ZPD_YAx
	0x69, 0x73, 0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, // is.x, 0.0), floa
	0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, // t2(0.0, _mtl_u.S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, // tereo_MS_ZPD_YAx
	0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x35, 0x31, // is.x), bool2(_51
	0x36, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, // 6))), level(0.0)
	0x29, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x5f, 0x6d, 0x74, // ).x), (1.0 / _mt
	0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, // l_u.Stereo_MS_ZP
	0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, // D_YAxis.y) - 0.5
	0x2c, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, // , 0.5)), _mtl_u.
	0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x29, 0x29, 0x3b, 0x0a, // w_h_height.w));.
	0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x37, 0x33, 0x38, 0x20, //     float4 _738 
	0x3d, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2e, // = tex_stereo_fb.
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // sample(tex_stere
	0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, 0x6e, // o_fbSampler, (in
	0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2d, 0x20, 0x73, // .v_texcoord0 - s
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x5f, 0x36, 0x34, // elect(float2(_64
	0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, // 5, 0.0), float2(
	0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x5f, 0x36, 0x34, 0x35, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, // 0.0, -_645), boo
	0x6c, 0x32, 0x28, 0x5f, 0x35, 0x31, 0x36, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, // l2(_516))), leve
	0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, // l(0.0));.    flo
	0x61, 0x74, 0x20, 0x5f, 0x37, 0x34, 0x31, 0x20, 0x3d, 0x20, 0x5f, 0x36, 0x39, 0x38, 0x2e, 0x78, // at _741 = _698.x
	0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x39, 0x37, 0x36, // ;.    float _976
	0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x64, 0x6f, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, // ;.    do.    {. 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, 0x37, 0x34, 0x31, 0x20, //        if (_741 
	0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, 0x34, 0x34, 0x39, 0x39, 0x39, 0x39, 0x32, 0x37, // <= 0.04044999927
	0x32, 0x38, 0x32, 0x33, 0x33, 0x33, 0x33, 0x37, 0x34, 0x30, 0x32, 0x33, 0x34, 0x33, 0x37, 0x35, // 2823333740234375
	0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, // ).        {.    
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x39, 0x37, 0x36, 0x20, 0x3d, 0x20, 0x5f, //         _976 = _
	0x37, 0x34, 0x31, 0x20, 0x2a, 0x20, 0x30, 0x2e, 0x30, 0x37, 0x37, 0x33, 0x39, 0x39, 0x33, 0x38, // 741 * 0.07739938
	0x30, 0x35, 0x30, 0x35, 0x30, 0x38, 0x34, 0x39, 0x39, 0x31, 0x34, 0x35, 0x35, 0x30, 0x37, 0x38, // 0505084991455078
	0x31, 0x32, 0x35, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 125;.           
	0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //  break;.        
	0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, // }.        else. 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //        {.       
	0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x39, 0x37, 0x36, 0x20, 0x3d, 0x20, 0x70, 0x6f, 0x77, 0x72, //      _976 = powr
	0x28, 0x66, 0x6d, 0x61, 0x28, 0x5f, 0x37, 0x34, 0x31, 0x2c, 0x20, 0x30, 0x2e, 0x39, 0x34, 0x37, // (fma(_741, 0.947
	0x38, 0x36, 0x37, 0x32, 0x37, 0x34, 0x32, 0x38, 0x34, 0x33, 0x36, 0x32, 0x37, 0x39, 0x32, 0x39, // 8672742843627929
	0x36, 0x38, 0x37, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x32, 0x31, 0x33, 0x32, 0x36, 0x39, // 6875, 0.05213269
	0x39, 0x36, 0x33, 0x38, 0x36, 0x30, 0x35, 0x31, 0x31, 0x37, 0x37, 0x39, 0x37, 0x38, 0x35, 0x31, // 9638605117797851
	0x35, 0x36, 0x32, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, // 5625), 2.4000000
	0x39, 0x35, 0x33, 0x36, 0x37, 0x34, 0x33, 0x31, 0x36, 0x34, 0x30, 0x36, 0x32, 0x35, 0x29, 0x3b, // 95367431640625);
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, // .            bre
	0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, // ak;.        }.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x20, 0x2f, 0x2f, 0x20, //       break; // 
	0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x77, 0x6f, 0x72, 0x6b, // unreachable work
	0x61, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x20, 0x77, 0x68, 0x69, // around.    } whi
	0x6c, 0x65, 0x28, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, // le(false);.    f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x37, 0x34, 0x33, 0x20, 0x3d, 0x20, 0x5f, 0x36, 0x39, 0x38, // loat _743 = _698
	0x2e, 0x79, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x39, // .y;.    float _9
	0x37, 0x37, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x64, 0x6f, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, // 77;.    do.    {
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, 0x37, 0x34, // .        if (_74
	0x33, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, 0x34, 0x34, 0x39, 0x39, 0x39, 0x39, // 3 <= 0.040449999
	0x32, 0x37, 0x32, 0x38, 0x32, 0x33, 0x33, 0x33, 0x33, 0x37, 0x34, 0x30, 0x32, 0x33, 0x34, 0x33, // 2728233337402343
	0x37, 0x35, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, // 75).        {.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x39, 0x37, 0x37, 0x20, 0x3d, //           _977 =
	0x20, 0x5f, 0x37, 0x34, 0x33, 0x20, 0x2a, 0x20, 0x30, 0x2e, 0x30, 0x37, 0x37, 0x33, 0x39, 0x39, //  _743 * 0.077399
	0x33, 0x38, 0x30, 0x35, 0x30, 0x35, 0x30, 0x38, 0x34, 0x39, 0x39, 0x31, 0x34, 0x35, 0x35, 0x30, // 3805050849914550
	0x37, 0x38, 0x31, 0x32, 0x35, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 78125;.         
	0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //    break;.      
	0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, //   }.        else
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // .        {.     
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x39, 0x37, 0x37, 0x20, 0x3d, 0x20, 0x70, 0x6f, //        _977 = po
	0x77, 0x72, 0x28, 0x66, 0x6d, 0x61, 0x28, 0x5f, 0x37, 0x34, 0x33, 0x2c, 0x20, 0x30, 0x2e, 0x39, // wr(fma(_743, 0.9
	0x34, 0x37, 0x38, 0x36, 0x37, 0x32, 0x37, 0x34, 0x32, 0x38, 0x34, 0x33, 0x36, 0x32, 0x37, 0x39, // 4786727428436279
	0x32, 0x39, 0x36, 0x38, 0x37, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x32, 0x31, 0x33, 0x32, // 296875, 0.052132
	0x36, 0x39, 0x39, 0x36, 0x33, 0x38, 0x36, 0x30, 0x35, 0x31, 0x31, 0x37, 0x37, 0x39, 0x37, 0x38, // 6996386051177978
	0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x30, 0x30, 0x30, 0x30, // 515625), 2.40000
	0x30, 0x30, 0x39, 0x35, 0x33, 0x36, 0x37, 0x34, 0x33, 0x31, 0x36, 0x34, 0x30, 0x36, 0x32, 0x35, // 0095367431640625
	0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, // );.            b
	0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, // reak;.        }.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x20, 0x2f, //         break; /
	0x2f, 0x20, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x77, 0x6f, // / unreachable wo
	0x72, 0x6b, 0x61, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x20, 0x77, // rkaround.    } w
	0x68, 0x69, 0x6c, 0x65, 0x28, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, // hile(false);.   
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x37, 0x34, 0x35, 0x20, 0x3d, 0x20, 0x5f, 0x36, //  float _745 = _6
	0x39, 0x38, 0x2e, 0x7a, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // 98.z;.    float 
	0x5f, 0x39, 0x37, 0x38, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x64, 0x6f, 0x0a, 0x20, 0x20, 0x20, // _978;.    do.   
	0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, //  {.        if (_
	0x37, 0x34, 0x35, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, 0x34, 0x34, 0x39, 0x39, // 745 <= 0.0404499
	0x39, 0x39, 0x32, 0x37, 0x32, 0x38, 0x32, 0x33, 0x33, 0x33, 0x33, 0x37, 0x34, 0x30, 0x32, 0x33, // 9927282333374023
	0x34, 0x33, 0x37, 0x35, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, // 4375).        {.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x39, 0x37, 0x38, //             _978
	0x20, 0x3d, 0x20, 0x5f, 0x37, 0x34, 0x35, 0x20, 0x2a, 0x20, 0x30, 0x2e, 0x30, 0x37, 0x37, 0x33, //  = _745 * 0.0773
	0x39, 0x39, 0x33, 0x38, 0x30, 0x35, 0x30, 0x35, 0x30, 0x38, 0x34, 0x39, 0x39, 0x31, 0x34, 0x35, // 9938050508499145
	0x35, 0x30, 0x37, 0x38, 0x31, 0x32, 0x35, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 5078125;.       
	0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, //      break;.    
	0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, //     }.        el
	0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, // se.        {.   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x39, 0x37, 0x38, 0x20, 0x3d, 0x20, //          _978 = 
	0x70, 0x6f, 0x77, 0x72, 0x28, 0x66, 0x6d, 0x61, 0x28, 0x5f, 0x37, 0x34, 0x35, 0x2c, 0x20, 0x30, // powr(fma(_745, 0
	0x2e, 0x39, 0x34, 0x37, 0x38, 0x36, 0x37, 0x32, 0x37, 0x34, 0x32, 0x38, 0x34, 0x33, 0x36, 0x32, // .947867274284362
	0x37, 0x39, 0x32, 0x39, 0x36, 0x38, 0x37, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x32, 0x31, // 79296875, 0.0521
	0x33, 0x32, 0x36, 0x39, 0x39, 0x36, 0x33, 0x38, 0x36, 0x30, 0x35, 0x31, 0x31, 0x37, 0x37, 0x39, // 3269963860511779
	0x37, 0x38, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x30, 0x30, // 78515625), 2.400
	0x30, 0x30, 0x30, 0x30, 0x39, 0x35, 0x33, 0x36, 0x37, 0x34, 0x33, 0x31, 0x36, 0x34, 0x30, 0x36, // 0000953674316406
	0x32, 0x35, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 25);.           
	0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //  break;.        
	0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, // }.        break;
	0x20, 0x2f, 0x2f, 0x20, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x20, //  // unreachable 
	0x77, 0x6f, 0x72, 0x6b, 0x61, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, // workaround.    }
	0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x28, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x20, //  while(false);. 
	0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x38, 0x30, 0x34, 0x20, 0x3d, 0x20, //    float _804 = 
	0x5f, 0x37, 0x33, 0x38, 0x2e, 0x78, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, // _738.x;.    floa
	0x74, 0x20, 0x5f, 0x39, 0x38, 0x32, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x64, 0x6f, 0x0a, 0x20, // t _982;.    do. 
	0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, //    {.        if 
	0x28, 0x5f, 0x38, 0x30, 0x34, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, 0x34, 0x34, // (_804 <= 0.04044
	0x39, 0x39, 0x39, 0x39, 0x32, 0x37, 0x32, 0x38, 0x32, 0x33, 0x33, 0x33, 0x33, 0x37, 0x34, 0x30, // 9999272823333740
	0x32, 0x33, 0x34, 0x33, 0x37, 0x35, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 234375).        
	0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x39, // {.            _9
	0x38, 0x32, 0x20, 0x3d, 0x20, 0x5f, 0x38, 0x30, 0x34, 0x20, 0x2a, 0x20, 0x30, 0x2e, 0x30, 0x37, // 82 = _804 * 0.07
	0x37, 0x33, 0x39, 0x39, 0x33, 0x38, 0x30, 0x35, 0x30, 0x35, 0x30, 0x38, 0x34, 0x39, 0x39, 0x31, // 7399380505084991
	0x34, 0x35, 0x35, 0x30, 0x37, 0x38, 0x31, 0x32, 0x35, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // 455078125;.     
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, //        break;.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //       }.        
	0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, // else.        {. 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x39, 0x38, 0x32, 0x20, //            _982 
	0x3d, 0x20, 0x70, 0x6f, 0x77, 0x72, 0x28, 0x66, 0x6d, 0x61, 0x28, 0x5f, 0x38, 0x30, 0x34, 0x2c, // = powr(fma(_804,
	0x20, 0x30, 0x2e, 0x39, 0x34, 0x37, 0x38, 0x36, 0x37, 0x32, 0x37, 0x34, 0x32, 0x38, 0x34, 0x33, //  0.9478672742843
	0x36, 0x32, 0x37, 0x39, 0x32, 0x39, 0x36, 0x38, 0x37, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x35, // 6279296875, 0.05
	0x32, 0x31, 0x33, 0x32, 0x36, 0x39, 0x39, 0x36, 0x33, 0x38, 0x36, 0x30, 0x35, 0x31, 0x31, 0x37, // 2132699638605117
	0x37, 0x39, 0x37, 0x38, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, 0x34, // 7978515625), 2.4
	0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x39, 0x35, 0x33, 0x36, 0x37, 0x34, 0x33, 0x31, 0x36, 0x34, // 0000009536743164
	0x30, 0x36, 0x32, 0x35, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 0625);.         
	0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //    break;.      
	0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, //   }.        brea
	0x6b, 0x3b, 0x20, 0x2f, 0x2f, 0x20, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, // k; // unreachabl
	0x65, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x61, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x0a, 0x20, 0x20, 0x20, // e workaround.   
	0x20, 0x7d, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x28, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x29, 0x3b, //  } while(false);
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x38, 0x30, 0x36, 0x20, // .    float _806 
	0x3d, 0x20, 0x5f, 0x37, 0x33, 0x38, 0x2e, 0x79, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, // = _738.y;.    fl
	0x6f, 0x61, 0x74, 0x20, 0x5f, 0x39, 0x38, 0x33, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x64, 0x6f, // oat _983;.    do
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, // .    {.        i
	0x66, 0x20, 0x28, 0x5f, 0x38, 0x30, 0x36, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, // f (_806 <= 0.040
	0x34, 0x34, 0x39, 0x39, 0x39, 0x39, 0x32, 0x37, 0x32, 0x38, 0x32, 0x33, 0x33, 0x33, 0x33, 0x37, // 4499992728233337
	0x34, 0x30, 0x32, 0x33, 0x34, 0x33, 0x37, 0x35, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 40234375).      
	0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //   {.            
	0x5f, 0x39, 0x38, 0x33, 0x20, 0x3d, 0x20, 0x5f, 0x38, 0x30, 0x36, 0x20, 0x2a, 0x20, 0x30, 0x2e, // _983 = _806 * 0.
	0x30, 0x37, 0x37, 0x33, 0x39, 0x39, 0x33, 0x38, 0x30, 0x35, 0x30, 0x35, 0x30, 0x38, 0x34, 0x39, // 0773993805050849
	0x39, 0x31, 0x34, 0x35, 0x35, 0x30, 0x37, 0x38, 0x31, 0x32, 0x35, 0x3b, 0x0a, 0x20, 0x20, 0x20, // 91455078125;.   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, //          break;.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //         }.      
	0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, //   else.        {
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x39, 0x38, // .            _98
	0x33, 0x20, 0x3d, 0x20, 0x70, 0x6f, 0x77, 0x72, 0x28, 0x66, 0x6d, 0x61, 0x28, 0x5f, 0x38, 0x30, // 3 = powr(fma(_80
	0x36, 0x2c, 0x20, 0x30, 0x2e, 0x39, 0x34, 0x37, 0x38, 0x36, 0x37, 0x32, 0x37, 0x34, 0x32, 0x38, // 6, 0.94786727428
	0x34, 0x33, 0x36, 0x32, 0x37, 0x39, 0x32, 0x39, 0x36, 0x38, 0x37, 0x35, 0x2c, 0x20, 0x30, 0x2e, // 436279296875, 0.
	0x30, 0x35, 0x32, 0x31, 0x33, 0x32, 0x36, 0x39, 0x39, 0x36, 0x33, 0x38, 0x36, 0x30, 0x35, 0x31, // 0521326996386051
	0x31, 0x37, 0x37, 0x39, 0x37, 0x38, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x2c, 0x20, 0x32, // 177978515625), 2
	0x2e, 0x34, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x39, 0x35, 0x33, 0x36, 0x37, 0x34, 0x33, 0x31, // .400000095367431
	0x36, 0x34, 0x30, 0x36, 0x32, 0x35, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 640625);.       
	0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, //      break;.    
	0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, //     }.        br
	0x65, 0x61, 0x6b, 0x3b, 0x20, 0x2f, 0x2f, 0x20, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, // eak; // unreacha
	0x62, 0x6c, 0x65, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x61, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x0a, 0x20, // ble workaround. 
	0x20, 0x20, 0x20, 0x7d, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x28, 0x66, 0x61, 0x6c, 0x73, 0x65, //    } while(false
	0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x38, 0x30, // );.    float _80
	0x38, 0x20, 0x3d, 0x20, 0x5f, 0x37, 0x33, 0x38, 0x2e, 0x7a, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, // 8 = _738.z;.    
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x39, 0x38, 0x34, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, // float _984;.    
	0x64, 0x6f, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // do.    {.       
	0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, 0x38, 0x30, 0x38, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, //  if (_808 <= 0.0
	0x34, 0x30, 0x34, 0x34, 0x39, 0x39, 0x39, 0x39, 0x32, 0x37, 0x32, 0x38, 0x32, 0x33, 0x33, 0x33, // 4044999927282333
	0x33, 0x37, 0x34, 0x30, 0x32, 0x33, 0x34, 0x33, 0x37, 0x35, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, // 3740234375).    
	0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //     {.          
	0x20, 0x20, 0x5f, 0x39, 0x38, 0x34, 0x20, 0x3d, 0x20, 0x5f, 0x38, 0x30, 0x38, 0x20, 0x2a, 0x20, //   _984 = _808 * 
	0x30, 0x2e, 0x30, 0x37, 0x37, 0x33, 0x39, 0x39, 0x33, 0x38, 0x30, 0x35, 0x30, 0x35, 0x30, 0x38, // 0.07739938050508
	0x34, 0x39, 0x39, 0x31, 0x34, 0x35, 0x35, 0x30, 0x37, 0x38, 0x31, 0x32, 0x35, 0x3b, 0x0a, 0x20, // 4991455078125;. 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, //            break
	0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, // ;.        }.    
	0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //     else.       
	0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, //  {.            _
	0x39, 0x38, 0x34, 0x20, 0x3d, 0x20, 0x70, 0x6f, 0x77, 0x72, 0x28, 0x66, 0x6d, 0x61, 0x28, 0x5f, // 984 = powr(fma(_
	0x38, 0x30, 0x38, 0x2c, 0x20, 0x30, 0x2e, 0x39, 0x34, 0x37, 0x38, 0x36, 0x37, 0x32, 0x37, 0x34, // 808, 0.947867274
	0x32, 0x38, 0x34, 0x33, 0x36, 0x32, 0x37, 0x39, 0x32, 0x39, 0x36, 0x38, 0x37, 0x35, 0x2c, 0x20, // 28436279296875, 
	0x30, 0x2e, 0x30, 0x35, 0x32, 0x31, 0x33, 0x32, 0x36, 0x39, 0x39, 0x36, 0x33, 0x38, 0x36, 0x30, // 0.05213269963860
	0x35, 0x31, 0x31, 0x37, 0x37, 0x39, 0x37, 0x38, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x2c, // 51177978515625),
	0x20, 0x32, 0x2e, 0x34, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x39, 0x35, 0x33, 0x36, 0x37, 0x34, //  2.4000000953674
	0x33, 0x31, 0x36, 0x34, 0x30, 0x36, 0x32, 0x35, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // 31640625);.     
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, //        break;.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //       }.        
	0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x20, 0x2f, 0x2f, 0x20, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, // break; // unreac
	0x68, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x61, 0x72, 0x6f, 0x75, 0x6e, 0x64, // hable workaround
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x28, 0x66, 0x61, 0x6c, // .    } while(fal
	0x73, 0x65, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, // se);.    float4 
	0x5f, 0x38, 0x38, 0x32, 0x20, 0x3d, 0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x5f, // _882 = (float4(_
	0x39, 0x37, 0x36, 0x2c, 0x20, 0x5f, 0x39, 0x37, 0x37, 0x2c, 0x20, 0x5f, 0x39, 0x37, 0x38, 0x2c, // 976, _977, _978,
	0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, //  1.0) * _mtl_u.S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x2b, // tereo_LeftMat) +
	0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x39, 0x38, 0x32, 0x2c, 0x20, 0x5f, //  (float4(_982, _
	0x39, 0x38, 0x33, 0x2c, 0x20, 0x5f, 0x39, 0x38, 0x34, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, // 983, _984, 1.0) 
	0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // * _mtl_u.Stereo_
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, // RightMat);.    f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x38, 0x38, 0x37, 0x20, 0x3d, 0x20, 0x5f, 0x38, 0x38, 0x32, // loat _887 = _882
	0x2e, 0x78, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x39, // .x;.    float _9
	0x38, 0x38, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, 0x38, 0x38, 0x37, // 88;.    if (_887
	0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x33, 0x31, 0x33, 0x30, 0x38, 0x30, 0x30, 0x30, //  <= 0.0031308000
	0x39, 0x30, 0x37, 0x33, 0x30, 0x31, 0x39, 0x30, 0x32, 0x37, 0x37, 0x30, 0x39, 0x39, 0x36, 0x30, // 9073019027709960
	0x39, 0x33, 0x37, 0x35, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, // 9375).    {.    
	0x20, 0x20, 0x20, 0x20, 0x5f, 0x39, 0x38, 0x38, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, 0x32, //     _988 = 12.92
	0x30, 0x30, 0x30, 0x30, 0x30, 0x37, 0x36, 0x32, 0x39, 0x33, 0x39, 0x34, 0x35, 0x33, 0x31, 0x32, // 0000076293945312
	0x35, 0x20, 0x2a, 0x20, 0x5f, 0x38, 0x38, 0x37, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, // 5 * _887;.    }.
	0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, //     else.    {. 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x39, 0x38, 0x38, 0x20, 0x3d, 0x20, 0x66, 0x6d, //        _988 = fm
	0x61, 0x28, 0x31, 0x2e, 0x30, 0x35, 0x34, 0x39, 0x39, 0x39, 0x39, 0x34, 0x37, 0x35, 0x34, 0x37, // a(1.054999947547
	0x39, 0x31, 0x32, 0x35, 0x39, 0x37, 0x36, 0x35, 0x36, 0x32, 0x35, 0x2c, 0x20, 0x70, 0x6f, 0x77, // 91259765625, pow
	0x72, 0x28, 0x5f, 0x38, 0x38, 0x37, 0x2c, 0x20, 0x30, 0x2e, 0x34, 0x31, 0x36, 0x36, 0x36, 0x36, // r(_887, 0.416666
	0x36, 0x35, 0x36, 0x37, 0x33, 0x32, 0x35, 0x35, 0x39, 0x32, 0x30, 0x34, 0x31, 0x30, 0x31, 0x35, // 6567325592041015
	0x36, 0x32, 0x35, 0x29, 0x2c, 0x20, 0x2d, 0x30, 0x2e, 0x30, 0x35, 0x34, 0x39, 0x39, 0x39, 0x39, // 625), -0.0549999
	0x39, 0x39, 0x37, 0x30, 0x31, 0x39, 0x37, 0x36, 0x37, 0x37, 0x36, 0x31, 0x32, 0x33, 0x30, 0x34, // 9970197677612304
	0x36, 0x38, 0x37, 0x35, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, // 6875);.    }.   
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x38, 0x38, 0x39, 0x20, 0x3d, 0x20, 0x5f, 0x38, //  float _889 = _8
	0x38, 0x32, 0x2e, 0x79, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // 82.y;.    float 
	0x5f, 0x39, 0x38, 0x39, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, 0x38, // _989;.    if (_8
	0x38, 0x39, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x33, 0x31, 0x33, 0x30, 0x38, 0x30, // 89 <= 0.00313080
	0x30, 0x30, 0x39, 0x30, 0x37, 0x33, 0x30, 0x31, 0x39, 0x30, 0x32, 0x37, 0x37, 0x30, 0x39, 0x39, // 0090730190277099
	0x36, 0x30, 0x39, 0x33, 0x37, 0x35, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, // 609375).    {.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x39, 0x38, 0x39, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, //       _989 = 12.
	0x39, 0x32, 0x30, 0x30, 0x30, 0x30, 0x30, 0x37, 0x36, 0x32, 0x39, 0x33, 0x39, 0x34, 0x35, 0x33, // 9200000762939453
	0x31, 0x32, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x38, 0x38, 0x39, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, // 125 * _889;.    
	0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, // }.    else.    {
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x39, 0x38, 0x39, 0x20, 0x3d, 0x20, // .        _989 = 
	0x66, 0x6d, 0x61, 0x28, 0x31, 0x2e, 0x30, 0x35, 0x34, 0x39, 0x39, 0x39, 0x39, 0x34, 0x37, 0x35, // fma(1.0549999475
	0x34, 0x37, 0x39, 0x31, 0x32, 0x35, 0x39, 0x37, 0x36, 0x35, 0x36, 0x32, 0x35, 0x2c, 0x20, 0x70, // 4791259765625, p
	0x6f, 0x77, 0x72, 0x28, 0x5f, 0x38, 0x38, 0x39, 0x2c, 0x20, 0x30, 0x2e, 0x34, 0x31, 0x36, 0x36, // owr(_889, 0.4166
	0x36, 0x36, 0x36, 0x35, 0x36, 0x37, 0x33, 0x32, 0x35, 0x35, 0x39, 0x32, 0x30, 0x34, 0x31, 0x30, // 6665673255920410
	0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x2c, 0x20, 0x2d, 0x30, 0x2e, 0x30, 0x35, 0x34, 0x39, 0x39, // 15625), -0.05499
	0x39, 0x39, 0x39, 0x39, 0x37, 0x30, 0x31, 0x39, 0x37, 0x36, 0x37, 0x37, 0x36, 0x31, 0x32, 0x33, // 9999701976776123
	0x30, 0x34, 0x36, 0x38, 0x37, 0x35, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, // 046875);.    }. 
	0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x38, 0x39, 0x31, 0x20, 0x3d, 0x20, //    float _891 = 
	0x5f, 0x38, 0x38, 0x32, 0x2e, 0x7a, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, // _882.z;.    floa
	0x74, 0x20, 0x5f, 0x39, 0x39, 0x30, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, // t _990;.    if (
	0x5f, 0x38, 0x39, 0x31, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x33, 0x31, 0x33, 0x30, // _891 <= 0.003130
	0x38, 0x30, 0x30, 0x30, 0x39, 0x30, 0x37, 0x33, 0x30, 0x31, 0x39, 0x30, 0x32, 0x37, 0x37, 0x30, // 8000907301902770
	0x39, 0x39, 0x36, 0x30, 0x39, 0x33, 0x37, 0x35, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, // 99609375).    {.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x39, 0x39, 0x30, 0x20, 0x3d, 0x20, 0x31, //         _990 = 1
	0x32, 0x2e, 0x39, 0x32, 0x30, 0x30, 0x30, 0x30, 0x30, 0x37, 0x36, 0x32, 0x39, 0x33, 0x39, 0x34, // 2.92000007629394
	0x35, 0x33, 0x31, 0x32, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x38, 0x39, 0x31, 0x3b, 0x0a, 0x20, 0x20, // 53125 * _891;.  
	0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, //   }.    else.   
	0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x39, 0x39, 0x30, 0x20, //  {.        _990 
	0x3d, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x31, 0x2e, 0x30, 0x35, 0x34, 0x39, 0x39, 0x39, 0x39, 0x34, // = fma(1.05499994
	0x37, 0x35, 0x34, 0x37, 0x39, 0x31, 0x32, 0x35, 0x39, 0x37, 0x36, 0x35, 0x36, 0x32, 0x35, 0x2c, // 754791259765625,
	0x20, 0x70, 0x6f, 0x77, 0x72, 0x28, 0x5f, 0x38, 0x39, 0x31, 0x2c, 0x20, 0x30, 0x2e, 0x34, 0x31, //  powr(_891, 0.41
	0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x37, 0x33, 0x32, 0x35, 0x35, 0x39, 0x32, 0x30, 0x34, // 6666656732559204
	0x31, 0x30, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x2c, 0x20, 0x2d, 0x30, 0x2e, 0x30, 0x35, 0x34, // 1015625), -0.054
	0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x37, 0x30, 0x31, 0x39, 0x37, 0x36, 0x37, 0x37, 0x36, 0x31, // 9999997019767761
	0x32, 0x33, 0x30, 0x34, 0x36, 0x38, 0x37, 0x35, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, // 23046875);.    }
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x6f, 0x75, 0x74, 0x2e, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, // .    out.bgfx_Fr
	0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, // agData0 = float4
	0x28, 0x5f, 0x39, 0x38, 0x38, 0x2c, 0x20, 0x5f, 0x39, 0x38, 0x39, 0x2c, 0x20, 0x5f, 0x39, 0x39, // (_988, _989, _99
	0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, // 0, 1.0);.    ret
	0x75, 0x72, 0x6e, 0x20, 0x6f, 0x75, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x0a, 0x00, 0x00, 0xe0, 0x00, // urn out;.}......
};
static const uint8_t fs_pp_stereo_anaglyph_lin_srgb_nodesat_essl[11135] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6c, 0x2b, // FSH.o.><......l+
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x33, 0x32, 0x30, 0x20, 0x65, // ..#version 320 e
	0x73, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, // s.#define attrib
	0x75, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x76, // ute in.#define v
	0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, // arying in.precis
	0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3b, // ion highp float;
	0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, // .precision highp
	0x20, 0x69, 0x6e, 0x74, 0x3b, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x73, 0x68, //  int;.#define sh
	0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, // adow2D(_sampler,
	0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, //  _coord) texture
	0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, // (_sampler, _coor
	0x64, 0x29, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x73, 0x68, 0x61, 0x64, 0x6f, // d).#define shado
	0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // w2DProj(_sampler
	0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // , _coord) textur
	0x65, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, // eProj(_sampler, 
	0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x0a, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x65, 0x64, 0x69, // _coord).out medi
	0x75, 0x6d, 0x70, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, // ump vec4 bgfx_Fr
	0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, // agColor;.varying
	0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, //  vec2 v_texcoord
	0x30, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, // 0;.vec3 instMul(
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x20, // vec3 _vec, mat3 
	0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // _mtx) { return (
	0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, //  (_vec) * (_mtx)
	0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, //  ); }.vec3 instM
	0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, // ul(mat3 _mtx, ve
	0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, // c3 _vec) { retur
	0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, // n ( (_mtx) * (_v
	0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, // ec) ); }.vec4 in
	0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, // stMul(vec4 _vec,
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, //  mat4 _mtx) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, // turn ( (_vec) * 
	0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, // (_mtx) ); }.vec4
	0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, //  instMul(mat4 _m
	0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, // tx, vec4 _vec) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, //  return ( (_mtx)
	0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, //  * (_vec) ); }.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, 0x70, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, // loat rcp(float _
	0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x2f, // a) { return 1.0/
	0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, // _a; }.vec2 rcp(v
	0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // ec2 _a) { return
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, //  vec2(1.0)/_a; }
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, // .vec3 rcp(vec3 _
	0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, // a) { return vec3
	0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, // (1.0)/_a; }.vec4
	0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, //  rcp(vec4 _a) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x31, 0x2e, 0x30, 0x29, // return vec4(1.0)
	0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x65, 0x63, 0x32, // /_a; }.vec2 vec2
	0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, // _splat(float _x)
	0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, //  { return vec2(_
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, // x, _x); }.vec3 v
	0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // ec3_splat(float 
	0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, // _x) { return vec
	0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, // 3(_x, _x, _x); }
	0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, // .vec4 vec4_splat
	0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // (float _x) { ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, // urn vec4(_x, _x,
	0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, //  _x, _x); }.uvec
	0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, // 2 uvec2_splat(ui
	0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // nt _x) { return 
	0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, // uvec2(_x, _x); }
	0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, // .uvec3 uvec3_spl
	0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // at(uint _x) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, // turn uvec3(_x, _
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x34, 0x20, // x, _x); }.uvec4 
	0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, // uvec4_splat(uint
	0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, //  _x) { return uv
	0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, // ec4(_x, _x, _x, 
	0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, // _x); }.mat4 mtxF
	0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, // romRows(vec4 _0,
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, //  vec4 _1, vec4 _
	0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // 2, vec4 _3).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, // turn transpose(m
	0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, // at4(_0, _1, _2, 
	0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, // _3) );.}.mat4 mt
	0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, // xFromCols(vec4 _
	0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // 0, vec4 _1, vec4
	0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, //  _2, vec4 _3).{.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, // return mat4(_0, 
	0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, // _1, _2, _3);.}.m
	0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, // at3 mtxFromRows(
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, // vec3 _0, vec3 _1
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // , vec3 _2).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, // urn transpose(ma
	0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x20, 0x29, // t3(_0, _1, _2) )
	0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, // ;.}.mat3 mtxFrom
	0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, // Cols(vec3 _0, ve
	0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, // c3 _1, vec3 _2).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, // {.return mat3(_0
	0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, // , _1, _2);.}.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, // form vec4 u_view
	0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, // Rect;.uniform ve
	0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x54, 0x65, 0x78, 0x65, 0x6c, 0x3b, 0x0a, // c4 u_viewTexel;.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, // uniform mat4 u_v
	0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, // iew;.uniform mat
	0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, // 4 u_invView;.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x70, 0x72, 0x6f, 0x6a, // form mat4 u_proj
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, // ;.uniform mat4 u
	0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // _invProj;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, // m mat4 u_viewPro
	0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, // j;.uniform mat4 
	0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, // u_invViewProj;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, // niform mat4 u_mo
	0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // del[32];.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, //  mat4 u_modelVie
	0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, // w;.uniform mat4 
	0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, // u_modelViewProj;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, // .uniform vec4 u_
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x66, 0x34, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // alphaRef4;.float
	0x20, 0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, //  sqr(const float
	0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, //  v).{.return v*v
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, // ;.}.vec2 sqr(con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // st vec2 v).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // urn v*v;.}.vec3 
	0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, // sqr(const vec3 v
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, // ).{.return v*v;.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6d, 0x75, 0x6c, 0x5f, 0x77, 0x31, 0x28, 0x63, 0x6f, // }.vec3 mul_w1(co
	0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, // nst vec3 v, cons
	0x74, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, // t mat4 m).{.retu
	0x72, 0x6e, 0x20, 0x76, 0x2e, 0x78, 0x2a, 0x6d, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, // rn v.x*m[0].xyz 
	0x2b, 0x20, 0x28, 0x76, 0x2e, 0x79, 0x2a, 0x6d, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, // + (v.y*m[1].xyz 
	0x2b, 0x20, 0x28, 0x76, 0x2e, 0x7a, 0x2a, 0x6d, 0x5b, 0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, // + (v.z*m[2].xyz 
	0x2b, 0x20, 0x6d, 0x5b, 0x33, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // + m[3].xyz));.}.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, // float acos_appro
	0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // x_divPI(const fl
	0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // oat v).{.const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, // loat x = abs(v);
	0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, // .if(1. - x <= 0.
	0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, // 00006103515625).
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, // return (v >= 0.)
	0x20, 0x3f, 0x20, 0x30, 0x2e, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, //  ? 0. : 1.;.cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, // t float res = ((
	0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, // -0.155972/3.1415
	0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, // 9265358979323846
	0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, // 26433832795) * x
	0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, //  + (1.56467/3.14
	0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, // 1592653589793238
	0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, // 4626433832795) )
	0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, //  * sqrt(1. - x);
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, // .return (v >= 0.
	0x29, 0x20, 0x3f, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x72, // ) ? res : 1. - r
	0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x74, 0x61, 0x6e, // es;.}.float atan
	0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, // 2_approx_div2PI(
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x79, 0x2c, 0x20, 0x63, // const float y, c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x29, 0x0a, 0x7b, 0x0a, // onst float x).{.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, // const float abs_
	0x79, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x79, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // y = abs(y);.cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3d, 0x20, // t float abs_x = 
	0x61, 0x62, 0x73, 0x28, 0x78, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, // abs(x);.if(abs_x
	0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, //  <= 0.0000610351
	0x35, 0x36, 0x32, 0x35, 0x20, 0x26, 0x26, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3c, 0x3d, // 5625 && abs_y <=
	0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, //  0.0000610351562
	0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x30, 0x2e, 0x3b, 0x0a, 0x63, 0x6f, // 5).return 0.;.co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x61, // nst float r = (a
	0x62, 0x73, 0x5f, 0x78, 0x20, 0x2d, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x20, 0x2f, 0x20, // bs_x - abs_y) / 
	0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2b, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x3b, // (abs_x + abs_y);
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x6e, 0x67, // .const float ang
	0x6c, 0x65, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, // le = ((x < 0.) ?
	0x20, 0x28, 0x33, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x20, 0x3a, 0x20, 0x28, 0x31, 0x2e, 0x2f, 0x38, //  (3./8.) : (1./8
	0x2e, 0x29, 0x29, 0x0a, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x32, 0x31, 0x31, 0x38, 0x36, 0x38, 0x20, // .)).+ (0.211868 
	0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, // /(2.*3.141592653
	0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, // 5897932384626433
	0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x72, 0x20, 0x2a, 0x20, 0x72, 0x20, // 832795) * r * r 
	0x2d, 0x20, 0x30, 0x2e, 0x39, 0x38, 0x37, 0x33, 0x30, 0x35, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, // - 0.987305 /(2.*
	0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, // 3.14159265358979
	0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, // 3238462643383279
	0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, // 5)) * ((x < 0.) 
	0x3f, 0x20, 0x2d, 0x72, 0x20, 0x3a, 0x20, 0x72, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // ? -r : r);.retur
	0x6e, 0x20, 0x28, 0x79, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x61, 0x6e, // n (y < 0.) ? -an
	0x67, 0x6c, 0x65, 0x20, 0x3a, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // gle : angle;.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x73, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, // loat asin_approx
	0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, // _divPI(const flo
	0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // at v).{.const fl
	0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, // oat x = abs(v);.
	0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, // if(1. - x <= 0.0
	0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, // 0006103515625).r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, // eturn (v >= 0.) 
	0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x3b, 0x0a, 0x63, 0x6f, // ? 0.5 : -0.5;.co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, // nst float res = 
	0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, // ((-0.155972/3.14
	0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, // 1592653589793238
	0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, // 4626433832795) *
	0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, //  x + (1.56467/3.
	0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, // 1415926535897932
	0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, // 384626433832795)
	0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, //  ) * sqrt(1. - x
	0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, // );.return (v >= 
	0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x20, // 0.) ? 0.5 - res 
	0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, // : -0.5 + res;.}.
	0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x61, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x71, 0x75, 0x69, // vec2 ray_to_equi
	0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x75, 0x76, 0x28, 0x63, // rectangular_uv(c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x61, 0x79, 0x29, 0x0a, 0x7b, // onst vec3 ray).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x0a, 0x30, 0x2e, // .return vec2(.0.
	0x35, 0x20, 0x2b, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, // 5 + atan2_approx
	0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x79, 0x2c, 0x20, 0x72, // _div2PI(ray.y, r
	0x61, 0x79, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, // ay.x),.acos_appr
	0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x7a, 0x29, 0x29, // ox_divPI(ray.z))
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, // ;.}.float InvsRG
	0x42, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, // B(const float co
	0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // lor).{.if (color
	0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, 0x34, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, //  <= 0.04045).ret
	0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, // urn color * (1.0
	0x2f, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, // /12.92);.else.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, // turn pow(color *
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x28, //  (1.0/1.055) + (
	0x30, 0x2e, 0x30, 0x35, 0x35, 0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, // 0.055/1.055), 2.
	0x34, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x52, // 4);.}.float InvR
	0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, // ec709(const floa
	0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, // t color).{.if (c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x38, 0x31, 0x29, 0x0a, 0x72, // olor <= 0.081).r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, // eturn color * (1
	0x2e, 0x30, 0x2f, 0x34, 0x2e, 0x35, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, // .0/4.5);.else.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, // turn pow(color *
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, 0x20, 0x2b, 0x20, 0x28, //  (1.0/1.099) + (
	0x30, 0x2e, 0x30, 0x39, 0x39, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, 0x2c, 0x20, 0x31, 0x2e, // 0.099/1.099), 1.
	0x30, 0x2f, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // 0/0.45);.}.float
	0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, //  InvGamma(const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, // float color).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, // eturn InvsRGB(co
	0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, // lor);.}.vec3 Inv
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, // Gamma(const vec3
	0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, //  color).{.return
	0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, //  vec3(InvGamma(c
	0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, // olor.x),InvGamma
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, // (color.y),InvGam
	0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // ma(color.z));.}.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, // vec3 InvToneMap(
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // const vec3 color
	0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // ).{.const float 
	0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x30, 0x2e, 0x35, 0x2f, 0x30, 0x2e, // inv_2bh = 0.5/0.
	0x32, 0x35, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // 25;.const float 
	0x62, 0x68, 0x20, 0x3d, 0x20, 0x34, 0x2e, 0x30, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2d, 0x20, // bh = 4.0*0.25 - 
	0x32, 0x2e, 0x30, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6c, // 2.0;.return (col
	0x6f, 0x72, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2b, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, // or - 1.0 + sqrt(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2a, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x20, 0x62, // color*(color + b
	0x68, 0x29, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x2a, 0x69, 0x6e, 0x76, 0x5f, 0x32, // h) + 1.0))*inv_2
	0x62, 0x68, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x52, 0x47, 0x42, // bh;.}.float sRGB
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, // (const float f).
	0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, // {.float s;.if (f
	0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x33, 0x31, 0x33, 0x30, 0x38, 0x29, 0x0a, 0x73, //  <= 0.0031308).s
	0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, //  = 12.92 * f;.el
	0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x20, 0x2a, 0x20, 0x70, // se.s = 1.055 * p
	0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x34, 0x29, 0x20, 0x2d, // ow(f, 1.0/2.4) -
	0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, //  0.055;.return s
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, // ;.}.float Rec709
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, // (const float f).
	0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, // {.float s;.if (f
	0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x34, //  <= 0.018).s = 4
	0x2e, 0x35, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, // .5 * f;.else.s =
	0x20, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, //  1.099 * pow(f, 
	0x30, 0x2e, 0x34, 0x35, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x3b, 0x0a, 0x72, // 0.45) - 0.099;.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // eturn s;.}.float
	0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, //  FBGamma(const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // loat color).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, // turn sRGB(color)
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, // ;.}.vec2 FBGamma
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // (const vec2 colo
	0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, // r).{.return vec2
	0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, // (FBGamma(color.x
	0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, // ),FBGamma(color.
	0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, // y));.}.vec3 FBGa
	0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, // mma(const vec3 c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // olor).{.return v
	0x65, 0x63, 0x33, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // ec3(FBGamma(colo
	0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, // r.x),FBGamma(col
	0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, // or.y),FBGamma(co
	0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // lor.z));.}.vec3 
	0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x32, 0x32, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // FBGamma22(const 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // vec3 color).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, // turn vec3(pow(co
	0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, // lor.x, 1.0/2.2),
	0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, 0x30, // pow(color.y, 1.0
	0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, // /2.2),pow(color.
	0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // z, 1.0/2.2));.}.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, // float FBToneMap(
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x29, 0x0a, 0x7b, // const float l).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6c, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, // .return l * ((l*
	0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, // 0.25 + 1.0) / (l
	0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, //  + 1.0));.}.vec2
	0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, //  FBToneMap(const
	0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x63, //  vec2 color).{.c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, // onst float l = d
	0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, // ot(color,vec2(0.
	0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, // 176204+0.0108109
	0x2a, 0x30, 0x2e, 0x35, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2b, 0x30, 0x2e, // *0.5,0.812985+0.
	0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x3b, 0x0a, 0x72, // 0108109*0.5));.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, // eturn color * ((
	0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, // l*0.25 + 1.0) / 
	0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // (l + 1.0));.}.ve
	0x63, 0x33, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, // c3 FBToneMap(con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, // st vec3 color).{
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, // .const float l =
	0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x33, 0x28, //  dot(color,vec3(
	0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, // 0.176204,0.81298
	0x35, 0x2c, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x29, 0x29, 0x3b, 0x0a, 0x72, // 5,0.0108109));.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, // eturn color * ((
	0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, // l*0.25 + 1.0) / 
	0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // (l + 1.0));.}.ve
	0x63, 0x34, 0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x28, 0x63, 0x6f, 0x6e, 0x73, // c4 Additive(cons
	0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, // t vec4 cBase, co
	0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, // nst vec4 cBlend,
	0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, //  const float per
	0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, // cent).{.return c
	0x42, 0x61, 0x73, 0x65, 0x20, 0x2b, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, // Base + cBlend*pe
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, // rcent;.}.vec3 Sc
	0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, // reen (const vec3
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, //  cBase, const ve
	0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // c3 cBlend).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, // urn 1.0 - (1.0 -
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, //  cBase) * (1.0 -
	0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, //  cBlend);.}.vec4
	0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, //  Screen (const v
	0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, // ec4 cBase, const
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, //  vec4 cBlend).{.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, // return 1.0 - (1.
	0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, // 0 - cBase) * (1.
	0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // 0 - cBlend);.}.v
	0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x63, // ec3 ScreenHDR (c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, // onst vec3 cBase,
	0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, //  const vec3 cBle
	0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, // nd).{.return max
	0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, // (1.0 - (1.0 - cB
	0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, // ase) * (1.0 - cB
	0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x2c, 0x30, // lend), vec3(0.,0
	0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, // .,0.));.}.vec4 S
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // creenHDR (const 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, // vec4 cBase, cons
	0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, // t vec4 cBlend).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, // .return max(1.0 
	0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, // - (1.0 - cBase) 
	0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, // * (1.0 - cBlend)
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, // , vec4(0.,0.,0.,
	0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4d, 0x75, 0x6c, // 0.));.}.vec4 Mul
	0x74, 0x69, 0x70, 0x6c, 0x79, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, // tiply (const vec
	0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, // 4 cBase, const v
	0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, // ec4 cBlend, cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, // t float percent)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, // .{.return cBase 
	0x2a, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, // * cBlend*percent
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, // ;.}.vec4 Overlay
	0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, //  (const vec4 cBa
	0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, // se, const vec4 c
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, // Blend).{.vec4 cN
	0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, // ew = step(0.5, c
	0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x69, // Base);.cNew = mi
	0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, // x(cBase*cBlend*2
	0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, // .0, 1.0-2.0*(1.0
	0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, // -cBase)*(1.0-cBl
	0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, // end), cNew);.ret
	0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, // urn cNew;.}.vec4
	0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x48, 0x44, 0x52, 0x20, 0x28, 0x63, 0x6f, 0x6e, //  OverlayHDR (con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, // st vec4 cBase, c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, // onst vec4 cBlend
	0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, // ).{.vec4 cNew = 
	0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, // step(0.5, cBase)
	0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x6d, 0x69, 0x78, // ;.cNew = max(mix
	0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, // (cBase*cBlend*2.
	0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, // 0, 1.0-2.0*(1.0-
	0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, // cBase)*(1.0-cBle
	0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // nd), cNew), vec4
	0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, // (0.,0.,0.,0.));.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // return cNew;.}.v
	0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x73, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, // ec3 cos_hemisphe
	0x72, 0x65, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // re_sample(const 
	0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // vec2 t).{.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x68, 0x69, 0x20, 0x3d, 0x20, 0x74, 0x2e, 0x79, 0x20, // float phi = t.y 
	0x2a, 0x20, 0x28, 0x32, 0x2e, 0x30, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, // * (2.0*3.1415926
	0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, // 5358979323846264
	0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, // 33832795);.const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, //  float cosTheta 
	0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x74, 0x2e, 0x78, // = sqrt(1.0 - t.x
	0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, // );.const float s
	0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x74, // inTheta = sqrt(t
	0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x70, 0x2c, 0x63, 0x70, // .x);.float sp,cp
	0x3b, 0x0a, 0x73, 0x69, 0x6e, 0x63, 0x6f, 0x73, 0x28, 0x70, 0x68, 0x69, 0x2c, 0x73, 0x70, 0x2c, // ;.sincos(phi,sp,
	0x63, 0x70, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, // cp);.return vec3
	0x28, 0x63, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, // (cp * sinTheta, 
	0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x73, 0x70, 0x20, 0x2a, 0x20, 0x73, // cosTheta, sp * s
	0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, // inTheta);.}.vec3
	0x20, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, //  rotate_to_vecto
	0x72, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // r_upper(const ve
	0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // c3 vec, const ve
	0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x28, // c3 normal).{.if(
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x3e, 0x20, 0x2d, 0x30, 0x2e, 0x39, 0x39, // normal.y > -0.99
	0x39, 0x39, 0x39, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, // 999).{.const flo
	0x61, 0x74, 0x20, 0x68, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x28, 0x31, 0x2e, 0x30, 0x2b, // at h = 1.0/(1.0+
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, // normal.y);.const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x20, 0x3d, 0x20, 0x68, 0x2a, 0x6e, 0x6f, //  float hz = h*no
	0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // rmal.z;.const fl
	0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x3d, 0x20, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, // oat hzx = hz*nor
	0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, // mal.x;.return ve
	0x63, 0x33, 0x28, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, // c3(.vec.x * (nor
	0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, // mal.y+hz*normal.
	0x7a, 0x29, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, // z) + vec.y * nor
	0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, // mal.x - vec.z * 
	0x68, 0x7a, 0x78, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, // hzx,.vec.y * nor
	0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, // mal.y - vec.x * 
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, // normal.x - vec.z
	0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x2c, 0x0a, 0x76, 0x65, 0x63, //  * normal.z,.vec
	0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x20, 0x2d, 0x20, // .y * normal.z - 
	0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x2b, 0x20, 0x76, 0x65, // vec.x * hzx + ve
	0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, // c.z * (normal.y+
	0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, // h*normal.x*norma
	0x6c, 0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x72, 0x65, // l.x));.}.else re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x2d, 0x76, 0x65, 0x63, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, // turn -vec;.}.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // form vec4 Stereo
	0x5f, 0x53, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x0a, 0x75, 0x6e, 0x69, // _Saturation;.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // form vec4 Stereo
	0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x3b, 0x0a, 0x75, // _MS_ZPD_YAxis;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, // niform sampler2D
	0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x3b, 0x0a, //  tex_stereo_fb;.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, // uniform sampler2
	0x44, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, // D tex_stereo_dep
	0x74, 0x68, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, // th;.uniform vec4
	0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, 0x76, 0x65, 0x63, //  w_h_height;.vec
	0x33, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, // 3 gatherEyeColor
	0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x69, 0x73, // (vec2 u, bool is
	0x4c, 0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x62, 0x6f, // Left).{.const bo
	0x6f, 0x6c, 0x20, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, // ol yaxis = (Ster
	0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, // eo_MS_ZPD_YAxis.
	0x7a, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // z != 0.);.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // float MaxSeparat
	0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, // ion = (Stereo_MS
	0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x69, // _ZPD_YAxis.x);.i
	0x66, 0x20, 0x28, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, // f (isLeft).{.con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, // st float lminDep
	0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, // th = min(min(tex
	0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // tureLod(tex_ster
	0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, // eo_depth, u + (y
	0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, // axis ? vec2(0.0,
	0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, //  0.500 * MaxSepa
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, // ration) : vec2(0
	0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, // .500 * MaxSepara
	0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, // tion, 0.0)), 0.0
	0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, // ).x,.textureLod(
	0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, // tex_stereo_depth
	0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, // , u + (yaxis ? v
	0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, // ec2(0.0, 0.666 *
	0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, //  MaxSeparation) 
	0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, // : vec2(0.666 * M
	0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, // axSeparation, 0.
	0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, // 0)), 0.0).x),.te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, // xtureLod(tex_ste
	0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, // reo_depth, u + (
	0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, // yaxis ? vec2(0.0
	0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, // , MaxSeparation)
	0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, //  : vec2( MaxSepa
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, // ration, 0.0)), 0
	0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x70, // .0).x);.float lp
	0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, // arallax = max(0.
	0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, // 0, w_h_height.w 
	0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, // + MaxSeparation 
	0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, // * (1.0 - 1.0 / (
	0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, // 0.5 + lminDepth 
	0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // * (1.0 / (Stereo
	0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, // _MS_ZPD_YAxis.y)
	0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, //  - 0.5))));.retu
	0x72, 0x6e, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, // rn textureLod(te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2b, // x_stereo_fb, u +
	0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, //  (yaxis ? vec2(0
	0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, // .0, -lparallax) 
	0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, // : vec2(lparallax
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, // , 0.0)), 0.0).xy
	0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // z;.}.else.{.cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, // t float rminDept
	0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, // h = min(min(text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // ureLod(tex_stere
	0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, // o_depth, u - (ya
	0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, // xis ? vec2(0.0, 
	0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, // 0.500 * MaxSepar
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, // ation) : vec2(0.
	0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // 500 * MaxSeparat
	0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // ion, 0.0)), 0.0)
	0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, // .x,.textureLod(t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, // ex_stereo_depth,
	0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, //  u - (yaxis ? ve
	0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, // c2(0.0, 0.666 * 
	0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, // MaxSeparation) :
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, //  vec2(0.666 * Ma
	0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, // xSeparation, 0.0
	0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, // )), 0.0).x),.tex
	0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // tureLod(tex_ster
	0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, // eo_depth, u - (y
	0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, // axis ? vec2(0.0,
	0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, //  MaxSeparation) 
	0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, // : vec2( MaxSepar
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, // ation, 0.0)), 0.
	0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x70, 0x61, // 0).x);.float rpa
	0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, // rallax = max(0.0
	0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, // , w_h_height.w +
	0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, //  MaxSeparation *
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, //  (1.0 - 1.0 / (0
	0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, // .5 + rminDepth *
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, //  (1.0 / (Stereo_
	0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, // MS_ZPD_YAxis.y) 
	0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // - 0.5))));.retur
	0x6e, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, // n textureLod(tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, // _stereo_fb, u - 
	0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, // (yaxis ? vec2(0.
	0x30, 0x2c, 0x20, 0x2d, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, // 0, -rparallax) :
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, //  vec2(rparallax,
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, //  0.0)), 0.0).xyz
	0x3b, 0x0a, 0x7d, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, // ;.}.}.void gathe
	0x72, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, // rLeftRightColors
	0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, // (vec2 u, out vec
	0x33, 0x20, 0x6c, 0x63, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, // 3 lcol, out vec3
	0x20, 0x72, 0x63, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x62, //  rcol).{.const b
	0x6f, 0x6f, 0x6c, 0x20, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, // ool yaxis = (Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, // reo_MS_ZPD_YAxis
	0x2e, 0x7a, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, // .z != 0.);.const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, //  float MaxSepara
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, // tion = (Stereo_M
	0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x3b, 0x0a, // S_ZPD_YAxis.x);.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x6d, 0x69, 0x6e, // const float lmin
	0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, // Depth = min(min(
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, // textureLod(tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, // tereo_depth, u +
	0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, //  (yaxis ? vec2(0
	0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, // .0, 0.500 * MaxS
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, // eparation) : vec
	0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // 2(0.500 * MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, // aration, 0.0)), 
	0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, // 0.0).x,.textureL
	0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, // od(tex_stereo_de
	0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, // pth, u + (yaxis 
	0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, // ? vec2(0.0, 0.66
	0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, // 6 * MaxSeparatio
	0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, // n) : vec2(0.666 
	0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, // * MaxSeparation,
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, //  0.0)), 0.0).x),
	0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, // .textureLod(tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, // stereo_depth, u 
	0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // + (yaxis ? vec2(
	0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // 0.0, MaxSeparati
	0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, // on) : vec2( MaxS
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, // eparation, 0.0))
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // , 0.0).x);.float
	0x20, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, //  lparallax = max
	0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, // (0.0, w_h_height
	0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // .w + MaxSeparati
	0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, // on * (1.0 - 1.0 
	0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, // / (0.5 + lminDep
	0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, // th * (1.0 / (Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, // reo_MS_ZPD_YAxis
	0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x6c, // .y) - 0.5))));.l
	0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, // col = textureLod
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, // (tex_stereo_fb, 
	0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, // u + (yaxis ? vec
	0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, // 2(0.0, -lparalla
	0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, // x) : vec2(lparal
	0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // lax, 0.0)), 0.0)
	0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, // .xyz;.const floa
	0x74, 0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, // t rminDepth = mi
	0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, // n(min(textureLod
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, // (tex_stereo_dept
	0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, // h, u - (yaxis ? 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, // vec2(0.0, 0.500 
	0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, // * MaxSeparation)
	0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, //  : vec2(0.500 * 
	0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, // MaxSeparation, 0
	0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, // .0)), 0.0).x,.te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, // xtureLod(tex_ste
	0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, // reo_depth, u - (
	0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, // yaxis ? vec2(0.0
	0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // , 0.666 * MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // aration) : vec2(
	0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, // 0.666 * MaxSepar
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, // ation, 0.0)), 0.
	0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, // 0).x),.textureLo
	0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, // d(tex_stereo_dep
	0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, // th, u - (yaxis ?
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, //  vec2(0.0, MaxSe
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, // paration) : vec2
	0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, // ( MaxSeparation,
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, //  0.0)), 0.0).x);
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, // .float rparallax
	0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, //  = max(0.0, w_h_
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, // height.w + MaxSe
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, // paration * (1.0 
	0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, // - 1.0 / (0.5 + r
	0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, // minDepth * (1.0 
	0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, // / (Stereo_MS_ZPD
	0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, // _YAxis.y) - 0.5)
	0x29, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, // )));.rcol = text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // ureLod(tex_stere
	0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, // o_fb, u - (yaxis
	0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x72, 0x70, //  ? vec2(0.0, -rp
	0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // arallax) : vec2(
	0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, // rparallax, 0.0))
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, // , 0.0).xyz;.}.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // iform mat4 Stere
	0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, // o_LeftMat;.unifo
	0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, // rm mat4 Stereo_R
	0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // ightMat;.uniform
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, //  vec4 Stereo_Lef
	0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, // tLuminance_Gamma
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, // ;.uniform vec4 S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, // tereo_RightLumin
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x3b, 0x0a, 0x76, // ance_DynDesat;.v
	0x6f, 0x69, 0x64, 0x20, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x65, 0x73, 0x61, 0x74, // oid DynamicDesat
	0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, // Anaglyph(const v
	0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // ec3 lCol, const 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, // vec3 rCol, out v
	0x65, 0x63, 0x33, 0x20, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, // ec3 lDesatCol, o
	0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, // ut vec3 rDesatCo
	0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // l).{.const float
	0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, //  left2LeftLum = 
	0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // dot(lCol, Stereo
	0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, // _LeftLuminance_G
	0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, // amma.xyz);.const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, //  float left2Righ
	0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, // tLum = dot(lCol,
	0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, //  Stereo_RightLum
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, // inance_DynDesat.
	0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, // xyz);.const floa
	0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, // t right2LeftLum 
	0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, // = dot(rCol, Ster
	0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, // eo_LeftLuminance
	0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, // _Gamma.xyz);.con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, // st float right2R
	0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, // ightLum = dot(rC
	0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, // ol, Stereo_Right
	0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, // Luminance_DynDes
	0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // at.xyz);.const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x6c, // loat leftLum = l
	0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x6c, 0x65, // eft2LeftLum + le
	0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, // ft2RightLum;.con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // st float rightLu
	0x6d, 0x20, 0x3d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, // m = right2LeftLu
	0x6d, 0x20, 0x2b, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, // m + right2RightL
	0x75, 0x6d, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // um;.const float 
	0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, // leftDesat = Ster
	0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, // eo_RightLuminanc
	0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, // e_DynDesat.w * a
	0x62, 0x73, 0x28, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // bs((left2LeftLum
	0x20, 0x2d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, //  - left2RightLum
	0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, // ) / (leftLum + 0
	0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // .0001));.const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x20, // loat rightDesat 
	0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // = Stereo_RightLu
	0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, // minance_DynDesat
	0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, // .w * abs((right2
	0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, // LeftLum - right2
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x72, 0x69, 0x67, // RightLum) / (rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, 0x29, // htLum + 0.0001))
	0x3b, 0x0a, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, // ;.lDesatCol = mi
	0x78, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, // x(lCol, vec3_spl
	0x61, 0x74, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x66, // at(leftLum), lef
	0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x72, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, // tDesat);.rDesatC
	0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, // ol = mix(rCol, v
	0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, // ec3_splat(rightL
	0x75, 0x6d, 0x29, 0x2c, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, // um), rightDesat)
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x41, // ;.}.vec3 LinearA
	0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // naglyph(const ve
	0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, // c3 lCol, const v
	0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // ec3 rCol).{.cons
	0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x28, // t vec3 color = (
	0x28, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, // ( (vec4(lCol, 1.
	0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, // )) * (Stereo_Lef
	0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x20, 0x28, 0x76, 0x65, 0x63, // tMat) ) + ( (vec
	0x34, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, // 4(rCol, 1.)) * (
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x29, // Stereo_RightMat)
	0x20, 0x29, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, //  )).rgb;.return 
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // color;.}.uniform
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, //  vec4 Stereo_Deg
	0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, // hostGamma;.unifo
	0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, // rm mat4 Stereo_D
	0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3b, 0x0a, 0x76, 0x65, // eghostFilter;.ve
	0x63, 0x33, 0x20, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, // c3 DeghostAnagly
	0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, // ph(const vec3 lC
	0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, // ol, const vec3 r
	0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, // Col).{.const vec
	0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, // 3 color = Linear
	0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, // Anaglyph(lCol, r
	0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, // Col);.return ( (
	0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // pow(color, Stere
	0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x72, // o_DeghostGamma.r
	0x67, 0x62, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x53, 0x74, 0x65, // gb)) * (mat3(Ste
	0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, // reo_DeghostFilte
	0x72, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // r[0].xyz, Stereo
	0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x31, // _DeghostFilter[1
	0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, // ].xyz, Stereo_De
	0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x32, 0x5d, 0x2e, 0x78, // ghostFilter[2].x
	0x79, 0x7a, 0x29, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x6d, // yz)) );.}.void m
	0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, // ain().{.vec3 lCo
	0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x3b, 0x0a, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, // l, rCol;.gatherL
	0x65, 0x66, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x28, 0x76, // eftRightColors(v
	0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2c, 0x20, 0x6c, 0x43, 0x6f, 0x6c, // _texcoord0, lCol
	0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x6c, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, // , rCol);.lCol = 
	0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, // InvGamma(lCol);.
	0x72, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, // rCol = InvGamma(
	0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // rCol);.vec3 colo
	0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, // r = LinearAnagly
	0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, // ph(lCol, rCol);.
	0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, // bgfx_FragColor =
	0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, //  vec4(FBGamma(co
	0x6c, 0x6f, 0x72, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x00,       // lor), 1.0);.}..
};
static const uint8_t fs_pp_stereo_anaglyph_lin_srgb_nodesat_glsl[11505] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xde, 0x2c, // FSH.o.><.......,
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x34, 0x34, 0x30, 0x0a, 0x6f, // ..#version 440.o
	0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, // ut vec4 bgfx_Fra
	0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, // gColor;.#define 
	0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x62, 0x67, 0x66, // gl_FragColor bgf
	0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x0a, 0x23, 0x64, 0x65, 0x66, // x_FragColor.#def
	0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x20, 0x20, 0x20, // ine texture2D   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x0a, 0x23, //        texture.#
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, // define texture2D
	0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // Lod       textur
	0x65, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, // eLod.#define tex
	0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ture2DGrad      
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, // textureGrad.#def
	0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, // ine texture2DPro
	0x6a, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, // jLod   texturePr
	0x6f, 0x6a, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, // ojLod.#define te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, 0x20, // xture2DProjGrad 
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, //  textureProjGrad
	0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // .#define texture
	0x43, 0x75, 0x62, 0x65, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, // CubeLod     text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, // ureLod.#define t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, // extureCubeGrad  
	0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, //   textureGrad.#d
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x33, 0x44, 0x20, // efine texture3D 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, //          texture
	0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // .#define texture
	0x32, 0x44, 0x4c, 0x6f, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x20, 0x74, 0x65, 0x78, 0x74, // 2DLodOffset text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x0a, 0x23, 0x64, 0x65, // ureLodOffset.#de
	0x66, 0x69, 0x6e, 0x65, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x69, // fine attribute i
	0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, // n.#define varyin
	0x67, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x62, 0x67, 0x66, // g in.#define bgf
	0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, // xShadow2D(_sampl
	0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, // er, _coord)     
	0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, // vec4_splat(textu
	0x72, 0x65, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, // re(_sampler, _co
	0x6f, 0x72, 0x64, 0x29, 0x20, 0x29, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x62, // ord) ).#define b
	0x67, 0x66, 0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x28, // gfxShadow2DProj(
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, // _sampler, _coord
	0x29, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, // ) vec4_splat(tex
	0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // tureProj(_sample
	0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x29, 0x0a, 0x76, 0x61, 0x72, // r, _coord) ).var
	0x79, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, // ying vec2 v_texc
	0x6f, 0x6f, 0x72, 0x64, 0x30, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, // oord0;.vec3 inst
	0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, // Mul(vec3 _vec, m
	0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // at3 _mtx) { retu
	0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, // rn ( (_vec) * (_
	0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, // mtx) ); }.vec3 i
	0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, // nstMul(mat3 _mtx
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, // , vec3 _vec) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, // eturn ( (_mtx) *
	0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, //  (_vec) ); }.vec
	0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, // 4 instMul(vec4 _
	0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, // vec, mat4 _mtx) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, // { return ( (_vec
	0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, // ) * (_mtx) ); }.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, // vec4 instMul(mat
	0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, // 4 _mtx, vec4 _ve
	0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, // c) { return ( (_
	0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, // mtx) * (_vec) );
	0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, 0x70, 0x28, 0x66, 0x6c, 0x6f, //  }.float rcp(flo
	0x61, 0x74, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // at _a) { return 
	0x31, 0x2e, 0x30, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, // 1.0/_a; }.vec2 r
	0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // cp(vec2 _a) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, // turn vec2(1.0)/_
	0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, // a; }.vec3 rcp(ve
	0x63, 0x33, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // c3 _a) { return 
	0x76, 0x65, 0x63, 0x33, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, // vec3(1.0)/_a; }.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x61, // vec4 rcp(vec4 _a
	0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, // ) { return vec4(
	0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, // 1.0)/_a; }.vec2 
	0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, // vec2_splat(float
	0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, //  _x) { return ve
	0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, // c2(_x, _x); }.ve
	0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, // c3 vec3_splat(fl
	0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // oat _x) { return
	0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, //  vec3(_x, _x, _x
	0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, // ); }.vec4 vec4_s
	0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, // plat(float _x) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, //  return vec4(_x,
	0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, //  _x, _x, _x); }.
	0x75, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, // uvec2 uvec2_spla
	0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // t(uint _x) { ret
	0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, // urn uvec2(_x, _x
	0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, // ); }.uvec3 uvec3
	0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, // _splat(uint _x) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, // { return uvec3(_
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, // x, _x, _x); }.uv
	0x65, 0x63, 0x34, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, // ec4 uvec4_splat(
	0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, // uint _x) { retur
	0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, // n uvec4(_x, _x, 
	0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, // _x, _x); }.mat4 
	0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, // mtxFromRows(vec4
	0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, //  _0, vec4 _1, ve
	0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, // c4 _2, vec4 _3).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, // {.return transpo
	0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, // se(mat4(_0, _1, 
	0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, // _2, _3) );.}.mat
	0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, // 4 mtxFromCols(ve
	0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, // c4 _0, vec4 _1, 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, // vec4 _2, vec4 _3
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x28, // ).{.return mat4(
	0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x3b, // _0, _1, _2, _3);
	0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, // .}.mat3 mtxFromR
	0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, // ows(vec3 _0, vec
	0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, // 3 _1, vec3 _2).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, // .return transpos
	0x65, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, // e(mat3(_0, _1, _
	0x32, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, // 2) );.}.mat3 mtx
	0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, // FromCols(vec3 _0
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // , vec3 _1, vec3 
	0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, // _2).{.return mat
	0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x3b, 0x0a, 0x7d, // 3(_0, _1, _2);.}
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, // .uniform vec4 u_
	0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // viewRect;.unifor
	0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x54, 0x65, 0x78, // m vec4 u_viewTex
	0x65, 0x6c, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, // el;.uniform mat4
	0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, //  u_view;.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x3b, //  mat4 u_invView;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, // .uniform mat4 u_
	0x70, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, // proj;.uniform ma
	0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, // t4 u_invProj;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, // iform mat4 u_vie
	0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, // wProj;.uniform m
	0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, // at4 u_invViewPro
	0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, // j;.uniform mat4 
	0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, 0x3b, 0x0a, 0x75, 0x6e, 0x69, // u_model[32];.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, // form mat4 u_mode
	0x6c, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, // lView;.uniform m
	0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x50, // at4 u_modelViewP
	0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, // roj;.uniform vec
	0x34, 0x20, 0x75, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x66, 0x34, 0x3b, 0x0a, 0x66, // 4 u_alphaRef4;.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // loat sqr(const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // loat v).{.return
	0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x73, 0x71, 0x72, //  v*v;.}.vec2 sqr
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x29, 0x0a, 0x7b, // (const vec2 v).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // .return v*v;.}.v
	0x65, 0x63, 0x33, 0x20, 0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // ec3 sqr(const ve
	0x63, 0x33, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // c3 v).{.return v
	0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6d, 0x75, 0x6c, 0x5f, 0x77, // *v;.}.vec3 mul_w
	0x31, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x2c, 0x20, // 1(const vec3 v, 
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x29, 0x0a, 0x7b, 0x0a, // const mat4 m).{.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2e, 0x78, 0x2a, 0x6d, 0x5b, 0x30, 0x5d, 0x2e, // return v.x*m[0].
	0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x79, 0x2a, 0x6d, 0x5b, 0x31, 0x5d, 0x2e, // xyz + (v.y*m[1].
	0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x7a, 0x2a, 0x6d, 0x5b, 0x32, 0x5d, 0x2e, // xyz + (v.z*m[2].
	0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x6d, 0x5b, 0x33, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, // xyz + m[3].xyz))
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, // ;.}.float acos_a
	0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x63, 0x6f, 0x6e, 0x73, // pprox_divPI(cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, // t float v).{.con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, // st float x = abs
	0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, // (v);.if(1. - x <
	0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, // = 0.000061035156
	0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, // 25).return (v >=
	0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x3b, 0x0a, //  0.) ? 0. : 1.;.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, 0x20, // const float res 
	0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, // = ((-0.155972/3.
	0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, // 1415926535897932
	0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, // 384626433832795)
	0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, //  * x + (1.56467/
	0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, // 3.14159265358979
	0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, // 3238462643383279
	0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, // 5) ) * sqrt(1. -
	0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, //  x);.return (v >
	0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x31, 0x2e, // = 0.) ? res : 1.
	0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, //  - res;.}.float 
	0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, // atan2_approx_div
	0x32, 0x50, 0x49, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // 2PI(const float 
	0x79, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, // y, const float x
	0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // ).{.const float 
	0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x79, 0x29, 0x3b, 0x0a, // abs_y = abs(y);.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, // const float abs_
	0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x78, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x61, // x = abs(x);.if(a
	0x62, 0x73, 0x5f, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, // bs_x <= 0.000061
	0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x20, 0x26, 0x26, 0x20, 0x61, 0x62, 0x73, 0x5f, // 03515625 && abs_
	0x79, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, // y <= 0.000061035
	0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x30, 0x2e, // 15625).return 0.
	0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x20, // ;.const float r 
	0x3d, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2d, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, // = (abs_x - abs_y
	0x29, 0x20, 0x2f, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2b, 0x20, 0x61, 0x62, 0x73, // ) / (abs_x + abs
	0x5f, 0x79, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // _y);.const float
	0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, //  angle = ((x < 0
	0x2e, 0x29, 0x20, 0x3f, 0x20, 0x28, 0x33, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x20, 0x3a, 0x20, 0x28, // .) ? (3./8.) : (
	0x31, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x29, 0x0a, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x32, 0x31, 0x31, // 1./8.)).+ (0.211
	0x38, 0x36, 0x38, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, // 868 /(2.*3.14159
	0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, // 2653589793238462
	0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x72, 0x20, // 6433832795) * r 
	0x2a, 0x20, 0x72, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x39, 0x38, 0x37, 0x33, 0x30, 0x35, 0x20, 0x2f, // * r - 0.987305 /
	0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, // (2.*3.1415926535
	0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, // 8979323846264338
	0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, // 32795)) * ((x < 
	0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x72, 0x20, 0x3a, 0x20, 0x72, 0x29, 0x3b, 0x0a, 0x72, // 0.) ? -r : r);.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x79, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, // eturn (y < 0.) ?
	0x20, 0x2d, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3a, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x3b, //  -angle : angle;
	0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x73, 0x69, 0x6e, 0x5f, 0x61, 0x70, // .}.float asin_ap
	0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, // prox_divPI(const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, //  float v).{.cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, // t float x = abs(
	0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, // v);.if(1. - x <=
	0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, //  0.0000610351562
	0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, // 5).return (v >= 
	0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, // 0.) ? 0.5 : -0.5
	0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, // ;.const float re
	0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, // s = ((-0.155972/
	0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, // 3.14159265358979
	0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, // 3238462643383279
	0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, // 5) * x + (1.5646
	0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, // 7/3.141592653589
	0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, // 7932384626433832
	0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, // 795) ) * sqrt(1.
	0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, //  - x);.return (v
	0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x2d, 0x20, //  >= 0.) ? 0.5 - 
	0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x65, 0x73, // res : -0.5 + res
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x61, 0x79, 0x5f, 0x74, 0x6f, 0x5f, // ;.}.vec2 ray_to_
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, // equirectangular_
	0x75, 0x76, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x61, // uv(const vec3 ra
	0x79, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, // y).{.return vec2
	0x28, 0x0a, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, // (.0.5 + atan2_ap
	0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, // prox_div2PI(ray.
	0x79, 0x2c, 0x20, 0x72, 0x61, 0x79, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x61, 0x63, 0x6f, 0x73, 0x5f, // y, ray.x),.acos_
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, // approx_divPI(ray
	0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, // .z));.}.float In
	0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, // vsRGB(const floa
	0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, // t color).{.if (c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, 0x34, 0x35, 0x29, // olor <= 0.04045)
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, // .return color * 
	0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, // (1.0/12.92);.els
	0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, // e.return pow(col
	0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, // or * (1.0/1.055)
	0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, //  + (0.055/1.055)
	0x2c, 0x20, 0x32, 0x2e, 0x34, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // , 2.4);.}.float 
	0x49, 0x6e, 0x76, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // InvRec709(const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, // float color).{.i
	0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x38, // f (color <= 0.08
	0x31, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, // 1).return color 
	0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x34, 0x2e, 0x35, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, // * (1.0/4.5);.els
	0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, // e.return pow(col
	0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, // or * (1.0/1.099)
	0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, //  + (0.099/1.099)
	0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // , 1.0/0.45);.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, // loat InvGamma(co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, // nst float color)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, // .{.return InvsRG
	0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, // B(color);.}.vec3
	0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, //  InvGamma(const 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // vec3 color).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, // turn vec3(InvGam
	0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, // ma(color.x),InvG
	0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x49, 0x6e, // amma(color.y),In
	0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, // vGamma(color.z))
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x54, 0x6f, 0x6e, 0x65, // ;.}.vec3 InvTone
	0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, // Map(const vec3 c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // olor).{.const fl
	0x6f, 0x61, 0x74, 0x20, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x30, 0x2e, // oat inv_2bh = 0.
	0x35, 0x2f, 0x30, 0x2e, 0x32, 0x35, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // 5/0.25;.const fl
	0x6f, 0x61, 0x74, 0x20, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x34, 0x2e, 0x30, 0x2a, 0x30, 0x2e, 0x32, // oat bh = 4.0*0.2
	0x35, 0x20, 0x2d, 0x20, 0x32, 0x2e, 0x30, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // 5 - 2.0;.return 
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2b, 0x20, 0x73, // (color - 1.0 + s
	0x71, 0x72, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2a, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // qrt(color*(color
	0x20, 0x2b, 0x20, 0x62, 0x68, 0x29, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x2a, 0x69, //  + bh) + 1.0))*i
	0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // nv_2bh;.}.float 
	0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // sRGB(const float
	0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, //  f).{.float s;.i
	0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x33, 0x31, 0x33, 0x30, // f (f <= 0.003130
	0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x20, 0x2a, 0x20, 0x66, // 8).s = 12.92 * f
	0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x35, 0x35, // ;.else.s = 1.055
	0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, //  * pow(f, 1.0/2.
	0x34, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // 4) - 0.055;.retu
	0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x52, 0x65, // rn s;.}.float Re
	0x63, 0x37, 0x30, 0x39, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // c709(const float
	0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, //  f).{.float s;.i
	0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, 0x29, 0x0a, 0x73, // f (f <= 0.018).s
	0x20, 0x3d, 0x20, 0x34, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, //  = 4.5 * f;.else
	0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, // .s = 1.099 * pow
	0x28, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x39, // (f, 0.45) - 0.09
	0x39, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // 9;.return s;.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, // loat FBGamma(con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, // st float color).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, // {.return sRGB(co
	0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x47, // lor);.}.vec2 FBG
	0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, // amma(const vec2 
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // color).{.return 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, // vec2(FBGamma(col
	0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, // or.x),FBGamma(co
	0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // lor.y));.}.vec3 
	0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // FBGamma(const ve
	0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, // c3 color).{.retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, // rn vec3(FBGamma(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, // color.x),FBGamma
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, // (color.y),FBGamm
	0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // a(color.z));.}.v
	0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x32, 0x32, 0x28, 0x63, 0x6f, // ec3 FBGamma22(co
	0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, // nst vec3 color).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x70, 0x6f, // {.return vec3(po
	0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, // w(color.x, 1.0/2
	0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x2c, // .2),pow(color.y,
	0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, //  1.0/2.2),pow(co
	0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x29, // lor.z, 1.0/2.2))
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, // ;.}.float FBTone
	0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // Map(const float 
	0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6c, 0x20, 0x2a, 0x20, // l).{.return l * 
	0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, // ((l*0.25 + 1.0) 
	0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // / (l + 1.0));.}.
	0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x63, // vec2 FBToneMap(c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, // onst vec2 color)
	0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, // .{.const float l
	0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, //  = dot(color,vec
	0x32, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, // 2(0.176204+0.010
	0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, // 8109*0.5,0.81298
	0x35, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x29, // 5+0.0108109*0.5)
	0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, // );.return color 
	0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, // * ((l*0.25 + 1.0
	0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, // ) / (l + 1.0));.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, // }.vec3 FBToneMap
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // (const vec3 colo
	0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // r).{.const float
	0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, //  l = dot(color,v
	0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2c, 0x30, 0x2e, 0x38, // ec3(0.176204,0.8
	0x31, 0x32, 0x39, 0x38, 0x35, 0x2c, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x29, // 12985,0.0108109)
	0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, // );.return color 
	0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, // * ((l*0.25 + 1.0
	0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, // ) / (l + 1.0));.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x28, // }.vec4 Additive(
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, // const vec4 cBase
	0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, // , const vec4 cBl
	0x65, 0x6e, 0x64, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // end, const float
	0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, //  percent).{.retu
	0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2b, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // rn cBase + cBlen
	0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // d*percent;.}.vec
	0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // 3 Screen (const 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, // vec3 cBase, cons
	0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, // t vec3 cBlend).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, // .return 1.0 - (1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, // .0 - cBase) * (1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // .0 - cBlend);.}.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6e, // vec4 Screen (con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, // st vec4 cBase, c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, // onst vec4 cBlend
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, // ).{.return 1.0 -
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, //  (1.0 - cBase) *
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, //  (1.0 - cBlend);
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, // .}.vec3 ScreenHD
	0x52, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, // R (const vec3 cB
	0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // ase, const vec3 
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // cBlend).{.return
	0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, //  max(1.0 - (1.0 
	0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, // - cBase) * (1.0 
	0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, // - cBlend), vec3(
	0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // 0.,0.,0.));.}.ve
	0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x63, 0x6f, // c4 ScreenHDR (co
	0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, // nst vec4 cBase, 
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // const vec4 cBlen
	0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, // d).{.return max(
	0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, // 1.0 - (1.0 - cBa
	0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, // se) * (1.0 - cBl
	0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, // end), vec4(0.,0.
	0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, // ,0.,0.));.}.vec4
	0x20, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, //  Multiply (const
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, //  vec4 cBase, con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, // st vec4 cBlend, 
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, // const float perc
	0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, // ent).{.return cB
	0x61, 0x73, 0x65, 0x20, 0x2a, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, // ase * cBlend*per
	0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, // cent;.}.vec4 Ove
	0x72, 0x6c, 0x61, 0x79, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, // rlay (const vec4
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, //  cBase, const ve
	0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, // c4 cBlend).{.vec
	0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, // 4 cNew = step(0.
	0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, // 5, cBase);.cNew 
	0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, // = mix(cBase*cBle
	0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, // nd*2.0, 1.0-2.0*
	0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, // (1.0-cBase)*(1.0
	0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x3b, // -cBlend), cNew);
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, // .return cNew;.}.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x48, 0x44, 0x52, 0x20, // vec4 OverlayHDR 
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, // (const vec4 cBas
	0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // e, const vec4 cB
	0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, // lend).{.vec4 cNe
	0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, // w = step(0.5, cB
	0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, // ase);.cNew = max
	0x28, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, // (mix(cBase*cBlen
	0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, // d*2.0, 1.0-2.0*(
	0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, // 1.0-cBase)*(1.0-
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x2c, 0x20, // cBlend), cNew), 
	0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, // vec4(0.,0.,0.,0.
	0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, // ));.return cNew;
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x73, 0x5f, 0x68, 0x65, 0x6d, 0x69, // .}.vec3 cos_hemi
	0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x63, 0x6f, // sphere_sample(co
	0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, // nst vec2 t).{.co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x68, 0x69, 0x20, 0x3d, 0x20, // nst float phi = 
	0x74, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x28, 0x32, 0x2e, 0x30, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, // t.y * (2.0*3.141
	0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, // 5926535897932384
	0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x3b, 0x0a, 0x63, // 626433832795);.c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, // onst float cosTh
	0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, // eta = sqrt(1.0 -
	0x20, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, //  t.x);.const flo
	0x61, 0x74, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, // at sinTheta = sq
	0x72, 0x74, 0x28, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, // rt(t.x);.float s
	0x70, 0x2c, 0x63, 0x70, 0x3b, 0x0a, 0x73, 0x69, 0x6e, 0x63, 0x6f, 0x73, 0x28, 0x70, 0x68, 0x69, // p,cp;.sincos(phi
	0x2c, 0x73, 0x70, 0x2c, 0x63, 0x70, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // ,sp,cp);.return 
	0x76, 0x65, 0x63, 0x33, 0x28, 0x63, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, // vec3(cp * sinThe
	0x74, 0x61, 0x2c, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x73, 0x70, // ta, cosTheta, sp
	0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, //  * sinTheta);.}.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x76, // vec3 rotate_to_v
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, // ector_upper(cons
	0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, // t vec3 vec, cons
	0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x29, 0x0a, 0x7b, // t vec3 normal).{
	0x0a, 0x69, 0x66, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x3e, 0x20, 0x2d, // .if(normal.y > -
	0x30, 0x2e, 0x39, 0x39, 0x39, 0x39, 0x39, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, // 0.99999).{.const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x28, //  float h = 1.0/(
	0x31, 0x2e, 0x30, 0x2b, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x63, // 1.0+normal.y);.c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x20, 0x3d, 0x20, // onst float hz = 
	0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // h*normal.z;.cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x3d, 0x20, 0x68, 0x7a, // t float hzx = hz
	0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // *normal.x;.retur
	0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, // n vec3(.vec.x * 
	0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, // (normal.y+hz*nor
	0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x29, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, // mal.z) + vec.y *
	0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, //  normal.x - vec.
	0x7a, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, // z * hzx,.vec.y *
	0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, //  normal.y - vec.
	0x78, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, // x * normal.x - v
	0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x2c, // ec.z * normal.z,
	0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, // .vec.y * normal.
	0x7a, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x20, // z - vec.x * hzx 
	0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, // + vec.z * (norma
	0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x2a, 0x6e, // l.y+h*normal.x*n
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, // ormal.x));.}.els
	0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x2d, 0x76, 0x65, 0x63, 0x3b, 0x0a, 0x7d, // e return -vec;.}
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, // .uniform vec4 St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x53, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3b, // ereo_Saturation;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, // .uniform vec4 St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, // ereo_MS_ZPD_YAxi
	0x73, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, // s;.uniform sampl
	0x65, 0x72, 0x32, 0x44, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // er2D tex_stereo_
	0x66, 0x62, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, // fb;.uniform samp
	0x6c, 0x65, 0x72, 0x32, 0x44, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // ler2D tex_stereo
	0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // _depth;.uniform 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, // vec4 w_h_height;
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, // .vec3 gatherEyeC
	0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x62, 0x6f, 0x6f, // olor(vec2 u, boo
	0x6c, 0x20, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // l isLeft).{.cons
	0x74, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3d, 0x20, 0x28, // t bool yaxis = (
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, // Stereo_MS_ZPD_YA
	0x78, 0x69, 0x73, 0x2e, 0x7a, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x3b, 0x0a, 0x63, 0x6f, // xis.z != 0.);.co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // nst float MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, // aration = (Stere
	0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, // o_MS_ZPD_YAxis.x
	0x29, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, // );.if (isLeft).{
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x6d, 0x69, // .const float lmi
	0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, // nDepth = min(min
	0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, // (textureLod(tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, // stereo_depth, u 
	0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // + (yaxis ? vec2(
	0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, // 0.0, 0.500 * Max
	0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, // Separation) : ve
	0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, // c2(0.500 * MaxSe
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, // paration, 0.0)),
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, //  0.0).x,.texture
	0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, // Lod(tex_stereo_d
	0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, // epth, u + (yaxis
	0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, //  ? vec2(0.0, 0.6
	0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // 66 * MaxSeparati
	0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, // on) : vec2(0.666
	0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, //  * MaxSeparation
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, // , 0.0)), 0.0).x)
	0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, // ,.textureLod(tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, // _stereo_depth, u
	0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, //  + (yaxis ? vec2
	0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // (0.0, MaxSeparat
	0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, // ion) : vec2( Max
	0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // Separation, 0.0)
	0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // ), 0.0).x);.floa
	0x74, 0x20, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, // t lparallax = ma
	0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, // x(0.0, w_h_heigh
	0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // t.w + MaxSeparat
	0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, // ion * (1.0 - 1.0
	0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, //  / (0.5 + lminDe
	0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, // pth * (1.0 / (St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, // ereo_MS_ZPD_YAxi
	0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, // s.y) - 0.5))));.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, // return textureLo
	0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, // d(tex_stereo_fb,
	0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, //  u + (yaxis ? ve
	0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, // c2(0.0, -lparall
	0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x6c, 0x70, 0x61, 0x72, 0x61, // ax) : vec2(lpara
	0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, // llax, 0.0)), 0.0
	0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x7b, 0x0a, // ).xyz;.}.else.{.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x6d, 0x69, 0x6e, // const float rmin
	0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, // Depth = min(min(
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, // textureLod(tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, // tereo_depth, u -
	0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, //  (yaxis ? vec2(0
	0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, // .0, 0.500 * MaxS
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, // eparation) : vec
	0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // 2(0.500 * MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, // aration, 0.0)), 
	0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, // 0.0).x,.textureL
	0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, // od(tex_stereo_de
	0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, // pth, u - (yaxis 
	0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, // ? vec2(0.0, 0.66
	0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, // 6 * MaxSeparatio
	0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, // n) : vec2(0.666 
	0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, // * MaxSeparation,
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, //  0.0)), 0.0).x),
	0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, // .textureLod(tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, // stereo_depth, u 
	0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // - (yaxis ? vec2(
	0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // 0.0, MaxSeparati
	0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, // on) : vec2( MaxS
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, // eparation, 0.0))
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // , 0.0).x);.float
	0x20, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, //  rparallax = max
	0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, // (0.0, w_h_height
	0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // .w + MaxSeparati
	0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, // on * (1.0 - 1.0 
	0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, // / (0.5 + rminDep
	0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, // th * (1.0 / (Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, // reo_MS_ZPD_YAxis
	0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x72, // .y) - 0.5))));.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, // eturn textureLod
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, // (tex_stereo_fb, 
	0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, // u - (yaxis ? vec
	0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, // 2(0.0, -rparalla
	0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, // x) : vec2(rparal
	0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // lax, 0.0)), 0.0)
	0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x67, // .xyz;.}.}.void g
	0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, // atherLeftRightCo
	0x6c, 0x6f, 0x72, 0x73, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x6f, 0x75, 0x74, // lors(vec2 u, out
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x63, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, //  vec3 lcol, out 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, // vec3 rcol).{.con
	0x73, 0x74, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3d, 0x20, // st bool yaxis = 
	0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, // (Stereo_MS_ZPD_Y
	0x41, 0x78, 0x69, 0x73, 0x2e, 0x7a, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x3b, 0x0a, 0x63, // Axis.z != 0.);.c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, // onst float MaxSe
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, // paration = (Ster
	0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, // eo_MS_ZPD_YAxis.
	0x78, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // x);.const float 
	0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, // lminDepth = min(
	0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, // min(textureLod(t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, // ex_stereo_depth,
	0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, //  u + (yaxis ? ve
	0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, // c2(0.0, 0.500 * 
	0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, // MaxSeparation) :
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, //  vec2(0.500 * Ma
	0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, // xSeparation, 0.0
	0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, // )), 0.0).x,.text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // ureLod(tex_stere
	0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, // o_depth, u + (ya
	0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, // xis ? vec2(0.0, 
	0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, // 0.666 * MaxSepar
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, // ation) : vec2(0.
	0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // 666 * MaxSeparat
	0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // ion, 0.0)), 0.0)
	0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, // .x),.textureLod(
	0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, // tex_stereo_depth
	0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, // , u + (yaxis ? v
	0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, // ec2(0.0, MaxSepa
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x20, // ration) : vec2( 
	0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, // MaxSeparation, 0
	0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, // .0)), 0.0).x);.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, // loat lparallax =
	0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, //  max(0.0, w_h_he
	0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, // ight.w + MaxSepa
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, // ration * (1.0 - 
	0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x6c, 0x6d, 0x69, // 1.0 / (0.5 + lmi
	0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, // nDepth * (1.0 / 
	0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, // (Stereo_MS_ZPD_Y
	0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, // Axis.y) - 0.5)))
	0x29, 0x3b, 0x0a, 0x6c, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // );.lcol = textur
	0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // eLod(tex_stereo_
	0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, // fb, u + (yaxis ?
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x6c, 0x70, 0x61, 0x72, //  vec2(0.0, -lpar
	0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x6c, 0x70, // allax) : vec2(lp
	0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, // arallax, 0.0)), 
	0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // 0.0).xyz;.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, // float rminDepth 
	0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // = min(min(textur
	0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // eLod(tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, // depth, u - (yaxi
	0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, // s ? vec2(0.0, 0.
	0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // 500 * MaxSeparat
	0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, // ion) : vec2(0.50
	0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, // 0 * MaxSeparatio
	0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, // n, 0.0)), 0.0).x
	0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, // ,.textureLod(tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, // _stereo_depth, u
	0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, //  - (yaxis ? vec2
	0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, // (0.0, 0.666 * Ma
	0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, // xSeparation) : v
	0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, // ec2(0.666 * MaxS
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, // eparation, 0.0))
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, // , 0.0).x),.textu
	0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // reLod(tex_stereo
	0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, // _depth, u - (yax
	0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, // is ? vec2(0.0, M
	0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, // axSeparation) : 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // vec2( MaxSeparat
	0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // ion, 0.0)), 0.0)
	0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x70, 0x61, 0x72, 0x61, // .x);.float rpara
	0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, // llax = max(0.0, 
	0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, // w_h_height.w + M
	0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, // axSeparation * (
	0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, // 1.0 - 1.0 / (0.5
	0x20, 0x2b, 0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, //  + rminDepth * (
	0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, // 1.0 / (Stereo_MS
	0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, // _ZPD_YAxis.y) - 
	0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, // 0.5))));.rcol = 
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, // textureLod(tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, // tereo_fb, u - (y
	0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, // axis ? vec2(0.0,
	0x20, 0x2d, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, //  -rparallax) : v
	0x65, 0x63, 0x32, 0x28, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, // ec2(rparallax, 0
	0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, // .0)), 0.0).xyz;.
	0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, // }.uniform mat4 S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, // tereo_LeftMat;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, // niform mat4 Ster
	0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, // eo_RightMat;.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // form vec4 Stereo
	0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, // _LeftLuminance_G
	0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, // amma;.uniform ve
	0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, // c4 Stereo_RightL
	0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, // uminance_DynDesa
	0x74, 0x3b, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, // t;.void DynamicD
	0x65, 0x73, 0x61, 0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, // esatAnaglyph(con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, // st vec3 lCol, co
	0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, // nst vec3 rCol, o
	0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, // ut vec3 lDesatCo
	0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x44, 0x65, 0x73, // l, out vec3 rDes
	0x61, 0x74, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // atCol).{.const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, // loat left2LeftLu
	0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, // m = dot(lCol, St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, // ereo_LeftLuminan
	0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, // ce_Gamma.xyz);.c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, // onst float left2
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, // RightLum = dot(l
	0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, // Col, Stereo_Righ
	0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, // tLuminance_DynDe
	0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // sat.xyz);.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, // float right2Left
	0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // Lum = dot(rCol, 
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, // Stereo_LeftLumin
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, // ance_Gamma.xyz);
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, // .const float rig
	0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, // ht2RightLum = do
	0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, // t(rCol, Stereo_R
	0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, // ightLuminance_Dy
	0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, // nDesat.xyz);.con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // st float leftLum
	0x20, 0x3d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, //  = left2LeftLum 
	0x2b, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, // + left2RightLum;
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, // .const float rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, // htLum = right2Le
	0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, // ftLum + right2Ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // ghtLum;.const fl
	0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, // oat leftDesat = 
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, // Stereo_RightLumi
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, // nance_DynDesat.w
	0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, //  * abs((left2Lef
	0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, // tLum - left2Righ
	0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // tLum) / (leftLum
	0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, //  + 0.0001));.con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, // st float rightDe
	0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, // sat = Stereo_Rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, // htLuminance_DynD
	0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x72, 0x69, // esat.w * abs((ri
	0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x72, 0x69, // ght2LeftLum - ri
	0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, // ght2RightLum) / 
	0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, // (rightLum + 0.00
	0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, // 01));.lDesatCol 
	0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, // = mix(lCol, vec3
	0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, // _splat(leftLum),
	0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x72, 0x44, 0x65, //  leftDesat);.rDe
	0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x72, 0x43, 0x6f, // satCol = mix(rCo
	0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x72, 0x69, // l, vec3_splat(ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, // ghtLum), rightDe
	0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x4c, 0x69, 0x6e, // sat);.}.vec3 Lin
	0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, // earAnaglyph(cons
	0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, // t vec3 lCol, con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, // st vec3 rCol).{.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // const vec3 color
	0x20, 0x3d, 0x20, 0x28, 0x28, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x6c, 0x43, 0x6f, 0x6c, //  = (( (vec4(lCol
	0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // , 1.)) * (Stereo
	0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x20, // _LeftMat) ) + ( 
	0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, // (vec4(rCol, 1.))
	0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, //  * (Stereo_Right
	0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x72, 0x65, 0x74, // Mat) )).rgb;.ret
	0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, // urn color;.}.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // form vec4 Stereo
	0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, // _DeghostGamma;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, // niform mat4 Ster
	0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, // eo_DeghostFilter
	0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x6e, // ;.vec3 DeghostAn
	0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, // aglyph(const vec
	0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // 3 lCol, const ve
	0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, // c3 rCol).{.const
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, //  vec3 color = Li
	0x6e, 0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, // nearAnaglyph(lCo
	0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // l, rCol);.return
	0x20, 0x28, 0x20, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x53, //  ( (pow(color, S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, // tereo_DeghostGam
	0x6d, 0x61, 0x2e, 0x72, 0x67, 0x62, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x6d, 0x61, 0x74, 0x33, // ma.rgb)) * (mat3
	0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, // (Stereo_DeghostF
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, // ilter[0].xyz, St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, // ereo_DeghostFilt
	0x65, 0x72, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // er[1].xyz, Stere
	0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, // o_DeghostFilter[
	0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, // 2].xyz)) );.}.vo
	0x69, 0x64, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, // id main().{.vec3
	0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x3b, 0x0a, 0x67, 0x61, 0x74, //  lCol, rCol;.gat
	0x68, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, // herLeftRightColo
	0x72, 0x73, 0x28, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2c, 0x20, // rs(v_texcoord0, 
	0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x6c, 0x43, 0x6f, // lCol, rCol);.lCo
	0x6c, 0x20, 0x3d, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x6c, 0x43, 0x6f, // l = InvGamma(lCo
	0x6c, 0x29, 0x3b, 0x0a, 0x72, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, // l);.rCol = InvGa
	0x6d, 0x6d, 0x61, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // mma(rCol);.vec3 
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x41, 0x6e, // color = LinearAn
	0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, // aglyph(lCol, rCo
	0x6c, 0x29, 0x3b, 0x0a, 0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, // l);.gl_FragColor
	0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, //  = vec4(FBGamma(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // color), 1.0);.}.
	0x00,                                                                                           // .
};
static const uint8_t fs_pp_stereo_anaglyph_lin_srgb_nodesat_dx11[3454] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x13, 0x53, // FSH.o.><.......S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, // tereo_MS_ZPD_YAx
	0x69, 0x73, 0x12, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x77, 0x5f, 0x68, // is...........w_h
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, // _height.........
	0x00, 0x0e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, // ..Stereo_LeftMat
	0x14, 0x00, 0x20, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x53, 0x74, 0x65, 0x72, 0x65, // .. ........Stere
	0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x00, 0x60, 0x00, 0x04, 0x00, // o_RightMat..`...
	0x00, 0x00, 0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // .....tex_stereo_
	0x66, 0x62, 0x30, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x74, 0x65, 0x78, // fb0..........tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x30, 0x01, 0x01, // _stereo_depth0..
	0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // ........tex_ster
	0x65, 0x6f, 0x5f, 0x66, 0x62, 0x30, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, // eo_fb0..........
	0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, // tex_stereo_depth
	0x30, 0x01, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9c, 0x0c, 0x00, 0x00, 0x44, 0x58, // 0.............DX
	0x42, 0x43, 0xbb, 0x72, 0xc5, 0x2a, 0xc2, 0xca, 0x19, 0x6d, 0xb5, 0x3f, 0x5d, 0xba, 0x24, 0x9c, // BC.r.*...m.?].$.
	0xca, 0x7a, 0x01, 0x00, 0x00, 0x00, 0x9c, 0x0c, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x2c, 0x00, // .z............,.
	0x00, 0x00, 0x84, 0x00, 0x00, 0x00, 0xb8, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x4e, 0x50, 0x00, // ..........ISGNP.
	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, // ..........8.....
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, // ................
	0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, // ..D.............
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x4f, 0x53, // ..........SV_POS
	0x49, 0x54, 0x49, 0x4f, 0x4e, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0xab, // ITION.TEXCOORD..
	0xab, 0xab, 0x4f, 0x53, 0x47, 0x4e, 0x2c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, // ..OSGN,.........
	0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, // .. .............
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x54, 0x41, 0x52, // ..........SV_TAR
	0x47, 0x45, 0x54, 0x00, 0xab, 0xab, 0x53, 0x48, 0x45, 0x58, 0xdc, 0x0b, 0x00, 0x00, 0x50, 0x00, // GET...SHEX....P.
	0x00, 0x00, 0xf7, 0x02, 0x00, 0x00, 0x6a, 0x08, 0x00, 0x01, 0x59, 0x00, 0x00, 0x04, 0x46, 0x8e, // ......j...Y...F.
	0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x03, 0x00, 0x60, //  .........Z....`
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x03, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, // ......Z....`....
	0x00, 0x00, 0x58, 0x18, 0x00, 0x04, 0x00, 0x70, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x55, // ..X....p......UU
	0x00, 0x00, 0x58, 0x18, 0x00, 0x04, 0x00, 0x70, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x55, 0x55, // ..X....p......UU
	0x00, 0x00, 0x62, 0x10, 0x00, 0x03, 0x32, 0x10, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x65, 0x00, // ..b...2.......e.
	0x00, 0x03, 0xf2, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x02, 0x05, 0x00, // ... ......h.....
	0x00, 0x00, 0x36, 0x00, 0x00, 0x08, 0x52, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, // ..6...R........@
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x38, 0x00, 0x00, 0x0b, 0xa2, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x80, // ..8.............
	0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, //  ..........@....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x7e, 0x2a, 0x3f, 0x39, 0x00, // .....?.....~*?9.
	0x00, 0x08, 0x12, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2a, 0x80, 0x20, 0x00, 0x00, 0x00, // ..........*. ...
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, // .......@......7.
	0x00, 0x09, 0xf2, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x10, 0x00, 0x01, 0x00, // ................
	0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x0b, 0x10, 0x00, 0x00, 0x00, // ..F.............
	0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf2, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x0e, // ..............F.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x14, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, // ......F.........
	0x00, 0x08, 0xf2, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x80, 0x41, 0x00, // ..........F...A.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x14, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x48, 0x00, // ......F.......H.
	0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, // ......CU..".....
	0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x16, 0x7e, 0x10, 0x00, 0x01, 0x00, // ..F........~....
	0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, // ...`.......@....
	0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x42, 0x00, // ..H.......CU..B.
	0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x96, 0x7c, // ...............|
	0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, // .......`.......@
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x07, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, // ......3...".....
	0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, // ..*.............
	0x00, 0x00, 0x36, 0x00, 0x00, 0x06, 0x22, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0a, 0x80, // ..6...".........
	0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x08, 0x52, 0x00, //  .........6...R.
	0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .......@........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x09, 0xc2, 0x00, // ..........7.....
	0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x04, // ................
	0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x56, 0x01, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, // ......V.........
	0x00, 0x07, 0x32, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x01, 0x00, // ..2.............
	0x00, 0x00, 0x46, 0x10, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0xc2, 0x00, // ..F.............
	0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0xa6, 0x0e, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x01, 0x00, // ..........A.....
	0x00, 0x00, 0x06, 0x14, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, // ..........H.....
	0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x42, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0xe6, 0x0a, // ..CU..B.........
	0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x96, 0x7c, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x60, // .......|.......`
	0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, // .......@......H.
	0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x82, 0x00, 0x10, 0x00, 0x01, 0x00, // ......CU........
	0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x96, 0x73, 0x10, 0x00, 0x01, 0x00, // ..F........s....
	0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, // ...`.......@....
	0x00, 0x00, 0x33, 0x00, 0x00, 0x07, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3a, 0x00, // ..3...".......:.
	0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0e, 0x00, // ................
	0x00, 0x0b, 0x82, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, // ...........@....
	0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x1a, 0x80, // .?...?...?...?..
	0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x82, 0x00, //  ...............
	0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, // ......:........@
	0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0x32, 0x00, 0x00, 0x09, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, // ......2...".....
	0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x01, 0x00, // ..........:.....
	0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x0e, 0x00, 0x00, 0x0a, 0x22, 0x00, // ...@.....?....".
	0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, // .......@.....?..
	0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, // .?...?...?......
	0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, // ......".........
	0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, // ..A........@....
	0x80, 0x3f, 0x32, 0x00, 0x00, 0x0b, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, 0x80, // .?2...".........
	0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, //  ...............
	0x00, 0x00, 0x3a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x34, 0x00, // ..:. .........4.
	0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, // ................
	0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x06, 0x82, 0x00, // ...@......6.....
	0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x03, 0x00, // ..........A.....
	0x00, 0x00, 0x36, 0x00, 0x00, 0x08, 0x62, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x40, // ..6...b........@
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x37, 0x00, 0x00, 0x09, 0x32, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x06, 0x00, // ..7...2.........
	0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x00, // ..............F.
	0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x32, 0x00, 0x10, 0x00, 0x02, 0x00, // ..........2.....
	0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x10, 0x10, 0x00, 0x01, 0x00, // ..F.......F.....
	0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x72, 0x00, // ..H.......CU..r.
	0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x7e, // ......F.......F~
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, // .......`.......@
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x0f, 0x32, 0x00, 0x10, 0x00, 0x03, 0x00, // ......2...2.....
	0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x6e, 0xa7, // ..F........@..n.
	0x72, 0x3f, 0x6e, 0xa7, 0x72, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, // r?n.r?.........@
	0x00, 0x00, 0x19, 0x89, 0x55, 0x3d, 0x19, 0x89, 0x55, 0x3d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ....U=..U=......
	0x00, 0x00, 0x2f, 0x00, 0x00, 0x05, 0x32, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x46, 0x00, // ../...2.......F.
	0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x0a, 0x32, 0x00, 0x10, 0x00, 0x03, 0x00, // ......8...2.....
	0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x9a, 0x99, // ..F........@....
	0x19, 0x40, 0x9a, 0x99, 0x19, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x00, // .@...@..........
	0x00, 0x05, 0x32, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x03, 0x00, // ..2.......F.....
	0x00, 0x00, 0x38, 0x00, 0x00, 0x0a, 0x32, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x46, 0x00, // ..8...2.......F.
	0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x91, 0x83, 0x9e, 0x3d, 0x91, 0x83, // .......@.....=..
	0x9e, 0x3d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x0a, 0xb2, 0x00, // .=..............
	0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0xe6, 0xae, 0x25, 0x3d, 0xe6, 0xae, // .......@....%=..
	0x25, 0x3d, 0x00, 0x00, 0x00, 0x00, 0xe6, 0xae, 0x25, 0x3d, 0x46, 0x08, 0x10, 0x00, 0x02, 0x00, // %=......%=F.....
	0x00, 0x00, 0x37, 0x00, 0x00, 0x09, 0x32, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x46, 0x00, // ..7...2.......F.
	0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x46, 0x00, // ......F.......F.
	0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x09, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, // ......2...".....
	0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x6e, 0xa7, // ..*........@..n.
	0x72, 0x3f, 0x01, 0x40, 0x00, 0x00, 0x19, 0x89, 0x55, 0x3d, 0x38, 0x00, 0x00, 0x07, 0x12, 0x00, // r?.@....U=8.....
	0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x40, // ......*........@
	0x00, 0x00, 0x91, 0x83, 0x9e, 0x3d, 0x2f, 0x00, 0x00, 0x05, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, // .....=/...".....
	0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x07, 0x22, 0x00, // ..........8...".
	0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, // ...............@
	0x00, 0x00, 0x9a, 0x99, 0x19, 0x40, 0x19, 0x00, 0x00, 0x05, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, // .....@....".....
	0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x09, 0x42, 0x00, // ..........7...B.
	0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0a, 0x00, // ......:.........
	0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x36, 0x00, // ..............6.
	0x00, 0x05, 0x82, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, // ...........@....
	0x80, 0x3f, 0x11, 0x00, 0x00, 0x08, 0x12, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x0e, // .?............F.
	0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, // ......F. .......
	0x00, 0x00, 0x11, 0x00, 0x00, 0x08, 0x22, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x0e, // ......".......F.
	0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, // ......F. .......
	0x00, 0x00, 0x11, 0x00, 0x00, 0x08, 0x42, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x0e, // ......B.......F.
	0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, // ......F. .......
	0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x12, 0x00, // ..H.......CU....
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x7e, // ......F.......F~
	0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, // .......`.......@
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, // ......H.......CU
	0x15, 0x00, 0x22, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x00, 0x00, // ..".............
	0x00, 0x00, 0x16, 0x7e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, // ...~.......`....
	0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x07, 0x12, 0x00, // ...@......3.....
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, // ................
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, // ......3.........
	0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, // ..*.............
	0x00, 0x00, 0x32, 0x00, 0x00, 0x09, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, // ..2.............
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, // ......:........@
	0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x0e, 0x00, 0x00, 0x0a, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, // .....?..........
	0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, // ...@.....?...?..
	0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .?...?..........
	0x00, 0x08, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x80, 0x41, 0x00, // ..............A.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x32, 0x00, // .......@.....?2.
	0x00, 0x0b, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x80, 0x20, 0x00, 0x00, 0x00, // ............ ...
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, 0x80, // ..............:.
	0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x07, 0x12, 0x00, //  .........4.....
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, // ...............@
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x06, 0x82, 0x00, 0x10, 0x00, 0x03, 0x00, // ......6.........
	0x00, 0x00, 0x0a, 0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, // ......A.......6.
	0x00, 0x05, 0x22, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, // .."........@....
	0x00, 0x00, 0x37, 0x00, 0x00, 0x09, 0x32, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, // ..7...2.........
	0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x46, 0x00, // ..............F.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x32, 0x00, 0x10, 0x00, 0x00, 0x00, // ..........2.....
	0x00, 0x00, 0x46, 0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x10, // ..F...A.......F.
	0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, // ......H.......CU
	0x15, 0x00, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x00, 0x00, // ..r.......F.....
	0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x00, 0x00, // ..F~.......`....
	0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x0a, 0x32, 0x00, // ...@......8...2.
	0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, // ......F........@
	0x00, 0x00, 0x91, 0x83, 0x9e, 0x3d, 0x91, 0x83, 0x9e, 0x3d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .....=...=......
	0x00, 0x00, 0x32, 0x00, 0x00, 0x0f, 0xc2, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x04, // ..2.............
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .......@........
	0x00, 0x00, 0x6e, 0xa7, 0x72, 0x3f, 0x6e, 0xa7, 0x72, 0x3f, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, // ..n.r?n.r?.@....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x89, 0x55, 0x3d, 0x19, 0x89, 0x55, 0x3d, 0x2f, 0x00, // ........U=..U=/.
	0x00, 0x05, 0xc2, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0xa6, 0x0e, 0x10, 0x00, 0x01, 0x00, // ................
	0x00, 0x00, 0x38, 0x00, 0x00, 0x0a, 0xc2, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0xa6, 0x0e, // ..8.............
	0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .......@........
	0x00, 0x00, 0x9a, 0x99, 0x19, 0x40, 0x9a, 0x99, 0x19, 0x40, 0x19, 0x00, 0x00, 0x05, 0xc2, 0x00, // .....@...@......
	0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0xa6, 0x0e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1d, 0x00, // ................
	0x00, 0x0a, 0xb2, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0xe6, 0xae, // ...........@....
	0x25, 0x3d, 0xe6, 0xae, 0x25, 0x3d, 0x00, 0x00, 0x00, 0x00, 0xe6, 0xae, 0x25, 0x3d, 0x46, 0x08, // %=..%=......%=F.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x09, 0x32, 0x00, 0x10, 0x00, 0x01, 0x00, // ......7...2.....
	0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x01, 0x00, // ..F.......F.....
	0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x09, 0x12, 0x00, // ..........2.....
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, // ......*........@
	0x00, 0x00, 0x6e, 0xa7, 0x72, 0x3f, 0x01, 0x40, 0x00, 0x00, 0x19, 0x89, 0x55, 0x3d, 0x2f, 0x00, // ..n.r?.@....U=/.
	0x00, 0x05, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x38, 0x00, 0x00, 0x0a, 0x32, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x00, // ..8...2.........
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x9a, 0x99, 0x19, 0x40, 0x91, 0x83, // .......@.....@..
	0x9e, 0x3d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x05, 0x12, 0x00, // .=..............
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, // ..............7.
	0x00, 0x09, 0x42, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x00, 0x00, // ..B.......:.....
	0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x82, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, // ..6............@
	0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x11, 0x00, 0x00, 0x08, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, // .....?..........
	0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, // ..F.......F. ...
	0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x08, 0x22, 0x00, 0x10, 0x00, 0x00, 0x00, // ..........".....
	0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, // ..F.......F. ...
	0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x08, 0x42, 0x00, 0x10, 0x00, 0x00, 0x00, // ..........B.....
	0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, // ..F.......F. ...
	0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, // ..........r.....
	0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x02, 0x00, // ..F.......F.....
	0x00, 0x00, 0x2f, 0x00, 0x00, 0x05, 0x72, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x02, // ../...r.......F.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x0a, 0x72, 0x00, 0x10, 0x00, 0x01, 0x00, // ......8...r.....
	0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x55, 0x55, // ..F........@..UU
	0xd5, 0x3e, 0x55, 0x55, 0xd5, 0x3e, 0x55, 0x55, 0xd5, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x19, 0x00, // .>UU.>UU.>......
	0x00, 0x05, 0x72, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x01, 0x00, // ..r.......F.....
	0x00, 0x00, 0x32, 0x00, 0x00, 0x0f, 0x72, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x02, // ..2...r.......F.
	0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x3d, 0x0a, 0x87, 0x3f, 0x3d, 0x0a, // .......@..=..?=.
	0x87, 0x3f, 0x3d, 0x0a, 0x87, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0xae, 0x47, // .?=..?.....@...G
	0x61, 0xbd, 0xae, 0x47, 0x61, 0xbd, 0xae, 0x47, 0x61, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x1d, 0x00, // a..Ga..Ga.......
	0x00, 0x0a, 0x72, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x1c, 0x2e, // ..r........@....
	0x4d, 0x3b, 0x1c, 0x2e, 0x4d, 0x3b, 0x1c, 0x2e, 0x4d, 0x3b, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, // M;..M;..M;....F.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x0a, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, // ......8...r.....
	0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x52, 0xb8, // ..F........@..R.
	0x4e, 0x41, 0x52, 0xb8, 0x4e, 0x41, 0x52, 0xb8, 0x4e, 0x41, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, // NAR.NAR.NA....7.
	0x00, 0x09, 0x72, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x02, 0x00, // ..r ......F.....
	0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x01, 0x00, // ..F.......F.....
	0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x82, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, // ..6.... .......@
	0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x3e, 0x00, 0x00, 0x01, 0x00, 0x00, 0xa0, 0x00,             // .....?>.......
};
static const uint8_t fs_pp_stereo_anaglyph_lin_srgb_nodesat_spv[6571] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x13, 0x53, // FSH.o.><.......S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, // tereo_MS_ZPD_YAx
	0x69, 0x73, 0x12, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x77, 0x5f, 0x68, // is...........w_h
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x01, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, // _height.........
	0x00, 0x0e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, // ..Stereo_LeftMat
	0x14, 0x01, 0x20, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x53, 0x74, 0x65, 0x72, 0x65, // .. ........Stere
	0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x01, 0x60, 0x00, 0x04, 0x00, // o_RightMat..`...
	0x00, 0x00, 0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // .....tex_stereo_
	0x66, 0x62, 0x30, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x02, 0x22, 0x00, 0x10, 0x74, 0x65, 0x78, // fb0......."..tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x30, 0x00, 0x03, // _stereo_depth0..
	0x00, 0x00, 0x00, 0x00, 0x02, 0x22, 0x00, 0xfc, 0x18, 0x00, 0x00, 0x03, 0x02, 0x23, 0x07, 0x00, // .....".......#..
	0x00, 0x01, 0x00, 0x0b, 0x00, 0x08, 0x00, 0xdf, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, // ................
	0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, // ...............G
	0x4c, 0x53, 0x4c, 0x2e, 0x73, 0x74, 0x64, 0x2e, 0x34, 0x35, 0x30, 0x00, 0x00, 0x00, 0x00, 0x0e, // LSL.std.450.....
	0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x07, 0x00, 0x04, // ................
	0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x97, // .......main.....
	0x01, 0x00, 0x00, 0xa2, 0x01, 0x00, 0x00, 0x10, 0x00, 0x03, 0x00, 0x04, 0x00, 0x00, 0x00, 0x07, // ................
	0x00, 0x00, 0x00, 0x03, 0x00, 0x03, 0x00, 0x05, 0x00, 0x00, 0x00, 0xf4, 0x01, 0x00, 0x00, 0x05, // ................
	0x00, 0x04, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x05, // .......main.....
	0x00, 0x08, 0x00, 0x44, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // ...D...tex_stere
	0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x00, 0x00, 0x00, 0x00, 0x05, // o_fbSampler.....
	0x00, 0x08, 0x00, 0x47, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // ...G...tex_stere
	0x6f, 0x5f, 0x66, 0x62, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x00, 0x00, 0x00, 0x00, 0x05, // o_fbTexture.....
	0x00, 0x08, 0x00, 0x4b, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // ...K...tex_stere
	0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x00, 0x05, // o_depthSampler..
	0x00, 0x08, 0x00, 0x4d, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // ...M...tex_stere
	0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x00, 0x05, // o_depthTexture..
	0x00, 0x06, 0x00, 0xa8, 0x00, 0x00, 0x00, 0x55, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x6c, // .......UniformBl
	0x6f, 0x63, 0x6b, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x08, 0x00, 0xa8, 0x00, 0x00, 0x00, 0x00, // ock.............
	0x00, 0x00, 0x00, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, // ...Stereo_MS_ZPD
	0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x00, 0x06, 0x00, 0x06, 0x00, 0xa8, 0x00, 0x00, 0x00, 0x01, // _YAxis..........
	0x00, 0x00, 0x00, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x00, 0x00, 0x06, // ...w_h_height...
	0x00, 0x07, 0x00, 0xa8, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x53, 0x74, 0x65, 0x72, 0x65, // ...........Stere
	0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x00, 0x00, 0x06, 0x00, 0x07, 0x00, 0xa8, // o_LeftMat.......
	0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, // .......Stereo_Ri
	0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x00, 0x05, 0x00, 0x03, 0x00, 0xaa, 0x00, 0x00, 0x00, 0x00, // ghtMat..........
	0x00, 0x00, 0x00, 0x05, 0x00, 0x05, 0x00, 0x97, 0x01, 0x00, 0x00, 0x76, 0x5f, 0x74, 0x65, 0x78, // ...........v_tex
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x00, 0x05, 0x00, 0x06, 0x00, 0xa2, 0x01, 0x00, 0x00, 0x62, // coord0.........b
	0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x00, 0x00, 0x47, // gfx_FragData0..G
	0x00, 0x04, 0x00, 0x44, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, // ...D...".......G
	0x00, 0x04, 0x00, 0x44, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x47, // ...D...!.......G
	0x00, 0x04, 0x00, 0x47, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, // ...G...".......G
	0x00, 0x04, 0x00, 0x47, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x47, // ...G...!.......G
	0x00, 0x04, 0x00, 0x4b, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, // ...K...".......G
	0x00, 0x04, 0x00, 0x4b, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x47, // ...K...!.......G
	0x00, 0x04, 0x00, 0x4d, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, // ...M...".......G
	0x00, 0x04, 0x00, 0x4d, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x48, // ...M...!.......H
	0x00, 0x05, 0x00, 0xa8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x00, // ...........#....
	0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0xa8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x23, // ...H...........#
	0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x48, 0x00, 0x04, 0x00, 0xa8, 0x00, 0x00, 0x00, 0x02, // .......H........
	0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0xa8, 0x00, 0x00, 0x00, 0x02, // .......H........
	0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0xa8, // ...#... ...H....
	0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x48, // ...............H
	0x00, 0x04, 0x00, 0xa8, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x48, // ...............H
	0x00, 0x05, 0x00, 0xa8, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x60, // ...........#...`
	0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0xa8, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x07, // ...H............
	0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x47, 0x00, 0x03, 0x00, 0xa8, 0x00, 0x00, 0x00, 0x02, // .......G........
	0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0xaa, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, // ...G......."....
	0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0xaa, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x01, // ...G.......!....
	0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x97, 0x01, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, // ...G............
	0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0xa2, 0x01, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, // ...G............
	0x00, 0x00, 0x00, 0x13, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x21, 0x00, 0x03, 0x00, 0x03, // ...........!....
	0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x02, 0x00, 0x06, 0x00, 0x00, 0x00, 0x16, // ................
	0x00, 0x03, 0x00, 0x07, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x19, 0x00, 0x09, 0x00, 0x08, // ....... ........
	0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, // ................
	0x00, 0x04, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x17, // ................
	0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x20, // ............... 
	0x00, 0x04, 0x00, 0x43, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x3b, // ...C...........;
	0x00, 0x04, 0x00, 0x43, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, // ...C...D....... 
	0x00, 0x04, 0x00, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x3b, // ...F...........;
	0x00, 0x04, 0x00, 0x46, 0x00, 0x00, 0x00, 0x47, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3b, // ...F...G.......;
	0x00, 0x04, 0x00, 0x43, 0x00, 0x00, 0x00, 0x4b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3b, // ...C...K.......;
	0x00, 0x04, 0x00, 0x46, 0x00, 0x00, 0x00, 0x4d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, // ...F...M........
	0x00, 0x04, 0x00, 0x50, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2b, // ...P... .......+
	0x00, 0x04, 0x00, 0x50, 0x00, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2b, // ...P...Q.......+
	0x00, 0x04, 0x00, 0x50, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, // ...P...U........
	0x00, 0x03, 0x00, 0x59, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, // ...Y.......+....
	0x00, 0x00, 0x00, 0x67, 0x00, 0x00, 0x00, 0xe6, 0xae, 0x25, 0x3d, 0x14, 0x00, 0x02, 0x00, 0x68, // ...g.....%=....h
	0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x6c, 0x00, 0x00, 0x00, 0x91, // ...+.......l....
	0x83, 0x9e, 0x3d, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x6e, // ..=+.......p...n
	0xa7, 0x72, 0x3f, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x72, 0x00, 0x00, 0x00, 0x19, // .r?+.......r....
	0x89, 0x55, 0x3d, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0x9a, // .U=+.......t....
	0x99, 0x19, 0x40, 0x15, 0x00, 0x04, 0x00, 0x7b, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, // ..@....{... ....
	0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x7b, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, // ...+...{...|....
	0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x7b, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x01, // ...+...{........
	0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x7b, 0x00, 0x00, 0x00, 0x82, 0x00, 0x00, 0x00, 0x02, // ...+...{........
	0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x1c, // ...+............
	0x2e, 0x4d, 0x3b, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x8d, 0x00, 0x00, 0x00, 0x52, // .M;+...........R
	0xb8, 0x4e, 0x41, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x3d, // .NA+...........=
	0x0a, 0x87, 0x3f, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00, 0x55, // ..?+...........U
	0x55, 0xd5, 0x3e, 0x18, 0x00, 0x04, 0x00, 0xa7, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x04, // U.>.............
	0x00, 0x00, 0x00, 0x1e, 0x00, 0x06, 0x00, 0xa8, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, // ................
	0x00, 0x00, 0x00, 0xa7, 0x00, 0x00, 0x00, 0xa7, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0xa9, // ........... ....
	0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xa8, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0xa9, // ...........;....
	0x00, 0x00, 0x00, 0xaa, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0xab, // ........... ....
	0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, // ...........+....
	0x00, 0x00, 0x00, 0xae, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, // ...........+....
	0x00, 0x00, 0x00, 0xb6, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x17, 0x00, 0x04, 0x00, 0xbd, // ..........?.....
	0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, // ...h.......+....
	0x00, 0x00, 0x00, 0xc9, 0x00, 0x00, 0x00, 0xfa, 0x7e, 0x2a, 0x3f, 0x2b, 0x00, 0x04, 0x00, 0x7b, // ........~*?+...{
	0x00, 0x00, 0x00, 0xeb, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, // ...........+....
	0x00, 0x00, 0x00, 0xef, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x2b, 0x00, 0x04, 0x00, 0x50, // ..........?+...P
	0x00, 0x00, 0x00, 0x61, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x62, // ...a....... ...b
	0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xa7, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x50, // ...........+...P
	0x00, 0x00, 0x00, 0x6a, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x96, // ...j....... ....
	0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x96, // ...........;....
	0x01, 0x00, 0x00, 0x97, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0xa1, // ........... ....
	0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0xa1, // ...........;....
	0x01, 0x00, 0x00, 0xa2, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, // ...........+....
	0x00, 0x00, 0x00, 0xcf, 0x03, 0x00, 0x00, 0xae, 0x47, 0x61, 0xbd, 0x36, 0x00, 0x05, 0x00, 0x02, // ........Ga.6....
	0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0xf8, // ................
	0x00, 0x02, 0x00, 0x05, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0x45, // .......=.......E
	0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x08, 0x00, 0x00, 0x00, 0x48, // ...D...=.......H
	0x00, 0x00, 0x00, 0x47, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0x4c, // ...G...=.......L
	0x00, 0x00, 0x00, 0x4b, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x08, 0x00, 0x00, 0x00, 0x4e, // ...K...=.......N
	0x00, 0x00, 0x00, 0x4d, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x98, // ...M...=........
	0x01, 0x00, 0x00, 0x97, 0x01, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0xab, 0x00, 0x00, 0x00, 0x02, // .......A........
	0x02, 0x00, 0x00, 0xaa, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00, 0x82, 0x00, 0x00, 0x00, 0x3d, // .......U.......=
	0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x03, 0x02, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0xb7, // ................
	0x00, 0x05, 0x00, 0x68, 0x00, 0x00, 0x00, 0x04, 0x02, 0x00, 0x00, 0x03, 0x02, 0x00, 0x00, 0xae, // ...h............
	0x00, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0xab, 0x00, 0x00, 0x00, 0x05, 0x02, 0x00, 0x00, 0xaa, // ...A............
	0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, // ...U...|...=....
	0x00, 0x00, 0x00, 0x06, 0x02, 0x00, 0x00, 0x05, 0x02, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, // ................
	0x00, 0x00, 0x00, 0x0a, 0x02, 0x00, 0x00, 0xb6, 0x00, 0x00, 0x00, 0x06, 0x02, 0x00, 0x00, 0x50, // ...............P
	0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x0b, 0x02, 0x00, 0x00, 0xae, 0x00, 0x00, 0x00, 0x0a, // ................
	0x02, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x0d, 0x02, 0x00, 0x00, 0xb6, // ................
	0x00, 0x00, 0x00, 0x06, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x0e, // .......P........
	0x02, 0x00, 0x00, 0x0d, 0x02, 0x00, 0x00, 0xae, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0xbd, // ...........P....
	0x00, 0x00, 0x00, 0x0f, 0x02, 0x00, 0x00, 0x04, 0x02, 0x00, 0x00, 0x04, 0x02, 0x00, 0x00, 0xa9, // ................
	0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x10, 0x02, 0x00, 0x00, 0x0f, 0x02, 0x00, 0x00, 0x0b, // ................
	0x02, 0x00, 0x00, 0x0e, 0x02, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x11, // ................
	0x02, 0x00, 0x00, 0x98, 0x01, 0x00, 0x00, 0x10, 0x02, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, 0x59, // ...........V...Y
	0x00, 0x00, 0x00, 0x99, 0x02, 0x00, 0x00, 0x4e, 0x00, 0x00, 0x00, 0x4c, 0x00, 0x00, 0x00, 0x58, // .......N...L...X
	0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x9c, 0x02, 0x00, 0x00, 0x99, 0x02, 0x00, 0x00, 0x11, // ................
	0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xae, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, // ...........Q....
	0x00, 0x00, 0x00, 0x14, 0x02, 0x00, 0x00, 0x9c, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, // ................
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x18, 0x02, 0x00, 0x00, 0xc9, 0x00, 0x00, 0x00, 0x06, // ................
	0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x19, 0x02, 0x00, 0x00, 0xae, // ...P............
	0x00, 0x00, 0x00, 0x18, 0x02, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x1b, // ................
	0x02, 0x00, 0x00, 0xc9, 0x00, 0x00, 0x00, 0x06, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, // ...........P....
	0x00, 0x00, 0x00, 0x1c, 0x02, 0x00, 0x00, 0x1b, 0x02, 0x00, 0x00, 0xae, 0x00, 0x00, 0x00, 0x50, // ...............P
	0x00, 0x05, 0x00, 0xbd, 0x00, 0x00, 0x00, 0x1d, 0x02, 0x00, 0x00, 0x04, 0x02, 0x00, 0x00, 0x04, // ................
	0x02, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x1e, 0x02, 0x00, 0x00, 0x1d, // ................
	0x02, 0x00, 0x00, 0x19, 0x02, 0x00, 0x00, 0x1c, 0x02, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x0b, // ................
	0x00, 0x00, 0x00, 0x1f, 0x02, 0x00, 0x00, 0x98, 0x01, 0x00, 0x00, 0x1e, 0x02, 0x00, 0x00, 0x56, // ...............V
	0x00, 0x05, 0x00, 0x59, 0x00, 0x00, 0x00, 0xa3, 0x02, 0x00, 0x00, 0x4e, 0x00, 0x00, 0x00, 0x4c, // ...Y.......N...L
	0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xa6, 0x02, 0x00, 0x00, 0xa3, // ...X............
	0x02, 0x00, 0x00, 0x1f, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xae, 0x00, 0x00, 0x00, 0x51, // ...............Q
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x22, 0x02, 0x00, 0x00, 0xa6, 0x02, 0x00, 0x00, 0x00, // ......."........
	0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x23, 0x02, 0x00, 0x00, 0x01, // ...........#....
	0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x14, 0x02, 0x00, 0x00, 0x22, 0x02, 0x00, 0x00, 0x50, // ...%......."...P
	0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x27, 0x02, 0x00, 0x00, 0xae, 0x00, 0x00, 0x00, 0x06, // .......'........
	0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x29, 0x02, 0x00, 0x00, 0x06, // ...P.......)....
	0x02, 0x00, 0x00, 0xae, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0xbd, 0x00, 0x00, 0x00, 0x2a, // .......P.......*
	0x02, 0x00, 0x00, 0x04, 0x02, 0x00, 0x00, 0x04, 0x02, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, // ................
	0x00, 0x00, 0x00, 0x2b, 0x02, 0x00, 0x00, 0x2a, 0x02, 0x00, 0x00, 0x27, 0x02, 0x00, 0x00, 0x29, // ...+...*...'...)
	0x02, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x2c, 0x02, 0x00, 0x00, 0x98, // ...........,....
	0x01, 0x00, 0x00, 0x2b, 0x02, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, 0x59, 0x00, 0x00, 0x00, 0xad, // ...+...V...Y....
	0x02, 0x00, 0x00, 0x4e, 0x00, 0x00, 0x00, 0x4c, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, // ...N...L...X....
	0x00, 0x00, 0x00, 0xb0, 0x02, 0x00, 0x00, 0xad, 0x02, 0x00, 0x00, 0x2c, 0x02, 0x00, 0x00, 0x02, // ...........,....
	0x00, 0x00, 0x00, 0xae, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x2f, // .......Q......./
	0x02, 0x00, 0x00, 0xb0, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, // ................
	0x00, 0x00, 0x00, 0x30, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x23, // ...0.......%...#
	0x02, 0x00, 0x00, 0x2f, 0x02, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0xab, 0x00, 0x00, 0x00, 0x31, // .../...A.......1
	0x02, 0x00, 0x00, 0xaa, 0x00, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00, 0xeb, 0x00, 0x00, 0x00, 0x3d, // .......Q.......=
	0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x32, 0x02, 0x00, 0x00, 0x31, 0x02, 0x00, 0x00, 0x41, // .......2...1...A
	0x00, 0x06, 0x00, 0xab, 0x00, 0x00, 0x00, 0x35, 0x02, 0x00, 0x00, 0xaa, 0x00, 0x00, 0x00, 0x55, // .......5.......U
	0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x36, // .......=.......6
	0x02, 0x00, 0x00, 0x35, 0x02, 0x00, 0x00, 0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x37, // ...5...........7
	0x02, 0x00, 0x00, 0xef, 0x00, 0x00, 0x00, 0x36, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x07, // .......6........
	0x00, 0x00, 0x00, 0x38, 0x02, 0x00, 0x00, 0x37, 0x02, 0x00, 0x00, 0xb6, 0x00, 0x00, 0x00, 0x0c, // ...8...7........
	0x00, 0x08, 0x00, 0x07, 0x00, 0x00, 0x00, 0x3a, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, // .......:.......2
	0x00, 0x00, 0x00, 0x30, 0x02, 0x00, 0x00, 0x38, 0x02, 0x00, 0x00, 0xb6, 0x00, 0x00, 0x00, 0x88, // ...0...8........
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x3b, 0x02, 0x00, 0x00, 0xef, 0x00, 0x00, 0x00, 0x3a, // .......;.......:
	0x02, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x3c, 0x02, 0x00, 0x00, 0xef, // ...........<....
	0x00, 0x00, 0x00, 0x3b, 0x02, 0x00, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x07, 0x00, 0x00, 0x00, 0x3e, // ...;...........>
	0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x06, 0x02, 0x00, 0x00, 0x3c, // .......2.......<
	0x02, 0x00, 0x00, 0x32, 0x02, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x3f, // ...2...........?
	0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0xae, 0x00, 0x00, 0x00, 0x3e, // .......(.......>
	0x02, 0x00, 0x00, 0x7f, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x43, 0x02, 0x00, 0x00, 0x3f, // ...........C...?
	0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x44, 0x02, 0x00, 0x00, 0xae, // ...P.......D....
	0x00, 0x00, 0x00, 0x43, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x46, // ...C...P.......F
	0x02, 0x00, 0x00, 0x3f, 0x02, 0x00, 0x00, 0xae, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0xbd, // ...?.......P....
	0x00, 0x00, 0x00, 0x47, 0x02, 0x00, 0x00, 0x04, 0x02, 0x00, 0x00, 0x04, 0x02, 0x00, 0x00, 0xa9, // ...G............
	0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x48, 0x02, 0x00, 0x00, 0x47, 0x02, 0x00, 0x00, 0x44, // .......H...G...D
	0x02, 0x00, 0x00, 0x46, 0x02, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x49, // ...F...........I
	0x02, 0x00, 0x00, 0x98, 0x01, 0x00, 0x00, 0x48, 0x02, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, 0x59, // .......H...V...Y
	0x00, 0x00, 0x00, 0xb7, 0x02, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x00, 0x58, // .......H...E...X
	0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xba, 0x02, 0x00, 0x00, 0xb7, 0x02, 0x00, 0x00, 0x49, // ...............I
	0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xae, 0x00, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, // ................
	0x00, 0x00, 0x00, 0x50, 0x02, 0x00, 0x00, 0xb6, 0x00, 0x00, 0x00, 0x06, 0x02, 0x00, 0x00, 0x50, // ...P...........P
	0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x51, 0x02, 0x00, 0x00, 0xae, 0x00, 0x00, 0x00, 0x50, // .......Q.......P
	0x02, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x53, 0x02, 0x00, 0x00, 0xb6, // ...........S....
	0x00, 0x00, 0x00, 0x06, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x54, // .......P.......T
	0x02, 0x00, 0x00, 0x53, 0x02, 0x00, 0x00, 0xae, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0xbd, // ...S.......P....
	0x00, 0x00, 0x00, 0x55, 0x02, 0x00, 0x00, 0x04, 0x02, 0x00, 0x00, 0x04, 0x02, 0x00, 0x00, 0xa9, // ...U............
	0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x56, 0x02, 0x00, 0x00, 0x55, 0x02, 0x00, 0x00, 0x51, // .......V...U...Q
	0x02, 0x00, 0x00, 0x54, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x57, // ...T...........W
	0x02, 0x00, 0x00, 0x98, 0x01, 0x00, 0x00, 0x56, 0x02, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, 0x59, // .......V...V...Y
	0x00, 0x00, 0x00, 0xc1, 0x02, 0x00, 0x00, 0x4e, 0x00, 0x00, 0x00, 0x4c, 0x00, 0x00, 0x00, 0x58, // .......N...L...X
	0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xc4, 0x02, 0x00, 0x00, 0xc1, 0x02, 0x00, 0x00, 0x57, // ...............W
	0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xae, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, // ...........Q....
	0x00, 0x00, 0x00, 0x5a, 0x02, 0x00, 0x00, 0xc4, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, // ...Z............
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x5e, 0x02, 0x00, 0x00, 0xc9, 0x00, 0x00, 0x00, 0x06, // .......^........
	0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x5f, 0x02, 0x00, 0x00, 0xae, // ...P......._....
	0x00, 0x00, 0x00, 0x5e, 0x02, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x61, // ...^...........a
	0x02, 0x00, 0x00, 0xc9, 0x00, 0x00, 0x00, 0x06, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, // ...........P....
	0x00, 0x00, 0x00, 0x62, 0x02, 0x00, 0x00, 0x61, 0x02, 0x00, 0x00, 0xae, 0x00, 0x00, 0x00, 0x50, // ...b...a.......P
	0x00, 0x05, 0x00, 0xbd, 0x00, 0x00, 0x00, 0x63, 0x02, 0x00, 0x00, 0x04, 0x02, 0x00, 0x00, 0x04, // .......c........
	0x02, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x64, 0x02, 0x00, 0x00, 0x63, // ...........d...c
	0x02, 0x00, 0x00, 0x5f, 0x02, 0x00, 0x00, 0x62, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x0b, // ..._...b........
	0x00, 0x00, 0x00, 0x65, 0x02, 0x00, 0x00, 0x98, 0x01, 0x00, 0x00, 0x64, 0x02, 0x00, 0x00, 0x56, // ...e.......d...V
	0x00, 0x05, 0x00, 0x59, 0x00, 0x00, 0x00, 0xcb, 0x02, 0x00, 0x00, 0x4e, 0x00, 0x00, 0x00, 0x4c, // ...Y.......N...L
	0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xce, 0x02, 0x00, 0x00, 0xcb, // ...X............
	0x02, 0x00, 0x00, 0x65, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xae, 0x00, 0x00, 0x00, 0x51, // ...e...........Q
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x68, 0x02, 0x00, 0x00, 0xce, 0x02, 0x00, 0x00, 0x00, // .......h........
	0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x69, 0x02, 0x00, 0x00, 0x01, // ...........i....
	0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x5a, 0x02, 0x00, 0x00, 0x68, 0x02, 0x00, 0x00, 0x50, // ...%...Z...h...P
	0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x6d, 0x02, 0x00, 0x00, 0xae, 0x00, 0x00, 0x00, 0x06, // .......m........
	0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x6f, 0x02, 0x00, 0x00, 0x06, // ...P.......o....
	0x02, 0x00, 0x00, 0xae, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0xbd, 0x00, 0x00, 0x00, 0x70, // .......P.......p
	0x02, 0x00, 0x00, 0x04, 0x02, 0x00, 0x00, 0x04, 0x02, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, // ................
	0x00, 0x00, 0x00, 0x71, 0x02, 0x00, 0x00, 0x70, 0x02, 0x00, 0x00, 0x6d, 0x02, 0x00, 0x00, 0x6f, // ...q...p...m...o
	0x02, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x72, 0x02, 0x00, 0x00, 0x98, // ...........r....
	0x01, 0x00, 0x00, 0x71, 0x02, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, 0x59, 0x00, 0x00, 0x00, 0xd5, // ...q...V...Y....
	0x02, 0x00, 0x00, 0x4e, 0x00, 0x00, 0x00, 0x4c, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, // ...N...L...X....
	0x00, 0x00, 0x00, 0xd8, 0x02, 0x00, 0x00, 0xd5, 0x02, 0x00, 0x00, 0x72, 0x02, 0x00, 0x00, 0x02, // ...........r....
	0x00, 0x00, 0x00, 0xae, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x75, // .......Q.......u
	0x02, 0x00, 0x00, 0xd8, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, // ................
	0x00, 0x00, 0x00, 0x76, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x69, // ...v.......%...i
	0x02, 0x00, 0x00, 0x75, 0x02, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0xab, 0x00, 0x00, 0x00, 0x77, // ...u...A.......w
	0x02, 0x00, 0x00, 0xaa, 0x00, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00, 0xeb, 0x00, 0x00, 0x00, 0x3d, // .......Q.......=
	0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x78, 0x02, 0x00, 0x00, 0x77, 0x02, 0x00, 0x00, 0x41, // .......x...w...A
	0x00, 0x06, 0x00, 0xab, 0x00, 0x00, 0x00, 0x7b, 0x02, 0x00, 0x00, 0xaa, 0x00, 0x00, 0x00, 0x55, // .......{.......U
	0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x7c, // .......=.......|
	0x02, 0x00, 0x00, 0x7b, 0x02, 0x00, 0x00, 0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x7d, // ...{...........}
	0x02, 0x00, 0x00, 0xef, 0x00, 0x00, 0x00, 0x7c, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x07, // .......|........
	0x00, 0x00, 0x00, 0x7e, 0x02, 0x00, 0x00, 0x7d, 0x02, 0x00, 0x00, 0xb6, 0x00, 0x00, 0x00, 0x0c, // ...~...}........
	0x00, 0x08, 0x00, 0x07, 0x00, 0x00, 0x00, 0x80, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, // ...............2
	0x00, 0x00, 0x00, 0x76, 0x02, 0x00, 0x00, 0x7e, 0x02, 0x00, 0x00, 0xb6, 0x00, 0x00, 0x00, 0x88, // ...v...~........
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x81, 0x02, 0x00, 0x00, 0xef, 0x00, 0x00, 0x00, 0x80, // ................
	0x02, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x82, 0x02, 0x00, 0x00, 0xef, // ................
	0x00, 0x00, 0x00, 0x81, 0x02, 0x00, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x07, 0x00, 0x00, 0x00, 0x84, // ................
	0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x06, 0x02, 0x00, 0x00, 0x82, // .......2........
	0x02, 0x00, 0x00, 0x78, 0x02, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x85, // ...x............
	0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0xae, 0x00, 0x00, 0x00, 0x84, // .......(........
	0x02, 0x00, 0x00, 0x7f, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x89, 0x02, 0x00, 0x00, 0x85, // ................
	0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x8a, 0x02, 0x00, 0x00, 0xae, // ...P............
	0x00, 0x00, 0x00, 0x89, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x8c, // .......P........
	0x02, 0x00, 0x00, 0x85, 0x02, 0x00, 0x00, 0xae, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0xbd, // ...........P....
	0x00, 0x00, 0x00, 0x8d, 0x02, 0x00, 0x00, 0x04, 0x02, 0x00, 0x00, 0x04, 0x02, 0x00, 0x00, 0xa9, // ................
	0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x8e, 0x02, 0x00, 0x00, 0x8d, 0x02, 0x00, 0x00, 0x8a, // ................
	0x02, 0x00, 0x00, 0x8c, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x8f, // ................
	0x02, 0x00, 0x00, 0x98, 0x01, 0x00, 0x00, 0x8e, 0x02, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, 0x59, // ...........V...Y
	0x00, 0x00, 0x00, 0xdf, 0x02, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x00, 0x58, // .......H...E...X
	0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xe2, 0x02, 0x00, 0x00, 0xdf, 0x02, 0x00, 0x00, 0x8f, // ................
	0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xae, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, // ...........Q....
	0x00, 0x00, 0x00, 0xe5, 0x02, 0x00, 0x00, 0xba, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, // ................
	0x00, 0x03, 0x00, 0xfc, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfb, 0x00, 0x03, 0x00, 0x7c, // ...............|
	0x00, 0x00, 0x00, 0xf3, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xf3, 0x02, 0x00, 0x00, 0xbc, // ................
	0x00, 0x05, 0x00, 0x68, 0x00, 0x00, 0x00, 0xf4, 0x02, 0x00, 0x00, 0xe5, 0x02, 0x00, 0x00, 0x67, // ...h...........g
	0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0xfb, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, // ................
	0x00, 0x04, 0x00, 0xf4, 0x02, 0x00, 0x00, 0xf5, 0x02, 0x00, 0x00, 0xf7, 0x02, 0x00, 0x00, 0xf8, // ................
	0x00, 0x02, 0x00, 0xf7, 0x02, 0x00, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x07, 0x00, 0x00, 0x00, 0xf9, // ................
	0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0xe5, 0x02, 0x00, 0x00, 0x70, // .......2.......p
	0x00, 0x00, 0x00, 0x72, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0xfa, // ...r............
	0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0xf9, 0x02, 0x00, 0x00, 0x74, // ...............t
	0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0xfc, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xf5, // ................
	0x02, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xf6, 0x02, 0x00, 0x00, 0xe5, // ................
	0x02, 0x00, 0x00, 0x6c, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0xfc, 0x02, 0x00, 0x00, 0xf8, // ...l............
	0x00, 0x02, 0x00, 0xfb, 0x02, 0x00, 0x00, 0xff, 0x00, 0x01, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xfc, // ................
	0x02, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0xd0, 0x03, 0x00, 0x00, 0xfa, // ................
	0x02, 0x00, 0x00, 0xf7, 0x02, 0x00, 0x00, 0xf6, 0x02, 0x00, 0x00, 0xf5, 0x02, 0x00, 0x00, 0x51, // ...............Q
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xe7, 0x02, 0x00, 0x00, 0xba, 0x02, 0x00, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x0e, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfb, // ................
	0x00, 0x03, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x05, 0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x05, // ...|............
	0x03, 0x00, 0x00, 0xbc, 0x00, 0x05, 0x00, 0x68, 0x00, 0x00, 0x00, 0x06, 0x03, 0x00, 0x00, 0xe7, // .......h........
	0x02, 0x00, 0x00, 0x67, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x0d, 0x03, 0x00, 0x00, 0x00, // ...g............
	0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0x06, 0x03, 0x00, 0x00, 0x07, 0x03, 0x00, 0x00, 0x09, // ................
	0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x09, 0x03, 0x00, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x07, // ................
	0x00, 0x00, 0x00, 0x0b, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0xe7, // ...........2....
	0x02, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x72, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, // ...p...r........
	0x00, 0x00, 0x00, 0x0c, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x0b, // ................
	0x03, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x0e, 0x03, 0x00, 0x00, 0xf8, // ...t............
	0x00, 0x02, 0x00, 0x07, 0x03, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x08, // ................
	0x03, 0x00, 0x00, 0xe7, 0x02, 0x00, 0x00, 0x6c, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x0e, // .......l........
	0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x0d, 0x03, 0x00, 0x00, 0xff, 0x00, 0x01, 0x00, 0xf8, // ................
	0x00, 0x02, 0x00, 0x0e, 0x03, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0xd1, // ................
	0x03, 0x00, 0x00, 0x0c, 0x03, 0x00, 0x00, 0x09, 0x03, 0x00, 0x00, 0x08, 0x03, 0x00, 0x00, 0x07, // ................
	0x03, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xe9, 0x02, 0x00, 0x00, 0xba, // ...Q............
	0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x20, 0x03, 0x00, 0x00, 0x00, // ........... ....
	0x00, 0x00, 0x00, 0xfb, 0x00, 0x03, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x17, 0x03, 0x00, 0x00, 0xf8, // .......|........
	0x00, 0x02, 0x00, 0x17, 0x03, 0x00, 0x00, 0xbc, 0x00, 0x05, 0x00, 0x68, 0x00, 0x00, 0x00, 0x18, // ...........h....
	0x03, 0x00, 0x00, 0xe9, 0x02, 0x00, 0x00, 0x67, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x1f, // .......g........
	0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0x18, 0x03, 0x00, 0x00, 0x19, // ................
	0x03, 0x00, 0x00, 0x1b, 0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x1b, 0x03, 0x00, 0x00, 0x0c, // ................
	0x00, 0x08, 0x00, 0x07, 0x00, 0x00, 0x00, 0x1d, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, // ...............2
	0x00, 0x00, 0x00, 0xe9, 0x02, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x72, 0x00, 0x00, 0x00, 0x0c, // .......p...r....
	0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x1e, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, // ................
	0x00, 0x00, 0x00, 0x1d, 0x03, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x20, // .......t....... 
	0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x19, 0x03, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, // ................
	0x00, 0x00, 0x00, 0x1a, 0x03, 0x00, 0x00, 0xe9, 0x02, 0x00, 0x00, 0x6c, 0x00, 0x00, 0x00, 0xf9, // ...........l....
	0x00, 0x02, 0x00, 0x20, 0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x1f, 0x03, 0x00, 0x00, 0xff, // ... ............
	0x00, 0x01, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x20, 0x03, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x07, // ....... ........
	0x00, 0x00, 0x00, 0xd2, 0x03, 0x00, 0x00, 0x1e, 0x03, 0x00, 0x00, 0x1b, 0x03, 0x00, 0x00, 0x1a, // ................
	0x03, 0x00, 0x00, 0x19, 0x03, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x24, // .......Q.......$
	0x03, 0x00, 0x00, 0xe2, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x3b, // ...............;
	0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfb, 0x00, 0x03, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x32, // ...........|...2
	0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x32, 0x03, 0x00, 0x00, 0xbc, 0x00, 0x05, 0x00, 0x68, // .......2.......h
	0x00, 0x00, 0x00, 0x33, 0x03, 0x00, 0x00, 0x24, 0x03, 0x00, 0x00, 0x67, 0x00, 0x00, 0x00, 0xf7, // ...3...$...g....
	0x00, 0x03, 0x00, 0x3a, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0x33, // ...:...........3
	0x03, 0x00, 0x00, 0x34, 0x03, 0x00, 0x00, 0x36, 0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x36, // ...4...6.......6
	0x03, 0x00, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x07, 0x00, 0x00, 0x00, 0x38, 0x03, 0x00, 0x00, 0x01, // ...........8....
	0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x24, 0x03, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x72, // ...2...$...p...r
	0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x39, 0x03, 0x00, 0x00, 0x01, // ...........9....
	0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x38, 0x03, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0xf9, // .......8...t....
	0x00, 0x02, 0x00, 0x3b, 0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x34, 0x03, 0x00, 0x00, 0x85, // ...;.......4....
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x35, 0x03, 0x00, 0x00, 0x24, 0x03, 0x00, 0x00, 0x6c, // .......5...$...l
	0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x3b, 0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x3a, // .......;.......:
	0x03, 0x00, 0x00, 0xff, 0x00, 0x01, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x3b, 0x03, 0x00, 0x00, 0xf5, // ...........;....
	0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0xd6, 0x03, 0x00, 0x00, 0x39, 0x03, 0x00, 0x00, 0x36, // ...........9...6
	0x03, 0x00, 0x00, 0x35, 0x03, 0x00, 0x00, 0x34, 0x03, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, // ...5...4...Q....
	0x00, 0x00, 0x00, 0x26, 0x03, 0x00, 0x00, 0xe2, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xf7, // ...&............
	0x00, 0x03, 0x00, 0x4d, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfb, 0x00, 0x03, 0x00, 0x7c, // ...M...........|
	0x00, 0x00, 0x00, 0x44, 0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x44, 0x03, 0x00, 0x00, 0xbc, // ...D.......D....
	0x00, 0x05, 0x00, 0x68, 0x00, 0x00, 0x00, 0x45, 0x03, 0x00, 0x00, 0x26, 0x03, 0x00, 0x00, 0x67, // ...h...E...&...g
	0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x4c, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, // .......L........
	0x00, 0x04, 0x00, 0x45, 0x03, 0x00, 0x00, 0x46, 0x03, 0x00, 0x00, 0x48, 0x03, 0x00, 0x00, 0xf8, // ...E...F...H....
	0x00, 0x02, 0x00, 0x48, 0x03, 0x00, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x07, 0x00, 0x00, 0x00, 0x4a, // ...H...........J
	0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x26, 0x03, 0x00, 0x00, 0x70, // .......2...&...p
	0x00, 0x00, 0x00, 0x72, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x4b, // ...r...........K
	0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x4a, 0x03, 0x00, 0x00, 0x74, // ...........J...t
	0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x4d, 0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x46, // .......M.......F
	0x03, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x47, 0x03, 0x00, 0x00, 0x26, // ...........G...&
	0x03, 0x00, 0x00, 0x6c, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x4d, 0x03, 0x00, 0x00, 0xf8, // ...l.......M....
	0x00, 0x02, 0x00, 0x4c, 0x03, 0x00, 0x00, 0xff, 0x00, 0x01, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x4d, // ...L...........M
	0x03, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0xd7, 0x03, 0x00, 0x00, 0x4b, // ...............K
	0x03, 0x00, 0x00, 0x48, 0x03, 0x00, 0x00, 0x47, 0x03, 0x00, 0x00, 0x46, 0x03, 0x00, 0x00, 0x51, // ...H...G...F...Q
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x28, 0x03, 0x00, 0x00, 0xe2, 0x02, 0x00, 0x00, 0x02, // .......(........
	0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x5f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfb, // ......._........
	0x00, 0x03, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x56, 0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x56, // ...|...V.......V
	0x03, 0x00, 0x00, 0xbc, 0x00, 0x05, 0x00, 0x68, 0x00, 0x00, 0x00, 0x57, 0x03, 0x00, 0x00, 0x28, // .......h...W...(
	0x03, 0x00, 0x00, 0x67, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x5e, 0x03, 0x00, 0x00, 0x00, // ...g.......^....
	0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0x57, 0x03, 0x00, 0x00, 0x58, 0x03, 0x00, 0x00, 0x5a, // .......W...X...Z
	0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x5a, 0x03, 0x00, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x07, // .......Z........
	0x00, 0x00, 0x00, 0x5c, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x28, // ...........2...(
	0x03, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x72, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, // ...p...r........
	0x00, 0x00, 0x00, 0x5d, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x5c, // ...]............
	0x03, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x5f, 0x03, 0x00, 0x00, 0xf8, // ...t......._....
	0x00, 0x02, 0x00, 0x58, 0x03, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x59, // ...X...........Y
	0x03, 0x00, 0x00, 0x28, 0x03, 0x00, 0x00, 0x6c, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x5f, // ...(...l......._
	0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x5e, 0x03, 0x00, 0x00, 0xff, 0x00, 0x01, 0x00, 0xf8, // .......^........
	0x00, 0x02, 0x00, 0x5f, 0x03, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0xd8, // ..._............
	0x03, 0x00, 0x00, 0x5d, 0x03, 0x00, 0x00, 0x5a, 0x03, 0x00, 0x00, 0x59, 0x03, 0x00, 0x00, 0x58, // ...]...Z...Y...X
	0x03, 0x00, 0x00, 0x41, 0x00, 0x05, 0x00, 0x62, 0x01, 0x00, 0x00, 0x64, 0x03, 0x00, 0x00, 0xaa, // ...A...b...d....
	0x00, 0x00, 0x00, 0x61, 0x01, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0xa7, 0x00, 0x00, 0x00, 0x65, // ...a...=.......e
	0x03, 0x00, 0x00, 0x64, 0x03, 0x00, 0x00, 0x50, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x69, // ...d...P.......i
	0x03, 0x00, 0x00, 0xd0, 0x03, 0x00, 0x00, 0xd1, 0x03, 0x00, 0x00, 0xd2, 0x03, 0x00, 0x00, 0xef, // ................
	0x00, 0x00, 0x00, 0x91, 0x00, 0x05, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x6a, 0x03, 0x00, 0x00, 0x65, // ...........j...e
	0x03, 0x00, 0x00, 0x69, 0x03, 0x00, 0x00, 0x41, 0x00, 0x05, 0x00, 0x62, 0x01, 0x00, 0x00, 0x6b, // ...i...A...b...k
	0x03, 0x00, 0x00, 0xaa, 0x00, 0x00, 0x00, 0x6a, 0x01, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0xa7, // .......j...=....
	0x00, 0x00, 0x00, 0x6c, 0x03, 0x00, 0x00, 0x6b, 0x03, 0x00, 0x00, 0x50, 0x00, 0x07, 0x00, 0x0e, // ...l...k...P....
	0x00, 0x00, 0x00, 0x70, 0x03, 0x00, 0x00, 0xd6, 0x03, 0x00, 0x00, 0xd7, 0x03, 0x00, 0x00, 0xd8, // ...p............
	0x03, 0x00, 0x00, 0xef, 0x00, 0x00, 0x00, 0x91, 0x00, 0x05, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x71, // ...............q
	0x03, 0x00, 0x00, 0x6c, 0x03, 0x00, 0x00, 0x70, 0x03, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x0e, // ...l...p........
	0x00, 0x00, 0x00, 0x72, 0x03, 0x00, 0x00, 0x6a, 0x03, 0x00, 0x00, 0x71, 0x03, 0x00, 0x00, 0x51, // ...r...j...q...Q
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x77, 0x03, 0x00, 0x00, 0x72, 0x03, 0x00, 0x00, 0x00, // .......w...r....
	0x00, 0x00, 0x00, 0xbc, 0x00, 0x05, 0x00, 0x68, 0x00, 0x00, 0x00, 0x84, 0x03, 0x00, 0x00, 0x77, // .......h.......w
	0x03, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x8b, 0x03, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0x84, 0x03, 0x00, 0x00, 0x85, 0x03, 0x00, 0x00, 0x87, // ................
	0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x87, 0x03, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, // ................
	0x00, 0x00, 0x00, 0x88, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x77, // ...............w
	0x03, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x07, 0x00, 0x00, 0x00, 0x8a, // ................
	0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x88, // .......2........
	0x03, 0x00, 0x00, 0xcf, 0x03, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x8b, 0x03, 0x00, 0x00, 0xf8, // ................
	0x00, 0x02, 0x00, 0x85, 0x03, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x86, // ................
	0x03, 0x00, 0x00, 0x8d, 0x00, 0x00, 0x00, 0x77, 0x03, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x8b, // .......w........
	0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x8b, 0x03, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x07, // ................
	0x00, 0x00, 0x00, 0xdc, 0x03, 0x00, 0x00, 0x8a, 0x03, 0x00, 0x00, 0x87, 0x03, 0x00, 0x00, 0x86, // ................
	0x03, 0x00, 0x00, 0x85, 0x03, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x79, // .......Q.......y
	0x03, 0x00, 0x00, 0x72, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xbc, 0x00, 0x05, 0x00, 0x68, // ...r...........h
	0x00, 0x00, 0x00, 0x93, 0x03, 0x00, 0x00, 0x79, 0x03, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0xf7, // .......y........
	0x00, 0x03, 0x00, 0x9a, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0x93, // ................
	0x03, 0x00, 0x00, 0x94, 0x03, 0x00, 0x00, 0x96, 0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x96, // ................
	0x03, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x97, 0x03, 0x00, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x79, 0x03, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00, 0x0c, // .......y........
	0x00, 0x08, 0x00, 0x07, 0x00, 0x00, 0x00, 0x99, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, // ...............2
	0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x97, 0x03, 0x00, 0x00, 0xcf, 0x03, 0x00, 0x00, 0xf9, // ................
	0x00, 0x02, 0x00, 0x9a, 0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x94, 0x03, 0x00, 0x00, 0x85, // ................
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x95, 0x03, 0x00, 0x00, 0x8d, 0x00, 0x00, 0x00, 0x79, // ...............y
	0x03, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x9a, 0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x9a, // ................
	0x03, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0xdd, 0x03, 0x00, 0x00, 0x99, // ................
	0x03, 0x00, 0x00, 0x96, 0x03, 0x00, 0x00, 0x95, 0x03, 0x00, 0x00, 0x94, 0x03, 0x00, 0x00, 0x51, // ...............Q
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x7b, 0x03, 0x00, 0x00, 0x72, 0x03, 0x00, 0x00, 0x02, // .......{...r....
	0x00, 0x00, 0x00, 0xbc, 0x00, 0x05, 0x00, 0x68, 0x00, 0x00, 0x00, 0xa2, 0x03, 0x00, 0x00, 0x7b, // .......h.......{
	0x03, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0xa9, 0x03, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0xa2, 0x03, 0x00, 0x00, 0xa3, 0x03, 0x00, 0x00, 0xa5, // ................
	0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xa5, 0x03, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, // ................
	0x00, 0x00, 0x00, 0xa6, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x7b, // ...............{
	0x03, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x07, 0x00, 0x00, 0x00, 0xa8, // ................
	0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0xa6, // .......2........
	0x03, 0x00, 0x00, 0xcf, 0x03, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0xa9, 0x03, 0x00, 0x00, 0xf8, // ................
	0x00, 0x02, 0x00, 0xa3, 0x03, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xa4, // ................
	0x03, 0x00, 0x00, 0x8d, 0x00, 0x00, 0x00, 0x7b, 0x03, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0xa9, // .......{........
	0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xa9, 0x03, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x07, // ................
	0x00, 0x00, 0x00, 0xde, 0x03, 0x00, 0x00, 0xa8, 0x03, 0x00, 0x00, 0xa5, 0x03, 0x00, 0x00, 0xa4, // ................
	0x03, 0x00, 0x00, 0xa3, 0x03, 0x00, 0x00, 0x50, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xdb, // .......P........
	0x01, 0x00, 0x00, 0xdc, 0x03, 0x00, 0x00, 0xdd, 0x03, 0x00, 0x00, 0xde, 0x03, 0x00, 0x00, 0xef, // ................
	0x00, 0x00, 0x00, 0x3e, 0x00, 0x03, 0x00, 0xa2, 0x01, 0x00, 0x00, 0xdb, 0x01, 0x00, 0x00, 0xfd, // ...>............
	0x00, 0x01, 0x00, 0x38, 0x00, 0x01, 0x00, 0x00, 0x00, 0xa0, 0x00,                               // ...8.......
};
static const bgfx::EmbeddedShader fs_pp_stereo_anaglyph_lin_srgb_nodesat = BGFX_EMBEDDED_SHADER(fs_pp_stereo_anaglyph_lin_srgb_nodesat);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Build of fragment shader from fs_pp_stereo.sc to fs_pp_stereo_anaglyph_lin_srgb_dyndesat with options: ANAGLYPH DYNDESAT SRGB NOSTEREO
static const uint8_t fs_pp_stereo_anaglyph_lin_srgb_dyndesat_mtl[7562] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x14, 0x74, // FSH.o.><.......t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, // ex_stereo_fbSamp
	0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x74, 0x65, // ler...........te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x54, 0x65, 0x78, 0x74, 0x75, // x_stereo_fbTextu
	0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x74, 0x65, 0x78, // re...........tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, // _stereo_depthSam
	0x70, 0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x74, // pler...........t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x54, // ex_stereo_depthT
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, // exture..........
	0x13, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, // .Stereo_MS_ZPD_Y
	0x41, 0x78, 0x69, 0x73, 0x12, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x77, // Axis...........w
	0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x01, 0x10, 0x00, 0x01, 0x00, 0x00, // _h_height.......
	0x00, 0x00, 0x00, 0x1a, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, // ....Stereo_LeftL
	0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x12, 0x01, // uminance_Gamma..
	0xa0, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // .........Stereo_
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, // RightLuminance_D
	0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x12, 0x01, 0xb0, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, // ynDesat.........
	0x00, 0x0e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, // ..Stereo_LeftMat
	0x14, 0x01, 0x20, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x53, 0x74, 0x65, 0x72, 0x65, // .. ........Stere
	0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x01, 0x60, 0x00, 0x04, 0x00, // o_RightMat..`...
	0x00, 0x00, 0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // .....tex_stereo_
	0x66, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x74, 0x65, 0x78, // fb...........tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x10, 0x00, 0x00, // _stereo_depth...
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x1c, 0x00, 0x00, 0x23, 0x69, 0x6e, 0x63, 0x6c, // ...........#incl
	0x75, 0x64, 0x65, 0x20, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x64, 0x6c, 0x69, // ude <metal_stdli
	0x62, 0x3e, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x73, 0x69, 0x6d, // b>.#include <sim
	0x64, 0x2f, 0x73, 0x69, 0x6d, 0x64, 0x2e, 0x68, 0x3e, 0x0a, 0x0a, 0x75, 0x73, 0x69, 0x6e, 0x67, // d/simd.h>..using
	0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x6d, 0x65, 0x74, 0x61, 0x6c, //  namespace metal
	0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, // ;..struct _Globa
	0x6c, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x53, // l.{.    float4 S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, // tereo_MS_ZPD_YAx
	0x69, 0x73, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x77, // is;.    float4 w
	0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, // _h_height;.    f
	0x6c, 0x6f, 0x61, 0x74, 0x34, 0x78, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, // loat4x4 Stereo_L
	0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, // eftMat;.    floa
	0x74, 0x34, 0x78, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, // t4x4 Stereo_Righ
	0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, // tMat;.    float4
	0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, //  Stereo_LeftLumi
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x20, 0x20, 0x20, // nance_Gamma;.   
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, //  float4 Stereo_R
	0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, // ightLuminance_Dy
	0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, // nDesat;.};..stru
	0x63, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, // ct xlatMtlMain_o
	0x75, 0x74, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, // ut.{.    float4 
	0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x20, 0x5b, // bgfx_FragData0 [
	0x5b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, // [color(0)]];.};.
	0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, // .struct xlatMtlM
	0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, // ain_in.{.    flo
	0x61, 0x74, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, // at2 v_texcoord0 
	0x5b, 0x5b, 0x75, 0x73, 0x65, 0x72, 0x28, 0x6c, 0x6f, 0x63, 0x6e, 0x30, 0x29, 0x5d, 0x5d, 0x3b, // [[user(locn0)]];
	0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x78, 0x6c, // .};..fragment xl
	0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x78, 0x6c, // atMtlMain_out xl
	0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x28, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, // atMtlMain(xlatMt
	0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x5b, 0x5b, 0x73, 0x74, // lMain_in in [[st
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x5d, 0x5d, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, // age_in]], consta
	0x6e, 0x74, 0x20, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x26, 0x20, 0x5f, 0x6d, 0x74, 0x6c, // nt _Global& _mtl
	0x5f, 0x75, 0x20, 0x5b, 0x5b, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, // _u [[buffer(0)]]
	0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, 0x6f, 0x61, // , texture2d<floa
	0x74, 0x3e, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, // t> tex_stereo_fb
	0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x2c, //  [[texture(0)]],
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, //  texture2d<float
	0x3e, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, // > tex_stereo_dep
	0x74, 0x68, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x31, 0x29, 0x5d, // th [[texture(1)]
	0x5d, 0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, // ], sampler tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, // tereo_fbSampler 
	0x5b, 0x5b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x2c, 0x20, // [[sampler(0)]], 
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // sampler tex_ster
	0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, // eo_depthSampler 
	0x5b, 0x5b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x31, 0x29, 0x5d, 0x5d, 0x29, 0x0a, // [[sampler(1)]]).
	0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, // {.    xlatMtlMai
	0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x3d, 0x20, 0x7b, 0x7d, 0x3b, 0x0a, // n_out out = {};.
	0x20, 0x20, 0x20, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x5f, 0x36, 0x33, 0x37, 0x20, 0x3d, 0x20, //     bool _637 = 
	0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, // _mtl_u.Stereo_MS
	0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x7a, 0x20, 0x21, 0x3d, 0x20, // _ZPD_YAxis.z != 
	0x30, 0x2e, 0x30, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, // 0.0;.    float _
	0x36, 0x39, 0x36, 0x20, 0x3d, 0x20, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x61, 0x78, 0x28, // 696 = fast::max(
	0x30, 0x2e, 0x30, 0x2c, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, // 0.0, fma(_mtl_u.
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, // Stereo_MS_ZPD_YA
	0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, // xis.x, 1.0 - (1.
	0x30, 0x20, 0x2f, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, // 0 / fma(fast::mi
	0x6e, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x5f, // n(fast::min(tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, 0x6d, // stereo_depth.sam
	0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, // ple(tex_stereo_d
	0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, 0x6e, // epthSampler, (in
	0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2b, 0x20, 0x73, // .v_texcoord0 + s
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x35, // elect(float2(0.5
	0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, //  * _mtl_u.Stereo
	0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, // _MS_ZPD_YAxis.x,
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, //  0.0), float2(0.
	0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, // 0, 0.5 * _mtl_u.
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, // Stereo_MS_ZPD_YA
	0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x36, // xis.x), bool2(_6
	0x33, 0x37, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, // 37))), level(0.0
	0x29, 0x29, 0x2e, 0x78, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // )).x, tex_stereo
	0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, // _depth.sample(te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, // x_stereo_depthSa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, // mpler, (in.v_tex
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2b, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, // coord0 + select(
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x30, 0x30, 0x30, 0x30, // float2(0.6660000
	0x30, 0x38, 0x35, 0x38, 0x33, 0x30, 0x36, 0x38, 0x38, 0x34, 0x37, 0x36, 0x35, 0x36, 0x32, 0x35, // 0858306884765625
	0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, //  * _mtl_u.Stereo
	0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, // _MS_ZPD_YAxis.x,
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, //  0.0), float2(0.
	0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x30, 0x30, 0x30, 0x30, 0x30, 0x38, 0x35, 0x38, // 0, 0.66600000858
	0x33, 0x30, 0x36, 0x38, 0x38, 0x34, 0x37, 0x36, 0x35, 0x36, 0x32, 0x35, 0x20, 0x2a, 0x20, 0x5f, // 306884765625 * _
	0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, // mtl_u.Stereo_MS_
	0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, 0x6f, // ZPD_YAxis.x), bo
	0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x36, 0x33, 0x37, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, // ol2(_637))), lev
	0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x74, 0x65, 0x78, // el(0.0)).x), tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, // _stereo_depth.sa
	0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // mple(tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, // depthSampler, (i
	0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2b, 0x20, // n.v_texcoord0 + 
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x5f, 0x6d, // select(float2(_m
	0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, // tl_u.Stereo_MS_Z
	0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // PD_YAxis.x, 0.0)
	0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x5f, 0x6d, // , float2(0.0, _m
	0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, // tl_u.Stereo_MS_Z
	0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, // PD_YAxis.x), boo
	0x6c, 0x32, 0x28, 0x5f, 0x36, 0x33, 0x37, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, // l2(_637))), leve
	0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x28, 0x31, 0x2e, 0x30, // l(0.0)).x), (1.0
	0x20, 0x2f, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, //  / _mtl_u.Stereo
	0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, // _MS_ZPD_YAxis.y)
	0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x2c, 0x20, 0x5f, //  - 0.5, 0.5)), _
	0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, // mtl_u.w_h_height
	0x2e, 0x77, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, // .w));.    float4
	0x20, 0x5f, 0x38, 0x31, 0x39, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, //  _819 = tex_ster
	0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, // eo_fb.sample(tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, // _stereo_fbSample
	0x72, 0x2c, 0x20, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, // r, (in.v_texcoor
	0x64, 0x30, 0x20, 0x2b, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, // d0 + select(floa
	0x74, 0x32, 0x28, 0x5f, 0x36, 0x39, 0x36, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, // t2(_696, 0.0), f
	0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x5f, 0x36, 0x39, 0x36, // loat2(0.0, -_696
	0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x36, 0x33, 0x37, 0x29, 0x29, 0x29, // ), bool2(_637)))
	0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x20, // , level(0.0));. 
	0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x37, 0x36, 0x36, 0x20, 0x3d, 0x20, //    float _766 = 
	0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x66, // fast::max(0.0, f
	0x6d, 0x61, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // ma(_mtl_u.Stereo
	0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, // _MS_ZPD_YAxis.x,
	0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x66, 0x6d, //  1.0 - (1.0 / fm
	0x61, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, 0x6e, 0x28, 0x66, 0x61, 0x73, 0x74, // a(fast::min(fast
	0x3a, 0x3a, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // ::min(tex_stereo
	0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, // _depth.sample(te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, // x_stereo_depthSa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, // mpler, (in.v_tex
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2d, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, // coord0 - select(
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, // float2(0.5 * _mt
	0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, // l_u.Stereo_MS_ZP
	0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, // D_YAxis.x, 0.0),
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, //  float2(0.0, 0.5
	0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, //  * _mtl_u.Stereo
	0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, // _MS_ZPD_YAxis.x)
	0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x36, 0x33, 0x37, 0x29, 0x29, 0x29, 0x2c, // , bool2(_637))),
	0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x2c, 0x20, //  level(0.0)).x, 
	0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, // tex_stereo_depth
	0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // .sample(tex_ster
	0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, // eo_depthSampler,
	0x20, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, //  (in.v_texcoord0
	0x20, 0x2d, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, //  - select(float2
	0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x30, 0x30, 0x30, 0x30, 0x30, 0x38, 0x35, 0x38, 0x33, 0x30, // (0.6660000085830
	0x36, 0x38, 0x38, 0x34, 0x37, 0x36, 0x35, 0x36, 0x32, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, // 6884765625 * _mt
	0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, // l_u.Stereo_MS_ZP
	0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, // D_YAxis.x, 0.0),
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, //  float2(0.0, 0.6
	0x36, 0x36, 0x30, 0x30, 0x30, 0x30, 0x30, 0x38, 0x35, 0x38, 0x33, 0x30, 0x36, 0x38, 0x38, 0x34, // 6600000858306884
	0x37, 0x36, 0x35, 0x36, 0x32, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, // 765625 * _mtl_u.
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, // Stereo_MS_ZPD_YA
	0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x36, // xis.x), bool2(_6
	0x33, 0x37, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, // 37))), level(0.0
	0x29, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // )).x), tex_stere
	0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, // o_depth.sample(t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, // ex_stereo_depthS
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, // ampler, (in.v_te
	0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2d, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, // xcoord0 - select
	0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, // (float2(_mtl_u.S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, // tereo_MS_ZPD_YAx
	0x69, 0x73, 0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, // is.x, 0.0), floa
	0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, // t2(0.0, _mtl_u.S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, // tereo_MS_ZPD_YAx
	0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x36, 0x33, // is.x), bool2(_63
	0x37, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, // 7))), level(0.0)
	0x29, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x5f, 0x6d, 0x74, // ).x), (1.0 / _mt
	0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, // l_u.Stereo_MS_ZP
	0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, // D_YAxis.y) - 0.5
	0x2c, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, // , 0.5)), _mtl_u.
	0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x29, 0x29, 0x3b, 0x0a, // w_h_height.w));.
	0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x38, 0x35, 0x39, 0x20, //     float4 _859 
	0x3d, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2e, // = tex_stereo_fb.
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // sample(tex_stere
	0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, 0x6e, // o_fbSampler, (in
	0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2d, 0x20, 0x73, // .v_texcoord0 - s
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x5f, 0x37, 0x36, // elect(float2(_76
	0x36, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, // 6, 0.0), float2(
	0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x5f, 0x37, 0x36, 0x36, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, // 0.0, -_766), boo
	0x6c, 0x32, 0x28, 0x5f, 0x36, 0x33, 0x37, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, // l2(_637))), leve
	0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, // l(0.0));.    flo
	0x61, 0x74, 0x20, 0x5f, 0x38, 0x36, 0x32, 0x20, 0x3d, 0x20, 0x5f, 0x38, 0x31, 0x39, 0x2e, 0x78, // at _862 = _819.x
	0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x31, 0x31, 0x39, // ;.    float _119
	0x30, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x64, 0x6f, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, // 0;.    do.    {.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, 0x38, 0x36, 0x32, //         if (_862
	0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, 0x34, 0x34, 0x39, 0x39, 0x39, 0x39, 0x32, //  <= 0.0404499992
	0x37, 0x32, 0x38, 0x32, 0x33, 0x33, 0x33, 0x33, 0x37, 0x34, 0x30, 0x32, 0x33, 0x34, 0x33, 0x37, // 7282333374023437
	0x35, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, // 5).        {.   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x31, 0x31, 0x39, 0x30, 0x20, 0x3d, //          _1190 =
	0x20, 0x5f, 0x38, 0x36, 0x32, 0x20, 0x2a, 0x20, 0x30, 0x2e, 0x30, 0x37, 0x37, 0x33, 0x39, 0x39, //  _862 * 0.077399
	0x33, 0x38, 0x30, 0x35, 0x30, 0x35, 0x30, 0x38, 0x34, 0x39, 0x39, 0x31, 0x34, 0x35, 0x35, 0x30, // 3805050849914550
	0x37, 0x38, 0x31, 0x32, 0x35, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 78125;.         
	0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //    break;.      
	0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, //   }.        else
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // .        {.     
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x31, 0x31, 0x39, 0x30, 0x20, 0x3d, 0x20, 0x70, //        _1190 = p
	0x6f, 0x77, 0x72, 0x28, 0x66, 0x6d, 0x61, 0x28, 0x5f, 0x38, 0x36, 0x32, 0x2c, 0x20, 0x30, 0x2e, // owr(fma(_862, 0.
	0x39, 0x34, 0x37, 0x38, 0x36, 0x37, 0x32, 0x37, 0x34, 0x32, 0x38, 0x34, 0x33, 0x36, 0x32, 0x37, // 9478672742843627
	0x39, 0x32, 0x39, 0x36, 0x38, 0x37, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x32, 0x31, 0x33, // 9296875, 0.05213
	0x32, 0x36, 0x39, 0x39, 0x36, 0x33, 0x38, 0x36, 0x30, 0x35, 0x31, 0x31, 0x37, 0x37, 0x39, 0x37, // 2699638605117797
	0x38, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x30, 0x30, 0x30, // 8515625), 2.4000
	0x30, 0x30, 0x30, 0x39, 0x35, 0x33, 0x36, 0x37, 0x34, 0x33, 0x31, 0x36, 0x34, 0x30, 0x36, 0x32, // 0009536743164062
	0x35, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 5);.            
	0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, // break;.        }
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x20, // .        break; 
	0x2f, 0x2f, 0x20, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x77, // // unreachable w
	0x6f, 0x72, 0x6b, 0x61, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x20, // orkaround.    } 
	0x77, 0x68, 0x69, 0x6c, 0x65, 0x28, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x20, 0x20, // while(false);.  
	0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x38, 0x36, 0x34, 0x20, 0x3d, 0x20, 0x5f, //   float _864 = _
	0x38, 0x31, 0x39, 0x2e, 0x79, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // 819.y;.    float
	0x20, 0x5f, 0x31, 0x31, 0x39, 0x31, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x64, 0x6f, 0x0a, 0x20, //  _1191;.    do. 
	0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, //    {.        if 
	0x28, 0x5f, 0x38, 0x36, 0x34, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, 0x34, 0x34, // (_864 <= 0.04044
	0x39, 0x39, 0x39, 0x39, 0x32, 0x37, 0x32, 0x38, 0x32, 0x33, 0x33, 0x33, 0x33, 0x37, 0x34, 0x30, // 9999272823333740
	0x32, 0x33, 0x34, 0x33, 0x37, 0x35, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 234375).        
	0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x31, // {.            _1
	0x31, 0x39, 0x31, 0x20, 0x3d, 0x20, 0x5f, 0x38, 0x36, 0x34, 0x20, 0x2a, 0x20, 0x30, 0x2e, 0x30, // 191 = _864 * 0.0
	0x37, 0x37, 0x33, 0x39, 0x39, 0x33, 0x38, 0x30, 0x35, 0x30, 0x35, 0x30, 0x38, 0x34, 0x39, 0x39, // 7739938050508499
	0x31, 0x34, 0x35, 0x35, 0x30, 0x37, 0x38, 0x31, 0x32, 0x35, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, // 1455078125;.    
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, //         break;. 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //        }.       
	0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, //  else.        {.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x31, 0x31, 0x39, //             _119
	0x31, 0x20, 0x3d, 0x20, 0x70, 0x6f, 0x77, 0x72, 0x28, 0x66, 0x6d, 0x61, 0x28, 0x5f, 0x38, 0x36, // 1 = powr(fma(_86
	0x34, 0x2c, 0x20, 0x30, 0x2e, 0x39, 0x34, 0x37, 0x38, 0x36, 0x37, 0x32, 0x37, 0x34, 0x32, 0x38, // 4, 0.94786727428
	0x34, 0x33, 0x36, 0x32, 0x37, 0x39, 0x32, 0x39, 0x36, 0x38, 0x37, 0x35, 0x2c, 0x20, 0x30, 0x2e, // 436279296875, 0.
	0x30, 0x35, 0x32, 0x31, 0x33, 0x32, 0x36, 0x39, 0x39, 0x36, 0x33, 0x38, 0x36, 0x30, 0x35, 0x31, // 0521326996386051
	0x31, 0x37, 0x37, 0x39, 0x37, 0x38, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x2c, 0x20, 0x32, // 177978515625), 2
	0x2e, 0x34, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x39, 0x35, 0x33, 0x36, 0x37, 0x34, 0x33, 0x31, // .400000095367431
	0x36, 0x34, 0x30, 0x36, 0x32, 0x35, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 640625);.       
	0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, //      break;.    
	0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, //     }.        br
	0x65, 0x61, 0x6b, 0x3b, 0x20, 0x2f, 0x2f, 0x20, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, // eak; // unreacha
	0x62, 0x6c, 0x65, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x61, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x0a, 0x20, // ble workaround. 
	0x20, 0x20, 0x20, 0x7d, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x28, 0x66, 0x61, 0x6c, 0x73, 0x65, //    } while(false
	0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x38, 0x36, // );.    float _86
	0x36, 0x20, 0x3d, 0x20, 0x5f, 0x38, 0x31, 0x39, 0x2e, 0x7a, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, // 6 = _819.z;.    
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x31, 0x31, 0x39, 0x32, 0x3b, 0x0a, 0x20, 0x20, 0x20, // float _1192;.   
	0x20, 0x64, 0x6f, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //  do.    {.      
	0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, 0x38, 0x36, 0x36, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, //   if (_866 <= 0.
	0x30, 0x34, 0x30, 0x34, 0x34, 0x39, 0x39, 0x39, 0x39, 0x32, 0x37, 0x32, 0x38, 0x32, 0x33, 0x33, // 0404499992728233
	0x33, 0x33, 0x37, 0x34, 0x30, 0x32, 0x33, 0x34, 0x33, 0x37, 0x35, 0x29, 0x0a, 0x20, 0x20, 0x20, // 33740234375).   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //      {.         
	0x20, 0x20, 0x20, 0x5f, 0x31, 0x31, 0x39, 0x32, 0x20, 0x3d, 0x20, 0x5f, 0x38, 0x36, 0x36, 0x20, //    _1192 = _866 
	0x2a, 0x20, 0x30, 0x2e, 0x30, 0x37, 0x37, 0x33, 0x39, 0x39, 0x33, 0x38, 0x30, 0x35, 0x30, 0x35, // * 0.077399380505
	0x30, 0x38, 0x34, 0x39, 0x39, 0x31, 0x34, 0x35, 0x35, 0x30, 0x37, 0x38, 0x31, 0x32, 0x35, 0x3b, // 084991455078125;
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, // .            bre
	0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, // ak;.        }.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, //       else.     
	0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //    {.           
	0x20, 0x5f, 0x31, 0x31, 0x39, 0x32, 0x20, 0x3d, 0x20, 0x70, 0x6f, 0x77, 0x72, 0x28, 0x66, 0x6d, //  _1192 = powr(fm
	0x61, 0x28, 0x5f, 0x38, 0x36, 0x36, 0x2c, 0x20, 0x30, 0x2e, 0x39, 0x34, 0x37, 0x38, 0x36, 0x37, // a(_866, 0.947867
	0x32, 0x37, 0x34, 0x32, 0x38, 0x34, 0x33, 0x36, 0x32, 0x37, 0x39, 0x32, 0x39, 0x36, 0x38, 0x37, // 2742843627929687
	0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x32, 0x31, 0x33, 0x32, 0x36, 0x39, 0x39, 0x36, 0x33, // 5, 0.05213269963
	0x38, 0x36, 0x30, 0x35, 0x31, 0x31, 0x37, 0x37, 0x39, 0x37, 0x38, 0x35, 0x31, 0x35, 0x36, 0x32, // 8605117797851562
	0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x39, 0x35, 0x33, // 5), 2.4000000953
	0x36, 0x37, 0x34, 0x33, 0x31, 0x36, 0x34, 0x30, 0x36, 0x32, 0x35, 0x29, 0x3b, 0x0a, 0x20, 0x20, // 67431640625);.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, //           break;
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // .        }.     
	0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x20, 0x2f, 0x2f, 0x20, 0x75, 0x6e, 0x72, //    break; // unr
	0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x61, 0x72, 0x6f, // eachable workaro
	0x75, 0x6e, 0x64, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x28, // und.    } while(
	0x66, 0x61, 0x6c, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, // false);.    floa
	0x74, 0x33, 0x20, 0x5f, 0x38, 0x36, 0x38, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, // t3 _868 = float3
	0x28, 0x5f, 0x31, 0x31, 0x39, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x31, 0x39, 0x31, 0x2c, 0x20, 0x5f, // (_1190, _1191, _
	0x31, 0x31, 0x39, 0x32, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // 1192);.    float
	0x20, 0x5f, 0x39, 0x32, 0x35, 0x20, 0x3d, 0x20, 0x5f, 0x38, 0x35, 0x39, 0x2e, 0x78, 0x3b, 0x0a, //  _925 = _859.x;.
	0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x31, 0x31, 0x39, 0x36, 0x3b, //     float _1196;
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x64, 0x6f, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, // .    do.    {.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, 0x39, 0x32, 0x35, 0x20, 0x3c, //       if (_925 <
	0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, 0x34, 0x34, 0x39, 0x39, 0x39, 0x39, 0x32, 0x37, 0x32, // = 0.040449999272
	0x38, 0x32, 0x33, 0x33, 0x33, 0x33, 0x37, 0x34, 0x30, 0x32, 0x33, 0x34, 0x33, 0x37, 0x35, 0x29, // 823333740234375)
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // .        {.     
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x31, 0x31, 0x39, 0x36, 0x20, 0x3d, 0x20, 0x5f, //        _1196 = _
	0x39, 0x32, 0x35, 0x20, 0x2a, 0x20, 0x30, 0x2e, 0x30, 0x37, 0x37, 0x33, 0x39, 0x39, 0x33, 0x38, // 925 * 0.07739938
	0x30, 0x35, 0x30, 0x35, 0x30, 0x38, 0x34, 0x39, 0x39, 0x31, 0x34, 0x35, 0x35, 0x30, 0x37, 0x38, // 0505084991455078
	0x31, 0x32, 0x35, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 125;.           
	0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //  break;.        
	0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, // }.        else. 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //        {.       
	0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x31, 0x31, 0x39, 0x36, 0x20, 0x3d, 0x20, 0x70, 0x6f, 0x77, //      _1196 = pow
	0x72, 0x28, 0x66, 0x6d, 0x61, 0x28, 0x5f, 0x39, 0x32, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x39, 0x34, // r(fma(_925, 0.94
	0x37, 0x38, 0x36, 0x37, 0x32, 0x37, 0x34, 0x32, 0x38, 0x34, 0x33, 0x36, 0x32, 0x37, 0x39, 0x32, // 7867274284362792
	0x39, 0x36, 0x38, 0x37, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x32, 0x31, 0x33, 0x32, 0x36, // 96875, 0.0521326
	0x39, 0x39, 0x36, 0x33, 0x38, 0x36, 0x30, 0x35, 0x31, 0x31, 0x37, 0x37, 0x39, 0x37, 0x38, 0x35, // 9963860511779785
	0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x30, 0x30, 0x30, 0x30, 0x30, // 15625), 2.400000
	0x30, 0x39, 0x35, 0x33, 0x36, 0x37, 0x34, 0x33, 0x31, 0x36, 0x34, 0x30, 0x36, 0x32, 0x35, 0x29, // 095367431640625)
	0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, // ;.            br
	0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, // eak;.        }. 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x20, 0x2f, 0x2f, //        break; //
	0x20, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x77, 0x6f, 0x72, //  unreachable wor
	0x6b, 0x61, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x20, 0x77, 0x68, // karound.    } wh
	0x69, 0x6c, 0x65, 0x28, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, // ile(false);.    
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x39, 0x32, 0x37, 0x20, 0x3d, 0x20, 0x5f, 0x38, 0x35, // float _927 = _85
	0x39, 0x2e, 0x79, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, // 9.y;.    float _
	0x31, 0x31, 0x39, 0x37, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x64, 0x6f, 0x0a, 0x20, 0x20, 0x20, // 1197;.    do.   
	0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, //  {.        if (_
	0x39, 0x32, 0x37, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, 0x34, 0x34, 0x39, 0x39, // 927 <= 0.0404499
	0x39, 0x39, 0x32, 0x37, 0x32, 0x38, 0x32, 0x33, 0x33, 0x33, 0x33, 0x37, 0x34, 0x30, 0x32, 0x33, // 9927282333374023
	0x34, 0x33, 0x37, 0x35, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, // 4375).        {.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x31, 0x31, 0x39, //             _119
	0x37, 0x20, 0x3d, 0x20, 0x5f, 0x39, 0x32, 0x37, 0x20, 0x2a, 0x20, 0x30, 0x2e, 0x30, 0x37, 0x37, // 7 = _927 * 0.077
	0x33, 0x39, 0x39, 0x33, 0x38, 0x30, 0x35, 0x30, 0x35, 0x30, 0x38, 0x34, 0x39, 0x39, 0x31, 0x34, // 3993805050849914
	0x35, 0x35, 0x30, 0x37, 0x38, 0x31, 0x32, 0x35, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 55078125;.      
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, //       break;.   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x65, //      }.        e
	0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, // lse.        {.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x31, 0x31, 0x39, 0x37, 0x20, //           _1197 
	0x3d, 0x20, 0x70, 0x6f, 0x77, 0x72, 0x28, 0x66, 0x6d, 0x61, 0x28, 0x5f, 0x39, 0x32, 0x37, 0x2c, // = powr(fma(_927,
	0x20, 0x30, 0x2e, 0x39, 0x34, 0x37, 0x38, 0x36, 0x37, 0x32, 0x37, 0x34, 0x32, 0x38, 0x34, 0x33, //  0.9478672742843
	0x36, 0x32, 0x37, 0x39, 0x32, 0x39, 0x36, 0x38, 0x37, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x35, // 6279296875, 0.05
	0x32, 0x31, 0x33, 0x32, 0x36, 0x39, 0x39, 0x36, 0x33, 0x38, 0x36, 0x30, 0x35, 0x31, 0x31, 0x37, // 2132699638605117
	0x37, 0x39, 0x37, 0x38, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, 0x34, // 7978515625), 2.4
	0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x39, 0x35, 0x33, 0x36, 0x37, 0x34, 0x33, 0x31, 0x36, 0x34, // 0000009536743164
	0x30, 0x36, 0x32, 0x35, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 0625);.         
	0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //    break;.      
	0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, //   }.        brea
	0x6b, 0x3b, 0x20, 0x2f, 0x2f, 0x20, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, // k; // unreachabl
	0x65, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x61, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x0a, 0x20, 0x20, 0x20, // e workaround.   
	0x20, 0x7d, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x28, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x29, 0x3b, //  } while(false);
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x39, 0x32, 0x39, 0x20, // .    float _929 
	0x3d, 0x20, 0x5f, 0x38, 0x35, 0x39, 0x2e, 0x7a, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, // = _859.z;.    fl
	0x6f, 0x61, 0x74, 0x20, 0x5f, 0x31, 0x31, 0x39, 0x38, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x64, // oat _1198;.    d
	0x6f, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // o.    {.        
	0x69, 0x66, 0x20, 0x28, 0x5f, 0x39, 0x32, 0x39, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, // if (_929 <= 0.04
	0x30, 0x34, 0x34, 0x39, 0x39, 0x39, 0x39, 0x32, 0x37, 0x32, 0x38, 0x32, 0x33, 0x33, 0x33, 0x33, // 0449999272823333
	0x37, 0x34, 0x30, 0x32, 0x33, 0x34, 0x33, 0x37, 0x35, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // 740234375).     
	0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //    {.           
	0x20, 0x5f, 0x31, 0x31, 0x39, 0x38, 0x20, 0x3d, 0x20, 0x5f, 0x39, 0x32, 0x39, 0x20, 0x2a, 0x20, //  _1198 = _929 * 
	0x30, 0x2e, 0x30, 0x37, 0x37, 0x33, 0x39, 0x39, 0x33, 0x38, 0x30, 0x35, 0x30, 0x35, 0x30, 0x38, // 0.07739938050508
	0x34, 0x39, 0x39, 0x31, 0x34, 0x35, 0x35, 0x30, 0x37, 0x38, 0x31, 0x32, 0x35, 0x3b, 0x0a, 0x20, // 4991455078125;. 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, //            break
	0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, // ;.        }.    
	0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //     else.       
	0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, //  {.            _
	0x31, 0x31, 0x39, 0x38, 0x20, 0x3d, 0x20, 0x70, 0x6f, 0x77, 0x72, 0x28, 0x66, 0x6d, 0x61, 0x28, // 1198 = powr(fma(
	0x5f, 0x39, 0x32, 0x39, 0x2c, 0x20, 0x30, 0x2e, 0x39, 0x34, 0x37, 0x38, 0x36, 0x37, 0x32, 0x37, // _929, 0.94786727
	0x34, 0x32, 0x38, 0x34, 0x33, 0x36, 0x32, 0x37, 0x39, 0x32, 0x39, 0x36, 0x38, 0x37, 0x35, 0x2c, // 428436279296875,
	0x20, 0x30, 0x2e, 0x30, 0x35, 0x32, 0x31, 0x33, 0x32, 0x36, 0x39, 0x39, 0x36, 0x33, 0x38, 0x36, //  0.0521326996386
	0x30, 0x35, 0x31, 0x31, 0x37, 0x37, 0x39, 0x37, 0x38, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, // 051177978515625)
	0x2c, 0x20, 0x32, 0x2e, 0x34, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x39, 0x35, 0x33, 0x36, 0x37, // , 2.400000095367
	0x34, 0x33, 0x31, 0x36, 0x34, 0x30, 0x36, 0x32, 0x35, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, // 431640625);.    
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, //         break;. 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //        }.       
	0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x20, 0x2f, 0x2f, 0x20, 0x75, 0x6e, 0x72, 0x65, 0x61, //  break; // unrea
	0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x61, 0x72, 0x6f, 0x75, 0x6e, // chable workaroun
	0x64, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x28, 0x66, 0x61, // d.    } while(fa
	0x6c, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, // lse);.    float3
	0x20, 0x5f, 0x39, 0x33, 0x31, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x5f, //  _931 = float3(_
	0x31, 0x31, 0x39, 0x36, 0x2c, 0x20, 0x5f, 0x31, 0x31, 0x39, 0x37, 0x2c, 0x20, 0x5f, 0x31, 0x31, // 1196, _1197, _11
	0x39, 0x38, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, // 98);.    float _
	0x31, 0x30, 0x30, 0x36, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x5f, 0x38, 0x36, 0x38, 0x2c, // 1006 = dot(_868,
	0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, //  _mtl_u.Stereo_L
	0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, // eftLuminance_Gam
	0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, // ma.xyz);.    flo
	0x61, 0x74, 0x20, 0x5f, 0x31, 0x30, 0x31, 0x30, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x5f, // at _1010 = dot(_
	0x38, 0x36, 0x38, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, // 868, _mtl_u.Ster
	0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, // eo_RightLuminanc
	0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, // e_DynDesat.xyz);
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x31, 0x30, 0x31, 0x34, // .    float _1014
	0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x5f, 0x39, 0x33, 0x31, 0x2c, 0x20, 0x5f, 0x6d, 0x74, //  = dot(_931, _mt
	0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, // l_u.Stereo_LeftL
	0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, // uminance_Gamma.x
	0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, // yz);.    float _
	0x31, 0x30, 0x31, 0x38, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x5f, 0x39, 0x33, 0x31, 0x2c, // 1018 = dot(_931,
	0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, //  _mtl_u.Stereo_R
	0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, // ightLuminance_Dy
	0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, // nDesat.xyz);.   
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x31, 0x30, 0x32, 0x31, 0x20, 0x3d, 0x20, 0x5f, //  float _1021 = _
	0x31, 0x30, 0x30, 0x36, 0x20, 0x2b, 0x20, 0x5f, 0x31, 0x30, 0x31, 0x30, 0x3b, 0x0a, 0x20, 0x20, // 1006 + _1010;.  
	0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x31, 0x30, 0x32, 0x34, 0x20, 0x3d, 0x20, //   float _1024 = 
	0x5f, 0x31, 0x30, 0x31, 0x34, 0x20, 0x2b, 0x20, 0x5f, 0x31, 0x30, 0x31, 0x38, 0x3b, 0x0a, 0x20, // _1014 + _1018;. 
	0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x31, 0x30, 0x39, 0x36, 0x20, //    float4 _1096 
	0x3d, 0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x6d, 0x69, 0x78, 0x28, 0x5f, 0x38, // = (float4(mix(_8
	0x36, 0x38, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x31, 0x30, 0x32, 0x31, // 68, float3(_1021
	0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, // ), float3(_mtl_u
	0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, // .Stereo_RightLum
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, // inance_DynDesat.
	0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x5f, 0x31, 0x30, 0x30, 0x36, 0x20, 0x2d, // w * abs((_1006 -
	0x20, 0x5f, 0x31, 0x30, 0x31, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x5f, 0x31, 0x30, 0x32, 0x31, //  _1010) / (_1021
	0x20, 0x2b, 0x20, 0x39, 0x2e, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x37, 0x34, 0x37, 0x33, 0x37, //  + 9.99999974737
	0x38, 0x37, 0x35, 0x31, 0x36, 0x33, 0x35, 0x35, 0x35, 0x31, 0x34, 0x35, 0x32, 0x36, 0x33, 0x36, // 8751635551452636
	0x37, 0x31, 0x38, 0x38, 0x65, 0x2d, 0x30, 0x35, 0x29, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x31, 0x2e, // 7188e-05)))), 1.
	0x30, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, // 0) * _mtl_u.Ster
	0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x66, // eo_LeftMat) + (f
	0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x6d, 0x69, 0x78, 0x28, 0x5f, 0x39, 0x33, 0x31, 0x2c, 0x20, // loat4(mix(_931, 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x31, 0x30, 0x32, 0x34, 0x29, 0x2c, 0x20, 0x66, // float3(_1024), f
	0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, // loat3(_mtl_u.Ste
	0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, // reo_RightLuminan
	0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, // ce_DynDesat.w * 
	0x61, 0x62, 0x73, 0x28, 0x28, 0x5f, 0x31, 0x30, 0x31, 0x34, 0x20, 0x2d, 0x20, 0x5f, 0x31, 0x30, // abs((_1014 - _10
	0x31, 0x38, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x5f, 0x31, 0x30, 0x32, 0x34, 0x20, 0x2b, 0x20, 0x39, // 18) / (_1024 + 9
	0x2e, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x37, 0x34, 0x37, 0x33, 0x37, 0x38, 0x37, 0x35, 0x31, // .999999747378751
	0x36, 0x33, 0x35, 0x35, 0x35, 0x31, 0x34, 0x35, 0x32, 0x36, 0x33, 0x36, 0x37, 0x31, 0x38, 0x38, // 6355514526367188
	0x65, 0x2d, 0x30, 0x35, 0x29, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2a, // e-05)))), 1.0) *
	0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, //  _mtl_u.Stereo_R
	0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, // ightMat);.    fl
	0x6f, 0x61, 0x74, 0x20, 0x5f, 0x31, 0x31, 0x30, 0x31, 0x20, 0x3d, 0x20, 0x5f, 0x31, 0x30, 0x39, // oat _1101 = _109
	0x36, 0x2e, 0x78, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, // 6.x;.    float _
	0x31, 0x32, 0x30, 0x32, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, 0x31, // 1202;.    if (_1
	0x31, 0x30, 0x31, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x33, 0x31, 0x33, 0x30, 0x38, // 101 <= 0.0031308
	0x30, 0x30, 0x30, 0x39, 0x30, 0x37, 0x33, 0x30, 0x31, 0x39, 0x30, 0x32, 0x37, 0x37, 0x30, 0x39, // 0009073019027709
	0x39, 0x36, 0x30, 0x39, 0x33, 0x37, 0x35, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, // 9609375).    {. 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x31, 0x32, 0x30, 0x32, 0x20, 0x3d, 0x20, 0x31, //        _1202 = 1
	0x32, 0x2e, 0x39, 0x32, 0x30, 0x30, 0x30, 0x30, 0x30, 0x37, 0x36, 0x32, 0x39, 0x33, 0x39, 0x34, // 2.92000007629394
	0x35, 0x33, 0x31, 0x32, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x31, 0x31, 0x30, 0x31, 0x3b, 0x0a, 0x20, // 53125 * _1101;. 
	0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, //    }.    else.  
	0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x31, 0x32, 0x30, //   {.        _120
	0x32, 0x20, 0x3d, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x31, 0x2e, 0x30, 0x35, 0x34, 0x39, 0x39, 0x39, // 2 = fma(1.054999
	0x39, 0x34, 0x37, 0x35, 0x34, 0x37, 0x39, 0x31, 0x32, 0x35, 0x39, 0x37, 0x36, 0x35, 0x36, 0x32, // 9475479125976562
	0x35, 0x2c, 0x20, 0x70, 0x6f, 0x77, 0x72, 0x28, 0x5f, 0x31, 0x31, 0x30, 0x31, 0x2c, 0x20, 0x30, // 5, powr(_1101, 0
	0x2e, 0x34, 0x31, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x37, 0x33, 0x32, 0x35, 0x35, 0x39, // .416666656732559
	0x32, 0x30, 0x34, 0x31, 0x30, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x2c, 0x20, 0x2d, 0x30, 0x2e, // 2041015625), -0.
	0x30, 0x35, 0x34, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x37, 0x30, 0x31, 0x39, 0x37, 0x36, 0x37, // 0549999997019767
	0x37, 0x36, 0x31, 0x32, 0x33, 0x30, 0x34, 0x36, 0x38, 0x37, 0x35, 0x29, 0x3b, 0x0a, 0x20, 0x20, // 76123046875);.  
	0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x31, //   }.    float _1
	0x31, 0x30, 0x33, 0x20, 0x3d, 0x20, 0x5f, 0x31, 0x30, 0x39, 0x36, 0x2e, 0x79, 0x3b, 0x0a, 0x20, // 103 = _1096.y;. 
	0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x31, 0x32, 0x30, 0x33, 0x3b, 0x0a, //    float _1203;.
	0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, 0x31, 0x31, 0x30, 0x33, 0x20, 0x3c, 0x3d, //     if (_1103 <=
	0x20, 0x30, 0x2e, 0x30, 0x30, 0x33, 0x31, 0x33, 0x30, 0x38, 0x30, 0x30, 0x30, 0x39, 0x30, 0x37, //  0.0031308000907
	0x33, 0x30, 0x31, 0x39, 0x30, 0x32, 0x37, 0x37, 0x30, 0x39, 0x39, 0x36, 0x30, 0x39, 0x33, 0x37, // 3019027709960937
	0x35, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 5).    {.       
	0x20, 0x5f, 0x31, 0x32, 0x30, 0x33, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x30, 0x30, //  _1203 = 12.9200
	0x30, 0x30, 0x30, 0x37, 0x36, 0x32, 0x39, 0x33, 0x39, 0x34, 0x35, 0x33, 0x31, 0x32, 0x35, 0x20, // 000762939453125 
	0x2a, 0x20, 0x5f, 0x31, 0x31, 0x30, 0x33, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, // * _1103;.    }. 
	0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, //    else.    {.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x31, 0x32, 0x30, 0x33, 0x20, 0x3d, 0x20, 0x66, 0x6d, //       _1203 = fm
	0x61, 0x28, 0x31, 0x2e, 0x30, 0x35, 0x34, 0x39, 0x39, 0x39, 0x39, 0x34, 0x37, 0x35, 0x34, 0x37, // a(1.054999947547
	0x39, 0x31, 0x32, 0x35, 0x39, 0x37, 0x36, 0x35, 0x36, 0x32, 0x35, 0x2c, 0x20, 0x70, 0x6f, 0x77, // 91259765625, pow
	0x72, 0x28, 0x5f, 0x31, 0x31, 0x30, 0x33, 0x2c, 0x20, 0x30, 0x2e, 0x34, 0x31, 0x36, 0x36, 0x36, // r(_1103, 0.41666
	0x36, 0x36, 0x35, 0x36, 0x37, 0x33, 0x32, 0x35, 0x35, 0x39, 0x32, 0x30, 0x34, 0x31, 0x30, 0x31, // 6656732559204101
	0x35, 0x36, 0x32, 0x35, 0x29, 0x2c, 0x20, 0x2d, 0x30, 0x2e, 0x30, 0x35, 0x34, 0x39, 0x39, 0x39, // 5625), -0.054999
	0x39, 0x39, 0x39, 0x37, 0x30, 0x31, 0x39, 0x37, 0x36, 0x37, 0x37, 0x36, 0x31, 0x32, 0x33, 0x30, // 9997019767761230
	0x34, 0x36, 0x38, 0x37, 0x35, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, // 46875);.    }.  
	0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x31, 0x31, 0x30, 0x35, 0x20, 0x3d, 0x20, //   float _1105 = 
	0x5f, 0x31, 0x30, 0x39, 0x36, 0x2e, 0x7a, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, // _1096.z;.    flo
	0x61, 0x74, 0x20, 0x5f, 0x31, 0x32, 0x30, 0x34, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, // at _1204;.    if
	0x20, 0x28, 0x5f, 0x31, 0x31, 0x30, 0x35, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x33, //  (_1105 <= 0.003
	0x31, 0x33, 0x30, 0x38, 0x30, 0x30, 0x30, 0x39, 0x30, 0x37, 0x33, 0x30, 0x31, 0x39, 0x30, 0x32, // 1308000907301902
	0x37, 0x37, 0x30, 0x39, 0x39, 0x36, 0x30, 0x39, 0x33, 0x37, 0x35, 0x29, 0x0a, 0x20, 0x20, 0x20, // 77099609375).   
	0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x31, 0x32, 0x30, 0x34, //  {.        _1204
	0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x30, 0x30, 0x30, 0x30, 0x30, 0x37, 0x36, 0x32, //  = 12.9200000762
	0x39, 0x33, 0x39, 0x34, 0x35, 0x33, 0x31, 0x32, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x31, 0x31, 0x30, // 939453125 * _110
	0x35, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, // 5;.    }.    els
	0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // e.    {.        
	0x5f, 0x31, 0x32, 0x30, 0x34, 0x20, 0x3d, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x31, 0x2e, 0x30, 0x35, // _1204 = fma(1.05
	0x34, 0x39, 0x39, 0x39, 0x39, 0x34, 0x37, 0x35, 0x34, 0x37, 0x39, 0x31, 0x32, 0x35, 0x39, 0x37, // 4999947547912597
	0x36, 0x35, 0x36, 0x32, 0x35, 0x2c, 0x20, 0x70, 0x6f, 0x77, 0x72, 0x28, 0x5f, 0x31, 0x31, 0x30, // 65625, powr(_110
	0x35, 0x2c, 0x20, 0x30, 0x2e, 0x34, 0x31, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x37, 0x33, // 5, 0.41666665673
	0x32, 0x35, 0x35, 0x39, 0x32, 0x30, 0x34, 0x31, 0x30, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x2c, // 25592041015625),
	0x20, 0x2d, 0x30, 0x2e, 0x30, 0x35, 0x34, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x37, 0x30, 0x31, //  -0.054999999701
	0x39, 0x37, 0x36, 0x37, 0x37, 0x36, 0x31, 0x32, 0x33, 0x30, 0x34, 0x36, 0x38, 0x37, 0x35, 0x29, // 976776123046875)
	0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x6f, 0x75, 0x74, 0x2e, // ;.    }.    out.
	0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x20, 0x3d, // bgfx_FragData0 =
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x31, 0x32, 0x30, 0x32, 0x2c, 0x20, 0x5f, //  float4(_1202, _
	0x31, 0x32, 0x30, 0x33, 0x2c, 0x20, 0x5f, 0x31, 0x32, 0x30, 0x34, 0x2c, 0x20, 0x31, 0x2e, 0x30, // 1203, _1204, 1.0
	0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6f, 0x75, // );.    return ou
	0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x0a, 0x00, 0x00, 0x00, 0x01,                                     // t;.}......
};
static const uint8_t fs_pp_stereo_anaglyph_lin_srgb_dyndesat_essl[11254] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe3, 0x2b, // FSH.o.><.......+
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x33, 0x32, 0x30, 0x20, 0x65, // ..#version 320 e
	0x73, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, // s.#define attrib
	0x75, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x76, // ute in.#define v
	0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, // arying in.precis
	0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3b, // ion highp float;
	0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, // .precision highp
	0x20, 0x69, 0x6e, 0x74, 0x3b, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x73, 0x68, //  int;.#define sh
	0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, // adow2D(_sampler,
	0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, //  _coord) texture
	0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, // (_sampler, _coor
	0x64, 0x29, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x73, 0x68, 0x61, 0x64, 0x6f, // d).#define shado
	0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // w2DProj(_sampler
	0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // , _coord) textur
	0x65, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, // eProj(_sampler, 
	0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x0a, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x65, 0x64, 0x69, // _coord).out medi
	0x75, 0x6d, 0x70, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, // ump vec4 bgfx_Fr
	0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, // agColor;.varying
	0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, //  vec2 v_texcoord
	0x30, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, // 0;.vec3 instMul(
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x20, // vec3 _vec, mat3 
	0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // _mtx) { return (
	0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, //  (_vec) * (_mtx)
	0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, //  ); }.vec3 instM
	0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, // ul(mat3 _mtx, ve
	0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, // c3 _vec) { retur
	0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, // n ( (_mtx) * (_v
	0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, // ec) ); }.vec4 in
	0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, // stMul(vec4 _vec,
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, //  mat4 _mtx) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, // turn ( (_vec) * 
	0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, // (_mtx) ); }.vec4
	0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, //  instMul(mat4 _m
	0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, // tx, vec4 _vec) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, //  return ( (_mtx)
	0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, //  * (_vec) ); }.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, 0x70, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, // loat rcp(float _
	0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x2f, // a) { return 1.0/
	0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, // _a; }.vec2 rcp(v
	0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // ec2 _a) { return
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, //  vec2(1.0)/_a; }
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, // .vec3 rcp(vec3 _
	0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, // a) { return vec3
	0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, // (1.0)/_a; }.vec4
	0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, //  rcp(vec4 _a) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x31, 0x2e, 0x30, 0x29, // return vec4(1.0)
	0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x65, 0x63, 0x32, // /_a; }.vec2 vec2
	0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, // _splat(float _x)
	0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, //  { return vec2(_
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, // x, _x); }.vec3 v
	0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // ec3_splat(float 
	0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, // _x) { return vec
	0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, // 3(_x, _x, _x); }
	0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, // .vec4 vec4_splat
	0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // (float _x) { ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, // urn vec4(_x, _x,
	0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, //  _x, _x); }.uvec
	0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, // 2 uvec2_splat(ui
	0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // nt _x) { return 
	0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, // uvec2(_x, _x); }
	0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, // .uvec3 uvec3_spl
	0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // at(uint _x) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, // turn uvec3(_x, _
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x34, 0x20, // x, _x); }.uvec4 
	0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, // uvec4_splat(uint
	0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, //  _x) { return uv
	0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, // ec4(_x, _x, _x, 
	0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, // _x); }.mat4 mtxF
	0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, // romRows(vec4 _0,
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, //  vec4 _1, vec4 _
	0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // 2, vec4 _3).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, // turn transpose(m
	0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, // at4(_0, _1, _2, 
	0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, // _3) );.}.mat4 mt
	0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, // xFromCols(vec4 _
	0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // 0, vec4 _1, vec4
	0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, //  _2, vec4 _3).{.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, // return mat4(_0, 
	0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, // _1, _2, _3);.}.m
	0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, // at3 mtxFromRows(
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, // vec3 _0, vec3 _1
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // , vec3 _2).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, // urn transpose(ma
	0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x20, 0x29, // t3(_0, _1, _2) )
	0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, // ;.}.mat3 mtxFrom
	0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, // Cols(vec3 _0, ve
	0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, // c3 _1, vec3 _2).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, // {.return mat3(_0
	0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, // , _1, _2);.}.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, // form vec4 u_view
	0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, // Rect;.uniform ve
	0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x54, 0x65, 0x78, 0x65, 0x6c, 0x3b, 0x0a, // c4 u_viewTexel;.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, // uniform mat4 u_v
	0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, // iew;.uniform mat
	0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, // 4 u_invView;.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x70, 0x72, 0x6f, 0x6a, // form mat4 u_proj
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, // ;.uniform mat4 u
	0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // _invProj;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, // m mat4 u_viewPro
	0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, // j;.uniform mat4 
	0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, // u_invViewProj;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, // niform mat4 u_mo
	0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // del[32];.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, //  mat4 u_modelVie
	0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, // w;.uniform mat4 
	0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, // u_modelViewProj;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, // .uniform vec4 u_
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x66, 0x34, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // alphaRef4;.float
	0x20, 0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, //  sqr(const float
	0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, //  v).{.return v*v
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, // ;.}.vec2 sqr(con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // st vec2 v).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // urn v*v;.}.vec3 
	0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, // sqr(const vec3 v
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, // ).{.return v*v;.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6d, 0x75, 0x6c, 0x5f, 0x77, 0x31, 0x28, 0x63, 0x6f, // }.vec3 mul_w1(co
	0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, // nst vec3 v, cons
	0x74, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, // t mat4 m).{.retu
	0x72, 0x6e, 0x20, 0x76, 0x2e, 0x78, 0x2a, 0x6d, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, // rn v.x*m[0].xyz 
	0x2b, 0x20, 0x28, 0x76, 0x2e, 0x79, 0x2a, 0x6d, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, // + (v.y*m[1].xyz 
	0x2b, 0x20, 0x28, 0x76, 0x2e, 0x7a, 0x2a, 0x6d, 0x5b, 0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, // + (v.z*m[2].xyz 
	0x2b, 0x20, 0x6d, 0x5b, 0x33, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // + m[3].xyz));.}.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, // float acos_appro
	0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // x_divPI(const fl
	0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // oat v).{.const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, // loat x = abs(v);
	0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, // .if(1. - x <= 0.
	0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, // 00006103515625).
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, // return (v >= 0.)
	0x20, 0x3f, 0x20, 0x30, 0x2e, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, //  ? 0. : 1.;.cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, // t float res = ((
	0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, // -0.155972/3.1415
	0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, // 9265358979323846
	0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, // 26433832795) * x
	0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, //  + (1.56467/3.14
	0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, // 1592653589793238
	0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, // 4626433832795) )
	0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, //  * sqrt(1. - x);
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, // .return (v >= 0.
	0x29, 0x20, 0x3f, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x72, // ) ? res : 1. - r
	0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x74, 0x61, 0x6e, // es;.}.float atan
	0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, // 2_approx_div2PI(
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x79, 0x2c, 0x20, 0x63, // const float y, c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x29, 0x0a, 0x7b, 0x0a, // onst float x).{.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, // const float abs_
	0x79, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x79, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // y = abs(y);.cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3d, 0x20, // t float abs_x = 
	0x61, 0x62, 0x73, 0x28, 0x78, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, // abs(x);.if(abs_x
	0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, //  <= 0.0000610351
	0x35, 0x36, 0x32, 0x35, 0x20, 0x26, 0x26, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3c, 0x3d, // 5625 && abs_y <=
	0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, //  0.0000610351562
	0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x30, 0x2e, 0x3b, 0x0a, 0x63, 0x6f, // 5).return 0.;.co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x61, // nst float r = (a
	0x62, 0x73, 0x5f, 0x78, 0x20, 0x2d, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x20, 0x2f, 0x20, // bs_x - abs_y) / 
	0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2b, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x3b, // (abs_x + abs_y);
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x6e, 0x67, // .const float ang
	0x6c, 0x65, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, // le = ((x < 0.) ?
	0x20, 0x28, 0x33, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x20, 0x3a, 0x20, 0x28, 0x31, 0x2e, 0x2f, 0x38, //  (3./8.) : (1./8
	0x2e, 0x29, 0x29, 0x0a, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x32, 0x31, 0x31, 0x38, 0x36, 0x38, 0x20, // .)).+ (0.211868 
	0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, // /(2.*3.141592653
	0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, // 5897932384626433
	0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x72, 0x20, 0x2a, 0x20, 0x72, 0x20, // 832795) * r * r 
	0x2d, 0x20, 0x30, 0x2e, 0x39, 0x38, 0x37, 0x33, 0x30, 0x35, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, // - 0.987305 /(2.*
	0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, // 3.14159265358979
	0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, // 3238462643383279
	0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, // 5)) * ((x < 0.) 
	0x3f, 0x20, 0x2d, 0x72, 0x20, 0x3a, 0x20, 0x72, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // ? -r : r);.retur
	0x6e, 0x20, 0x28, 0x79, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x61, 0x6e, // n (y < 0.) ? -an
	0x67, 0x6c, 0x65, 0x20, 0x3a, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // gle : angle;.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x73, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, // loat asin_approx
	0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, // _divPI(const flo
	0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // at v).{.const fl
	0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, // oat x = abs(v);.
	0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, // if(1. - x <= 0.0
	0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, // 0006103515625).r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, // eturn (v >= 0.) 
	0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x3b, 0x0a, 0x63, 0x6f, // ? 0.5 : -0.5;.co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, // nst float res = 
	0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, // ((-0.155972/3.14
	0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, // 1592653589793238
	0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, // 4626433832795) *
	0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, //  x + (1.56467/3.
	0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, // 1415926535897932
	0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, // 384626433832795)
	0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, //  ) * sqrt(1. - x
	0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, // );.return (v >= 
	0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x20, // 0.) ? 0.5 - res 
	0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, // : -0.5 + res;.}.
	0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x61, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x71, 0x75, 0x69, // vec2 ray_to_equi
	0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x75, 0x76, 0x28, 0x63, // rectangular_uv(c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x61, 0x79, 0x29, 0x0a, 0x7b, // onst vec3 ray).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x0a, 0x30, 0x2e, // .return vec2(.0.
	0x35, 0x20, 0x2b, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, // 5 + atan2_approx
	0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x79, 0x2c, 0x20, 0x72, // _div2PI(ray.y, r
	0x61, 0x79, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, // ay.x),.acos_appr
	0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x7a, 0x29, 0x29, // ox_divPI(ray.z))
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, // ;.}.float InvsRG
	0x42, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, // B(const float co
	0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // lor).{.if (color
	0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, 0x34, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, //  <= 0.04045).ret
	0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, // urn color * (1.0
	0x2f, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, // /12.92);.else.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, // turn pow(color *
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x28, //  (1.0/1.055) + (
	0x30, 0x2e, 0x30, 0x35, 0x35, 0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, // 0.055/1.055), 2.
	0x34, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x52, // 4);.}.float InvR
	0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, // ec709(const floa
	0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, // t color).{.if (c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x38, 0x31, 0x29, 0x0a, 0x72, // olor <= 0.081).r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, // eturn color * (1
	0x2e, 0x30, 0x2f, 0x34, 0x2e, 0x35, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, // .0/4.5);.else.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, // turn pow(color *
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, 0x20, 0x2b, 0x20, 0x28, //  (1.0/1.099) + (
	0x30, 0x2e, 0x30, 0x39, 0x39, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, 0x2c, 0x20, 0x31, 0x2e, // 0.099/1.099), 1.
	0x30, 0x2f, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // 0/0.45);.}.float
	0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, //  InvGamma(const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, // float color).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, // eturn InvsRGB(co
	0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, // lor);.}.vec3 Inv
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, // Gamma(const vec3
	0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, //  color).{.return
	0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, //  vec3(InvGamma(c
	0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, // olor.x),InvGamma
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, // (color.y),InvGam
	0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // ma(color.z));.}.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, // vec3 InvToneMap(
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // const vec3 color
	0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // ).{.const float 
	0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x30, 0x2e, 0x35, 0x2f, 0x30, 0x2e, // inv_2bh = 0.5/0.
	0x32, 0x35, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // 25;.const float 
	0x62, 0x68, 0x20, 0x3d, 0x20, 0x34, 0x2e, 0x30, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2d, 0x20, // bh = 4.0*0.25 - 
	0x32, 0x2e, 0x30, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6c, // 2.0;.return (col
	0x6f, 0x72, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2b, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, // or - 1.0 + sqrt(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2a, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x20, 0x62, // color*(color + b
	0x68, 0x29, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x2a, 0x69, 0x6e, 0x76, 0x5f, 0x32, // h) + 1.0))*inv_2
	0x62, 0x68, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x52, 0x47, 0x42, // bh;.}.float sRGB
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, // (const float f).
	0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, // {.float s;.if (f
	0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x33, 0x31, 0x33, 0x30, 0x38, 0x29, 0x0a, 0x73, //  <= 0.0031308).s
	0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, //  = 12.92 * f;.el
	0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x20, 0x2a, 0x20, 0x70, // se.s = 1.055 * p
	0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x34, 0x29, 0x20, 0x2d, // ow(f, 1.0/2.4) -
	0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, //  0.055;.return s
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, // ;.}.float Rec709
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, // (const float f).
	0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, // {.float s;.if (f
	0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x34, //  <= 0.018).s = 4
	0x2e, 0x35, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, // .5 * f;.else.s =
	0x20, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, //  1.099 * pow(f, 
	0x30, 0x2e, 0x34, 0x35, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x3b, 0x0a, 0x72, // 0.45) - 0.099;.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // eturn s;.}.float
	0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, //  FBGamma(const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // loat color).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, // turn sRGB(color)
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, // ;.}.vec2 FBGamma
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // (const vec2 colo
	0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, // r).{.return vec2
	0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, // (FBGamma(color.x
	0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, // ),FBGamma(color.
	0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, // y));.}.vec3 FBGa
	0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, // mma(const vec3 c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // olor).{.return v
	0x65, 0x63, 0x33, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // ec3(FBGamma(colo
	0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, // r.x),FBGamma(col
	0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, // or.y),FBGamma(co
	0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // lor.z));.}.vec3 
	0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x32, 0x32, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // FBGamma22(const 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // vec3 color).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, // turn vec3(pow(co
	0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, // lor.x, 1.0/2.2),
	0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, 0x30, // pow(color.y, 1.0
	0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, // /2.2),pow(color.
	0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // z, 1.0/2.2));.}.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, // float FBToneMap(
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x29, 0x0a, 0x7b, // const float l).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6c, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, // .return l * ((l*
	0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, // 0.25 + 1.0) / (l
	0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, //  + 1.0));.}.vec2
	0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, //  FBToneMap(const
	0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x63, //  vec2 color).{.c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, // onst float l = d
	0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, // ot(color,vec2(0.
	0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, // 176204+0.0108109
	0x2a, 0x30, 0x2e, 0x35, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2b, 0x30, 0x2e, // *0.5,0.812985+0.
	0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x3b, 0x0a, 0x72, // 0108109*0.5));.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, // eturn color * ((
	0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, // l*0.25 + 1.0) / 
	0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // (l + 1.0));.}.ve
	0x63, 0x33, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, // c3 FBToneMap(con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, // st vec3 color).{
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, // .const float l =
	0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x33, 0x28, //  dot(color,vec3(
	0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, // 0.176204,0.81298
	0x35, 0x2c, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x29, 0x29, 0x3b, 0x0a, 0x72, // 5,0.0108109));.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, // eturn color * ((
	0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, // l*0.25 + 1.0) / 
	0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // (l + 1.0));.}.ve
	0x63, 0x34, 0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x28, 0x63, 0x6f, 0x6e, 0x73, // c4 Additive(cons
	0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, // t vec4 cBase, co
	0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, // nst vec4 cBlend,
	0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, //  const float per
	0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, // cent).{.return c
	0x42, 0x61, 0x73, 0x65, 0x20, 0x2b, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, // Base + cBlend*pe
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, // rcent;.}.vec3 Sc
	0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, // reen (const vec3
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, //  cBase, const ve
	0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // c3 cBlend).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, // urn 1.0 - (1.0 -
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, //  cBase) * (1.0 -
	0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, //  cBlend);.}.vec4
	0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, //  Screen (const v
	0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, // ec4 cBase, const
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, //  vec4 cBlend).{.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, // return 1.0 - (1.
	0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, // 0 - cBase) * (1.
	0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // 0 - cBlend);.}.v
	0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x63, // ec3 ScreenHDR (c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, // onst vec3 cBase,
	0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, //  const vec3 cBle
	0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, // nd).{.return max
	0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, // (1.0 - (1.0 - cB
	0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, // ase) * (1.0 - cB
	0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x2c, 0x30, // lend), vec3(0.,0
	0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, // .,0.));.}.vec4 S
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // creenHDR (const 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, // vec4 cBase, cons
	0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, // t vec4 cBlend).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, // .return max(1.0 
	0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, // - (1.0 - cBase) 
	0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, // * (1.0 - cBlend)
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, // , vec4(0.,0.,0.,
	0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4d, 0x75, 0x6c, // 0.));.}.vec4 Mul
	0x74, 0x69, 0x70, 0x6c, 0x79, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, // tiply (const vec
	0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, // 4 cBase, const v
	0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, // ec4 cBlend, cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, // t float percent)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, // .{.return cBase 
	0x2a, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, // * cBlend*percent
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, // ;.}.vec4 Overlay
	0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, //  (const vec4 cBa
	0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, // se, const vec4 c
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, // Blend).{.vec4 cN
	0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, // ew = step(0.5, c
	0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x69, // Base);.cNew = mi
	0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, // x(cBase*cBlend*2
	0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, // .0, 1.0-2.0*(1.0
	0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, // -cBase)*(1.0-cBl
	0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, // end), cNew);.ret
	0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, // urn cNew;.}.vec4
	0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x48, 0x44, 0x52, 0x20, 0x28, 0x63, 0x6f, 0x6e, //  OverlayHDR (con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, // st vec4 cBase, c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, // onst vec4 cBlend
	0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, // ).{.vec4 cNew = 
	0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, // step(0.5, cBase)
	0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x6d, 0x69, 0x78, // ;.cNew = max(mix
	0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, // (cBase*cBlend*2.
	0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, // 0, 1.0-2.0*(1.0-
	0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, // cBase)*(1.0-cBle
	0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // nd), cNew), vec4
	0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, // (0.,0.,0.,0.));.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // return cNew;.}.v
	0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x73, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, // ec3 cos_hemisphe
	0x72, 0x65, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // re_sample(const 
	0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // vec2 t).{.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x68, 0x69, 0x20, 0x3d, 0x20, 0x74, 0x2e, 0x79, 0x20, // float phi = t.y 
	0x2a, 0x20, 0x28, 0x32, 0x2e, 0x30, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, // * (2.0*3.1415926
	0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, // 5358979323846264
	0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, // 33832795);.const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, //  float cosTheta 
	0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x74, 0x2e, 0x78, // = sqrt(1.0 - t.x
	0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, // );.const float s
	0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x74, // inTheta = sqrt(t
	0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x70, 0x2c, 0x63, 0x70, // .x);.float sp,cp
	0x3b, 0x0a, 0x73, 0x69, 0x6e, 0x63, 0x6f, 0x73, 0x28, 0x70, 0x68, 0x69, 0x2c, 0x73, 0x70, 0x2c, // ;.sincos(phi,sp,
	0x63, 0x70, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, // cp);.return vec3
	0x28, 0x63, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, // (cp * sinTheta, 
	0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x73, 0x70, 0x20, 0x2a, 0x20, 0x73, // cosTheta, sp * s
	0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, // inTheta);.}.vec3
	0x20, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, //  rotate_to_vecto
	0x72, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // r_upper(const ve
	0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // c3 vec, const ve
	0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x28, // c3 normal).{.if(
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x3e, 0x20, 0x2d, 0x30, 0x2e, 0x39, 0x39, // normal.y > -0.99
	0x39, 0x39, 0x39, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, // 999).{.const flo
	0x61, 0x74, 0x20, 0x68, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x28, 0x31, 0x2e, 0x30, 0x2b, // at h = 1.0/(1.0+
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, // normal.y);.const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x20, 0x3d, 0x20, 0x68, 0x2a, 0x6e, 0x6f, //  float hz = h*no
	0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // rmal.z;.const fl
	0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x3d, 0x20, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, // oat hzx = hz*nor
	0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, // mal.x;.return ve
	0x63, 0x33, 0x28, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, // c3(.vec.x * (nor
	0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, // mal.y+hz*normal.
	0x7a, 0x29, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, // z) + vec.y * nor
	0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, // mal.x - vec.z * 
	0x68, 0x7a, 0x78, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, // hzx,.vec.y * nor
	0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, // mal.y - vec.x * 
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, // normal.x - vec.z
	0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x2c, 0x0a, 0x76, 0x65, 0x63, //  * normal.z,.vec
	0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x20, 0x2d, 0x20, // .y * normal.z - 
	0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x2b, 0x20, 0x76, 0x65, // vec.x * hzx + ve
	0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, // c.z * (normal.y+
	0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, // h*normal.x*norma
	0x6c, 0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x72, 0x65, // l.x));.}.else re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x2d, 0x76, 0x65, 0x63, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, // turn -vec;.}.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // form vec4 Stereo
	0x5f, 0x53, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x0a, 0x75, 0x6e, 0x69, // _Saturation;.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // form vec4 Stereo
	0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x3b, 0x0a, 0x75, // _MS_ZPD_YAxis;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, // niform sampler2D
	0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x3b, 0x0a, //  tex_stereo_fb;.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, // uniform sampler2
	0x44, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, // D tex_stereo_dep
	0x74, 0x68, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, // th;.uniform vec4
	0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, 0x76, 0x65, 0x63, //  w_h_height;.vec
	0x33, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, // 3 gatherEyeColor
	0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x69, 0x73, // (vec2 u, bool is
	0x4c, 0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x62, 0x6f, // Left).{.const bo
	0x6f, 0x6c, 0x20, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, // ol yaxis = (Ster
	0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, // eo_MS_ZPD_YAxis.
	0x7a, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // z != 0.);.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // float MaxSeparat
	0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, // ion = (Stereo_MS
	0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x69, // _ZPD_YAxis.x);.i
	0x66, 0x20, 0x28, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, // f (isLeft).{.con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, // st float lminDep
	0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, // th = min(min(tex
	0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // tureLod(tex_ster
	0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, // eo_depth, u + (y
	0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, // axis ? vec2(0.0,
	0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, //  0.500 * MaxSepa
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, // ration) : vec2(0
	0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, // .500 * MaxSepara
	0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, // tion, 0.0)), 0.0
	0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, // ).x,.textureLod(
	0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, // tex_stereo_depth
	0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, // , u + (yaxis ? v
	0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, // ec2(0.0, 0.666 *
	0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, //  MaxSeparation) 
	0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, // : vec2(0.666 * M
	0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, // axSeparation, 0.
	0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, // 0)), 0.0).x),.te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, // xtureLod(tex_ste
	0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, // reo_depth, u + (
	0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, // yaxis ? vec2(0.0
	0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, // , MaxSeparation)
	0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, //  : vec2( MaxSepa
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, // ration, 0.0)), 0
	0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x70, // .0).x);.float lp
	0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, // arallax = max(0.
	0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, // 0, w_h_height.w 
	0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, // + MaxSeparation 
	0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, // * (1.0 - 1.0 / (
	0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, // 0.5 + lminDepth 
	0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // * (1.0 / (Stereo
	0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, // _MS_ZPD_YAxis.y)
	0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, //  - 0.5))));.retu
	0x72, 0x6e, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, // rn textureLod(te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2b, // x_stereo_fb, u +
	0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, //  (yaxis ? vec2(0
	0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, // .0, -lparallax) 
	0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, // : vec2(lparallax
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, // , 0.0)), 0.0).xy
	0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // z;.}.else.{.cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, // t float rminDept
	0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, // h = min(min(text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // ureLod(tex_stere
	0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, // o_depth, u - (ya
	0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, // xis ? vec2(0.0, 
	0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, // 0.500 * MaxSepar
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, // ation) : vec2(0.
	0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // 500 * MaxSeparat
	0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // ion, 0.0)), 0.0)
	0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, // .x,.textureLod(t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, // ex_stereo_depth,
	0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, //  u - (yaxis ? ve
	0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, // c2(0.0, 0.666 * 
	0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, // MaxSeparation) :
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, //  vec2(0.666 * Ma
	0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, // xSeparation, 0.0
	0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, // )), 0.0).x),.tex
	0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // tureLod(tex_ster
	0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, // eo_depth, u - (y
	0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, // axis ? vec2(0.0,
	0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, //  MaxSeparation) 
	0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, // : vec2( MaxSepar
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, // ation, 0.0)), 0.
	0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x70, 0x61, // 0).x);.float rpa
	0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, // rallax = max(0.0
	0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, // , w_h_height.w +
	0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, //  MaxSeparation *
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, //  (1.0 - 1.0 / (0
	0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, // .5 + rminDepth *
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, //  (1.0 / (Stereo_
	0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, // MS_ZPD_YAxis.y) 
	0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // - 0.5))));.retur
	0x6e, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, // n textureLod(tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, // _stereo_fb, u - 
	0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, // (yaxis ? vec2(0.
	0x30, 0x2c, 0x20, 0x2d, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, // 0, -rparallax) :
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, //  vec2(rparallax,
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, //  0.0)), 0.0).xyz
	0x3b, 0x0a, 0x7d, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, // ;.}.}.void gathe
	0x72, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, // rLeftRightColors
	0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, // (vec2 u, out vec
	0x33, 0x20, 0x6c, 0x63, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, // 3 lcol, out vec3
	0x20, 0x72, 0x63, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x62, //  rcol).{.const b
	0x6f, 0x6f, 0x6c, 0x20, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, // ool yaxis = (Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, // reo_MS_ZPD_YAxis
	0x2e, 0x7a, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, // .z != 0.);.const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, //  float MaxSepara
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, // tion = (Stereo_M
	0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x3b, 0x0a, // S_ZPD_YAxis.x);.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x6d, 0x69, 0x6e, // const float lmin
	0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, // Depth = min(min(
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, // textureLod(tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, // tereo_depth, u +
	0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, //  (yaxis ? vec2(0
	0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, // .0, 0.500 * MaxS
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, // eparation) : vec
	0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // 2(0.500 * MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, // aration, 0.0)), 
	0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, // 0.0).x,.textureL
	0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, // od(tex_stereo_de
	0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, // pth, u + (yaxis 
	0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, // ? vec2(0.0, 0.66
	0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, // 6 * MaxSeparatio
	0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, // n) : vec2(0.666 
	0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, // * MaxSeparation,
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, //  0.0)), 0.0).x),
	0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, // .textureLod(tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, // stereo_depth, u 
	0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // + (yaxis ? vec2(
	0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // 0.0, MaxSeparati
	0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, // on) : vec2( MaxS
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, // eparation, 0.0))
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // , 0.0).x);.float
	0x20, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, //  lparallax = max
	0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, // (0.0, w_h_height
	0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // .w + MaxSeparati
	0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, // on * (1.0 - 1.0 
	0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, // / (0.5 + lminDep
	0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, // th * (1.0 / (Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, // reo_MS_ZPD_YAxis
	0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x6c, // .y) - 0.5))));.l
	0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, // col = textureLod
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, // (tex_stereo_fb, 
	0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, // u + (yaxis ? vec
	0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, // 2(0.0, -lparalla
	0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, // x) : vec2(lparal
	0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // lax, 0.0)), 0.0)
	0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, // .xyz;.const floa
	0x74, 0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, // t rminDepth = mi
	0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, // n(min(textureLod
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, // (tex_stereo_dept
	0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, // h, u - (yaxis ? 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, // vec2(0.0, 0.500 
	0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, // * MaxSeparation)
	0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, //  : vec2(0.500 * 
	0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, // MaxSeparation, 0
	0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, // .0)), 0.0).x,.te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, // xtureLod(tex_ste
	0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, // reo_depth, u - (
	0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, // yaxis ? vec2(0.0
	0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // , 0.666 * MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // aration) : vec2(
	0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, // 0.666 * MaxSepar
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, // ation, 0.0)), 0.
	0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, // 0).x),.textureLo
	0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, // d(tex_stereo_dep
	0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, // th, u - (yaxis ?
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, //  vec2(0.0, MaxSe
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, // paration) : vec2
	0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, // ( MaxSeparation,
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, //  0.0)), 0.0).x);
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, // .float rparallax
	0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, //  = max(0.0, w_h_
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, // height.w + MaxSe
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, // paration * (1.0 
	0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, // - 1.0 / (0.5 + r
	0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, // minDepth * (1.0 
	0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, // / (Stereo_MS_ZPD
	0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, // _YAxis.y) - 0.5)
	0x29, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, // )));.rcol = text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // ureLod(tex_stere
	0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, // o_fb, u - (yaxis
	0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x72, 0x70, //  ? vec2(0.0, -rp
	0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // arallax) : vec2(
	0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, // rparallax, 0.0))
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, // , 0.0).xyz;.}.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // iform mat4 Stere
	0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, // o_LeftMat;.unifo
	0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, // rm mat4 Stereo_R
	0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // ightMat;.uniform
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, //  vec4 Stereo_Lef
	0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, // tLuminance_Gamma
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, // ;.uniform vec4 S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, // tereo_RightLumin
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x3b, 0x0a, 0x76, // ance_DynDesat;.v
	0x6f, 0x69, 0x64, 0x20, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x65, 0x73, 0x61, 0x74, // oid DynamicDesat
	0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, // Anaglyph(const v
	0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // ec3 lCol, const 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, // vec3 rCol, out v
	0x65, 0x63, 0x33, 0x20, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, // ec3 lDesatCol, o
	0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, // ut vec3 rDesatCo
	0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // l).{.const float
	0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, //  left2LeftLum = 
	0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // dot(lCol, Stereo
	0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, // _LeftLuminance_G
	0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, // amma.xyz);.const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, //  float left2Righ
	0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, // tLum = dot(lCol,
	0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, //  Stereo_RightLum
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, // inance_DynDesat.
	0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, // xyz);.const floa
	0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, // t right2LeftLum 
	0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, // = dot(rCol, Ster
	0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, // eo_LeftLuminance
	0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, // _Gamma.xyz);.con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, // st float right2R
	0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, // ightLum = dot(rC
	0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, // ol, Stereo_Right
	0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, // Luminance_DynDes
	0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // at.xyz);.const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x6c, // loat leftLum = l
	0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x6c, 0x65, // eft2LeftLum + le
	0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, // ft2RightLum;.con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // st float rightLu
	0x6d, 0x20, 0x3d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, // m = right2LeftLu
	0x6d, 0x20, 0x2b, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, // m + right2RightL
	0x75, 0x6d, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // um;.const float 
	0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, // leftDesat = Ster
	0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, // eo_RightLuminanc
	0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, // e_DynDesat.w * a
	0x62, 0x73, 0x28, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // bs((left2LeftLum
	0x20, 0x2d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, //  - left2RightLum
	0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, // ) / (leftLum + 0
	0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // .0001));.const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x20, // loat rightDesat 
	0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // = Stereo_RightLu
	0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, // minance_DynDesat
	0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, // .w * abs((right2
	0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, // LeftLum - right2
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x72, 0x69, 0x67, // RightLum) / (rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, 0x29, // htLum + 0.0001))
	0x3b, 0x0a, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, // ;.lDesatCol = mi
	0x78, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, // x(lCol, vec3_spl
	0x61, 0x74, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x66, // at(leftLum), lef
	0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x72, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, // tDesat);.rDesatC
	0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, // ol = mix(rCol, v
	0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, // ec3_splat(rightL
	0x75, 0x6d, 0x29, 0x2c, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, // um), rightDesat)
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x41, // ;.}.vec3 LinearA
	0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // naglyph(const ve
	0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, // c3 lCol, const v
	0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // ec3 rCol).{.cons
	0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x28, // t vec3 color = (
	0x28, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, // ( (vec4(lCol, 1.
	0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, // )) * (Stereo_Lef
	0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x20, 0x28, 0x76, 0x65, 0x63, // tMat) ) + ( (vec
	0x34, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, // 4(rCol, 1.)) * (
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x29, // Stereo_RightMat)
	0x20, 0x29, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, //  )).rgb;.return 
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // color;.}.uniform
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, //  vec4 Stereo_Deg
	0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, // hostGamma;.unifo
	0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, // rm mat4 Stereo_D
	0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3b, 0x0a, 0x76, 0x65, // eghostFilter;.ve
	0x63, 0x33, 0x20, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, // c3 DeghostAnagly
	0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, // ph(const vec3 lC
	0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, // ol, const vec3 r
	0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, // Col).{.const vec
	0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, // 3 color = Linear
	0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, // Anaglyph(lCol, r
	0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, // Col);.return ( (
	0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // pow(color, Stere
	0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x72, // o_DeghostGamma.r
	0x67, 0x62, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x53, 0x74, 0x65, // gb)) * (mat3(Ste
	0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, // reo_DeghostFilte
	0x72, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // r[0].xyz, Stereo
	0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x31, // _DeghostFilter[1
	0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, // ].xyz, Stereo_De
	0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x32, 0x5d, 0x2e, 0x78, // ghostFilter[2].x
	0x79, 0x7a, 0x29, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x6d, // yz)) );.}.void m
	0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, // ain().{.vec3 lCo
	0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x3b, 0x0a, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, // l, rCol;.gatherL
	0x65, 0x66, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x28, 0x76, // eftRightColors(v
	0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2c, 0x20, 0x6c, 0x43, 0x6f, 0x6c, // _texcoord0, lCol
	0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x6c, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, // , rCol);.lCol = 
	0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, // InvGamma(lCol);.
	0x72, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, // rCol = InvGamma(
	0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, // rCol);.vec3 lCol
	0x44, 0x65, 0x73, 0x61, 0x74, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, // Desat, rColDesat
	0x3b, 0x0a, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x65, 0x73, 0x61, 0x74, 0x41, 0x6e, // ;.DynamicDesatAn
	0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, // aglyph(lCol, rCo
	0x6c, 0x2c, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2c, 0x20, 0x72, 0x43, // l, lColDesat, rC
	0x6f, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x6c, 0x43, 0x6f, 0x6c, 0x20, 0x3d, // olDesat);.lCol =
	0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x3b, 0x0a, 0x72, 0x43, 0x6f, 0x6c, //  lColDesat;.rCol
	0x20, 0x3d, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x3b, 0x0a, 0x76, 0x65, //  = rColDesat;.ve
	0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, // c3 color = Linea
	0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // rAnaglyph(lCol, 
	0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, // rCol);.bgfx_Frag
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x46, 0x42, 0x47, // Color = vec4(FBG
	0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, // amma(color), 1.0
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x00,                                                             // );.}..
};
static const uint8_t fs_pp_stereo_anaglyph_lin_srgb_dyndesat_glsl[11624] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x2d, // FSH.o.><......U-
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x34, 0x34, 0x30, 0x0a, 0x6f, // ..#version 440.o
	0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, // ut vec4 bgfx_Fra
	0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, // gColor;.#define 
	0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x62, 0x67, 0x66, // gl_FragColor bgf
	0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x0a, 0x23, 0x64, 0x65, 0x66, // x_FragColor.#def
	0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x20, 0x20, 0x20, // ine texture2D   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x0a, 0x23, //        texture.#
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, // define texture2D
	0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // Lod       textur
	0x65, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, // eLod.#define tex
	0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ture2DGrad      
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, // textureGrad.#def
	0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, // ine texture2DPro
	0x6a, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, // jLod   texturePr
	0x6f, 0x6a, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, // ojLod.#define te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, 0x20, // xture2DProjGrad 
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, //  textureProjGrad
	0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // .#define texture
	0x43, 0x75, 0x62, 0x65, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, // CubeLod     text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, // ureLod.#define t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, // extureCubeGrad  
	0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, //   textureGrad.#d
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x33, 0x44, 0x20, // efine texture3D 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, //          texture
	0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // .#define texture
	0x32, 0x44, 0x4c, 0x6f, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x20, 0x74, 0x65, 0x78, 0x74, // 2DLodOffset text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x0a, 0x23, 0x64, 0x65, // ureLodOffset.#de
	0x66, 0x69, 0x6e, 0x65, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x69, // fine attribute i
	0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, // n.#define varyin
	0x67, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x62, 0x67, 0x66, // g in.#define bgf
	0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, // xShadow2D(_sampl
	0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, // er, _coord)     
	0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, // vec4_splat(textu
	0x72, 0x65, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, // re(_sampler, _co
	0x6f, 0x72, 0x64, 0x29, 0x20, 0x29, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x62, // ord) ).#define b
	0x67, 0x66, 0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x28, // gfxShadow2DProj(
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, // _sampler, _coord
	0x29, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, // ) vec4_splat(tex
	0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // tureProj(_sample
	0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x29, 0x0a, 0x76, 0x61, 0x72, // r, _coord) ).var
	0x79, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, // ying vec2 v_texc
	0x6f, 0x6f, 0x72, 0x64, 0x30, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, // oord0;.vec3 inst
	0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, // Mul(vec3 _vec, m
	0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // at3 _mtx) { retu
	0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, // rn ( (_vec) * (_
	0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, // mtx) ); }.vec3 i
	0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, // nstMul(mat3 _mtx
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, // , vec3 _vec) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, // eturn ( (_mtx) *
	0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, //  (_vec) ); }.vec
	0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, // 4 instMul(vec4 _
	0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, // vec, mat4 _mtx) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, // { return ( (_vec
	0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, // ) * (_mtx) ); }.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, // vec4 instMul(mat
	0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, // 4 _mtx, vec4 _ve
	0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, // c) { return ( (_
	0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, // mtx) * (_vec) );
	0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, 0x70, 0x28, 0x66, 0x6c, 0x6f, //  }.float rcp(flo
	0x61, 0x74, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // at _a) { return 
	0x31, 0x2e, 0x30, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, // 1.0/_a; }.vec2 r
	0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // cp(vec2 _a) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, // turn vec2(1.0)/_
	0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, // a; }.vec3 rcp(ve
	0x63, 0x33, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // c3 _a) { return 
	0x76, 0x65, 0x63, 0x33, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, // vec3(1.0)/_a; }.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x61, // vec4 rcp(vec4 _a
	0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, // ) { return vec4(
	0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, // 1.0)/_a; }.vec2 
	0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, // vec2_splat(float
	0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, //  _x) { return ve
	0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, // c2(_x, _x); }.ve
	0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, // c3 vec3_splat(fl
	0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // oat _x) { return
	0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, //  vec3(_x, _x, _x
	0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, // ); }.vec4 vec4_s
	0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, // plat(float _x) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, //  return vec4(_x,
	0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, //  _x, _x, _x); }.
	0x75, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, // uvec2 uvec2_spla
	0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // t(uint _x) { ret
	0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, // urn uvec2(_x, _x
	0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, // ); }.uvec3 uvec3
	0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, // _splat(uint _x) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, // { return uvec3(_
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, // x, _x, _x); }.uv
	0x65, 0x63, 0x34, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, // ec4 uvec4_splat(
	0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, // uint _x) { retur
	0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, // n uvec4(_x, _x, 
	0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, // _x, _x); }.mat4 
	0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, // mtxFromRows(vec4
	0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, //  _0, vec4 _1, ve
	0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, // c4 _2, vec4 _3).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, // {.return transpo
	0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, // se(mat4(_0, _1, 
	0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, // _2, _3) );.}.mat
	0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, // 4 mtxFromCols(ve
	0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, // c4 _0, vec4 _1, 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, // vec4 _2, vec4 _3
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x28, // ).{.return mat4(
	0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x3b, // _0, _1, _2, _3);
	0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, // .}.mat3 mtxFromR
	0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, // ows(vec3 _0, vec
	0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, // 3 _1, vec3 _2).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, // .return transpos
	0x65, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, // e(mat3(_0, _1, _
	0x32, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, // 2) );.}.mat3 mtx
	0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, // FromCols(vec3 _0
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // , vec3 _1, vec3 
	0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, // _2).{.return mat
	0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x3b, 0x0a, 0x7d, // 3(_0, _1, _2);.}
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, // .uniform vec4 u_
	0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // viewRect;.unifor
	0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x54, 0x65, 0x78, // m vec4 u_viewTex
	0x65, 0x6c, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, // el;.uniform mat4
	0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, //  u_view;.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x3b, //  mat4 u_invView;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, // .uniform mat4 u_
	0x70, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, // proj;.uniform ma
	0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, // t4 u_invProj;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, // iform mat4 u_vie
	0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, // wProj;.uniform m
	0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, // at4 u_invViewPro
	0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, // j;.uniform mat4 
	0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, 0x3b, 0x0a, 0x75, 0x6e, 0x69, // u_model[32];.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, // form mat4 u_mode
	0x6c, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, // lView;.uniform m
	0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x50, // at4 u_modelViewP
	0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, // roj;.uniform vec
	0x34, 0x20, 0x75, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x66, 0x34, 0x3b, 0x0a, 0x66, // 4 u_alphaRef4;.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // loat sqr(const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // loat v).{.return
	0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x73, 0x71, 0x72, //  v*v;.}.vec2 sqr
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x29, 0x0a, 0x7b, // (const vec2 v).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // .return v*v;.}.v
	0x65, 0x63, 0x33, 0x20, 0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // ec3 sqr(const ve
	0x63, 0x33, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // c3 v).{.return v
	0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6d, 0x75, 0x6c, 0x5f, 0x77, // *v;.}.vec3 mul_w
	0x31, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x2c, 0x20, // 1(const vec3 v, 
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x29, 0x0a, 0x7b, 0x0a, // const mat4 m).{.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2e, 0x78, 0x2a, 0x6d, 0x5b, 0x30, 0x5d, 0x2e, // return v.x*m[0].
	0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x79, 0x2a, 0x6d, 0x5b, 0x31, 0x5d, 0x2e, // xyz + (v.y*m[1].
	0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x7a, 0x2a, 0x6d, 0x5b, 0x32, 0x5d, 0x2e, // xyz + (v.z*m[2].
	0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x6d, 0x5b, 0x33, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, // xyz + m[3].xyz))
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, // ;.}.float acos_a
	0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x63, 0x6f, 0x6e, 0x73, // pprox_divPI(cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, // t float v).{.con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, // st float x = abs
	0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, // (v);.if(1. - x <
	0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, // = 0.000061035156
	0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, // 25).return (v >=
	0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x3b, 0x0a, //  0.) ? 0. : 1.;.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, 0x20, // const float res 
	0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, // = ((-0.155972/3.
	0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, // 1415926535897932
	0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, // 384626433832795)
	0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, //  * x + (1.56467/
	0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, // 3.14159265358979
	0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, // 3238462643383279
	0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, // 5) ) * sqrt(1. -
	0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, //  x);.return (v >
	0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x31, 0x2e, // = 0.) ? res : 1.
	0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, //  - res;.}.float 
	0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, // atan2_approx_div
	0x32, 0x50, 0x49, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // 2PI(const float 
	0x79, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, // y, const float x
	0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // ).{.const float 
	0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x79, 0x29, 0x3b, 0x0a, // abs_y = abs(y);.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, // const float abs_
	0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x78, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x61, // x = abs(x);.if(a
	0x62, 0x73, 0x5f, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, // bs_x <= 0.000061
	0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x20, 0x26, 0x26, 0x20, 0x61, 0x62, 0x73, 0x5f, // 03515625 && abs_
	0x79, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, // y <= 0.000061035
	0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x30, 0x2e, // 15625).return 0.
	0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x20, // ;.const float r 
	0x3d, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2d, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, // = (abs_x - abs_y
	0x29, 0x20, 0x2f, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2b, 0x20, 0x61, 0x62, 0x73, // ) / (abs_x + abs
	0x5f, 0x79, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // _y);.const float
	0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, //  angle = ((x < 0
	0x2e, 0x29, 0x20, 0x3f, 0x20, 0x28, 0x33, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x20, 0x3a, 0x20, 0x28, // .) ? (3./8.) : (
	0x31, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x29, 0x0a, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x32, 0x31, 0x31, // 1./8.)).+ (0.211
	0x38, 0x36, 0x38, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, // 868 /(2.*3.14159
	0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, // 2653589793238462
	0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x72, 0x20, // 6433832795) * r 
	0x2a, 0x20, 0x72, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x39, 0x38, 0x37, 0x33, 0x30, 0x35, 0x20, 0x2f, // * r - 0.987305 /
	0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, // (2.*3.1415926535
	0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, // 8979323846264338
	0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, // 32795)) * ((x < 
	0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x72, 0x20, 0x3a, 0x20, 0x72, 0x29, 0x3b, 0x0a, 0x72, // 0.) ? -r : r);.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x79, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, // eturn (y < 0.) ?
	0x20, 0x2d, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3a, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x3b, //  -angle : angle;
	0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x73, 0x69, 0x6e, 0x5f, 0x61, 0x70, // .}.float asin_ap
	0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, // prox_divPI(const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, //  float v).{.cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, // t float x = abs(
	0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, // v);.if(1. - x <=
	0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, //  0.0000610351562
	0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, // 5).return (v >= 
	0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, // 0.) ? 0.5 : -0.5
	0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, // ;.const float re
	0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, // s = ((-0.155972/
	0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, // 3.14159265358979
	0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, // 3238462643383279
	0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, // 5) * x + (1.5646
	0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, // 7/3.141592653589
	0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, // 7932384626433832
	0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, // 795) ) * sqrt(1.
	0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, //  - x);.return (v
	0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x2d, 0x20, //  >= 0.) ? 0.5 - 
	0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x65, 0x73, // res : -0.5 + res
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x61, 0x79, 0x5f, 0x74, 0x6f, 0x5f, // ;.}.vec2 ray_to_
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, // equirectangular_
	0x75, 0x76, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x61, // uv(const vec3 ra
	0x79, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, // y).{.return vec2
	0x28, 0x0a, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, // (.0.5 + atan2_ap
	0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, // prox_div2PI(ray.
	0x79, 0x2c, 0x20, 0x72, 0x61, 0x79, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x61, 0x63, 0x6f, 0x73, 0x5f, // y, ray.x),.acos_
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, // approx_divPI(ray
	0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, // .z));.}.float In
	0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, // vsRGB(const floa
	0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, // t color).{.if (c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, 0x34, 0x35, 0x29, // olor <= 0.04045)
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, // .return color * 
	0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, // (1.0/12.92);.els
	0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, // e.return pow(col
	0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, // or * (1.0/1.055)
	0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, //  + (0.055/1.055)
	0x2c, 0x20, 0x32, 0x2e, 0x34, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // , 2.4);.}.float 
	0x49, 0x6e, 0x76, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // InvRec709(const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, // float color).{.i
	0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x38, // f (color <= 0.08
	0x31, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, // 1).return color 
	0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x34, 0x2e, 0x35, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, // * (1.0/4.5);.els
	0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, // e.return pow(col
	0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, // or * (1.0/1.099)
	0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, //  + (0.099/1.099)
	0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // , 1.0/0.45);.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, // loat InvGamma(co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, // nst float color)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, // .{.return InvsRG
	0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, // B(color);.}.vec3
	0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, //  InvGamma(const 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // vec3 color).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, // turn vec3(InvGam
	0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, // ma(color.x),InvG
	0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x49, 0x6e, // amma(color.y),In
	0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, // vGamma(color.z))
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x54, 0x6f, 0x6e, 0x65, // ;.}.vec3 InvTone
	0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, // Map(const vec3 c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // olor).{.const fl
	0x6f, 0x61, 0x74, 0x20, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x30, 0x2e, // oat inv_2bh = 0.
	0x35, 0x2f, 0x30, 0x2e, 0x32, 0x35, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // 5/0.25;.const fl
	0x6f, 0x61, 0x74, 0x20, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x34, 0x2e, 0x30, 0x2a, 0x30, 0x2e, 0x32, // oat bh = 4.0*0.2
	0x35, 0x20, 0x2d, 0x20, 0x32, 0x2e, 0x30, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // 5 - 2.0;.return 
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2b, 0x20, 0x73, // (color - 1.0 + s
	0x71, 0x72, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2a, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // qrt(color*(color
	0x20, 0x2b, 0x20, 0x62, 0x68, 0x29, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x2a, 0x69, //  + bh) + 1.0))*i
	0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // nv_2bh;.}.float 
	0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // sRGB(const float
	0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, //  f).{.float s;.i
	0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x33, 0x31, 0x33, 0x30, // f (f <= 0.003130
	0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x20, 0x2a, 0x20, 0x66, // 8).s = 12.92 * f
	0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x35, 0x35, // ;.else.s = 1.055
	0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, //  * pow(f, 1.0/2.
	0x34, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // 4) - 0.055;.retu
	0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x52, 0x65, // rn s;.}.float Re
	0x63, 0x37, 0x30, 0x39, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // c709(const float
	0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, //  f).{.float s;.i
	0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, 0x29, 0x0a, 0x73, // f (f <= 0.018).s
	0x20, 0x3d, 0x20, 0x34, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, //  = 4.5 * f;.else
	0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, // .s = 1.099 * pow
	0x28, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x39, // (f, 0.45) - 0.09
	0x39, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // 9;.return s;.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, // loat FBGamma(con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, // st float color).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, // {.return sRGB(co
	0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x47, // lor);.}.vec2 FBG
	0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, // amma(const vec2 
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // color).{.return 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, // vec2(FBGamma(col
	0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, // or.x),FBGamma(co
	0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // lor.y));.}.vec3 
	0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // FBGamma(const ve
	0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, // c3 color).{.retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, // rn vec3(FBGamma(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, // color.x),FBGamma
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, // (color.y),FBGamm
	0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // a(color.z));.}.v
	0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x32, 0x32, 0x28, 0x63, 0x6f, // ec3 FBGamma22(co
	0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, // nst vec3 color).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x70, 0x6f, // {.return vec3(po
	0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, // w(color.x, 1.0/2
	0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x2c, // .2),pow(color.y,
	0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, //  1.0/2.2),pow(co
	0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x29, // lor.z, 1.0/2.2))
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, // ;.}.float FBTone
	0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // Map(const float 
	0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6c, 0x20, 0x2a, 0x20, // l).{.return l * 
	0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, // ((l*0.25 + 1.0) 
	0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // / (l + 1.0));.}.
	0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x63, // vec2 FBToneMap(c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, // onst vec2 color)
	0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, // .{.const float l
	0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, //  = dot(color,vec
	0x32, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, // 2(0.176204+0.010
	0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, // 8109*0.5,0.81298
	0x35, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x29, // 5+0.0108109*0.5)
	0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, // );.return color 
	0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, // * ((l*0.25 + 1.0
	0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, // ) / (l + 1.0));.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, // }.vec3 FBToneMap
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // (const vec3 colo
	0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // r).{.const float
	0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, //  l = dot(color,v
	0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2c, 0x30, 0x2e, 0x38, // ec3(0.176204,0.8
	0x31, 0x32, 0x39, 0x38, 0x35, 0x2c, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x29, // 12985,0.0108109)
	0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, // );.return color 
	0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, // * ((l*0.25 + 1.0
	0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, // ) / (l + 1.0));.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x28, // }.vec4 Additive(
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, // const vec4 cBase
	0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, // , const vec4 cBl
	0x65, 0x6e, 0x64, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // end, const float
	0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, //  percent).{.retu
	0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2b, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // rn cBase + cBlen
	0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // d*percent;.}.vec
	0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // 3 Screen (const 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, // vec3 cBase, cons
	0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, // t vec3 cBlend).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, // .return 1.0 - (1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, // .0 - cBase) * (1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // .0 - cBlend);.}.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6e, // vec4 Screen (con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, // st vec4 cBase, c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, // onst vec4 cBlend
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, // ).{.return 1.0 -
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, //  (1.0 - cBase) *
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, //  (1.0 - cBlend);
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, // .}.vec3 ScreenHD
	0x52, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, // R (const vec3 cB
	0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // ase, const vec3 
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // cBlend).{.return
	0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, //  max(1.0 - (1.0 
	0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, // - cBase) * (1.0 
	0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, // - cBlend), vec3(
	0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // 0.,0.,0.));.}.ve
	0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x63, 0x6f, // c4 ScreenHDR (co
	0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, // nst vec4 cBase, 
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // const vec4 cBlen
	0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, // d).{.return max(
	0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, // 1.0 - (1.0 - cBa
	0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, // se) * (1.0 - cBl
	0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, // end), vec4(0.,0.
	0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, // ,0.,0.));.}.vec4
	0x20, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, //  Multiply (const
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, //  vec4 cBase, con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, // st vec4 cBlend, 
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, // const float perc
	0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, // ent).{.return cB
	0x61, 0x73, 0x65, 0x20, 0x2a, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, // ase * cBlend*per
	0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, // cent;.}.vec4 Ove
	0x72, 0x6c, 0x61, 0x79, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, // rlay (const vec4
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, //  cBase, const ve
	0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, // c4 cBlend).{.vec
	0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, // 4 cNew = step(0.
	0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, // 5, cBase);.cNew 
	0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, // = mix(cBase*cBle
	0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, // nd*2.0, 1.0-2.0*
	0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, // (1.0-cBase)*(1.0
	0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x3b, // -cBlend), cNew);
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, // .return cNew;.}.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x48, 0x44, 0x52, 0x20, // vec4 OverlayHDR 
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, // (const vec4 cBas
	0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // e, const vec4 cB
	0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, // lend).{.vec4 cNe
	0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, // w = step(0.5, cB
	0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, // ase);.cNew = max
	0x28, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, // (mix(cBase*cBlen
	0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, // d*2.0, 1.0-2.0*(
	0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, // 1.0-cBase)*(1.0-
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x2c, 0x20, // cBlend), cNew), 
	0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, // vec4(0.,0.,0.,0.
	0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, // ));.return cNew;
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x73, 0x5f, 0x68, 0x65, 0x6d, 0x69, // .}.vec3 cos_hemi
	0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x63, 0x6f, // sphere_sample(co
	0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, // nst vec2 t).{.co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x68, 0x69, 0x20, 0x3d, 0x20, // nst float phi = 
	0x74, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x28, 0x32, 0x2e, 0x30, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, // t.y * (2.0*3.141
	0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, // 5926535897932384
	0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x3b, 0x0a, 0x63, // 626433832795);.c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, // onst float cosTh
	0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, // eta = sqrt(1.0 -
	0x20, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, //  t.x);.const flo
	0x61, 0x74, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, // at sinTheta = sq
	0x72, 0x74, 0x28, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, // rt(t.x);.float s
	0x70, 0x2c, 0x63, 0x70, 0x3b, 0x0a, 0x73, 0x69, 0x6e, 0x63, 0x6f, 0x73, 0x28, 0x70, 0x68, 0x69, // p,cp;.sincos(phi
	0x2c, 0x73, 0x70, 0x2c, 0x63, 0x70, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // ,sp,cp);.return 
	0x76, 0x65, 0x63, 0x33, 0x28, 0x63, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, // vec3(cp * sinThe
	0x74, 0x61, 0x2c, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x73, 0x70, // ta, cosTheta, sp
	0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, //  * sinTheta);.}.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x76, // vec3 rotate_to_v
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, // ector_upper(cons
	0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, // t vec3 vec, cons
	0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x29, 0x0a, 0x7b, // t vec3 normal).{
	0x0a, 0x69, 0x66, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x3e, 0x20, 0x2d, // .if(normal.y > -
	0x30, 0x2e, 0x39, 0x39, 0x39, 0x39, 0x39, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, // 0.99999).{.const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x28, //  float h = 1.0/(
	0x31, 0x2e, 0x30, 0x2b, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x63, // 1.0+normal.y);.c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x20, 0x3d, 0x20, // onst float hz = 
	0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // h*normal.z;.cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x3d, 0x20, 0x68, 0x7a, // t float hzx = hz
	0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // *normal.x;.retur
	0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, // n vec3(.vec.x * 
	0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, // (normal.y+hz*nor
	0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x29, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, // mal.z) + vec.y *
	0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, //  normal.x - vec.
	0x7a, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, // z * hzx,.vec.y *
	0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, //  normal.y - vec.
	0x78, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, // x * normal.x - v
	0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x2c, // ec.z * normal.z,
	0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, // .vec.y * normal.
	0x7a, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x20, // z - vec.x * hzx 
	0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, // + vec.z * (norma
	0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x2a, 0x6e, // l.y+h*normal.x*n
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, // ormal.x));.}.els
	0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x2d, 0x76, 0x65, 0x63, 0x3b, 0x0a, 0x7d, // e return -vec;.}
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, // .uniform vec4 St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x53, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3b, // ereo_Saturation;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, // .uniform vec4 St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, // ereo_MS_ZPD_YAxi
	0x73, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, // s;.uniform sampl
	0x65, 0x72, 0x32, 0x44, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // er2D tex_stereo_
	0x66, 0x62, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, // fb;.uniform samp
	0x6c, 0x65, 0x72, 0x32, 0x44, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // ler2D tex_stereo
	0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // _depth;.uniform 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, // vec4 w_h_height;
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, // .vec3 gatherEyeC
	0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x62, 0x6f, 0x6f, // olor(vec2 u, boo
	0x6c, 0x20, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // l isLeft).{.cons
	0x74, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3d, 0x20, 0x28, // t bool yaxis = (
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, // Stereo_MS_ZPD_YA
	0x78, 0x69, 0x73, 0x2e, 0x7a, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x3b, 0x0a, 0x63, 0x6f, // xis.z != 0.);.co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // nst float MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, // aration = (Stere
	0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, // o_MS_ZPD_YAxis.x
	0x29, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, // );.if (isLeft).{
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x6d, 0x69, // .const float lmi
	0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, // nDepth = min(min
	0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, // (textureLod(tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, // stereo_depth, u 
	0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // + (yaxis ? vec2(
	0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, // 0.0, 0.500 * Max
	0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, // Separation) : ve
	0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, // c2(0.500 * MaxSe
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, // paration, 0.0)),
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, //  0.0).x,.texture
	0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, // Lod(tex_stereo_d
	0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, // epth, u + (yaxis
	0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, //  ? vec2(0.0, 0.6
	0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // 66 * MaxSeparati
	0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, // on) : vec2(0.666
	0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, //  * MaxSeparation
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, // , 0.0)), 0.0).x)
	0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, // ,.textureLod(tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, // _stereo_depth, u
	0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, //  + (yaxis ? vec2
	0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // (0.0, MaxSeparat
	0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, // ion) : vec2( Max
	0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // Separation, 0.0)
	0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // ), 0.0).x);.floa
	0x74, 0x20, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, // t lparallax = ma
	0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, // x(0.0, w_h_heigh
	0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // t.w + MaxSeparat
	0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, // ion * (1.0 - 1.0
	0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, //  / (0.5 + lminDe
	0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, // pth * (1.0 / (St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, // ereo_MS_ZPD_YAxi
	0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, // s.y) - 0.5))));.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, // return textureLo
	0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, // d(tex_stereo_fb,
	0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, //  u + (yaxis ? ve
	0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, // c2(0.0, -lparall
	0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x6c, 0x70, 0x61, 0x72, 0x61, // ax) : vec2(lpara
	0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, // llax, 0.0)), 0.0
	0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x7b, 0x0a, // ).xyz;.}.else.{.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x6d, 0x69, 0x6e, // const float rmin
	0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, // Depth = min(min(
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, // textureLod(tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, // tereo_depth, u -
	0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, //  (yaxis ? vec2(0
	0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, // .0, 0.500 * MaxS
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, // eparation) : vec
	0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // 2(0.500 * MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, // aration, 0.0)), 
	0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, // 0.0).x,.textureL
	0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, // od(tex_stereo_de
	0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, // pth, u - (yaxis 
	0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, // ? vec2(0.0, 0.66
	0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, // 6 * MaxSeparatio
	0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, // n) : vec2(0.666 
	0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, // * MaxSeparation,
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, //  0.0)), 0.0).x),
	0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, // .textureLod(tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, // stereo_depth, u 
	0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // - (yaxis ? vec2(
	0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // 0.0, MaxSeparati
	0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, // on) : vec2( MaxS
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, // eparation, 0.0))
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // , 0.0).x);.float
	0x20, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, //  rparallax = max
	0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, // (0.0, w_h_height
	0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // .w + MaxSeparati
	0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, // on * (1.0 - 1.0 
	0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, // / (0.5 + rminDep
	0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, // th * (1.0 / (Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, // reo_MS_ZPD_YAxis
	0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x72, // .y) - 0.5))));.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, // eturn textureLod
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, // (tex_stereo_fb, 
	0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, // u - (yaxis ? vec
	0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, // 2(0.0, -rparalla
	0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, // x) : vec2(rparal
	0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // lax, 0.0)), 0.0)
	0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x67, // .xyz;.}.}.void g
	0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, // atherLeftRightCo
	0x6c, 0x6f, 0x72, 0x73, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x6f, 0x75, 0x74, // lors(vec2 u, out
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x63, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, //  vec3 lcol, out 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, // vec3 rcol).{.con
	0x73, 0x74, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3d, 0x20, // st bool yaxis = 
	0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, // (Stereo_MS_ZPD_Y
	0x41, 0x78, 0x69, 0x73, 0x2e, 0x7a, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x3b, 0x0a, 0x63, // Axis.z != 0.);.c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, // onst float MaxSe
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, // paration = (Ster
	0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, // eo_MS_ZPD_YAxis.
	0x78, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // x);.const float 
	0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, // lminDepth = min(
	0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, // min(textureLod(t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, // ex_stereo_depth,
	0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, //  u + (yaxis ? ve
	0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, // c2(0.0, 0.500 * 
	0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, // MaxSeparation) :
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, //  vec2(0.500 * Ma
	0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, // xSeparation, 0.0
	0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, // )), 0.0).x,.text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // ureLod(tex_stere
	0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, // o_depth, u + (ya
	0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, // xis ? vec2(0.0, 
	0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, // 0.666 * MaxSepar
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, // ation) : vec2(0.
	0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // 666 * MaxSeparat
	0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // ion, 0.0)), 0.0)
	0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, // .x),.textureLod(
	0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, // tex_stereo_depth
	0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, // , u + (yaxis ? v
	0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, // ec2(0.0, MaxSepa
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x20, // ration) : vec2( 
	0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, // MaxSeparation, 0
	0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, // .0)), 0.0).x);.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, // loat lparallax =
	0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, //  max(0.0, w_h_he
	0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, // ight.w + MaxSepa
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, // ration * (1.0 - 
	0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x6c, 0x6d, 0x69, // 1.0 / (0.5 + lmi
	0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, // nDepth * (1.0 / 
	0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, // (Stereo_MS_ZPD_Y
	0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, // Axis.y) - 0.5)))
	0x29, 0x3b, 0x0a, 0x6c, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // );.lcol = textur
	0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // eLod(tex_stereo_
	0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, // fb, u + (yaxis ?
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x6c, 0x70, 0x61, 0x72, //  vec2(0.0, -lpar
	0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x6c, 0x70, // allax) : vec2(lp
	0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, // arallax, 0.0)), 
	0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // 0.0).xyz;.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, // float rminDepth 
	0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // = min(min(textur
	0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // eLod(tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, // depth, u - (yaxi
	0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, // s ? vec2(0.0, 0.
	0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // 500 * MaxSeparat
	0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, // ion) : vec2(0.50
	0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, // 0 * MaxSeparatio
	0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, // n, 0.0)), 0.0).x
	0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, // ,.textureLod(tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, // _stereo_depth, u
	0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, //  - (yaxis ? vec2
	0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, // (0.0, 0.666 * Ma
	0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, // xSeparation) : v
	0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, // ec2(0.666 * MaxS
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, // eparation, 0.0))
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, // , 0.0).x),.textu
	0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // reLod(tex_stereo
	0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, // _depth, u - (yax
	0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, // is ? vec2(0.0, M
	0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, // axSeparation) : 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // vec2( MaxSeparat
	0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // ion, 0.0)), 0.0)
	0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x70, 0x61, 0x72, 0x61, // .x);.float rpara
	0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, // llax = max(0.0, 
	0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, // w_h_height.w + M
	0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, // axSeparation * (
	0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, // 1.0 - 1.0 / (0.5
	0x20, 0x2b, 0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, //  + rminDepth * (
	0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, // 1.0 / (Stereo_MS
	0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, // _ZPD_YAxis.y) - 
	0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, // 0.5))));.rcol = 
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, // textureLod(tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, // tereo_fb, u - (y
	0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, // axis ? vec2(0.0,
	0x20, 0x2d, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, //  -rparallax) : v
	0x65, 0x63, 0x32, 0x28, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, // ec2(rparallax, 0
	0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, // .0)), 0.0).xyz;.
	0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, // }.uniform mat4 S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, // tereo_LeftMat;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, // niform mat4 Ster
	0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, // eo_RightMat;.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // form vec4 Stereo
	0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, // _LeftLuminance_G
	0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, // amma;.uniform ve
	0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, // c4 Stereo_RightL
	0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, // uminance_DynDesa
	0x74, 0x3b, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, // t;.void DynamicD
	0x65, 0x73, 0x61, 0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, // esatAnaglyph(con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, // st vec3 lCol, co
	0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, // nst vec3 rCol, o
	0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, // ut vec3 lDesatCo
	0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x44, 0x65, 0x73, // l, out vec3 rDes
	0x61, 0x74, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // atCol).{.const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, // loat left2LeftLu
	0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, // m = dot(lCol, St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, // ereo_LeftLuminan
	0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, // ce_Gamma.xyz);.c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, // onst float left2
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, // RightLum = dot(l
	0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, // Col, Stereo_Righ
	0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, // tLuminance_DynDe
	0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // sat.xyz);.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, // float right2Left
	0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // Lum = dot(rCol, 
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, // Stereo_LeftLumin
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, // ance_Gamma.xyz);
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, // .const float rig
	0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, // ht2RightLum = do
	0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, // t(rCol, Stereo_R
	0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, // ightLuminance_Dy
	0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, // nDesat.xyz);.con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // st float leftLum
	0x20, 0x3d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, //  = left2LeftLum 
	0x2b, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, // + left2RightLum;
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, // .const float rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, // htLum = right2Le
	0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, // ftLum + right2Ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // ghtLum;.const fl
	0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, // oat leftDesat = 
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, // Stereo_RightLumi
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, // nance_DynDesat.w
	0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, //  * abs((left2Lef
	0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, // tLum - left2Righ
	0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // tLum) / (leftLum
	0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, //  + 0.0001));.con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, // st float rightDe
	0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, // sat = Stereo_Rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, // htLuminance_DynD
	0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x72, 0x69, // esat.w * abs((ri
	0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x72, 0x69, // ght2LeftLum - ri
	0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, // ght2RightLum) / 
	0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, // (rightLum + 0.00
	0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, // 01));.lDesatCol 
	0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, // = mix(lCol, vec3
	0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, // _splat(leftLum),
	0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x72, 0x44, 0x65, //  leftDesat);.rDe
	0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x72, 0x43, 0x6f, // satCol = mix(rCo
	0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x72, 0x69, // l, vec3_splat(ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, // ghtLum), rightDe
	0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x4c, 0x69, 0x6e, // sat);.}.vec3 Lin
	0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, // earAnaglyph(cons
	0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, // t vec3 lCol, con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, // st vec3 rCol).{.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // const vec3 color
	0x20, 0x3d, 0x20, 0x28, 0x28, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x6c, 0x43, 0x6f, 0x6c, //  = (( (vec4(lCol
	0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // , 1.)) * (Stereo
	0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x20, // _LeftMat) ) + ( 
	0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, // (vec4(rCol, 1.))
	0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, //  * (Stereo_Right
	0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x72, 0x65, 0x74, // Mat) )).rgb;.ret
	0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, // urn color;.}.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // form vec4 Stereo
	0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, // _DeghostGamma;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, // niform mat4 Ster
	0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, // eo_DeghostFilter
	0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x6e, // ;.vec3 DeghostAn
	0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, // aglyph(const vec
	0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // 3 lCol, const ve
	0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, // c3 rCol).{.const
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, //  vec3 color = Li
	0x6e, 0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, // nearAnaglyph(lCo
	0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // l, rCol);.return
	0x20, 0x28, 0x20, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x53, //  ( (pow(color, S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, // tereo_DeghostGam
	0x6d, 0x61, 0x2e, 0x72, 0x67, 0x62, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x6d, 0x61, 0x74, 0x33, // ma.rgb)) * (mat3
	0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, // (Stereo_DeghostF
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, // ilter[0].xyz, St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, // ereo_DeghostFilt
	0x65, 0x72, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // er[1].xyz, Stere
	0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, // o_DeghostFilter[
	0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, // 2].xyz)) );.}.vo
	0x69, 0x64, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, // id main().{.vec3
	0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x3b, 0x0a, 0x67, 0x61, 0x74, //  lCol, rCol;.gat
	0x68, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, // herLeftRightColo
	0x72, 0x73, 0x28, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2c, 0x20, // rs(v_texcoord0, 
	0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x6c, 0x43, 0x6f, // lCol, rCol);.lCo
	0x6c, 0x20, 0x3d, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x6c, 0x43, 0x6f, // l = InvGamma(lCo
	0x6c, 0x29, 0x3b, 0x0a, 0x72, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, // l);.rCol = InvGa
	0x6d, 0x6d, 0x61, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // mma(rCol);.vec3 
	0x6c, 0x43, 0x6f, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x44, // lColDesat, rColD
	0x65, 0x73, 0x61, 0x74, 0x3b, 0x0a, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x65, 0x73, // esat;.DynamicDes
	0x61, 0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, // atAnaglyph(lCol,
	0x20, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, //  rCol, lColDesat
	0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x6c, 0x43, // , rColDesat);.lC
	0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x3b, 0x0a, // ol = lColDesat;.
	0x72, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, // rCol = rColDesat
	0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, // ;.vec3 color = L
	0x69, 0x6e, 0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, // inearAnaglyph(lC
	0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x67, 0x6c, 0x5f, 0x46, 0x72, // ol, rCol);.gl_Fr
	0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x46, // agColor = vec4(F
	0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x2c, 0x20, 0x31, // BGamma(color), 1
	0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x00,                                                 // .0);.}..
};
static const uint8_t fs_pp_stereo_anaglyph_lin_srgb_dyndesat_dx11[4100] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x13, 0x53, // FSH.o.><.......S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, // tereo_MS_ZPD_YAx
	0x69, 0x73, 0x12, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x77, 0x5f, 0x68, // is...........w_h
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, // _height.........
	0x00, 0x0e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, // ..Stereo_LeftMat
	0x14, 0x00, 0x20, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x53, 0x74, 0x65, 0x72, 0x65, // .. ........Stere
	0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x00, 0x60, 0x00, 0x04, 0x00, // o_RightMat..`...
	0x00, 0x00, 0x00, 0x00, 0x1a, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, // .....Stereo_Left
	0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x12, // Luminance_Gamma.
	0x00, 0xa0, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // ..........Stereo
	0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, // _RightLuminance_
	0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x12, 0x00, 0xb0, 0x00, 0x01, 0x00, 0x00, 0x00, // DynDesat........
	0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, // ...tex_stereo_fb
	0x30, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x74, 0x65, 0x78, 0x5f, 0x73, // 0..........tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x30, 0x01, 0x01, 0x00, 0x01, // tereo_depth0....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // ......tex_stereo
	0x5f, 0x66, 0x62, 0x30, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x74, 0x65, // _fb0..........te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x30, 0x01, // x_stereo_depth0.
	0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd4, 0x0e, 0x00, 0x00, 0x44, 0x58, 0x42, 0x43, // ............DXBC
	0x86, 0x74, 0x15, 0x89, 0x9b, 0x26, 0x1a, 0x8b, 0xee, 0x29, 0x34, 0x30, 0x83, 0x77, 0x3b, 0xfa, // .t...&...)40.w;.
	0x01, 0x00, 0x00, 0x00, 0xd4, 0x0e, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, // ............,...
	0x84, 0x00, 0x00, 0x00, 0xb8, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x4e, 0x50, 0x00, 0x00, 0x00, // ........ISGNP...
	0x02, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........8.......
	0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, // ................
	0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, // D...............
	0x01, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, // ........SV_POSIT
	0x49, 0x4f, 0x4e, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0xab, 0xab, 0xab, // ION.TEXCOORD....
	0x4f, 0x53, 0x47, 0x4e, 0x2c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, // OSGN,...........
	0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, //  ...............
	0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, // ........SV_TARGE
	0x54, 0x00, 0xab, 0xab, 0x53, 0x48, 0x45, 0x58, 0x14, 0x0e, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, // T...SHEX....P...
	0x85, 0x03, 0x00, 0x00, 0x6a, 0x08, 0x00, 0x01, 0x59, 0x00, 0x00, 0x04, 0x46, 0x8e, 0x20, 0x00, // ....j...Y...F. .
	0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x03, 0x00, 0x60, 0x10, 0x00, // ........Z....`..
	0x00, 0x00, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x03, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // ....Z....`......
	0x58, 0x18, 0x00, 0x04, 0x00, 0x70, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x55, 0x00, 0x00, // X....p......UU..
	0x58, 0x18, 0x00, 0x04, 0x00, 0x70, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x55, 0x55, 0x00, 0x00, // X....p......UU..
	0x62, 0x10, 0x00, 0x03, 0x32, 0x10, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x03, // b...2.......e...
	0xf2, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x02, 0x06, 0x00, 0x00, 0x00, // . ......h.......
	0x36, 0x00, 0x00, 0x08, 0x52, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, // 6...R........@..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x38, 0x00, 0x00, 0x0b, 0xa2, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x80, 0x20, 0x00, // 8............. .
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .........@......
	0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x7e, 0x2a, 0x3f, 0x39, 0x00, 0x00, 0x08, // ...?.....~*?9...
	0x12, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, // ........*. .....
	0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x09, // .....@......7...
	0xf2, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // ................
	0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x0b, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // F...............
	0x00, 0x00, 0x00, 0x07, 0xf2, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, // ............F...
	0x00, 0x00, 0x00, 0x00, 0x46, 0x14, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, // ....F...........
	0xf2, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, // ........F...A...
	0x00, 0x00, 0x00, 0x00, 0x46, 0x14, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, // ....F.......H...
	0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // ....CU..".......
	0x46, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x16, 0x7e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // F........~......
	0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .`.......@......
	0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x42, 0x00, 0x10, 0x00, // H.......CU..B...
	0x01, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x96, 0x7c, 0x10, 0x00, // .............|..
	0x01, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, // .....`.......@..
	0x00, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x07, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // ....3...".......
	0x2a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // *...............
	0x36, 0x00, 0x00, 0x06, 0x22, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0a, 0x80, 0x20, 0x00, // 6..."......... .
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x08, 0x52, 0x00, 0x10, 0x00, // ........6...R...
	0x02, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .....@..........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x09, 0xc2, 0x00, 0x10, 0x00, // ........7.......
	0x01, 0x00, 0x00, 0x00, 0x06, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x04, 0x10, 0x00, // ................
	0x02, 0x00, 0x00, 0x00, 0x56, 0x01, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, // ....V...........
	0x32, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // 2...............
	0x46, 0x10, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0xc2, 0x00, 0x10, 0x00, // F...............
	0x01, 0x00, 0x00, 0x00, 0xa6, 0x0e, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // ........A.......
	0x06, 0x14, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, // ........H.......
	0x43, 0x55, 0x15, 0x00, 0x42, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, // CU..B...........
	0x01, 0x00, 0x00, 0x00, 0x96, 0x7c, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, // .....|.......`..
	0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, // .....@......H...
	0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x82, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // ....CU..........
	0x46, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x96, 0x73, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // F........s......
	0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .`.......@......
	0x33, 0x00, 0x00, 0x07, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, // 3...".......:...
	0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x0b, // ................
	0x82, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, // .........@.....?
	0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x1a, 0x80, 0x20, 0x00, // ...?...?...?.. .
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x82, 0x00, 0x10, 0x00, // ................
	0x01, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, // ....:........@..
	0x00, 0x00, 0x00, 0xbf, 0x32, 0x00, 0x00, 0x09, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // ....2...".......
	0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // ........:.......
	0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x0e, 0x00, 0x00, 0x0a, 0x22, 0x00, 0x10, 0x00, // .@.....?...."...
	0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, // .....@.....?...?
	0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // ...?...?........
	0x00, 0x00, 0x00, 0x08, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x80, // ...."...........
	0x41, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, // A........@.....?
	0x32, 0x00, 0x00, 0x0b, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, 0x80, 0x20, 0x00, // 2..."......... .
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // ................
	0x3a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x07, // :. .........4...
	0x12, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // ................
	0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x06, 0x82, 0x00, 0x10, 0x00, // .@......6.......
	0x02, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, // ........A.......
	0x36, 0x00, 0x00, 0x08, 0x62, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, // 6...b........@..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x37, 0x00, 0x00, 0x09, 0x32, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x06, 0x00, 0x10, 0x00, // 7...2...........
	0x01, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, // ............F...
	0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x32, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, // ........2.......
	0x46, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x10, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // F.......F.......
	0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x72, 0x00, 0x10, 0x00, // H.......CU..r...
	0x02, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, // ....F.......F~..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, // .....`.......@..
	0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x0f, 0x32, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, // ....2...2.......
	0x46, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x6e, 0xa7, 0x72, 0x3f, // F........@..n.r?
	0x6e, 0xa7, 0x72, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, // n.r?.........@..
	0x19, 0x89, 0x55, 0x3d, 0x19, 0x89, 0x55, 0x3d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ..U=..U=........
	0x2f, 0x00, 0x00, 0x05, 0x32, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, // /...2.......F...
	0x03, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x0a, 0x32, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, // ....8...2.......
	0x46, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x9a, 0x99, 0x19, 0x40, // F........@.....@
	0x9a, 0x99, 0x19, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x05, // ...@............
	0x32, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, // 2.......F.......
	0x38, 0x00, 0x00, 0x0a, 0x32, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, // 8...2.......F...
	0x02, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x91, 0x83, 0x9e, 0x3d, 0x91, 0x83, 0x9e, 0x3d, // .....@.....=...=
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x0a, 0xb2, 0x00, 0x10, 0x00, // ................
	0x02, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0xe6, 0xae, 0x25, 0x3d, 0xe6, 0xae, 0x25, 0x3d, // .....@....%=..%=
	0x00, 0x00, 0x00, 0x00, 0xe6, 0xae, 0x25, 0x3d, 0x46, 0x08, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, // ......%=F.......
	0x37, 0x00, 0x00, 0x09, 0x32, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, // 7...2.......F...
	0x02, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, // ....F.......F...
	0x03, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x09, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // ....2...".......
	0x2a, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x6e, 0xa7, 0x72, 0x3f, // *........@..n.r?
	0x01, 0x40, 0x00, 0x00, 0x19, 0x89, 0x55, 0x3d, 0x38, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, // .@....U=8.......
	0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, // ....*........@..
	0x91, 0x83, 0x9e, 0x3d, 0x2f, 0x00, 0x00, 0x05, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // ...=/...".......
	0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x07, 0x22, 0x00, 0x10, 0x00, // ........8..."...
	0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, // .............@..
	0x9a, 0x99, 0x19, 0x40, 0x19, 0x00, 0x00, 0x05, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // ...@....".......
	0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x09, 0x42, 0x00, 0x10, 0x00, // ........7...B...
	0x04, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, // ....:...........
	0x02, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x08, // ................
	0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, // ".......F.......
	0x46, 0x82, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x08, // F. .............
	0x12, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, // ........F.......
	0x46, 0x82, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, // F. .............
	0x22, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // "...............
	0x0a, 0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, // ....A...........
	0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // "...............
	0x0a, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, // ................
	0x02, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, // .............@..
	0x17, 0xb7, 0xd1, 0x38, 0x00, 0x00, 0x00, 0x08, 0x72, 0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, // ...8....r.......
	0x46, 0x02, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x56, 0x05, 0x10, 0x00, // F...A.......V...
	0x01, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x07, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // ........".......
	0x1a, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, // ................
	0x38, 0x00, 0x00, 0x09, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x80, // 8..."...........
	0x81, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, // ........:. .....
	0x0b, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x09, 0x72, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, // ....2...r.......
	0x56, 0x05, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, // V.......F.......
	0x46, 0x02, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x82, 0x00, 0x10, 0x00, // F.......6.......
	0x02, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x11, 0x00, 0x00, 0x08, // .....@.....?....
	0x12, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, // ........F.......
	0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x08, // F. .............
	0x22, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, // ".......F.......
	0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x08, // F. .............
	0x42, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, // B.......F.......
	0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, // F. .........H...
	0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // ....CU..........
	0x46, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // F.......F~......
	0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .`.......@......
	0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x22, 0x00, 0x10, 0x00, // H.......CU.."...
	0x00, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x7e, 0x10, 0x00, // .............~..
	0x01, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, // .....`.......@..
	0x00, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // ....3...........
	0x1a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x33, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, // 3...........*...
	0x01, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x09, // ............2...
	0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x3a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, // :........@.....?
	0x0e, 0x00, 0x00, 0x0a, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, // .............@..
	0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, // ...?...?...?...?
	0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x12, 0x00, 0x10, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........A.......
	0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x32, 0x00, 0x00, 0x0b, 0x12, 0x00, 0x10, 0x00, // .@.....?2.......
	0x00, 0x00, 0x00, 0x00, 0x0a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ...... .........
	0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, // ........:. .....
	0x01, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // ....4...........
	0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .........@......
	0x36, 0x00, 0x00, 0x06, 0x82, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x80, // 6...............
	0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x22, 0x00, 0x10, 0x00, // A.......6..."...
	0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x09, // .....@......7...
	0x32, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // 2...............
	0xe6, 0x0a, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // ........F.......
	0x00, 0x00, 0x00, 0x08, 0x32, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x80, // ....2.......F...
	0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x10, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // A.......F.......
	0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x72, 0x00, 0x10, 0x00, // H.......CU..r...
	0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, // ....F.......F~..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, // .....`.......@..
	0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x0a, 0x32, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // ....8...2.......
	0x46, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x91, 0x83, 0x9e, 0x3d, // F........@.....=
	0x91, 0x83, 0x9e, 0x3d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x0f, // ...=........2...
	0xc2, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x04, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6e, 0xa7, 0x72, 0x3f, // .@..........n.r?
	0x6e, 0xa7, 0x72, 0x3f, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // n.r?.@..........
	0x19, 0x89, 0x55, 0x3d, 0x19, 0x89, 0x55, 0x3d, 0x2f, 0x00, 0x00, 0x05, 0xc2, 0x00, 0x10, 0x00, // ..U=..U=/.......
	0x01, 0x00, 0x00, 0x00, 0xa6, 0x0e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x0a, // ............8...
	0xc2, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0xa6, 0x0e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // ................
	0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9a, 0x99, 0x19, 0x40, // .@.............@
	0x9a, 0x99, 0x19, 0x40, 0x19, 0x00, 0x00, 0x05, 0xc2, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // ...@............
	0xa6, 0x0e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x0a, 0xb2, 0x00, 0x10, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0xe6, 0xae, 0x25, 0x3d, 0xe6, 0xae, 0x25, 0x3d, // .....@....%=..%=
	0x00, 0x00, 0x00, 0x00, 0xe6, 0xae, 0x25, 0x3d, 0x46, 0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // ......%=F.......
	0x37, 0x00, 0x00, 0x09, 0x32, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, // 7...2.......F...
	0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, // ....F...........
	0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x09, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // ....2...........
	0x2a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x6e, 0xa7, 0x72, 0x3f, // *........@..n.r?
	0x01, 0x40, 0x00, 0x00, 0x19, 0x89, 0x55, 0x3d, 0x2f, 0x00, 0x00, 0x05, 0x12, 0x00, 0x10, 0x00, // .@....U=/.......
	0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x0a, // ............8...
	0x32, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // 2...............
	0x02, 0x40, 0x00, 0x00, 0x9a, 0x99, 0x19, 0x40, 0x91, 0x83, 0x9e, 0x3d, 0x00, 0x00, 0x00, 0x00, // .@.....@...=....
	0x00, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x05, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x09, 0x42, 0x00, 0x10, 0x00, // ........7...B...
	0x01, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, // ....:...........
	0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x08, // ................
	0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // ........F.......
	0x46, 0x82, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x08, // F. .............
	0x22, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // ".......F.......
	0x46, 0x82, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, // F. .............
	0x42, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, // B...........A...
	0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, // ................
	0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x22, 0x00, 0x10, 0x00, // ............"...
	0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, // .............@..
	0x17, 0xb7, 0xd1, 0x38, 0x00, 0x00, 0x00, 0x08, 0x72, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, // ...8....r.......
	0x46, 0x02, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x00, 0x10, 0x00, // F...A...........
	0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x2a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // *...............
	0x38, 0x00, 0x00, 0x09, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x80, // 8...............
	0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, // ........:. .....
	0x0b, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x09, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // ....2...r.......
	0x06, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, // ........F.......
	0x46, 0x02, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x82, 0x00, 0x10, 0x00, // F.......6.......
	0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x11, 0x00, 0x00, 0x08, // .....@.....?....
	0x12, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // ........F.......
	0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x08, // F. .............
	0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // ".......F.......
	0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x08, // F. .............
	0x42, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // B.......F.......
	0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, // F. .............
	0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // r.......F.......
	0x46, 0x02, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x05, 0x72, 0x00, 0x10, 0x00, // F......./...r...
	0x01, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x0a, // ....F.......8...
	0x72, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // r.......F.......
	0x02, 0x40, 0x00, 0x00, 0x55, 0x55, 0xd5, 0x3e, 0x55, 0x55, 0xd5, 0x3e, 0x55, 0x55, 0xd5, 0x3e, // .@..UU.>UU.>UU.>
	0x00, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x05, 0x72, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // ........r.......
	0x46, 0x02, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x0f, 0x72, 0x00, 0x10, 0x00, // F.......2...r...
	0x01, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, // ....F........@..
	0x3d, 0x0a, 0x87, 0x3f, 0x3d, 0x0a, 0x87, 0x3f, 0x3d, 0x0a, 0x87, 0x3f, 0x00, 0x00, 0x00, 0x00, // =..?=..?=..?....
	0x02, 0x40, 0x00, 0x00, 0xae, 0x47, 0x61, 0xbd, 0xae, 0x47, 0x61, 0xbd, 0xae, 0x47, 0x61, 0xbd, // .@...Ga..Ga..Ga.
	0x00, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x0a, 0x72, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, // ........r.......
	0x02, 0x40, 0x00, 0x00, 0x1c, 0x2e, 0x4d, 0x3b, 0x1c, 0x2e, 0x4d, 0x3b, 0x1c, 0x2e, 0x4d, 0x3b, // .@....M;..M;..M;
	0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x0a, // ....F.......8...
	0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // r.......F.......
	0x02, 0x40, 0x00, 0x00, 0x52, 0xb8, 0x4e, 0x41, 0x52, 0xb8, 0x4e, 0x41, 0x52, 0xb8, 0x4e, 0x41, // .@..R.NAR.NAR.NA
	0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x09, 0x72, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // ....7...r ......
	0x46, 0x02, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // F.......F.......
	0x46, 0x02, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x82, 0x20, 0x10, 0x00, // F.......6.... ..
	0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x3e, 0x00, 0x00, 0x01, // .....@.....?>...
	0x00, 0x00, 0xc0, 0x00,                                                                         // ....
};
static const uint8_t fs_pp_stereo_anaglyph_lin_srgb_dyndesat_spv[7869] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x13, 0x53, // FSH.o.><.......S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, // tereo_MS_ZPD_YAx
	0x69, 0x73, 0x12, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x77, 0x5f, 0x68, // is...........w_h
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x01, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, // _height.........
	0x00, 0x1a, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // ..Stereo_LeftLum
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x12, 0x01, 0xa0, 0x00, // inance_Gamma....
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, // .......Stereo_Ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, // ghtLuminance_Dyn
	0x44, 0x65, 0x73, 0x61, 0x74, 0x12, 0x01, 0xb0, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, // Desat...........
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x01, // Stereo_LeftMat..
	0x20, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, //  ........Stereo_
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x01, 0x60, 0x00, 0x04, 0x00, 0x00, 0x00, // RightMat..`.....
	0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, // ...tex_stereo_fb
	0x30, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x02, 0x22, 0x00, 0x10, 0x74, 0x65, 0x78, 0x5f, 0x73, // 0......."..tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x30, 0x00, 0x03, 0x00, 0x00, // tereo_depth0....
	0x00, 0x00, 0x02, 0x22, 0x00, 0xc0, 0x1d, 0x00, 0x00, 0x03, 0x02, 0x23, 0x07, 0x00, 0x00, 0x01, // ...".......#....
	0x00, 0x0b, 0x00, 0x08, 0x00, 0xb5, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x02, // ................
	0x00, 0x01, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, 0x4c, 0x53, // .............GLS
	0x4c, 0x2e, 0x73, 0x74, 0x64, 0x2e, 0x34, 0x35, 0x30, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x03, // L.std.450.......
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x07, 0x00, 0x04, 0x00, 0x00, // ................
	0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x07, 0x02, 0x00, // .....main.......
	0x00, 0x12, 0x02, 0x00, 0x00, 0x10, 0x00, 0x03, 0x00, 0x04, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, // ................
	0x00, 0x03, 0x00, 0x03, 0x00, 0x05, 0x00, 0x00, 0x00, 0xf4, 0x01, 0x00, 0x00, 0x05, 0x00, 0x04, // ................
	0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x08, // .....main.......
	0x00, 0x55, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // .U...tex_stereo_
	0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x08, // fbSampler.......
	0x00, 0x58, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // .X...tex_stereo_
	0x66, 0x62, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x08, // fbTexture.......
	0x00, 0x5c, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // .....tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x00, 0x05, 0x00, 0x08, // depthSampler....
	0x00, 0x5e, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // .^...tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x00, 0x05, 0x00, 0x06, // depthTexture....
	0x00, 0xc5, 0x00, 0x00, 0x00, 0x55, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x6c, 0x6f, 0x63, // .....UniformBloc
	0x6b, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x08, 0x00, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // k...............
	0x00, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, // .Stereo_MS_ZPD_Y
	0x41, 0x78, 0x69, 0x73, 0x00, 0x06, 0x00, 0x06, 0x00, 0xc5, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, // Axis............
	0x00, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x00, 0x00, 0x06, 0x00, 0x07, // .w_h_height.....
	0x00, 0xc5, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // .........Stereo_
	0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x00, 0x00, 0x06, 0x00, 0x07, 0x00, 0xc5, 0x00, 0x00, // LeftMat.........
	0x00, 0x03, 0x00, 0x00, 0x00, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, // .....Stereo_Righ
	0x74, 0x4d, 0x61, 0x74, 0x00, 0x06, 0x00, 0x0a, 0x00, 0xc5, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, // tMat............
	0x00, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, // .Stereo_LeftLumi
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x00, 0x00, 0x06, 0x00, 0x0b, // nance_Gamma.....
	0x00, 0xc5, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // .........Stereo_
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, // RightLuminance_D
	0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x00, 0x00, 0x05, 0x00, 0x03, 0x00, 0xc7, 0x00, 0x00, // ynDesat.........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x05, 0x00, 0x07, 0x02, 0x00, 0x00, 0x76, 0x5f, 0x74, // .............v_t
	0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x00, 0x05, 0x00, 0x06, 0x00, 0x12, 0x02, 0x00, // excoord0........
	0x00, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x00, // .bgfx_FragData0.
	0x00, 0x47, 0x00, 0x04, 0x00, 0x55, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .G...U..."......
	0x00, 0x47, 0x00, 0x04, 0x00, 0x55, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, // .G...U...!......
	0x00, 0x47, 0x00, 0x04, 0x00, 0x58, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .G...X..."......
	0x00, 0x47, 0x00, 0x04, 0x00, 0x58, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, // .G...X...!......
	0x00, 0x47, 0x00, 0x04, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .G......."......
	0x00, 0x47, 0x00, 0x04, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, // .G.......!......
	0x00, 0x47, 0x00, 0x04, 0x00, 0x5e, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .G...^..."......
	0x00, 0x47, 0x00, 0x04, 0x00, 0x5e, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, // .G...^...!......
	0x00, 0x48, 0x00, 0x05, 0x00, 0xc5, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, // .H...........#..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0xc5, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, // .....H..........
	0x00, 0x23, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x48, 0x00, 0x04, 0x00, 0xc5, 0x00, 0x00, // .#.......H......
	0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0xc5, 0x00, 0x00, // .........H......
	0x00, 0x02, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, // .....#... ...H..
	0x00, 0xc5, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, // ................
	0x00, 0x48, 0x00, 0x04, 0x00, 0xc5, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, // .H..............
	0x00, 0x48, 0x00, 0x05, 0x00, 0xc5, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, // .H...........#..
	0x00, 0x60, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0xc5, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, // .`...H..........
	0x00, 0x07, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0xc5, 0x00, 0x00, // .........H......
	0x00, 0x04, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, // .....#.......H..
	0x00, 0xc5, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0xb0, 0x00, 0x00, // .........#......
	0x00, 0x47, 0x00, 0x03, 0x00, 0xc5, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, // .G...........G..
	0x00, 0xc7, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, // .....".......G..
	0x00, 0xc7, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, // .....!.......G..
	0x00, 0x07, 0x02, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, // .............G..
	0x00, 0x12, 0x02, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x02, // ................
	0x00, 0x02, 0x00, 0x00, 0x00, 0x21, 0x00, 0x03, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, // .....!..........
	0x00, 0x1a, 0x00, 0x02, 0x00, 0x06, 0x00, 0x00, 0x00, 0x16, 0x00, 0x03, 0x00, 0x07, 0x00, 0x00, // ................
	0x00, 0x20, 0x00, 0x00, 0x00, 0x19, 0x00, 0x09, 0x00, 0x08, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, // . ..............
	0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x0b, 0x00, 0x00, // ................
	0x00, 0x07, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, // ................
	0x00, 0x07, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x15, 0x00, 0x00, // ................
	0x00, 0x07, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x54, 0x00, 0x00, // ......... ...T..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x54, 0x00, 0x00, // .........;...T..
	0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x57, 0x00, 0x00, // .U....... ...W..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x57, 0x00, 0x00, // .........;...W..
	0x00, 0x58, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x54, 0x00, 0x00, // .X.......;...T..
	0x00, 0x5c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x57, 0x00, 0x00, // .........;...W..
	0x00, 0x5e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x00, 0x04, 0x00, 0x61, 0x00, 0x00, // .^...........a..
	0x00, 0x20, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x61, 0x00, 0x00, // . .......+...a..
	0x00, 0x62, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x61, 0x00, 0x00, // .b.......+...a..
	0x00, 0x66, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x03, 0x00, 0x6a, 0x00, 0x00, // .f...........j..
	0x00, 0x08, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x84, 0x00, 0x00, // .....+..........
	0x00, 0xe6, 0xae, 0x25, 0x3d, 0x14, 0x00, 0x02, 0x00, 0x85, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, // ...%=........+..
	0x00, 0x07, 0x00, 0x00, 0x00, 0x89, 0x00, 0x00, 0x00, 0x91, 0x83, 0x9e, 0x3d, 0x2b, 0x00, 0x04, // ............=+..
	0x00, 0x07, 0x00, 0x00, 0x00, 0x8d, 0x00, 0x00, 0x00, 0x6e, 0xa7, 0x72, 0x3f, 0x2b, 0x00, 0x04, // .........n.r?+..
	0x00, 0x07, 0x00, 0x00, 0x00, 0x8f, 0x00, 0x00, 0x00, 0x19, 0x89, 0x55, 0x3d, 0x2b, 0x00, 0x04, // ...........U=+..
	0x00, 0x07, 0x00, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00, 0x9a, 0x99, 0x19, 0x40, 0x15, 0x00, 0x04, // ............@...
	0x00, 0x98, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, // ..... .......+..
	0x00, 0x98, 0x00, 0x00, 0x00, 0x99, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, // .............+..
	0x00, 0x98, 0x00, 0x00, 0x00, 0x9c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, // .............+..
	0x00, 0x98, 0x00, 0x00, 0x00, 0x9f, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, // .............+..
	0x00, 0x07, 0x00, 0x00, 0x00, 0xa5, 0x00, 0x00, 0x00, 0x1c, 0x2e, 0x4d, 0x3b, 0x2b, 0x00, 0x04, // ...........M;+..
	0x00, 0x07, 0x00, 0x00, 0x00, 0xaa, 0x00, 0x00, 0x00, 0x52, 0xb8, 0x4e, 0x41, 0x2b, 0x00, 0x04, // .........R.NA+..
	0x00, 0x07, 0x00, 0x00, 0x00, 0xad, 0x00, 0x00, 0x00, 0x3d, 0x0a, 0x87, 0x3f, 0x2b, 0x00, 0x04, // .........=..?+..
	0x00, 0x07, 0x00, 0x00, 0x00, 0xae, 0x00, 0x00, 0x00, 0x55, 0x55, 0xd5, 0x3e, 0x18, 0x00, 0x04, // .........UU.>...
	0x00, 0xc4, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x08, // ................
	0x00, 0xc5, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xc4, 0x00, 0x00, // ................
	0x00, 0xc4, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, // ............. ..
	0x00, 0xc6, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xc5, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, // .............;..
	0x00, 0xc6, 0x00, 0x00, 0x00, 0xc7, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, // ............. ..
	0x00, 0xc8, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, // .............+..
	0x00, 0x07, 0x00, 0x00, 0x00, 0xcb, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, // .............+..
	0x00, 0x07, 0x00, 0x00, 0x00, 0xd3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x17, 0x00, 0x04, // ............?...
	0x00, 0xda, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, // .............+..
	0x00, 0x07, 0x00, 0x00, 0x00, 0xe6, 0x00, 0x00, 0x00, 0xfa, 0x7e, 0x2a, 0x3f, 0x2b, 0x00, 0x04, // ..........~*?+..
	0x00, 0x98, 0x00, 0x00, 0x00, 0x08, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, // .............+..
	0x00, 0x07, 0x00, 0x00, 0x00, 0x0c, 0x01, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x2b, 0x00, 0x04, // ............?+..
	0x00, 0x61, 0x00, 0x00, 0x00, 0x7e, 0x01, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, // .a...~....... ..
	0x00, 0x7f, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, // .............+..
	0x00, 0x61, 0x00, 0x00, 0x00, 0x85, 0x01, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, // .a...........+..
	0x00, 0x07, 0x00, 0x00, 0x00, 0xa3, 0x01, 0x00, 0x00, 0x17, 0xb7, 0xd1, 0x38, 0x2b, 0x00, 0x04, // ............8+..
	0x00, 0x61, 0x00, 0x00, 0x00, 0xc6, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, // .a........... ..
	0x00, 0xc7, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xc4, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, // .............+..
	0x00, 0x61, 0x00, 0x00, 0x00, 0xcf, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, // .a........... ..
	0x00, 0x06, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, // .............;..
	0x00, 0x06, 0x02, 0x00, 0x00, 0x07, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, // ............. ..
	0x00, 0x11, 0x02, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, // .............;..
	0x00, 0x11, 0x02, 0x00, 0x00, 0x12, 0x02, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, // .............+..
	0x00, 0x07, 0x00, 0x00, 0x00, 0xa5, 0x04, 0x00, 0x00, 0xae, 0x47, 0x61, 0xbd, 0x36, 0x00, 0x05, // ..........Ga.6..
	0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, // ................
	0x00, 0xf8, 0x00, 0x02, 0x00, 0x05, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, // .........=......
	0x00, 0x56, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x08, 0x00, 0x00, // .V...U...=......
	0x00, 0x59, 0x00, 0x00, 0x00, 0x58, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, // .Y...X...=......
	0x00, 0x5d, 0x00, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x08, 0x00, 0x00, // .].......=......
	0x00, 0x5f, 0x00, 0x00, 0x00, 0x5e, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x0b, 0x00, 0x00, // ._...^...=......
	0x00, 0x08, 0x02, 0x00, 0x00, 0x07, 0x02, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0xc8, 0x00, 0x00, // .........A......
	0x00, 0x7b, 0x02, 0x00, 0x00, 0xc7, 0x00, 0x00, 0x00, 0x66, 0x00, 0x00, 0x00, 0x9f, 0x00, 0x00, // .{.......f......
	0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x7c, 0x02, 0x00, 0x00, 0x7b, 0x02, 0x00, // .=.......|...{..
	0x00, 0xb7, 0x00, 0x05, 0x00, 0x85, 0x00, 0x00, 0x00, 0x7d, 0x02, 0x00, 0x00, 0x7c, 0x02, 0x00, // .........}...|..
	0x00, 0xcb, 0x00, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0xc8, 0x00, 0x00, 0x00, 0x7e, 0x02, 0x00, // .....A.......~..
	0x00, 0xc7, 0x00, 0x00, 0x00, 0x66, 0x00, 0x00, 0x00, 0x99, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, // .....f.......=..
	0x00, 0x07, 0x00, 0x00, 0x00, 0x7f, 0x02, 0x00, 0x00, 0x7e, 0x02, 0x00, 0x00, 0x85, 0x00, 0x05, // .........~......
	0x00, 0x07, 0x00, 0x00, 0x00, 0x83, 0x02, 0x00, 0x00, 0xd3, 0x00, 0x00, 0x00, 0x7f, 0x02, 0x00, // ................
	0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x84, 0x02, 0x00, 0x00, 0xcb, 0x00, 0x00, // .P..............
	0x00, 0x83, 0x02, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x86, 0x02, 0x00, // ................
	0x00, 0xd3, 0x00, 0x00, 0x00, 0x7f, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, // .........P......
	0x00, 0x87, 0x02, 0x00, 0x00, 0x86, 0x02, 0x00, 0x00, 0xcb, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, // .............P..
	0x00, 0xda, 0x00, 0x00, 0x00, 0x88, 0x02, 0x00, 0x00, 0x7d, 0x02, 0x00, 0x00, 0x7d, 0x02, 0x00, // .........}...}..
	0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x89, 0x02, 0x00, 0x00, 0x88, 0x02, 0x00, // ................
	0x00, 0x84, 0x02, 0x00, 0x00, 0x87, 0x02, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, // ................
	0x00, 0x8a, 0x02, 0x00, 0x00, 0x08, 0x02, 0x00, 0x00, 0x89, 0x02, 0x00, 0x00, 0x56, 0x00, 0x05, // .............V..
	0x00, 0x6a, 0x00, 0x00, 0x00, 0x12, 0x03, 0x00, 0x00, 0x5f, 0x00, 0x00, 0x00, 0x5d, 0x00, 0x00, // .j......._...]..
	0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x15, 0x03, 0x00, 0x00, 0x12, 0x03, 0x00, // .X..............
	0x00, 0x8a, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xcb, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, // .............Q..
	0x00, 0x07, 0x00, 0x00, 0x00, 0x8d, 0x02, 0x00, 0x00, 0x15, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x91, 0x02, 0x00, 0x00, 0xe6, 0x00, 0x00, // ................
	0x00, 0x7f, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x92, 0x02, 0x00, // .....P..........
	0x00, 0xcb, 0x00, 0x00, 0x00, 0x91, 0x02, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // ................
	0x00, 0x94, 0x02, 0x00, 0x00, 0xe6, 0x00, 0x00, 0x00, 0x7f, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, // .............P..
	0x00, 0x0b, 0x00, 0x00, 0x00, 0x95, 0x02, 0x00, 0x00, 0x94, 0x02, 0x00, 0x00, 0xcb, 0x00, 0x00, // ................
	0x00, 0x50, 0x00, 0x05, 0x00, 0xda, 0x00, 0x00, 0x00, 0x96, 0x02, 0x00, 0x00, 0x7d, 0x02, 0x00, // .P...........}..
	0x00, 0x7d, 0x02, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x97, 0x02, 0x00, // .}..............
	0x00, 0x96, 0x02, 0x00, 0x00, 0x92, 0x02, 0x00, 0x00, 0x95, 0x02, 0x00, 0x00, 0x81, 0x00, 0x05, // ................
	0x00, 0x0b, 0x00, 0x00, 0x00, 0x98, 0x02, 0x00, 0x00, 0x08, 0x02, 0x00, 0x00, 0x97, 0x02, 0x00, // ................
	0x00, 0x56, 0x00, 0x05, 0x00, 0x6a, 0x00, 0x00, 0x00, 0x1c, 0x03, 0x00, 0x00, 0x5f, 0x00, 0x00, // .V...j......._..
	0x00, 0x5d, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x1f, 0x03, 0x00, // .]...X..........
	0x00, 0x1c, 0x03, 0x00, 0x00, 0x98, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xcb, 0x00, 0x00, // ................
	0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x9b, 0x02, 0x00, 0x00, 0x1f, 0x03, 0x00, // .Q..............
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x9c, 0x02, 0x00, // ................
	0x00, 0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x8d, 0x02, 0x00, 0x00, 0x9b, 0x02, 0x00, // .....%..........
	0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xa0, 0x02, 0x00, 0x00, 0xcb, 0x00, 0x00, // .P..............
	0x00, 0x7f, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xa2, 0x02, 0x00, // .....P..........
	0x00, 0x7f, 0x02, 0x00, 0x00, 0xcb, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0xda, 0x00, 0x00, // .........P......
	0x00, 0xa3, 0x02, 0x00, 0x00, 0x7d, 0x02, 0x00, 0x00, 0x7d, 0x02, 0x00, 0x00, 0xa9, 0x00, 0x06, // .....}...}......
	0x00, 0x0b, 0x00, 0x00, 0x00, 0xa4, 0x02, 0x00, 0x00, 0xa3, 0x02, 0x00, 0x00, 0xa0, 0x02, 0x00, // ................
	0x00, 0xa2, 0x02, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xa5, 0x02, 0x00, // ................
	0x00, 0x08, 0x02, 0x00, 0x00, 0xa4, 0x02, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, 0x6a, 0x00, 0x00, // .........V...j..
	0x00, 0x26, 0x03, 0x00, 0x00, 0x5f, 0x00, 0x00, 0x00, 0x5d, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, // .&..._...]...X..
	0x00, 0x0e, 0x00, 0x00, 0x00, 0x29, 0x03, 0x00, 0x00, 0x26, 0x03, 0x00, 0x00, 0xa5, 0x02, 0x00, // .....)...&......
	0x00, 0x02, 0x00, 0x00, 0x00, 0xcb, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // .........Q......
	0x00, 0xa8, 0x02, 0x00, 0x00, 0x29, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, // .....)..........
	0x00, 0x07, 0x00, 0x00, 0x00, 0xa9, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, // .............%..
	0x00, 0x9c, 0x02, 0x00, 0x00, 0xa8, 0x02, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0xc8, 0x00, 0x00, // .........A......
	0x00, 0xaa, 0x02, 0x00, 0x00, 0xc7, 0x00, 0x00, 0x00, 0x62, 0x00, 0x00, 0x00, 0x08, 0x01, 0x00, // .........b......
	0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0xab, 0x02, 0x00, 0x00, 0xaa, 0x02, 0x00, // .=..............
	0x00, 0x41, 0x00, 0x06, 0x00, 0xc8, 0x00, 0x00, 0x00, 0xae, 0x02, 0x00, 0x00, 0xc7, 0x00, 0x00, // .A..............
	0x00, 0x66, 0x00, 0x00, 0x00, 0x9c, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, // .f.......=......
	0x00, 0xaf, 0x02, 0x00, 0x00, 0xae, 0x02, 0x00, 0x00, 0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // ................
	0x00, 0xb0, 0x02, 0x00, 0x00, 0x0c, 0x01, 0x00, 0x00, 0xaf, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, // ................
	0x00, 0x07, 0x00, 0x00, 0x00, 0xb1, 0x02, 0x00, 0x00, 0xb0, 0x02, 0x00, 0x00, 0xd3, 0x00, 0x00, // ................
	0x00, 0x0c, 0x00, 0x08, 0x00, 0x07, 0x00, 0x00, 0x00, 0xb3, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, // ................
	0x00, 0x32, 0x00, 0x00, 0x00, 0xa9, 0x02, 0x00, 0x00, 0xb1, 0x02, 0x00, 0x00, 0xd3, 0x00, 0x00, // .2..............
	0x00, 0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xb4, 0x02, 0x00, 0x00, 0x0c, 0x01, 0x00, // ................
	0x00, 0xb3, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xb5, 0x02, 0x00, // ................
	0x00, 0x0c, 0x01, 0x00, 0x00, 0xb4, 0x02, 0x00, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x07, 0x00, 0x00, // ................
	0x00, 0xb7, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x7f, 0x02, 0x00, // .........2......
	0x00, 0xb5, 0x02, 0x00, 0x00, 0xab, 0x02, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, // ................
	0x00, 0xb8, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0xcb, 0x00, 0x00, // .........(......
	0x00, 0xb7, 0x02, 0x00, 0x00, 0x7f, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0xbc, 0x02, 0x00, // ................
	0x00, 0xb8, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xbd, 0x02, 0x00, // .....P..........
	0x00, 0xcb, 0x00, 0x00, 0x00, 0xbc, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, // .........P......
	0x00, 0xbf, 0x02, 0x00, 0x00, 0xb8, 0x02, 0x00, 0x00, 0xcb, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, // .............P..
	0x00, 0xda, 0x00, 0x00, 0x00, 0xc0, 0x02, 0x00, 0x00, 0x7d, 0x02, 0x00, 0x00, 0x7d, 0x02, 0x00, // .........}...}..
	0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xc1, 0x02, 0x00, 0x00, 0xc0, 0x02, 0x00, // ................
	0x00, 0xbd, 0x02, 0x00, 0x00, 0xbf, 0x02, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, // ................
	0x00, 0xc2, 0x02, 0x00, 0x00, 0x08, 0x02, 0x00, 0x00, 0xc1, 0x02, 0x00, 0x00, 0x56, 0x00, 0x05, // .............V..
	0x00, 0x6a, 0x00, 0x00, 0x00, 0x30, 0x03, 0x00, 0x00, 0x59, 0x00, 0x00, 0x00, 0x56, 0x00, 0x00, // .j...0...Y...V..
	0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x33, 0x03, 0x00, 0x00, 0x30, 0x03, 0x00, // .X.......3...0..
	0x00, 0xc2, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xcb, 0x00, 0x00, 0x00, 0x85, 0x00, 0x05, // ................
	0x00, 0x07, 0x00, 0x00, 0x00, 0xc9, 0x02, 0x00, 0x00, 0xd3, 0x00, 0x00, 0x00, 0x7f, 0x02, 0x00, // ................
	0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xca, 0x02, 0x00, 0x00, 0xcb, 0x00, 0x00, // .P..............
	0x00, 0xc9, 0x02, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xcc, 0x02, 0x00, // ................
	0x00, 0xd3, 0x00, 0x00, 0x00, 0x7f, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, // .........P......
	0x00, 0xcd, 0x02, 0x00, 0x00, 0xcc, 0x02, 0x00, 0x00, 0xcb, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, // .............P..
	0x00, 0xda, 0x00, 0x00, 0x00, 0xce, 0x02, 0x00, 0x00, 0x7d, 0x02, 0x00, 0x00, 0x7d, 0x02, 0x00, // .........}...}..
	0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xcf, 0x02, 0x00, 0x00, 0xce, 0x02, 0x00, // ................
	0x00, 0xca, 0x02, 0x00, 0x00, 0xcd, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, // ................
	0x00, 0xd0, 0x02, 0x00, 0x00, 0x08, 0x02, 0x00, 0x00, 0xcf, 0x02, 0x00, 0x00, 0x56, 0x00, 0x05, // .............V..
	0x00, 0x6a, 0x00, 0x00, 0x00, 0x3a, 0x03, 0x00, 0x00, 0x5f, 0x00, 0x00, 0x00, 0x5d, 0x00, 0x00, // .j...:..._...]..
	0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x3d, 0x03, 0x00, 0x00, 0x3a, 0x03, 0x00, // .X.......=...:..
	0x00, 0xd0, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xcb, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, // .............Q..
	0x00, 0x07, 0x00, 0x00, 0x00, 0xd3, 0x02, 0x00, 0x00, 0x3d, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, // .........=......
	0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xd7, 0x02, 0x00, 0x00, 0xe6, 0x00, 0x00, // ................
	0x00, 0x7f, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xd8, 0x02, 0x00, // .....P..........
	0x00, 0xcb, 0x00, 0x00, 0x00, 0xd7, 0x02, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // ................
	0x00, 0xda, 0x02, 0x00, 0x00, 0xe6, 0x00, 0x00, 0x00, 0x7f, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, // .............P..
	0x00, 0x0b, 0x00, 0x00, 0x00, 0xdb, 0x02, 0x00, 0x00, 0xda, 0x02, 0x00, 0x00, 0xcb, 0x00, 0x00, // ................
	0x00, 0x50, 0x00, 0x05, 0x00, 0xda, 0x00, 0x00, 0x00, 0xdc, 0x02, 0x00, 0x00, 0x7d, 0x02, 0x00, // .P...........}..
	0x00, 0x7d, 0x02, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xdd, 0x02, 0x00, // .}..............
	0x00, 0xdc, 0x02, 0x00, 0x00, 0xd8, 0x02, 0x00, 0x00, 0xdb, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, // ................
	0x00, 0x0b, 0x00, 0x00, 0x00, 0xde, 0x02, 0x00, 0x00, 0x08, 0x02, 0x00, 0x00, 0xdd, 0x02, 0x00, // ................
	0x00, 0x56, 0x00, 0x05, 0x00, 0x6a, 0x00, 0x00, 0x00, 0x44, 0x03, 0x00, 0x00, 0x5f, 0x00, 0x00, // .V...j...D..._..
	0x00, 0x5d, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x47, 0x03, 0x00, // .]...X.......G..
	0x00, 0x44, 0x03, 0x00, 0x00, 0xde, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xcb, 0x00, 0x00, // .D..............
	0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xe1, 0x02, 0x00, 0x00, 0x47, 0x03, 0x00, // .Q...........G..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0xe2, 0x02, 0x00, // ................
	0x00, 0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0xd3, 0x02, 0x00, 0x00, 0xe1, 0x02, 0x00, // .....%..........
	0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xe6, 0x02, 0x00, 0x00, 0xcb, 0x00, 0x00, // .P..............
	0x00, 0x7f, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xe8, 0x02, 0x00, // .....P..........
	0x00, 0x7f, 0x02, 0x00, 0x00, 0xcb, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0xda, 0x00, 0x00, // .........P......
	0x00, 0xe9, 0x02, 0x00, 0x00, 0x7d, 0x02, 0x00, 0x00, 0x7d, 0x02, 0x00, 0x00, 0xa9, 0x00, 0x06, // .....}...}......
	0x00, 0x0b, 0x00, 0x00, 0x00, 0xea, 0x02, 0x00, 0x00, 0xe9, 0x02, 0x00, 0x00, 0xe6, 0x02, 0x00, // ................
	0x00, 0xe8, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xeb, 0x02, 0x00, // ................
	0x00, 0x08, 0x02, 0x00, 0x00, 0xea, 0x02, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, 0x6a, 0x00, 0x00, // .........V...j..
	0x00, 0x4e, 0x03, 0x00, 0x00, 0x5f, 0x00, 0x00, 0x00, 0x5d, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, // .N..._...]...X..
	0x00, 0x0e, 0x00, 0x00, 0x00, 0x51, 0x03, 0x00, 0x00, 0x4e, 0x03, 0x00, 0x00, 0xeb, 0x02, 0x00, // .....Q...N......
	0x00, 0x02, 0x00, 0x00, 0x00, 0xcb, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // .........Q......
	0x00, 0xee, 0x02, 0x00, 0x00, 0x51, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, // .....Q..........
	0x00, 0x07, 0x00, 0x00, 0x00, 0xef, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, // .............%..
	0x00, 0xe2, 0x02, 0x00, 0x00, 0xee, 0x02, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0xc8, 0x00, 0x00, // .........A......
	0x00, 0xf0, 0x02, 0x00, 0x00, 0xc7, 0x00, 0x00, 0x00, 0x62, 0x00, 0x00, 0x00, 0x08, 0x01, 0x00, // .........b......
	0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0xf1, 0x02, 0x00, 0x00, 0xf0, 0x02, 0x00, // .=..............
	0x00, 0x41, 0x00, 0x06, 0x00, 0xc8, 0x00, 0x00, 0x00, 0xf4, 0x02, 0x00, 0x00, 0xc7, 0x00, 0x00, // .A..............
	0x00, 0x66, 0x00, 0x00, 0x00, 0x9c, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, // .f.......=......
	0x00, 0xf5, 0x02, 0x00, 0x00, 0xf4, 0x02, 0x00, 0x00, 0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // ................
	0x00, 0xf6, 0x02, 0x00, 0x00, 0x0c, 0x01, 0x00, 0x00, 0xf5, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, // ................
	0x00, 0x07, 0x00, 0x00, 0x00, 0xf7, 0x02, 0x00, 0x00, 0xf6, 0x02, 0x00, 0x00, 0xd3, 0x00, 0x00, // ................
	0x00, 0x0c, 0x00, 0x08, 0x00, 0x07, 0x00, 0x00, 0x00, 0xf9, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, // ................
	0x00, 0x32, 0x00, 0x00, 0x00, 0xef, 0x02, 0x00, 0x00, 0xf7, 0x02, 0x00, 0x00, 0xd3, 0x00, 0x00, // .2..............
	0x00, 0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xfa, 0x02, 0x00, 0x00, 0x0c, 0x01, 0x00, // ................
	0x00, 0xf9, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xfb, 0x02, 0x00, // ................
	0x00, 0x0c, 0x01, 0x00, 0x00, 0xfa, 0x02, 0x00, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x07, 0x00, 0x00, // ................
	0x00, 0xfd, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x7f, 0x02, 0x00, // .........2......
	0x00, 0xfb, 0x02, 0x00, 0x00, 0xf1, 0x02, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, // ................
	0x00, 0xfe, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0xcb, 0x00, 0x00, // .........(......
	0x00, 0xfd, 0x02, 0x00, 0x00, 0x7f, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x02, 0x03, 0x00, // ................
	0x00, 0xfe, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00, // .....P..........
	0x00, 0xcb, 0x00, 0x00, 0x00, 0x02, 0x03, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, // .........P......
	0x00, 0x05, 0x03, 0x00, 0x00, 0xfe, 0x02, 0x00, 0x00, 0xcb, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, // .............P..
	0x00, 0xda, 0x00, 0x00, 0x00, 0x06, 0x03, 0x00, 0x00, 0x7d, 0x02, 0x00, 0x00, 0x7d, 0x02, 0x00, // .........}...}..
	0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x07, 0x03, 0x00, 0x00, 0x06, 0x03, 0x00, // ................
	0x00, 0x03, 0x03, 0x00, 0x00, 0x05, 0x03, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, // ................
	0x00, 0x08, 0x03, 0x00, 0x00, 0x08, 0x02, 0x00, 0x00, 0x07, 0x03, 0x00, 0x00, 0x56, 0x00, 0x05, // .............V..
	0x00, 0x6a, 0x00, 0x00, 0x00, 0x58, 0x03, 0x00, 0x00, 0x59, 0x00, 0x00, 0x00, 0x56, 0x00, 0x00, // .j...X...Y...V..
	0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x5b, 0x03, 0x00, 0x00, 0x58, 0x03, 0x00, // .X.......[...X..
	0x00, 0x08, 0x03, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xcb, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, // .............Q..
	0x00, 0x07, 0x00, 0x00, 0x00, 0x5e, 0x03, 0x00, 0x00, 0x33, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, // .....^...3......
	0x00, 0xf7, 0x00, 0x03, 0x00, 0x75, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfb, 0x00, 0x03, // .....u..........
	0x00, 0x99, 0x00, 0x00, 0x00, 0x6c, 0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x6c, 0x03, 0x00, // .....l.......l..
	0x00, 0xbc, 0x00, 0x05, 0x00, 0x85, 0x00, 0x00, 0x00, 0x6d, 0x03, 0x00, 0x00, 0x5e, 0x03, 0x00, // .........m...^..
	0x00, 0x84, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x74, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, // .........t......
	0x00, 0xfa, 0x00, 0x04, 0x00, 0x6d, 0x03, 0x00, 0x00, 0x6e, 0x03, 0x00, 0x00, 0x70, 0x03, 0x00, // .....m...n...p..
	0x00, 0xf8, 0x00, 0x02, 0x00, 0x70, 0x03, 0x00, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x07, 0x00, 0x00, // .....p..........
	0x00, 0x72, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x5e, 0x03, 0x00, // .r.......2...^..
	0x00, 0x8d, 0x00, 0x00, 0x00, 0x8f, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, // ................
	0x00, 0x73, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x72, 0x03, 0x00, // .s...........r..
	0x00, 0x91, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x75, 0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, // .........u......
	0x00, 0x6e, 0x03, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x6f, 0x03, 0x00, // .n...........o..
	0x00, 0x5e, 0x03, 0x00, 0x00, 0x89, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x75, 0x03, 0x00, // .^...........u..
	0x00, 0xf8, 0x00, 0x02, 0x00, 0x74, 0x03, 0x00, 0x00, 0xff, 0x00, 0x01, 0x00, 0xf8, 0x00, 0x02, // .....t..........
	0x00, 0x75, 0x03, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0xa6, 0x04, 0x00, // .u..............
	0x00, 0x73, 0x03, 0x00, 0x00, 0x70, 0x03, 0x00, 0x00, 0x6f, 0x03, 0x00, 0x00, 0x6e, 0x03, 0x00, // .s...p...o...n..
	0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x60, 0x03, 0x00, 0x00, 0x33, 0x03, 0x00, // .Q.......`...3..
	0x00, 0x01, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x87, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0xfb, 0x00, 0x03, 0x00, 0x99, 0x00, 0x00, 0x00, 0x7e, 0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, // .........~......
	0x00, 0x7e, 0x03, 0x00, 0x00, 0xbc, 0x00, 0x05, 0x00, 0x85, 0x00, 0x00, 0x00, 0x7f, 0x03, 0x00, // .~..............
	0x00, 0x60, 0x03, 0x00, 0x00, 0x84, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x86, 0x03, 0x00, // .`..............
	0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0x7f, 0x03, 0x00, 0x00, 0x80, 0x03, 0x00, // ................
	0x00, 0x82, 0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x82, 0x03, 0x00, 0x00, 0x0c, 0x00, 0x08, // ................
	0x00, 0x07, 0x00, 0x00, 0x00, 0x84, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, // .............2..
	0x00, 0x60, 0x03, 0x00, 0x00, 0x8d, 0x00, 0x00, 0x00, 0x8f, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, // .`..............
	0x00, 0x07, 0x00, 0x00, 0x00, 0x85, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, // ................
	0x00, 0x84, 0x03, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x87, 0x03, 0x00, // ................
	0x00, 0xf8, 0x00, 0x02, 0x00, 0x80, 0x03, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // ................
	0x00, 0x81, 0x03, 0x00, 0x00, 0x60, 0x03, 0x00, 0x00, 0x89, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, // .....`..........
	0x00, 0x87, 0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x86, 0x03, 0x00, 0x00, 0xff, 0x00, 0x01, // ................
	0x00, 0xf8, 0x00, 0x02, 0x00, 0x87, 0x03, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, // ................
	0x00, 0xa7, 0x04, 0x00, 0x00, 0x85, 0x03, 0x00, 0x00, 0x82, 0x03, 0x00, 0x00, 0x81, 0x03, 0x00, // ................
	0x00, 0x80, 0x03, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x62, 0x03, 0x00, // .....Q.......b..
	0x00, 0x33, 0x03, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x99, 0x03, 0x00, // .3..............
	0x00, 0x00, 0x00, 0x00, 0x00, 0xfb, 0x00, 0x03, 0x00, 0x99, 0x00, 0x00, 0x00, 0x90, 0x03, 0x00, // ................
	0x00, 0xf8, 0x00, 0x02, 0x00, 0x90, 0x03, 0x00, 0x00, 0xbc, 0x00, 0x05, 0x00, 0x85, 0x00, 0x00, // ................
	0x00, 0x91, 0x03, 0x00, 0x00, 0x62, 0x03, 0x00, 0x00, 0x84, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, // .....b..........
	0x00, 0x98, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0x91, 0x03, 0x00, // ................
	0x00, 0x92, 0x03, 0x00, 0x00, 0x94, 0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x94, 0x03, 0x00, // ................
	0x00, 0x0c, 0x00, 0x08, 0x00, 0x07, 0x00, 0x00, 0x00, 0x96, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, // ................
	0x00, 0x32, 0x00, 0x00, 0x00, 0x62, 0x03, 0x00, 0x00, 0x8d, 0x00, 0x00, 0x00, 0x8f, 0x00, 0x00, // .2...b..........
	0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x97, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, // ................
	0x00, 0x1a, 0x00, 0x00, 0x00, 0x96, 0x03, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, // ................
	0x00, 0x99, 0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x92, 0x03, 0x00, 0x00, 0x85, 0x00, 0x05, // ................
	0x00, 0x07, 0x00, 0x00, 0x00, 0x93, 0x03, 0x00, 0x00, 0x62, 0x03, 0x00, 0x00, 0x89, 0x00, 0x00, // .........b......
	0x00, 0xf9, 0x00, 0x02, 0x00, 0x99, 0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x98, 0x03, 0x00, // ................
	0x00, 0xff, 0x00, 0x01, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x99, 0x03, 0x00, 0x00, 0xf5, 0x00, 0x07, // ................
	0x00, 0x07, 0x00, 0x00, 0x00, 0xa8, 0x04, 0x00, 0x00, 0x97, 0x03, 0x00, 0x00, 0x94, 0x03, 0x00, // ................
	0x00, 0x93, 0x03, 0x00, 0x00, 0x92, 0x03, 0x00, 0x00, 0x50, 0x00, 0x06, 0x00, 0x15, 0x00, 0x00, // .........P......
	0x00, 0x64, 0x03, 0x00, 0x00, 0xa6, 0x04, 0x00, 0x00, 0xa7, 0x04, 0x00, 0x00, 0xa8, 0x04, 0x00, // .d..............
	0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x9d, 0x03, 0x00, 0x00, 0x5b, 0x03, 0x00, // .Q...........[..
	0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0xb4, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0xfb, 0x00, 0x03, 0x00, 0x99, 0x00, 0x00, 0x00, 0xab, 0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, // ................
	0x00, 0xab, 0x03, 0x00, 0x00, 0xbc, 0x00, 0x05, 0x00, 0x85, 0x00, 0x00, 0x00, 0xac, 0x03, 0x00, // ................
	0x00, 0x9d, 0x03, 0x00, 0x00, 0x84, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0xb3, 0x03, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0xac, 0x03, 0x00, 0x00, 0xad, 0x03, 0x00, // ................
	0x00, 0xaf, 0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xaf, 0x03, 0x00, 0x00, 0x0c, 0x00, 0x08, // ................
	0x00, 0x07, 0x00, 0x00, 0x00, 0xb1, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, // .............2..
	0x00, 0x9d, 0x03, 0x00, 0x00, 0x8d, 0x00, 0x00, 0x00, 0x8f, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, // ................
	0x00, 0x07, 0x00, 0x00, 0x00, 0xb2, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, // ................
	0x00, 0xb1, 0x03, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0xb4, 0x03, 0x00, // ................
	0x00, 0xf8, 0x00, 0x02, 0x00, 0xad, 0x03, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // ................
	0x00, 0xae, 0x03, 0x00, 0x00, 0x9d, 0x03, 0x00, 0x00, 0x89, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, // ................
	0x00, 0xb4, 0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xb3, 0x03, 0x00, 0x00, 0xff, 0x00, 0x01, // ................
	0x00, 0xf8, 0x00, 0x02, 0x00, 0xb4, 0x03, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, // ................
	0x00, 0xac, 0x04, 0x00, 0x00, 0xb2, 0x03, 0x00, 0x00, 0xaf, 0x03, 0x00, 0x00, 0xae, 0x03, 0x00, // ................
	0x00, 0xad, 0x03, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x9f, 0x03, 0x00, // .....Q..........
	0x00, 0x5b, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0xc6, 0x03, 0x00, // .[..............
	0x00, 0x00, 0x00, 0x00, 0x00, 0xfb, 0x00, 0x03, 0x00, 0x99, 0x00, 0x00, 0x00, 0xbd, 0x03, 0x00, // ................
	0x00, 0xf8, 0x00, 0x02, 0x00, 0xbd, 0x03, 0x00, 0x00, 0xbc, 0x00, 0x05, 0x00, 0x85, 0x00, 0x00, // ................
	0x00, 0xbe, 0x03, 0x00, 0x00, 0x9f, 0x03, 0x00, 0x00, 0x84, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, // ................
	0x00, 0xc5, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0xbe, 0x03, 0x00, // ................
	0x00, 0xbf, 0x03, 0x00, 0x00, 0xc1, 0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xc1, 0x03, 0x00, // ................
	0x00, 0x0c, 0x00, 0x08, 0x00, 0x07, 0x00, 0x00, 0x00, 0xc3, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, // ................
	0x00, 0x32, 0x00, 0x00, 0x00, 0x9f, 0x03, 0x00, 0x00, 0x8d, 0x00, 0x00, 0x00, 0x8f, 0x00, 0x00, // .2..............
	0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0xc4, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, // ................
	0x00, 0x1a, 0x00, 0x00, 0x00, 0xc3, 0x03, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, // ................
	0x00, 0xc6, 0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xbf, 0x03, 0x00, 0x00, 0x85, 0x00, 0x05, // ................
	0x00, 0x07, 0x00, 0x00, 0x00, 0xc0, 0x03, 0x00, 0x00, 0x9f, 0x03, 0x00, 0x00, 0x89, 0x00, 0x00, // ................
	0x00, 0xf9, 0x00, 0x02, 0x00, 0xc6, 0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xc5, 0x03, 0x00, // ................
	0x00, 0xff, 0x00, 0x01, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xc6, 0x03, 0x00, 0x00, 0xf5, 0x00, 0x07, // ................
	0x00, 0x07, 0x00, 0x00, 0x00, 0xad, 0x04, 0x00, 0x00, 0xc4, 0x03, 0x00, 0x00, 0xc1, 0x03, 0x00, // ................
	0x00, 0xc0, 0x03, 0x00, 0x00, 0xbf, 0x03, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // .........Q......
	0x00, 0xa1, 0x03, 0x00, 0x00, 0x5b, 0x03, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, // .....[..........
	0x00, 0xd8, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfb, 0x00, 0x03, 0x00, 0x99, 0x00, 0x00, // ................
	0x00, 0xcf, 0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xcf, 0x03, 0x00, 0x00, 0xbc, 0x00, 0x05, // ................
	0x00, 0x85, 0x00, 0x00, 0x00, 0xd0, 0x03, 0x00, 0x00, 0xa1, 0x03, 0x00, 0x00, 0x84, 0x00, 0x00, // ................
	0x00, 0xf7, 0x00, 0x03, 0x00, 0xd7, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, // ................
	0x00, 0xd0, 0x03, 0x00, 0x00, 0xd1, 0x03, 0x00, 0x00, 0xd3, 0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, // ................
	0x00, 0xd3, 0x03, 0x00, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x07, 0x00, 0x00, 0x00, 0xd5, 0x03, 0x00, // ................
	0x00, 0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0xa1, 0x03, 0x00, 0x00, 0x8d, 0x00, 0x00, // .....2..........
	0x00, 0x8f, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0xd6, 0x03, 0x00, // ................
	0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0xd5, 0x03, 0x00, 0x00, 0x91, 0x00, 0x00, // ................
	0x00, 0xf9, 0x00, 0x02, 0x00, 0xd8, 0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xd1, 0x03, 0x00, // ................
	0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xd2, 0x03, 0x00, 0x00, 0xa1, 0x03, 0x00, // ................
	0x00, 0x89, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0xd8, 0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, // ................
	0x00, 0xd7, 0x03, 0x00, 0x00, 0xff, 0x00, 0x01, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xd8, 0x03, 0x00, // ................
	0x00, 0xf5, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0xae, 0x04, 0x00, 0x00, 0xd6, 0x03, 0x00, // ................
	0x00, 0xd3, 0x03, 0x00, 0x00, 0xd2, 0x03, 0x00, 0x00, 0xd1, 0x03, 0x00, 0x00, 0x50, 0x00, 0x06, // .............P..
	0x00, 0x15, 0x00, 0x00, 0x00, 0xa3, 0x03, 0x00, 0x00, 0xac, 0x04, 0x00, 0x00, 0xad, 0x04, 0x00, // ................
	0x00, 0xae, 0x04, 0x00, 0x00, 0x41, 0x00, 0x05, 0x00, 0x7f, 0x01, 0x00, 0x00, 0xeb, 0x03, 0x00, // .....A..........
	0x00, 0xc7, 0x00, 0x00, 0x00, 0x7e, 0x01, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, // .....~...=......
	0x00, 0xec, 0x03, 0x00, 0x00, 0xeb, 0x03, 0x00, 0x00, 0x4f, 0x00, 0x08, 0x00, 0x15, 0x00, 0x00, // .........O......
	0x00, 0xed, 0x03, 0x00, 0x00, 0xec, 0x03, 0x00, 0x00, 0xec, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x94, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // ................
	0x00, 0xee, 0x03, 0x00, 0x00, 0x64, 0x03, 0x00, 0x00, 0xed, 0x03, 0x00, 0x00, 0x41, 0x00, 0x05, // .....d.......A..
	0x00, 0x7f, 0x01, 0x00, 0x00, 0xef, 0x03, 0x00, 0x00, 0xc7, 0x00, 0x00, 0x00, 0x85, 0x01, 0x00, // ................
	0x00, 0x3d, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xf0, 0x03, 0x00, 0x00, 0xef, 0x03, 0x00, // .=..............
	0x00, 0x4f, 0x00, 0x08, 0x00, 0x15, 0x00, 0x00, 0x00, 0xf1, 0x03, 0x00, 0x00, 0xf0, 0x03, 0x00, // .O..............
	0x00, 0xf0, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, // ................
	0x00, 0x94, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xf2, 0x03, 0x00, 0x00, 0x64, 0x03, 0x00, // .............d..
	0x00, 0xf1, 0x03, 0x00, 0x00, 0x41, 0x00, 0x05, 0x00, 0x7f, 0x01, 0x00, 0x00, 0xf3, 0x03, 0x00, // .....A..........
	0x00, 0xc7, 0x00, 0x00, 0x00, 0x7e, 0x01, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, // .....~...=......
	0x00, 0xf4, 0x03, 0x00, 0x00, 0xf3, 0x03, 0x00, 0x00, 0x4f, 0x00, 0x08, 0x00, 0x15, 0x00, 0x00, // .........O......
	0x00, 0xf5, 0x03, 0x00, 0x00, 0xf4, 0x03, 0x00, 0x00, 0xf4, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x94, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // ................
	0x00, 0xf6, 0x03, 0x00, 0x00, 0xa3, 0x03, 0x00, 0x00, 0xf5, 0x03, 0x00, 0x00, 0x41, 0x00, 0x05, // .............A..
	0x00, 0x7f, 0x01, 0x00, 0x00, 0xf7, 0x03, 0x00, 0x00, 0xc7, 0x00, 0x00, 0x00, 0x85, 0x01, 0x00, // ................
	0x00, 0x3d, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xf8, 0x03, 0x00, 0x00, 0xf7, 0x03, 0x00, // .=..............
	0x00, 0x4f, 0x00, 0x08, 0x00, 0x15, 0x00, 0x00, 0x00, 0xf9, 0x03, 0x00, 0x00, 0xf8, 0x03, 0x00, // .O..............
	0x00, 0xf8, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, // ................
	0x00, 0x94, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xfa, 0x03, 0x00, 0x00, 0xa3, 0x03, 0x00, // ................
	0x00, 0xf9, 0x03, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xfd, 0x03, 0x00, // ................
	0x00, 0xee, 0x03, 0x00, 0x00, 0xf2, 0x03, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // ................
	0x00, 0x00, 0x04, 0x00, 0x00, 0xf6, 0x03, 0x00, 0x00, 0xfa, 0x03, 0x00, 0x00, 0x41, 0x00, 0x06, // .............A..
	0x00, 0xc8, 0x00, 0x00, 0x00, 0x01, 0x04, 0x00, 0x00, 0xc7, 0x00, 0x00, 0x00, 0x85, 0x01, 0x00, // ................
	0x00, 0x08, 0x01, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x02, 0x04, 0x00, // .....=..........
	0x00, 0x01, 0x04, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x05, 0x04, 0x00, // ................
	0x00, 0xee, 0x03, 0x00, 0x00, 0xf2, 0x03, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // ................
	0x00, 0x07, 0x04, 0x00, 0x00, 0xfd, 0x03, 0x00, 0x00, 0xa3, 0x01, 0x00, 0x00, 0x88, 0x00, 0x05, // ................
	0x00, 0x07, 0x00, 0x00, 0x00, 0x08, 0x04, 0x00, 0x00, 0x05, 0x04, 0x00, 0x00, 0x07, 0x04, 0x00, // ................
	0x00, 0x0c, 0x00, 0x06, 0x00, 0x07, 0x00, 0x00, 0x00, 0x09, 0x04, 0x00, 0x00, 0x01, 0x00, 0x00, // ................
	0x00, 0x04, 0x00, 0x00, 0x00, 0x08, 0x04, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // ................
	0x00, 0x0a, 0x04, 0x00, 0x00, 0x02, 0x04, 0x00, 0x00, 0x09, 0x04, 0x00, 0x00, 0x41, 0x00, 0x06, // .............A..
	0x00, 0xc8, 0x00, 0x00, 0x00, 0x0b, 0x04, 0x00, 0x00, 0xc7, 0x00, 0x00, 0x00, 0x85, 0x01, 0x00, // ................
	0x00, 0x08, 0x01, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x0c, 0x04, 0x00, // .....=..........
	0x00, 0x0b, 0x04, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x0f, 0x04, 0x00, // ................
	0x00, 0xf6, 0x03, 0x00, 0x00, 0xfa, 0x03, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // ................
	0x00, 0x11, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0xa3, 0x01, 0x00, 0x00, 0x88, 0x00, 0x05, // ................
	0x00, 0x07, 0x00, 0x00, 0x00, 0x12, 0x04, 0x00, 0x00, 0x0f, 0x04, 0x00, 0x00, 0x11, 0x04, 0x00, // ................
	0x00, 0x0c, 0x00, 0x06, 0x00, 0x07, 0x00, 0x00, 0x00, 0x13, 0x04, 0x00, 0x00, 0x01, 0x00, 0x00, // ................
	0x00, 0x04, 0x00, 0x00, 0x00, 0x12, 0x04, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // ................
	0x00, 0x14, 0x04, 0x00, 0x00, 0x0c, 0x04, 0x00, 0x00, 0x13, 0x04, 0x00, 0x00, 0x50, 0x00, 0x06, // .............P..
	0x00, 0x15, 0x00, 0x00, 0x00, 0x24, 0x04, 0x00, 0x00, 0xfd, 0x03, 0x00, 0x00, 0xfd, 0x03, 0x00, // .....$..........
	0x00, 0xfd, 0x03, 0x00, 0x00, 0x50, 0x00, 0x06, 0x00, 0x15, 0x00, 0x00, 0x00, 0x18, 0x04, 0x00, // .....P..........
	0x00, 0x0a, 0x04, 0x00, 0x00, 0x0a, 0x04, 0x00, 0x00, 0x0a, 0x04, 0x00, 0x00, 0x0c, 0x00, 0x08, // ................
	0x00, 0x15, 0x00, 0x00, 0x00, 0x2a, 0x04, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, // .....*..........
	0x00, 0x64, 0x03, 0x00, 0x00, 0x24, 0x04, 0x00, 0x00, 0x18, 0x04, 0x00, 0x00, 0x50, 0x00, 0x06, // .d...$.......P..
	0x00, 0x15, 0x00, 0x00, 0x00, 0x30, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, // .....0..........
	0x00, 0x00, 0x04, 0x00, 0x00, 0x50, 0x00, 0x06, 0x00, 0x15, 0x00, 0x00, 0x00, 0x1d, 0x04, 0x00, // .....P..........
	0x00, 0x14, 0x04, 0x00, 0x00, 0x14, 0x04, 0x00, 0x00, 0x14, 0x04, 0x00, 0x00, 0x0c, 0x00, 0x08, // ................
	0x00, 0x15, 0x00, 0x00, 0x00, 0x36, 0x04, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, // .....6..........
	0x00, 0xa3, 0x03, 0x00, 0x00, 0x30, 0x04, 0x00, 0x00, 0x1d, 0x04, 0x00, 0x00, 0x41, 0x00, 0x05, // .....0.......A..
	0x00, 0xc7, 0x01, 0x00, 0x00, 0x3a, 0x04, 0x00, 0x00, 0xc7, 0x00, 0x00, 0x00, 0xc6, 0x01, 0x00, // .....:..........
	0x00, 0x3d, 0x00, 0x04, 0x00, 0xc4, 0x00, 0x00, 0x00, 0x3b, 0x04, 0x00, 0x00, 0x3a, 0x04, 0x00, // .=.......;...:..
	0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x3c, 0x04, 0x00, 0x00, 0x2a, 0x04, 0x00, // .Q.......<...*..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x3d, 0x04, 0x00, // .....Q.......=..
	0x00, 0x2a, 0x04, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // .*.......Q......
	0x00, 0x3e, 0x04, 0x00, 0x00, 0x2a, 0x04, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x50, 0x00, 0x07, // .>...*.......P..
	0x00, 0x0e, 0x00, 0x00, 0x00, 0x3f, 0x04, 0x00, 0x00, 0x3c, 0x04, 0x00, 0x00, 0x3d, 0x04, 0x00, // .....?...<...=..
	0x00, 0x3e, 0x04, 0x00, 0x00, 0x0c, 0x01, 0x00, 0x00, 0x91, 0x00, 0x05, 0x00, 0x0e, 0x00, 0x00, // .>..............
	0x00, 0x40, 0x04, 0x00, 0x00, 0x3b, 0x04, 0x00, 0x00, 0x3f, 0x04, 0x00, 0x00, 0x41, 0x00, 0x05, // .@...;...?...A..
	0x00, 0xc7, 0x01, 0x00, 0x00, 0x41, 0x04, 0x00, 0x00, 0xc7, 0x00, 0x00, 0x00, 0xcf, 0x01, 0x00, // .....A..........
	0x00, 0x3d, 0x00, 0x04, 0x00, 0xc4, 0x00, 0x00, 0x00, 0x42, 0x04, 0x00, 0x00, 0x41, 0x04, 0x00, // .=.......B...A..
	0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x43, 0x04, 0x00, 0x00, 0x36, 0x04, 0x00, // .Q.......C...6..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x44, 0x04, 0x00, // .....Q.......D..
	0x00, 0x36, 0x04, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // .6.......Q......
	0x00, 0x45, 0x04, 0x00, 0x00, 0x36, 0x04, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x50, 0x00, 0x07, // .E...6.......P..
	0x00, 0x0e, 0x00, 0x00, 0x00, 0x46, 0x04, 0x00, 0x00, 0x43, 0x04, 0x00, 0x00, 0x44, 0x04, 0x00, // .....F...C...D..
	0x00, 0x45, 0x04, 0x00, 0x00, 0x0c, 0x01, 0x00, 0x00, 0x91, 0x00, 0x05, 0x00, 0x0e, 0x00, 0x00, // .E..............
	0x00, 0x47, 0x04, 0x00, 0x00, 0x42, 0x04, 0x00, 0x00, 0x46, 0x04, 0x00, 0x00, 0x81, 0x00, 0x05, // .G...B...F......
	0x00, 0x0e, 0x00, 0x00, 0x00, 0x48, 0x04, 0x00, 0x00, 0x40, 0x04, 0x00, 0x00, 0x47, 0x04, 0x00, // .....H...@...G..
	0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x4d, 0x04, 0x00, 0x00, 0x48, 0x04, 0x00, // .Q.......M...H..
	0x00, 0x00, 0x00, 0x00, 0x00, 0xbc, 0x00, 0x05, 0x00, 0x85, 0x00, 0x00, 0x00, 0x5a, 0x04, 0x00, // .............Z..
	0x00, 0x4d, 0x04, 0x00, 0x00, 0xa5, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x61, 0x04, 0x00, // .M...........a..
	0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0x5a, 0x04, 0x00, 0x00, 0x5b, 0x04, 0x00, // .........Z...[..
	0x00, 0x5d, 0x04, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x5d, 0x04, 0x00, 0x00, 0x0c, 0x00, 0x07, // .].......]......
	0x00, 0x07, 0x00, 0x00, 0x00, 0x5e, 0x04, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, // .....^..........
	0x00, 0x4d, 0x04, 0x00, 0x00, 0xae, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x07, 0x00, 0x00, // .M..............
	0x00, 0x60, 0x04, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0xad, 0x00, 0x00, // .`.......2......
	0x00, 0x5e, 0x04, 0x00, 0x00, 0xa5, 0x04, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x61, 0x04, 0x00, // .^...........a..
	0x00, 0xf8, 0x00, 0x02, 0x00, 0x5b, 0x04, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // .....[..........
	0x00, 0x5c, 0x04, 0x00, 0x00, 0xaa, 0x00, 0x00, 0x00, 0x4d, 0x04, 0x00, 0x00, 0xf9, 0x00, 0x02, // .........M......
	0x00, 0x61, 0x04, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x61, 0x04, 0x00, 0x00, 0xf5, 0x00, 0x07, // .a.......a......
	0x00, 0x07, 0x00, 0x00, 0x00, 0xb2, 0x04, 0x00, 0x00, 0x60, 0x04, 0x00, 0x00, 0x5d, 0x04, 0x00, // .........`...]..
	0x00, 0x5c, 0x04, 0x00, 0x00, 0x5b, 0x04, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // .....[...Q......
	0x00, 0x4f, 0x04, 0x00, 0x00, 0x48, 0x04, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xbc, 0x00, 0x05, // .O...H..........
	0x00, 0x85, 0x00, 0x00, 0x00, 0x69, 0x04, 0x00, 0x00, 0x4f, 0x04, 0x00, 0x00, 0xa5, 0x00, 0x00, // .....i...O......
	0x00, 0xf7, 0x00, 0x03, 0x00, 0x70, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, // .....p..........
	0x00, 0x69, 0x04, 0x00, 0x00, 0x6a, 0x04, 0x00, 0x00, 0x6c, 0x04, 0x00, 0x00, 0xf8, 0x00, 0x02, // .i...j...l......
	0x00, 0x6c, 0x04, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x6d, 0x04, 0x00, // .l...........m..
	0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x4f, 0x04, 0x00, 0x00, 0xae, 0x00, 0x00, // .........O......
	0x00, 0x0c, 0x00, 0x08, 0x00, 0x07, 0x00, 0x00, 0x00, 0x6f, 0x04, 0x00, 0x00, 0x01, 0x00, 0x00, // .........o......
	0x00, 0x32, 0x00, 0x00, 0x00, 0xad, 0x00, 0x00, 0x00, 0x6d, 0x04, 0x00, 0x00, 0xa5, 0x04, 0x00, // .2.......m......
	0x00, 0xf9, 0x00, 0x02, 0x00, 0x70, 0x04, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x6a, 0x04, 0x00, // .....p.......j..
	0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x6b, 0x04, 0x00, 0x00, 0xaa, 0x00, 0x00, // .........k......
	0x00, 0x4f, 0x04, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x70, 0x04, 0x00, 0x00, 0xf8, 0x00, 0x02, // .O.......p......
	0x00, 0x70, 0x04, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0xb3, 0x04, 0x00, // .p..............
	0x00, 0x6f, 0x04, 0x00, 0x00, 0x6c, 0x04, 0x00, 0x00, 0x6b, 0x04, 0x00, 0x00, 0x6a, 0x04, 0x00, // .o...l...k...j..
	0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x51, 0x04, 0x00, 0x00, 0x48, 0x04, 0x00, // .Q.......Q...H..
	0x00, 0x02, 0x00, 0x00, 0x00, 0xbc, 0x00, 0x05, 0x00, 0x85, 0x00, 0x00, 0x00, 0x78, 0x04, 0x00, // .............x..
	0x00, 0x51, 0x04, 0x00, 0x00, 0xa5, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x7f, 0x04, 0x00, // .Q..............
	0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0x78, 0x04, 0x00, 0x00, 0x79, 0x04, 0x00, // .........x...y..
	0x00, 0x7b, 0x04, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x7b, 0x04, 0x00, 0x00, 0x0c, 0x00, 0x07, // .{.......{......
	0x00, 0x07, 0x00, 0x00, 0x00, 0x7c, 0x04, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, // .....|..........
	0x00, 0x51, 0x04, 0x00, 0x00, 0xae, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x07, 0x00, 0x00, // .Q..............
	0x00, 0x7e, 0x04, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0xad, 0x00, 0x00, // .~.......2......
	0x00, 0x7c, 0x04, 0x00, 0x00, 0xa5, 0x04, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x7f, 0x04, 0x00, // .|..............
	0x00, 0xf8, 0x00, 0x02, 0x00, 0x79, 0x04, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // .....y..........
	0x00, 0x7a, 0x04, 0x00, 0x00, 0xaa, 0x00, 0x00, 0x00, 0x51, 0x04, 0x00, 0x00, 0xf9, 0x00, 0x02, // .z.......Q......
	0x00, 0x7f, 0x04, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x7f, 0x04, 0x00, 0x00, 0xf5, 0x00, 0x07, // ................
	0x00, 0x07, 0x00, 0x00, 0x00, 0xb4, 0x04, 0x00, 0x00, 0x7e, 0x04, 0x00, 0x00, 0x7b, 0x04, 0x00, // .........~...{..
	0x00, 0x7a, 0x04, 0x00, 0x00, 0x79, 0x04, 0x00, 0x00, 0x50, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, // .z...y...P......
	0x00, 0x54, 0x02, 0x00, 0x00, 0xb2, 0x04, 0x00, 0x00, 0xb3, 0x04, 0x00, 0x00, 0xb4, 0x04, 0x00, // .T..............
	0x00, 0x0c, 0x01, 0x00, 0x00, 0x3e, 0x00, 0x03, 0x00, 0x12, 0x02, 0x00, 0x00, 0x54, 0x02, 0x00, // .....>.......T..
	0x00, 0xfd, 0x00, 0x01, 0x00, 0x38, 0x00, 0x01, 0x00, 0x00, 0x00, 0xc0, 0x00,                   // .....8.......
};
static const bgfx::EmbeddedShader fs_pp_stereo_anaglyph_lin_srgb_dyndesat = BGFX_EMBEDDED_SHADER(fs_pp_stereo_anaglyph_lin_srgb_dyndesat);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Build of fragment shader from fs_pp_stereo.sc to fs_pp_stereo_anaglyph_lin_gamma_nodesat with options: ANAGLYPH NODESAT GAMMA NOSTEREO
static const uint8_t fs_pp_stereo_anaglyph_lin_gamma_nodesat_mtl[3557] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x14, 0x74, // FSH.o.><.......t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, // ex_stereo_fbSamp
	0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x74, 0x65, // ler...........te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x54, 0x65, 0x78, 0x74, 0x75, // x_stereo_fbTextu
	0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x74, 0x65, 0x78, // re...........tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, // _stereo_depthSam
	0x70, 0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x74, // pler...........t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x54, // ex_stereo_depthT
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, // exture..........
	0x13, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, // .Stereo_MS_ZPD_Y
	0x41, 0x78, 0x69, 0x73, 0x12, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x77, // Axis...........w
	0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x01, 0x10, 0x00, 0x01, 0x00, 0x00, // _h_height.......
	0x00, 0x00, 0x00, 0x0e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, // ....Stereo_LeftM
	0x61, 0x74, 0x14, 0x01, 0x20, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x53, 0x74, 0x65, // at.. ........Ste
	0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x01, 0x60, 0x00, // reo_RightMat..`.
	0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, // .......Stereo_Le
	0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, // ftLuminance_Gamm
	0x61, 0x12, 0x01, 0xa0, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, // a...........tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // stereo_fb.......
	0x00, 0x00, 0x00, 0x10, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, // ....tex_stereo_d
	0x65, 0x70, 0x74, 0x68, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x8f, 0x0c, // epth............
	0x00, 0x00, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x6d, 0x65, 0x74, 0x61, // ..#include <meta
	0x6c, 0x5f, 0x73, 0x74, 0x64, 0x6c, 0x69, 0x62, 0x3e, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, // l_stdlib>.#inclu
	0x64, 0x65, 0x20, 0x3c, 0x73, 0x69, 0x6d, 0x64, 0x2f, 0x73, 0x69, 0x6d, 0x64, 0x2e, 0x68, 0x3e, // de <simd/simd.h>
	0x0a, 0x0a, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, // ..using namespac
	0x65, 0x20, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, // e metal;..struct
	0x20, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, //  _Global.{.    f
	0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, // loat4 Stereo_MS_
	0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, // ZPD_YAxis;.    f
	0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, // loat4 w_h_height
	0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x78, 0x34, 0x20, 0x53, // ;.    float4x4 S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x20, // tereo_LeftMat;. 
	0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x78, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, //    float4x4 Ster
	0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x20, 0x20, 0x20, // eo_RightMat;.   
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, //  float4 Stereo_L
	0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, // eftLuminance_Gam
	0x6d, 0x61, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x78, // ma;.};..struct x
	0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x0a, 0x7b, // latMtlMain_out.{
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, // .    float4 bgfx
	0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x20, 0x5b, 0x5b, 0x63, 0x6f, 0x6c, // _FragData0 [[col
	0x6f, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, // or(0)]];.};..str
	0x75, 0x63, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, // uct xlatMtlMain_
	0x69, 0x6e, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, // in.{.    float2 
	0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x5b, 0x5b, 0x75, 0x73, // v_texcoord0 [[us
	0x65, 0x72, 0x28, 0x6c, 0x6f, 0x63, 0x6e, 0x30, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, // er(locn0)]];.};.
	0x0a, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, // .fragment xlatMt
	0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, // lMain_out xlatMt
	0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x28, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, // lMain(xlatMtlMai
	0x6e, 0x5f, 0x69, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x5b, 0x5b, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, // n_in in [[stage_
	0x69, 0x6e, 0x5d, 0x5d, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x20, 0x5f, // in]], constant _
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x26, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x20, 0x5b, // Global& _mtl_u [
	0x5b, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x74, 0x65, // [buffer(0)]], te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3e, 0x20, 0x74, // xture2d<float> t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x20, 0x5b, 0x5b, 0x74, // ex_stereo_fb [[t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x74, 0x65, 0x78, // exture(0)]], tex
	0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3e, 0x20, 0x74, 0x65, // ture2d<float> te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x20, 0x5b, // x_stereo_depth [
	0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x31, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x73, // [texture(1)]], s
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // ampler tex_stere
	0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x5b, 0x5b, 0x73, 0x61, // o_fbSampler [[sa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, // mpler(0)]], samp
	0x6c, 0x65, 0x72, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, // ler tex_stereo_d
	0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x5b, 0x5b, 0x73, 0x61, // epthSampler [[sa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x31, 0x29, 0x5d, 0x5d, 0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, // mpler(1)]]).{.  
	0x20, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, //   xlatMtlMain_ou
	0x74, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x3d, 0x20, 0x7b, 0x7d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, // t out = {};.    
	0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x5f, 0x34, 0x38, 0x30, 0x20, 0x3d, 0x20, 0x5f, 0x6d, 0x74, 0x6c, // bool _480 = _mtl
	0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, // _u.Stereo_MS_ZPD
	0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x7a, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x3b, // _YAxis.z != 0.0;
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x35, 0x33, 0x39, 0x20, // .    float _539 
	0x3d, 0x20, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, // = fast::max(0.0,
	0x20, 0x66, 0x6d, 0x61, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, //  fma(_mtl_u.Ster
	0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, // eo_MS_ZPD_YAxis.
	0x78, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, // x, 1.0 - (1.0 / 
	0x66, 0x6d, 0x61, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, 0x6e, 0x28, 0x66, 0x61, // fma(fast::min(fa
	0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // st::min(tex_ster
	0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, // eo_depth.sample(
	0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, // tex_stereo_depth
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, // Sampler, (in.v_t
	0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2b, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, // excoord0 + selec
	0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x5f, // t(float2(0.5 * _
	0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, // mtl_u.Stereo_MS_
	0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, // ZPD_YAxis.x, 0.0
	0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, // ), float2(0.0, 0
	0x2e, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, // .5 * _mtl_u.Ster
	0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, // eo_MS_ZPD_YAxis.
	0x78, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x34, 0x38, 0x30, 0x29, 0x29, // x), bool2(_480))
	0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, // ), level(0.0)).x
	0x2c, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, // , tex_stereo_dep
	0x74, 0x68, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // th.sample(tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, // ereo_depthSample
	0x72, 0x2c, 0x20, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, // r, (in.v_texcoor
	0x64, 0x30, 0x20, 0x2b, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, // d0 + select(floa
	0x74, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x30, 0x30, 0x30, 0x30, 0x30, 0x38, 0x35, 0x38, // t2(0.66600000858
	0x33, 0x30, 0x36, 0x38, 0x38, 0x34, 0x37, 0x36, 0x35, 0x36, 0x32, 0x35, 0x20, 0x2a, 0x20, 0x5f, // 306884765625 * _
	0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, // mtl_u.Stereo_MS_
	0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, // ZPD_YAxis.x, 0.0
	0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, // ), float2(0.0, 0
	0x2e, 0x36, 0x36, 0x36, 0x30, 0x30, 0x30, 0x30, 0x30, 0x38, 0x35, 0x38, 0x33, 0x30, 0x36, 0x38, // .666000008583068
	0x38, 0x34, 0x37, 0x36, 0x35, 0x36, 0x32, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, // 84765625 * _mtl_
	0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, // u.Stereo_MS_ZPD_
	0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, // YAxis.x), bool2(
	0x5f, 0x34, 0x38, 0x30, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, // _480))), level(0
	0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, // .0)).x), tex_ste
	0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // reo_depth.sample
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, // (tex_stereo_dept
	0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, // hSampler, (in.v_
	0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2b, 0x20, 0x73, 0x65, 0x6c, 0x65, // texcoord0 + sele
	0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, // ct(float2(_mtl_u
	0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, // .Stereo_MS_ZPD_Y
	0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, // Axis.x, 0.0), fl
	0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, // oat2(0.0, _mtl_u
	0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, // .Stereo_MS_ZPD_Y
	0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, // Axis.x), bool2(_
	0x34, 0x38, 0x30, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, // 480))), level(0.
	0x30, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x5f, // 0)).x), (1.0 / _
	0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, // mtl_u.Stereo_MS_
	0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, // ZPD_YAxis.y) - 0
	0x2e, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, // .5, 0.5)), _mtl_
	0x75, 0x2e, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x29, 0x29, // u.w_h_height.w))
	0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x36, 0x30, 0x39, // ;.    float _609
	0x20, 0x3d, 0x20, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, //  = fast::max(0.0
	0x2c, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, // , fma(_mtl_u.Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, // reo_MS_ZPD_YAxis
	0x2e, 0x78, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, // .x, 1.0 - (1.0 /
	0x20, 0x66, 0x6d, 0x61, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, 0x6e, 0x28, 0x66, //  fma(fast::min(f
	0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, // ast::min(tex_ste
	0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // reo_depth.sample
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, // (tex_stereo_dept
	0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, // hSampler, (in.v_
	0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2d, 0x20, 0x73, 0x65, 0x6c, 0x65, // texcoord0 - sele
	0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2a, 0x20, // ct(float2(0.5 * 
	0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, // _mtl_u.Stereo_MS
	0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, // _ZPD_YAxis.x, 0.
	0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, // 0), float2(0.0, 
	0x30, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, // 0.5 * _mtl_u.Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, // reo_MS_ZPD_YAxis
	0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x34, 0x38, 0x30, 0x29, // .x), bool2(_480)
	0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, // )), level(0.0)).
	0x78, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, // x, tex_stereo_de
	0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, // pth.sample(tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, // tereo_depthSampl
	0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, // er, (in.v_texcoo
	0x72, 0x64, 0x30, 0x20, 0x2d, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, // rd0 - select(flo
	0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x30, 0x30, 0x30, 0x30, 0x30, 0x38, 0x35, // at2(0.6660000085
	0x38, 0x33, 0x30, 0x36, 0x38, 0x38, 0x34, 0x37, 0x36, 0x35, 0x36, 0x32, 0x35, 0x20, 0x2a, 0x20, // 8306884765625 * 
	0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, // _mtl_u.Stereo_MS
	0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, // _ZPD_YAxis.x, 0.
	0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, // 0), float2(0.0, 
	0x30, 0x2e, 0x36, 0x36, 0x36, 0x30, 0x30, 0x30, 0x30, 0x30, 0x38, 0x35, 0x38, 0x33, 0x30, 0x36, // 0.66600000858306
	0x38, 0x38, 0x34, 0x37, 0x36, 0x35, 0x36, 0x32, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, // 884765625 * _mtl
	0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, // _u.Stereo_MS_ZPD
	0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, // _YAxis.x), bool2
	0x28, 0x5f, 0x34, 0x38, 0x30, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, // (_480))), level(
	0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // 0.0)).x), tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, // ereo_depth.sampl
	0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, // e(tex_stereo_dep
	0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, 0x6e, 0x2e, 0x76, // thSampler, (in.v
	0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2d, 0x20, 0x73, 0x65, 0x6c, // _texcoord0 - sel
	0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, // ect(float2(_mtl_
	0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, // u.Stereo_MS_ZPD_
	0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, // YAxis.x, 0.0), f
	0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, // loat2(0.0, _mtl_
	0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, // u.Stereo_MS_ZPD_
	0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, // YAxis.x), bool2(
	0x5f, 0x34, 0x38, 0x30, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, // _480))), level(0
	0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, // .0)).x), (1.0 / 
	0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, // _mtl_u.Stereo_MS
	0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, // _ZPD_YAxis.y) - 
	0x30, 0x2e, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, // 0.5, 0.5)), _mtl
	0x5f, 0x75, 0x2e, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x29, // _u.w_h_height.w)
	0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x6f, 0x75, 0x74, 0x2e, 0x62, 0x67, 0x66, 0x78, 0x5f, // );.    out.bgfx_
	0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, // FragData0 = floa
	0x74, 0x34, 0x28, 0x70, 0x6f, 0x77, 0x72, 0x28, 0x28, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, // t4(powr(((float4
	0x28, 0x70, 0x6f, 0x77, 0x72, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // (powr(tex_stereo
	0x5f, 0x66, 0x62, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, // _fb.sample(tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, // tereo_fbSampler,
	0x20, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, //  (in.v_texcoord0
	0x20, 0x2b, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, //  + select(float2
	0x28, 0x5f, 0x35, 0x33, 0x39, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, // (_539, 0.0), flo
	0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x5f, 0x35, 0x33, 0x39, 0x29, 0x2c, // at2(0.0, -_539),
	0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x34, 0x38, 0x30, 0x29, 0x29, 0x29, 0x2c, 0x20, //  bool2(_480))), 
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x2c, // level(0.0)).xyz,
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, //  float3(_mtl_u.S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, // tereo_LeftLumina
	0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, 0x5f, 0x6d, 0x74, // nce_Gamma.w, _mt
	0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, // l_u.Stereo_LeftL
	0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, // uminance_Gamma.w
	0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // , _mtl_u.Stereo_
	0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, // LeftLuminance_Ga
	0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x29, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2a, 0x20, // mma.w)), 1.0) * 
	0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, // _mtl_u.Stereo_Le
	0x66, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, // ftMat) + (float4
	0x28, 0x70, 0x6f, 0x77, 0x72, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // (powr(tex_stereo
	0x5f, 0x66, 0x62, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, // _fb.sample(tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, // tereo_fbSampler,
	0x20, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, //  (in.v_texcoord0
	0x20, 0x2d, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, //  - select(float2
	0x28, 0x5f, 0x36, 0x30, 0x39, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, // (_609, 0.0), flo
	0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x5f, 0x36, 0x30, 0x39, 0x29, 0x2c, // at2(0.0, -_609),
	0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x34, 0x38, 0x30, 0x29, 0x29, 0x29, 0x2c, 0x20, //  bool2(_480))), 
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x2c, // level(0.0)).xyz,
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, //  float3(_mtl_u.S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, // tereo_LeftLumina
	0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, 0x5f, 0x6d, 0x74, // nce_Gamma.w, _mt
	0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, // l_u.Stereo_LeftL
	0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, // uminance_Gamma.w
	0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // , _mtl_u.Stereo_
	0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, // LeftLuminance_Ga
	0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x29, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2a, 0x20, // mma.w)), 1.0) * 
	0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, // _mtl_u.Stereo_Ri
	0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x66, 0x6c, // ghtMat)).xyz, fl
	0x6f, 0x61, 0x74, 0x33, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, // oat3(1.0 / _mtl_
	0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // u.Stereo_LeftLum
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, // inance_Gamma.w, 
	0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, // 1.0 / _mtl_u.Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, // reo_LeftLuminanc
	0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, // e_Gamma.w, 1.0 /
	0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, //  _mtl_u.Stereo_L
	0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, // eftLuminance_Gam
	0x6d, 0x61, 0x2e, 0x77, 0x29, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, // ma.w)), 1.0);.  
	0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6f, 0x75, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, //   return out;.}.
	0x0a, 0x00, 0x00, 0xf0, 0x00,                                                                   // .....
};
static const uint8_t fs_pp_stereo_anaglyph_lin_gamma_nodesat_essl[11418] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x87, 0x2c, // FSH.o.><.......,
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x33, 0x32, 0x30, 0x20, 0x65, // ..#version 320 e
	0x73, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, // s.#define attrib
	0x75, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x76, // ute in.#define v
	0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, // arying in.precis
	0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3b, // ion highp float;
	0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, // .precision highp
	0x20, 0x69, 0x6e, 0x74, 0x3b, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x73, 0x68, //  int;.#define sh
	0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, // adow2D(_sampler,
	0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, //  _coord) texture
	0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, // (_sampler, _coor
	0x64, 0x29, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x73, 0x68, 0x61, 0x64, 0x6f, // d).#define shado
	0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // w2DProj(_sampler
	0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // , _coord) textur
	0x65, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, // eProj(_sampler, 
	0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x0a, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x65, 0x64, 0x69, // _coord).out medi
	0x75, 0x6d, 0x70, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, // ump vec4 bgfx_Fr
	0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, // agColor;.varying
	0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, //  vec2 v_texcoord
	0x30, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, // 0;.vec3 instMul(
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x20, // vec3 _vec, mat3 
	0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // _mtx) { return (
	0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, //  (_vec) * (_mtx)
	0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, //  ); }.vec3 instM
	0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, // ul(mat3 _mtx, ve
	0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, // c3 _vec) { retur
	0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, // n ( (_mtx) * (_v
	0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, // ec) ); }.vec4 in
	0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, // stMul(vec4 _vec,
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, //  mat4 _mtx) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, // turn ( (_vec) * 
	0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, // (_mtx) ); }.vec4
	0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, //  instMul(mat4 _m
	0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, // tx, vec4 _vec) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, //  return ( (_mtx)
	0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, //  * (_vec) ); }.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, 0x70, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, // loat rcp(float _
	0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x2f, // a) { return 1.0/
	0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, // _a; }.vec2 rcp(v
	0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // ec2 _a) { return
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, //  vec2(1.0)/_a; }
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, // .vec3 rcp(vec3 _
	0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, // a) { return vec3
	0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, // (1.0)/_a; }.vec4
	0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, //  rcp(vec4 _a) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x31, 0x2e, 0x30, 0x29, // return vec4(1.0)
	0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x65, 0x63, 0x32, // /_a; }.vec2 vec2
	0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, // _splat(float _x)
	0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, //  { return vec2(_
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, // x, _x); }.vec3 v
	0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // ec3_splat(float 
	0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, // _x) { return vec
	0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, // 3(_x, _x, _x); }
	0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, // .vec4 vec4_splat
	0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // (float _x) { ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, // urn vec4(_x, _x,
	0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, //  _x, _x); }.uvec
	0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, // 2 uvec2_splat(ui
	0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // nt _x) { return 
	0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, // uvec2(_x, _x); }
	0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, // .uvec3 uvec3_spl
	0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // at(uint _x) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, // turn uvec3(_x, _
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x34, 0x20, // x, _x); }.uvec4 
	0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, // uvec4_splat(uint
	0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, //  _x) { return uv
	0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, // ec4(_x, _x, _x, 
	0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, // _x); }.mat4 mtxF
	0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, // romRows(vec4 _0,
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, //  vec4 _1, vec4 _
	0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // 2, vec4 _3).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, // turn transpose(m
	0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, // at4(_0, _1, _2, 
	0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, // _3) );.}.mat4 mt
	0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, // xFromCols(vec4 _
	0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // 0, vec4 _1, vec4
	0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, //  _2, vec4 _3).{.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, // return mat4(_0, 
	0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, // _1, _2, _3);.}.m
	0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, // at3 mtxFromRows(
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, // vec3 _0, vec3 _1
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // , vec3 _2).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, // urn transpose(ma
	0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x20, 0x29, // t3(_0, _1, _2) )
	0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, // ;.}.mat3 mtxFrom
	0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, // Cols(vec3 _0, ve
	0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, // c3 _1, vec3 _2).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, // {.return mat3(_0
	0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, // , _1, _2);.}.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, // form vec4 u_view
	0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, // Rect;.uniform ve
	0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x54, 0x65, 0x78, 0x65, 0x6c, 0x3b, 0x0a, // c4 u_viewTexel;.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, // uniform mat4 u_v
	0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, // iew;.uniform mat
	0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, // 4 u_invView;.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x70, 0x72, 0x6f, 0x6a, // form mat4 u_proj
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, // ;.uniform mat4 u
	0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // _invProj;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, // m mat4 u_viewPro
	0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, // j;.uniform mat4 
	0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, // u_invViewProj;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, // niform mat4 u_mo
	0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // del[32];.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, //  mat4 u_modelVie
	0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, // w;.uniform mat4 
	0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, // u_modelViewProj;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, // .uniform vec4 u_
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x66, 0x34, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // alphaRef4;.float
	0x20, 0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, //  sqr(const float
	0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, //  v).{.return v*v
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, // ;.}.vec2 sqr(con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // st vec2 v).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // urn v*v;.}.vec3 
	0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, // sqr(const vec3 v
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, // ).{.return v*v;.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6d, 0x75, 0x6c, 0x5f, 0x77, 0x31, 0x28, 0x63, 0x6f, // }.vec3 mul_w1(co
	0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, // nst vec3 v, cons
	0x74, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, // t mat4 m).{.retu
	0x72, 0x6e, 0x20, 0x76, 0x2e, 0x78, 0x2a, 0x6d, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, // rn v.x*m[0].xyz 
	0x2b, 0x20, 0x28, 0x76, 0x2e, 0x79, 0x2a, 0x6d, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, // + (v.y*m[1].xyz 
	0x2b, 0x20, 0x28, 0x76, 0x2e, 0x7a, 0x2a, 0x6d, 0x5b, 0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, // + (v.z*m[2].xyz 
	0x2b, 0x20, 0x6d, 0x5b, 0x33, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // + m[3].xyz));.}.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, // float acos_appro
	0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // x_divPI(const fl
	0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // oat v).{.const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, // loat x = abs(v);
	0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, // .if(1. - x <= 0.
	0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, // 00006103515625).
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, // return (v >= 0.)
	0x20, 0x3f, 0x20, 0x30, 0x2e, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, //  ? 0. : 1.;.cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, // t float res = ((
	0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, // -0.155972/3.1415
	0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, // 9265358979323846
	0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, // 26433832795) * x
	0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, //  + (1.56467/3.14
	0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, // 1592653589793238
	0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, // 4626433832795) )
	0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, //  * sqrt(1. - x);
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, // .return (v >= 0.
	0x29, 0x20, 0x3f, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x72, // ) ? res : 1. - r
	0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x74, 0x61, 0x6e, // es;.}.float atan
	0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, // 2_approx_div2PI(
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x79, 0x2c, 0x20, 0x63, // const float y, c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x29, 0x0a, 0x7b, 0x0a, // onst float x).{.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, // const float abs_
	0x79, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x79, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // y = abs(y);.cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3d, 0x20, // t float abs_x = 
	0x61, 0x62, 0x73, 0x28, 0x78, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, // abs(x);.if(abs_x
	0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, //  <= 0.0000610351
	0x35, 0x36, 0x32, 0x35, 0x20, 0x26, 0x26, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3c, 0x3d, // 5625 && abs_y <=
	0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, //  0.0000610351562
	0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x30, 0x2e, 0x3b, 0x0a, 0x63, 0x6f, // 5).return 0.;.co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x61, // nst float r = (a
	0x62, 0x73, 0x5f, 0x78, 0x20, 0x2d, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x20, 0x2f, 0x20, // bs_x - abs_y) / 
	0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2b, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x3b, // (abs_x + abs_y);
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x6e, 0x67, // .const float ang
	0x6c, 0x65, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, // le = ((x < 0.) ?
	0x20, 0x28, 0x33, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x20, 0x3a, 0x20, 0x28, 0x31, 0x2e, 0x2f, 0x38, //  (3./8.) : (1./8
	0x2e, 0x29, 0x29, 0x0a, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x32, 0x31, 0x31, 0x38, 0x36, 0x38, 0x20, // .)).+ (0.211868 
	0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, // /(2.*3.141592653
	0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, // 5897932384626433
	0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x72, 0x20, 0x2a, 0x20, 0x72, 0x20, // 832795) * r * r 
	0x2d, 0x20, 0x30, 0x2e, 0x39, 0x38, 0x37, 0x33, 0x30, 0x35, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, // - 0.987305 /(2.*
	0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, // 3.14159265358979
	0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, // 3238462643383279
	0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, // 5)) * ((x < 0.) 
	0x3f, 0x20, 0x2d, 0x72, 0x20, 0x3a, 0x20, 0x72, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // ? -r : r);.retur
	0x6e, 0x20, 0x28, 0x79, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x61, 0x6e, // n (y < 0.) ? -an
	0x67, 0x6c, 0x65, 0x20, 0x3a, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // gle : angle;.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x73, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, // loat asin_approx
	0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, // _divPI(const flo
	0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // at v).{.const fl
	0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, // oat x = abs(v);.
	0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, // if(1. - x <= 0.0
	0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, // 0006103515625).r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, // eturn (v >= 0.) 
	0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x3b, 0x0a, 0x63, 0x6f, // ? 0.5 : -0.5;.co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, // nst float res = 
	0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, // ((-0.155972/3.14
	0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, // 1592653589793238
	0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, // 4626433832795) *
	0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, //  x + (1.56467/3.
	0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, // 1415926535897932
	0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, // 384626433832795)
	0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, //  ) * sqrt(1. - x
	0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, // );.return (v >= 
	0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x20, // 0.) ? 0.5 - res 
	0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, // : -0.5 + res;.}.
	0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x61, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x71, 0x75, 0x69, // vec2 ray_to_equi
	0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x75, 0x76, 0x28, 0x63, // rectangular_uv(c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x61, 0x79, 0x29, 0x0a, 0x7b, // onst vec3 ray).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x0a, 0x30, 0x2e, // .return vec2(.0.
	0x35, 0x20, 0x2b, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, // 5 + atan2_approx
	0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x79, 0x2c, 0x20, 0x72, // _div2PI(ray.y, r
	0x61, 0x79, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, // ay.x),.acos_appr
	0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x7a, 0x29, 0x29, // ox_divPI(ray.z))
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, // ;.}.float InvsRG
	0x42, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, // B(const float co
	0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // lor).{.if (color
	0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, 0x34, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, //  <= 0.04045).ret
	0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, // urn color * (1.0
	0x2f, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, // /12.92);.else.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, // turn pow(color *
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x28, //  (1.0/1.055) + (
	0x30, 0x2e, 0x30, 0x35, 0x35, 0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, // 0.055/1.055), 2.
	0x34, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x52, // 4);.}.float InvR
	0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, // ec709(const floa
	0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, // t color).{.if (c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x38, 0x31, 0x29, 0x0a, 0x72, // olor <= 0.081).r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, // eturn color * (1
	0x2e, 0x30, 0x2f, 0x34, 0x2e, 0x35, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, // .0/4.5);.else.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, // turn pow(color *
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, 0x20, 0x2b, 0x20, 0x28, //  (1.0/1.099) + (
	0x30, 0x2e, 0x30, 0x39, 0x39, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, 0x2c, 0x20, 0x31, 0x2e, // 0.099/1.099), 1.
	0x30, 0x2f, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // 0/0.45);.}.float
	0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, //  InvGamma(const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, // float color).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, // eturn InvsRGB(co
	0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, // lor);.}.vec3 Inv
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, // Gamma(const vec3
	0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, //  color).{.return
	0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, //  vec3(InvGamma(c
	0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, // olor.x),InvGamma
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, // (color.y),InvGam
	0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // ma(color.z));.}.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, // vec3 InvToneMap(
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // const vec3 color
	0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // ).{.const float 
	0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x30, 0x2e, 0x35, 0x2f, 0x30, 0x2e, // inv_2bh = 0.5/0.
	0x32, 0x35, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // 25;.const float 
	0x62, 0x68, 0x20, 0x3d, 0x20, 0x34, 0x2e, 0x30, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2d, 0x20, // bh = 4.0*0.25 - 
	0x32, 0x2e, 0x30, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6c, // 2.0;.return (col
	0x6f, 0x72, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2b, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, // or - 1.0 + sqrt(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2a, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x20, 0x62, // color*(color + b
	0x68, 0x29, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x2a, 0x69, 0x6e, 0x76, 0x5f, 0x32, // h) + 1.0))*inv_2
	0x62, 0x68, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x52, 0x47, 0x42, // bh;.}.float sRGB
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, // (const float f).
	0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, // {.float s;.if (f
	0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x33, 0x31, 0x33, 0x30, 0x38, 0x29, 0x0a, 0x73, //  <= 0.0031308).s
	0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, //  = 12.92 * f;.el
	0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x20, 0x2a, 0x20, 0x70, // se.s = 1.055 * p
	0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x34, 0x29, 0x20, 0x2d, // ow(f, 1.0/2.4) -
	0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, //  0.055;.return s
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, // ;.}.float Rec709
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, // (const float f).
	0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, // {.float s;.if (f
	0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x34, //  <= 0.018).s = 4
	0x2e, 0x35, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, // .5 * f;.else.s =
	0x20, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, //  1.099 * pow(f, 
	0x30, 0x2e, 0x34, 0x35, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x3b, 0x0a, 0x72, // 0.45) - 0.099;.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // eturn s;.}.float
	0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, //  FBGamma(const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // loat color).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, // turn sRGB(color)
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, // ;.}.vec2 FBGamma
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // (const vec2 colo
	0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, // r).{.return vec2
	0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, // (FBGamma(color.x
	0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, // ),FBGamma(color.
	0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, // y));.}.vec3 FBGa
	0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, // mma(const vec3 c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // olor).{.return v
	0x65, 0x63, 0x33, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // ec3(FBGamma(colo
	0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, // r.x),FBGamma(col
	0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, // or.y),FBGamma(co
	0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // lor.z));.}.vec3 
	0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x32, 0x32, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // FBGamma22(const 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // vec3 color).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, // turn vec3(pow(co
	0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, // lor.x, 1.0/2.2),
	0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, 0x30, // pow(color.y, 1.0
	0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, // /2.2),pow(color.
	0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // z, 1.0/2.2));.}.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, // float FBToneMap(
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x29, 0x0a, 0x7b, // const float l).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6c, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, // .return l * ((l*
	0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, // 0.25 + 1.0) / (l
	0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, //  + 1.0));.}.vec2
	0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, //  FBToneMap(const
	0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x63, //  vec2 color).{.c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, // onst float l = d
	0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, // ot(color,vec2(0.
	0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, // 176204+0.0108109
	0x2a, 0x30, 0x2e, 0x35, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2b, 0x30, 0x2e, // *0.5,0.812985+0.
	0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x3b, 0x0a, 0x72, // 0108109*0.5));.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, // eturn color * ((
	0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, // l*0.25 + 1.0) / 
	0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // (l + 1.0));.}.ve
	0x63, 0x33, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, // c3 FBToneMap(con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, // st vec3 color).{
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, // .const float l =
	0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x33, 0x28, //  dot(color,vec3(
	0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, // 0.176204,0.81298
	0x35, 0x2c, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x29, 0x29, 0x3b, 0x0a, 0x72, // 5,0.0108109));.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, // eturn color * ((
	0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, // l*0.25 + 1.0) / 
	0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // (l + 1.0));.}.ve
	0x63, 0x34, 0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x28, 0x63, 0x6f, 0x6e, 0x73, // c4 Additive(cons
	0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, // t vec4 cBase, co
	0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, // nst vec4 cBlend,
	0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, //  const float per
	0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, // cent).{.return c
	0x42, 0x61, 0x73, 0x65, 0x20, 0x2b, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, // Base + cBlend*pe
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, // rcent;.}.vec3 Sc
	0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, // reen (const vec3
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, //  cBase, const ve
	0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // c3 cBlend).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, // urn 1.0 - (1.0 -
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, //  cBase) * (1.0 -
	0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, //  cBlend);.}.vec4
	0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, //  Screen (const v
	0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, // ec4 cBase, const
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, //  vec4 cBlend).{.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, // return 1.0 - (1.
	0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, // 0 - cBase) * (1.
	0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // 0 - cBlend);.}.v
	0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x63, // ec3 ScreenHDR (c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, // onst vec3 cBase,
	0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, //  const vec3 cBle
	0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, // nd).{.return max
	0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, // (1.0 - (1.0 - cB
	0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, // ase) * (1.0 - cB
	0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x2c, 0x30, // lend), vec3(0.,0
	0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, // .,0.));.}.vec4 S
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // creenHDR (const 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, // vec4 cBase, cons
	0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, // t vec4 cBlend).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, // .return max(1.0 
	0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, // - (1.0 - cBase) 
	0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, // * (1.0 - cBlend)
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, // , vec4(0.,0.,0.,
	0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4d, 0x75, 0x6c, // 0.));.}.vec4 Mul
	0x74, 0x69, 0x70, 0x6c, 0x79, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, // tiply (const vec
	0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, // 4 cBase, const v
	0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, // ec4 cBlend, cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, // t float percent)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, // .{.return cBase 
	0x2a, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, // * cBlend*percent
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, // ;.}.vec4 Overlay
	0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, //  (const vec4 cBa
	0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, // se, const vec4 c
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, // Blend).{.vec4 cN
	0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, // ew = step(0.5, c
	0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x69, // Base);.cNew = mi
	0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, // x(cBase*cBlend*2
	0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, // .0, 1.0-2.0*(1.0
	0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, // -cBase)*(1.0-cBl
	0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, // end), cNew);.ret
	0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, // urn cNew;.}.vec4
	0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x48, 0x44, 0x52, 0x20, 0x28, 0x63, 0x6f, 0x6e, //  OverlayHDR (con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, // st vec4 cBase, c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, // onst vec4 cBlend
	0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, // ).{.vec4 cNew = 
	0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, // step(0.5, cBase)
	0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x6d, 0x69, 0x78, // ;.cNew = max(mix
	0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, // (cBase*cBlend*2.
	0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, // 0, 1.0-2.0*(1.0-
	0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, // cBase)*(1.0-cBle
	0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // nd), cNew), vec4
	0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, // (0.,0.,0.,0.));.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // return cNew;.}.v
	0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x73, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, // ec3 cos_hemisphe
	0x72, 0x65, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // re_sample(const 
	0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // vec2 t).{.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x68, 0x69, 0x20, 0x3d, 0x20, 0x74, 0x2e, 0x79, 0x20, // float phi = t.y 
	0x2a, 0x20, 0x28, 0x32, 0x2e, 0x30, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, // * (2.0*3.1415926
	0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, // 5358979323846264
	0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, // 33832795);.const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, //  float cosTheta 
	0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x74, 0x2e, 0x78, // = sqrt(1.0 - t.x
	0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, // );.const float s
	0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x74, // inTheta = sqrt(t
	0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x70, 0x2c, 0x63, 0x70, // .x);.float sp,cp
	0x3b, 0x0a, 0x73, 0x69, 0x6e, 0x63, 0x6f, 0x73, 0x28, 0x70, 0x68, 0x69, 0x2c, 0x73, 0x70, 0x2c, // ;.sincos(phi,sp,
	0x63, 0x70, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, // cp);.return vec3
	0x28, 0x63, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, // (cp * sinTheta, 
	0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x73, 0x70, 0x20, 0x2a, 0x20, 0x73, // cosTheta, sp * s
	0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, // inTheta);.}.vec3
	0x20, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, //  rotate_to_vecto
	0x72, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // r_upper(const ve
	0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // c3 vec, const ve
	0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x28, // c3 normal).{.if(
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x3e, 0x20, 0x2d, 0x30, 0x2e, 0x39, 0x39, // normal.y > -0.99
	0x39, 0x39, 0x39, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, // 999).{.const flo
	0x61, 0x74, 0x20, 0x68, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x28, 0x31, 0x2e, 0x30, 0x2b, // at h = 1.0/(1.0+
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, // normal.y);.const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x20, 0x3d, 0x20, 0x68, 0x2a, 0x6e, 0x6f, //  float hz = h*no
	0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // rmal.z;.const fl
	0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x3d, 0x20, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, // oat hzx = hz*nor
	0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, // mal.x;.return ve
	0x63, 0x33, 0x28, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, // c3(.vec.x * (nor
	0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, // mal.y+hz*normal.
	0x7a, 0x29, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, // z) + vec.y * nor
	0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, // mal.x - vec.z * 
	0x68, 0x7a, 0x78, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, // hzx,.vec.y * nor
	0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, // mal.y - vec.x * 
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, // normal.x - vec.z
	0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x2c, 0x0a, 0x76, 0x65, 0x63, //  * normal.z,.vec
	0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x20, 0x2d, 0x20, // .y * normal.z - 
	0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x2b, 0x20, 0x76, 0x65, // vec.x * hzx + ve
	0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, // c.z * (normal.y+
	0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, // h*normal.x*norma
	0x6c, 0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x72, 0x65, // l.x));.}.else re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x2d, 0x76, 0x65, 0x63, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, // turn -vec;.}.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // form vec4 Stereo
	0x5f, 0x53, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x0a, 0x75, 0x6e, 0x69, // _Saturation;.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // form vec4 Stereo
	0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x3b, 0x0a, 0x75, // _MS_ZPD_YAxis;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, // niform sampler2D
	0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x3b, 0x0a, //  tex_stereo_fb;.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, // uniform sampler2
	0x44, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, // D tex_stereo_dep
	0x74, 0x68, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, // th;.uniform vec4
	0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, 0x76, 0x65, 0x63, //  w_h_height;.vec
	0x33, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, // 3 gatherEyeColor
	0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x69, 0x73, // (vec2 u, bool is
	0x4c, 0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x62, 0x6f, // Left).{.const bo
	0x6f, 0x6c, 0x20, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, // ol yaxis = (Ster
	0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, // eo_MS_ZPD_YAxis.
	0x7a, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // z != 0.);.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // float MaxSeparat
	0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, // ion = (Stereo_MS
	0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x69, // _ZPD_YAxis.x);.i
	0x66, 0x20, 0x28, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, // f (isLeft).{.con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, // st float lminDep
	0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, // th = min(min(tex
	0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // tureLod(tex_ster
	0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, // eo_depth, u + (y
	0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, // axis ? vec2(0.0,
	0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, //  0.500 * MaxSepa
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, // ration) : vec2(0
	0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, // .500 * MaxSepara
	0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, // tion, 0.0)), 0.0
	0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, // ).x,.textureLod(
	0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, // tex_stereo_depth
	0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, // , u + (yaxis ? v
	0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, // ec2(0.0, 0.666 *
	0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, //  MaxSeparation) 
	0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, // : vec2(0.666 * M
	0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, // axSeparation, 0.
	0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, // 0)), 0.0).x),.te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, // xtureLod(tex_ste
	0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, // reo_depth, u + (
	0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, // yaxis ? vec2(0.0
	0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, // , MaxSeparation)
	0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, //  : vec2( MaxSepa
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, // ration, 0.0)), 0
	0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x70, // .0).x);.float lp
	0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, // arallax = max(0.
	0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, // 0, w_h_height.w 
	0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, // + MaxSeparation 
	0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, // * (1.0 - 1.0 / (
	0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, // 0.5 + lminDepth 
	0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // * (1.0 / (Stereo
	0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, // _MS_ZPD_YAxis.y)
	0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, //  - 0.5))));.retu
	0x72, 0x6e, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, // rn textureLod(te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2b, // x_stereo_fb, u +
	0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, //  (yaxis ? vec2(0
	0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, // .0, -lparallax) 
	0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, // : vec2(lparallax
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, // , 0.0)), 0.0).xy
	0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // z;.}.else.{.cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, // t float rminDept
	0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, // h = min(min(text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // ureLod(tex_stere
	0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, // o_depth, u - (ya
	0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, // xis ? vec2(0.0, 
	0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, // 0.500 * MaxSepar
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, // ation) : vec2(0.
	0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // 500 * MaxSeparat
	0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // ion, 0.0)), 0.0)
	0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, // .x,.textureLod(t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, // ex_stereo_depth,
	0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, //  u - (yaxis ? ve
	0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, // c2(0.0, 0.666 * 
	0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, // MaxSeparation) :
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, //  vec2(0.666 * Ma
	0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, // xSeparation, 0.0
	0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, // )), 0.0).x),.tex
	0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // tureLod(tex_ster
	0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, // eo_depth, u - (y
	0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, // axis ? vec2(0.0,
	0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, //  MaxSeparation) 
	0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, // : vec2( MaxSepar
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, // ation, 0.0)), 0.
	0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x70, 0x61, // 0).x);.float rpa
	0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, // rallax = max(0.0
	0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, // , w_h_height.w +
	0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, //  MaxSeparation *
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, //  (1.0 - 1.0 / (0
	0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, // .5 + rminDepth *
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, //  (1.0 / (Stereo_
	0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, // MS_ZPD_YAxis.y) 
	0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // - 0.5))));.retur
	0x6e, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, // n textureLod(tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, // _stereo_fb, u - 
	0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, // (yaxis ? vec2(0.
	0x30, 0x2c, 0x20, 0x2d, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, // 0, -rparallax) :
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, //  vec2(rparallax,
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, //  0.0)), 0.0).xyz
	0x3b, 0x0a, 0x7d, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, // ;.}.}.void gathe
	0x72, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, // rLeftRightColors
	0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, // (vec2 u, out vec
	0x33, 0x20, 0x6c, 0x63, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, // 3 lcol, out vec3
	0x20, 0x72, 0x63, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x62, //  rcol).{.const b
	0x6f, 0x6f, 0x6c, 0x20, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, // ool yaxis = (Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, // reo_MS_ZPD_YAxis
	0x2e, 0x7a, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, // .z != 0.);.const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, //  float MaxSepara
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, // tion = (Stereo_M
	0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x3b, 0x0a, // S_ZPD_YAxis.x);.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x6d, 0x69, 0x6e, // const float lmin
	0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, // Depth = min(min(
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, // textureLod(tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, // tereo_depth, u +
	0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, //  (yaxis ? vec2(0
	0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, // .0, 0.500 * MaxS
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, // eparation) : vec
	0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // 2(0.500 * MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, // aration, 0.0)), 
	0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, // 0.0).x,.textureL
	0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, // od(tex_stereo_de
	0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, // pth, u + (yaxis 
	0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, // ? vec2(0.0, 0.66
	0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, // 6 * MaxSeparatio
	0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, // n) : vec2(0.666 
	0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, // * MaxSeparation,
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, //  0.0)), 0.0).x),
	0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, // .textureLod(tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, // stereo_depth, u 
	0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // + (yaxis ? vec2(
	0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // 0.0, MaxSeparati
	0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, // on) : vec2( MaxS
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, // eparation, 0.0))
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // , 0.0).x);.float
	0x20, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, //  lparallax = max
	0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, // (0.0, w_h_height
	0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // .w + MaxSeparati
	0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, // on * (1.0 - 1.0 
	0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, // / (0.5 + lminDep
	0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, // th * (1.0 / (Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, // reo_MS_ZPD_YAxis
	0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x6c, // .y) - 0.5))));.l
	0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, // col = textureLod
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, // (tex_stereo_fb, 
	0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, // u + (yaxis ? vec
	0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, // 2(0.0, -lparalla
	0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, // x) : vec2(lparal
	0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // lax, 0.0)), 0.0)
	0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, // .xyz;.const floa
	0x74, 0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, // t rminDepth = mi
	0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, // n(min(textureLod
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, // (tex_stereo_dept
	0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, // h, u - (yaxis ? 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, // vec2(0.0, 0.500 
	0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, // * MaxSeparation)
	0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, //  : vec2(0.500 * 
	0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, // MaxSeparation, 0
	0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, // .0)), 0.0).x,.te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, // xtureLod(tex_ste
	0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, // reo_depth, u - (
	0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, // yaxis ? vec2(0.0
	0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // , 0.666 * MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // aration) : vec2(
	0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, // 0.666 * MaxSepar
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, // ation, 0.0)), 0.
	0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, // 0).x),.textureLo
	0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, // d(tex_stereo_dep
	0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, // th, u - (yaxis ?
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, //  vec2(0.0, MaxSe
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, // paration) : vec2
	0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, // ( MaxSeparation,
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, //  0.0)), 0.0).x);
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, // .float rparallax
	0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, //  = max(0.0, w_h_
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, // height.w + MaxSe
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, // paration * (1.0 
	0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, // - 1.0 / (0.5 + r
	0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, // minDepth * (1.0 
	0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, // / (Stereo_MS_ZPD
	0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, // _YAxis.y) - 0.5)
	0x29, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, // )));.rcol = text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // ureLod(tex_stere
	0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, // o_fb, u - (yaxis
	0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x72, 0x70, //  ? vec2(0.0, -rp
	0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // arallax) : vec2(
	0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, // rparallax, 0.0))
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, // , 0.0).xyz;.}.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // iform mat4 Stere
	0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, // o_LeftMat;.unifo
	0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, // rm mat4 Stereo_R
	0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // ightMat;.uniform
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, //  vec4 Stereo_Lef
	0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, // tLuminance_Gamma
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, // ;.uniform vec4 S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, // tereo_RightLumin
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x3b, 0x0a, 0x76, // ance_DynDesat;.v
	0x6f, 0x69, 0x64, 0x20, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x65, 0x73, 0x61, 0x74, // oid DynamicDesat
	0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, // Anaglyph(const v
	0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // ec3 lCol, const 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, // vec3 rCol, out v
	0x65, 0x63, 0x33, 0x20, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, // ec3 lDesatCol, o
	0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, // ut vec3 rDesatCo
	0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // l).{.const float
	0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, //  left2LeftLum = 
	0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // dot(lCol, Stereo
	0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, // _LeftLuminance_G
	0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, // amma.xyz);.const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, //  float left2Righ
	0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, // tLum = dot(lCol,
	0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, //  Stereo_RightLum
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, // inance_DynDesat.
	0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, // xyz);.const floa
	0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, // t right2LeftLum 
	0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, // = dot(rCol, Ster
	0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, // eo_LeftLuminance
	0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, // _Gamma.xyz);.con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, // st float right2R
	0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, // ightLum = dot(rC
	0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, // ol, Stereo_Right
	0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, // Luminance_DynDes
	0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // at.xyz);.const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x6c, // loat leftLum = l
	0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x6c, 0x65, // eft2LeftLum + le
	0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, // ft2RightLum;.con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // st float rightLu
	0x6d, 0x20, 0x3d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, // m = right2LeftLu
	0x6d, 0x20, 0x2b, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, // m + right2RightL
	0x75, 0x6d, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // um;.const float 
	0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, // leftDesat = Ster
	0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, // eo_RightLuminanc
	0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, // e_DynDesat.w * a
	0x62, 0x73, 0x28, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // bs((left2LeftLum
	0x20, 0x2d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, //  - left2RightLum
	0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, // ) / (leftLum + 0
	0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // .0001));.const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x20, // loat rightDesat 
	0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // = Stereo_RightLu
	0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, // minance_DynDesat
	0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, // .w * abs((right2
	0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, // LeftLum - right2
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x72, 0x69, 0x67, // RightLum) / (rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, 0x29, // htLum + 0.0001))
	0x3b, 0x0a, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, // ;.lDesatCol = mi
	0x78, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, // x(lCol, vec3_spl
	0x61, 0x74, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x66, // at(leftLum), lef
	0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x72, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, // tDesat);.rDesatC
	0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, // ol = mix(rCol, v
	0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, // ec3_splat(rightL
	0x75, 0x6d, 0x29, 0x2c, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, // um), rightDesat)
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x41, // ;.}.vec3 LinearA
	0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // naglyph(const ve
	0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, // c3 lCol, const v
	0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // ec3 rCol).{.cons
	0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x28, // t vec3 color = (
	0x28, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, // ( (vec4(lCol, 1.
	0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, // )) * (Stereo_Lef
	0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x20, 0x28, 0x76, 0x65, 0x63, // tMat) ) + ( (vec
	0x34, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, // 4(rCol, 1.)) * (
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x29, // Stereo_RightMat)
	0x20, 0x29, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, //  )).rgb;.return 
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // color;.}.uniform
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, //  vec4 Stereo_Deg
	0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, // hostGamma;.unifo
	0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, // rm mat4 Stereo_D
	0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3b, 0x0a, 0x76, 0x65, // eghostFilter;.ve
	0x63, 0x33, 0x20, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, // c3 DeghostAnagly
	0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, // ph(const vec3 lC
	0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, // ol, const vec3 r
	0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, // Col).{.const vec
	0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, // 3 color = Linear
	0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, // Anaglyph(lCol, r
	0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, // Col);.return ( (
	0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // pow(color, Stere
	0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x72, // o_DeghostGamma.r
	0x67, 0x62, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x53, 0x74, 0x65, // gb)) * (mat3(Ste
	0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, // reo_DeghostFilte
	0x72, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // r[0].xyz, Stereo
	0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x31, // _DeghostFilter[1
	0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, // ].xyz, Stereo_De
	0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x32, 0x5d, 0x2e, 0x78, // ghostFilter[2].x
	0x79, 0x7a, 0x29, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x6d, // yz)) );.}.void m
	0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, // ain().{.vec3 lCo
	0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x3b, 0x0a, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, // l, rCol;.gatherL
	0x65, 0x66, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x28, 0x76, // eftRightColors(v
	0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2c, 0x20, 0x6c, 0x43, 0x6f, 0x6c, // _texcoord0, lCol
	0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x6c, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, // , rCol);.lCol = 
	0x70, 0x6f, 0x77, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x53, // pow(lCol, vec3(S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, // tereo_LeftLumina
	0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, 0x53, 0x74, 0x65, // nce_Gamma.w, Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, // reo_LeftLuminanc
	0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // e_Gamma.w, Stere
	0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, // o_LeftLuminance_
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x43, 0x6f, 0x6c, 0x20, // Gamma.w));.rCol 
	0x3d, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, // = pow(rCol, vec3
	0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, // (Stereo_LeftLumi
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, 0x53, // nance_Gamma.w, S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, // tereo_LeftLumina
	0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, 0x53, 0x74, 0x65, // nce_Gamma.w, Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, // reo_LeftLuminanc
	0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x29, 0x29, 0x3b, 0x0a, 0x76, 0x65, 0x63, // e_Gamma.w));.vec
	0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, // 3 color = Linear
	0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, // Anaglyph(lCol, r
	0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, // Col);.bgfx_FragC
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x70, 0x6f, 0x77, 0x28, // olor = vec4(pow(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x31, 0x2e, 0x2f, 0x53, // color, vec3(1./S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, // tereo_LeftLumina
	0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, 0x31, 0x2e, 0x2f, // nce_Gamma.w, 1./
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, // Stereo_LeftLumin
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, 0x31, 0x2e, // ance_Gamma.w, 1.
	0x2f, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, // /Stereo_LeftLumi
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x29, 0x29, 0x2c, // nance_Gamma.w)),
	0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x00,                                     //  1.0);.}..
};
static const uint8_t fs_pp_stereo_anaglyph_lin_gamma_nodesat_glsl[11788] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf9, 0x2d, // FSH.o.><.......-
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x34, 0x34, 0x30, 0x0a, 0x6f, // ..#version 440.o
	0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, // ut vec4 bgfx_Fra
	0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, // gColor;.#define 
	0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x62, 0x67, 0x66, // gl_FragColor bgf
	0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x0a, 0x23, 0x64, 0x65, 0x66, // x_FragColor.#def
	0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x20, 0x20, 0x20, // ine texture2D   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x0a, 0x23, //        texture.#
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, // define texture2D
	0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // Lod       textur
	0x65, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, // eLod.#define tex
	0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ture2DGrad      
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, // textureGrad.#def
	0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, // ine texture2DPro
	0x6a, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, // jLod   texturePr
	0x6f, 0x6a, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, // ojLod.#define te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, 0x20, // xture2DProjGrad 
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, //  textureProjGrad
	0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // .#define texture
	0x43, 0x75, 0x62, 0x65, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, // CubeLod     text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, // ureLod.#define t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, // extureCubeGrad  
	0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, //   textureGrad.#d
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x33, 0x44, 0x20, // efine texture3D 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, //          texture
	0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // .#define texture
	0x32, 0x44, 0x4c, 0x6f, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x20, 0x74, 0x65, 0x78, 0x74, // 2DLodOffset text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x0a, 0x23, 0x64, 0x65, // ureLodOffset.#de
	0x66, 0x69, 0x6e, 0x65, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x69, // fine attribute i
	0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, // n.#define varyin
	0x67, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x62, 0x67, 0x66, // g in.#define bgf
	0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, // xShadow2D(_sampl
	0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, // er, _coord)     
	0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, // vec4_splat(textu
	0x72, 0x65, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, // re(_sampler, _co
	0x6f, 0x72, 0x64, 0x29, 0x20, 0x29, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x62, // ord) ).#define b
	0x67, 0x66, 0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x28, // gfxShadow2DProj(
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, // _sampler, _coord
	0x29, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, // ) vec4_splat(tex
	0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // tureProj(_sample
	0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x29, 0x0a, 0x76, 0x61, 0x72, // r, _coord) ).var
	0x79, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, // ying vec2 v_texc
	0x6f, 0x6f, 0x72, 0x64, 0x30, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, // oord0;.vec3 inst
	0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, // Mul(vec3 _vec, m
	0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // at3 _mtx) { retu
	0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, // rn ( (_vec) * (_
	0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, // mtx) ); }.vec3 i
	0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, // nstMul(mat3 _mtx
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, // , vec3 _vec) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, // eturn ( (_mtx) *
	0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, //  (_vec) ); }.vec
	0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, // 4 instMul(vec4 _
	0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, // vec, mat4 _mtx) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, // { return ( (_vec
	0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, // ) * (_mtx) ); }.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, // vec4 instMul(mat
	0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, // 4 _mtx, vec4 _ve
	0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, // c) { return ( (_
	0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, // mtx) * (_vec) );
	0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, 0x70, 0x28, 0x66, 0x6c, 0x6f, //  }.float rcp(flo
	0x61, 0x74, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // at _a) { return 
	0x31, 0x2e, 0x30, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, // 1.0/_a; }.vec2 r
	0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // cp(vec2 _a) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, // turn vec2(1.0)/_
	0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, // a; }.vec3 rcp(ve
	0x63, 0x33, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // c3 _a) { return 
	0x76, 0x65, 0x63, 0x33, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, // vec3(1.0)/_a; }.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x61, // vec4 rcp(vec4 _a
	0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, // ) { return vec4(
	0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, // 1.0)/_a; }.vec2 
	0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, // vec2_splat(float
	0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, //  _x) { return ve
	0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, // c2(_x, _x); }.ve
	0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, // c3 vec3_splat(fl
	0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // oat _x) { return
	0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, //  vec3(_x, _x, _x
	0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, // ); }.vec4 vec4_s
	0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, // plat(float _x) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, //  return vec4(_x,
	0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, //  _x, _x, _x); }.
	0x75, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, // uvec2 uvec2_spla
	0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // t(uint _x) { ret
	0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, // urn uvec2(_x, _x
	0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, // ); }.uvec3 uvec3
	0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, // _splat(uint _x) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, // { return uvec3(_
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, // x, _x, _x); }.uv
	0x65, 0x63, 0x34, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, // ec4 uvec4_splat(
	0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, // uint _x) { retur
	0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, // n uvec4(_x, _x, 
	0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, // _x, _x); }.mat4 
	0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, // mtxFromRows(vec4
	0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, //  _0, vec4 _1, ve
	0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, // c4 _2, vec4 _3).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, // {.return transpo
	0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, // se(mat4(_0, _1, 
	0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, // _2, _3) );.}.mat
	0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, // 4 mtxFromCols(ve
	0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, // c4 _0, vec4 _1, 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, // vec4 _2, vec4 _3
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x28, // ).{.return mat4(
	0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x3b, // _0, _1, _2, _3);
	0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, // .}.mat3 mtxFromR
	0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, // ows(vec3 _0, vec
	0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, // 3 _1, vec3 _2).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, // .return transpos
	0x65, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, // e(mat3(_0, _1, _
	0x32, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, // 2) );.}.mat3 mtx
	0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, // FromCols(vec3 _0
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // , vec3 _1, vec3 
	0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, // _2).{.return mat
	0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x3b, 0x0a, 0x7d, // 3(_0, _1, _2);.}
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, // .uniform vec4 u_
	0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // viewRect;.unifor
	0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x54, 0x65, 0x78, // m vec4 u_viewTex
	0x65, 0x6c, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, // el;.uniform mat4
	0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, //  u_view;.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x3b, //  mat4 u_invView;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, // .uniform mat4 u_
	0x70, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, // proj;.uniform ma
	0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, // t4 u_invProj;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, // iform mat4 u_vie
	0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, // wProj;.uniform m
	0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, // at4 u_invViewPro
	0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, // j;.uniform mat4 
	0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, 0x3b, 0x0a, 0x75, 0x6e, 0x69, // u_model[32];.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, // form mat4 u_mode
	0x6c, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, // lView;.uniform m
	0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x50, // at4 u_modelViewP
	0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, // roj;.uniform vec
	0x34, 0x20, 0x75, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x66, 0x34, 0x3b, 0x0a, 0x66, // 4 u_alphaRef4;.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // loat sqr(const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // loat v).{.return
	0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x73, 0x71, 0x72, //  v*v;.}.vec2 sqr
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x29, 0x0a, 0x7b, // (const vec2 v).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // .return v*v;.}.v
	0x65, 0x63, 0x33, 0x20, 0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // ec3 sqr(const ve
	0x63, 0x33, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // c3 v).{.return v
	0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6d, 0x75, 0x6c, 0x5f, 0x77, // *v;.}.vec3 mul_w
	0x31, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x2c, 0x20, // 1(const vec3 v, 
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x29, 0x0a, 0x7b, 0x0a, // const mat4 m).{.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2e, 0x78, 0x2a, 0x6d, 0x5b, 0x30, 0x5d, 0x2e, // return v.x*m[0].
	0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x79, 0x2a, 0x6d, 0x5b, 0x31, 0x5d, 0x2e, // xyz + (v.y*m[1].
	0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x7a, 0x2a, 0x6d, 0x5b, 0x32, 0x5d, 0x2e, // xyz + (v.z*m[2].
	0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x6d, 0x5b, 0x33, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, // xyz + m[3].xyz))
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, // ;.}.float acos_a
	0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x63, 0x6f, 0x6e, 0x73, // pprox_divPI(cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, // t float v).{.con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, // st float x = abs
	0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, // (v);.if(1. - x <
	0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, // = 0.000061035156
	0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, // 25).return (v >=
	0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x3b, 0x0a, //  0.) ? 0. : 1.;.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, 0x20, // const float res 
	0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, // = ((-0.155972/3.
	0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, // 1415926535897932
	0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, // 384626433832795)
	0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, //  * x + (1.56467/
	0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, // 3.14159265358979
	0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, // 3238462643383279
	0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, // 5) ) * sqrt(1. -
	0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, //  x);.return (v >
	0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x31, 0x2e, // = 0.) ? res : 1.
	0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, //  - res;.}.float 
	0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, // atan2_approx_div
	0x32, 0x50, 0x49, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // 2PI(const float 
	0x79, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, // y, const float x
	0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // ).{.const float 
	0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x79, 0x29, 0x3b, 0x0a, // abs_y = abs(y);.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, // const float abs_
	0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x78, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x61, // x = abs(x);.if(a
	0x62, 0x73, 0x5f, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, // bs_x <= 0.000061
	0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x20, 0x26, 0x26, 0x20, 0x61, 0x62, 0x73, 0x5f, // 03515625 && abs_
	0x79, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, // y <= 0.000061035
	0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x30, 0x2e, // 15625).return 0.
	0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x20, // ;.const float r 
	0x3d, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2d, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, // = (abs_x - abs_y
	0x29, 0x20, 0x2f, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2b, 0x20, 0x61, 0x62, 0x73, // ) / (abs_x + abs
	0x5f, 0x79, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // _y);.const float
	0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, //  angle = ((x < 0
	0x2e, 0x29, 0x20, 0x3f, 0x20, 0x28, 0x33, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x20, 0x3a, 0x20, 0x28, // .) ? (3./8.) : (
	0x31, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x29, 0x0a, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x32, 0x31, 0x31, // 1./8.)).+ (0.211
	0x38, 0x36, 0x38, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, // 868 /(2.*3.14159
	0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, // 2653589793238462
	0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x72, 0x20, // 6433832795) * r 
	0x2a, 0x20, 0x72, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x39, 0x38, 0x37, 0x33, 0x30, 0x35, 0x20, 0x2f, // * r - 0.987305 /
	0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, // (2.*3.1415926535
	0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, // 8979323846264338
	0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, // 32795)) * ((x < 
	0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x72, 0x20, 0x3a, 0x20, 0x72, 0x29, 0x3b, 0x0a, 0x72, // 0.) ? -r : r);.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x79, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, // eturn (y < 0.) ?
	0x20, 0x2d, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3a, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x3b, //  -angle : angle;
	0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x73, 0x69, 0x6e, 0x5f, 0x61, 0x70, // .}.float asin_ap
	0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, // prox_divPI(const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, //  float v).{.cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, // t float x = abs(
	0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, // v);.if(1. - x <=
	0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, //  0.0000610351562
	0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, // 5).return (v >= 
	0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, // 0.) ? 0.5 : -0.5
	0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, // ;.const float re
	0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, // s = ((-0.155972/
	0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, // 3.14159265358979
	0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, // 3238462643383279
	0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, // 5) * x + (1.5646
	0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, // 7/3.141592653589
	0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, // 7932384626433832
	0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, // 795) ) * sqrt(1.
	0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, //  - x);.return (v
	0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x2d, 0x20, //  >= 0.) ? 0.5 - 
	0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x65, 0x73, // res : -0.5 + res
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x61, 0x79, 0x5f, 0x74, 0x6f, 0x5f, // ;.}.vec2 ray_to_
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, // equirectangular_
	0x75, 0x76, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x61, // uv(const vec3 ra
	0x79, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, // y).{.return vec2
	0x28, 0x0a, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, // (.0.5 + atan2_ap
	0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, // prox_div2PI(ray.
	0x79, 0x2c, 0x20, 0x72, 0x61, 0x79, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x61, 0x63, 0x6f, 0x73, 0x5f, // y, ray.x),.acos_
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, // approx_divPI(ray
	0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, // .z));.}.float In
	0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, // vsRGB(const floa
	0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, // t color).{.if (c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, 0x34, 0x35, 0x29, // olor <= 0.04045)
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, // .return color * 
	0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, // (1.0/12.92);.els
	0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, // e.return pow(col
	0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, // or * (1.0/1.055)
	0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, //  + (0.055/1.055)
	0x2c, 0x20, 0x32, 0x2e, 0x34, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // , 2.4);.}.float 
	0x49, 0x6e, 0x76, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // InvRec709(const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, // float color).{.i
	0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x38, // f (color <= 0.08
	0x31, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, // 1).return color 
	0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x34, 0x2e, 0x35, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, // * (1.0/4.5);.els
	0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, // e.return pow(col
	0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, // or * (1.0/1.099)
	0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, //  + (0.099/1.099)
	0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // , 1.0/0.45);.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, // loat InvGamma(co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, // nst float color)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, // .{.return InvsRG
	0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, // B(color);.}.vec3
	0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, //  InvGamma(const 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // vec3 color).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, // turn vec3(InvGam
	0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, // ma(color.x),InvG
	0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x49, 0x6e, // amma(color.y),In
	0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, // vGamma(color.z))
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x54, 0x6f, 0x6e, 0x65, // ;.}.vec3 InvTone
	0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, // Map(const vec3 c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // olor).{.const fl
	0x6f, 0x61, 0x74, 0x20, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x30, 0x2e, // oat inv_2bh = 0.
	0x35, 0x2f, 0x30, 0x2e, 0x32, 0x35, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // 5/0.25;.const fl
	0x6f, 0x61, 0x74, 0x20, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x34, 0x2e, 0x30, 0x2a, 0x30, 0x2e, 0x32, // oat bh = 4.0*0.2
	0x35, 0x20, 0x2d, 0x20, 0x32, 0x2e, 0x30, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // 5 - 2.0;.return 
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2b, 0x20, 0x73, // (color - 1.0 + s
	0x71, 0x72, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2a, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // qrt(color*(color
	0x20, 0x2b, 0x20, 0x62, 0x68, 0x29, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x2a, 0x69, //  + bh) + 1.0))*i
	0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // nv_2bh;.}.float 
	0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // sRGB(const float
	0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, //  f).{.float s;.i
	0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x33, 0x31, 0x33, 0x30, // f (f <= 0.003130
	0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x20, 0x2a, 0x20, 0x66, // 8).s = 12.92 * f
	0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x35, 0x35, // ;.else.s = 1.055
	0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, //  * pow(f, 1.0/2.
	0x34, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // 4) - 0.055;.retu
	0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x52, 0x65, // rn s;.}.float Re
	0x63, 0x37, 0x30, 0x39, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // c709(const float
	0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, //  f).{.float s;.i
	0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, 0x29, 0x0a, 0x73, // f (f <= 0.018).s
	0x20, 0x3d, 0x20, 0x34, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, //  = 4.5 * f;.else
	0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, // .s = 1.099 * pow
	0x28, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x39, // (f, 0.45) - 0.09
	0x39, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // 9;.return s;.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, // loat FBGamma(con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, // st float color).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, // {.return sRGB(co
	0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x47, // lor);.}.vec2 FBG
	0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, // amma(const vec2 
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // color).{.return 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, // vec2(FBGamma(col
	0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, // or.x),FBGamma(co
	0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // lor.y));.}.vec3 
	0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // FBGamma(const ve
	0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, // c3 color).{.retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, // rn vec3(FBGamma(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, // color.x),FBGamma
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, // (color.y),FBGamm
	0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // a(color.z));.}.v
	0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x32, 0x32, 0x28, 0x63, 0x6f, // ec3 FBGamma22(co
	0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, // nst vec3 color).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x70, 0x6f, // {.return vec3(po
	0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, // w(color.x, 1.0/2
	0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x2c, // .2),pow(color.y,
	0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, //  1.0/2.2),pow(co
	0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x29, // lor.z, 1.0/2.2))
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, // ;.}.float FBTone
	0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // Map(const float 
	0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6c, 0x20, 0x2a, 0x20, // l).{.return l * 
	0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, // ((l*0.25 + 1.0) 
	0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // / (l + 1.0));.}.
	0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x63, // vec2 FBToneMap(c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, // onst vec2 color)
	0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, // .{.const float l
	0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, //  = dot(color,vec
	0x32, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, // 2(0.176204+0.010
	0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, // 8109*0.5,0.81298
	0x35, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x29, // 5+0.0108109*0.5)
	0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, // );.return color 
	0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, // * ((l*0.25 + 1.0
	0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, // ) / (l + 1.0));.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, // }.vec3 FBToneMap
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // (const vec3 colo
	0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // r).{.const float
	0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, //  l = dot(color,v
	0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2c, 0x30, 0x2e, 0x38, // ec3(0.176204,0.8
	0x31, 0x32, 0x39, 0x38, 0x35, 0x2c, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x29, // 12985,0.0108109)
	0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, // );.return color 
	0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, // * ((l*0.25 + 1.0
	0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, // ) / (l + 1.0));.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x28, // }.vec4 Additive(
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, // const vec4 cBase
	0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, // , const vec4 cBl
	0x65, 0x6e, 0x64, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // end, const float
	0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, //  percent).{.retu
	0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2b, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // rn cBase + cBlen
	0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // d*percent;.}.vec
	0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // 3 Screen (const 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, // vec3 cBase, cons
	0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, // t vec3 cBlend).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, // .return 1.0 - (1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, // .0 - cBase) * (1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // .0 - cBlend);.}.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6e, // vec4 Screen (con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, // st vec4 cBase, c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, // onst vec4 cBlend
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, // ).{.return 1.0 -
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, //  (1.0 - cBase) *
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, //  (1.0 - cBlend);
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, // .}.vec3 ScreenHD
	0x52, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, // R (const vec3 cB
	0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // ase, const vec3 
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // cBlend).{.return
	0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, //  max(1.0 - (1.0 
	0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, // - cBase) * (1.0 
	0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, // - cBlend), vec3(
	0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // 0.,0.,0.));.}.ve
	0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x63, 0x6f, // c4 ScreenHDR (co
	0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, // nst vec4 cBase, 
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // const vec4 cBlen
	0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, // d).{.return max(
	0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, // 1.0 - (1.0 - cBa
	0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, // se) * (1.0 - cBl
	0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, // end), vec4(0.,0.
	0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, // ,0.,0.));.}.vec4
	0x20, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, //  Multiply (const
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, //  vec4 cBase, con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, // st vec4 cBlend, 
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, // const float perc
	0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, // ent).{.return cB
	0x61, 0x73, 0x65, 0x20, 0x2a, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, // ase * cBlend*per
	0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, // cent;.}.vec4 Ove
	0x72, 0x6c, 0x61, 0x79, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, // rlay (const vec4
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, //  cBase, const ve
	0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, // c4 cBlend).{.vec
	0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, // 4 cNew = step(0.
	0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, // 5, cBase);.cNew 
	0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, // = mix(cBase*cBle
	0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, // nd*2.0, 1.0-2.0*
	0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, // (1.0-cBase)*(1.0
	0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x3b, // -cBlend), cNew);
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, // .return cNew;.}.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x48, 0x44, 0x52, 0x20, // vec4 OverlayHDR 
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, // (const vec4 cBas
	0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // e, const vec4 cB
	0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, // lend).{.vec4 cNe
	0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, // w = step(0.5, cB
	0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, // ase);.cNew = max
	0x28, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, // (mix(cBase*cBlen
	0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, // d*2.0, 1.0-2.0*(
	0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, // 1.0-cBase)*(1.0-
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x2c, 0x20, // cBlend), cNew), 
	0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, // vec4(0.,0.,0.,0.
	0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, // ));.return cNew;
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x73, 0x5f, 0x68, 0x65, 0x6d, 0x69, // .}.vec3 cos_hemi
	0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x63, 0x6f, // sphere_sample(co
	0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, // nst vec2 t).{.co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x68, 0x69, 0x20, 0x3d, 0x20, // nst float phi = 
	0x74, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x28, 0x32, 0x2e, 0x30, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, // t.y * (2.0*3.141
	0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, // 5926535897932384
	0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x3b, 0x0a, 0x63, // 626433832795);.c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, // onst float cosTh
	0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, // eta = sqrt(1.0 -
	0x20, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, //  t.x);.const flo
	0x61, 0x74, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, // at sinTheta = sq
	0x72, 0x74, 0x28, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, // rt(t.x);.float s
	0x70, 0x2c, 0x63, 0x70, 0x3b, 0x0a, 0x73, 0x69, 0x6e, 0x63, 0x6f, 0x73, 0x28, 0x70, 0x68, 0x69, // p,cp;.sincos(phi
	0x2c, 0x73, 0x70, 0x2c, 0x63, 0x70, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // ,sp,cp);.return 
	0x76, 0x65, 0x63, 0x33, 0x28, 0x63, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, // vec3(cp * sinThe
	0x74, 0x61, 0x2c, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x73, 0x70, // ta, cosTheta, sp
	0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, //  * sinTheta);.}.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x76, // vec3 rotate_to_v
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, // ector_upper(cons
	0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, // t vec3 vec, cons
	0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x29, 0x0a, 0x7b, // t vec3 normal).{
	0x0a, 0x69, 0x66, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x3e, 0x20, 0x2d, // .if(normal.y > -
	0x30, 0x2e, 0x39, 0x39, 0x39, 0x39, 0x39, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, // 0.99999).{.const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x28, //  float h = 1.0/(
	0x31, 0x2e, 0x30, 0x2b, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x63, // 1.0+normal.y);.c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x20, 0x3d, 0x20, // onst float hz = 
	0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // h*normal.z;.cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x3d, 0x20, 0x68, 0x7a, // t float hzx = hz
	0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // *normal.x;.retur
	0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, // n vec3(.vec.x * 
	0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, // (normal.y+hz*nor
	0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x29, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, // mal.z) + vec.y *
	0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, //  normal.x - vec.
	0x7a, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, // z * hzx,.vec.y *
	0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, //  normal.y - vec.
	0x78, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, // x * normal.x - v
	0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x2c, // ec.z * normal.z,
	0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, // .vec.y * normal.
	0x7a, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x20, // z - vec.x * hzx 
	0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, // + vec.z * (norma
	0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x2a, 0x6e, // l.y+h*normal.x*n
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, // ormal.x));.}.els
	0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x2d, 0x76, 0x65, 0x63, 0x3b, 0x0a, 0x7d, // e return -vec;.}
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, // .uniform vec4 St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x53, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3b, // ereo_Saturation;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, // .uniform vec4 St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, // ereo_MS_ZPD_YAxi
	0x73, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, // s;.uniform sampl
	0x65, 0x72, 0x32, 0x44, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // er2D tex_stereo_
	0x66, 0x62, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, // fb;.uniform samp
	0x6c, 0x65, 0x72, 0x32, 0x44, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // ler2D tex_stereo
	0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // _depth;.uniform 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, // vec4 w_h_height;
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, // .vec3 gatherEyeC
	0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x62, 0x6f, 0x6f, // olor(vec2 u, boo
	0x6c, 0x20, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // l isLeft).{.cons
	0x74, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3d, 0x20, 0x28, // t bool yaxis = (
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, // Stereo_MS_ZPD_YA
	0x78, 0x69, 0x73, 0x2e, 0x7a, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x3b, 0x0a, 0x63, 0x6f, // xis.z != 0.);.co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // nst float MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, // aration = (Stere
	0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, // o_MS_ZPD_YAxis.x
	0x29, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, // );.if (isLeft).{
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x6d, 0x69, // .const float lmi
	0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, // nDepth = min(min
	0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, // (textureLod(tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, // stereo_depth, u 
	0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // + (yaxis ? vec2(
	0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, // 0.0, 0.500 * Max
	0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, // Separation) : ve
	0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, // c2(0.500 * MaxSe
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, // paration, 0.0)),
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, //  0.0).x,.texture
	0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, // Lod(tex_stereo_d
	0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, // epth, u + (yaxis
	0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, //  ? vec2(0.0, 0.6
	0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // 66 * MaxSeparati
	0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, // on) : vec2(0.666
	0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, //  * MaxSeparation
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, // , 0.0)), 0.0).x)
	0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, // ,.textureLod(tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, // _stereo_depth, u
	0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, //  + (yaxis ? vec2
	0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // (0.0, MaxSeparat
	0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, // ion) : vec2( Max
	0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // Separation, 0.0)
	0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // ), 0.0).x);.floa
	0x74, 0x20, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, // t lparallax = ma
	0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, // x(0.0, w_h_heigh
	0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // t.w + MaxSeparat
	0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, // ion * (1.0 - 1.0
	0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, //  / (0.5 + lminDe
	0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, // pth * (1.0 / (St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, // ereo_MS_ZPD_YAxi
	0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, // s.y) - 0.5))));.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, // return textureLo
	0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, // d(tex_stereo_fb,
	0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, //  u + (yaxis ? ve
	0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, // c2(0.0, -lparall
	0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x6c, 0x70, 0x61, 0x72, 0x61, // ax) : vec2(lpara
	0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, // llax, 0.0)), 0.0
	0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x7b, 0x0a, // ).xyz;.}.else.{.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x6d, 0x69, 0x6e, // const float rmin
	0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, // Depth = min(min(
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, // textureLod(tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, // tereo_depth, u -
	0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, //  (yaxis ? vec2(0
	0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, // .0, 0.500 * MaxS
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, // eparation) : vec
	0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // 2(0.500 * MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, // aration, 0.0)), 
	0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, // 0.0).x,.textureL
	0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, // od(tex_stereo_de
	0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, // pth, u - (yaxis 
	0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, // ? vec2(0.0, 0.66
	0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, // 6 * MaxSeparatio
	0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, // n) : vec2(0.666 
	0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, // * MaxSeparation,
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, //  0.0)), 0.0).x),
	0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, // .textureLod(tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, // stereo_depth, u 
	0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // - (yaxis ? vec2(
	0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // 0.0, MaxSeparati
	0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, // on) : vec2( MaxS
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, // eparation, 0.0))
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // , 0.0).x);.float
	0x20, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, //  rparallax = max
	0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, // (0.0, w_h_height
	0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // .w + MaxSeparati
	0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, // on * (1.0 - 1.0 
	0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, // / (0.5 + rminDep
	0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, // th * (1.0 / (Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, // reo_MS_ZPD_YAxis
	0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x72, // .y) - 0.5))));.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, // eturn textureLod
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, // (tex_stereo_fb, 
	0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, // u - (yaxis ? vec
	0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, // 2(0.0, -rparalla
	0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, // x) : vec2(rparal
	0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // lax, 0.0)), 0.0)
	0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x67, // .xyz;.}.}.void g
	0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, // atherLeftRightCo
	0x6c, 0x6f, 0x72, 0x73, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x6f, 0x75, 0x74, // lors(vec2 u, out
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x63, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, //  vec3 lcol, out 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, // vec3 rcol).{.con
	0x73, 0x74, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3d, 0x20, // st bool yaxis = 
	0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, // (Stereo_MS_ZPD_Y
	0x41, 0x78, 0x69, 0x73, 0x2e, 0x7a, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x3b, 0x0a, 0x63, // Axis.z != 0.);.c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, // onst float MaxSe
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, // paration = (Ster
	0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, // eo_MS_ZPD_YAxis.
	0x78, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // x);.const float 
	0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, // lminDepth = min(
	0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, // min(textureLod(t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, // ex_stereo_depth,
	0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, //  u + (yaxis ? ve
	0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, // c2(0.0, 0.500 * 
	0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, // MaxSeparation) :
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, //  vec2(0.500 * Ma
	0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, // xSeparation, 0.0
	0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, // )), 0.0).x,.text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // ureLod(tex_stere
	0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, // o_depth, u + (ya
	0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, // xis ? vec2(0.0, 
	0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, // 0.666 * MaxSepar
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, // ation) : vec2(0.
	0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // 666 * MaxSeparat
	0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // ion, 0.0)), 0.0)
	0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, // .x),.textureLod(
	0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, // tex_stereo_depth
	0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, // , u + (yaxis ? v
	0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, // ec2(0.0, MaxSepa
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x20, // ration) : vec2( 
	0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, // MaxSeparation, 0
	0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, // .0)), 0.0).x);.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, // loat lparallax =
	0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, //  max(0.0, w_h_he
	0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, // ight.w + MaxSepa
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, // ration * (1.0 - 
	0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x6c, 0x6d, 0x69, // 1.0 / (0.5 + lmi
	0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, // nDepth * (1.0 / 
	0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, // (Stereo_MS_ZPD_Y
	0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, // Axis.y) - 0.5)))
	0x29, 0x3b, 0x0a, 0x6c, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // );.lcol = textur
	0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // eLod(tex_stereo_
	0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, // fb, u + (yaxis ?
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x6c, 0x70, 0x61, 0x72, //  vec2(0.0, -lpar
	0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x6c, 0x70, // allax) : vec2(lp
	0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, // arallax, 0.0)), 
	0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // 0.0).xyz;.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, // float rminDepth 
	0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // = min(min(textur
	0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // eLod(tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, // depth, u - (yaxi
	0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, // s ? vec2(0.0, 0.
	0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // 500 * MaxSeparat
	0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, // ion) : vec2(0.50
	0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, // 0 * MaxSeparatio
	0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, // n, 0.0)), 0.0).x
	0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, // ,.textureLod(tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, // _stereo_depth, u
	0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, //  - (yaxis ? vec2
	0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, // (0.0, 0.666 * Ma
	0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, // xSeparation) : v
	0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, // ec2(0.666 * MaxS
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, // eparation, 0.0))
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, // , 0.0).x),.textu
	0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // reLod(tex_stereo
	0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, // _depth, u - (yax
	0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, // is ? vec2(0.0, M
	0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, // axSeparation) : 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // vec2( MaxSeparat
	0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // ion, 0.0)), 0.0)
	0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x70, 0x61, 0x72, 0x61, // .x);.float rpara
	0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, // llax = max(0.0, 
	0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, // w_h_height.w + M
	0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, // axSeparation * (
	0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, // 1.0 - 1.0 / (0.5
	0x20, 0x2b, 0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, //  + rminDepth * (
	0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, // 1.0 / (Stereo_MS
	0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, // _ZPD_YAxis.y) - 
	0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, // 0.5))));.rcol = 
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, // textureLod(tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, // tereo_fb, u - (y
	0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, // axis ? vec2(0.0,
	0x20, 0x2d, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, //  -rparallax) : v
	0x65, 0x63, 0x32, 0x28, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, // ec2(rparallax, 0
	0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, // .0)), 0.0).xyz;.
	0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, // }.uniform mat4 S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, // tereo_LeftMat;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, // niform mat4 Ster
	0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, // eo_RightMat;.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // form vec4 Stereo
	0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, // _LeftLuminance_G
	0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, // amma;.uniform ve
	0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, // c4 Stereo_RightL
	0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, // uminance_DynDesa
	0x74, 0x3b, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, // t;.void DynamicD
	0x65, 0x73, 0x61, 0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, // esatAnaglyph(con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, // st vec3 lCol, co
	0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, // nst vec3 rCol, o
	0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, // ut vec3 lDesatCo
	0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x44, 0x65, 0x73, // l, out vec3 rDes
	0x61, 0x74, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // atCol).{.const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, // loat left2LeftLu
	0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, // m = dot(lCol, St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, // ereo_LeftLuminan
	0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, // ce_Gamma.xyz);.c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, // onst float left2
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, // RightLum = dot(l
	0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, // Col, Stereo_Righ
	0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, // tLuminance_DynDe
	0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // sat.xyz);.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, // float right2Left
	0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // Lum = dot(rCol, 
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, // Stereo_LeftLumin
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, // ance_Gamma.xyz);
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, // .const float rig
	0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, // ht2RightLum = do
	0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, // t(rCol, Stereo_R
	0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, // ightLuminance_Dy
	0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, // nDesat.xyz);.con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // st float leftLum
	0x20, 0x3d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, //  = left2LeftLum 
	0x2b, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, // + left2RightLum;
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, // .const float rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, // htLum = right2Le
	0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, // ftLum + right2Ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // ghtLum;.const fl
	0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, // oat leftDesat = 
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, // Stereo_RightLumi
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, // nance_DynDesat.w
	0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, //  * abs((left2Lef
	0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, // tLum - left2Righ
	0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // tLum) / (leftLum
	0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, //  + 0.0001));.con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, // st float rightDe
	0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, // sat = Stereo_Rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, // htLuminance_DynD
	0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x72, 0x69, // esat.w * abs((ri
	0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x72, 0x69, // ght2LeftLum - ri
	0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, // ght2RightLum) / 
	0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, // (rightLum + 0.00
	0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, // 01));.lDesatCol 
	0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, // = mix(lCol, vec3
	0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, // _splat(leftLum),
	0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x72, 0x44, 0x65, //  leftDesat);.rDe
	0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x72, 0x43, 0x6f, // satCol = mix(rCo
	0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x72, 0x69, // l, vec3_splat(ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, // ghtLum), rightDe
	0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x4c, 0x69, 0x6e, // sat);.}.vec3 Lin
	0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, // earAnaglyph(cons
	0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, // t vec3 lCol, con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, // st vec3 rCol).{.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // const vec3 color
	0x20, 0x3d, 0x20, 0x28, 0x28, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x6c, 0x43, 0x6f, 0x6c, //  = (( (vec4(lCol
	0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // , 1.)) * (Stereo
	0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x20, // _LeftMat) ) + ( 
	0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, // (vec4(rCol, 1.))
	0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, //  * (Stereo_Right
	0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x72, 0x65, 0x74, // Mat) )).rgb;.ret
	0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, // urn color;.}.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // form vec4 Stereo
	0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, // _DeghostGamma;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, // niform mat4 Ster
	0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, // eo_DeghostFilter
	0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x6e, // ;.vec3 DeghostAn
	0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, // aglyph(const vec
	0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // 3 lCol, const ve
	0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, // c3 rCol).{.const
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, //  vec3 color = Li
	0x6e, 0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, // nearAnaglyph(lCo
	0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // l, rCol);.return
	0x20, 0x28, 0x20, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x53, //  ( (pow(color, S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, // tereo_DeghostGam
	0x6d, 0x61, 0x2e, 0x72, 0x67, 0x62, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x6d, 0x61, 0x74, 0x33, // ma.rgb)) * (mat3
	0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, // (Stereo_DeghostF
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, // ilter[0].xyz, St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, // ereo_DeghostFilt
	0x65, 0x72, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // er[1].xyz, Stere
	0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, // o_DeghostFilter[
	0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, // 2].xyz)) );.}.vo
	0x69, 0x64, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, // id main().{.vec3
	0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x3b, 0x0a, 0x67, 0x61, 0x74, //  lCol, rCol;.gat
	0x68, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, // herLeftRightColo
	0x72, 0x73, 0x28, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2c, 0x20, // rs(v_texcoord0, 
	0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x6c, 0x43, 0x6f, // lCol, rCol);.lCo
	0x6c, 0x20, 0x3d, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, // l = pow(lCol, ve
	0x63, 0x33, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, // c3(Stereo_LeftLu
	0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, // minance_Gamma.w,
	0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, //  Stereo_LeftLumi
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, 0x53, // nance_Gamma.w, S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, // tereo_LeftLumina
	0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x29, 0x29, 0x3b, 0x0a, 0x72, // nce_Gamma.w));.r
	0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // Col = pow(rCol, 
	0x76, 0x65, 0x63, 0x33, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, // vec3(Stereo_Left
	0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, // Luminance_Gamma.
	0x77, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, // w, Stereo_LeftLu
	0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, // minance_Gamma.w,
	0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, //  Stereo_LeftLumi
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x29, 0x29, 0x3b, // nance_Gamma.w));
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, // .vec3 color = Li
	0x6e, 0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, // nearAnaglyph(lCo
	0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, // l, rCol);.gl_Fra
	0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x70, 0x6f, // gColor = vec4(po
	0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x31, 0x2e, // w(color, vec3(1.
	0x2f, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, // /Stereo_LeftLumi
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, 0x31, // nance_Gamma.w, 1
	0x2e, 0x2f, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // ./Stereo_LeftLum
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, // inance_Gamma.w, 
	0x31, 0x2e, 0x2f, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, // 1./Stereo_LeftLu
	0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x29, // minance_Gamma.w)
	0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x00,                         // ), 1.0);.}..
};
static const uint8_t fs_pp_stereo_anaglyph_lin_gamma_nodesat_dx11[2659] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x13, 0x53, // FSH.o.><.......S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, // tereo_MS_ZPD_YAx
	0x69, 0x73, 0x12, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x77, 0x5f, 0x68, // is...........w_h
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, // _height.........
	0x00, 0x0e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, // ..Stereo_LeftMat
	0x14, 0x00, 0x20, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x53, 0x74, 0x65, 0x72, 0x65, // .. ........Stere
	0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x00, 0x60, 0x00, 0x04, 0x00, // o_RightMat..`...
	0x00, 0x00, 0x00, 0x00, 0x1a, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, // .....Stereo_Left
	0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x12, // Luminance_Gamma.
	0x00, 0xa0, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // ..........tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x30, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, // ereo_fb0........
	0x00, 0x10, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, // ..tex_stereo_dep
	0x74, 0x68, 0x30, 0x01, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, // th0..........tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x30, 0x01, 0x00, 0x00, 0x01, 0x00, // _stereo_fb0.....
	0x00, 0x00, 0x00, 0x00, 0x10, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // .....tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x30, 0x01, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5c, // depth0..........
	0x09, 0x00, 0x00, 0x44, 0x58, 0x42, 0x43, 0xd4, 0x85, 0x2e, 0xb9, 0xe1, 0xbe, 0xb2, 0x29, 0xcd, // ...DXBC.......).
	0x27, 0x6a, 0x4d, 0x30, 0x6c, 0x7c, 0x2c, 0x01, 0x00, 0x00, 0x00, 0x5c, 0x09, 0x00, 0x00, 0x03, // 'jM0l|,.........
	0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x84, 0x00, 0x00, 0x00, 0xb8, 0x00, 0x00, 0x00, 0x49, // ...,...........I
	0x53, 0x47, 0x4e, 0x50, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x38, // SGNP...........8
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .......D........
	0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x53, // ...............S
	0x56, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, // V_POSITION.TEXCO
	0x4f, 0x52, 0x44, 0x00, 0xab, 0xab, 0xab, 0x4f, 0x53, 0x47, 0x4e, 0x2c, 0x00, 0x00, 0x00, 0x01, // ORD....OSGN,....
	0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ....... ........
	0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x53, // ...............S
	0x56, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x00, 0xab, 0xab, 0x53, 0x48, 0x45, 0x58, 0x9c, // V_TARGET...SHEX.
	0x08, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x27, 0x02, 0x00, 0x00, 0x6a, 0x08, 0x00, 0x01, 0x59, // ...P...'...j...Y
	0x00, 0x00, 0x04, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x5a, // ...F. .........Z
	0x00, 0x00, 0x03, 0x00, 0x60, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x03, 0x00, // ....`......Z....
	0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x58, 0x18, 0x00, 0x04, 0x00, 0x70, 0x10, 0x00, 0x00, // `......X....p...
	0x00, 0x00, 0x00, 0x55, 0x55, 0x00, 0x00, 0x58, 0x18, 0x00, 0x04, 0x00, 0x70, 0x10, 0x00, 0x01, // ...UU..X....p...
	0x00, 0x00, 0x00, 0x55, 0x55, 0x00, 0x00, 0x62, 0x10, 0x00, 0x03, 0x32, 0x10, 0x10, 0x00, 0x01, // ...UU..b...2....
	0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x03, 0xf2, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, // ...e.... ......h
	0x00, 0x00, 0x02, 0x05, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x08, 0x52, 0x00, 0x10, 0x00, 0x00, // .......6...R....
	0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ....@...........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x0b, 0xa2, 0x00, 0x10, 0x00, 0x00, // .......8........
	0x00, 0x00, 0x00, 0x06, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, // ..... ..........
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0xfa, // @.........?.....
	0x7e, 0x2a, 0x3f, 0x39, 0x00, 0x00, 0x08, 0x12, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2a, // ~*?9...........*
	0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, // . ..........@...
	0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x09, 0xf2, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, // ...7............
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, // .......F........
	0x0b, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf2, 0x00, 0x10, 0x00, 0x02, // ................
	0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x14, 0x10, 0x00, 0x01, // ...F.......F....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0xf2, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, // ...............F
	0x0e, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x14, 0x10, 0x00, 0x01, // ...A.......F....
	0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x22, // ...H.......CU.."
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x16, // .......F........
	0x7e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, // ~.......`.......
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, // @......H.......C
	0x55, 0x15, 0x00, 0x42, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x02, // U..B............
	0x00, 0x00, 0x00, 0x96, 0x7c, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, // ....|.......`...
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x07, 0x22, // ....@......3..."
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, // .......*........
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x06, 0x22, 0x00, 0x10, 0x00, 0x02, // .......6..."....
	0x00, 0x00, 0x00, 0x0a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, // ..... .........6
	0x00, 0x00, 0x08, 0x52, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, // ...R........@...
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, // ...............7
	0x00, 0x00, 0x09, 0xc2, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x00, 0x10, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x06, 0x04, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x56, 0x01, 0x10, 0x00, 0x02, // ...........V....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x32, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0xe6, // .......2........
	0x0a, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x10, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, // .......F........
	0x00, 0x00, 0x08, 0xc2, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0xa6, 0x0e, 0x10, 0x80, 0x41, // ...............A
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x14, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x48, // ...............H
	0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x42, 0x00, 0x10, 0x00, 0x01, // .......CU..B....
	0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x96, 0x7c, 0x10, 0x00, 0x01, // ............|...
	0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, // ....`.......@...
	0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x82, // ...H.......CU...
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x96, // .......F........
	0x73, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, // s.......`.......
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x07, 0x22, 0x00, 0x10, 0x00, 0x01, // @......3..."....
	0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, // ...:............
	0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x0b, 0x82, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, // ................
	0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, // @.....?...?...?.
	0x00, 0x80, 0x3f, 0x1a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ..?.. ..........
	0x00, 0x00, 0x07, 0x82, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x01, // ...........:....
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbf, 0x32, 0x00, 0x00, 0x09, 0x22, // ....@......2..."
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3a, // ...............:
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x0e, // ........@.....?.
	0x00, 0x00, 0x0a, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, // ..."........@...
	0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x1a, // ..?...?...?...?.
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x22, 0x00, 0x10, 0x00, 0x01, // ..........."....
	0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, // .......A........
	0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x32, 0x00, 0x00, 0x0b, 0x22, 0x00, 0x10, 0x00, 0x01, // @.....?2..."....
	0x00, 0x00, 0x00, 0x0a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, // ..... ..........
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, // .......:. ......
	0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x1a, // ...4............
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, // ........@......6
	0x00, 0x00, 0x06, 0x82, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x80, 0x41, // ...............A
	0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x08, 0x62, 0x00, 0x10, 0x00, 0x03, // .......6...b....
	0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ....@...........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x09, 0x32, 0x00, 0x10, 0x00, 0x02, // .......7...2....
	0x00, 0x00, 0x00, 0x06, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x02, // ................
	0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x32, // ...F...........2
	0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, // .......F.......F
	0x10, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, // .......H.......C
	0x55, 0x15, 0x00, 0x72, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x02, // U..r.......F....
	0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x00, // ...F~.......`...
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x05, 0x72, // ....@....../...r
	0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x38, // .......F.......8
	0x00, 0x00, 0x08, 0x72, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x02, // ...r.......F....
	0x00, 0x00, 0x00, 0xf6, 0x8f, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x19, // ..... ..........
	0x00, 0x00, 0x05, 0x72, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x02, // ...r.......F....
	0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x82, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, // ...6............
	0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x11, 0x00, 0x00, 0x08, 0x12, 0x00, 0x10, 0x00, 0x04, // @.....?.........
	0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, // ...F.......F. ..
	0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x08, 0x22, 0x00, 0x10, 0x00, 0x04, // ..........."....
	0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, // ...F.......F. ..
	0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x08, 0x42, 0x00, 0x10, 0x00, 0x04, // ...........B....
	0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, // ...F.......F. ..
	0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, // .......H.......C
	0x55, 0x15, 0x00, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x00, // U..........F....
	0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, // ...F~.......`...
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, // ....@......H....
	0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x22, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe6, // ...CU.."........
	0x0a, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x7e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, // ........~.......
	0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, // `.......@......3
	0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x07, 0x12, // ...........3....
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, // .......*........
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x09, 0x12, 0x00, 0x10, 0x00, 0x00, // .......2........
	0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x01, // ...........:....
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x0e, 0x00, 0x00, 0x0a, 0x12, // ....@.....?.....
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, // ........@.....?.
	0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x0a, 0x00, 0x10, 0x00, 0x00, // ..?...?...?.....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, // ................
	0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, // ...A........@...
	0x00, 0x80, 0x3f, 0x32, 0x00, 0x00, 0x0b, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, // ..?2............
	0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, // . ..............
	0x00, 0x00, 0x00, 0x3a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x34, // ...:. .........4
	0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x06, 0x82, // ....@......6....
	0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x00, // ...........A....
	0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x22, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, // ...6..."........
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x09, 0x32, 0x00, 0x10, 0x00, 0x00, // @......7...2....
	0x00, 0x00, 0x00, 0x06, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x03, // ................
	0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x32, // ...F...........2
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x00, // .......F...A....
	0x00, 0x00, 0x00, 0x46, 0x10, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, // ...F.......H....
	0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, // ...CU..r.......F
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .......F~.......
	0x60, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2f, // `.......@....../
	0x00, 0x00, 0x05, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, // ...r.......F....
	0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x08, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, // ...8...r.......F
	0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf6, 0x8f, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, // ......... ......
	0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x05, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, // .......r.......F
	0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x82, 0x00, 0x10, 0x00, 0x00, // .......6........
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x11, 0x00, 0x00, 0x08, 0x12, // ....@.....?.....
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, // .......F.......F
	0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x08, 0x22, // . ............."
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, // .......F.......F
	0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x08, 0x42, // . .............B
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, // .......F.......F
	0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x72, // . .............r
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, // .......F.......F
	0x02, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x05, 0x72, 0x00, 0x10, 0x00, 0x00, // ......./...r....
	0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x0b, 0x82, // ...F............
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, // ........@.....?.
	0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x3a, 0x80, 0x20, 0x00, 0x00, // ..?...?...?:. ..
	0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x07, 0x72, 0x00, 0x10, 0x00, 0x00, // .......8...r....
	0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf6, 0x0f, 0x10, 0x00, 0x00, // ...F............
	0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x05, 0x72, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, // .......r ......F
	0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x82, 0x20, 0x10, 0x00, 0x00, // .......6.... ...
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x3e, 0x00, 0x00, 0x01, 0x00, // ....@.....?>....
	0x00, 0xb0, 0x00,                                                                               // ...
};
static const uint8_t fs_pp_stereo_anaglyph_lin_gamma_nodesat_spv[5188] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x13, 0x53, // FSH.o.><.......S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, // tereo_MS_ZPD_YAx
	0x69, 0x73, 0x12, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x77, 0x5f, 0x68, // is...........w_h
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x01, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, // _height.........
	0x00, 0x0e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, // ..Stereo_LeftMat
	0x14, 0x01, 0x20, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x53, 0x74, 0x65, 0x72, 0x65, // .. ........Stere
	0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x01, 0x60, 0x00, 0x04, 0x00, // o_RightMat..`...
	0x00, 0x00, 0x00, 0x00, 0x1a, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, // .....Stereo_Left
	0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x12, // Luminance_Gamma.
	0x01, 0xa0, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // ..........tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x30, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x02, 0x22, // ereo_fb0......."
	0x00, 0x10, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, // ..tex_stereo_dep
	0x74, 0x68, 0x30, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x02, 0x22, 0x00, 0x70, 0x13, 0x00, 0x00, // th0.......".p...
	0x03, 0x02, 0x23, 0x07, 0x00, 0x00, 0x01, 0x00, 0x0b, 0x00, 0x08, 0x00, 0xd2, 0x02, 0x00, 0x00, // ..#.............
	0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x06, 0x00, // ................
	0x01, 0x00, 0x00, 0x00, 0x47, 0x4c, 0x53, 0x4c, 0x2e, 0x73, 0x74, 0x64, 0x2e, 0x34, 0x35, 0x30, // ....GLSL.std.450
	0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // ................
	0x0f, 0x00, 0x07, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, // ............main
	0x00, 0x00, 0x00, 0x00, 0x63, 0x01, 0x00, 0x00, 0x6e, 0x01, 0x00, 0x00, 0x10, 0x00, 0x03, 0x00, // ....c...n.......
	0x04, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x03, 0x00, 0x03, 0x00, 0x05, 0x00, 0x00, 0x00, // ................
	0xf4, 0x01, 0x00, 0x00, 0x05, 0x00, 0x04, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, // ............main
	0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x08, 0x00, 0x30, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, // ........0...tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // stereo_fbSampler
	0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x08, 0x00, 0x33, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, // ........3...tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // stereo_fbTexture
	0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x08, 0x00, 0x37, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, // ........7...tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, // stereo_depthSamp
	0x6c, 0x65, 0x72, 0x00, 0x05, 0x00, 0x08, 0x00, 0x39, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, // ler.....9...tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x54, 0x65, 0x78, 0x74, // stereo_depthText
	0x75, 0x72, 0x65, 0x00, 0x05, 0x00, 0x06, 0x00, 0x57, 0x00, 0x00, 0x00, 0x55, 0x6e, 0x69, 0x66, // ure.....W...Unif
	0x6f, 0x72, 0x6d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x08, 0x00, // ormBlock........
	0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, // W.......Stereo_M
	0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x00, 0x06, 0x00, 0x06, 0x00, // S_ZPD_YAxis.....
	0x57, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, // W.......w_h_heig
	0x68, 0x74, 0x00, 0x00, 0x06, 0x00, 0x07, 0x00, 0x57, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // ht......W.......
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x00, 0x00, // Stereo_LeftMat..
	0x06, 0x00, 0x07, 0x00, 0x57, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x53, 0x74, 0x65, 0x72, // ....W.......Ster
	0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x00, 0x06, 0x00, 0x0a, 0x00, // eo_RightMat.....
	0x57, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, // W.......Stereo_L
	0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, // eftLuminance_Gam
	0x6d, 0x61, 0x00, 0x00, 0x05, 0x00, 0x03, 0x00, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ma......Y.......
	0x05, 0x00, 0x05, 0x00, 0x63, 0x01, 0x00, 0x00, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, // ....c...v_texcoo
	0x72, 0x64, 0x30, 0x00, 0x05, 0x00, 0x06, 0x00, 0x6e, 0x01, 0x00, 0x00, 0x62, 0x67, 0x66, 0x78, // rd0.....n...bgfx
	0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, // _FragData0..G...
	0x30, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, // 0...".......G...
	0x30, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, // 0...!.......G...
	0x33, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, // 3...".......G...
	0x33, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, // 3...!.......G...
	0x37, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, // 7...".......G...
	0x37, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, // 7...!.......G...
	0x39, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, // 9...".......G...
	0x39, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, // 9...!.......H...
	0x57, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // W.......#.......
	0x48, 0x00, 0x05, 0x00, 0x57, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, // H...W.......#...
	0x10, 0x00, 0x00, 0x00, 0x48, 0x00, 0x04, 0x00, 0x57, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // ....H...W.......
	0x04, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0x57, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // ....H...W.......
	0x23, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0x57, 0x00, 0x00, 0x00, // #... ...H...W...
	0x02, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x48, 0x00, 0x04, 0x00, // ............H...
	0x57, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, // W...........H...
	0x57, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, // W.......#...`...
	0x48, 0x00, 0x05, 0x00, 0x57, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, // H...W...........
	0x10, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0x57, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, // ....H...W.......
	0x23, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x47, 0x00, 0x03, 0x00, 0x57, 0x00, 0x00, 0x00, // #.......G...W...
	0x02, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x59, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, // ....G...Y..."...
	0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x59, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, // ....G...Y...!...
	0x01, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x63, 0x01, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, // ....G...c.......
	0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x6e, 0x01, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, // ....G...n.......
	0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x21, 0x00, 0x03, 0x00, // ............!...
	0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x02, 0x00, 0x06, 0x00, 0x00, 0x00, // ................
	0x16, 0x00, 0x03, 0x00, 0x07, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x19, 0x00, 0x09, 0x00, // ........ .......
	0x08, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x17, 0x00, 0x04, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // ................
	0x17, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, // ................
	0x17, 0x00, 0x04, 0x00, 0x19, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, // ................
	0x20, 0x00, 0x04, 0x00, 0x2f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, //  .../...........
	0x3b, 0x00, 0x04, 0x00, 0x2f, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ;.../...0.......
	0x20, 0x00, 0x04, 0x00, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, //  ...2...........
	0x3b, 0x00, 0x04, 0x00, 0x32, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ;...2...3.......
	0x3b, 0x00, 0x04, 0x00, 0x2f, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ;.../...7.......
	0x3b, 0x00, 0x04, 0x00, 0x32, 0x00, 0x00, 0x00, 0x39, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ;...2...9.......
	0x15, 0x00, 0x04, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // ....<... .......
	0x2b, 0x00, 0x04, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // +...<...=.......
	0x2b, 0x00, 0x04, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // +...<...A.......
	0x1b, 0x00, 0x03, 0x00, 0x45, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x14, 0x00, 0x02, 0x00, // ....E...........
	0x53, 0x00, 0x00, 0x00, 0x18, 0x00, 0x04, 0x00, 0x56, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, // S.......V.......
	0x04, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x07, 0x00, 0x57, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, // ........W.......
	0x0e, 0x00, 0x00, 0x00, 0x56, 0x00, 0x00, 0x00, 0x56, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, // ....V...V.......
	0x20, 0x00, 0x04, 0x00, 0x58, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, //  ...X.......W...
	0x3b, 0x00, 0x04, 0x00, 0x58, 0x00, 0x00, 0x00, 0x59, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // ;...X...Y.......
	0x15, 0x00, 0x04, 0x00, 0x5a, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ....Z... .......
	0x2b, 0x00, 0x04, 0x00, 0x5a, 0x00, 0x00, 0x00, 0x5b, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // +...Z...[.......
	0x20, 0x00, 0x04, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, //  ...............
	0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // +......._.......
	0x2b, 0x00, 0x04, 0x00, 0x5a, 0x00, 0x00, 0x00, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // +...Z...b.......
	0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, // +.......h......?
	0x17, 0x00, 0x04, 0x00, 0x6f, 0x00, 0x00, 0x00, 0x53, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // ....o...S.......
	0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x7b, 0x00, 0x00, 0x00, 0xfa, 0x7e, 0x2a, 0x3f, // +.......{....~*?
	0x2b, 0x00, 0x04, 0x00, 0x5a, 0x00, 0x00, 0x00, 0x9d, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, // +...Z...........
	0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0xa1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, // +..............?
	0x2b, 0x00, 0x04, 0x00, 0x5a, 0x00, 0x00, 0x00, 0xa3, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // +...Z...........
	0x2b, 0x00, 0x04, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x14, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // +...<...........
	0x20, 0x00, 0x04, 0x00, 0x15, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x56, 0x00, 0x00, 0x00, //  ...........V...
	0x2b, 0x00, 0x04, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x1d, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, // +...<...........
	0x2b, 0x00, 0x04, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x37, 0x01, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, // +...<...7.......
	0x20, 0x00, 0x04, 0x00, 0x62, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, //  ...b...........
	0x3b, 0x00, 0x04, 0x00, 0x62, 0x01, 0x00, 0x00, 0x63, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // ;...b...c.......
	0x20, 0x00, 0x04, 0x00, 0x6d, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, //  ...m...........
	0x3b, 0x00, 0x04, 0x00, 0x6d, 0x01, 0x00, 0x00, 0x6e, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, // ;...m...n.......
	0x36, 0x00, 0x05, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // 6...............
	0x03, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x05, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, // ............=...
	0x06, 0x00, 0x00, 0x00, 0x31, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, // ....1...0...=...
	0x08, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, // ....4...3...=...
	0x06, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, // ....8...7...=...
	0x08, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x00, 0x00, 0x39, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, // ....:...9...=...
	0x0b, 0x00, 0x00, 0x00, 0x64, 0x01, 0x00, 0x00, 0x63, 0x01, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, // ....d...c...A...
	0x5c, 0x00, 0x00, 0x00, 0xde, 0x01, 0x00, 0x00, 0x59, 0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00, // ........Y...A...
	0x5b, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0xdf, 0x01, 0x00, 0x00, // [...=...........
	0xde, 0x01, 0x00, 0x00, 0xb7, 0x00, 0x05, 0x00, 0x53, 0x00, 0x00, 0x00, 0xe0, 0x01, 0x00, 0x00, // ........S.......
	0xdf, 0x01, 0x00, 0x00, 0x5f, 0x00, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x5c, 0x00, 0x00, 0x00, // ...._...A.......
	0xe1, 0x01, 0x00, 0x00, 0x59, 0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00, 0x62, 0x00, 0x00, 0x00, // ....Y...A...b...
	0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0xe2, 0x01, 0x00, 0x00, 0xe1, 0x01, 0x00, 0x00, // =...............
	0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xe6, 0x01, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, // ............h...
	0xe2, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xe7, 0x01, 0x00, 0x00, // ....P...........
	0x5f, 0x00, 0x00, 0x00, 0xe6, 0x01, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // _...............
	0xe9, 0x01, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0xe2, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, // ....h.......P...
	0x0b, 0x00, 0x00, 0x00, 0xea, 0x01, 0x00, 0x00, 0xe9, 0x01, 0x00, 0x00, 0x5f, 0x00, 0x00, 0x00, // ............_...
	0x50, 0x00, 0x05, 0x00, 0x6f, 0x00, 0x00, 0x00, 0xeb, 0x01, 0x00, 0x00, 0xe0, 0x01, 0x00, 0x00, // P...o...........
	0xe0, 0x01, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xec, 0x01, 0x00, 0x00, // ................
	0xeb, 0x01, 0x00, 0x00, 0xe7, 0x01, 0x00, 0x00, 0xea, 0x01, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, // ................
	0x0b, 0x00, 0x00, 0x00, 0xed, 0x01, 0x00, 0x00, 0x64, 0x01, 0x00, 0x00, 0xec, 0x01, 0x00, 0x00, // ........d.......
	0x56, 0x00, 0x05, 0x00, 0x45, 0x00, 0x00, 0x00, 0x75, 0x02, 0x00, 0x00, 0x3a, 0x00, 0x00, 0x00, // V...E...u...:...
	0x38, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x78, 0x02, 0x00, 0x00, // 8...X.......x...
	0x75, 0x02, 0x00, 0x00, 0xed, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x5f, 0x00, 0x00, 0x00, // u..........._...
	0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xf0, 0x01, 0x00, 0x00, 0x78, 0x02, 0x00, 0x00, // Q...........x...
	0x00, 0x00, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xf4, 0x01, 0x00, 0x00, // ................
	0x7b, 0x00, 0x00, 0x00, 0xe2, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, // {.......P.......
	0xf5, 0x01, 0x00, 0x00, 0x5f, 0x00, 0x00, 0x00, 0xf4, 0x01, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, // ...._...........
	0x07, 0x00, 0x00, 0x00, 0xf7, 0x01, 0x00, 0x00, 0x7b, 0x00, 0x00, 0x00, 0xe2, 0x01, 0x00, 0x00, // ........{.......
	0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xf8, 0x01, 0x00, 0x00, 0xf7, 0x01, 0x00, 0x00, // P...............
	0x5f, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x6f, 0x00, 0x00, 0x00, 0xf9, 0x01, 0x00, 0x00, // _...P...o.......
	0xe0, 0x01, 0x00, 0x00, 0xe0, 0x01, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, // ................
	0xfa, 0x01, 0x00, 0x00, 0xf9, 0x01, 0x00, 0x00, 0xf5, 0x01, 0x00, 0x00, 0xf8, 0x01, 0x00, 0x00, // ................
	0x81, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xfb, 0x01, 0x00, 0x00, 0x64, 0x01, 0x00, 0x00, // ............d...
	0xfa, 0x01, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, 0x45, 0x00, 0x00, 0x00, 0x7f, 0x02, 0x00, 0x00, // ....V...E.......
	0x3a, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, // :...8...X.......
	0x82, 0x02, 0x00, 0x00, 0x7f, 0x02, 0x00, 0x00, 0xfb, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // ................
	0x5f, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xfe, 0x01, 0x00, 0x00, // _...Q...........
	0x82, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, // ................
	0xff, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0xf0, 0x01, 0x00, 0x00, // ........%.......
	0xfe, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x03, 0x02, 0x00, 0x00, // ....P...........
	0x5f, 0x00, 0x00, 0x00, 0xe2, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, // _.......P.......
	0x05, 0x02, 0x00, 0x00, 0xe2, 0x01, 0x00, 0x00, 0x5f, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, // ........_...P...
	0x6f, 0x00, 0x00, 0x00, 0x06, 0x02, 0x00, 0x00, 0xe0, 0x01, 0x00, 0x00, 0xe0, 0x01, 0x00, 0x00, // o...............
	0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x07, 0x02, 0x00, 0x00, 0x06, 0x02, 0x00, 0x00, // ................
	0x03, 0x02, 0x00, 0x00, 0x05, 0x02, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, // ................
	0x08, 0x02, 0x00, 0x00, 0x64, 0x01, 0x00, 0x00, 0x07, 0x02, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, // ....d.......V...
	0x45, 0x00, 0x00, 0x00, 0x89, 0x02, 0x00, 0x00, 0x3a, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, // E.......:...8...
	0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x8c, 0x02, 0x00, 0x00, 0x89, 0x02, 0x00, 0x00, // X...............
	0x08, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x5f, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, // ........_...Q...
	0x07, 0x00, 0x00, 0x00, 0x0b, 0x02, 0x00, 0x00, 0x8c, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x0c, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // ................
	0x25, 0x00, 0x00, 0x00, 0xff, 0x01, 0x00, 0x00, 0x0b, 0x02, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, // %...........A...
	0x5c, 0x00, 0x00, 0x00, 0x0d, 0x02, 0x00, 0x00, 0x59, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x00, 0x00, // ........Y...=...
	0x9d, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x0e, 0x02, 0x00, 0x00, // ....=...........
	0x0d, 0x02, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x11, 0x02, 0x00, 0x00, // ....A...........
	0x59, 0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00, 0xa3, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, // Y...A.......=...
	0x07, 0x00, 0x00, 0x00, 0x12, 0x02, 0x00, 0x00, 0x11, 0x02, 0x00, 0x00, 0x88, 0x00, 0x05, 0x00, // ................
	0x07, 0x00, 0x00, 0x00, 0x13, 0x02, 0x00, 0x00, 0xa1, 0x00, 0x00, 0x00, 0x12, 0x02, 0x00, 0x00, // ................
	0x83, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x14, 0x02, 0x00, 0x00, 0x13, 0x02, 0x00, 0x00, // ................
	0x68, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x07, 0x00, 0x00, 0x00, 0x16, 0x02, 0x00, 0x00, // h...............
	0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x0c, 0x02, 0x00, 0x00, 0x14, 0x02, 0x00, 0x00, // ....2...........
	0x68, 0x00, 0x00, 0x00, 0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x17, 0x02, 0x00, 0x00, // h...............
	0xa1, 0x00, 0x00, 0x00, 0x16, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // ................
	0x18, 0x02, 0x00, 0x00, 0xa1, 0x00, 0x00, 0x00, 0x17, 0x02, 0x00, 0x00, 0x0c, 0x00, 0x08, 0x00, // ................
	0x07, 0x00, 0x00, 0x00, 0x1a, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, // ............2...
	0xe2, 0x01, 0x00, 0x00, 0x18, 0x02, 0x00, 0x00, 0x0e, 0x02, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, // ................
	0x07, 0x00, 0x00, 0x00, 0x1b, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, // ............(...
	0x5f, 0x00, 0x00, 0x00, 0x1a, 0x02, 0x00, 0x00, 0x7f, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, // _...............
	0x1f, 0x02, 0x00, 0x00, 0x1b, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, // ........P.......
	0x20, 0x02, 0x00, 0x00, 0x5f, 0x00, 0x00, 0x00, 0x1f, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, //  ..._.......P...
	0x0b, 0x00, 0x00, 0x00, 0x22, 0x02, 0x00, 0x00, 0x1b, 0x02, 0x00, 0x00, 0x5f, 0x00, 0x00, 0x00, // ...."......._...
	0x50, 0x00, 0x05, 0x00, 0x6f, 0x00, 0x00, 0x00, 0x23, 0x02, 0x00, 0x00, 0xe0, 0x01, 0x00, 0x00, // P...o...#.......
	0xe0, 0x01, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x24, 0x02, 0x00, 0x00, // ............$...
	0x23, 0x02, 0x00, 0x00, 0x20, 0x02, 0x00, 0x00, 0x22, 0x02, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, // #... ...".......
	0x0b, 0x00, 0x00, 0x00, 0x25, 0x02, 0x00, 0x00, 0x64, 0x01, 0x00, 0x00, 0x24, 0x02, 0x00, 0x00, // ....%...d...$...
	0x56, 0x00, 0x05, 0x00, 0x45, 0x00, 0x00, 0x00, 0x93, 0x02, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, // V...E.......4...
	0x31, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x96, 0x02, 0x00, 0x00, // 1...X...........
	0x93, 0x02, 0x00, 0x00, 0x25, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x5f, 0x00, 0x00, 0x00, // ....%......._...
	0x4f, 0x00, 0x08, 0x00, 0x19, 0x00, 0x00, 0x00, 0x28, 0x02, 0x00, 0x00, 0x96, 0x02, 0x00, 0x00, // O.......(.......
	0x96, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // ................
	0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x2c, 0x02, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, // ........,...h...
	0xe2, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x2d, 0x02, 0x00, 0x00, // ....P.......-...
	0x5f, 0x00, 0x00, 0x00, 0x2c, 0x02, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // _...,...........
	0x2f, 0x02, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0xe2, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, // /...h.......P...
	0x0b, 0x00, 0x00, 0x00, 0x30, 0x02, 0x00, 0x00, 0x2f, 0x02, 0x00, 0x00, 0x5f, 0x00, 0x00, 0x00, // ....0.../..._...
	0x50, 0x00, 0x05, 0x00, 0x6f, 0x00, 0x00, 0x00, 0x31, 0x02, 0x00, 0x00, 0xe0, 0x01, 0x00, 0x00, // P...o...1.......
	0xe0, 0x01, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x32, 0x02, 0x00, 0x00, // ............2...
	0x31, 0x02, 0x00, 0x00, 0x2d, 0x02, 0x00, 0x00, 0x30, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, // 1...-...0.......
	0x0b, 0x00, 0x00, 0x00, 0x33, 0x02, 0x00, 0x00, 0x64, 0x01, 0x00, 0x00, 0x32, 0x02, 0x00, 0x00, // ....3...d...2...
	0x56, 0x00, 0x05, 0x00, 0x45, 0x00, 0x00, 0x00, 0x9d, 0x02, 0x00, 0x00, 0x3a, 0x00, 0x00, 0x00, // V...E.......:...
	0x38, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xa0, 0x02, 0x00, 0x00, // 8...X...........
	0x9d, 0x02, 0x00, 0x00, 0x33, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x5f, 0x00, 0x00, 0x00, // ....3......._...
	0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x36, 0x02, 0x00, 0x00, 0xa0, 0x02, 0x00, 0x00, // Q.......6.......
	0x00, 0x00, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x3a, 0x02, 0x00, 0x00, // ............:...
	0x7b, 0x00, 0x00, 0x00, 0xe2, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, // {.......P.......
	0x3b, 0x02, 0x00, 0x00, 0x5f, 0x00, 0x00, 0x00, 0x3a, 0x02, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, // ;..._...:.......
	0x07, 0x00, 0x00, 0x00, 0x3d, 0x02, 0x00, 0x00, 0x7b, 0x00, 0x00, 0x00, 0xe2, 0x01, 0x00, 0x00, // ....=...{.......
	0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x3e, 0x02, 0x00, 0x00, 0x3d, 0x02, 0x00, 0x00, // P.......>...=...
	0x5f, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x6f, 0x00, 0x00, 0x00, 0x3f, 0x02, 0x00, 0x00, // _...P...o...?...
	0xe0, 0x01, 0x00, 0x00, 0xe0, 0x01, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, // ................
	0x40, 0x02, 0x00, 0x00, 0x3f, 0x02, 0x00, 0x00, 0x3b, 0x02, 0x00, 0x00, 0x3e, 0x02, 0x00, 0x00, // @...?...;...>...
	0x83, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x41, 0x02, 0x00, 0x00, 0x64, 0x01, 0x00, 0x00, // ........A...d...
	0x40, 0x02, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, 0x45, 0x00, 0x00, 0x00, 0xa7, 0x02, 0x00, 0x00, // @...V...E.......
	0x3a, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, // :...8...X.......
	0xaa, 0x02, 0x00, 0x00, 0xa7, 0x02, 0x00, 0x00, 0x41, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // ........A.......
	0x5f, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x44, 0x02, 0x00, 0x00, // _...Q.......D...
	0xaa, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, // ................
	0x45, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x36, 0x02, 0x00, 0x00, // E.......%...6...
	0x44, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x49, 0x02, 0x00, 0x00, // D...P.......I...
	0x5f, 0x00, 0x00, 0x00, 0xe2, 0x01, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, // _.......P.......
	0x4b, 0x02, 0x00, 0x00, 0xe2, 0x01, 0x00, 0x00, 0x5f, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, // K......._...P...
	0x6f, 0x00, 0x00, 0x00, 0x4c, 0x02, 0x00, 0x00, 0xe0, 0x01, 0x00, 0x00, 0xe0, 0x01, 0x00, 0x00, // o...L...........
	0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x4d, 0x02, 0x00, 0x00, 0x4c, 0x02, 0x00, 0x00, // ........M...L...
	0x49, 0x02, 0x00, 0x00, 0x4b, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, // I...K...........
	0x4e, 0x02, 0x00, 0x00, 0x64, 0x01, 0x00, 0x00, 0x4d, 0x02, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, // N...d...M...V...
	0x45, 0x00, 0x00, 0x00, 0xb1, 0x02, 0x00, 0x00, 0x3a, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, // E.......:...8...
	0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xb4, 0x02, 0x00, 0x00, 0xb1, 0x02, 0x00, 0x00, // X...............
	0x4e, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x5f, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, // N......._...Q...
	0x07, 0x00, 0x00, 0x00, 0x51, 0x02, 0x00, 0x00, 0xb4, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ....Q...........
	0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x52, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // ........R.......
	0x25, 0x00, 0x00, 0x00, 0x45, 0x02, 0x00, 0x00, 0x51, 0x02, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, // %...E...Q...A...
	0x5c, 0x00, 0x00, 0x00, 0x53, 0x02, 0x00, 0x00, 0x59, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x00, 0x00, // ....S...Y...=...
	0x9d, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x54, 0x02, 0x00, 0x00, // ....=.......T...
	0x53, 0x02, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x57, 0x02, 0x00, 0x00, // S...A.......W...
	0x59, 0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00, 0xa3, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, // Y...A.......=...
	0x07, 0x00, 0x00, 0x00, 0x58, 0x02, 0x00, 0x00, 0x57, 0x02, 0x00, 0x00, 0x88, 0x00, 0x05, 0x00, // ....X...W.......
	0x07, 0x00, 0x00, 0x00, 0x59, 0x02, 0x00, 0x00, 0xa1, 0x00, 0x00, 0x00, 0x58, 0x02, 0x00, 0x00, // ....Y.......X...
	0x83, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x5a, 0x02, 0x00, 0x00, 0x59, 0x02, 0x00, 0x00, // ........Z...Y...
	0x68, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x07, 0x00, 0x00, 0x00, 0x5c, 0x02, 0x00, 0x00, // h...............
	0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x52, 0x02, 0x00, 0x00, 0x5a, 0x02, 0x00, 0x00, // ....2...R...Z...
	0x68, 0x00, 0x00, 0x00, 0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x5d, 0x02, 0x00, 0x00, // h...........]...
	0xa1, 0x00, 0x00, 0x00, 0x5c, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // ................
	0x5e, 0x02, 0x00, 0x00, 0xa1, 0x00, 0x00, 0x00, 0x5d, 0x02, 0x00, 0x00, 0x0c, 0x00, 0x08, 0x00, // ^.......].......
	0x07, 0x00, 0x00, 0x00, 0x60, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, // ....`.......2...
	0xe2, 0x01, 0x00, 0x00, 0x5e, 0x02, 0x00, 0x00, 0x54, 0x02, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, // ....^...T.......
	0x07, 0x00, 0x00, 0x00, 0x61, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, // ....a.......(...
	0x5f, 0x00, 0x00, 0x00, 0x60, 0x02, 0x00, 0x00, 0x7f, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, // _...`...........
	0x65, 0x02, 0x00, 0x00, 0x61, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, // e...a...P.......
	0x66, 0x02, 0x00, 0x00, 0x5f, 0x00, 0x00, 0x00, 0x65, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, // f..._...e...P...
	0x0b, 0x00, 0x00, 0x00, 0x68, 0x02, 0x00, 0x00, 0x61, 0x02, 0x00, 0x00, 0x5f, 0x00, 0x00, 0x00, // ....h...a..._...
	0x50, 0x00, 0x05, 0x00, 0x6f, 0x00, 0x00, 0x00, 0x69, 0x02, 0x00, 0x00, 0xe0, 0x01, 0x00, 0x00, // P...o...i.......
	0xe0, 0x01, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x6a, 0x02, 0x00, 0x00, // ............j...
	0x69, 0x02, 0x00, 0x00, 0x66, 0x02, 0x00, 0x00, 0x68, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, // i...f...h.......
	0x0b, 0x00, 0x00, 0x00, 0x6b, 0x02, 0x00, 0x00, 0x64, 0x01, 0x00, 0x00, 0x6a, 0x02, 0x00, 0x00, // ....k...d...j...
	0x56, 0x00, 0x05, 0x00, 0x45, 0x00, 0x00, 0x00, 0xbb, 0x02, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, // V...E.......4...
	0x31, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x00, 0x00, // 1...X...........
	0xbb, 0x02, 0x00, 0x00, 0x6b, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x5f, 0x00, 0x00, 0x00, // ....k......._...
	0x4f, 0x00, 0x08, 0x00, 0x19, 0x00, 0x00, 0x00, 0x6e, 0x02, 0x00, 0x00, 0xbe, 0x02, 0x00, 0x00, // O.......n.......
	0xbe, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // ................
	0x41, 0x00, 0x06, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x94, 0x01, 0x00, 0x00, 0x59, 0x00, 0x00, 0x00, // A...........Y...
	0x37, 0x01, 0x00, 0x00, 0x9d, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, // 7.......=.......
	0x95, 0x01, 0x00, 0x00, 0x94, 0x01, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x5c, 0x00, 0x00, 0x00, // ........A.......
	0x96, 0x01, 0x00, 0x00, 0x59, 0x00, 0x00, 0x00, 0x37, 0x01, 0x00, 0x00, 0x9d, 0x00, 0x00, 0x00, // ....Y...7.......
	0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x97, 0x01, 0x00, 0x00, 0x96, 0x01, 0x00, 0x00, // =...............
	0x41, 0x00, 0x06, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x98, 0x01, 0x00, 0x00, 0x59, 0x00, 0x00, 0x00, // A...........Y...
	0x37, 0x01, 0x00, 0x00, 0x9d, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, // 7.......=.......
	0x99, 0x01, 0x00, 0x00, 0x98, 0x01, 0x00, 0x00, 0x50, 0x00, 0x06, 0x00, 0x19, 0x00, 0x00, 0x00, // ........P.......
	0x9a, 0x01, 0x00, 0x00, 0x95, 0x01, 0x00, 0x00, 0x97, 0x01, 0x00, 0x00, 0x99, 0x01, 0x00, 0x00, // ................
	0x0c, 0x00, 0x07, 0x00, 0x19, 0x00, 0x00, 0x00, 0x9b, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // ................
	0x1a, 0x00, 0x00, 0x00, 0x28, 0x02, 0x00, 0x00, 0x9a, 0x01, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, // ....(.......A...
	0x5c, 0x00, 0x00, 0x00, 0x9d, 0x01, 0x00, 0x00, 0x59, 0x00, 0x00, 0x00, 0x37, 0x01, 0x00, 0x00, // ........Y...7...
	0x9d, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x9e, 0x01, 0x00, 0x00, // ....=...........
	0x9d, 0x01, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x9f, 0x01, 0x00, 0x00, // ....A...........
	0x59, 0x00, 0x00, 0x00, 0x37, 0x01, 0x00, 0x00, 0x9d, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, // Y...7.......=...
	0x07, 0x00, 0x00, 0x00, 0xa0, 0x01, 0x00, 0x00, 0x9f, 0x01, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, // ............A...
	0x5c, 0x00, 0x00, 0x00, 0xa1, 0x01, 0x00, 0x00, 0x59, 0x00, 0x00, 0x00, 0x37, 0x01, 0x00, 0x00, // ........Y...7...
	0x9d, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0xa2, 0x01, 0x00, 0x00, // ....=...........
	0xa1, 0x01, 0x00, 0x00, 0x50, 0x00, 0x06, 0x00, 0x19, 0x00, 0x00, 0x00, 0xa3, 0x01, 0x00, 0x00, // ....P...........
	0x9e, 0x01, 0x00, 0x00, 0xa0, 0x01, 0x00, 0x00, 0xa2, 0x01, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, // ................
	0x19, 0x00, 0x00, 0x00, 0xa4, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, // ................
	0x6e, 0x02, 0x00, 0x00, 0xa3, 0x01, 0x00, 0x00, 0x41, 0x00, 0x05, 0x00, 0x15, 0x01, 0x00, 0x00, // n.......A.......
	0xc2, 0x02, 0x00, 0x00, 0x59, 0x00, 0x00, 0x00, 0x14, 0x01, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, // ....Y.......=...
	0x56, 0x00, 0x00, 0x00, 0xc3, 0x02, 0x00, 0x00, 0xc2, 0x02, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, // V...........Q...
	0x07, 0x00, 0x00, 0x00, 0xc4, 0x02, 0x00, 0x00, 0x9b, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xc5, 0x02, 0x00, 0x00, 0x9b, 0x01, 0x00, 0x00, // Q...............
	0x01, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xc6, 0x02, 0x00, 0x00, // ....Q...........
	0x9b, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x50, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, // ........P.......
	0xc7, 0x02, 0x00, 0x00, 0xc4, 0x02, 0x00, 0x00, 0xc5, 0x02, 0x00, 0x00, 0xc6, 0x02, 0x00, 0x00, // ................
	0xa1, 0x00, 0x00, 0x00, 0x91, 0x00, 0x05, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xc8, 0x02, 0x00, 0x00, // ................
	0xc3, 0x02, 0x00, 0x00, 0xc7, 0x02, 0x00, 0x00, 0x41, 0x00, 0x05, 0x00, 0x15, 0x01, 0x00, 0x00, // ........A.......
	0xc9, 0x02, 0x00, 0x00, 0x59, 0x00, 0x00, 0x00, 0x1d, 0x01, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, // ....Y.......=...
	0x56, 0x00, 0x00, 0x00, 0xca, 0x02, 0x00, 0x00, 0xc9, 0x02, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, // V...........Q...
	0x07, 0x00, 0x00, 0x00, 0xcb, 0x02, 0x00, 0x00, 0xa4, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xcc, 0x02, 0x00, 0x00, 0xa4, 0x01, 0x00, 0x00, // Q...............
	0x01, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xcd, 0x02, 0x00, 0x00, // ....Q...........
	0xa4, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x50, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, // ........P.......
	0xce, 0x02, 0x00, 0x00, 0xcb, 0x02, 0x00, 0x00, 0xcc, 0x02, 0x00, 0x00, 0xcd, 0x02, 0x00, 0x00, // ................
	0xa1, 0x00, 0x00, 0x00, 0x91, 0x00, 0x05, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xcf, 0x02, 0x00, 0x00, // ................
	0xca, 0x02, 0x00, 0x00, 0xce, 0x02, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x0e, 0x00, 0x00, 0x00, // ................
	0xd0, 0x02, 0x00, 0x00, 0xc8, 0x02, 0x00, 0x00, 0xcf, 0x02, 0x00, 0x00, 0x4f, 0x00, 0x08, 0x00, // ............O...
	0x19, 0x00, 0x00, 0x00, 0xd1, 0x02, 0x00, 0x00, 0xd0, 0x02, 0x00, 0x00, 0xd0, 0x02, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, // ............A...
	0x5c, 0x00, 0x00, 0x00, 0xa9, 0x01, 0x00, 0x00, 0x59, 0x00, 0x00, 0x00, 0x37, 0x01, 0x00, 0x00, // ........Y...7...
	0x9d, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0xaa, 0x01, 0x00, 0x00, // ....=...........
	0xa9, 0x01, 0x00, 0x00, 0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xab, 0x01, 0x00, 0x00, // ................
	0xa1, 0x00, 0x00, 0x00, 0xaa, 0x01, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x5c, 0x00, 0x00, 0x00, // ........A.......
	0xac, 0x01, 0x00, 0x00, 0x59, 0x00, 0x00, 0x00, 0x37, 0x01, 0x00, 0x00, 0x9d, 0x00, 0x00, 0x00, // ....Y...7.......
	0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0xad, 0x01, 0x00, 0x00, 0xac, 0x01, 0x00, 0x00, // =...............
	0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xae, 0x01, 0x00, 0x00, 0xa1, 0x00, 0x00, 0x00, // ................
	0xad, 0x01, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x5c, 0x00, 0x00, 0x00, 0xaf, 0x01, 0x00, 0x00, // ....A...........
	0x59, 0x00, 0x00, 0x00, 0x37, 0x01, 0x00, 0x00, 0x9d, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, // Y...7.......=...
	0x07, 0x00, 0x00, 0x00, 0xb0, 0x01, 0x00, 0x00, 0xaf, 0x01, 0x00, 0x00, 0x88, 0x00, 0x05, 0x00, // ................
	0x07, 0x00, 0x00, 0x00, 0xb1, 0x01, 0x00, 0x00, 0xa1, 0x00, 0x00, 0x00, 0xb0, 0x01, 0x00, 0x00, // ................
	0x50, 0x00, 0x06, 0x00, 0x19, 0x00, 0x00, 0x00, 0xb2, 0x01, 0x00, 0x00, 0xab, 0x01, 0x00, 0x00, // P...............
	0xae, 0x01, 0x00, 0x00, 0xb1, 0x01, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x19, 0x00, 0x00, 0x00, // ................
	0xb3, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0xd1, 0x02, 0x00, 0x00, // ................
	0xb2, 0x01, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xb4, 0x01, 0x00, 0x00, // ....Q...........
	0xb3, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, // ........Q.......
	0xb5, 0x01, 0x00, 0x00, 0xb3, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, // ............Q...
	0x07, 0x00, 0x00, 0x00, 0xb6, 0x01, 0x00, 0x00, 0xb3, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, // ................
	0x50, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xb7, 0x01, 0x00, 0x00, 0xb4, 0x01, 0x00, 0x00, // P...............
	0xb5, 0x01, 0x00, 0x00, 0xb6, 0x01, 0x00, 0x00, 0xa1, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x03, 0x00, // ............>...
	0x6e, 0x01, 0x00, 0x00, 0xb7, 0x01, 0x00, 0x00, 0xfd, 0x00, 0x01, 0x00, 0x38, 0x00, 0x01, 0x00, // n...........8...
	0x00, 0x00, 0xb0, 0x00,                                                                         // ....
};
static const bgfx::EmbeddedShader fs_pp_stereo_anaglyph_lin_gamma_nodesat = BGFX_EMBEDDED_SHADER(fs_pp_stereo_anaglyph_lin_gamma_nodesat);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Build of fragment shader from fs_pp_stereo.sc to fs_pp_stereo_anaglyph_lin_gamma_dyndesat with options: ANAGLYPH DYNDESAT GAMMA NOSTEREO
static const uint8_t fs_pp_stereo_anaglyph_lin_gamma_dyndesat_mtl[4349] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x14, 0x74, // FSH.o.><.......t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, // ex_stereo_fbSamp
	0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x74, 0x65, // ler...........te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x54, 0x65, 0x78, 0x74, 0x75, // x_stereo_fbTextu
	0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x74, 0x65, 0x78, // re...........tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, // _stereo_depthSam
	0x70, 0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x74, // pler...........t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x54, // ex_stereo_depthT
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, // exture..........
	0x13, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, // .Stereo_MS_ZPD_Y
	0x41, 0x78, 0x69, 0x73, 0x12, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x77, // Axis...........w
	0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x01, 0x10, 0x00, 0x01, 0x00, 0x00, // _h_height.......
	0x00, 0x00, 0x00, 0x1a, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, // ....Stereo_LeftL
	0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x12, 0x01, // uminance_Gamma..
	0xa0, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // .........Stereo_
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, // RightLuminance_D
	0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x12, 0x01, 0xb0, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, // ynDesat.........
	0x00, 0x0e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, // ..Stereo_LeftMat
	0x14, 0x01, 0x20, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x53, 0x74, 0x65, 0x72, 0x65, // .. ........Stere
	0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x01, 0x60, 0x00, 0x04, 0x00, // o_RightMat..`...
	0x00, 0x00, 0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // .....tex_stereo_
	0x66, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x74, 0x65, 0x78, // fb...........tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x10, 0x00, 0x00, // _stereo_depth...
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7e, 0x0f, 0x00, 0x00, 0x23, 0x69, 0x6e, 0x63, 0x6c, // .......~...#incl
	0x75, 0x64, 0x65, 0x20, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x64, 0x6c, 0x69, // ude <metal_stdli
	0x62, 0x3e, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x73, 0x69, 0x6d, // b>.#include <sim
	0x64, 0x2f, 0x73, 0x69, 0x6d, 0x64, 0x2e, 0x68, 0x3e, 0x0a, 0x0a, 0x75, 0x73, 0x69, 0x6e, 0x67, // d/simd.h>..using
	0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x6d, 0x65, 0x74, 0x61, 0x6c, //  namespace metal
	0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, // ;..struct _Globa
	0x6c, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x53, // l.{.    float4 S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, // tereo_MS_ZPD_YAx
	0x69, 0x73, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x77, // is;.    float4 w
	0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, // _h_height;.    f
	0x6c, 0x6f, 0x61, 0x74, 0x34, 0x78, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, // loat4x4 Stereo_L
	0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, // eftMat;.    floa
	0x74, 0x34, 0x78, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, // t4x4 Stereo_Righ
	0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, // tMat;.    float4
	0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, //  Stereo_LeftLumi
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x20, 0x20, 0x20, // nance_Gamma;.   
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, //  float4 Stereo_R
	0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, // ightLuminance_Dy
	0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, // nDesat;.};..stru
	0x63, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, // ct xlatMtlMain_o
	0x75, 0x74, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, // ut.{.    float4 
	0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x20, 0x5b, // bgfx_FragData0 [
	0x5b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, // [color(0)]];.};.
	0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, // .struct xlatMtlM
	0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, // ain_in.{.    flo
	0x61, 0x74, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, // at2 v_texcoord0 
	0x5b, 0x5b, 0x75, 0x73, 0x65, 0x72, 0x28, 0x6c, 0x6f, 0x63, 0x6e, 0x30, 0x29, 0x5d, 0x5d, 0x3b, // [[user(locn0)]];
	0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x78, 0x6c, // .};..fragment xl
	0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x78, 0x6c, // atMtlMain_out xl
	0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x28, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, // atMtlMain(xlatMt
	0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x5b, 0x5b, 0x73, 0x74, // lMain_in in [[st
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x5d, 0x5d, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, // age_in]], consta
	0x6e, 0x74, 0x20, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x26, 0x20, 0x5f, 0x6d, 0x74, 0x6c, // nt _Global& _mtl
	0x5f, 0x75, 0x20, 0x5b, 0x5b, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, // _u [[buffer(0)]]
	0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, 0x6f, 0x61, // , texture2d<floa
	0x74, 0x3e, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, // t> tex_stereo_fb
	0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x2c, //  [[texture(0)]],
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, //  texture2d<float
	0x3e, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, // > tex_stereo_dep
	0x74, 0x68, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x31, 0x29, 0x5d, // th [[texture(1)]
	0x5d, 0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, // ], sampler tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, // tereo_fbSampler 
	0x5b, 0x5b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x2c, 0x20, // [[sampler(0)]], 
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // sampler tex_ster
	0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, // eo_depthSampler 
	0x5b, 0x5b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x31, 0x29, 0x5d, 0x5d, 0x29, 0x0a, // [[sampler(1)]]).
	0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, // {.    xlatMtlMai
	0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x3d, 0x20, 0x7b, 0x7d, 0x3b, 0x0a, // n_out out = {};.
	0x20, 0x20, 0x20, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x5f, 0x36, 0x30, 0x31, 0x20, 0x3d, 0x20, //     bool _601 = 
	0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, // _mtl_u.Stereo_MS
	0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x7a, 0x20, 0x21, 0x3d, 0x20, // _ZPD_YAxis.z != 
	0x30, 0x2e, 0x30, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, // 0.0;.    float _
	0x36, 0x36, 0x30, 0x20, 0x3d, 0x20, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x61, 0x78, 0x28, // 660 = fast::max(
	0x30, 0x2e, 0x30, 0x2c, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, // 0.0, fma(_mtl_u.
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, // Stereo_MS_ZPD_YA
	0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, // xis.x, 1.0 - (1.
	0x30, 0x20, 0x2f, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, // 0 / fma(fast::mi
	0x6e, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x5f, // n(fast::min(tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, 0x6d, // stereo_depth.sam
	0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, // ple(tex_stereo_d
	0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, 0x6e, // epthSampler, (in
	0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2b, 0x20, 0x73, // .v_texcoord0 + s
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x35, // elect(float2(0.5
	0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, //  * _mtl_u.Stereo
	0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, // _MS_ZPD_YAxis.x,
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, //  0.0), float2(0.
	0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, // 0, 0.5 * _mtl_u.
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, // Stereo_MS_ZPD_YA
	0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x36, // xis.x), bool2(_6
	0x30, 0x31, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, // 01))), level(0.0
	0x29, 0x29, 0x2e, 0x78, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // )).x, tex_stereo
	0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, // _depth.sample(te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, // x_stereo_depthSa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, // mpler, (in.v_tex
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2b, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, // coord0 + select(
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x30, 0x30, 0x30, 0x30, // float2(0.6660000
	0x30, 0x38, 0x35, 0x38, 0x33, 0x30, 0x36, 0x38, 0x38, 0x34, 0x37, 0x36, 0x35, 0x36, 0x32, 0x35, // 0858306884765625
	0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, //  * _mtl_u.Stereo
	0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, // _MS_ZPD_YAxis.x,
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, //  0.0), float2(0.
	0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x30, 0x30, 0x30, 0x30, 0x30, 0x38, 0x35, 0x38, // 0, 0.66600000858
	0x33, 0x30, 0x36, 0x38, 0x38, 0x34, 0x37, 0x36, 0x35, 0x36, 0x32, 0x35, 0x20, 0x2a, 0x20, 0x5f, // 306884765625 * _
	0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, // mtl_u.Stereo_MS_
	0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, 0x6f, // ZPD_YAxis.x), bo
	0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x36, 0x30, 0x31, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, // ol2(_601))), lev
	0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x74, 0x65, 0x78, // el(0.0)).x), tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, // _stereo_depth.sa
	0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // mple(tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, // depthSampler, (i
	0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2b, 0x20, // n.v_texcoord0 + 
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x5f, 0x6d, // select(float2(_m
	0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, // tl_u.Stereo_MS_Z
	0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // PD_YAxis.x, 0.0)
	0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x5f, 0x6d, // , float2(0.0, _m
	0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, // tl_u.Stereo_MS_Z
	0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, // PD_YAxis.x), boo
	0x6c, 0x32, 0x28, 0x5f, 0x36, 0x30, 0x31, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, // l2(_601))), leve
	0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x28, 0x31, 0x2e, 0x30, // l(0.0)).x), (1.0
	0x20, 0x2f, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, //  / _mtl_u.Stereo
	0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, // _MS_ZPD_YAxis.y)
	0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x2c, 0x20, 0x5f, //  - 0.5, 0.5)), _
	0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, // mtl_u.w_h_height
	0x2e, 0x77, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // .w));.    float 
	0x5f, 0x37, 0x33, 0x30, 0x20, 0x3d, 0x20, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x61, 0x78, // _730 = fast::max
	0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, // (0.0, fma(_mtl_u
	0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, // .Stereo_MS_ZPD_Y
	0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, // Axis.x, 1.0 - (1
	0x2e, 0x30, 0x20, 0x2f, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, // .0 / fma(fast::m
	0x69, 0x6e, 0x28, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, // in(fast::min(tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, // _stereo_depth.sa
	0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // mple(tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, // depthSampler, (i
	0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2d, 0x20, // n.v_texcoord0 - 
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, // select(float2(0.
	0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, // 5 * _mtl_u.Stere
	0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, // o_MS_ZPD_YAxis.x
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, // , 0.0), float2(0
	0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, // .0, 0.5 * _mtl_u
	0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, // .Stereo_MS_ZPD_Y
	0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, // Axis.x), bool2(_
	0x36, 0x30, 0x31, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, // 601))), level(0.
	0x30, 0x29, 0x29, 0x2e, 0x78, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // 0)).x, tex_stere
	0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, // o_depth.sample(t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, // ex_stereo_depthS
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, // ampler, (in.v_te
	0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2d, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, // xcoord0 - select
	0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x30, 0x30, 0x30, // (float2(0.666000
	0x30, 0x30, 0x38, 0x35, 0x38, 0x33, 0x30, 0x36, 0x38, 0x38, 0x34, 0x37, 0x36, 0x35, 0x36, 0x32, // 0085830688476562
	0x35, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, // 5 * _mtl_u.Stere
	0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, // o_MS_ZPD_YAxis.x
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, // , 0.0), float2(0
	0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x30, 0x30, 0x30, 0x30, 0x30, 0x38, 0x35, // .0, 0.6660000085
	0x38, 0x33, 0x30, 0x36, 0x38, 0x38, 0x34, 0x37, 0x36, 0x35, 0x36, 0x32, 0x35, 0x20, 0x2a, 0x20, // 8306884765625 * 
	0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, // _mtl_u.Stereo_MS
	0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, // _ZPD_YAxis.x), b
	0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x36, 0x30, 0x31, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, // ool2(_601))), le
	0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x74, 0x65, // vel(0.0)).x), te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2e, 0x73, // x_stereo_depth.s
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // ample(tex_stereo
	0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, // _depthSampler, (
	0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2d, // in.v_texcoord0 -
	0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x5f, //  select(float2(_
	0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, // mtl_u.Stereo_MS_
	0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, // ZPD_YAxis.x, 0.0
	0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x5f, // ), float2(0.0, _
	0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, // mtl_u.Stereo_MS_
	0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x62, 0x6f, // ZPD_YAxis.x), bo
	0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x36, 0x30, 0x31, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, // ol2(_601))), lev
	0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x20, 0x28, 0x31, 0x2e, // el(0.0)).x), (1.
	0x30, 0x20, 0x2f, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, // 0 / _mtl_u.Stere
	0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, // o_MS_ZPD_YAxis.y
	0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x2c, 0x20, // ) - 0.5, 0.5)), 
	0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, // _mtl_u.w_h_heigh
	0x74, 0x2e, 0x77, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // t.w));.    float
	0x33, 0x20, 0x5f, 0x35, 0x32, 0x35, 0x20, 0x3d, 0x20, 0x70, 0x6f, 0x77, 0x72, 0x28, 0x74, 0x65, // 3 _525 = powr(te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2e, 0x73, 0x61, 0x6d, 0x70, // x_stereo_fb.samp
	0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, // le(tex_stereo_fb
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, // Sampler, (in.v_t
	0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x2b, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, // excoord0 + selec
	0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x5f, 0x36, 0x36, 0x30, 0x2c, 0x20, 0x30, // t(float2(_660, 0
	0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, // .0), float2(0.0,
	0x20, 0x2d, 0x5f, 0x36, 0x36, 0x30, 0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, //  -_660), bool2(_
	0x36, 0x30, 0x31, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, // 601))), level(0.
	0x30, 0x29, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, // 0)).xyz, float3(
	0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, // _mtl_u.Stereo_Le
	0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, // ftLuminance_Gamm
	0x61, 0x2e, 0x77, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, // a.w, _mtl_u.Ster
	0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, // eo_LeftLuminance
	0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, // _Gamma.w, _mtl_u
	0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, // .Stereo_LeftLumi
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x29, 0x29, 0x3b, // nance_Gamma.w));
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x35, 0x33, 0x34, // .    float3 _534
	0x20, 0x3d, 0x20, 0x70, 0x6f, 0x77, 0x72, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, //  = powr(tex_ster
	0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, // eo_fb.sample(tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, // _stereo_fbSample
	0x72, 0x2c, 0x20, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, // r, (in.v_texcoor
	0x64, 0x30, 0x20, 0x2d, 0x20, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, // d0 - select(floa
	0x74, 0x32, 0x28, 0x5f, 0x37, 0x33, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, // t2(_730, 0.0), f
	0x6c, 0x6f, 0x61, 0x74, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x5f, 0x37, 0x33, 0x30, // loat2(0.0, -_730
	0x29, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x32, 0x28, 0x5f, 0x36, 0x30, 0x31, 0x29, 0x29, 0x29, // ), bool2(_601)))
	0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x79, // , level(0.0)).xy
	0x7a, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, // z, float3(_mtl_u
	0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, // .Stereo_LeftLumi
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, 0x5f, // nance_Gamma.w, _
	0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, // mtl_u.Stereo_Lef
	0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, // tLuminance_Gamma
	0x2e, 0x77, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, // .w, _mtl_u.Stere
	0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, // o_LeftLuminance_
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, // Gamma.w));.    f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x38, 0x34, 0x34, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, // loat _844 = dot(
	0x5f, 0x35, 0x32, 0x35, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, // _525, _mtl_u.Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, // reo_LeftLuminanc
	0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x20, 0x20, // e_Gamma.xyz);.  
	0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x38, 0x34, 0x38, 0x20, 0x3d, 0x20, 0x64, //   float _848 = d
	0x6f, 0x74, 0x28, 0x5f, 0x35, 0x32, 0x35, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, // ot(_525, _mtl_u.
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, // Stereo_RightLumi
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x78, // nance_DynDesat.x
	0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, // yz);.    float _
	0x38, 0x35, 0x32, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x5f, 0x35, 0x33, 0x34, 0x2c, 0x20, // 852 = dot(_534, 
	0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, // _mtl_u.Stereo_Le
	0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, // ftLuminance_Gamm
	0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, // a.xyz);.    floa
	0x74, 0x20, 0x5f, 0x38, 0x35, 0x36, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x5f, 0x35, 0x33, // t _856 = dot(_53
	0x34, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // 4, _mtl_u.Stereo
	0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, // _RightLuminance_
	0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x20, // DynDesat.xyz);. 
	0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x38, 0x35, 0x39, 0x20, 0x3d, 0x20, //    float _859 = 
	0x5f, 0x38, 0x34, 0x34, 0x20, 0x2b, 0x20, 0x5f, 0x38, 0x34, 0x38, 0x3b, 0x0a, 0x20, 0x20, 0x20, // _844 + _848;.   
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x38, 0x36, 0x32, 0x20, 0x3d, 0x20, 0x5f, 0x38, //  float _862 = _8
	0x35, 0x32, 0x20, 0x2b, 0x20, 0x5f, 0x38, 0x35, 0x36, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, // 52 + _856;.    f
	0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x39, 0x30, 0x34, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, // loat3 _904 = mix
	0x28, 0x5f, 0x35, 0x32, 0x35, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x38, // (_525, float3(_8
	0x35, 0x39, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x6d, 0x74, 0x6c, // 59), float3(_mtl
	0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, // _u.Stereo_RightL
	0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, // uminance_DynDesa
	0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x5f, 0x38, 0x34, 0x34, 0x20, // t.w * abs((_844 
	0x2d, 0x20, 0x5f, 0x38, 0x34, 0x38, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x5f, 0x38, 0x35, 0x39, 0x20, // - _848) / (_859 
	0x2b, 0x20, 0x39, 0x2e, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x37, 0x34, 0x37, 0x33, 0x37, 0x38, // + 9.999999747378
	0x37, 0x35, 0x31, 0x36, 0x33, 0x35, 0x35, 0x35, 0x31, 0x34, 0x35, 0x32, 0x36, 0x33, 0x36, 0x37, // 7516355514526367
	0x31, 0x38, 0x38, 0x65, 0x2d, 0x30, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, // 188e-05))));.   
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x39, 0x31, 0x36, 0x20, 0x3d, 0x20, 0x6d, //  float3 _916 = m
	0x69, 0x78, 0x28, 0x5f, 0x35, 0x33, 0x34, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, // ix(_534, float3(
	0x5f, 0x38, 0x36, 0x32, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x6d, // _862), float3(_m
	0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, // tl_u.Stereo_Righ
	0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, // tLuminance_DynDe
	0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x5f, 0x38, 0x35, // sat.w * abs((_85
	0x32, 0x20, 0x2d, 0x20, 0x5f, 0x38, 0x35, 0x36, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x5f, 0x38, 0x36, // 2 - _856) / (_86
	0x32, 0x20, 0x2b, 0x20, 0x39, 0x2e, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x37, 0x34, 0x37, 0x33, // 2 + 9.9999997473
	0x37, 0x38, 0x37, 0x35, 0x31, 0x36, 0x33, 0x35, 0x35, 0x35, 0x31, 0x34, 0x35, 0x32, 0x36, 0x33, // 7875163555145263
	0x36, 0x37, 0x31, 0x38, 0x38, 0x65, 0x2d, 0x30, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x20, // 67188e-05))));. 
	0x20, 0x20, 0x20, 0x6f, 0x75, 0x74, 0x2e, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, //    out.bgfx_Frag
	0x44, 0x61, 0x74, 0x61, 0x30, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x70, // Data0 = float4(p
	0x6f, 0x77, 0x72, 0x28, 0x28, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x39, 0x30, // owr(((float4(_90
	0x34, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, // 4, 1.0) * _mtl_u
	0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x29, // .Stereo_LeftMat)
	0x20, 0x2b, 0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x39, 0x31, 0x36, 0x2c, //  + (float4(_916,
	0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, //  1.0) * _mtl_u.S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x29, // tereo_RightMat))
	0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x31, 0x2e, 0x30, // .xyz, float3(1.0
	0x20, 0x2f, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, //  / _mtl_u.Stereo
	0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, // _LeftLuminance_G
	0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x5f, 0x6d, // amma.w, 1.0 / _m
	0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, // tl_u.Stereo_Left
	0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, // Luminance_Gamma.
	0x77, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, // w, 1.0 / _mtl_u.
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, // Stereo_LeftLumin
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x29, 0x29, 0x2c, 0x20, // ance_Gamma.w)), 
	0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // 1.0);.    return
	0x20, 0x6f, 0x75, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x0a, 0x00, 0x00, 0x00, 0x01,                   //  out;.}......
};
static const uint8_t fs_pp_stereo_anaglyph_lin_gamma_dyndesat_essl[11537] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x2c, // FSH.o.><.......,
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x33, 0x32, 0x30, 0x20, 0x65, // ..#version 320 e
	0x73, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, // s.#define attrib
	0x75, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x76, // ute in.#define v
	0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, // arying in.precis
	0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3b, // ion highp float;
	0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, // .precision highp
	0x20, 0x69, 0x6e, 0x74, 0x3b, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x73, 0x68, //  int;.#define sh
	0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, // adow2D(_sampler,
	0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, //  _coord) texture
	0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, // (_sampler, _coor
	0x64, 0x29, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x73, 0x68, 0x61, 0x64, 0x6f, // d).#define shado
	0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // w2DProj(_sampler
	0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // , _coord) textur
	0x65, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, // eProj(_sampler, 
	0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x0a, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x65, 0x64, 0x69, // _coord).out medi
	0x75, 0x6d, 0x70, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, // ump vec4 bgfx_Fr
	0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, // agColor;.varying
	0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, //  vec2 v_texcoord
	0x30, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, // 0;.vec3 instMul(
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x20, // vec3 _vec, mat3 
	0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // _mtx) { return (
	0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, //  (_vec) * (_mtx)
	0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, //  ); }.vec3 instM
	0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, // ul(mat3 _mtx, ve
	0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, // c3 _vec) { retur
	0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, // n ( (_mtx) * (_v
	0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, // ec) ); }.vec4 in
	0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, // stMul(vec4 _vec,
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, //  mat4 _mtx) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, // turn ( (_vec) * 
	0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, // (_mtx) ); }.vec4
	0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, //  instMul(mat4 _m
	0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, // tx, vec4 _vec) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, //  return ( (_mtx)
	0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, //  * (_vec) ); }.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, 0x70, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, // loat rcp(float _
	0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x2f, // a) { return 1.0/
	0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, // _a; }.vec2 rcp(v
	0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // ec2 _a) { return
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, //  vec2(1.0)/_a; }
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, // .vec3 rcp(vec3 _
	0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, // a) { return vec3
	0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, // (1.0)/_a; }.vec4
	0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, //  rcp(vec4 _a) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x31, 0x2e, 0x30, 0x29, // return vec4(1.0)
	0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x65, 0x63, 0x32, // /_a; }.vec2 vec2
	0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, // _splat(float _x)
	0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, //  { return vec2(_
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, // x, _x); }.vec3 v
	0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // ec3_splat(float 
	0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, // _x) { return vec
	0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, // 3(_x, _x, _x); }
	0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, // .vec4 vec4_splat
	0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // (float _x) { ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, // urn vec4(_x, _x,
	0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, //  _x, _x); }.uvec
	0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, // 2 uvec2_splat(ui
	0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // nt _x) { return 
	0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, // uvec2(_x, _x); }
	0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, // .uvec3 uvec3_spl
	0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // at(uint _x) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, // turn uvec3(_x, _
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x34, 0x20, // x, _x); }.uvec4 
	0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, // uvec4_splat(uint
	0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, //  _x) { return uv
	0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, // ec4(_x, _x, _x, 
	0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, // _x); }.mat4 mtxF
	0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, // romRows(vec4 _0,
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, //  vec4 _1, vec4 _
	0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // 2, vec4 _3).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, // turn transpose(m
	0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, // at4(_0, _1, _2, 
	0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, // _3) );.}.mat4 mt
	0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, // xFromCols(vec4 _
	0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // 0, vec4 _1, vec4
	0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, //  _2, vec4 _3).{.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, // return mat4(_0, 
	0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, // _1, _2, _3);.}.m
	0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, // at3 mtxFromRows(
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, // vec3 _0, vec3 _1
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // , vec3 _2).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, // urn transpose(ma
	0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x20, 0x29, // t3(_0, _1, _2) )
	0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, // ;.}.mat3 mtxFrom
	0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, // Cols(vec3 _0, ve
	0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, // c3 _1, vec3 _2).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, // {.return mat3(_0
	0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, // , _1, _2);.}.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, // form vec4 u_view
	0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, // Rect;.uniform ve
	0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x54, 0x65, 0x78, 0x65, 0x6c, 0x3b, 0x0a, // c4 u_viewTexel;.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, // uniform mat4 u_v
	0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, // iew;.uniform mat
	0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, // 4 u_invView;.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x70, 0x72, 0x6f, 0x6a, // form mat4 u_proj
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, // ;.uniform mat4 u
	0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // _invProj;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, // m mat4 u_viewPro
	0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, // j;.uniform mat4 
	0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, // u_invViewProj;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, // niform mat4 u_mo
	0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // del[32];.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, //  mat4 u_modelVie
	0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, // w;.uniform mat4 
	0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, // u_modelViewProj;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, // .uniform vec4 u_
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x66, 0x34, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // alphaRef4;.float
	0x20, 0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, //  sqr(const float
	0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, //  v).{.return v*v
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, // ;.}.vec2 sqr(con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // st vec2 v).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // urn v*v;.}.vec3 
	0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, // sqr(const vec3 v
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, // ).{.return v*v;.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6d, 0x75, 0x6c, 0x5f, 0x77, 0x31, 0x28, 0x63, 0x6f, // }.vec3 mul_w1(co
	0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, // nst vec3 v, cons
	0x74, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, // t mat4 m).{.retu
	0x72, 0x6e, 0x20, 0x76, 0x2e, 0x78, 0x2a, 0x6d, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, // rn v.x*m[0].xyz 
	0x2b, 0x20, 0x28, 0x76, 0x2e, 0x79, 0x2a, 0x6d, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, // + (v.y*m[1].xyz 
	0x2b, 0x20, 0x28, 0x76, 0x2e, 0x7a, 0x2a, 0x6d, 0x5b, 0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, // + (v.z*m[2].xyz 
	0x2b, 0x20, 0x6d, 0x5b, 0x33, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // + m[3].xyz));.}.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, // float acos_appro
	0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // x_divPI(const fl
	0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // oat v).{.const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, // loat x = abs(v);
	0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, // .if(1. - x <= 0.
	0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, // 00006103515625).
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, // return (v >= 0.)
	0x20, 0x3f, 0x20, 0x30, 0x2e, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, //  ? 0. : 1.;.cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, // t float res = ((
	0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, // -0.155972/3.1415
	0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, // 9265358979323846
	0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, // 26433832795) * x
	0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, //  + (1.56467/3.14
	0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, // 1592653589793238
	0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, // 4626433832795) )
	0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, //  * sqrt(1. - x);
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, // .return (v >= 0.
	0x29, 0x20, 0x3f, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x72, // ) ? res : 1. - r
	0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x74, 0x61, 0x6e, // es;.}.float atan
	0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, // 2_approx_div2PI(
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x79, 0x2c, 0x20, 0x63, // const float y, c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x29, 0x0a, 0x7b, 0x0a, // onst float x).{.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, // const float abs_
	0x79, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x79, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // y = abs(y);.cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3d, 0x20, // t float abs_x = 
	0x61, 0x62, 0x73, 0x28, 0x78, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, // abs(x);.if(abs_x
	0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, //  <= 0.0000610351
	0x35, 0x36, 0x32, 0x35, 0x20, 0x26, 0x26, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3c, 0x3d, // 5625 && abs_y <=
	0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, //  0.0000610351562
	0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x30, 0x2e, 0x3b, 0x0a, 0x63, 0x6f, // 5).return 0.;.co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x61, // nst float r = (a
	0x62, 0x73, 0x5f, 0x78, 0x20, 0x2d, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x20, 0x2f, 0x20, // bs_x - abs_y) / 
	0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2b, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x3b, // (abs_x + abs_y);
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x6e, 0x67, // .const float ang
	0x6c, 0x65, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, // le = ((x < 0.) ?
	0x20, 0x28, 0x33, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x20, 0x3a, 0x20, 0x28, 0x31, 0x2e, 0x2f, 0x38, //  (3./8.) : (1./8
	0x2e, 0x29, 0x29, 0x0a, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x32, 0x31, 0x31, 0x38, 0x36, 0x38, 0x20, // .)).+ (0.211868 
	0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, // /(2.*3.141592653
	0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, // 5897932384626433
	0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x72, 0x20, 0x2a, 0x20, 0x72, 0x20, // 832795) * r * r 
	0x2d, 0x20, 0x30, 0x2e, 0x39, 0x38, 0x37, 0x33, 0x30, 0x35, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, // - 0.987305 /(2.*
	0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, // 3.14159265358979
	0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, // 3238462643383279
	0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, // 5)) * ((x < 0.) 
	0x3f, 0x20, 0x2d, 0x72, 0x20, 0x3a, 0x20, 0x72, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // ? -r : r);.retur
	0x6e, 0x20, 0x28, 0x79, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x61, 0x6e, // n (y < 0.) ? -an
	0x67, 0x6c, 0x65, 0x20, 0x3a, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // gle : angle;.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x73, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, // loat asin_approx
	0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, // _divPI(const flo
	0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // at v).{.const fl
	0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, // oat x = abs(v);.
	0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, // if(1. - x <= 0.0
	0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, // 0006103515625).r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, // eturn (v >= 0.) 
	0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x3b, 0x0a, 0x63, 0x6f, // ? 0.5 : -0.5;.co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, // nst float res = 
	0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, // ((-0.155972/3.14
	0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, // 1592653589793238
	0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, // 4626433832795) *
	0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, //  x + (1.56467/3.
	0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, // 1415926535897932
	0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, // 384626433832795)
	0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, //  ) * sqrt(1. - x
	0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, // );.return (v >= 
	0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x20, // 0.) ? 0.5 - res 
	0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, // : -0.5 + res;.}.
	0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x61, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x71, 0x75, 0x69, // vec2 ray_to_equi
	0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x75, 0x76, 0x28, 0x63, // rectangular_uv(c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x61, 0x79, 0x29, 0x0a, 0x7b, // onst vec3 ray).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x0a, 0x30, 0x2e, // .return vec2(.0.
	0x35, 0x20, 0x2b, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, // 5 + atan2_approx
	0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x79, 0x2c, 0x20, 0x72, // _div2PI(ray.y, r
	0x61, 0x79, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, // ay.x),.acos_appr
	0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x7a, 0x29, 0x29, // ox_divPI(ray.z))
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, // ;.}.float InvsRG
	0x42, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, // B(const float co
	0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // lor).{.if (color
	0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, 0x34, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, //  <= 0.04045).ret
	0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, // urn color * (1.0
	0x2f, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, // /12.92);.else.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, // turn pow(color *
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x28, //  (1.0/1.055) + (
	0x30, 0x2e, 0x30, 0x35, 0x35, 0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, // 0.055/1.055), 2.
	0x34, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x52, // 4);.}.float InvR
	0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, // ec709(const floa
	0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, // t color).{.if (c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x38, 0x31, 0x29, 0x0a, 0x72, // olor <= 0.081).r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, // eturn color * (1
	0x2e, 0x30, 0x2f, 0x34, 0x2e, 0x35, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, // .0/4.5);.else.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, // turn pow(color *
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, 0x20, 0x2b, 0x20, 0x28, //  (1.0/1.099) + (
	0x30, 0x2e, 0x30, 0x39, 0x39, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, 0x2c, 0x20, 0x31, 0x2e, // 0.099/1.099), 1.
	0x30, 0x2f, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // 0/0.45);.}.float
	0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, //  InvGamma(const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, // float color).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, // eturn InvsRGB(co
	0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, // lor);.}.vec3 Inv
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, // Gamma(const vec3
	0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, //  color).{.return
	0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, //  vec3(InvGamma(c
	0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, // olor.x),InvGamma
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, // (color.y),InvGam
	0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // ma(color.z));.}.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, // vec3 InvToneMap(
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // const vec3 color
	0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // ).{.const float 
	0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x30, 0x2e, 0x35, 0x2f, 0x30, 0x2e, // inv_2bh = 0.5/0.
	0x32, 0x35, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // 25;.const float 
	0x62, 0x68, 0x20, 0x3d, 0x20, 0x34, 0x2e, 0x30, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2d, 0x20, // bh = 4.0*0.25 - 
	0x32, 0x2e, 0x30, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6c, // 2.0;.return (col
	0x6f, 0x72, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2b, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, // or - 1.0 + sqrt(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2a, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x20, 0x62, // color*(color + b
	0x68, 0x29, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x2a, 0x69, 0x6e, 0x76, 0x5f, 0x32, // h) + 1.0))*inv_2
	0x62, 0x68, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x52, 0x47, 0x42, // bh;.}.float sRGB
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, // (const float f).
	0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, // {.float s;.if (f
	0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x33, 0x31, 0x33, 0x30, 0x38, 0x29, 0x0a, 0x73, //  <= 0.0031308).s
	0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, //  = 12.92 * f;.el
	0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x20, 0x2a, 0x20, 0x70, // se.s = 1.055 * p
	0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x34, 0x29, 0x20, 0x2d, // ow(f, 1.0/2.4) -
	0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, //  0.055;.return s
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, // ;.}.float Rec709
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, // (const float f).
	0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, // {.float s;.if (f
	0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x34, //  <= 0.018).s = 4
	0x2e, 0x35, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, // .5 * f;.else.s =
	0x20, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, //  1.099 * pow(f, 
	0x30, 0x2e, 0x34, 0x35, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x3b, 0x0a, 0x72, // 0.45) - 0.099;.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // eturn s;.}.float
	0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, //  FBGamma(const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // loat color).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, // turn sRGB(color)
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, // ;.}.vec2 FBGamma
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // (const vec2 colo
	0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, // r).{.return vec2
	0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, // (FBGamma(color.x
	0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, // ),FBGamma(color.
	0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, // y));.}.vec3 FBGa
	0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, // mma(const vec3 c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // olor).{.return v
	0x65, 0x63, 0x33, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // ec3(FBGamma(colo
	0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, // r.x),FBGamma(col
	0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, // or.y),FBGamma(co
	0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // lor.z));.}.vec3 
	0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x32, 0x32, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // FBGamma22(const 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // vec3 color).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, // turn vec3(pow(co
	0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, // lor.x, 1.0/2.2),
	0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, 0x30, // pow(color.y, 1.0
	0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, // /2.2),pow(color.
	0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // z, 1.0/2.2));.}.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, // float FBToneMap(
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x29, 0x0a, 0x7b, // const float l).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6c, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, // .return l * ((l*
	0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, // 0.25 + 1.0) / (l
	0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, //  + 1.0));.}.vec2
	0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, //  FBToneMap(const
	0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x63, //  vec2 color).{.c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, // onst float l = d
	0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, // ot(color,vec2(0.
	0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, // 176204+0.0108109
	0x2a, 0x30, 0x2e, 0x35, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2b, 0x30, 0x2e, // *0.5,0.812985+0.
	0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x3b, 0x0a, 0x72, // 0108109*0.5));.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, // eturn color * ((
	0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, // l*0.25 + 1.0) / 
	0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // (l + 1.0));.}.ve
	0x63, 0x33, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, // c3 FBToneMap(con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, // st vec3 color).{
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, // .const float l =
	0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x33, 0x28, //  dot(color,vec3(
	0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, // 0.176204,0.81298
	0x35, 0x2c, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x29, 0x29, 0x3b, 0x0a, 0x72, // 5,0.0108109));.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, // eturn color * ((
	0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, // l*0.25 + 1.0) / 
	0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // (l + 1.0));.}.ve
	0x63, 0x34, 0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x28, 0x63, 0x6f, 0x6e, 0x73, // c4 Additive(cons
	0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, // t vec4 cBase, co
	0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, // nst vec4 cBlend,
	0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, //  const float per
	0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, // cent).{.return c
	0x42, 0x61, 0x73, 0x65, 0x20, 0x2b, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, // Base + cBlend*pe
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, // rcent;.}.vec3 Sc
	0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, // reen (const vec3
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, //  cBase, const ve
	0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // c3 cBlend).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, // urn 1.0 - (1.0 -
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, //  cBase) * (1.0 -
	0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, //  cBlend);.}.vec4
	0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, //  Screen (const v
	0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, // ec4 cBase, const
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, //  vec4 cBlend).{.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, // return 1.0 - (1.
	0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, // 0 - cBase) * (1.
	0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // 0 - cBlend);.}.v
	0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x63, // ec3 ScreenHDR (c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, // onst vec3 cBase,
	0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, //  const vec3 cBle
	0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, // nd).{.return max
	0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, // (1.0 - (1.0 - cB
	0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, // ase) * (1.0 - cB
	0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x2c, 0x30, // lend), vec3(0.,0
	0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, // .,0.));.}.vec4 S
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // creenHDR (const 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, // vec4 cBase, cons
	0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, // t vec4 cBlend).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, // .return max(1.0 
	0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, // - (1.0 - cBase) 
	0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, // * (1.0 - cBlend)
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, // , vec4(0.,0.,0.,
	0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4d, 0x75, 0x6c, // 0.));.}.vec4 Mul
	0x74, 0x69, 0x70, 0x6c, 0x79, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, // tiply (const vec
	0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, // 4 cBase, const v
	0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, // ec4 cBlend, cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, // t float percent)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, // .{.return cBase 
	0x2a, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, // * cBlend*percent
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, // ;.}.vec4 Overlay
	0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, //  (const vec4 cBa
	0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, // se, const vec4 c
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, // Blend).{.vec4 cN
	0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, // ew = step(0.5, c
	0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x69, // Base);.cNew = mi
	0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, // x(cBase*cBlend*2
	0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, // .0, 1.0-2.0*(1.0
	0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, // -cBase)*(1.0-cBl
	0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, // end), cNew);.ret
	0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, // urn cNew;.}.vec4
	0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x48, 0x44, 0x52, 0x20, 0x28, 0x63, 0x6f, 0x6e, //  OverlayHDR (con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, // st vec4 cBase, c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, // onst vec4 cBlend
	0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, // ).{.vec4 cNew = 
	0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, // step(0.5, cBase)
	0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x6d, 0x69, 0x78, // ;.cNew = max(mix
	0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, // (cBase*cBlend*2.
	0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, // 0, 1.0-2.0*(1.0-
	0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, // cBase)*(1.0-cBle
	0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // nd), cNew), vec4
	0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, // (0.,0.,0.,0.));.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // return cNew;.}.v
	0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x73, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, // ec3 cos_hemisphe
	0x72, 0x65, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // re_sample(const 
	0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // vec2 t).{.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x68, 0x69, 0x20, 0x3d, 0x20, 0x74, 0x2e, 0x79, 0x20, // float phi = t.y 
	0x2a, 0x20, 0x28, 0x32, 0x2e, 0x30, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, // * (2.0*3.1415926
	0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, // 5358979323846264
	0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, // 33832795);.const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, //  float cosTheta 
	0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x74, 0x2e, 0x78, // = sqrt(1.0 - t.x
	0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, // );.const float s
	0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x74, // inTheta = sqrt(t
	0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x70, 0x2c, 0x63, 0x70, // .x);.float sp,cp
	0x3b, 0x0a, 0x73, 0x69, 0x6e, 0x63, 0x6f, 0x73, 0x28, 0x70, 0x68, 0x69, 0x2c, 0x73, 0x70, 0x2c, // ;.sincos(phi,sp,
	0x63, 0x70, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, // cp);.return vec3
	0x28, 0x63, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, // (cp * sinTheta, 
	0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x73, 0x70, 0x20, 0x2a, 0x20, 0x73, // cosTheta, sp * s
	0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, // inTheta);.}.vec3
	0x20, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, //  rotate_to_vecto
	0x72, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // r_upper(const ve
	0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // c3 vec, const ve
	0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x28, // c3 normal).{.if(
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x3e, 0x20, 0x2d, 0x30, 0x2e, 0x39, 0x39, // normal.y > -0.99
	0x39, 0x39, 0x39, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, // 999).{.const flo
	0x61, 0x74, 0x20, 0x68, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x28, 0x31, 0x2e, 0x30, 0x2b, // at h = 1.0/(1.0+
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, // normal.y);.const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x20, 0x3d, 0x20, 0x68, 0x2a, 0x6e, 0x6f, //  float hz = h*no
	0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // rmal.z;.const fl
	0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x3d, 0x20, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, // oat hzx = hz*nor
	0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, // mal.x;.return ve
	0x63, 0x33, 0x28, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, // c3(.vec.x * (nor
	0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, // mal.y+hz*normal.
	0x7a, 0x29, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, // z) + vec.y * nor
	0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, // mal.x - vec.z * 
	0x68, 0x7a, 0x78, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, // hzx,.vec.y * nor
	0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, // mal.y - vec.x * 
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, // normal.x - vec.z
	0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x2c, 0x0a, 0x76, 0x65, 0x63, //  * normal.z,.vec
	0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x20, 0x2d, 0x20, // .y * normal.z - 
	0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x2b, 0x20, 0x76, 0x65, // vec.x * hzx + ve
	0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, // c.z * (normal.y+
	0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, // h*normal.x*norma
	0x6c, 0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x72, 0x65, // l.x));.}.else re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x2d, 0x76, 0x65, 0x63, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, // turn -vec;.}.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // form vec4 Stereo
	0x5f, 0x53, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x0a, 0x75, 0x6e, 0x69, // _Saturation;.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // form vec4 Stereo
	0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x3b, 0x0a, 0x75, // _MS_ZPD_YAxis;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, // niform sampler2D
	0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x3b, 0x0a, //  tex_stereo_fb;.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, // uniform sampler2
	0x44, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, // D tex_stereo_dep
	0x74, 0x68, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, // th;.uniform vec4
	0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, 0x76, 0x65, 0x63, //  w_h_height;.vec
	0x33, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, // 3 gatherEyeColor
	0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x69, 0x73, // (vec2 u, bool is
	0x4c, 0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x62, 0x6f, // Left).{.const bo
	0x6f, 0x6c, 0x20, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, // ol yaxis = (Ster
	0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, // eo_MS_ZPD_YAxis.
	0x7a, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // z != 0.);.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // float MaxSeparat
	0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, // ion = (Stereo_MS
	0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x69, // _ZPD_YAxis.x);.i
	0x66, 0x20, 0x28, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, // f (isLeft).{.con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, // st float lminDep
	0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, // th = min(min(tex
	0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // tureLod(tex_ster
	0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, // eo_depth, u + (y
	0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, // axis ? vec2(0.0,
	0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, //  0.500 * MaxSepa
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, // ration) : vec2(0
	0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, // .500 * MaxSepara
	0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, // tion, 0.0)), 0.0
	0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, // ).x,.textureLod(
	0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, // tex_stereo_depth
	0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, // , u + (yaxis ? v
	0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, // ec2(0.0, 0.666 *
	0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, //  MaxSeparation) 
	0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, // : vec2(0.666 * M
	0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, // axSeparation, 0.
	0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, // 0)), 0.0).x),.te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, // xtureLod(tex_ste
	0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, // reo_depth, u + (
	0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, // yaxis ? vec2(0.0
	0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, // , MaxSeparation)
	0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, //  : vec2( MaxSepa
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, // ration, 0.0)), 0
	0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x70, // .0).x);.float lp
	0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, // arallax = max(0.
	0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, // 0, w_h_height.w 
	0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, // + MaxSeparation 
	0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, // * (1.0 - 1.0 / (
	0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, // 0.5 + lminDepth 
	0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // * (1.0 / (Stereo
	0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, // _MS_ZPD_YAxis.y)
	0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, //  - 0.5))));.retu
	0x72, 0x6e, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, // rn textureLod(te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2b, // x_stereo_fb, u +
	0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, //  (yaxis ? vec2(0
	0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, // .0, -lparallax) 
	0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, // : vec2(lparallax
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, // , 0.0)), 0.0).xy
	0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // z;.}.else.{.cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, // t float rminDept
	0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, // h = min(min(text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // ureLod(tex_stere
	0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, // o_depth, u - (ya
	0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, // xis ? vec2(0.0, 
	0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, // 0.500 * MaxSepar
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, // ation) : vec2(0.
	0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // 500 * MaxSeparat
	0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // ion, 0.0)), 0.0)
	0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, // .x,.textureLod(t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, // ex_stereo_depth,
	0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, //  u - (yaxis ? ve
	0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, // c2(0.0, 0.666 * 
	0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, // MaxSeparation) :
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, //  vec2(0.666 * Ma
	0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, // xSeparation, 0.0
	0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, // )), 0.0).x),.tex
	0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // tureLod(tex_ster
	0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, // eo_depth, u - (y
	0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, // axis ? vec2(0.0,
	0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, //  MaxSeparation) 
	0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, // : vec2( MaxSepar
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, // ation, 0.0)), 0.
	0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x70, 0x61, // 0).x);.float rpa
	0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, // rallax = max(0.0
	0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, // , w_h_height.w +
	0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, //  MaxSeparation *
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, //  (1.0 - 1.0 / (0
	0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, // .5 + rminDepth *
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, //  (1.0 / (Stereo_
	0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, // MS_ZPD_YAxis.y) 
	0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // - 0.5))));.retur
	0x6e, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, // n textureLod(tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, // _stereo_fb, u - 
	0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, // (yaxis ? vec2(0.
	0x30, 0x2c, 0x20, 0x2d, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, // 0, -rparallax) :
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, //  vec2(rparallax,
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, //  0.0)), 0.0).xyz
	0x3b, 0x0a, 0x7d, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, // ;.}.}.void gathe
	0x72, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, // rLeftRightColors
	0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, // (vec2 u, out vec
	0x33, 0x20, 0x6c, 0x63, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, // 3 lcol, out vec3
	0x20, 0x72, 0x63, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x62, //  rcol).{.const b
	0x6f, 0x6f, 0x6c, 0x20, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, // ool yaxis = (Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, // reo_MS_ZPD_YAxis
	0x2e, 0x7a, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, // .z != 0.);.const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, //  float MaxSepara
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, // tion = (Stereo_M
	0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, 0x29, 0x3b, 0x0a, // S_ZPD_YAxis.x);.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x6d, 0x69, 0x6e, // const float lmin
	0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, // Depth = min(min(
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, // textureLod(tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, // tereo_depth, u +
	0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, //  (yaxis ? vec2(0
	0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, // .0, 0.500 * MaxS
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, // eparation) : vec
	0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // 2(0.500 * MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, // aration, 0.0)), 
	0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, // 0.0).x,.textureL
	0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, // od(tex_stereo_de
	0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, // pth, u + (yaxis 
	0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, // ? vec2(0.0, 0.66
	0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, // 6 * MaxSeparatio
	0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, // n) : vec2(0.666 
	0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, // * MaxSeparation,
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, //  0.0)), 0.0).x),
	0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, // .textureLod(tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, // stereo_depth, u 
	0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // + (yaxis ? vec2(
	0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // 0.0, MaxSeparati
	0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, // on) : vec2( MaxS
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, // eparation, 0.0))
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // , 0.0).x);.float
	0x20, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, //  lparallax = max
	0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, // (0.0, w_h_height
	0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // .w + MaxSeparati
	0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, // on * (1.0 - 1.0 
	0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, // / (0.5 + lminDep
	0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, // th * (1.0 / (Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, // reo_MS_ZPD_YAxis
	0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x6c, // .y) - 0.5))));.l
	0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, // col = textureLod
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, // (tex_stereo_fb, 
	0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, // u + (yaxis ? vec
	0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, // 2(0.0, -lparalla
	0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, // x) : vec2(lparal
	0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // lax, 0.0)), 0.0)
	0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, // .xyz;.const floa
	0x74, 0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, // t rminDepth = mi
	0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, // n(min(textureLod
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, // (tex_stereo_dept
	0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, // h, u - (yaxis ? 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, // vec2(0.0, 0.500 
	0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, // * MaxSeparation)
	0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, //  : vec2(0.500 * 
	0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, // MaxSeparation, 0
	0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, // .0)), 0.0).x,.te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, // xtureLod(tex_ste
	0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, // reo_depth, u - (
	0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, // yaxis ? vec2(0.0
	0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // , 0.666 * MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // aration) : vec2(
	0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, // 0.666 * MaxSepar
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, // ation, 0.0)), 0.
	0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, // 0).x),.textureLo
	0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, // d(tex_stereo_dep
	0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, // th, u - (yaxis ?
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, //  vec2(0.0, MaxSe
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, // paration) : vec2
	0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, // ( MaxSeparation,
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, //  0.0)), 0.0).x);
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, // .float rparallax
	0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, //  = max(0.0, w_h_
	0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, // height.w + MaxSe
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, // paration * (1.0 
	0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, // - 1.0 / (0.5 + r
	0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, // minDepth * (1.0 
	0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, // / (Stereo_MS_ZPD
	0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, // _YAxis.y) - 0.5)
	0x29, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, // )));.rcol = text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // ureLod(tex_stere
	0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, // o_fb, u - (yaxis
	0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x72, 0x70, //  ? vec2(0.0, -rp
	0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // arallax) : vec2(
	0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, // rparallax, 0.0))
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, // , 0.0).xyz;.}.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // iform mat4 Stere
	0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, // o_LeftMat;.unifo
	0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, // rm mat4 Stereo_R
	0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // ightMat;.uniform
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, //  vec4 Stereo_Lef
	0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, // tLuminance_Gamma
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, // ;.uniform vec4 S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, // tereo_RightLumin
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x3b, 0x0a, 0x76, // ance_DynDesat;.v
	0x6f, 0x69, 0x64, 0x20, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x65, 0x73, 0x61, 0x74, // oid DynamicDesat
	0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, // Anaglyph(const v
	0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // ec3 lCol, const 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, // vec3 rCol, out v
	0x65, 0x63, 0x33, 0x20, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, // ec3 lDesatCol, o
	0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, // ut vec3 rDesatCo
	0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // l).{.const float
	0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, //  left2LeftLum = 
	0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // dot(lCol, Stereo
	0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, // _LeftLuminance_G
	0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, // amma.xyz);.const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, //  float left2Righ
	0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, // tLum = dot(lCol,
	0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, //  Stereo_RightLum
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, // inance_DynDesat.
	0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, // xyz);.const floa
	0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, // t right2LeftLum 
	0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, // = dot(rCol, Ster
	0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, // eo_LeftLuminance
	0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, // _Gamma.xyz);.con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, // st float right2R
	0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, // ightLum = dot(rC
	0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, // ol, Stereo_Right
	0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, // Luminance_DynDes
	0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // at.xyz);.const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x6c, // loat leftLum = l
	0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x6c, 0x65, // eft2LeftLum + le
	0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, // ft2RightLum;.con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // st float rightLu
	0x6d, 0x20, 0x3d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, // m = right2LeftLu
	0x6d, 0x20, 0x2b, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, // m + right2RightL
	0x75, 0x6d, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // um;.const float 
	0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, // leftDesat = Ster
	0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, // eo_RightLuminanc
	0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, // e_DynDesat.w * a
	0x62, 0x73, 0x28, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // bs((left2LeftLum
	0x20, 0x2d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, //  - left2RightLum
	0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, // ) / (leftLum + 0
	0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // .0001));.const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x20, // loat rightDesat 
	0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // = Stereo_RightLu
	0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, // minance_DynDesat
	0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, // .w * abs((right2
	0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, // LeftLum - right2
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x72, 0x69, 0x67, // RightLum) / (rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, 0x29, // htLum + 0.0001))
	0x3b, 0x0a, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, // ;.lDesatCol = mi
	0x78, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, // x(lCol, vec3_spl
	0x61, 0x74, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x66, // at(leftLum), lef
	0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x72, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, // tDesat);.rDesatC
	0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, // ol = mix(rCol, v
	0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, // ec3_splat(rightL
	0x75, 0x6d, 0x29, 0x2c, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, // um), rightDesat)
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x41, // ;.}.vec3 LinearA
	0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // naglyph(const ve
	0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, // c3 lCol, const v
	0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // ec3 rCol).{.cons
	0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x28, // t vec3 color = (
	0x28, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, // ( (vec4(lCol, 1.
	0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, // )) * (Stereo_Lef
	0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x20, 0x28, 0x76, 0x65, 0x63, // tMat) ) + ( (vec
	0x34, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, // 4(rCol, 1.)) * (
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x29, // Stereo_RightMat)
	0x20, 0x29, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, //  )).rgb;.return 
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // color;.}.uniform
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, //  vec4 Stereo_Deg
	0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, // hostGamma;.unifo
	0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, // rm mat4 Stereo_D
	0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3b, 0x0a, 0x76, 0x65, // eghostFilter;.ve
	0x63, 0x33, 0x20, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, // c3 DeghostAnagly
	0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, // ph(const vec3 lC
	0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, // ol, const vec3 r
	0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, // Col).{.const vec
	0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, // 3 color = Linear
	0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, // Anaglyph(lCol, r
	0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, // Col);.return ( (
	0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // pow(color, Stere
	0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x72, // o_DeghostGamma.r
	0x67, 0x62, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x53, 0x74, 0x65, // gb)) * (mat3(Ste
	0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, // reo_DeghostFilte
	0x72, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // r[0].xyz, Stereo
	0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x31, // _DeghostFilter[1
	0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, // ].xyz, Stereo_De
	0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x32, 0x5d, 0x2e, 0x78, // ghostFilter[2].x
	0x79, 0x7a, 0x29, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x6d, // yz)) );.}.void m
	0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, // ain().{.vec3 lCo
	0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x3b, 0x0a, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, // l, rCol;.gatherL
	0x65, 0x66, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x28, 0x76, // eftRightColors(v
	0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2c, 0x20, 0x6c, 0x43, 0x6f, 0x6c, // _texcoord0, lCol
	0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x6c, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, // , rCol);.lCol = 
	0x70, 0x6f, 0x77, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x53, // pow(lCol, vec3(S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, // tereo_LeftLumina
	0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, 0x53, 0x74, 0x65, // nce_Gamma.w, Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, // reo_LeftLuminanc
	0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // e_Gamma.w, Stere
	0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, // o_LeftLuminance_
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x43, 0x6f, 0x6c, 0x20, // Gamma.w));.rCol 
	0x3d, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, // = pow(rCol, vec3
	0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, // (Stereo_LeftLumi
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, 0x53, // nance_Gamma.w, S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, // tereo_LeftLumina
	0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, 0x53, 0x74, 0x65, // nce_Gamma.w, Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, // reo_LeftLuminanc
	0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x29, 0x29, 0x3b, 0x0a, 0x76, 0x65, 0x63, // e_Gamma.w));.vec
	0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2c, 0x20, 0x72, 0x43, 0x6f, // 3 lColDesat, rCo
	0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x3b, 0x0a, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, // lDesat;.DynamicD
	0x65, 0x73, 0x61, 0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, // esatAnaglyph(lCo
	0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x44, 0x65, 0x73, // l, rCol, lColDes
	0x61, 0x74, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, // at, rColDesat);.
	0x6c, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, // lCol = lColDesat
	0x3b, 0x0a, 0x72, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x44, 0x65, 0x73, // ;.rCol = rColDes
	0x61, 0x74, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, // at;.vec3 color =
	0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, //  LinearAnaglyph(
	0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x62, 0x67, 0x66, // lCol, rCol);.bgf
	0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x76, 0x65, // x_FragColor = ve
	0x63, 0x34, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x76, 0x65, // c4(pow(color, ve
	0x63, 0x33, 0x28, 0x31, 0x2e, 0x2f, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, // c3(1./Stereo_Lef
	0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, // tLuminance_Gamma
	0x2e, 0x77, 0x2c, 0x20, 0x31, 0x2e, 0x2f, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, // .w, 1./Stereo_Le
	0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, // ftLuminance_Gamm
	0x61, 0x2e, 0x77, 0x2c, 0x20, 0x31, 0x2e, 0x2f, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, // a.w, 1./Stereo_L
	0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, // eftLuminance_Gam
	0x6d, 0x61, 0x2e, 0x77, 0x29, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // ma.w)), 1.0);.}.
	0x00,                                                                                           // .
};
static const uint8_t fs_pp_stereo_anaglyph_lin_gamma_dyndesat_glsl[11907] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x2e, // FSH.o.><......p.
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x34, 0x34, 0x30, 0x0a, 0x6f, // ..#version 440.o
	0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, // ut vec4 bgfx_Fra
	0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, // gColor;.#define 
	0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x62, 0x67, 0x66, // gl_FragColor bgf
	0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x0a, 0x23, 0x64, 0x65, 0x66, // x_FragColor.#def
	0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x20, 0x20, 0x20, // ine texture2D   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x0a, 0x23, //        texture.#
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, // define texture2D
	0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // Lod       textur
	0x65, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, // eLod.#define tex
	0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ture2DGrad      
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, // textureGrad.#def
	0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, // ine texture2DPro
	0x6a, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, // jLod   texturePr
	0x6f, 0x6a, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, // ojLod.#define te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, 0x20, // xture2DProjGrad 
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, //  textureProjGrad
	0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // .#define texture
	0x43, 0x75, 0x62, 0x65, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, // CubeLod     text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, // ureLod.#define t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, // extureCubeGrad  
	0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, //   textureGrad.#d
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x33, 0x44, 0x20, // efine texture3D 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, //          texture
	0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // .#define texture
	0x32, 0x44, 0x4c, 0x6f, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x20, 0x74, 0x65, 0x78, 0x74, // 2DLodOffset text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x0a, 0x23, 0x64, 0x65, // ureLodOffset.#de
	0x66, 0x69, 0x6e, 0x65, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x69, // fine attribute i
	0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, // n.#define varyin
	0x67, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x62, 0x67, 0x66, // g in.#define bgf
	0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, // xShadow2D(_sampl
	0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, // er, _coord)     
	0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, // vec4_splat(textu
	0x72, 0x65, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, // re(_sampler, _co
	0x6f, 0x72, 0x64, 0x29, 0x20, 0x29, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x62, // ord) ).#define b
	0x67, 0x66, 0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x28, // gfxShadow2DProj(
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, // _sampler, _coord
	0x29, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, // ) vec4_splat(tex
	0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // tureProj(_sample
	0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x29, 0x0a, 0x76, 0x61, 0x72, // r, _coord) ).var
	0x79, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, // ying vec2 v_texc
	0x6f, 0x6f, 0x72, 0x64, 0x30, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, // oord0;.vec3 inst
	0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, // Mul(vec3 _vec, m
	0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // at3 _mtx) { retu
	0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, // rn ( (_vec) * (_
	0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, // mtx) ); }.vec3 i
	0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, // nstMul(mat3 _mtx
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, // , vec3 _vec) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, // eturn ( (_mtx) *
	0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, //  (_vec) ); }.vec
	0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, // 4 instMul(vec4 _
	0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, // vec, mat4 _mtx) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, // { return ( (_vec
	0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, // ) * (_mtx) ); }.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, // vec4 instMul(mat
	0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, // 4 _mtx, vec4 _ve
	0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, // c) { return ( (_
	0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, // mtx) * (_vec) );
	0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, 0x70, 0x28, 0x66, 0x6c, 0x6f, //  }.float rcp(flo
	0x61, 0x74, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // at _a) { return 
	0x31, 0x2e, 0x30, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, // 1.0/_a; }.vec2 r
	0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // cp(vec2 _a) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, // turn vec2(1.0)/_
	0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, // a; }.vec3 rcp(ve
	0x63, 0x33, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // c3 _a) { return 
	0x76, 0x65, 0x63, 0x33, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, // vec3(1.0)/_a; }.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x61, // vec4 rcp(vec4 _a
	0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, // ) { return vec4(
	0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, // 1.0)/_a; }.vec2 
	0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, // vec2_splat(float
	0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, //  _x) { return ve
	0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, // c2(_x, _x); }.ve
	0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, // c3 vec3_splat(fl
	0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // oat _x) { return
	0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, //  vec3(_x, _x, _x
	0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, // ); }.vec4 vec4_s
	0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, // plat(float _x) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, //  return vec4(_x,
	0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, //  _x, _x, _x); }.
	0x75, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, // uvec2 uvec2_spla
	0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // t(uint _x) { ret
	0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, // urn uvec2(_x, _x
	0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, // ); }.uvec3 uvec3
	0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, // _splat(uint _x) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, // { return uvec3(_
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, // x, _x, _x); }.uv
	0x65, 0x63, 0x34, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, // ec4 uvec4_splat(
	0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, // uint _x) { retur
	0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, // n uvec4(_x, _x, 
	0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, // _x, _x); }.mat4 
	0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, // mtxFromRows(vec4
	0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, //  _0, vec4 _1, ve
	0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, // c4 _2, vec4 _3).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, // {.return transpo
	0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, // se(mat4(_0, _1, 
	0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, // _2, _3) );.}.mat
	0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, // 4 mtxFromCols(ve
	0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, // c4 _0, vec4 _1, 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, // vec4 _2, vec4 _3
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x28, // ).{.return mat4(
	0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x3b, // _0, _1, _2, _3);
	0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, // .}.mat3 mtxFromR
	0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, // ows(vec3 _0, vec
	0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, // 3 _1, vec3 _2).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, // .return transpos
	0x65, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, // e(mat3(_0, _1, _
	0x32, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, // 2) );.}.mat3 mtx
	0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, // FromCols(vec3 _0
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // , vec3 _1, vec3 
	0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, // _2).{.return mat
	0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x3b, 0x0a, 0x7d, // 3(_0, _1, _2);.}
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, // .uniform vec4 u_
	0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // viewRect;.unifor
	0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x54, 0x65, 0x78, // m vec4 u_viewTex
	0x65, 0x6c, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, // el;.uniform mat4
	0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, //  u_view;.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x3b, //  mat4 u_invView;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, // .uniform mat4 u_
	0x70, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, // proj;.uniform ma
	0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, // t4 u_invProj;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, // iform mat4 u_vie
	0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, // wProj;.uniform m
	0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, // at4 u_invViewPro
	0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, // j;.uniform mat4 
	0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, 0x3b, 0x0a, 0x75, 0x6e, 0x69, // u_model[32];.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, // form mat4 u_mode
	0x6c, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, // lView;.uniform m
	0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x50, // at4 u_modelViewP
	0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, // roj;.uniform vec
	0x34, 0x20, 0x75, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x66, 0x34, 0x3b, 0x0a, 0x66, // 4 u_alphaRef4;.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // loat sqr(const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // loat v).{.return
	0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x73, 0x71, 0x72, //  v*v;.}.vec2 sqr
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x29, 0x0a, 0x7b, // (const vec2 v).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // .return v*v;.}.v
	0x65, 0x63, 0x33, 0x20, 0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // ec3 sqr(const ve
	0x63, 0x33, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // c3 v).{.return v
	0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6d, 0x75, 0x6c, 0x5f, 0x77, // *v;.}.vec3 mul_w
	0x31, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x2c, 0x20, // 1(const vec3 v, 
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x29, 0x0a, 0x7b, 0x0a, // const mat4 m).{.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2e, 0x78, 0x2a, 0x6d, 0x5b, 0x30, 0x5d, 0x2e, // return v.x*m[0].
	0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x79, 0x2a, 0x6d, 0x5b, 0x31, 0x5d, 0x2e, // xyz + (v.y*m[1].
	0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x7a, 0x2a, 0x6d, 0x5b, 0x32, 0x5d, 0x2e, // xyz + (v.z*m[2].
	0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x6d, 0x5b, 0x33, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, // xyz + m[3].xyz))
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, // ;.}.float acos_a
	0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x63, 0x6f, 0x6e, 0x73, // pprox_divPI(cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, // t float v).{.con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, // st float x = abs
	0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, // (v);.if(1. - x <
	0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, // = 0.000061035156
	0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, // 25).return (v >=
	0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x3b, 0x0a, //  0.) ? 0. : 1.;.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, 0x20, // const float res 
	0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, // = ((-0.155972/3.
	0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, // 1415926535897932
	0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, // 384626433832795)
	0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, //  * x + (1.56467/
	0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, // 3.14159265358979
	0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, // 3238462643383279
	0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, // 5) ) * sqrt(1. -
	0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, //  x);.return (v >
	0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x31, 0x2e, // = 0.) ? res : 1.
	0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, //  - res;.}.float 
	0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, // atan2_approx_div
	0x32, 0x50, 0x49, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // 2PI(const float 
	0x79, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, // y, const float x
	0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // ).{.const float 
	0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x79, 0x29, 0x3b, 0x0a, // abs_y = abs(y);.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, // const float abs_
	0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x78, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x61, // x = abs(x);.if(a
	0x62, 0x73, 0x5f, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, // bs_x <= 0.000061
	0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x20, 0x26, 0x26, 0x20, 0x61, 0x62, 0x73, 0x5f, // 03515625 && abs_
	0x79, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, // y <= 0.000061035
	0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x30, 0x2e, // 15625).return 0.
	0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x20, // ;.const float r 
	0x3d, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2d, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, // = (abs_x - abs_y
	0x29, 0x20, 0x2f, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2b, 0x20, 0x61, 0x62, 0x73, // ) / (abs_x + abs
	0x5f, 0x79, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // _y);.const float
	0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, //  angle = ((x < 0
	0x2e, 0x29, 0x20, 0x3f, 0x20, 0x28, 0x33, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x20, 0x3a, 0x20, 0x28, // .) ? (3./8.) : (
	0x31, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x29, 0x0a, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x32, 0x31, 0x31, // 1./8.)).+ (0.211
	0x38, 0x36, 0x38, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, // 868 /(2.*3.14159
	0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, // 2653589793238462
	0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x72, 0x20, // 6433832795) * r 
	0x2a, 0x20, 0x72, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x39, 0x38, 0x37, 0x33, 0x30, 0x35, 0x20, 0x2f, // * r - 0.987305 /
	0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, // (2.*3.1415926535
	0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, // 8979323846264338
	0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, // 32795)) * ((x < 
	0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x72, 0x20, 0x3a, 0x20, 0x72, 0x29, 0x3b, 0x0a, 0x72, // 0.) ? -r : r);.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x79, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, // eturn (y < 0.) ?
	0x20, 0x2d, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3a, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x3b, //  -angle : angle;
	0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x73, 0x69, 0x6e, 0x5f, 0x61, 0x70, // .}.float asin_ap
	0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, // prox_divPI(const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, //  float v).{.cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, // t float x = abs(
	0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, // v);.if(1. - x <=
	0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, //  0.0000610351562
	0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, // 5).return (v >= 
	0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, // 0.) ? 0.5 : -0.5
	0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, // ;.const float re
	0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, // s = ((-0.155972/
	0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, // 3.14159265358979
	0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, // 3238462643383279
	0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, // 5) * x + (1.5646
	0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, // 7/3.141592653589
	0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, // 7932384626433832
	0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, // 795) ) * sqrt(1.
	0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, //  - x);.return (v
	0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x2d, 0x20, //  >= 0.) ? 0.5 - 
	0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x65, 0x73, // res : -0.5 + res
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x61, 0x79, 0x5f, 0x74, 0x6f, 0x5f, // ;.}.vec2 ray_to_
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, // equirectangular_
	0x75, 0x76, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x61, // uv(const vec3 ra
	0x79, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, // y).{.return vec2
	0x28, 0x0a, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, // (.0.5 + atan2_ap
	0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, // prox_div2PI(ray.
	0x79, 0x2c, 0x20, 0x72, 0x61, 0x79, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x61, 0x63, 0x6f, 0x73, 0x5f, // y, ray.x),.acos_
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, // approx_divPI(ray
	0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, // .z));.}.float In
	0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, // vsRGB(const floa
	0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, // t color).{.if (c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, 0x34, 0x35, 0x29, // olor <= 0.04045)
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, // .return color * 
	0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, // (1.0/12.92);.els
	0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, // e.return pow(col
	0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, // or * (1.0/1.055)
	0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, //  + (0.055/1.055)
	0x2c, 0x20, 0x32, 0x2e, 0x34, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // , 2.4);.}.float 
	0x49, 0x6e, 0x76, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // InvRec709(const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, // float color).{.i
	0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x38, // f (color <= 0.08
	0x31, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, // 1).return color 
	0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x34, 0x2e, 0x35, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, // * (1.0/4.5);.els
	0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, // e.return pow(col
	0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, // or * (1.0/1.099)
	0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, //  + (0.099/1.099)
	0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // , 1.0/0.45);.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, // loat InvGamma(co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, // nst float color)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, // .{.return InvsRG
	0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, // B(color);.}.vec3
	0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, //  InvGamma(const 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // vec3 color).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, // turn vec3(InvGam
	0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, // ma(color.x),InvG
	0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x49, 0x6e, // amma(color.y),In
	0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, // vGamma(color.z))
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x54, 0x6f, 0x6e, 0x65, // ;.}.vec3 InvTone
	0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, // Map(const vec3 c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // olor).{.const fl
	0x6f, 0x61, 0x74, 0x20, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x30, 0x2e, // oat inv_2bh = 0.
	0x35, 0x2f, 0x30, 0x2e, 0x32, 0x35, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // 5/0.25;.const fl
	0x6f, 0x61, 0x74, 0x20, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x34, 0x2e, 0x30, 0x2a, 0x30, 0x2e, 0x32, // oat bh = 4.0*0.2
	0x35, 0x20, 0x2d, 0x20, 0x32, 0x2e, 0x30, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // 5 - 2.0;.return 
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2b, 0x20, 0x73, // (color - 1.0 + s
	0x71, 0x72, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2a, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // qrt(color*(color
	0x20, 0x2b, 0x20, 0x62, 0x68, 0x29, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x2a, 0x69, //  + bh) + 1.0))*i
	0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // nv_2bh;.}.float 
	0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // sRGB(const float
	0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, //  f).{.float s;.i
	0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x33, 0x31, 0x33, 0x30, // f (f <= 0.003130
	0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x20, 0x2a, 0x20, 0x66, // 8).s = 12.92 * f
	0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x35, 0x35, // ;.else.s = 1.055
	0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, //  * pow(f, 1.0/2.
	0x34, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // 4) - 0.055;.retu
	0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x52, 0x65, // rn s;.}.float Re
	0x63, 0x37, 0x30, 0x39, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // c709(const float
	0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, //  f).{.float s;.i
	0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, 0x29, 0x0a, 0x73, // f (f <= 0.018).s
	0x20, 0x3d, 0x20, 0x34, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, //  = 4.5 * f;.else
	0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, // .s = 1.099 * pow
	0x28, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x39, // (f, 0.45) - 0.09
	0x39, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // 9;.return s;.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, // loat FBGamma(con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, // st float color).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, // {.return sRGB(co
	0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x47, // lor);.}.vec2 FBG
	0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, // amma(const vec2 
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // color).{.return 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, // vec2(FBGamma(col
	0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, // or.x),FBGamma(co
	0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // lor.y));.}.vec3 
	0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // FBGamma(const ve
	0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, // c3 color).{.retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, // rn vec3(FBGamma(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, // color.x),FBGamma
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, // (color.y),FBGamm
	0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // a(color.z));.}.v
	0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x32, 0x32, 0x28, 0x63, 0x6f, // ec3 FBGamma22(co
	0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, // nst vec3 color).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x70, 0x6f, // {.return vec3(po
	0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, // w(color.x, 1.0/2
	0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x2c, // .2),pow(color.y,
	0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, //  1.0/2.2),pow(co
	0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x29, // lor.z, 1.0/2.2))
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, // ;.}.float FBTone
	0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // Map(const float 
	0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6c, 0x20, 0x2a, 0x20, // l).{.return l * 
	0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, // ((l*0.25 + 1.0) 
	0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // / (l + 1.0));.}.
	0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x63, // vec2 FBToneMap(c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, // onst vec2 color)
	0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, // .{.const float l
	0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, //  = dot(color,vec
	0x32, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, // 2(0.176204+0.010
	0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, // 8109*0.5,0.81298
	0x35, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x29, // 5+0.0108109*0.5)
	0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, // );.return color 
	0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, // * ((l*0.25 + 1.0
	0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, // ) / (l + 1.0));.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, // }.vec3 FBToneMap
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // (const vec3 colo
	0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // r).{.const float
	0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, //  l = dot(color,v
	0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2c, 0x30, 0x2e, 0x38, // ec3(0.176204,0.8
	0x31, 0x32, 0x39, 0x38, 0x35, 0x2c, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x29, // 12985,0.0108109)
	0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, // );.return color 
	0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, // * ((l*0.25 + 1.0
	0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, // ) / (l + 1.0));.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x28, // }.vec4 Additive(
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, // const vec4 cBase
	0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, // , const vec4 cBl
	0x65, 0x6e, 0x64, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // end, const float
	0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, //  percent).{.retu
	0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2b, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // rn cBase + cBlen
	0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // d*percent;.}.vec
	0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // 3 Screen (const 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, // vec3 cBase, cons
	0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, // t vec3 cBlend).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, // .return 1.0 - (1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, // .0 - cBase) * (1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // .0 - cBlend);.}.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6e, // vec4 Screen (con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, // st vec4 cBase, c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, // onst vec4 cBlend
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, // ).{.return 1.0 -
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, //  (1.0 - cBase) *
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, //  (1.0 - cBlend);
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, // .}.vec3 ScreenHD
	0x52, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, // R (const vec3 cB
	0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // ase, const vec3 
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // cBlend).{.return
	0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, //  max(1.0 - (1.0 
	0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, // - cBase) * (1.0 
	0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, // - cBlend), vec3(
	0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // 0.,0.,0.));.}.ve
	0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x63, 0x6f, // c4 ScreenHDR (co
	0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, // nst vec4 cBase, 
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // const vec4 cBlen
	0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, // d).{.return max(
	0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, // 1.0 - (1.0 - cBa
	0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, // se) * (1.0 - cBl
	0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, // end), vec4(0.,0.
	0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, // ,0.,0.));.}.vec4
	0x20, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, //  Multiply (const
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, //  vec4 cBase, con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, // st vec4 cBlend, 
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, // const float perc
	0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, // ent).{.return cB
	0x61, 0x73, 0x65, 0x20, 0x2a, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, // ase * cBlend*per
	0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, // cent;.}.vec4 Ove
	0x72, 0x6c, 0x61, 0x79, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, // rlay (const vec4
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, //  cBase, const ve
	0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, // c4 cBlend).{.vec
	0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, // 4 cNew = step(0.
	0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, // 5, cBase);.cNew 
	0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, // = mix(cBase*cBle
	0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, // nd*2.0, 1.0-2.0*
	0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, // (1.0-cBase)*(1.0
	0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x3b, // -cBlend), cNew);
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, // .return cNew;.}.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x48, 0x44, 0x52, 0x20, // vec4 OverlayHDR 
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, // (const vec4 cBas
	0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // e, const vec4 cB
	0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, // lend).{.vec4 cNe
	0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, // w = step(0.5, cB
	0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, // ase);.cNew = max
	0x28, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, // (mix(cBase*cBlen
	0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, // d*2.0, 1.0-2.0*(
	0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, // 1.0-cBase)*(1.0-
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x2c, 0x20, // cBlend), cNew), 
	0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, // vec4(0.,0.,0.,0.
	0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, // ));.return cNew;
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x73, 0x5f, 0x68, 0x65, 0x6d, 0x69, // .}.vec3 cos_hemi
	0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x63, 0x6f, // sphere_sample(co
	0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, // nst vec2 t).{.co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x68, 0x69, 0x20, 0x3d, 0x20, // nst float phi = 
	0x74, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x28, 0x32, 0x2e, 0x30, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, // t.y * (2.0*3.141
	0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, // 5926535897932384
	0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x3b, 0x0a, 0x63, // 626433832795);.c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, // onst float cosTh
	0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, // eta = sqrt(1.0 -
	0x20, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, //  t.x);.const flo
	0x61, 0x74, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, // at sinTheta = sq
	0x72, 0x74, 0x28, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, // rt(t.x);.float s
	0x70, 0x2c, 0x63, 0x70, 0x3b, 0x0a, 0x73, 0x69, 0x6e, 0x63, 0x6f, 0x73, 0x28, 0x70, 0x68, 0x69, // p,cp;.sincos(phi
	0x2c, 0x73, 0x70, 0x2c, 0x63, 0x70, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // ,sp,cp);.return 
	0x76, 0x65, 0x63, 0x33, 0x28, 0x63, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, // vec3(cp * sinThe
	0x74, 0x61, 0x2c, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x73, 0x70, // ta, cosTheta, sp
	0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, //  * sinTheta);.}.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x76, // vec3 rotate_to_v
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, // ector_upper(cons
	0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, // t vec3 vec, cons
	0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x29, 0x0a, 0x7b, // t vec3 normal).{
	0x0a, 0x69, 0x66, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x3e, 0x20, 0x2d, // .if(normal.y > -
	0x30, 0x2e, 0x39, 0x39, 0x39, 0x39, 0x39, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, // 0.99999).{.const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x28, //  float h = 1.0/(
	0x31, 0x2e, 0x30, 0x2b, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x63, // 1.0+normal.y);.c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x20, 0x3d, 0x20, // onst float hz = 
	0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // h*normal.z;.cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x3d, 0x20, 0x68, 0x7a, // t float hzx = hz
	0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // *normal.x;.retur
	0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, // n vec3(.vec.x * 
	0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, // (normal.y+hz*nor
	0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x29, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, // mal.z) + vec.y *
	0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, //  normal.x - vec.
	0x7a, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, // z * hzx,.vec.y *
	0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, //  normal.y - vec.
	0x78, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, // x * normal.x - v
	0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x2c, // ec.z * normal.z,
	0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, // .vec.y * normal.
	0x7a, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x20, // z - vec.x * hzx 
	0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, // + vec.z * (norma
	0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x2a, 0x6e, // l.y+h*normal.x*n
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, // ormal.x));.}.els
	0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x2d, 0x76, 0x65, 0x63, 0x3b, 0x0a, 0x7d, // e return -vec;.}
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, // .uniform vec4 St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x53, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3b, // ereo_Saturation;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, // .uniform vec4 St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, // ereo_MS_ZPD_YAxi
	0x73, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, // s;.uniform sampl
	0x65, 0x72, 0x32, 0x44, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // er2D tex_stereo_
	0x66, 0x62, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, // fb;.uniform samp
	0x6c, 0x65, 0x72, 0x32, 0x44, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // ler2D tex_stereo
	0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // _depth;.uniform 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, // vec4 w_h_height;
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, // .vec3 gatherEyeC
	0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x62, 0x6f, 0x6f, // olor(vec2 u, boo
	0x6c, 0x20, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // l isLeft).{.cons
	0x74, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3d, 0x20, 0x28, // t bool yaxis = (
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, // Stereo_MS_ZPD_YA
	0x78, 0x69, 0x73, 0x2e, 0x7a, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x3b, 0x0a, 0x63, 0x6f, // xis.z != 0.);.co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // nst float MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, // aration = (Stere
	0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x78, // o_MS_ZPD_YAxis.x
	0x29, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, // );.if (isLeft).{
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x6d, 0x69, // .const float lmi
	0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, // nDepth = min(min
	0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, // (textureLod(tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, // stereo_depth, u 
	0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // + (yaxis ? vec2(
	0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, // 0.0, 0.500 * Max
	0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, // Separation) : ve
	0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, // c2(0.500 * MaxSe
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, // paration, 0.0)),
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, //  0.0).x,.texture
	0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, // Lod(tex_stereo_d
	0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, // epth, u + (yaxis
	0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, //  ? vec2(0.0, 0.6
	0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // 66 * MaxSeparati
	0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, // on) : vec2(0.666
	0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, //  * MaxSeparation
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, // , 0.0)), 0.0).x)
	0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, // ,.textureLod(tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, // _stereo_depth, u
	0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, //  + (yaxis ? vec2
	0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // (0.0, MaxSeparat
	0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, // ion) : vec2( Max
	0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // Separation, 0.0)
	0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // ), 0.0).x);.floa
	0x74, 0x20, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, // t lparallax = ma
	0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, // x(0.0, w_h_heigh
	0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // t.w + MaxSeparat
	0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, // ion * (1.0 - 1.0
	0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, //  / (0.5 + lminDe
	0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, // pth * (1.0 / (St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, // ereo_MS_ZPD_YAxi
	0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, // s.y) - 0.5))));.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, // return textureLo
	0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, // d(tex_stereo_fb,
	0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, //  u + (yaxis ? ve
	0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, // c2(0.0, -lparall
	0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x6c, 0x70, 0x61, 0x72, 0x61, // ax) : vec2(lpara
	0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, // llax, 0.0)), 0.0
	0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x7b, 0x0a, // ).xyz;.}.else.{.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x6d, 0x69, 0x6e, // const float rmin
	0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, // Depth = min(min(
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, // textureLod(tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, // tereo_depth, u -
	0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, //  (yaxis ? vec2(0
	0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, // .0, 0.500 * MaxS
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, // eparation) : vec
	0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, // 2(0.500 * MaxSep
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, // aration, 0.0)), 
	0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, // 0.0).x,.textureL
	0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, // od(tex_stereo_de
	0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, // pth, u - (yaxis 
	0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, // ? vec2(0.0, 0.66
	0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, // 6 * MaxSeparatio
	0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, // n) : vec2(0.666 
	0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, // * MaxSeparation,
	0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, //  0.0)), 0.0).x),
	0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, // .textureLod(tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, // stereo_depth, u 
	0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // - (yaxis ? vec2(
	0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // 0.0, MaxSeparati
	0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, // on) : vec2( MaxS
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, // eparation, 0.0))
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // , 0.0).x);.float
	0x20, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, //  rparallax = max
	0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, // (0.0, w_h_height
	0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, // .w + MaxSeparati
	0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, // on * (1.0 - 1.0 
	0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, // / (0.5 + rminDep
	0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, // th * (1.0 / (Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, // reo_MS_ZPD_YAxis
	0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x72, // .y) - 0.5))));.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, // eturn textureLod
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, // (tex_stereo_fb, 
	0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, // u - (yaxis ? vec
	0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, // 2(0.0, -rparalla
	0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, // x) : vec2(rparal
	0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // lax, 0.0)), 0.0)
	0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x67, // .xyz;.}.}.void g
	0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, // atherLeftRightCo
	0x6c, 0x6f, 0x72, 0x73, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x6f, 0x75, 0x74, // lors(vec2 u, out
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x63, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, //  vec3 lcol, out 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, // vec3 rcol).{.con
	0x73, 0x74, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3d, 0x20, // st bool yaxis = 
	0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, // (Stereo_MS_ZPD_Y
	0x41, 0x78, 0x69, 0x73, 0x2e, 0x7a, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x3b, 0x0a, 0x63, // Axis.z != 0.);.c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, // onst float MaxSe
	0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, // paration = (Ster
	0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, // eo_MS_ZPD_YAxis.
	0x78, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // x);.const float 
	0x6c, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, // lminDepth = min(
	0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, // min(textureLod(t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, // ex_stereo_depth,
	0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, //  u + (yaxis ? ve
	0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, // c2(0.0, 0.500 * 
	0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, // MaxSeparation) :
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, //  vec2(0.500 * Ma
	0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, // xSeparation, 0.0
	0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, // )), 0.0).x,.text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // ureLod(tex_stere
	0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, // o_depth, u + (ya
	0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, // xis ? vec2(0.0, 
	0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, // 0.666 * MaxSepar
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, // ation) : vec2(0.
	0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // 666 * MaxSeparat
	0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // ion, 0.0)), 0.0)
	0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, // .x),.textureLod(
	0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, // tex_stereo_depth
	0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, // , u + (yaxis ? v
	0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, // ec2(0.0, MaxSepa
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x20, // ration) : vec2( 
	0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, // MaxSeparation, 0
	0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, // .0)), 0.0).x);.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, // loat lparallax =
	0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, //  max(0.0, w_h_he
	0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, // ight.w + MaxSepa
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, // ration * (1.0 - 
	0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x6c, 0x6d, 0x69, // 1.0 / (0.5 + lmi
	0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, // nDepth * (1.0 / 
	0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, // (Stereo_MS_ZPD_Y
	0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, // Axis.y) - 0.5)))
	0x29, 0x3b, 0x0a, 0x6c, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // );.lcol = textur
	0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // eLod(tex_stereo_
	0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2b, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, // fb, u + (yaxis ?
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x2d, 0x6c, 0x70, 0x61, 0x72, //  vec2(0.0, -lpar
	0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x6c, 0x70, // allax) : vec2(lp
	0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, // arallax, 0.0)), 
	0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // 0.0).xyz;.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, // float rminDepth 
	0x3d, 0x20, 0x6d, 0x69, 0x6e, 0x28, 0x6d, 0x69, 0x6e, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // = min(min(textur
	0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // eLod(tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, // depth, u - (yaxi
	0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, // s ? vec2(0.0, 0.
	0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // 500 * MaxSeparat
	0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x35, 0x30, // ion) : vec2(0.50
	0x30, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, // 0 * MaxSeparatio
	0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, // n, 0.0)), 0.0).x
	0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, // ,.textureLod(tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, // _stereo_depth, u
	0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, //  - (yaxis ? vec2
	0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, // (0.0, 0.666 * Ma
	0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, 0x76, // xSeparation) : v
	0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x36, 0x36, 0x36, 0x20, 0x2a, 0x20, 0x4d, 0x61, 0x78, 0x53, // ec2(0.666 * MaxS
	0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, // eparation, 0.0))
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x74, 0x65, 0x78, 0x74, 0x75, // , 0.0).x),.textu
	0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // reLod(tex_stereo
	0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, 0x61, 0x78, // _depth, u - (yax
	0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x4d, // is ? vec2(0.0, M
	0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x3a, 0x20, // axSeparation) : 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x20, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, // vec2( MaxSeparat
	0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, // ion, 0.0)), 0.0)
	0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x70, 0x61, 0x72, 0x61, // .x);.float rpara
	0x6c, 0x6c, 0x61, 0x78, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x30, 0x2e, 0x30, 0x2c, 0x20, // llax = max(0.0, 
	0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x4d, // w_h_height.w + M
	0x61, 0x78, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x2a, 0x20, 0x28, // axSeparation * (
	0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x30, 0x2e, 0x35, // 1.0 - 1.0 / (0.5
	0x20, 0x2b, 0x20, 0x72, 0x6d, 0x69, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x20, 0x2a, 0x20, 0x28, //  + rminDepth * (
	0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, // 1.0 / (Stereo_MS
	0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, // _ZPD_YAxis.y) - 
	0x30, 0x2e, 0x35, 0x29, 0x29, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, // 0.5))));.rcol = 
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, // textureLod(tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x75, 0x20, 0x2d, 0x20, 0x28, 0x79, // tereo_fb, u - (y
	0x61, 0x78, 0x69, 0x73, 0x20, 0x3f, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x30, 0x2c, // axis ? vec2(0.0,
	0x20, 0x2d, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x29, 0x20, 0x3a, 0x20, 0x76, //  -rparallax) : v
	0x65, 0x63, 0x32, 0x28, 0x72, 0x70, 0x61, 0x72, 0x61, 0x6c, 0x6c, 0x61, 0x78, 0x2c, 0x20, 0x30, // ec2(rparallax, 0
	0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, // .0)), 0.0).xyz;.
	0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, // }.uniform mat4 S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, // tereo_LeftMat;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, // niform mat4 Ster
	0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, // eo_RightMat;.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // form vec4 Stereo
	0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, // _LeftLuminance_G
	0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, // amma;.uniform ve
	0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, // c4 Stereo_RightL
	0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, // uminance_DynDesa
	0x74, 0x3b, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, // t;.void DynamicD
	0x65, 0x73, 0x61, 0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, // esatAnaglyph(con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, // st vec3 lCol, co
	0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, // nst vec3 rCol, o
	0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, // ut vec3 lDesatCo
	0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x44, 0x65, 0x73, // l, out vec3 rDes
	0x61, 0x74, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // atCol).{.const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, // loat left2LeftLu
	0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, // m = dot(lCol, St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, // ereo_LeftLuminan
	0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, // ce_Gamma.xyz);.c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, // onst float left2
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, // RightLum = dot(l
	0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, // Col, Stereo_Righ
	0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, // tLuminance_DynDe
	0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // sat.xyz);.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, // float right2Left
	0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // Lum = dot(rCol, 
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, // Stereo_LeftLumin
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, // ance_Gamma.xyz);
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, // .const float rig
	0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, // ht2RightLum = do
	0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, // t(rCol, Stereo_R
	0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, // ightLuminance_Dy
	0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, // nDesat.xyz);.con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // st float leftLum
	0x20, 0x3d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, //  = left2LeftLum 
	0x2b, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, // + left2RightLum;
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, // .const float rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, // htLum = right2Le
	0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, // ftLum + right2Ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // ghtLum;.const fl
	0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, // oat leftDesat = 
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, // Stereo_RightLumi
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, // nance_DynDesat.w
	0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, //  * abs((left2Lef
	0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, // tLum - left2Righ
	0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // tLum) / (leftLum
	0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, //  + 0.0001));.con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, // st float rightDe
	0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, // sat = Stereo_Rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, // htLuminance_DynD
	0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x72, 0x69, // esat.w * abs((ri
	0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x72, 0x69, // ght2LeftLum - ri
	0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, // ght2RightLum) / 
	0x28, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, // (rightLum + 0.00
	0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, // 01));.lDesatCol 
	0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, // = mix(lCol, vec3
	0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, // _splat(leftLum),
	0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x72, 0x44, 0x65, //  leftDesat);.rDe
	0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x72, 0x43, 0x6f, // satCol = mix(rCo
	0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x72, 0x69, // l, vec3_splat(ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, // ghtLum), rightDe
	0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x4c, 0x69, 0x6e, // sat);.}.vec3 Lin
	0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, // earAnaglyph(cons
	0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, // t vec3 lCol, con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, // st vec3 rCol).{.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // const vec3 color
	0x20, 0x3d, 0x20, 0x28, 0x28, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x6c, 0x43, 0x6f, 0x6c, //  = (( (vec4(lCol
	0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // , 1.)) * (Stereo
	0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x20, // _LeftMat) ) + ( 
	0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, // (vec4(rCol, 1.))
	0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, //  * (Stereo_Right
	0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x72, 0x65, 0x74, // Mat) )).rgb;.ret
	0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, // urn color;.}.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // form vec4 Stereo
	0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, // _DeghostGamma;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, // niform mat4 Ster
	0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, // eo_DeghostFilter
	0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x6e, // ;.vec3 DeghostAn
	0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, // aglyph(const vec
	0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // 3 lCol, const ve
	0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, // c3 rCol).{.const
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, //  vec3 color = Li
	0x6e, 0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, // nearAnaglyph(lCo
	0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // l, rCol);.return
	0x20, 0x28, 0x20, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x53, //  ( (pow(color, S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, // tereo_DeghostGam
	0x6d, 0x61, 0x2e, 0x72, 0x67, 0x62, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x6d, 0x61, 0x74, 0x33, // ma.rgb)) * (mat3
	0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, // (Stereo_DeghostF
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, // ilter[0].xyz, St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, // ereo_DeghostFilt
	0x65, 0x72, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // er[1].xyz, Stere
	0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, // o_DeghostFilter[
	0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, // 2].xyz)) );.}.vo
	0x69, 0x64, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, // id main().{.vec3
	0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x3b, 0x0a, 0x67, 0x61, 0x74, //  lCol, rCol;.gat
	0x68, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, // herLeftRightColo
	0x72, 0x73, 0x28, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2c, 0x20, // rs(v_texcoord0, 
	0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x6c, 0x43, 0x6f, // lCol, rCol);.lCo
	0x6c, 0x20, 0x3d, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, // l = pow(lCol, ve
	0x63, 0x33, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, // c3(Stereo_LeftLu
	0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, // minance_Gamma.w,
	0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, //  Stereo_LeftLumi
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, 0x53, // nance_Gamma.w, S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, // tereo_LeftLumina
	0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x29, 0x29, 0x3b, 0x0a, 0x72, // nce_Gamma.w));.r
	0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // Col = pow(rCol, 
	0x76, 0x65, 0x63, 0x33, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, // vec3(Stereo_Left
	0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, // Luminance_Gamma.
	0x77, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, // w, Stereo_LeftLu
	0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, // minance_Gamma.w,
	0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, //  Stereo_LeftLumi
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x29, 0x29, 0x3b, // nance_Gamma.w));
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2c, // .vec3 lColDesat,
	0x20, 0x72, 0x43, 0x6f, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x3b, 0x0a, 0x44, 0x79, 0x6e, 0x61, //  rColDesat;.Dyna
	0x6d, 0x69, 0x63, 0x44, 0x65, 0x73, 0x61, 0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, // micDesatAnaglyph
	0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6c, 0x43, 0x6f, // (lCol, rCol, lCo
	0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x44, 0x65, 0x73, 0x61, // lDesat, rColDesa
	0x74, 0x29, 0x3b, 0x0a, 0x6c, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x44, // t);.lCol = lColD
	0x65, 0x73, 0x61, 0x74, 0x3b, 0x0a, 0x72, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x72, 0x43, 0x6f, // esat;.rCol = rCo
	0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, // lDesat;.vec3 col
	0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, // or = LinearAnagl
	0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, // yph(lCol, rCol);
	0x0a, 0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, // .gl_FragColor = 
	0x76, 0x65, 0x63, 0x34, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, // vec4(pow(color, 
	0x76, 0x65, 0x63, 0x33, 0x28, 0x31, 0x2e, 0x2f, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, // vec3(1./Stereo_L
	0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, // eftLuminance_Gam
	0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, 0x31, 0x2e, 0x2f, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // ma.w, 1./Stereo_
	0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, // LeftLuminance_Ga
	0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, 0x31, 0x2e, 0x2f, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // mma.w, 1./Stereo
	0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, // _LeftLuminance_G
	0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x29, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, // amma.w)), 1.0);.
	0x7d, 0x0a, 0x00,                                                                               // }..
};
static const uint8_t fs_pp_stereo_anaglyph_lin_gamma_dyndesat_dx11[3268] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x13, 0x53, // FSH.o.><.......S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, // tereo_MS_ZPD_YAx
	0x69, 0x73, 0x12, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x77, 0x5f, 0x68, // is...........w_h
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, // _height.........
	0x00, 0x0e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, // ..Stereo_LeftMat
	0x14, 0x00, 0x20, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x53, 0x74, 0x65, 0x72, 0x65, // .. ........Stere
	0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x00, 0x60, 0x00, 0x04, 0x00, // o_RightMat..`...
	0x00, 0x00, 0x00, 0x00, 0x1a, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, // .....Stereo_Left
	0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x12, // Luminance_Gamma.
	0x00, 0xa0, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // ..........Stereo
	0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, // _RightLuminance_
	0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x12, 0x00, 0xb0, 0x00, 0x01, 0x00, 0x00, 0x00, // DynDesat........
	0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, // ...tex_stereo_fb
	0x30, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x74, 0x65, 0x78, 0x5f, 0x73, // 0..........tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x30, 0x01, 0x01, 0x00, 0x01, // tereo_depth0....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // ......tex_stereo
	0x5f, 0x66, 0x62, 0x30, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x74, 0x65, // _fb0..........te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x30, 0x01, // x_stereo_depth0.
	0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x94, 0x0b, 0x00, 0x00, 0x44, 0x58, 0x42, 0x43, // ............DXBC
	0x2d, 0x96, 0x2f, 0x89, 0x12, 0xf9, 0xae, 0x0d, 0xc7, 0xb2, 0x00, 0xf1, 0xe4, 0x29, 0x3f, 0xe9, // -./..........)?.
	0x01, 0x00, 0x00, 0x00, 0x94, 0x0b, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, // ............,...
	0x84, 0x00, 0x00, 0x00, 0xb8, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x4e, 0x50, 0x00, 0x00, 0x00, // ........ISGNP...
	0x02, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........8.......
	0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, // ................
	0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, // D...............
	0x01, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, // ........SV_POSIT
	0x49, 0x4f, 0x4e, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0xab, 0xab, 0xab, // ION.TEXCOORD....
	0x4f, 0x53, 0x47, 0x4e, 0x2c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, // OSGN,...........
	0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, //  ...............
	0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, // ........SV_TARGE
	0x54, 0x00, 0xab, 0xab, 0x53, 0x48, 0x45, 0x58, 0xd4, 0x0a, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, // T...SHEX....P...
	0xb5, 0x02, 0x00, 0x00, 0x6a, 0x08, 0x00, 0x01, 0x59, 0x00, 0x00, 0x04, 0x46, 0x8e, 0x20, 0x00, // ....j...Y...F. .
	0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x03, 0x00, 0x60, 0x10, 0x00, // ........Z....`..
	0x00, 0x00, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x03, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // ....Z....`......
	0x58, 0x18, 0x00, 0x04, 0x00, 0x70, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x55, 0x00, 0x00, // X....p......UU..
	0x58, 0x18, 0x00, 0x04, 0x00, 0x70, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x55, 0x55, 0x00, 0x00, // X....p......UU..
	0x62, 0x10, 0x00, 0x03, 0x32, 0x10, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x03, // b...2.......e...
	0xf2, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x02, 0x05, 0x00, 0x00, 0x00, // . ......h.......
	0x36, 0x00, 0x00, 0x08, 0x52, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, // 6...R........@..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x38, 0x00, 0x00, 0x0b, 0xa2, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x80, 0x20, 0x00, // 8............. .
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .........@......
	0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x7e, 0x2a, 0x3f, 0x39, 0x00, 0x00, 0x08, // ...?.....~*?9...
	0x12, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, // ........*. .....
	0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x09, // .....@......7...
	0xf2, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // ................
	0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x0b, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // F...............
	0x00, 0x00, 0x00, 0x07, 0xf2, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, // ............F...
	0x00, 0x00, 0x00, 0x00, 0x46, 0x14, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, // ....F...........
	0xf2, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, // ........F...A...
	0x00, 0x00, 0x00, 0x00, 0x46, 0x14, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, // ....F.......H...
	0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // ....CU..".......
	0x46, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x16, 0x7e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // F........~......
	0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .`.......@......
	0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x42, 0x00, 0x10, 0x00, // H.......CU..B...
	0x01, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x96, 0x7c, 0x10, 0x00, // .............|..
	0x01, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, // .....`.......@..
	0x00, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x07, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // ....3...".......
	0x2a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // *...............
	0x36, 0x00, 0x00, 0x06, 0x22, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0a, 0x80, 0x20, 0x00, // 6..."......... .
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x08, 0x52, 0x00, 0x10, 0x00, // ........6...R...
	0x02, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .....@..........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x09, 0xc2, 0x00, 0x10, 0x00, // ........7.......
	0x01, 0x00, 0x00, 0x00, 0x06, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x04, 0x10, 0x00, // ................
	0x02, 0x00, 0x00, 0x00, 0x56, 0x01, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, // ....V...........
	0x32, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // 2...............
	0x46, 0x10, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0xc2, 0x00, 0x10, 0x00, // F...............
	0x01, 0x00, 0x00, 0x00, 0xa6, 0x0e, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, // ........A.......
	0x06, 0x14, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, // ........H.......
	0x43, 0x55, 0x15, 0x00, 0x42, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, // CU..B...........
	0x01, 0x00, 0x00, 0x00, 0x96, 0x7c, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, // .....|.......`..
	0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, // .....@......H...
	0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x82, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // ....CU..........
	0x46, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x96, 0x73, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // F........s......
	0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .`.......@......
	0x33, 0x00, 0x00, 0x07, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, // 3...".......:...
	0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x0b, // ................
	0x82, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, // .........@.....?
	0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x1a, 0x80, 0x20, 0x00, // ...?...?...?.. .
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x82, 0x00, 0x10, 0x00, // ................
	0x01, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, // ....:........@..
	0x00, 0x00, 0x00, 0xbf, 0x32, 0x00, 0x00, 0x09, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // ....2...".......
	0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // ........:.......
	0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x0e, 0x00, 0x00, 0x0a, 0x22, 0x00, 0x10, 0x00, // .@.....?...."...
	0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, // .....@.....?...?
	0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // ...?...?........
	0x00, 0x00, 0x00, 0x08, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x80, // ...."...........
	0x41, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, // A........@.....?
	0x32, 0x00, 0x00, 0x0b, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, 0x80, 0x20, 0x00, // 2..."......... .
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // ................
	0x3a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x07, // :. .........4...
	0x12, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // ................
	0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x06, 0x82, 0x00, 0x10, 0x00, // .@......6.......
	0x02, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, // ........A.......
	0x36, 0x00, 0x00, 0x08, 0x62, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, // 6...b........@..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x37, 0x00, 0x00, 0x09, 0x32, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x06, 0x00, 0x10, 0x00, // 7...2...........
	0x01, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, // ............F...
	0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x32, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, // ........2.......
	0x46, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x10, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // F.......F.......
	0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x72, 0x00, 0x10, 0x00, // H.......CU..r...
	0x02, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, // ....F.......F~..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, // .....`.......@..
	0x00, 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x05, 0x72, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, // ..../...r.......
	0x46, 0x02, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x08, 0x72, 0x00, 0x10, 0x00, // F.......8...r...
	0x02, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0xf6, 0x8f, 0x20, 0x00, // ....F......... .
	0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x05, 0x72, 0x00, 0x10, 0x00, // ............r...
	0x02, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x08, // ....F...........
	0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, // ".......F.......
	0x46, 0x82, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x08, // F. .............
	0x82, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, // ........F.......
	0x46, 0x82, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, // F. .............
	0x12, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // ................
	0x3a, 0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, // :...A...........
	0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // "...............
	0x3a, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x82, 0x00, 0x10, 0x00, // :...............
	0x02, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, // .............@..
	0x17, 0xb7, 0xd1, 0x38, 0x00, 0x00, 0x00, 0x08, 0x72, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, // ...8....r.......
	0x46, 0x02, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x56, 0x05, 0x10, 0x00, // F...A.......V...
	0x01, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x07, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // ........".......
	0x0a, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, // ........:.......
	0x38, 0x00, 0x00, 0x09, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x80, // 8..."...........
	0x81, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, // ........:. .....
	0x0b, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x09, 0x72, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, // ....2...r.......
	0x56, 0x05, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, // V.......F.......
	0x46, 0x02, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x82, 0x00, 0x10, 0x00, // F.......6.......
	0x02, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x11, 0x00, 0x00, 0x08, // .....@.....?....
	0x12, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, // ........F.......
	0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x08, // F. .............
	0x22, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, // ".......F.......
	0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x08, // F. .............
	0x42, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, // B.......F.......
	0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, // F. .........H...
	0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // ....CU..........
	0x46, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // F.......F~......
	0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .`.......@......
	0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x22, 0x00, 0x10, 0x00, // H.......CU.."...
	0x00, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x7e, 0x10, 0x00, // .............~..
	0x01, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, // .....`.......@..
	0x00, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // ....3...........
	0x1a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x33, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, // 3...........*...
	0x01, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x09, // ............2...
	0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x3a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, // :........@.....?
	0x0e, 0x00, 0x00, 0x0a, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, // .............@..
	0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, // ...?...?...?...?
	0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x12, 0x00, 0x10, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........A.......
	0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x32, 0x00, 0x00, 0x0b, 0x12, 0x00, 0x10, 0x00, // .@.....?2.......
	0x00, 0x00, 0x00, 0x00, 0x0a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ...... .........
	0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, // ........:. .....
	0x01, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // ....4...........
	0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .........@......
	0x36, 0x00, 0x00, 0x06, 0x82, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x80, // 6...............
	0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x22, 0x00, 0x10, 0x00, // A.......6..."...
	0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x09, // .....@......7...
	0x32, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // 2...............
	0xe6, 0x0a, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // ........F.......
	0x00, 0x00, 0x00, 0x08, 0x32, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x80, // ....2.......F...
	0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x10, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // A.......F.......
	0x48, 0x00, 0x00, 0x8d, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x72, 0x00, 0x10, 0x00, // H.......CU..r...
	0x00, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, // ....F.......F~..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, // .....`.......@..
	0x00, 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x05, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // ..../...r.......
	0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x08, 0x72, 0x00, 0x10, 0x00, // F.......8...r...
	0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf6, 0x8f, 0x20, 0x00, // ....F......... .
	0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x05, 0x72, 0x00, 0x10, 0x00, // ............r...
	0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x08, // ....F...........
	0x82, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // ........F.......
	0x46, 0x82, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x08, // F. .............
	0x12, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // ........F.......
	0x46, 0x82, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, // F. .............
	0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // ".......:.......
	0x0a, 0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, // ....A...........
	0x82, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // ........:.......
	0x0a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, // ................
	0x01, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, // ....:........@..
	0x17, 0xb7, 0xd1, 0x38, 0x00, 0x00, 0x00, 0x08, 0x72, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, // ...8....r.......
	0x46, 0x02, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf6, 0x0f, 0x10, 0x00, // F...A...........
	0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x07, 0x82, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // ................
	0x38, 0x00, 0x00, 0x09, 0x82, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x80, // 8...........:...
	0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, // ........:. .....
	0x0b, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x09, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // ....2...r.......
	0xf6, 0x0f, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, // ........F.......
	0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x82, 0x00, 0x10, 0x00, // F.......6.......
	0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x11, 0x00, 0x00, 0x08, // .....@.....?....
	0x12, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // ........F.......
	0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x08, // F. .............
	0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // ".......F.......
	0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x08, // F. .............
	0x42, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // B.......F.......
	0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, // F. .............
	0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, // r.......F.......
	0x46, 0x02, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x05, 0x72, 0x00, 0x10, 0x00, // F......./...r...
	0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x0b, // ....F...........
	0x82, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, // .........@.....?
	0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x3a, 0x80, 0x20, 0x00, // ...?...?...?:. .
	0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x07, 0x72, 0x00, 0x10, 0x00, // ........8...r...
	0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf6, 0x0f, 0x10, 0x00, // ....F...........
	0x00, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x05, 0x72, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, // ........r ......
	0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x82, 0x20, 0x10, 0x00, // F.......6.... ..
	0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x3e, 0x00, 0x00, 0x01, // .....@.....?>...
	0x00, 0x00, 0xc0, 0x00,                                                                         // ....
};
static const uint8_t fs_pp_stereo_anaglyph_lin_gamma_dyndesat_spv[6185] =
{
	0x46, 0x53, 0x48, 0x0b, 0x6f, 0x1e, 0x3e, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x13, 0x53, // FSH.o.><.......S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, 0x41, 0x78, // tereo_MS_ZPD_YAx
	0x69, 0x73, 0x12, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x77, 0x5f, 0x68, // is...........w_h
	0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x01, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, // _height.........
	0x00, 0x1a, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // ..Stereo_LeftLum
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x12, 0x01, 0xa0, 0x00, // inance_Gamma....
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, // .......Stereo_Ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, // ghtLuminance_Dyn
	0x44, 0x65, 0x73, 0x61, 0x74, 0x12, 0x01, 0xb0, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, // Desat...........
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x01, // Stereo_LeftMat..
	0x20, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, //  ........Stereo_
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x01, 0x60, 0x00, 0x04, 0x00, 0x00, 0x00, // RightMat..`.....
	0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, // ...tex_stereo_fb
	0x30, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x02, 0x22, 0x00, 0x10, 0x74, 0x65, 0x78, 0x5f, 0x73, // 0......."..tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x30, 0x00, 0x03, 0x00, 0x00, // tereo_depth0....
	0x00, 0x00, 0x02, 0x22, 0x00, 0x2c, 0x17, 0x00, 0x00, 0x03, 0x02, 0x23, 0x07, 0x00, 0x00, 0x01, // ...".,.....#....
	0x00, 0x0b, 0x00, 0x08, 0x00, 0xa8, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x02, // ................
	0x00, 0x01, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, 0x4c, 0x53, // .............GLS
	0x4c, 0x2e, 0x73, 0x74, 0x64, 0x2e, 0x34, 0x35, 0x30, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x03, // L.std.450.......
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x07, 0x00, 0x04, 0x00, 0x00, // ................
	0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, 0x00, 0xd2, 0x01, 0x00, // .....main.......
	0x00, 0xdd, 0x01, 0x00, 0x00, 0x10, 0x00, 0x03, 0x00, 0x04, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, // ................
	0x00, 0x03, 0x00, 0x03, 0x00, 0x05, 0x00, 0x00, 0x00, 0xf4, 0x01, 0x00, 0x00, 0x05, 0x00, 0x04, // ................
	0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x08, // .....main.......
	0x00, 0x41, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // .A...tex_stereo_
	0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x08, // fbSampler.......
	0x00, 0x44, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // .D...tex_stereo_
	0x66, 0x62, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x08, // fbTexture.......
	0x00, 0x48, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // .H...tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x00, 0x05, 0x00, 0x08, // depthSampler....
	0x00, 0x4a, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // .J...tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x00, 0x05, 0x00, 0x06, // depthTexture....
	0x00, 0x74, 0x00, 0x00, 0x00, 0x55, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x6c, 0x6f, 0x63, // .t...UniformBloc
	0x6b, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x08, 0x00, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // k........t......
	0x00, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, // .Stereo_MS_ZPD_Y
	0x41, 0x78, 0x69, 0x73, 0x00, 0x06, 0x00, 0x06, 0x00, 0x74, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, // Axis.....t......
	0x00, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x00, 0x00, 0x06, 0x00, 0x07, // .w_h_height.....
	0x00, 0x74, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // .t.......Stereo_
	0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x00, 0x00, 0x06, 0x00, 0x07, 0x00, 0x74, 0x00, 0x00, // LeftMat......t..
	0x00, 0x03, 0x00, 0x00, 0x00, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, // .....Stereo_Righ
	0x74, 0x4d, 0x61, 0x74, 0x00, 0x06, 0x00, 0x0a, 0x00, 0x74, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, // tMat.....t......
	0x00, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, // .Stereo_LeftLumi
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x00, 0x00, 0x06, 0x00, 0x0b, // nance_Gamma.....
	0x00, 0x74, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // .t.......Stereo_
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, // RightLuminance_D
	0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x00, 0x00, 0x05, 0x00, 0x03, 0x00, 0x76, 0x00, 0x00, // ynDesat......v..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x05, 0x00, 0xd2, 0x01, 0x00, 0x00, 0x76, 0x5f, 0x74, // .............v_t
	0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x00, 0x05, 0x00, 0x06, 0x00, 0xdd, 0x01, 0x00, // excoord0........
	0x00, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x00, // .bgfx_FragData0.
	0x00, 0x47, 0x00, 0x04, 0x00, 0x41, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .G...A..."......
	0x00, 0x47, 0x00, 0x04, 0x00, 0x41, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, // .G...A...!......
	0x00, 0x47, 0x00, 0x04, 0x00, 0x44, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .G...D..."......
	0x00, 0x47, 0x00, 0x04, 0x00, 0x44, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, // .G...D...!......
	0x00, 0x47, 0x00, 0x04, 0x00, 0x48, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .G...H..."......
	0x00, 0x47, 0x00, 0x04, 0x00, 0x48, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, // .G...H...!......
	0x00, 0x47, 0x00, 0x04, 0x00, 0x4a, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .G...J..."......
	0x00, 0x47, 0x00, 0x04, 0x00, 0x4a, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, // .G...J...!......
	0x00, 0x48, 0x00, 0x05, 0x00, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, // .H...t.......#..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0x74, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, // .....H...t......
	0x00, 0x23, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x48, 0x00, 0x04, 0x00, 0x74, 0x00, 0x00, // .#.......H...t..
	0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0x74, 0x00, 0x00, // .........H...t..
	0x00, 0x02, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, // .....#... ...H..
	0x00, 0x74, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, // .t..............
	0x00, 0x48, 0x00, 0x04, 0x00, 0x74, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, // .H...t..........
	0x00, 0x48, 0x00, 0x05, 0x00, 0x74, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, // .H...t.......#..
	0x00, 0x60, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0x74, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, // .`...H...t......
	0x00, 0x07, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0x74, 0x00, 0x00, // .........H...t..
	0x00, 0x04, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, // .....#.......H..
	0x00, 0x74, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0xb0, 0x00, 0x00, // .t.......#......
	0x00, 0x47, 0x00, 0x03, 0x00, 0x74, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, // .G...t.......G..
	0x00, 0x76, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, // .v...".......G..
	0x00, 0x76, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, // .v...!.......G..
	0x00, 0xd2, 0x01, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, // .............G..
	0x00, 0xdd, 0x01, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x02, // ................
	0x00, 0x02, 0x00, 0x00, 0x00, 0x21, 0x00, 0x03, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, // .....!..........
	0x00, 0x1a, 0x00, 0x02, 0x00, 0x06, 0x00, 0x00, 0x00, 0x16, 0x00, 0x03, 0x00, 0x07, 0x00, 0x00, // ................
	0x00, 0x20, 0x00, 0x00, 0x00, 0x19, 0x00, 0x09, 0x00, 0x08, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, // . ..............
	0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x0b, 0x00, 0x00, // ................
	0x00, 0x07, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, // ................
	0x00, 0x07, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x15, 0x00, 0x00, // ................
	0x00, 0x07, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x40, 0x00, 0x00, // ......... ...@..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x40, 0x00, 0x00, // .........;...@..
	0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x43, 0x00, 0x00, // .A....... ...C..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x43, 0x00, 0x00, // .........;...C..
	0x00, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x40, 0x00, 0x00, // .D.......;...@..
	0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x43, 0x00, 0x00, // .H.......;...C..
	0x00, 0x4a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x00, 0x04, 0x00, 0x4d, 0x00, 0x00, // .J...........M..
	0x00, 0x20, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x4d, 0x00, 0x00, // . .......+...M..
	0x00, 0x4e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x4d, 0x00, 0x00, // .N.......+...M..
	0x00, 0x52, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x03, 0x00, 0x56, 0x00, 0x00, // .R...........V..
	0x00, 0x08, 0x00, 0x00, 0x00, 0x14, 0x00, 0x02, 0x00, 0x70, 0x00, 0x00, 0x00, 0x18, 0x00, 0x04, // .........p......
	0x00, 0x73, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x08, // .s..............
	0x00, 0x74, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x73, 0x00, 0x00, // .t...........s..
	0x00, 0x73, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, // .s........... ..
	0x00, 0x75, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, // .u.......t...;..
	0x00, 0x75, 0x00, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x15, 0x00, 0x04, // .u...v..........
	0x00, 0x77, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, // .w... .......+..
	0x00, 0x77, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, // .w...x....... ..
	0x00, 0x79, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, // .y...........+..
	0x00, 0x07, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, // .....|.......+..
	0x00, 0x77, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, // .w...........+..
	0x00, 0x07, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x17, 0x00, 0x04, // ............?...
	0x00, 0x8c, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, // .....p.......+..
	0x00, 0x07, 0x00, 0x00, 0x00, 0x98, 0x00, 0x00, 0x00, 0xfa, 0x7e, 0x2a, 0x3f, 0x2b, 0x00, 0x04, // ..........~*?+..
	0x00, 0x77, 0x00, 0x00, 0x00, 0xba, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, // .w...........+..
	0x00, 0x07, 0x00, 0x00, 0x00, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x2b, 0x00, 0x04, // ............?+..
	0x00, 0x77, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, // .w...........+..
	0x00, 0x4d, 0x00, 0x00, 0x00, 0x31, 0x01, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, // .M...1....... ..
	0x00, 0x32, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, // .2...........+..
	0x00, 0x4d, 0x00, 0x00, 0x00, 0x38, 0x01, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, // .M...8.......+..
	0x00, 0x07, 0x00, 0x00, 0x00, 0x56, 0x01, 0x00, 0x00, 0x17, 0xb7, 0xd1, 0x38, 0x2b, 0x00, 0x04, // .....V......8+..
	0x00, 0x4d, 0x00, 0x00, 0x00, 0x79, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, // .M...y....... ..
	0x00, 0x7a, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, // .z.......s...+..
	0x00, 0x4d, 0x00, 0x00, 0x00, 0x82, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, // .M........... ..
	0x00, 0xd1, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, // .............;..
	0x00, 0xd1, 0x01, 0x00, 0x00, 0xd2, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, // ............. ..
	0x00, 0xdc, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, // .............;..
	0x00, 0xdc, 0x01, 0x00, 0x00, 0xdd, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x36, 0x00, 0x05, // .............6..
	0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, // ................
	0x00, 0xf8, 0x00, 0x02, 0x00, 0x05, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, // .........=......
	0x00, 0x42, 0x00, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x08, 0x00, 0x00, // .B...A...=......
	0x00, 0x45, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, // .E...D...=......
	0x00, 0x49, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x08, 0x00, 0x00, // .I...H...=......
	0x00, 0x4b, 0x00, 0x00, 0x00, 0x4a, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x0b, 0x00, 0x00, // .K...J...=......
	0x00, 0xd3, 0x01, 0x00, 0x00, 0xd2, 0x01, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x79, 0x00, 0x00, // .........A...y..
	0x00, 0x57, 0x02, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x52, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, // .W...v...R...x..
	0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x58, 0x02, 0x00, 0x00, 0x57, 0x02, 0x00, // .=.......X...W..
	0x00, 0xb7, 0x00, 0x05, 0x00, 0x70, 0x00, 0x00, 0x00, 0x59, 0x02, 0x00, 0x00, 0x58, 0x02, 0x00, // .....p...Y...X..
	0x00, 0x7c, 0x00, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x79, 0x00, 0x00, 0x00, 0x5a, 0x02, 0x00, // .|...A...y...Z..
	0x00, 0x76, 0x00, 0x00, 0x00, 0x52, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, // .v...R.......=..
	0x00, 0x07, 0x00, 0x00, 0x00, 0x5b, 0x02, 0x00, 0x00, 0x5a, 0x02, 0x00, 0x00, 0x85, 0x00, 0x05, // .....[...Z......
	0x00, 0x07, 0x00, 0x00, 0x00, 0x5f, 0x02, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x5b, 0x02, 0x00, // ....._.......[..
	0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x60, 0x02, 0x00, 0x00, 0x7c, 0x00, 0x00, // .P.......`...|..
	0x00, 0x5f, 0x02, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x62, 0x02, 0x00, // ._...........b..
	0x00, 0x85, 0x00, 0x00, 0x00, 0x5b, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, // .....[...P......
	0x00, 0x63, 0x02, 0x00, 0x00, 0x62, 0x02, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, // .c...b...|...P..
	0x00, 0x8c, 0x00, 0x00, 0x00, 0x64, 0x02, 0x00, 0x00, 0x59, 0x02, 0x00, 0x00, 0x59, 0x02, 0x00, // .....d...Y...Y..
	0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x65, 0x02, 0x00, 0x00, 0x64, 0x02, 0x00, // .........e...d..
	0x00, 0x60, 0x02, 0x00, 0x00, 0x63, 0x02, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, // .`...c..........
	0x00, 0x66, 0x02, 0x00, 0x00, 0xd3, 0x01, 0x00, 0x00, 0x65, 0x02, 0x00, 0x00, 0x56, 0x00, 0x05, // .f.......e...V..
	0x00, 0x56, 0x00, 0x00, 0x00, 0xee, 0x02, 0x00, 0x00, 0x4b, 0x00, 0x00, 0x00, 0x49, 0x00, 0x00, // .V.......K...I..
	0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xf1, 0x02, 0x00, 0x00, 0xee, 0x02, 0x00, // .X..............
	0x00, 0x66, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, // .f.......|...Q..
	0x00, 0x07, 0x00, 0x00, 0x00, 0x69, 0x02, 0x00, 0x00, 0xf1, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, // .....i..........
	0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x6d, 0x02, 0x00, 0x00, 0x98, 0x00, 0x00, // .........m......
	0x00, 0x5b, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x6e, 0x02, 0x00, // .[...P.......n..
	0x00, 0x7c, 0x00, 0x00, 0x00, 0x6d, 0x02, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // .|...m..........
	0x00, 0x70, 0x02, 0x00, 0x00, 0x98, 0x00, 0x00, 0x00, 0x5b, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, // .p.......[...P..
	0x00, 0x0b, 0x00, 0x00, 0x00, 0x71, 0x02, 0x00, 0x00, 0x70, 0x02, 0x00, 0x00, 0x7c, 0x00, 0x00, // .....q...p...|..
	0x00, 0x50, 0x00, 0x05, 0x00, 0x8c, 0x00, 0x00, 0x00, 0x72, 0x02, 0x00, 0x00, 0x59, 0x02, 0x00, // .P.......r...Y..
	0x00, 0x59, 0x02, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x73, 0x02, 0x00, // .Y...........s..
	0x00, 0x72, 0x02, 0x00, 0x00, 0x6e, 0x02, 0x00, 0x00, 0x71, 0x02, 0x00, 0x00, 0x81, 0x00, 0x05, // .r...n...q......
	0x00, 0x0b, 0x00, 0x00, 0x00, 0x74, 0x02, 0x00, 0x00, 0xd3, 0x01, 0x00, 0x00, 0x73, 0x02, 0x00, // .....t.......s..
	0x00, 0x56, 0x00, 0x05, 0x00, 0x56, 0x00, 0x00, 0x00, 0xf8, 0x02, 0x00, 0x00, 0x4b, 0x00, 0x00, // .V...V.......K..
	0x00, 0x49, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xfb, 0x02, 0x00, // .I...X..........
	0x00, 0xf8, 0x02, 0x00, 0x00, 0x74, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, // .....t.......|..
	0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x77, 0x02, 0x00, 0x00, 0xfb, 0x02, 0x00, // .Q.......w......
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x78, 0x02, 0x00, // .............x..
	0x00, 0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0x69, 0x02, 0x00, 0x00, 0x77, 0x02, 0x00, // .....%...i...w..
	0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x7c, 0x02, 0x00, 0x00, 0x7c, 0x00, 0x00, // .P.......|...|..
	0x00, 0x5b, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x7e, 0x02, 0x00, // .[...P.......~..
	0x00, 0x5b, 0x02, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x8c, 0x00, 0x00, // .[...|...P......
	0x00, 0x7f, 0x02, 0x00, 0x00, 0x59, 0x02, 0x00, 0x00, 0x59, 0x02, 0x00, 0x00, 0xa9, 0x00, 0x06, // .....Y...Y......
	0x00, 0x0b, 0x00, 0x00, 0x00, 0x80, 0x02, 0x00, 0x00, 0x7f, 0x02, 0x00, 0x00, 0x7c, 0x02, 0x00, // .............|..
	0x00, 0x7e, 0x02, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x81, 0x02, 0x00, // .~..............
	0x00, 0xd3, 0x01, 0x00, 0x00, 0x80, 0x02, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, 0x56, 0x00, 0x00, // .........V...V..
	0x00, 0x02, 0x03, 0x00, 0x00, 0x4b, 0x00, 0x00, 0x00, 0x49, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, // .....K...I...X..
	0x00, 0x0e, 0x00, 0x00, 0x00, 0x05, 0x03, 0x00, 0x00, 0x02, 0x03, 0x00, 0x00, 0x81, 0x02, 0x00, // ................
	0x00, 0x02, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // .....|...Q......
	0x00, 0x84, 0x02, 0x00, 0x00, 0x05, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, // ................
	0x00, 0x07, 0x00, 0x00, 0x00, 0x85, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, // .............%..
	0x00, 0x78, 0x02, 0x00, 0x00, 0x84, 0x02, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x79, 0x00, 0x00, // .x.......A...y..
	0x00, 0x86, 0x02, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x4e, 0x00, 0x00, 0x00, 0xba, 0x00, 0x00, // .....v...N......
	0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x87, 0x02, 0x00, 0x00, 0x86, 0x02, 0x00, // .=..............
	0x00, 0x41, 0x00, 0x06, 0x00, 0x79, 0x00, 0x00, 0x00, 0x8a, 0x02, 0x00, 0x00, 0x76, 0x00, 0x00, // .A...y.......v..
	0x00, 0x52, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, // .R.......=......
	0x00, 0x8b, 0x02, 0x00, 0x00, 0x8a, 0x02, 0x00, 0x00, 0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // ................
	0x00, 0x8c, 0x02, 0x00, 0x00, 0xbe, 0x00, 0x00, 0x00, 0x8b, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, // ................
	0x00, 0x07, 0x00, 0x00, 0x00, 0x8d, 0x02, 0x00, 0x00, 0x8c, 0x02, 0x00, 0x00, 0x85, 0x00, 0x00, // ................
	0x00, 0x0c, 0x00, 0x08, 0x00, 0x07, 0x00, 0x00, 0x00, 0x8f, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, // ................
	0x00, 0x32, 0x00, 0x00, 0x00, 0x85, 0x02, 0x00, 0x00, 0x8d, 0x02, 0x00, 0x00, 0x85, 0x00, 0x00, // .2..............
	0x00, 0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x90, 0x02, 0x00, 0x00, 0xbe, 0x00, 0x00, // ................
	0x00, 0x8f, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x91, 0x02, 0x00, // ................
	0x00, 0xbe, 0x00, 0x00, 0x00, 0x90, 0x02, 0x00, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x07, 0x00, 0x00, // ................
	0x00, 0x93, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x5b, 0x02, 0x00, // .........2...[..
	0x00, 0x91, 0x02, 0x00, 0x00, 0x87, 0x02, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, // ................
	0x00, 0x94, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, // .........(...|..
	0x00, 0x93, 0x02, 0x00, 0x00, 0x7f, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x98, 0x02, 0x00, // ................
	0x00, 0x94, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x99, 0x02, 0x00, // .....P..........
	0x00, 0x7c, 0x00, 0x00, 0x00, 0x98, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, // .|.......P......
	0x00, 0x9b, 0x02, 0x00, 0x00, 0x94, 0x02, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, // .........|...P..
	0x00, 0x8c, 0x00, 0x00, 0x00, 0x9c, 0x02, 0x00, 0x00, 0x59, 0x02, 0x00, 0x00, 0x59, 0x02, 0x00, // .........Y...Y..
	0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x9d, 0x02, 0x00, 0x00, 0x9c, 0x02, 0x00, // ................
	0x00, 0x99, 0x02, 0x00, 0x00, 0x9b, 0x02, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, // ................
	0x00, 0x9e, 0x02, 0x00, 0x00, 0xd3, 0x01, 0x00, 0x00, 0x9d, 0x02, 0x00, 0x00, 0x56, 0x00, 0x05, // .............V..
	0x00, 0x56, 0x00, 0x00, 0x00, 0x0c, 0x03, 0x00, 0x00, 0x45, 0x00, 0x00, 0x00, 0x42, 0x00, 0x00, // .V.......E...B..
	0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0f, 0x03, 0x00, 0x00, 0x0c, 0x03, 0x00, // .X..............
	0x00, 0x9e, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x4f, 0x00, 0x08, // .........|...O..
	0x00, 0x15, 0x00, 0x00, 0x00, 0xa1, 0x02, 0x00, 0x00, 0x0f, 0x03, 0x00, 0x00, 0x0f, 0x03, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x85, 0x00, 0x05, // ................
	0x00, 0x07, 0x00, 0x00, 0x00, 0xa5, 0x02, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0x5b, 0x02, 0x00, // .............[..
	0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xa6, 0x02, 0x00, 0x00, 0x7c, 0x00, 0x00, // .P...........|..
	0x00, 0xa5, 0x02, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xa8, 0x02, 0x00, // ................
	0x00, 0x85, 0x00, 0x00, 0x00, 0x5b, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, // .....[...P......
	0x00, 0xa9, 0x02, 0x00, 0x00, 0xa8, 0x02, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, // .........|...P..
	0x00, 0x8c, 0x00, 0x00, 0x00, 0xaa, 0x02, 0x00, 0x00, 0x59, 0x02, 0x00, 0x00, 0x59, 0x02, 0x00, // .........Y...Y..
	0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xab, 0x02, 0x00, 0x00, 0xaa, 0x02, 0x00, // ................
	0x00, 0xa6, 0x02, 0x00, 0x00, 0xa9, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, // ................
	0x00, 0xac, 0x02, 0x00, 0x00, 0xd3, 0x01, 0x00, 0x00, 0xab, 0x02, 0x00, 0x00, 0x56, 0x00, 0x05, // .............V..
	0x00, 0x56, 0x00, 0x00, 0x00, 0x16, 0x03, 0x00, 0x00, 0x4b, 0x00, 0x00, 0x00, 0x49, 0x00, 0x00, // .V.......K...I..
	0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x19, 0x03, 0x00, 0x00, 0x16, 0x03, 0x00, // .X..............
	0x00, 0xac, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, // .........|...Q..
	0x00, 0x07, 0x00, 0x00, 0x00, 0xaf, 0x02, 0x00, 0x00, 0x19, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xb3, 0x02, 0x00, 0x00, 0x98, 0x00, 0x00, // ................
	0x00, 0x5b, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xb4, 0x02, 0x00, // .[...P..........
	0x00, 0x7c, 0x00, 0x00, 0x00, 0xb3, 0x02, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // .|..............
	0x00, 0xb6, 0x02, 0x00, 0x00, 0x98, 0x00, 0x00, 0x00, 0x5b, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, // .........[...P..
	0x00, 0x0b, 0x00, 0x00, 0x00, 0xb7, 0x02, 0x00, 0x00, 0xb6, 0x02, 0x00, 0x00, 0x7c, 0x00, 0x00, // .............|..
	0x00, 0x50, 0x00, 0x05, 0x00, 0x8c, 0x00, 0x00, 0x00, 0xb8, 0x02, 0x00, 0x00, 0x59, 0x02, 0x00, // .P...........Y..
	0x00, 0x59, 0x02, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xb9, 0x02, 0x00, // .Y..............
	0x00, 0xb8, 0x02, 0x00, 0x00, 0xb4, 0x02, 0x00, 0x00, 0xb7, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, // ................
	0x00, 0x0b, 0x00, 0x00, 0x00, 0xba, 0x02, 0x00, 0x00, 0xd3, 0x01, 0x00, 0x00, 0xb9, 0x02, 0x00, // ................
	0x00, 0x56, 0x00, 0x05, 0x00, 0x56, 0x00, 0x00, 0x00, 0x20, 0x03, 0x00, 0x00, 0x4b, 0x00, 0x00, // .V...V... ...K..
	0x00, 0x49, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x23, 0x03, 0x00, // .I...X.......#..
	0x00, 0x20, 0x03, 0x00, 0x00, 0xba, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, // . ...........|..
	0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xbd, 0x02, 0x00, 0x00, 0x23, 0x03, 0x00, // .Q...........#..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0xbe, 0x02, 0x00, // ................
	0x00, 0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, 0x00, 0xaf, 0x02, 0x00, 0x00, 0xbd, 0x02, 0x00, // .....%..........
	0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xc2, 0x02, 0x00, 0x00, 0x7c, 0x00, 0x00, // .P...........|..
	0x00, 0x5b, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xc4, 0x02, 0x00, // .[...P..........
	0x00, 0x5b, 0x02, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x8c, 0x00, 0x00, // .[...|...P......
	0x00, 0xc5, 0x02, 0x00, 0x00, 0x59, 0x02, 0x00, 0x00, 0x59, 0x02, 0x00, 0x00, 0xa9, 0x00, 0x06, // .....Y...Y......
	0x00, 0x0b, 0x00, 0x00, 0x00, 0xc6, 0x02, 0x00, 0x00, 0xc5, 0x02, 0x00, 0x00, 0xc2, 0x02, 0x00, // ................
	0x00, 0xc4, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xc7, 0x02, 0x00, // ................
	0x00, 0xd3, 0x01, 0x00, 0x00, 0xc6, 0x02, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, 0x56, 0x00, 0x00, // .........V...V..
	0x00, 0x2a, 0x03, 0x00, 0x00, 0x4b, 0x00, 0x00, 0x00, 0x49, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, // .*...K...I...X..
	0x00, 0x0e, 0x00, 0x00, 0x00, 0x2d, 0x03, 0x00, 0x00, 0x2a, 0x03, 0x00, 0x00, 0xc7, 0x02, 0x00, // .....-...*......
	0x00, 0x02, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // .....|...Q......
	0x00, 0xca, 0x02, 0x00, 0x00, 0x2d, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, // .....-..........
	0x00, 0x07, 0x00, 0x00, 0x00, 0xcb, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x25, 0x00, 0x00, // .............%..
	0x00, 0xbe, 0x02, 0x00, 0x00, 0xca, 0x02, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x79, 0x00, 0x00, // .........A...y..
	0x00, 0xcc, 0x02, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x4e, 0x00, 0x00, 0x00, 0xba, 0x00, 0x00, // .....v...N......
	0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0xcd, 0x02, 0x00, 0x00, 0xcc, 0x02, 0x00, // .=..............
	0x00, 0x41, 0x00, 0x06, 0x00, 0x79, 0x00, 0x00, 0x00, 0xd0, 0x02, 0x00, 0x00, 0x76, 0x00, 0x00, // .A...y.......v..
	0x00, 0x52, 0x00, 0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, // .R.......=......
	0x00, 0xd1, 0x02, 0x00, 0x00, 0xd0, 0x02, 0x00, 0x00, 0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // ................
	0x00, 0xd2, 0x02, 0x00, 0x00, 0xbe, 0x00, 0x00, 0x00, 0xd1, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, // ................
	0x00, 0x07, 0x00, 0x00, 0x00, 0xd3, 0x02, 0x00, 0x00, 0xd2, 0x02, 0x00, 0x00, 0x85, 0x00, 0x00, // ................
	0x00, 0x0c, 0x00, 0x08, 0x00, 0x07, 0x00, 0x00, 0x00, 0xd5, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, // ................
	0x00, 0x32, 0x00, 0x00, 0x00, 0xcb, 0x02, 0x00, 0x00, 0xd3, 0x02, 0x00, 0x00, 0x85, 0x00, 0x00, // .2..............
	0x00, 0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xd6, 0x02, 0x00, 0x00, 0xbe, 0x00, 0x00, // ................
	0x00, 0xd5, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xd7, 0x02, 0x00, // ................
	0x00, 0xbe, 0x00, 0x00, 0x00, 0xd6, 0x02, 0x00, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x07, 0x00, 0x00, // ................
	0x00, 0xd9, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x5b, 0x02, 0x00, // .........2...[..
	0x00, 0xd7, 0x02, 0x00, 0x00, 0xcd, 0x02, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, // ................
	0x00, 0xda, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, // .........(...|..
	0x00, 0xd9, 0x02, 0x00, 0x00, 0x7f, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0xde, 0x02, 0x00, // ................
	0x00, 0xda, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xdf, 0x02, 0x00, // .....P..........
	0x00, 0x7c, 0x00, 0x00, 0x00, 0xde, 0x02, 0x00, 0x00, 0x50, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, // .|.......P......
	0x00, 0xe1, 0x02, 0x00, 0x00, 0xda, 0x02, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x50, 0x00, 0x05, // .........|...P..
	0x00, 0x8c, 0x00, 0x00, 0x00, 0xe2, 0x02, 0x00, 0x00, 0x59, 0x02, 0x00, 0x00, 0x59, 0x02, 0x00, // .........Y...Y..
	0x00, 0xa9, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xe3, 0x02, 0x00, 0x00, 0xe2, 0x02, 0x00, // ................
	0x00, 0xdf, 0x02, 0x00, 0x00, 0xe1, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, // ................
	0x00, 0xe4, 0x02, 0x00, 0x00, 0xd3, 0x01, 0x00, 0x00, 0xe3, 0x02, 0x00, 0x00, 0x56, 0x00, 0x05, // .............V..
	0x00, 0x56, 0x00, 0x00, 0x00, 0x34, 0x03, 0x00, 0x00, 0x45, 0x00, 0x00, 0x00, 0x42, 0x00, 0x00, // .V...4...E...B..
	0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x37, 0x03, 0x00, 0x00, 0x34, 0x03, 0x00, // .X.......7...4..
	0x00, 0xe4, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x4f, 0x00, 0x08, // .........|...O..
	0x00, 0x15, 0x00, 0x00, 0x00, 0xe7, 0x02, 0x00, 0x00, 0x37, 0x03, 0x00, 0x00, 0x37, 0x03, 0x00, // .........7...7..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x41, 0x00, 0x06, // .............A..
	0x00, 0x79, 0x00, 0x00, 0x00, 0x06, 0x02, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x31, 0x01, 0x00, // .y.......v...1..
	0x00, 0xba, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07, 0x02, 0x00, // .....=..........
	0x00, 0x06, 0x02, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x79, 0x00, 0x00, 0x00, 0x08, 0x02, 0x00, // .....A...y......
	0x00, 0x76, 0x00, 0x00, 0x00, 0x31, 0x01, 0x00, 0x00, 0xba, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, // .v...1.......=..
	0x00, 0x07, 0x00, 0x00, 0x00, 0x09, 0x02, 0x00, 0x00, 0x08, 0x02, 0x00, 0x00, 0x41, 0x00, 0x06, // .............A..
	0x00, 0x79, 0x00, 0x00, 0x00, 0x0a, 0x02, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x31, 0x01, 0x00, // .y.......v...1..
	0x00, 0xba, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x0b, 0x02, 0x00, // .....=..........
	0x00, 0x0a, 0x02, 0x00, 0x00, 0x50, 0x00, 0x06, 0x00, 0x15, 0x00, 0x00, 0x00, 0x0c, 0x02, 0x00, // .....P..........
	0x00, 0x07, 0x02, 0x00, 0x00, 0x09, 0x02, 0x00, 0x00, 0x0b, 0x02, 0x00, 0x00, 0x0c, 0x00, 0x07, // ................
	0x00, 0x15, 0x00, 0x00, 0x00, 0x0d, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, // ................
	0x00, 0xa1, 0x02, 0x00, 0x00, 0x0c, 0x02, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x79, 0x00, 0x00, // .........A...y..
	0x00, 0x0f, 0x02, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x31, 0x01, 0x00, 0x00, 0xba, 0x00, 0x00, // .....v...1......
	0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x10, 0x02, 0x00, 0x00, 0x0f, 0x02, 0x00, // .=..............
	0x00, 0x41, 0x00, 0x06, 0x00, 0x79, 0x00, 0x00, 0x00, 0x11, 0x02, 0x00, 0x00, 0x76, 0x00, 0x00, // .A...y.......v..
	0x00, 0x31, 0x01, 0x00, 0x00, 0xba, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, // .1.......=......
	0x00, 0x12, 0x02, 0x00, 0x00, 0x11, 0x02, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x79, 0x00, 0x00, // .........A...y..
	0x00, 0x13, 0x02, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x31, 0x01, 0x00, 0x00, 0xba, 0x00, 0x00, // .....v...1......
	0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x14, 0x02, 0x00, 0x00, 0x13, 0x02, 0x00, // .=..............
	0x00, 0x50, 0x00, 0x06, 0x00, 0x15, 0x00, 0x00, 0x00, 0x15, 0x02, 0x00, 0x00, 0x10, 0x02, 0x00, // .P..............
	0x00, 0x12, 0x02, 0x00, 0x00, 0x14, 0x02, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x15, 0x00, 0x00, // ................
	0x00, 0x16, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0xe7, 0x02, 0x00, // ................
	0x00, 0x15, 0x02, 0x00, 0x00, 0x41, 0x00, 0x05, 0x00, 0x32, 0x01, 0x00, 0x00, 0x49, 0x03, 0x00, // .....A...2...I..
	0x00, 0x76, 0x00, 0x00, 0x00, 0x31, 0x01, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, // .v...1...=......
	0x00, 0x4a, 0x03, 0x00, 0x00, 0x49, 0x03, 0x00, 0x00, 0x4f, 0x00, 0x08, 0x00, 0x15, 0x00, 0x00, // .J...I...O......
	0x00, 0x4b, 0x03, 0x00, 0x00, 0x4a, 0x03, 0x00, 0x00, 0x4a, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, // .K...J...J......
	0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x94, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // ................
	0x00, 0x4c, 0x03, 0x00, 0x00, 0x0d, 0x02, 0x00, 0x00, 0x4b, 0x03, 0x00, 0x00, 0x41, 0x00, 0x05, // .L.......K...A..
	0x00, 0x32, 0x01, 0x00, 0x00, 0x4d, 0x03, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x38, 0x01, 0x00, // .2...M...v...8..
	0x00, 0x3d, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x4e, 0x03, 0x00, 0x00, 0x4d, 0x03, 0x00, // .=.......N...M..
	0x00, 0x4f, 0x00, 0x08, 0x00, 0x15, 0x00, 0x00, 0x00, 0x4f, 0x03, 0x00, 0x00, 0x4e, 0x03, 0x00, // .O.......O...N..
	0x00, 0x4e, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, // .N..............
	0x00, 0x94, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x50, 0x03, 0x00, 0x00, 0x0d, 0x02, 0x00, // .........P......
	0x00, 0x4f, 0x03, 0x00, 0x00, 0x41, 0x00, 0x05, 0x00, 0x32, 0x01, 0x00, 0x00, 0x51, 0x03, 0x00, // .O...A...2...Q..
	0x00, 0x76, 0x00, 0x00, 0x00, 0x31, 0x01, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, // .v...1...=......
	0x00, 0x52, 0x03, 0x00, 0x00, 0x51, 0x03, 0x00, 0x00, 0x4f, 0x00, 0x08, 0x00, 0x15, 0x00, 0x00, // .R...Q...O......
	0x00, 0x53, 0x03, 0x00, 0x00, 0x52, 0x03, 0x00, 0x00, 0x52, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, // .S...R...R......
	0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x94, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // ................
	0x00, 0x54, 0x03, 0x00, 0x00, 0x16, 0x02, 0x00, 0x00, 0x53, 0x03, 0x00, 0x00, 0x41, 0x00, 0x05, // .T.......S...A..
	0x00, 0x32, 0x01, 0x00, 0x00, 0x55, 0x03, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x38, 0x01, 0x00, // .2...U...v...8..
	0x00, 0x3d, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x56, 0x03, 0x00, 0x00, 0x55, 0x03, 0x00, // .=.......V...U..
	0x00, 0x4f, 0x00, 0x08, 0x00, 0x15, 0x00, 0x00, 0x00, 0x57, 0x03, 0x00, 0x00, 0x56, 0x03, 0x00, // .O.......W...V..
	0x00, 0x56, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, // .V..............
	0x00, 0x94, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x58, 0x03, 0x00, 0x00, 0x16, 0x02, 0x00, // .........X......
	0x00, 0x57, 0x03, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x5b, 0x03, 0x00, // .W...........[..
	0x00, 0x4c, 0x03, 0x00, 0x00, 0x50, 0x03, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // .L...P..........
	0x00, 0x5e, 0x03, 0x00, 0x00, 0x54, 0x03, 0x00, 0x00, 0x58, 0x03, 0x00, 0x00, 0x41, 0x00, 0x06, // .^...T...X...A..
	0x00, 0x79, 0x00, 0x00, 0x00, 0x5f, 0x03, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x38, 0x01, 0x00, // .y..._...v...8..
	0x00, 0xba, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x60, 0x03, 0x00, // .....=.......`..
	0x00, 0x5f, 0x03, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x63, 0x03, 0x00, // ._...........c..
	0x00, 0x4c, 0x03, 0x00, 0x00, 0x50, 0x03, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // .L...P..........
	0x00, 0x65, 0x03, 0x00, 0x00, 0x5b, 0x03, 0x00, 0x00, 0x56, 0x01, 0x00, 0x00, 0x88, 0x00, 0x05, // .e...[...V......
	0x00, 0x07, 0x00, 0x00, 0x00, 0x66, 0x03, 0x00, 0x00, 0x63, 0x03, 0x00, 0x00, 0x65, 0x03, 0x00, // .....f...c...e..
	0x00, 0x0c, 0x00, 0x06, 0x00, 0x07, 0x00, 0x00, 0x00, 0x67, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, // .........g......
	0x00, 0x04, 0x00, 0x00, 0x00, 0x66, 0x03, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // .....f..........
	0x00, 0x68, 0x03, 0x00, 0x00, 0x60, 0x03, 0x00, 0x00, 0x67, 0x03, 0x00, 0x00, 0x41, 0x00, 0x06, // .h...`...g...A..
	0x00, 0x79, 0x00, 0x00, 0x00, 0x69, 0x03, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x38, 0x01, 0x00, // .y...i...v...8..
	0x00, 0xba, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x6a, 0x03, 0x00, // .....=.......j..
	0x00, 0x69, 0x03, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x6d, 0x03, 0x00, // .i...........m..
	0x00, 0x54, 0x03, 0x00, 0x00, 0x58, 0x03, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // .T...X..........
	0x00, 0x6f, 0x03, 0x00, 0x00, 0x5e, 0x03, 0x00, 0x00, 0x56, 0x01, 0x00, 0x00, 0x88, 0x00, 0x05, // .o...^...V......
	0x00, 0x07, 0x00, 0x00, 0x00, 0x70, 0x03, 0x00, 0x00, 0x6d, 0x03, 0x00, 0x00, 0x6f, 0x03, 0x00, // .....p...m...o..
	0x00, 0x0c, 0x00, 0x06, 0x00, 0x07, 0x00, 0x00, 0x00, 0x71, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, // .........q......
	0x00, 0x04, 0x00, 0x00, 0x00, 0x70, 0x03, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // .....p..........
	0x00, 0x72, 0x03, 0x00, 0x00, 0x6a, 0x03, 0x00, 0x00, 0x71, 0x03, 0x00, 0x00, 0x50, 0x00, 0x06, // .r...j...q...P..
	0x00, 0x15, 0x00, 0x00, 0x00, 0x82, 0x03, 0x00, 0x00, 0x5b, 0x03, 0x00, 0x00, 0x5b, 0x03, 0x00, // .........[...[..
	0x00, 0x5b, 0x03, 0x00, 0x00, 0x50, 0x00, 0x06, 0x00, 0x15, 0x00, 0x00, 0x00, 0x76, 0x03, 0x00, // .[...P.......v..
	0x00, 0x68, 0x03, 0x00, 0x00, 0x68, 0x03, 0x00, 0x00, 0x68, 0x03, 0x00, 0x00, 0x0c, 0x00, 0x08, // .h...h...h......
	0x00, 0x15, 0x00, 0x00, 0x00, 0x88, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, // ................
	0x00, 0x0d, 0x02, 0x00, 0x00, 0x82, 0x03, 0x00, 0x00, 0x76, 0x03, 0x00, 0x00, 0x50, 0x00, 0x06, // .........v...P..
	0x00, 0x15, 0x00, 0x00, 0x00, 0x8e, 0x03, 0x00, 0x00, 0x5e, 0x03, 0x00, 0x00, 0x5e, 0x03, 0x00, // .........^...^..
	0x00, 0x5e, 0x03, 0x00, 0x00, 0x50, 0x00, 0x06, 0x00, 0x15, 0x00, 0x00, 0x00, 0x7b, 0x03, 0x00, // .^...P.......{..
	0x00, 0x72, 0x03, 0x00, 0x00, 0x72, 0x03, 0x00, 0x00, 0x72, 0x03, 0x00, 0x00, 0x0c, 0x00, 0x08, // .r...r...r......
	0x00, 0x15, 0x00, 0x00, 0x00, 0x94, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, // ................
	0x00, 0x16, 0x02, 0x00, 0x00, 0x8e, 0x03, 0x00, 0x00, 0x7b, 0x03, 0x00, 0x00, 0x41, 0x00, 0x05, // .........{...A..
	0x00, 0x7a, 0x01, 0x00, 0x00, 0x98, 0x03, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x79, 0x01, 0x00, // .z.......v...y..
	0x00, 0x3d, 0x00, 0x04, 0x00, 0x73, 0x00, 0x00, 0x00, 0x99, 0x03, 0x00, 0x00, 0x98, 0x03, 0x00, // .=...s..........
	0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x9a, 0x03, 0x00, 0x00, 0x88, 0x03, 0x00, // .Q..............
	0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x9b, 0x03, 0x00, // .....Q..........
	0x00, 0x88, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // .........Q......
	0x00, 0x9c, 0x03, 0x00, 0x00, 0x88, 0x03, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x50, 0x00, 0x07, // .............P..
	0x00, 0x0e, 0x00, 0x00, 0x00, 0x9d, 0x03, 0x00, 0x00, 0x9a, 0x03, 0x00, 0x00, 0x9b, 0x03, 0x00, // ................
	0x00, 0x9c, 0x03, 0x00, 0x00, 0xbe, 0x00, 0x00, 0x00, 0x91, 0x00, 0x05, 0x00, 0x0e, 0x00, 0x00, // ................
	0x00, 0x9e, 0x03, 0x00, 0x00, 0x99, 0x03, 0x00, 0x00, 0x9d, 0x03, 0x00, 0x00, 0x41, 0x00, 0x05, // .............A..
	0x00, 0x7a, 0x01, 0x00, 0x00, 0x9f, 0x03, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x82, 0x01, 0x00, // .z.......v......
	0x00, 0x3d, 0x00, 0x04, 0x00, 0x73, 0x00, 0x00, 0x00, 0xa0, 0x03, 0x00, 0x00, 0x9f, 0x03, 0x00, // .=...s..........
	0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xa1, 0x03, 0x00, 0x00, 0x94, 0x03, 0x00, // .Q..............
	0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xa2, 0x03, 0x00, // .....Q..........
	0x00, 0x94, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // .........Q......
	0x00, 0xa3, 0x03, 0x00, 0x00, 0x94, 0x03, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x50, 0x00, 0x07, // .............P..
	0x00, 0x0e, 0x00, 0x00, 0x00, 0xa4, 0x03, 0x00, 0x00, 0xa1, 0x03, 0x00, 0x00, 0xa2, 0x03, 0x00, // ................
	0x00, 0xa3, 0x03, 0x00, 0x00, 0xbe, 0x00, 0x00, 0x00, 0x91, 0x00, 0x05, 0x00, 0x0e, 0x00, 0x00, // ................
	0x00, 0xa5, 0x03, 0x00, 0x00, 0xa0, 0x03, 0x00, 0x00, 0xa4, 0x03, 0x00, 0x00, 0x81, 0x00, 0x05, // ................
	0x00, 0x0e, 0x00, 0x00, 0x00, 0xa6, 0x03, 0x00, 0x00, 0x9e, 0x03, 0x00, 0x00, 0xa5, 0x03, 0x00, // ................
	0x00, 0x4f, 0x00, 0x08, 0x00, 0x15, 0x00, 0x00, 0x00, 0xa7, 0x03, 0x00, 0x00, 0xa6, 0x03, 0x00, // .O..............
	0x00, 0xa6, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, // ................
	0x00, 0x41, 0x00, 0x06, 0x00, 0x79, 0x00, 0x00, 0x00, 0x22, 0x02, 0x00, 0x00, 0x76, 0x00, 0x00, // .A...y..."...v..
	0x00, 0x31, 0x01, 0x00, 0x00, 0xba, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, // .1.......=......
	0x00, 0x23, 0x02, 0x00, 0x00, 0x22, 0x02, 0x00, 0x00, 0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // .#..."..........
	0x00, 0x24, 0x02, 0x00, 0x00, 0xbe, 0x00, 0x00, 0x00, 0x23, 0x02, 0x00, 0x00, 0x41, 0x00, 0x06, // .$.......#...A..
	0x00, 0x79, 0x00, 0x00, 0x00, 0x25, 0x02, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x31, 0x01, 0x00, // .y...%...v...1..
	0x00, 0xba, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x26, 0x02, 0x00, // .....=.......&..
	0x00, 0x25, 0x02, 0x00, 0x00, 0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x27, 0x02, 0x00, // .%...........'..
	0x00, 0xbe, 0x00, 0x00, 0x00, 0x26, 0x02, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x79, 0x00, 0x00, // .....&...A...y..
	0x00, 0x28, 0x02, 0x00, 0x00, 0x76, 0x00, 0x00, 0x00, 0x31, 0x01, 0x00, 0x00, 0xba, 0x00, 0x00, // .(...v...1......
	0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x29, 0x02, 0x00, 0x00, 0x28, 0x02, 0x00, // .=.......)...(..
	0x00, 0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x2a, 0x02, 0x00, 0x00, 0xbe, 0x00, 0x00, // .........*......
	0x00, 0x29, 0x02, 0x00, 0x00, 0x50, 0x00, 0x06, 0x00, 0x15, 0x00, 0x00, 0x00, 0x2b, 0x02, 0x00, // .)...P.......+..
	0x00, 0x24, 0x02, 0x00, 0x00, 0x27, 0x02, 0x00, 0x00, 0x2a, 0x02, 0x00, 0x00, 0x0c, 0x00, 0x07, // .$...'...*......
	0x00, 0x15, 0x00, 0x00, 0x00, 0x2c, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, // .....,..........
	0x00, 0xa7, 0x03, 0x00, 0x00, 0x2b, 0x02, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // .....+...Q......
	0x00, 0x2d, 0x02, 0x00, 0x00, 0x2c, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, // .-...,.......Q..
	0x00, 0x07, 0x00, 0x00, 0x00, 0x2e, 0x02, 0x00, 0x00, 0x2c, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, // .........,......
	0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x2f, 0x02, 0x00, 0x00, 0x2c, 0x02, 0x00, // .Q......./...,..
	0x00, 0x02, 0x00, 0x00, 0x00, 0x50, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x30, 0x02, 0x00, // .....P.......0..
	0x00, 0x2d, 0x02, 0x00, 0x00, 0x2e, 0x02, 0x00, 0x00, 0x2f, 0x02, 0x00, 0x00, 0xbe, 0x00, 0x00, // .-......./......
	0x00, 0x3e, 0x00, 0x03, 0x00, 0xdd, 0x01, 0x00, 0x00, 0x30, 0x02, 0x00, 0x00, 0xfd, 0x00, 0x01, // .>.......0......
	0x00, 0x38, 0x00, 0x01, 0x00, 0x00, 0x00, 0xc0, 0x00,                                           // .8.......
};
static const bgfx::EmbeddedShader fs_pp_stereo_anaglyph_lin_gamma_dyndesat = BGFX_EMBEDDED_SHADER(fs_pp_stereo_anaglyph_lin_gamma_dyndesat);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Build of fragment shader from fs_pp_stereo.sc to fs_pp_stereo_sbs_st with options: SBS STEREO
static const uint8_t fs_pp_stereo_sbs_st_mtl[836] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x14, 0x74, // FSH.Jc._.......t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, // ex_stereo_fbSamp
	0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x74, 0x65, // ler...........te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x54, 0x65, 0x78, 0x74, 0x75, // x_stereo_fbTextu
	0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x74, 0x65, 0x78, // re...........tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, // _stereo_depthSam
	0x70, 0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x74, // pler...........t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x54, // ex_stereo_depthT
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, // exture..........
	0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x10, 0x00, // .tex_stereo_fb..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x94, 0x02, 0x00, 0x00, 0x23, 0x69, 0x6e, 0x63, // ............#inc
	0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x64, 0x6c, // lude <metal_stdl
	0x69, 0x62, 0x3e, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x73, 0x69, // ib>.#include <si
	0x6d, 0x64, 0x2f, 0x73, 0x69, 0x6d, 0x64, 0x2e, 0x68, 0x3e, 0x0a, 0x0a, 0x75, 0x73, 0x69, 0x6e, // md/simd.h>..usin
	0x67, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x6d, 0x65, 0x74, 0x61, // g namespace meta
	0x6c, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, // l;..struct xlatM
	0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, // tlMain_out.{.   
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, //  float4 bgfx_Fra
	0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x20, 0x5b, 0x5b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x30, // gData0 [[color(0
	0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, // )]];.};..struct 
	0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x0a, 0x7b, // xlatMtlMain_in.{
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, // .    float2 v_te
	0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x5b, 0x5b, 0x75, 0x73, 0x65, 0x72, 0x28, 0x6c, // xcoord0 [[user(l
	0x6f, 0x63, 0x6e, 0x31, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x66, 0x72, 0x61, // ocn1)]];.};..fra
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, // gment xlatMtlMai
	0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, // n_out xlatMtlMai
	0x6e, 0x28, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, // n(xlatMtlMain_in
	0x20, 0x69, 0x6e, 0x20, 0x5b, 0x5b, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x5d, 0x5d, //  in [[stage_in]]
	0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x61, // , texture2d_arra
	0x79, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3e, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, // y<float> tex_ste
	0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // reo_fb [[texture
	0x28, 0x30, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x74, // (0)]], sampler t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, // ex_stereo_fbSamp
	0x6c, 0x65, 0x72, 0x20, 0x5b, 0x5b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x30, 0x29, // ler [[sampler(0)
	0x5d, 0x5d, 0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, // ]]).{.    xlatMt
	0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x3d, 0x20, // lMain_out out = 
	0x7b, 0x7d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, // {};.    float3 _
	0x32, 0x31, 0x31, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x69, 0x6e, 0x2e, // 211 = float3(in.
	0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2e, 0x78, 0x20, 0x2a, 0x20, // v_texcoord0.x * 
	0x32, 0x2e, 0x30, 0x2c, 0x20, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, // 2.0, in.v_texcoo
	0x72, 0x64, 0x30, 0x2e, 0x79, 0x2c, 0x20, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, // rd0.y, (in.v_tex
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2e, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x20, // coord0.x < 0.5) 
	0x3f, 0x20, 0x30, 0x2e, 0x30, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, // ? 0.0 : 1.0);.  
	0x20, 0x20, 0x6f, 0x75, 0x74, 0x2e, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, //   out.bgfx_FragD
	0x61, 0x74, 0x61, 0x30, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x74, 0x65, // ata0 = float4(te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2e, 0x73, 0x61, 0x6d, 0x70, // x_stereo_fb.samp
	0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, // le(tex_stereo_fb
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x32, 0x31, 0x31, 0x2e, 0x78, 0x79, // Sampler, _211.xy
	0x2c, 0x20, 0x75, 0x69, 0x6e, 0x74, 0x28, 0x72, 0x69, 0x6e, 0x74, 0x28, 0x5f, 0x32, 0x31, 0x31, // , uint(rint(_211
	0x2e, 0x7a, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, // .z)), level(0.0)
	0x29, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, // ).xyz, 1.0);.   
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6f, 0x75, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x0a, //  return out;.}..
	0x00, 0x00, 0x40, 0x00,                                                                         // ..@.
};
static const uint8_t fs_pp_stereo_sbs_st_essl[9001] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x23, // FSH.Jc._.......#
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x33, 0x32, 0x30, 0x20, 0x65, // ..#version 320 e
	0x73, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, // s.#define attrib
	0x75, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x76, // ute in.#define v
	0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, // arying in.precis
	0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3b, // ion highp float;
	0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, // .precision highp
	0x20, 0x69, 0x6e, 0x74, 0x3b, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, //  int;.precision 
	0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, // highp sampler2DA
	0x72, 0x72, 0x61, 0x79, 0x3b, 0x0a, 0x23, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, // rray;.#extension
	0x20, 0x47, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x74, //  GL_EXT_shader_t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6c, 0x6f, 0x64, 0x20, 0x3a, 0x20, 0x65, 0x6e, 0x61, // exture_lod : ena
	0x62, 0x6c, 0x65, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, // ble.#define text
	0x75, 0x72, 0x65, 0x32, 0x44, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, // ure2DLod      te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x4c, 0x6f, 0x64, 0x45, 0x58, 0x54, 0x0a, 0x23, 0x64, // xture2DLodEXT.#d
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x47, // efine texture2DG
	0x72, 0x61, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, // rad     texture2
	0x44, 0x47, 0x72, 0x61, 0x64, 0x45, 0x58, 0x54, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, // DGradEXT.#define
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x4c, 0x6f, //  texture2DProjLo
	0x64, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, // d  texture2DProj
	0x4c, 0x6f, 0x64, 0x45, 0x58, 0x54, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, // LodEXT.#define t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, // exture2DProjGrad
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, //  texture2DProjGr
	0x61, 0x64, 0x45, 0x58, 0x54, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, // adEXT.#define te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, // xtureCubeLod    
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x4c, 0x6f, 0x64, 0x45, 0x58, // textureCubeLodEX
	0x54, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // T.#define textur
	0x65, 0x43, 0x75, 0x62, 0x65, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, // eCubeGrad   text
	0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x47, 0x72, 0x61, 0x64, 0x45, 0x58, 0x54, 0x0a, 0x23, // ureCubeGradEXT.#
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x28, // define shadow2D(
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, // _sampler, _coord
	0x29, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, // ) texture(_sampl
	0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x0a, 0x23, 0x64, 0x65, 0x66, // er, _coord).#def
	0x69, 0x6e, 0x65, 0x20, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, // ine shadow2DProj
	0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, // (_sampler, _coor
	0x64, 0x29, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, // d) textureProj(_
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, // sampler, _coord)
	0x0a, 0x23, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x47, 0x4c, 0x5f, 0x45, // .#extension GL_E
	0x58, 0x54, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, // XT_texture_array
	0x20, 0x3a, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x0a, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x65, //  : enable.out me
	0x64, 0x69, 0x75, 0x6d, 0x70, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, // diump vec4 bgfx_
	0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, // FragColor;.varyi
	0x6e, 0x67, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x5f, 0x65, 0x79, 0x65, 0x3b, 0x0a, // ng float v_eye;.
	0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x5f, 0x74, // varying vec2 v_t
	0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, // excoord0;.vec3 i
	0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, // nstMul(vec3 _vec
	0x2c, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, // , mat3 _mtx) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, // eturn ( (_vec) *
	0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, //  (_mtx) ); }.vec
	0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, // 3 instMul(mat3 _
	0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, // mtx, vec3 _vec) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, // { return ( (_mtx
	0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, // ) * (_vec) ); }.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, // vec4 instMul(vec
	0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, // 4 _vec, mat4 _mt
	0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, // x) { return ( (_
	0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, // vec) * (_mtx) );
	0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, //  }.vec4 instMul(
	0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // mat4 _mtx, vec4 
	0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // _vec) { return (
	0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, //  (_mtx) * (_vec)
	0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, 0x70, 0x28, //  ); }.float rcp(
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // float _a) { retu
	0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, // rn 1.0/_a; }.vec
	0x32, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, // 2 rcp(vec2 _a) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, //  return vec2(1.0
	0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x70, // )/_a; }.vec3 rcp
	0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // (vec3 _a) { retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, // rn vec3(1.0)/_a;
	0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x34, //  }.vec4 rcp(vec4
	0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, //  _a) { return ve
	0x63, 0x34, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, // c4(1.0)/_a; }.ve
	0x63, 0x32, 0x20, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, // c2 vec2_splat(fl
	0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // oat _x) { return
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, //  vec2(_x, _x); }
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, // .vec3 vec3_splat
	0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // (float _x) { ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, // urn vec3(_x, _x,
	0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, 0x65, 0x63, //  _x); }.vec4 vec
	0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, // 4_splat(float _x
	0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, // ) { return vec4(
	0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, // _x, _x, _x, _x);
	0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, //  }.uvec2 uvec2_s
	0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, // plat(uint _x) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, // return uvec2(_x,
	0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, 0x75, 0x76, //  _x); }.uvec3 uv
	0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, // ec3_splat(uint _
	0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, // x) { return uvec
	0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, // 3(_x, _x, _x); }
	0x0a, 0x75, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, // .uvec4 uvec4_spl
	0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // at(uint _x) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, // turn uvec4(_x, _
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x6d, 0x61, // x, _x, _x); }.ma
	0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, // t4 mtxFromRows(v
	0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, // ec4 _0, vec4 _1,
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, //  vec4 _2, vec4 _
	0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, // 3).{.return tran
	0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, // spose(mat4(_0, _
	0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // 1, _2, _3) );.}.
	0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, // mat4 mtxFromCols
	0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, // (vec4 _0, vec4 _
	0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // 1, vec4 _2, vec4
	0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, //  _3).{.return ma
	0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, // t4(_0, _1, _2, _
	0x33, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, // 3);.}.mat3 mtxFr
	0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, // omRows(vec3 _0, 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, // vec3 _1, vec3 _2
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, // ).{.return trans
	0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, // pose(mat3(_0, _1
	0x2c, 0x20, 0x5f, 0x32, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, // , _2) );.}.mat3 
	0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, // mtxFromCols(vec3
	0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, //  _0, vec3 _1, ve
	0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // c3 _2).{.return 
	0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, // mat3(_0, _1, _2)
	0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, // ;.}.uniform vec4
	0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, //  u_viewRect;.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, // form vec4 u_view
	0x54, 0x65, 0x78, 0x65, 0x6c, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, // Texel;.uniform m
	0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // at4 u_view;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, // orm mat4 u_invVi
	0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, // ew;.uniform mat4
	0x20, 0x75, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, //  u_proj;.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, 0x6a, 0x3b, //  mat4 u_invProj;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, // .uniform mat4 u_
	0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // viewProj;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, // m mat4 u_invView
	0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, // Proj;.uniform ma
	0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, 0x3b, 0x0a, // t4 u_model[32];.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, // uniform mat4 u_m
	0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // odelView;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, // m mat4 u_modelVi
	0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // ewProj;.uniform 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x66, 0x34, // vec4 u_alphaRef4
	0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, // ;.float sqr(cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // t float v).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, // urn v*v;.}.vec2 
	0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, // sqr(const vec2 v
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, // ).{.return v*v;.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, // }.vec3 sqr(const
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, //  vec3 v).{.retur
	0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6d, 0x75, // n v*v;.}.vec3 mu
	0x6c, 0x5f, 0x77, 0x31, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // l_w1(const vec3 
	0x76, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x29, // v, const mat4 m)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2e, 0x78, 0x2a, 0x6d, 0x5b, // .{.return v.x*m[
	0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x79, 0x2a, 0x6d, 0x5b, // 0].xyz + (v.y*m[
	0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x7a, 0x2a, 0x6d, 0x5b, // 1].xyz + (v.z*m[
	0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x6d, 0x5b, 0x33, 0x5d, 0x2e, 0x78, 0x79, // 2].xyz + m[3].xy
	0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x63, 0x6f, // z));.}.float aco
	0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x63, // s_approx_divPI(c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, // onst float v).{.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, // const float x = 
	0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, // abs(v);.if(1. - 
	0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, // x <= 0.000061035
	0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, // 15625).return (v
	0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x20, 0x3a, 0x20, 0x31, //  >= 0.) ? 0. : 1
	0x2e, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, // .;.const float r
	0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, // es = ((-0.155972
	0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, // /3.1415926535897
	0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, // 9323846264338327
	0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, // 95) * x + (1.564
	0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, // 67/3.14159265358
	0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, // 9793238462643383
	0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, // 2795) ) * sqrt(1
	0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // . - x);.return (
	0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, // v >= 0.) ? res :
	0x20, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, //  1. - res;.}.flo
	0x61, 0x74, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, // at atan2_approx_
	0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, // div2PI(const flo
	0x61, 0x74, 0x20, 0x79, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, // at y, const floa
	0x74, 0x20, 0x78, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, // t x).{.const flo
	0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x79, // at abs_y = abs(y
	0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, // );.const float a
	0x62, 0x73, 0x5f, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x78, 0x29, 0x3b, 0x0a, 0x69, // bs_x = abs(x);.i
	0x66, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, // f(abs_x <= 0.000
	0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x20, 0x26, 0x26, 0x20, 0x61, // 06103515625 && a
	0x62, 0x73, 0x5f, 0x79, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, // bs_y <= 0.000061
	0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // 03515625).return
	0x20, 0x30, 0x2e, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, //  0.;.const float
	0x20, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2d, 0x20, 0x61, 0x62, //  r = (abs_x - ab
	0x73, 0x5f, 0x79, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2b, 0x20, // s_y) / (abs_x + 
	0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // abs_y);.const fl
	0x6f, 0x61, 0x74, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x78, 0x20, // oat angle = ((x 
	0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x28, 0x33, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x20, // < 0.) ? (3./8.) 
	0x3a, 0x20, 0x28, 0x31, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x29, 0x0a, 0x2b, 0x20, 0x28, 0x30, 0x2e, // : (1./8.)).+ (0.
	0x32, 0x31, 0x31, 0x38, 0x36, 0x38, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, // 211868 /(2.*3.14
	0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, // 1592653589793238
	0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, // 4626433832795) *
	0x20, 0x72, 0x20, 0x2a, 0x20, 0x72, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x39, 0x38, 0x37, 0x33, 0x30, //  r * r - 0.98730
	0x35, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, // 5 /(2.*3.1415926
	0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, // 5358979323846264
	0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x78, // 33832795)) * ((x
	0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x72, 0x20, 0x3a, 0x20, 0x72, 0x29, //  < 0.) ? -r : r)
	0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x79, 0x20, 0x3c, 0x20, 0x30, 0x2e, // ;.return (y < 0.
	0x29, 0x20, 0x3f, 0x20, 0x2d, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3a, 0x20, 0x61, 0x6e, 0x67, // ) ? -angle : ang
	0x6c, 0x65, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x73, 0x69, 0x6e, // le;.}.float asin
	0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x63, 0x6f, // _approx_divPI(co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x63, // nst float v).{.c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, // onst float x = a
	0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, // bs(v);.if(1. - x
	0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, //  <= 0.0000610351
	0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, // 5625).return (v 
	0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x3a, 0x20, 0x2d, // >= 0.) ? 0.5 : -
	0x30, 0x2e, 0x35, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // 0.5;.const float
	0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, //  res = ((-0.1559
	0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, // 72/3.14159265358
	0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, // 9793238462643383
	0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, // 2795) * x + (1.5
	0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, // 6467/3.141592653
	0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, // 5897932384626433
	0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, // 832795) ) * sqrt
	0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // (1. - x);.return
	0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, //  (v >= 0.) ? 0.5
	0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, //  - res : -0.5 + 
	0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x61, 0x79, 0x5f, // res;.}.vec2 ray_
	0x74, 0x6f, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x75, 0x6c, // to_equirectangul
	0x61, 0x72, 0x5f, 0x75, 0x76, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, // ar_uv(const vec3
	0x20, 0x72, 0x61, 0x79, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, //  ray).{.return v
	0x65, 0x63, 0x32, 0x28, 0x0a, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, // ec2(.0.5 + atan2
	0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x72, // _approx_div2PI(r
	0x61, 0x79, 0x2e, 0x79, 0x2c, 0x20, 0x72, 0x61, 0x79, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x61, 0x63, // ay.y, ray.x),.ac
	0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, // os_approx_divPI(
	0x72, 0x61, 0x79, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // ray.z));.}.float
	0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, //  InvsRGB(const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, // loat color).{.if
	0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, //  (color <= 0.040
	0x34, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // 45).return color
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x29, 0x3b, 0x0a, //  * (1.0/12.92);.
	0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, // else.return pow(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, // color * (1.0/1.0
	0x35, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x2f, 0x31, 0x2e, 0x30, // 55) + (0.055/1.0
	0x35, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // 55), 2.4);.}.flo
	0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x63, 0x6f, 0x6e, // at InvRec709(con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, // st float color).
	0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, // {.if (color <= 0
	0x2e, 0x30, 0x38, 0x31, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, // .081).return col
	0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x34, 0x2e, 0x35, 0x29, 0x3b, 0x0a, // or * (1.0/4.5);.
	0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, // else.return pow(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, // color * (1.0/1.0
	0x39, 0x39, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x2f, 0x31, 0x2e, 0x30, // 99) + (0.099/1.0
	0x39, 0x39, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x3b, 0x0a, // 99), 1.0/0.45);.
	0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, // }.float InvGamma
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, // (const float col
	0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x49, 0x6e, 0x76, // or).{.return Inv
	0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // sRGB(color);.}.v
	0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, // ec3 InvGamma(con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, // st vec3 color).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x49, 0x6e, 0x76, // .return vec3(Inv
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x49, // Gamma(color.x),I
	0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, // nvGamma(color.y)
	0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, // ,InvGamma(color.
	0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x54, // z));.}.vec3 InvT
	0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, // oneMap(const vec
	0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, // 3 color).{.const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x20, 0x3d, //  float inv_2bh =
	0x20, 0x30, 0x2e, 0x35, 0x2f, 0x30, 0x2e, 0x32, 0x35, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, //  0.5/0.25;.const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x34, 0x2e, 0x30, 0x2a, //  float bh = 4.0*
	0x30, 0x2e, 0x32, 0x35, 0x20, 0x2d, 0x20, 0x32, 0x2e, 0x30, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // 0.25 - 2.0;.retu
	0x72, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, // rn (color - 1.0 
	0x2b, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2a, 0x28, 0x63, 0x6f, // + sqrt(color*(co
	0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x20, 0x62, 0x68, 0x29, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, // lor + bh) + 1.0)
	0x29, 0x2a, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // )*inv_2bh;.}.flo
	0x61, 0x74, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // at sRGB(const fl
	0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, // oat f).{.float s
	0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x33, // ;.if (f <= 0.003
	0x31, 0x33, 0x30, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x20, // 1308).s = 12.92 
	0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, // * f;.else.s = 1.
	0x30, 0x35, 0x35, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x31, 0x2e, 0x30, // 055 * pow(f, 1.0
	0x2f, 0x32, 0x2e, 0x34, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x3b, 0x0a, 0x72, // /2.4) - 0.055;.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // eturn s;.}.float
	0x20, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, //  Rec709(const fl
	0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, // oat f).{.float s
	0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, // ;.if (f <= 0.018
	0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x34, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, // ).s = 4.5 * f;.e
	0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x20, 0x2a, 0x20, // lse.s = 1.099 * 
	0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x20, 0x2d, 0x20, 0x30, // pow(f, 0.45) - 0
	0x2e, 0x30, 0x39, 0x39, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, // .099;.return s;.
	0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, // }.float FBGamma(
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // const float colo
	0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x52, 0x47, 0x42, // r).{.return sRGB
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, // (color);.}.vec2 
	0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // FBGamma(const ve
	0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, // c2 color).{.retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, // rn vec2(FBGamma(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, // color.x),FBGamma
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // (color.y));.}.ve
	0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, // c3 FBGamma(const
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, //  vec3 color).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, // eturn vec3(FBGam
	0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, // ma(color.x),FBGa
	0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x46, 0x42, 0x47, // mma(color.y),FBG
	0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, // amma(color.z));.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x32, 0x32, // }.vec3 FBGamma22
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // (const vec3 colo
	0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, // r).{.return vec3
	0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x2c, 0x20, 0x31, 0x2e, // (pow(color.x, 1.
	0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // 0/2.2),pow(color
	0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, // .y, 1.0/2.2),pow
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, // (color.z, 1.0/2.
	0x32, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x54, // 2));.}.float FBT
	0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, // oneMap(const flo
	0x61, 0x74, 0x20, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6c, // at l).{.return l
	0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, //  * ((l*0.25 + 1.
	0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, // 0) / (l + 1.0));
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, // .}.vec2 FBToneMa
	0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, // p(const vec2 col
	0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, // or).{.const floa
	0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, // t l = dot(color,
	0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2b, 0x30, 0x2e, // vec2(0.176204+0.
	0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x2c, 0x30, 0x2e, 0x38, 0x31, // 0108109*0.5,0.81
	0x32, 0x39, 0x38, 0x35, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, // 2985+0.0108109*0
	0x2e, 0x35, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, // .5));.return col
	0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, // or * ((l*0.25 + 
	0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, // 1.0) / (l + 1.0)
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, // );.}.vec3 FBTone
	0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, // Map(const vec3 c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // olor).{.const fl
	0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // oat l = dot(colo
	0x72, 0x2c, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2c, // r,vec3(0.176204,
	0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2c, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, // 0.812985,0.01081
	0x30, 0x39, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, // 09));.return col
	0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, // or * ((l*0.25 + 
	0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, // 1.0) / (l + 1.0)
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, // );.}.vec4 Additi
	0x76, 0x65, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // ve(const vec4 cB
	0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // ase, const vec4 
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // cBlend, const fl
	0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, // oat percent).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2b, 0x20, 0x63, 0x42, // eturn cBase + cB
	0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, // lend*percent;.}.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6e, // vec3 Screen (con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, // st vec3 cBase, c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, // onst vec3 cBlend
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, // ).{.return 1.0 -
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, //  (1.0 - cBase) *
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, //  (1.0 - cBlend);
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, // .}.vec4 Screen (
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, // const vec4 cBase
	0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, // , const vec4 cBl
	0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, // end).{.return 1.
	0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, // 0 - (1.0 - cBase
	0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // ) * (1.0 - cBlen
	0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, // d);.}.vec3 Scree
	0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, // nHDR (const vec3
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, //  cBase, const ve
	0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // c3 cBlend).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, // urn max(1.0 - (1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, // .0 - cBase) * (1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, // .0 - cBlend), ve
	0x63, 0x33, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, // c3(0.,0.,0.));.}
	0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, // .vec4 ScreenHDR 
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, // (const vec4 cBas
	0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // e, const vec4 cB
	0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, // lend).{.return m
	0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, // ax(1.0 - (1.0 - 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, // cBase) * (1.0 - 
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, // cBlend), vec4(0.
	0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // ,0.,0.,0.));.}.v
	0x65, 0x63, 0x34, 0x20, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x20, 0x28, 0x63, 0x6f, // ec4 Multiply (co
	0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, // nst vec4 cBase, 
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // const vec4 cBlen
	0x64, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, // d, const float p
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // ercent).{.return
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2a, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, //  cBase * cBlend*
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, // percent;.}.vec4 
	0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, // Overlay (const v
	0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, // ec4 cBase, const
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, //  vec4 cBlend).{.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, // vec4 cNew = step
	0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, // (0.5, cBase);.cN
	0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, // ew = mix(cBase*c
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, // Blend*2.0, 1.0-2
	0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, // .0*(1.0-cBase)*(
	0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, // 1.0-cBlend), cNe
	0x77, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, // w);.return cNew;
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x48, // .}.vec4 OverlayH
	0x44, 0x52, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, // DR (const vec4 c
	0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, // Base, const vec4
	0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, //  cBlend).{.vec4 
	0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, // cNew = step(0.5,
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, //  cBase);.cNew = 
	0x6d, 0x61, 0x78, 0x28, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, // max(mix(cBase*cB
	0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, // lend*2.0, 1.0-2.
	0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, // 0*(1.0-cBase)*(1
	0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, // .0-cBlend), cNew
	0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, // ), vec4(0.,0.,0.
	0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, // ,0.));.return cN
	0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x73, 0x5f, 0x68, // ew;.}.vec3 cos_h
	0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // emisphere_sample
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x29, 0x0a, 0x7b, // (const vec2 t).{
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x68, 0x69, // .const float phi
	0x20, 0x3d, 0x20, 0x74, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x28, 0x32, 0x2e, 0x30, 0x2a, 0x33, 0x2e, //  = t.y * (2.0*3.
	0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, // 1415926535897932
	0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, // 384626433832795)
	0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, // ;.const float co
	0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, // sTheta = sqrt(1.
	0x30, 0x20, 0x2d, 0x20, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // 0 - t.x);.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, // float sinTheta =
	0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, //  sqrt(t.x);.floa
	0x74, 0x20, 0x73, 0x70, 0x2c, 0x63, 0x70, 0x3b, 0x0a, 0x73, 0x69, 0x6e, 0x63, 0x6f, 0x73, 0x28, // t sp,cp;.sincos(
	0x70, 0x68, 0x69, 0x2c, 0x73, 0x70, 0x2c, 0x63, 0x70, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // phi,sp,cp);.retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x63, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, // rn vec3(cp * sin
	0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, // Theta, cosTheta,
	0x20, 0x73, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x29, 0x3b, //  sp * sinTheta);
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, // .}.vec3 rotate_t
	0x6f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x28, 0x63, // o_vector_upper(c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x63, // onst vec3 vec, c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, // onst vec3 normal
	0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, // ).{.if(normal.y 
	0x3e, 0x20, 0x2d, 0x30, 0x2e, 0x39, 0x39, 0x39, 0x39, 0x39, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, // > -0.99999).{.co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x20, 0x3d, 0x20, 0x31, 0x2e, // nst float h = 1.
	0x30, 0x2f, 0x28, 0x31, 0x2e, 0x30, 0x2b, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x29, // 0/(1.0+normal.y)
	0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, // ;.const float hz
	0x20, 0x3d, 0x20, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x3b, 0x0a, 0x63, //  = h*normal.z;.c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x3d, // onst float hzx =
	0x20, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x3b, 0x0a, 0x72, 0x65, //  hz*normal.x;.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x78, // turn vec3(.vec.x
	0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x7a, 0x2a, //  * (normal.y+hz*
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x29, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, // normal.z) + vec.
	0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, // y * normal.x - v
	0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, // ec.z * hzx,.vec.
	0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x2d, 0x20, 0x76, // y * normal.y - v
	0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, // ec.x * normal.x 
	0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, // - vec.z * normal
	0x2e, 0x7a, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, // .z,.vec.y * norm
	0x61, 0x6c, 0x2e, 0x7a, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x68, // al.z - vec.x * h
	0x7a, 0x78, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, // zx + vec.z * (no
	0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, // rmal.y+h*normal.
	0x78, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // x*normal.x));.}.
	0x65, 0x6c, 0x73, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x2d, 0x76, 0x65, 0x63, // else return -vec
	0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, // ;.}.uniform vec4
	0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x53, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, //  Stereo_Saturati
	0x6f, 0x6e, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, // on;.uniform vec4
	0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, //  Stereo_MS_ZPD_Y
	0x41, 0x78, 0x69, 0x73, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, // Axis;.uniform sa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x20, 0x74, 0x65, 0x78, // mpler2DArray tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // _stereo_fb;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, 0x72, 0x72, // orm sampler2DArr
	0x61, 0x79, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, // ay tex_stereo_de
	0x70, 0x74, 0x68, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, // pth;.uniform vec
	0x34, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, 0x76, 0x65, // 4 w_h_height;.ve
	0x63, 0x33, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, // c3 gatherEyeColo
	0x72, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x69, // r(vec2 u, bool i
	0x73, 0x4c, 0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // sLeft).{.return 
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x6f, // texture2DArrayLo
	0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, // d(tex_stereo_fb,
	0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, 0x20, //  vec3(u.x, u.y, 
	0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x30, 0x20, 0x3a, 0x20, 0x31, // isLeft ? 0.0 : 1
	0x2e, 0x30, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x7d, 0x0a, // .0), 0.).rgb;.}.
	0x76, 0x6f, 0x69, 0x64, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x52, // void gatherLeftR
	0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, // ightColors(vec2 
	0x75, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x63, 0x6f, 0x6c, // u, out vec3 lcol
	0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x6f, 0x6c, 0x29, // , out vec3 rcol)
	0x0a, 0x7b, 0x0a, 0x6c, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // .{.lcol = textur
	0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, // e2DArrayLod(tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, // stereo_fb, vec3(
	0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2c, 0x20, 0x30, // u.x, u.y, 0.), 0
	0x2e, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x72, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, // .).xyz;.rcol = t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x6f, 0x64, // exture2DArrayLod
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, // (tex_stereo_fb, 
	0x76, 0x65, 0x63, 0x33, 0x28, 0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, 0x20, 0x31, // vec3(u.x, u.y, 1
	0x2e, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, // .), 0.).xyz;.}.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, // niform mat4 Ster
	0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // eo_LeftMat;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // orm mat4 Stereo_
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // RightMat;.unifor
	0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, // m vec4 Stereo_Le
	0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, // ftLuminance_Gamm
	0x61, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // a;.uniform vec4 
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, // Stereo_RightLumi
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x3b, 0x0a, // nance_DynDesat;.
	0x76, 0x6f, 0x69, 0x64, 0x20, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x65, 0x73, 0x61, // void DynamicDesa
	0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // tAnaglyph(const 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, // vec3 lCol, const
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, //  vec3 rCol, out 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // vec3 lDesatCol, 
	0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, // out vec3 rDesatC
	0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, // ol).{.const floa
	0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, // t left2LeftLum =
	0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, //  dot(lCol, Stere
	0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, // o_LeftLuminance_
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // Gamma.xyz);.cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, // t float left2Rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, // htLum = dot(lCol
	0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // , Stereo_RightLu
	0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, // minance_DynDesat
	0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, // .xyz);.const flo
	0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // at right2LeftLum
	0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, //  = dot(rCol, Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, // reo_LeftLuminanc
	0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, // e_Gamma.xyz);.co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, // nst float right2
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, // RightLum = dot(r
	0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, // Col, Stereo_Righ
	0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, // tLuminance_DynDe
	0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // sat.xyz);.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, // float leftLum = 
	0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x6c, // left2LeftLum + l
	0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, 0x0a, 0x63, 0x6f, // eft2RightLum;.co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, // nst float rightL
	0x75, 0x6d, 0x20, 0x3d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, // um = right2LeftL
	0x75, 0x6d, 0x20, 0x2b, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, // um + right2Right
	0x4c, 0x75, 0x6d, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // Lum;.const float
	0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, //  leftDesat = Ste
	0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, // reo_RightLuminan
	0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, // ce_DynDesat.w * 
	0x61, 0x62, 0x73, 0x28, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, // abs((left2LeftLu
	0x6d, 0x20, 0x2d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // m - left2RightLu
	0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, // m) / (leftLum + 
	0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // 0.0001));.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, // float rightDesat
	0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, //  = Stereo_RightL
	0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, // uminance_DynDesa
	0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, // t.w * abs((right
	0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, // 2LeftLum - right
	0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x72, 0x69, // 2RightLum) / (ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, // ghtLum + 0.0001)
	0x29, 0x3b, 0x0a, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, // );.lDesatCol = m
	0x69, 0x78, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, // ix(lCol, vec3_sp
	0x6c, 0x61, 0x74, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, 0x6c, 0x65, // lat(leftLum), le
	0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x72, 0x44, 0x65, 0x73, 0x61, 0x74, // ftDesat);.rDesat
	0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // Col = mix(rCol, 
	0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, // vec3_splat(right
	0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, // Lum), rightDesat
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, // );.}.vec3 Linear
	0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, // Anaglyph(const v
	0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // ec3 lCol, const 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, // vec3 rCol).{.con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, // st vec3 color = 
	0x28, 0x28, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, // (( (vec4(lCol, 1
	0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, // .)) * (Stereo_Le
	0x66, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x20, 0x28, 0x76, 0x65, // ftMat) ) + ( (ve
	0x63, 0x34, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, // c4(rCol, 1.)) * 
	0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, // (Stereo_RightMat
	0x29, 0x20, 0x29, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // ) )).rgb;.return
	0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, //  color;.}.unifor
	0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, // m vec4 Stereo_De
	0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // ghostGamma;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // orm mat4 Stereo_
	0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3b, 0x0a, 0x76, // DeghostFilter;.v
	0x65, 0x63, 0x33, 0x20, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, // ec3 DeghostAnagl
	0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, // yph(const vec3 l
	0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // Col, const vec3 
	0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // rCol).{.const ve
	0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, // c3 color = Linea
	0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // rAnaglyph(lCol, 
	0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, // rCol);.return ( 
	0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, // (pow(color, Ster
	0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, // eo_DeghostGamma.
	0x72, 0x67, 0x62, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x53, 0x74, // rgb)) * (mat3(St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, // ereo_DeghostFilt
	0x65, 0x72, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // er[0].xyz, Stere
	0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, // o_DeghostFilter[
	0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, // 1].xyz, Stereo_D
	0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x32, 0x5d, 0x2e, // eghostFilter[2].
	0x78, 0x79, 0x7a, 0x29, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, // xyz)) );.}.void 
	0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, // main().{.bgfx_Fr
	0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x67, // agColor = vec4(g
	0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x66, 0x6c, // atherEyeColor(fl
	0x6f, 0x61, 0x74, 0x32, 0x28, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, // oat2(v_texcoord0
	0x2e, 0x78, 0x20, 0x2a, 0x20, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, // .x * 2.0, v_texc
	0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2e, 0x79, 0x29, 0x2c, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, // oord0.y), v_texc
	0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2e, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x2c, 0x20, // oord0.x < 0.5), 
	0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x00,                                           // 1.0);.}..
};
static const uint8_t fs_pp_stereo_sbs_st_glsl[8985] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x23, // FSH.Jc._.......#
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x34, 0x34, 0x30, 0x0a, 0x6f, // ..#version 440.o
	0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, // ut vec4 bgfx_Fra
	0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, // gColor;.#define 
	0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x62, 0x67, 0x66, // gl_FragColor bgf
	0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x0a, 0x23, 0x64, 0x65, 0x66, // x_FragColor.#def
	0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x20, 0x20, 0x20, // ine texture2D   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x0a, 0x23, //        texture.#
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, // define texture2D
	0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // Lod       textur
	0x65, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, // eLod.#define tex
	0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ture2DGrad      
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, // textureGrad.#def
	0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, // ine texture2DPro
	0x6a, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, // jLod   texturePr
	0x6f, 0x6a, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, // ojLod.#define te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, 0x20, // xture2DProjGrad 
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, //  textureProjGrad
	0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // .#define texture
	0x43, 0x75, 0x62, 0x65, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, // CubeLod     text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, // ureLod.#define t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, // extureCubeGrad  
	0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, //   textureGrad.#d
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x33, 0x44, 0x20, // efine texture3D 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, //          texture
	0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // .#define texture
	0x32, 0x44, 0x4c, 0x6f, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x20, 0x74, 0x65, 0x78, 0x74, // 2DLodOffset text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x0a, 0x23, 0x64, 0x65, // ureLodOffset.#de
	0x66, 0x69, 0x6e, 0x65, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x69, // fine attribute i
	0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, // n.#define varyin
	0x67, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x62, 0x67, 0x66, // g in.#define bgf
	0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, // xShadow2D(_sampl
	0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, // er, _coord)     
	0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, // vec4_splat(textu
	0x72, 0x65, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, // re(_sampler, _co
	0x6f, 0x72, 0x64, 0x29, 0x20, 0x29, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x62, // ord) ).#define b
	0x67, 0x66, 0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x28, // gfxShadow2DProj(
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, // _sampler, _coord
	0x29, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, // ) vec4_splat(tex
	0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // tureProj(_sample
	0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x29, 0x0a, 0x76, 0x61, 0x72, // r, _coord) ).var
	0x79, 0x69, 0x6e, 0x67, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x5f, 0x65, 0x79, 0x65, // ying float v_eye
	0x3b, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, // ;.varying vec2 v
	0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, // _texcoord0;.vec3
	0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, //  instMul(vec3 _v
	0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, // ec, mat3 _mtx) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, //  return ( (_vec)
	0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, //  * (_mtx) ); }.v
	0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, // ec3 instMul(mat3
	0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, //  _mtx, vec3 _vec
	0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, // ) { return ( (_m
	0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, // tx) * (_vec) ); 
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, // }.vec4 instMul(v
	0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, // ec4 _vec, mat4 _
	0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, // mtx) { return ( 
	0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, // (_vec) * (_mtx) 
	0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, // ); }.vec4 instMu
	0x6c, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, // l(mat4 _mtx, vec
	0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // 4 _vec) { return
	0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, //  ( (_mtx) * (_ve
	0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, // c) ); }.float rc
	0x70, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // p(float _a) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, // turn 1.0/_a; }.v
	0x65, 0x63, 0x32, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, // ec2 rcp(vec2 _a)
	0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, //  { return vec2(1
	0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, // .0)/_a; }.vec3 r
	0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // cp(vec3 _a) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, // turn vec3(1.0)/_
	0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, // a; }.vec4 rcp(ve
	0x63, 0x34, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // c4 _a) { return 
	0x76, 0x65, 0x63, 0x34, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, // vec4(1.0)/_a; }.
	0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, // vec2 vec2_splat(
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // float _x) { retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, // rn vec2(_x, _x);
	0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, //  }.vec3 vec3_spl
	0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, // at(float _x) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, // eturn vec3(_x, _
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, // x, _x); }.vec4 v
	0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // ec4_splat(float 
	0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, // _x) { return vec
	0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, // 4(_x, _x, _x, _x
	0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, // ); }.uvec2 uvec2
	0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, // _splat(uint _x) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, // { return uvec2(_
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, // x, _x); }.uvec3 
	0x75, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, // uvec3_splat(uint
	0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, //  _x) { return uv
	0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, // ec3(_x, _x, _x);
	0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, //  }.uvec4 uvec4_s
	0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, // plat(uint _x) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, // return uvec4(_x,
	0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, //  _x, _x, _x); }.
	0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, // mat4 mtxFromRows
	0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, // (vec4 _0, vec4 _
	0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // 1, vec4 _2, vec4
	0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, //  _3).{.return tr
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, // anspose(mat4(_0,
	0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, //  _1, _2, _3) );.
	0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, // }.mat4 mtxFromCo
	0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // ls(vec4 _0, vec4
	0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, //  _1, vec4 _2, ve
	0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // c4 _3).{.return 
	0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, // mat4(_0, _1, _2,
	0x20, 0x5f, 0x33, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, //  _3);.}.mat3 mtx
	0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, // FromRows(vec3 _0
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // , vec3 _1, vec3 
	0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, // _2).{.return tra
	0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, // nspose(mat3(_0, 
	0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, // _1, _2) );.}.mat
	0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, // 3 mtxFromCols(ve
	0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, // c3 _0, vec3 _1, 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // vec3 _2).{.retur
	0x6e, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, // n mat3(_0, _1, _
	0x32, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, // 2);.}.uniform ve
	0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, // c4 u_viewRect;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, // niform vec4 u_vi
	0x65, 0x77, 0x54, 0x65, 0x78, 0x65, 0x6c, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // ewTexel;.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, //  mat4 u_view;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, // iform mat4 u_inv
	0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, // View;.uniform ma
	0x74, 0x34, 0x20, 0x75, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, // t4 u_proj;.unifo
	0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, // rm mat4 u_invPro
	0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, // j;.uniform mat4 
	0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // u_viewProj;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, // orm mat4 u_invVi
	0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // ewProj;.uniform 
	0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, // mat4 u_model[32]
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, // ;.uniform mat4 u
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // _modelView;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, // orm mat4 u_model
	0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // ViewProj;.unifor
	0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, // m vec4 u_alphaRe
	0x66, 0x34, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, // f4;.float sqr(co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, // nst float v).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // eturn v*v;.}.vec
	0x32, 0x20, 0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, // 2 sqr(const vec2
	0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, //  v).{.return v*v
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, // ;.}.vec3 sqr(con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // st vec3 v).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // urn v*v;.}.vec3 
	0x6d, 0x75, 0x6c, 0x5f, 0x77, 0x31, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, // mul_w1(const vec
	0x33, 0x20, 0x76, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, // 3 v, const mat4 
	0x6d, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2e, 0x78, 0x2a, // m).{.return v.x*
	0x6d, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x79, 0x2a, // m[0].xyz + (v.y*
	0x6d, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x7a, 0x2a, // m[1].xyz + (v.z*
	0x6d, 0x5b, 0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x6d, 0x5b, 0x33, 0x5d, 0x2e, // m[2].xyz + m[3].
	0x78, 0x79, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, // xyz));.}.float a
	0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, // cos_approx_divPI
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, // (const float v).
	0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, // {.const float x 
	0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, // = abs(v);.if(1. 
	0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, // - x <= 0.0000610
	0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // 3515625).return 
	0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x20, 0x3a, // (v >= 0.) ? 0. :
	0x20, 0x31, 0x2e, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, //  1.;.const float
	0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, //  res = ((-0.1559
	0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, // 72/3.14159265358
	0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, // 9793238462643383
	0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, // 2795) * x + (1.5
	0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, // 6467/3.141592653
	0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, // 5897932384626433
	0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, // 832795) ) * sqrt
	0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // (1. - x);.return
	0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x72, 0x65, 0x73, //  (v >= 0.) ? res
	0x20, 0x3a, 0x20, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, //  : 1. - res;.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, // loat atan2_appro
	0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // x_div2PI(const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x79, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // loat y, const fl
	0x6f, 0x61, 0x74, 0x20, 0x78, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // oat x).{.const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, // loat abs_y = abs
	0x28, 0x79, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // (y);.const float
	0x20, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x78, 0x29, 0x3b, //  abs_x = abs(x);
	0x0a, 0x69, 0x66, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, // .if(abs_x <= 0.0
	0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x20, 0x26, 0x26, // 0006103515625 &&
	0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, //  abs_y <= 0.0000
	0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, // 6103515625).retu
	0x72, 0x6e, 0x20, 0x30, 0x2e, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, // rn 0.;.const flo
	0x61, 0x74, 0x20, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2d, 0x20, // at r = (abs_x - 
	0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, // abs_y) / (abs_x 
	0x2b, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // + abs_y);.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3d, 0x20, 0x28, 0x28, // float angle = ((
	0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x28, 0x33, 0x2e, 0x2f, 0x38, 0x2e, // x < 0.) ? (3./8.
	0x29, 0x20, 0x3a, 0x20, 0x28, 0x31, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x29, 0x0a, 0x2b, 0x20, 0x28, // ) : (1./8.)).+ (
	0x30, 0x2e, 0x32, 0x31, 0x31, 0x38, 0x36, 0x38, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, // 0.211868 /(2.*3.
	0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, // 1415926535897932
	0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, // 384626433832795)
	0x20, 0x2a, 0x20, 0x72, 0x20, 0x2a, 0x20, 0x72, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x39, 0x38, 0x37, //  * r * r - 0.987
	0x33, 0x30, 0x35, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, // 305 /(2.*3.14159
	0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, // 2653589793238462
	0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, // 6433832795)) * (
	0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x72, 0x20, 0x3a, 0x20, // (x < 0.) ? -r : 
	0x72, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x79, 0x20, 0x3c, 0x20, // r);.return (y < 
	0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3a, 0x20, 0x61, // 0.) ? -angle : a
	0x6e, 0x67, 0x6c, 0x65, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x73, // ngle;.}.float as
	0x69, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, // in_approx_divPI(
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, // const float v).{
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, // .const float x =
	0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, //  abs(v);.if(1. -
	0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, //  x <= 0.00006103
	0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // 515625).return (
	0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x3a, // v >= 0.) ? 0.5 :
	0x20, 0x2d, 0x30, 0x2e, 0x35, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, //  -0.5;.const flo
	0x61, 0x74, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, // at res = ((-0.15
	0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, // 5972/3.141592653
	0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, // 5897932384626433
	0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, // 832795) * x + (1
	0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, // .56467/3.1415926
	0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, // 5358979323846264
	0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, // 33832795) ) * sq
	0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // rt(1. - x);.retu
	0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, // rn (v >= 0.) ? 0
	0x2e, 0x35, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x20, // .5 - res : -0.5 
	0x2b, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x61, // + res;.}.vec2 ra
	0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, // y_to_equirectang
	0x75, 0x6c, 0x61, 0x72, 0x5f, 0x75, 0x76, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // ular_uv(const ve
	0x63, 0x33, 0x20, 0x72, 0x61, 0x79, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // c3 ray).{.return
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x0a, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x61, 0x74, 0x61, //  vec2(.0.5 + ata
	0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, // n2_approx_div2PI
	0x28, 0x72, 0x61, 0x79, 0x2e, 0x79, 0x2c, 0x20, 0x72, 0x61, 0x79, 0x2e, 0x78, 0x29, 0x2c, 0x0a, // (ray.y, ray.x),.
	0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, // acos_approx_divP
	0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // I(ray.z));.}.flo
	0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, // at InvsRGB(const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, //  float color).{.
	0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, // if (color <= 0.0
	0x34, 0x30, 0x34, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, // 4045).return col
	0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x29, // or * (1.0/12.92)
	0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, // ;.else.return po
	0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, // w(color * (1.0/1
	0x2e, 0x30, 0x35, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x2f, 0x31, // .055) + (0.055/1
	0x2e, 0x30, 0x35, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // .055), 2.4);.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x63, // loat InvRec709(c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // onst float color
	0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, // ).{.if (color <=
	0x20, 0x30, 0x2e, 0x30, 0x38, 0x31, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, //  0.081).return c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x34, 0x2e, 0x35, 0x29, // olor * (1.0/4.5)
	0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, // ;.else.return po
	0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, // w(color * (1.0/1
	0x2e, 0x30, 0x39, 0x39, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x2f, 0x31, // .099) + (0.099/1
	0x2e, 0x30, 0x39, 0x39, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x30, 0x2e, 0x34, 0x35, 0x29, // .099), 1.0/0.45)
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, // ;.}.float InvGam
	0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, // ma(const float c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x49, // olor).{.return I
	0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, // nvsRGB(color);.}
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, // .vec3 InvGamma(c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, // onst vec3 color)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x49, // .{.return vec3(I
	0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, // nvGamma(color.x)
	0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, // ,InvGamma(color.
	0x79, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // y),InvGamma(colo
	0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, // r.z));.}.vec3 In
	0x76, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, // vToneMap(const v
	0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, // ec3 color).{.con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, // st float inv_2bh
	0x20, 0x3d, 0x20, 0x30, 0x2e, 0x35, 0x2f, 0x30, 0x2e, 0x32, 0x35, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, //  = 0.5/0.25;.con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x34, 0x2e, // st float bh = 4.
	0x30, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2d, 0x20, 0x32, 0x2e, 0x30, 0x3b, 0x0a, 0x72, 0x65, // 0*0.25 - 2.0;.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2d, 0x20, 0x31, 0x2e, // turn (color - 1.
	0x30, 0x20, 0x2b, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2a, 0x28, // 0 + sqrt(color*(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x20, 0x62, 0x68, 0x29, 0x20, 0x2b, 0x20, 0x31, 0x2e, // color + bh) + 1.
	0x30, 0x29, 0x29, 0x2a, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // 0))*inv_2bh;.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // loat sRGB(const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // float f).{.float
	0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, //  s;.if (f <= 0.0
	0x30, 0x33, 0x31, 0x33, 0x30, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, // 031308).s = 12.9
	0x32, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, // 2 * f;.else.s = 
	0x31, 0x2e, 0x30, 0x35, 0x35, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x31, // 1.055 * pow(f, 1
	0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x34, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x3b, // .0/2.4) - 0.055;
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // .return s;.}.flo
	0x61, 0x74, 0x20, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // at Rec709(const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // float f).{.float
	0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, //  s;.if (f <= 0.0
	0x31, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x34, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x66, 0x3b, // 18).s = 4.5 * f;
	0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x20, // .else.s = 1.099 
	0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x20, 0x2d, // * pow(f, 0.45) -
	0x20, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, //  0.099;.return s
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, // ;.}.float FBGamm
	0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, // a(const float co
	0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x52, // lor).{.return sR
	0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // GB(color);.}.vec
	0x32, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // 2 FBGamma(const 
	0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // vec2 color).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, // turn vec2(FBGamm
	0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, // a(color.x),FBGam
	0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // ma(color.y));.}.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, // vec3 FBGamma(con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, // st vec3 color).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x46, 0x42, 0x47, // .return vec3(FBG
	0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, // amma(color.x),FB
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x46, // Gamma(color.y),F
	0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, // BGamma(color.z))
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, // ;.}.vec3 FBGamma
	0x32, 0x32, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, // 22(const vec3 co
	0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, // lor).{.return ve
	0x63, 0x33, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x2c, 0x20, // c3(pow(color.x, 
	0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, // 1.0/2.2),pow(col
	0x6f, 0x72, 0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, // or.y, 1.0/2.2),p
	0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, // ow(color.z, 1.0/
	0x32, 0x2e, 0x32, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, // 2.2));.}.float F
	0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // BToneMap(const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // loat l).{.return
	0x20, 0x6c, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, //  l * ((l*0.25 + 
	0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, // 1.0) / (l + 1.0)
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, // );.}.vec2 FBTone
	0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, // Map(const vec2 c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // olor).{.const fl
	0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // oat l = dot(colo
	0x72, 0x2c, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2b, // r,vec2(0.176204+
	0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x2c, 0x30, 0x2e, // 0.0108109*0.5,0.
	0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, // 812985+0.0108109
	0x2a, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, // *0.5));.return c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, // olor * ((l*0.25 
	0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, // + 1.0) / (l + 1.
	0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x54, 0x6f, // 0));.}.vec3 FBTo
	0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, // neMap(const vec3
	0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, //  color).{.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, // float l = dot(co
	0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, // lor,vec3(0.17620
	0x34, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2c, 0x30, 0x2e, 0x30, 0x31, 0x30, // 4,0.812985,0.010
	0x38, 0x31, 0x30, 0x39, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, // 8109));.return c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, // olor * ((l*0.25 
	0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, // + 1.0) / (l + 1.
	0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x41, 0x64, 0x64, 0x69, // 0));.}.vec4 Addi
	0x74, 0x69, 0x76, 0x65, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // tive(const vec4 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, // cBase, const vec
	0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // 4 cBlend, const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, // float percent).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2b, 0x20, // .return cBase + 
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, // cBlend*percent;.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x63, // }.vec3 Screen (c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, // onst vec3 cBase,
	0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, //  const vec3 cBle
	0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, // nd).{.return 1.0
	0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, //  - (1.0 - cBase)
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, //  * (1.0 - cBlend
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, // );.}.vec4 Screen
	0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, //  (const vec4 cBa
	0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, // se, const vec4 c
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // Blend).{.return 
	0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, // 1.0 - (1.0 - cBa
	0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, // se) * (1.0 - cBl
	0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, // end);.}.vec3 Scr
	0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // eenHDR (const ve
	0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // c3 cBase, const 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, // vec3 cBlend).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, // eturn max(1.0 - 
	0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, // (1.0 - cBase) * 
	0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, // (1.0 - cBlend), 
	0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, // vec3(0.,0.,0.));
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, // .}.vec4 ScreenHD
	0x52, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // R (const vec4 cB
	0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // ase, const vec4 
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // cBlend).{.return
	0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, //  max(1.0 - (1.0 
	0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, // - cBase) * (1.0 
	0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, // - cBlend), vec4(
	0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, // 0.,0.,0.,0.));.}
	0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x20, 0x28, // .vec4 Multiply (
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, // const vec4 cBase
	0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, // , const vec4 cBl
	0x65, 0x6e, 0x64, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // end, const float
	0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, //  percent).{.retu
	0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2a, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // rn cBase * cBlen
	0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // d*percent;.}.vec
	0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, // 4 Overlay (const
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, //  vec4 cBase, con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, // st vec4 cBlend).
	0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, // {.vec4 cNew = st
	0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, // ep(0.5, cBase);.
	0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, // cNew = mix(cBase
	0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, // *cBlend*2.0, 1.0
	0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, // -2.0*(1.0-cBase)
	0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, // *(1.0-cBlend), c
	0x4e, 0x65, 0x77, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, // New);.return cNe
	0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, // w;.}.vec4 Overla
	0x79, 0x48, 0x44, 0x52, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, // yHDR (const vec4
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, //  cBase, const ve
	0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, // c4 cBlend).{.vec
	0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, // 4 cNew = step(0.
	0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, // 5, cBase);.cNew 
	0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, // = max(mix(cBase*
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, // cBlend*2.0, 1.0-
	0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, // 2.0*(1.0-cBase)*
	0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, // (1.0-cBlend), cN
	0x65, 0x77, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, // ew), vec4(0.,0.,
	0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // 0.,0.));.return 
	0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x73, // cNew;.}.vec3 cos
	0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x5f, 0x73, 0x61, 0x6d, 0x70, // _hemisphere_samp
	0x6c, 0x65, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x29, // le(const vec2 t)
	0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, // .{.const float p
	0x68, 0x69, 0x20, 0x3d, 0x20, 0x74, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x28, 0x32, 0x2e, 0x30, 0x2a, // hi = t.y * (2.0*
	0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, // 3.14159265358979
	0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, // 3238462643383279
	0x35, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // 5);.const float 
	0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, // cosTheta = sqrt(
	0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // 1.0 - t.x);.cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, // t float sinTheta
	0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, //  = sqrt(t.x);.fl
	0x6f, 0x61, 0x74, 0x20, 0x73, 0x70, 0x2c, 0x63, 0x70, 0x3b, 0x0a, 0x73, 0x69, 0x6e, 0x63, 0x6f, // oat sp,cp;.sinco
	0x73, 0x28, 0x70, 0x68, 0x69, 0x2c, 0x73, 0x70, 0x2c, 0x63, 0x70, 0x29, 0x3b, 0x0a, 0x72, 0x65, // s(phi,sp,cp);.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x63, 0x70, 0x20, 0x2a, 0x20, 0x73, // turn vec3(cp * s
	0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, // inTheta, cosThet
	0x61, 0x2c, 0x20, 0x73, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, // a, sp * sinTheta
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, // );.}.vec3 rotate
	0x5f, 0x74, 0x6f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, // _to_vector_upper
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x2c, // (const vec3 vec,
	0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, //  const vec3 norm
	0x61, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, // al).{.if(normal.
	0x79, 0x20, 0x3e, 0x20, 0x2d, 0x30, 0x2e, 0x39, 0x39, 0x39, 0x39, 0x39, 0x29, 0x0a, 0x7b, 0x0a, // y > -0.99999).{.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x20, 0x3d, 0x20, // const float h = 
	0x31, 0x2e, 0x30, 0x2f, 0x28, 0x31, 0x2e, 0x30, 0x2b, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, // 1.0/(1.0+normal.
	0x79, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // y);.const float 
	0x68, 0x7a, 0x20, 0x3d, 0x20, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x3b, // hz = h*normal.z;
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x78, // .const float hzx
	0x20, 0x3d, 0x20, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x3b, 0x0a, //  = hz*normal.x;.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x0a, 0x76, 0x65, 0x63, // return vec3(.vec
	0x2e, 0x78, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, // .x * (normal.y+h
	0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x29, 0x20, 0x2b, 0x20, 0x76, 0x65, // z*normal.z) + ve
	0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, // c.y * normal.x -
	0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x2c, 0x0a, 0x76, 0x65, //  vec.z * hzx,.ve
	0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x2d, // c.y * normal.y -
	0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, //  vec.x * normal.
	0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, // x - vec.z * norm
	0x61, 0x6c, 0x2e, 0x7a, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, // al.z,.vec.y * no
	0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, // rmal.z - vec.x *
	0x20, 0x68, 0x7a, 0x78, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x28, //  hzx + vec.z * (
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, // normal.y+h*norma
	0x6c, 0x2e, 0x78, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, // l.x*normal.x));.
	0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x2d, 0x76, // }.else return -v
	0x65, 0x63, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, // ec;.}.uniform ve
	0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x53, 0x61, 0x74, 0x75, 0x72, 0x61, // c4 Stereo_Satura
	0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, // tion;.uniform ve
	0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, // c4 Stereo_MS_ZPD
	0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // _YAxis;.uniform 
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x20, 0x74, // sampler2DArray t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x3b, 0x0a, 0x75, 0x6e, // ex_stereo_fb;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, // iform sampler2DA
	0x72, 0x72, 0x61, 0x79, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // rray tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, // depth;.uniform v
	0x65, 0x63, 0x34, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, // ec4 w_h_height;.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, // vec3 gatherEyeCo
	0x6c, 0x6f, 0x72, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, // lor(vec2 u, bool
	0x20, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, //  isLeft).{.retur
	0x6e, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, // n texture2DArray
	0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, // Lod(tex_stereo_f
	0x62, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, // b, vec3(u.x, u.y
	0x2c, 0x20, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x30, 0x20, 0x3a, // , isLeft ? 0.0 :
	0x20, 0x31, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, //  1.0), 0.).rgb;.
	0x7d, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x66, // }.void gatherLef
	0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x28, 0x76, 0x65, 0x63, // tRightColors(vec
	0x32, 0x20, 0x75, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x63, // 2 u, out vec3 lc
	0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x6f, // ol, out vec3 rco
	0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x6c, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, // l).{.lcol = text
	0x75, 0x72, 0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, // ure2DArrayLod(te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x76, 0x65, 0x63, // x_stereo_fb, vec
	0x33, 0x28, 0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2c, // 3(u.x, u.y, 0.),
	0x20, 0x30, 0x2e, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x72, 0x63, 0x6f, 0x6c, 0x20, 0x3d, //  0.).xyz;.rcol =
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, //  texture2DArrayL
	0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, // od(tex_stereo_fb
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, // , vec3(u.x, u.y,
	0x20, 0x31, 0x2e, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, //  1.), 0.).xyz;.}
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, // .uniform mat4 St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, // ereo_LeftMat;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // iform mat4 Stere
	0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // o_RightMat;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // orm vec4 Stereo_
	0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, // LeftLuminance_Ga
	0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, // mma;.uniform vec
	0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // 4 Stereo_RightLu
	0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, // minance_DynDesat
	0x3b, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x65, // ;.void DynamicDe
	0x73, 0x61, 0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, // satAnaglyph(cons
	0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, // t vec3 lCol, con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, // st vec3 rCol, ou
	0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, // t vec3 lDesatCol
	0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x44, 0x65, 0x73, 0x61, // , out vec3 rDesa
	0x74, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // tCol).{.const fl
	0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // oat left2LeftLum
	0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, //  = dot(lCol, Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, // reo_LeftLuminanc
	0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, // e_Gamma.xyz);.co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, // nst float left2R
	0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, // ightLum = dot(lC
	0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, // ol, Stereo_Right
	0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, // Luminance_DynDes
	0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // at.xyz);.const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, // loat right2LeftL
	0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, // um = dot(rCol, S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, // tereo_LeftLumina
	0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, // nce_Gamma.xyz);.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, // const float righ
	0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, // t2RightLum = dot
	0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, // (rCol, Stereo_Ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, // ghtLuminance_Dyn
	0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // Desat.xyz);.cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, // t float leftLum 
	0x3d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, // = left2LeftLum +
	0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, 0x0a, //  left2RightLum;.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, // const float righ
	0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, // tLum = right2Lef
	0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, // tLum + right2Rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, // htLum;.const flo
	0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, // at leftDesat = S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, // tereo_RightLumin
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, // ance_DynDesat.w 
	0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, // * abs((left2Left
	0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, // Lum - left2Right
	0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, // Lum) / (leftLum 
	0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // + 0.0001));.cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x73, // t float rightDes
	0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, // at = Stereo_Righ
	0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, // tLuminance_DynDe
	0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x72, 0x69, 0x67, // sat.w * abs((rig
	0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x72, 0x69, 0x67, // ht2LeftLum - rig
	0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, // ht2RightLum) / (
	0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, // rightLum + 0.000
	0x31, 0x29, 0x29, 0x3b, 0x0a, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, 0x3d, // 1));.lDesatCol =
	0x20, 0x6d, 0x69, 0x78, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, //  mix(lCol, vec3_
	0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, // splat(leftLum), 
	0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x72, 0x44, 0x65, 0x73, // leftDesat);.rDes
	0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x72, 0x43, 0x6f, 0x6c, // atCol = mix(rCol
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x72, 0x69, 0x67, // , vec3_splat(rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x73, // htLum), rightDes
	0x61, 0x74, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x4c, 0x69, 0x6e, 0x65, // at);.}.vec3 Line
	0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, // arAnaglyph(const
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, //  vec3 lCol, cons
	0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, // t vec3 rCol).{.c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, // onst vec3 color 
	0x3d, 0x20, 0x28, 0x28, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, // = (( (vec4(lCol,
	0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, //  1.)) * (Stereo_
	0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x20, 0x28, // LeftMat) ) + ( (
	0x76, 0x65, 0x63, 0x34, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, // vec4(rCol, 1.)) 
	0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, // * (Stereo_RightM
	0x61, 0x74, 0x29, 0x20, 0x29, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // at) )).rgb;.retu
	0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, // rn color;.}.unif
	0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // orm vec4 Stereo_
	0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, 0x6e, // DeghostGamma;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // iform mat4 Stere
	0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3b, // o_DeghostFilter;
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x6e, 0x61, // .vec3 DeghostAna
	0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, // glyph(const vec3
	0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, //  lCol, const vec
	0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // 3 rCol).{.const 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, 0x6e, // vec3 color = Lin
	0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, // earAnaglyph(lCol
	0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // , rCol);.return 
	0x28, 0x20, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x53, 0x74, // ( (pow(color, St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, // ereo_DeghostGamm
	0x61, 0x2e, 0x72, 0x67, 0x62, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, // a.rgb)) * (mat3(
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, // Stereo_DeghostFi
	0x6c, 0x74, 0x65, 0x72, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, // lter[0].xyz, Ste
	0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, // reo_DeghostFilte
	0x72, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // r[1].xyz, Stereo
	0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x32, // _DeghostFilter[2
	0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, // ].xyz)) );.}.voi
	0x64, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x67, 0x6c, 0x5f, 0x46, 0x72, // d main().{.gl_Fr
	0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x67, // agColor = vec4(g
	0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x66, 0x6c, // atherEyeColor(fl
	0x6f, 0x61, 0x74, 0x32, 0x28, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, // oat2(v_texcoord0
	0x2e, 0x78, 0x20, 0x2a, 0x20, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, // .x * 2.0, v_texc
	0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2e, 0x79, 0x29, 0x2c, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, // oord0.y), v_texc
	0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2e, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x2c, 0x20, // oord0.x < 0.5), 
	0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x00,                                           // 1.0);.}..
};
static const uint8_t fs_pp_stereo_sbs_st_dx11[558] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x0d, 0x74, // FSH.Jc._.......t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x30, 0x01, 0x00, 0x00, // ex_stereo_fb0...
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // .......tex_stere
	0x6f, 0x5f, 0x66, 0x62, 0x30, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe8, 0x01, // o_fb0...........
	0x00, 0x00, 0x44, 0x58, 0x42, 0x43, 0x7a, 0x95, 0x32, 0x1f, 0x10, 0x5c, 0x19, 0x9b, 0xa5, 0x08, // ..DXBCz.2.......
	0xcc, 0x9e, 0xcd, 0x1d, 0x51, 0xa2, 0x01, 0x00, 0x00, 0x00, 0xe8, 0x01, 0x00, 0x00, 0x03, 0x00, // ....Q...........
	0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x9c, 0x00, 0x00, 0x00, 0xd0, 0x00, 0x00, 0x00, 0x49, 0x53, // ..,...........IS
	0x47, 0x4e, 0x68, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x50, 0x00, // GNh...........P.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x5c, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, // ................
	0x00, 0x00, 0x06, 0x06, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, // ......SV_POSITIO
	0x4e, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0xab, 0xab, 0xab, 0x4f, 0x53, // N.TEXCOORD....OS
	0x47, 0x4e, 0x2c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x20, 0x00, // GN,........... .
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x00, // ......SV_TARGET.
	0xab, 0xab, 0x53, 0x48, 0x45, 0x58, 0x10, 0x01, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x44, 0x00, // ..SHEX....P...D.
	0x00, 0x00, 0x6a, 0x08, 0x00, 0x01, 0x5a, 0x00, 0x00, 0x03, 0x00, 0x60, 0x10, 0x00, 0x00, 0x00, // ..j...Z....`....
	0x00, 0x00, 0x58, 0x40, 0x00, 0x04, 0x00, 0x70, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x55, // ..X@...p......UU
	0x00, 0x00, 0x62, 0x10, 0x00, 0x03, 0x62, 0x10, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x65, 0x00, // ..b...b.......e.
	0x00, 0x03, 0xf2, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x02, 0x01, 0x00, // ... ......h.....
	0x00, 0x00, 0x31, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x10, // ..1.............
	0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x37, 0x00, // .......@.....?7.
	0x00, 0x09, 0x42, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, // ..B.............
	0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, // ...@.......@....
	0x80, 0x3f, 0x38, 0x00, 0x00, 0x0a, 0x32, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x96, 0x15, // .?8...2.........
	0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, // .......@.....@..
	0x80, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0x02, 0x02, // .?........H.....
	0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, // ..CU..r.......F.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, // ......F~.......`
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, // .......@......6.
	0x00, 0x05, 0x72, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, // ..r ......F.....
	0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x82, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, // ..6.... .......@
	0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x3e, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,             // .....?>.......
};
static const uint8_t fs_pp_stereo_sbs_st_spv[1098] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0d, 0x74, // FSH.Jc._.......t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x30, 0x00, 0x02, 0x00, // ex_stereo_fb0...
	0x00, 0x00, 0x00, 0x03, 0x22, 0x00, 0x1c, 0x04, 0x00, 0x00, 0x03, 0x02, 0x23, 0x07, 0x00, 0x00, // ....".......#...
	0x01, 0x00, 0x0b, 0x00, 0x08, 0x00, 0xe4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, // ................
	0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, 0x4c, // ..............GL
	0x53, 0x4c, 0x2e, 0x73, 0x74, 0x64, 0x2e, 0x34, 0x35, 0x30, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, // SL.std.450......
	0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x07, 0x00, 0x04, 0x00, // ................
	0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x83, 0x00, // ......main......
	0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x10, 0x00, 0x03, 0x00, 0x04, 0x00, 0x00, 0x00, 0x07, 0x00, // ................
	0x00, 0x00, 0x03, 0x00, 0x03, 0x00, 0x05, 0x00, 0x00, 0x00, 0xf4, 0x01, 0x00, 0x00, 0x05, 0x00, // ................
	0x04, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, // ......main......
	0x08, 0x00, 0x2d, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // ..-...tex_stereo
	0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, // _fbSampler......
	0x08, 0x00, 0x30, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // ..0...tex_stereo
	0x5f, 0x66, 0x62, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, // _fbTexture......
	0x05, 0x00, 0x83, 0x00, 0x00, 0x00, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, // ......v_texcoord
	0x30, 0x00, 0x05, 0x00, 0x06, 0x00, 0x90, 0x00, 0x00, 0x00, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, // 0.........bgfx_F
	0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x2d, 0x00, // ragData0..G...-.
	0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x2d, 0x00, // ..".......G...-.
	0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x30, 0x00, // ..!.......G...0.
	0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x30, 0x00, // ..".......G...0.
	0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x83, 0x00, // ..!.......G.....
	0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x90, 0x00, // ..........G.....
	0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x02, 0x00, 0x02, 0x00, // ................
	0x00, 0x00, 0x21, 0x00, 0x03, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x1a, 0x00, // ..!.............
	0x02, 0x00, 0x06, 0x00, 0x00, 0x00, 0x16, 0x00, 0x03, 0x00, 0x07, 0x00, 0x00, 0x00, 0x20, 0x00, // .............. .
	0x00, 0x00, 0x19, 0x00, 0x09, 0x00, 0x08, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x07, 0x00, // ................
	0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x00, // ................
	0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x19, 0x00, 0x00, 0x00, 0x07, 0x00, // ................
	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x14, 0x00, 0x02, 0x00, 0x1b, 0x00, 0x00, 0x00, 0x20, 0x00, // .............. .
	0x04, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x3b, 0x00, // ..,...........;.
	0x04, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x2d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, // ..,...-....... .
	0x04, 0x00, 0x2f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x3b, 0x00, // ../...........;.
	0x04, 0x00, 0x2f, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x00, // ../...0.........
	0x03, 0x00, 0x42, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, // ..B.......+.....
	0x00, 0x00, 0x58, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, // ..X.......+.....
	0x00, 0x00, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, // ..Y......?+.....
	0x00, 0x00, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, // ..i......@+.....
	0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x20, 0x00, 0x04, 0x00, 0x82, 0x00, // ..p......? .....
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x82, 0x00, // ..........;.....
	0x00, 0x00, 0x83, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x8f, 0x00, // .......... .....
	0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x8f, 0x00, // ..........;.....
	0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x36, 0x00, 0x05, 0x00, 0x02, 0x00, // ..........6.....
	0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0xf8, 0x00, // ................
	0x02, 0x00, 0x05, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0x2e, 0x00, // ......=.........
	0x00, 0x00, 0x2d, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x08, 0x00, 0x00, 0x00, 0x31, 0x00, // ..-...=.......1.
	0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x19, 0x00, 0x00, 0x00, 0x84, 0x00, // ..0...=.........
	0x00, 0x00, 0x83, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xb7, 0x00, // ......Q.........
	0x00, 0x00, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, // ................
	0x00, 0x00, 0xb8, 0x00, 0x00, 0x00, 0xb7, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00, 0x51, 0x00, // ..........i...Q.
	0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xba, 0x00, 0x00, 0x00, 0x84, 0x00, 0x00, 0x00, 0x01, 0x00, // ................
	0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xbd, 0x00, 0x00, 0x00, 0x84, 0x00, // ..Q.............
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb8, 0x00, 0x05, 0x00, 0x1b, 0x00, 0x00, 0x00, 0xbe, 0x00, // ................
	0x00, 0x00, 0xbd, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, 0x07, 0x00, // ......p.........
	0x00, 0x00, 0xd5, 0x00, 0x00, 0x00, 0xbe, 0x00, 0x00, 0x00, 0x58, 0x00, 0x00, 0x00, 0x59, 0x00, // ..........X...Y.
	0x00, 0x00, 0x50, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xd6, 0x00, 0x00, 0x00, 0xb8, 0x00, // ..P.............
	0x00, 0x00, 0xba, 0x00, 0x00, 0x00, 0xd5, 0x00, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, 0x42, 0x00, // ..........V...B.
	0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x31, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x58, 0x00, // ......1.......X.
	0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xe3, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0xd6, 0x00, // ................
	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x58, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, // ......X...Q.....
	0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0xe3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, // ..............Q.
	0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xc1, 0x00, 0x00, 0x00, 0xe3, 0x00, 0x00, 0x00, 0x01, 0x00, // ................
	0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xc2, 0x00, 0x00, 0x00, 0xe3, 0x00, // ..Q.............
	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x50, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xc3, 0x00, // ......P.........
	0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0xc1, 0x00, 0x00, 0x00, 0xc2, 0x00, 0x00, 0x00, 0x59, 0x00, // ..............Y.
	0x00, 0x00, 0x3e, 0x00, 0x03, 0x00, 0x90, 0x00, 0x00, 0x00, 0xc3, 0x00, 0x00, 0x00, 0xfd, 0x00, // ..>.............
	0x01, 0x00, 0x38, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,                                     // ..8.......
};
static const bgfx::EmbeddedShader fs_pp_stereo_sbs_st = BGFX_EMBEDDED_SHADER(fs_pp_stereo_sbs_st);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Build of fragment shader from fs_pp_stereo.sc to fs_pp_stereo_tb_st with options: TB STEREO
static const uint8_t fs_pp_stereo_tb_st_mtl[836] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x14, 0x74, // FSH.Jc._.......t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, // ex_stereo_fbSamp
	0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x74, 0x65, // ler...........te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x54, 0x65, 0x78, 0x74, 0x75, // x_stereo_fbTextu
	0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x74, 0x65, 0x78, // re...........tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, // _stereo_depthSam
	0x70, 0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x74, // pler...........t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x54, // ex_stereo_depthT
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, // exture..........
	0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x10, 0x00, // .tex_stereo_fb..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x94, 0x02, 0x00, 0x00, 0x23, 0x69, 0x6e, 0x63, // ............#inc
	0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x64, 0x6c, // lude <metal_stdl
	0x69, 0x62, 0x3e, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x73, 0x69, // ib>.#include <si
	0x6d, 0x64, 0x2f, 0x73, 0x69, 0x6d, 0x64, 0x2e, 0x68, 0x3e, 0x0a, 0x0a, 0x75, 0x73, 0x69, 0x6e, // md/simd.h>..usin
	0x67, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x6d, 0x65, 0x74, 0x61, // g namespace meta
	0x6c, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, // l;..struct xlatM
	0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, // tlMain_out.{.   
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, //  float4 bgfx_Fra
	0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x20, 0x5b, 0x5b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x30, // gData0 [[color(0
	0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, // )]];.};..struct 
	0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x0a, 0x7b, // xlatMtlMain_in.{
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, // .    float2 v_te
	0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x5b, 0x5b, 0x75, 0x73, 0x65, 0x72, 0x28, 0x6c, // xcoord0 [[user(l
	0x6f, 0x63, 0x6e, 0x31, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x66, 0x72, 0x61, // ocn1)]];.};..fra
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, // gment xlatMtlMai
	0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, // n_out xlatMtlMai
	0x6e, 0x28, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, // n(xlatMtlMain_in
	0x20, 0x69, 0x6e, 0x20, 0x5b, 0x5b, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x5d, 0x5d, //  in [[stage_in]]
	0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x61, // , texture2d_arra
	0x79, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3e, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, // y<float> tex_ste
	0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // reo_fb [[texture
	0x28, 0x30, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x74, // (0)]], sampler t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, // ex_stereo_fbSamp
	0x6c, 0x65, 0x72, 0x20, 0x5b, 0x5b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x30, 0x29, // ler [[sampler(0)
	0x5d, 0x5d, 0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, // ]]).{.    xlatMt
	0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x3d, 0x20, // lMain_out out = 
	0x7b, 0x7d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, // {};.    float3 _
	0x32, 0x31, 0x31, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x69, 0x6e, 0x2e, // 211 = float3(in.
	0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2e, 0x78, 0x2c, 0x20, 0x69, // v_texcoord0.x, i
	0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2e, 0x79, 0x20, // n.v_texcoord0.y 
	0x2a, 0x20, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, // * 2.0, (in.v_tex
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2e, 0x79, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x20, // coord0.y < 0.5) 
	0x3f, 0x20, 0x30, 0x2e, 0x30, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, // ? 0.0 : 1.0);.  
	0x20, 0x20, 0x6f, 0x75, 0x74, 0x2e, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, //   out.bgfx_FragD
	0x61, 0x74, 0x61, 0x30, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x74, 0x65, // ata0 = float4(te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2e, 0x73, 0x61, 0x6d, 0x70, // x_stereo_fb.samp
	0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, // le(tex_stereo_fb
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x32, 0x31, 0x31, 0x2e, 0x78, 0x79, // Sampler, _211.xy
	0x2c, 0x20, 0x75, 0x69, 0x6e, 0x74, 0x28, 0x72, 0x69, 0x6e, 0x74, 0x28, 0x5f, 0x32, 0x31, 0x31, // , uint(rint(_211
	0x2e, 0x7a, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, // .z)), level(0.0)
	0x29, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, // ).xyz, 1.0);.   
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6f, 0x75, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x0a, //  return out;.}..
	0x00, 0x00, 0x40, 0x00,                                                                         // ..@.
};
static const uint8_t fs_pp_stereo_tb_st_essl[9001] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x23, // FSH.Jc._.......#
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x33, 0x32, 0x30, 0x20, 0x65, // ..#version 320 e
	0x73, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, // s.#define attrib
	0x75, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x76, // ute in.#define v
	0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, // arying in.precis
	0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3b, // ion highp float;
	0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, // .precision highp
	0x20, 0x69, 0x6e, 0x74, 0x3b, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, //  int;.precision 
	0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, // highp sampler2DA
	0x72, 0x72, 0x61, 0x79, 0x3b, 0x0a, 0x23, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, // rray;.#extension
	0x20, 0x47, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x74, //  GL_EXT_shader_t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6c, 0x6f, 0x64, 0x20, 0x3a, 0x20, 0x65, 0x6e, 0x61, // exture_lod : ena
	0x62, 0x6c, 0x65, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, // ble.#define text
	0x75, 0x72, 0x65, 0x32, 0x44, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, // ure2DLod      te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x4c, 0x6f, 0x64, 0x45, 0x58, 0x54, 0x0a, 0x23, 0x64, // xture2DLodEXT.#d
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x47, // efine texture2DG
	0x72, 0x61, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, // rad     texture2
	0x44, 0x47, 0x72, 0x61, 0x64, 0x45, 0x58, 0x54, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, // DGradEXT.#define
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x4c, 0x6f, //  texture2DProjLo
	0x64, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, // d  texture2DProj
	0x4c, 0x6f, 0x64, 0x45, 0x58, 0x54, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, // LodEXT.#define t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, // exture2DProjGrad
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, //  texture2DProjGr
	0x61, 0x64, 0x45, 0x58, 0x54, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, // adEXT.#define te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, // xtureCubeLod    
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x4c, 0x6f, 0x64, 0x45, 0x58, // textureCubeLodEX
	0x54, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // T.#define textur
	0x65, 0x43, 0x75, 0x62, 0x65, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, // eCubeGrad   text
	0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x47, 0x72, 0x61, 0x64, 0x45, 0x58, 0x54, 0x0a, 0x23, // ureCubeGradEXT.#
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x28, // define shadow2D(
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, // _sampler, _coord
	0x29, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, // ) texture(_sampl
	0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x0a, 0x23, 0x64, 0x65, 0x66, // er, _coord).#def
	0x69, 0x6e, 0x65, 0x20, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, // ine shadow2DProj
	0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, // (_sampler, _coor
	0x64, 0x29, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, // d) textureProj(_
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, // sampler, _coord)
	0x0a, 0x23, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x47, 0x4c, 0x5f, 0x45, // .#extension GL_E
	0x58, 0x54, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, // XT_texture_array
	0x20, 0x3a, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x0a, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x65, //  : enable.out me
	0x64, 0x69, 0x75, 0x6d, 0x70, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, // diump vec4 bgfx_
	0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, // FragColor;.varyi
	0x6e, 0x67, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x5f, 0x65, 0x79, 0x65, 0x3b, 0x0a, // ng float v_eye;.
	0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x5f, 0x74, // varying vec2 v_t
	0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, // excoord0;.vec3 i
	0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, // nstMul(vec3 _vec
	0x2c, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, // , mat3 _mtx) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, // eturn ( (_vec) *
	0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, //  (_mtx) ); }.vec
	0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, // 3 instMul(mat3 _
	0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, // mtx, vec3 _vec) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, // { return ( (_mtx
	0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, // ) * (_vec) ); }.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, // vec4 instMul(vec
	0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, // 4 _vec, mat4 _mt
	0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, // x) { return ( (_
	0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, // vec) * (_mtx) );
	0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, //  }.vec4 instMul(
	0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // mat4 _mtx, vec4 
	0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // _vec) { return (
	0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, //  (_mtx) * (_vec)
	0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, 0x70, 0x28, //  ); }.float rcp(
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // float _a) { retu
	0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, // rn 1.0/_a; }.vec
	0x32, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, // 2 rcp(vec2 _a) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, //  return vec2(1.0
	0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x70, // )/_a; }.vec3 rcp
	0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // (vec3 _a) { retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, // rn vec3(1.0)/_a;
	0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x34, //  }.vec4 rcp(vec4
	0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, //  _a) { return ve
	0x63, 0x34, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, // c4(1.0)/_a; }.ve
	0x63, 0x32, 0x20, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, // c2 vec2_splat(fl
	0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // oat _x) { return
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, //  vec2(_x, _x); }
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, // .vec3 vec3_splat
	0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // (float _x) { ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, // urn vec3(_x, _x,
	0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, 0x65, 0x63, //  _x); }.vec4 vec
	0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, // 4_splat(float _x
	0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, // ) { return vec4(
	0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, // _x, _x, _x, _x);
	0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, //  }.uvec2 uvec2_s
	0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, // plat(uint _x) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, // return uvec2(_x,
	0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, 0x75, 0x76, //  _x); }.uvec3 uv
	0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, // ec3_splat(uint _
	0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, // x) { return uvec
	0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, // 3(_x, _x, _x); }
	0x0a, 0x75, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, // .uvec4 uvec4_spl
	0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // at(uint _x) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, // turn uvec4(_x, _
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x6d, 0x61, // x, _x, _x); }.ma
	0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, // t4 mtxFromRows(v
	0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, // ec4 _0, vec4 _1,
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, //  vec4 _2, vec4 _
	0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, // 3).{.return tran
	0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, // spose(mat4(_0, _
	0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // 1, _2, _3) );.}.
	0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, // mat4 mtxFromCols
	0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, // (vec4 _0, vec4 _
	0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // 1, vec4 _2, vec4
	0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, //  _3).{.return ma
	0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, // t4(_0, _1, _2, _
	0x33, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, // 3);.}.mat3 mtxFr
	0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, // omRows(vec3 _0, 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, // vec3 _1, vec3 _2
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, // ).{.return trans
	0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, // pose(mat3(_0, _1
	0x2c, 0x20, 0x5f, 0x32, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, // , _2) );.}.mat3 
	0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, // mtxFromCols(vec3
	0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, //  _0, vec3 _1, ve
	0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // c3 _2).{.return 
	0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, // mat3(_0, _1, _2)
	0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, // ;.}.uniform vec4
	0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, //  u_viewRect;.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, // form vec4 u_view
	0x54, 0x65, 0x78, 0x65, 0x6c, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, // Texel;.uniform m
	0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // at4 u_view;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, // orm mat4 u_invVi
	0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, // ew;.uniform mat4
	0x20, 0x75, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, //  u_proj;.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, 0x6a, 0x3b, //  mat4 u_invProj;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, // .uniform mat4 u_
	0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // viewProj;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, // m mat4 u_invView
	0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, // Proj;.uniform ma
	0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, 0x3b, 0x0a, // t4 u_model[32];.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, // uniform mat4 u_m
	0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // odelView;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, // m mat4 u_modelVi
	0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // ewProj;.uniform 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x66, 0x34, // vec4 u_alphaRef4
	0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, // ;.float sqr(cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // t float v).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, // urn v*v;.}.vec2 
	0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, // sqr(const vec2 v
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, // ).{.return v*v;.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, // }.vec3 sqr(const
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, //  vec3 v).{.retur
	0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6d, 0x75, // n v*v;.}.vec3 mu
	0x6c, 0x5f, 0x77, 0x31, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // l_w1(const vec3 
	0x76, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x29, // v, const mat4 m)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2e, 0x78, 0x2a, 0x6d, 0x5b, // .{.return v.x*m[
	0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x79, 0x2a, 0x6d, 0x5b, // 0].xyz + (v.y*m[
	0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x7a, 0x2a, 0x6d, 0x5b, // 1].xyz + (v.z*m[
	0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x6d, 0x5b, 0x33, 0x5d, 0x2e, 0x78, 0x79, // 2].xyz + m[3].xy
	0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x63, 0x6f, // z));.}.float aco
	0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x63, // s_approx_divPI(c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, // onst float v).{.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, // const float x = 
	0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, // abs(v);.if(1. - 
	0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, // x <= 0.000061035
	0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, // 15625).return (v
	0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x20, 0x3a, 0x20, 0x31, //  >= 0.) ? 0. : 1
	0x2e, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, // .;.const float r
	0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, // es = ((-0.155972
	0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, // /3.1415926535897
	0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, // 9323846264338327
	0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, // 95) * x + (1.564
	0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, // 67/3.14159265358
	0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, // 9793238462643383
	0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, // 2795) ) * sqrt(1
	0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // . - x);.return (
	0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, // v >= 0.) ? res :
	0x20, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, //  1. - res;.}.flo
	0x61, 0x74, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, // at atan2_approx_
	0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, // div2PI(const flo
	0x61, 0x74, 0x20, 0x79, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, // at y, const floa
	0x74, 0x20, 0x78, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, // t x).{.const flo
	0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x79, // at abs_y = abs(y
	0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, // );.const float a
	0x62, 0x73, 0x5f, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x78, 0x29, 0x3b, 0x0a, 0x69, // bs_x = abs(x);.i
	0x66, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, // f(abs_x <= 0.000
	0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x20, 0x26, 0x26, 0x20, 0x61, // 06103515625 && a
	0x62, 0x73, 0x5f, 0x79, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, // bs_y <= 0.000061
	0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // 03515625).return
	0x20, 0x30, 0x2e, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, //  0.;.const float
	0x20, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2d, 0x20, 0x61, 0x62, //  r = (abs_x - ab
	0x73, 0x5f, 0x79, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2b, 0x20, // s_y) / (abs_x + 
	0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // abs_y);.const fl
	0x6f, 0x61, 0x74, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x78, 0x20, // oat angle = ((x 
	0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x28, 0x33, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x20, // < 0.) ? (3./8.) 
	0x3a, 0x20, 0x28, 0x31, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x29, 0x0a, 0x2b, 0x20, 0x28, 0x30, 0x2e, // : (1./8.)).+ (0.
	0x32, 0x31, 0x31, 0x38, 0x36, 0x38, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, // 211868 /(2.*3.14
	0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, // 1592653589793238
	0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, // 4626433832795) *
	0x20, 0x72, 0x20, 0x2a, 0x20, 0x72, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x39, 0x38, 0x37, 0x33, 0x30, //  r * r - 0.98730
	0x35, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, // 5 /(2.*3.1415926
	0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, // 5358979323846264
	0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x78, // 33832795)) * ((x
	0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x72, 0x20, 0x3a, 0x20, 0x72, 0x29, //  < 0.) ? -r : r)
	0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x79, 0x20, 0x3c, 0x20, 0x30, 0x2e, // ;.return (y < 0.
	0x29, 0x20, 0x3f, 0x20, 0x2d, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3a, 0x20, 0x61, 0x6e, 0x67, // ) ? -angle : ang
	0x6c, 0x65, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x73, 0x69, 0x6e, // le;.}.float asin
	0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x63, 0x6f, // _approx_divPI(co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x63, // nst float v).{.c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, // onst float x = a
	0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, // bs(v);.if(1. - x
	0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, //  <= 0.0000610351
	0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, // 5625).return (v 
	0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x3a, 0x20, 0x2d, // >= 0.) ? 0.5 : -
	0x30, 0x2e, 0x35, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // 0.5;.const float
	0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, //  res = ((-0.1559
	0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, // 72/3.14159265358
	0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, // 9793238462643383
	0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, // 2795) * x + (1.5
	0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, // 6467/3.141592653
	0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, // 5897932384626433
	0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, // 832795) ) * sqrt
	0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // (1. - x);.return
	0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, //  (v >= 0.) ? 0.5
	0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, //  - res : -0.5 + 
	0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x61, 0x79, 0x5f, // res;.}.vec2 ray_
	0x74, 0x6f, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x75, 0x6c, // to_equirectangul
	0x61, 0x72, 0x5f, 0x75, 0x76, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, // ar_uv(const vec3
	0x20, 0x72, 0x61, 0x79, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, //  ray).{.return v
	0x65, 0x63, 0x32, 0x28, 0x0a, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, // ec2(.0.5 + atan2
	0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x72, // _approx_div2PI(r
	0x61, 0x79, 0x2e, 0x79, 0x2c, 0x20, 0x72, 0x61, 0x79, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x61, 0x63, // ay.y, ray.x),.ac
	0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, // os_approx_divPI(
	0x72, 0x61, 0x79, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // ray.z));.}.float
	0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, //  InvsRGB(const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, // loat color).{.if
	0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, //  (color <= 0.040
	0x34, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // 45).return color
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x29, 0x3b, 0x0a, //  * (1.0/12.92);.
	0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, // else.return pow(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, // color * (1.0/1.0
	0x35, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x2f, 0x31, 0x2e, 0x30, // 55) + (0.055/1.0
	0x35, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // 55), 2.4);.}.flo
	0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x63, 0x6f, 0x6e, // at InvRec709(con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, // st float color).
	0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, // {.if (color <= 0
	0x2e, 0x30, 0x38, 0x31, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, // .081).return col
	0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x34, 0x2e, 0x35, 0x29, 0x3b, 0x0a, // or * (1.0/4.5);.
	0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, // else.return pow(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, // color * (1.0/1.0
	0x39, 0x39, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x2f, 0x31, 0x2e, 0x30, // 99) + (0.099/1.0
	0x39, 0x39, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x3b, 0x0a, // 99), 1.0/0.45);.
	0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, // }.float InvGamma
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, // (const float col
	0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x49, 0x6e, 0x76, // or).{.return Inv
	0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // sRGB(color);.}.v
	0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, // ec3 InvGamma(con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, // st vec3 color).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x49, 0x6e, 0x76, // .return vec3(Inv
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x49, // Gamma(color.x),I
	0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, // nvGamma(color.y)
	0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, // ,InvGamma(color.
	0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x54, // z));.}.vec3 InvT
	0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, // oneMap(const vec
	0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, // 3 color).{.const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x20, 0x3d, //  float inv_2bh =
	0x20, 0x30, 0x2e, 0x35, 0x2f, 0x30, 0x2e, 0x32, 0x35, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, //  0.5/0.25;.const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x34, 0x2e, 0x30, 0x2a, //  float bh = 4.0*
	0x30, 0x2e, 0x32, 0x35, 0x20, 0x2d, 0x20, 0x32, 0x2e, 0x30, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // 0.25 - 2.0;.retu
	0x72, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, // rn (color - 1.0 
	0x2b, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2a, 0x28, 0x63, 0x6f, // + sqrt(color*(co
	0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x20, 0x62, 0x68, 0x29, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, // lor + bh) + 1.0)
	0x29, 0x2a, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // )*inv_2bh;.}.flo
	0x61, 0x74, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // at sRGB(const fl
	0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, // oat f).{.float s
	0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x33, // ;.if (f <= 0.003
	0x31, 0x33, 0x30, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x20, // 1308).s = 12.92 
	0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, // * f;.else.s = 1.
	0x30, 0x35, 0x35, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x31, 0x2e, 0x30, // 055 * pow(f, 1.0
	0x2f, 0x32, 0x2e, 0x34, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x3b, 0x0a, 0x72, // /2.4) - 0.055;.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // eturn s;.}.float
	0x20, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, //  Rec709(const fl
	0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, // oat f).{.float s
	0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, // ;.if (f <= 0.018
	0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x34, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, // ).s = 4.5 * f;.e
	0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x20, 0x2a, 0x20, // lse.s = 1.099 * 
	0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x20, 0x2d, 0x20, 0x30, // pow(f, 0.45) - 0
	0x2e, 0x30, 0x39, 0x39, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, // .099;.return s;.
	0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, // }.float FBGamma(
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // const float colo
	0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x52, 0x47, 0x42, // r).{.return sRGB
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, // (color);.}.vec2 
	0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // FBGamma(const ve
	0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, // c2 color).{.retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, // rn vec2(FBGamma(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, // color.x),FBGamma
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // (color.y));.}.ve
	0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, // c3 FBGamma(const
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, //  vec3 color).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, // eturn vec3(FBGam
	0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, // ma(color.x),FBGa
	0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x46, 0x42, 0x47, // mma(color.y),FBG
	0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, // amma(color.z));.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x32, 0x32, // }.vec3 FBGamma22
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // (const vec3 colo
	0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, // r).{.return vec3
	0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x2c, 0x20, 0x31, 0x2e, // (pow(color.x, 1.
	0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // 0/2.2),pow(color
	0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, // .y, 1.0/2.2),pow
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, // (color.z, 1.0/2.
	0x32, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x54, // 2));.}.float FBT
	0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, // oneMap(const flo
	0x61, 0x74, 0x20, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6c, // at l).{.return l
	0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, //  * ((l*0.25 + 1.
	0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, // 0) / (l + 1.0));
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, // .}.vec2 FBToneMa
	0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, // p(const vec2 col
	0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, // or).{.const floa
	0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, // t l = dot(color,
	0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2b, 0x30, 0x2e, // vec2(0.176204+0.
	0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x2c, 0x30, 0x2e, 0x38, 0x31, // 0108109*0.5,0.81
	0x32, 0x39, 0x38, 0x35, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, // 2985+0.0108109*0
	0x2e, 0x35, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, // .5));.return col
	0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, // or * ((l*0.25 + 
	0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, // 1.0) / (l + 1.0)
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, // );.}.vec3 FBTone
	0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, // Map(const vec3 c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // olor).{.const fl
	0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // oat l = dot(colo
	0x72, 0x2c, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2c, // r,vec3(0.176204,
	0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2c, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, // 0.812985,0.01081
	0x30, 0x39, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, // 09));.return col
	0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, // or * ((l*0.25 + 
	0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, // 1.0) / (l + 1.0)
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, // );.}.vec4 Additi
	0x76, 0x65, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // ve(const vec4 cB
	0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // ase, const vec4 
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // cBlend, const fl
	0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, // oat percent).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2b, 0x20, 0x63, 0x42, // eturn cBase + cB
	0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, // lend*percent;.}.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6e, // vec3 Screen (con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, // st vec3 cBase, c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, // onst vec3 cBlend
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, // ).{.return 1.0 -
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, //  (1.0 - cBase) *
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, //  (1.0 - cBlend);
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, // .}.vec4 Screen (
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, // const vec4 cBase
	0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, // , const vec4 cBl
	0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, // end).{.return 1.
	0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, // 0 - (1.0 - cBase
	0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // ) * (1.0 - cBlen
	0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, // d);.}.vec3 Scree
	0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, // nHDR (const vec3
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, //  cBase, const ve
	0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // c3 cBlend).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, // urn max(1.0 - (1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, // .0 - cBase) * (1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, // .0 - cBlend), ve
	0x63, 0x33, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, // c3(0.,0.,0.));.}
	0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, // .vec4 ScreenHDR 
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, // (const vec4 cBas
	0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // e, const vec4 cB
	0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, // lend).{.return m
	0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, // ax(1.0 - (1.0 - 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, // cBase) * (1.0 - 
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, // cBlend), vec4(0.
	0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // ,0.,0.,0.));.}.v
	0x65, 0x63, 0x34, 0x20, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x20, 0x28, 0x63, 0x6f, // ec4 Multiply (co
	0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, // nst vec4 cBase, 
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // const vec4 cBlen
	0x64, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, // d, const float p
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // ercent).{.return
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2a, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, //  cBase * cBlend*
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, // percent;.}.vec4 
	0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, // Overlay (const v
	0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, // ec4 cBase, const
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, //  vec4 cBlend).{.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, // vec4 cNew = step
	0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, // (0.5, cBase);.cN
	0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, // ew = mix(cBase*c
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, // Blend*2.0, 1.0-2
	0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, // .0*(1.0-cBase)*(
	0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, // 1.0-cBlend), cNe
	0x77, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, // w);.return cNew;
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x48, // .}.vec4 OverlayH
	0x44, 0x52, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, // DR (const vec4 c
	0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, // Base, const vec4
	0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, //  cBlend).{.vec4 
	0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, // cNew = step(0.5,
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, //  cBase);.cNew = 
	0x6d, 0x61, 0x78, 0x28, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, // max(mix(cBase*cB
	0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, // lend*2.0, 1.0-2.
	0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, // 0*(1.0-cBase)*(1
	0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, // .0-cBlend), cNew
	0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, // ), vec4(0.,0.,0.
	0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, // ,0.));.return cN
	0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x73, 0x5f, 0x68, // ew;.}.vec3 cos_h
	0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // emisphere_sample
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x29, 0x0a, 0x7b, // (const vec2 t).{
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x68, 0x69, // .const float phi
	0x20, 0x3d, 0x20, 0x74, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x28, 0x32, 0x2e, 0x30, 0x2a, 0x33, 0x2e, //  = t.y * (2.0*3.
	0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, // 1415926535897932
	0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, // 384626433832795)
	0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, // ;.const float co
	0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, // sTheta = sqrt(1.
	0x30, 0x20, 0x2d, 0x20, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // 0 - t.x);.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, // float sinTheta =
	0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, //  sqrt(t.x);.floa
	0x74, 0x20, 0x73, 0x70, 0x2c, 0x63, 0x70, 0x3b, 0x0a, 0x73, 0x69, 0x6e, 0x63, 0x6f, 0x73, 0x28, // t sp,cp;.sincos(
	0x70, 0x68, 0x69, 0x2c, 0x73, 0x70, 0x2c, 0x63, 0x70, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // phi,sp,cp);.retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x63, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, // rn vec3(cp * sin
	0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, // Theta, cosTheta,
	0x20, 0x73, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x29, 0x3b, //  sp * sinTheta);
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, // .}.vec3 rotate_t
	0x6f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x28, 0x63, // o_vector_upper(c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x63, // onst vec3 vec, c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, // onst vec3 normal
	0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, // ).{.if(normal.y 
	0x3e, 0x20, 0x2d, 0x30, 0x2e, 0x39, 0x39, 0x39, 0x39, 0x39, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, // > -0.99999).{.co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x20, 0x3d, 0x20, 0x31, 0x2e, // nst float h = 1.
	0x30, 0x2f, 0x28, 0x31, 0x2e, 0x30, 0x2b, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x29, // 0/(1.0+normal.y)
	0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, // ;.const float hz
	0x20, 0x3d, 0x20, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x3b, 0x0a, 0x63, //  = h*normal.z;.c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x3d, // onst float hzx =
	0x20, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x3b, 0x0a, 0x72, 0x65, //  hz*normal.x;.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x78, // turn vec3(.vec.x
	0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x7a, 0x2a, //  * (normal.y+hz*
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x29, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, // normal.z) + vec.
	0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, // y * normal.x - v
	0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, // ec.z * hzx,.vec.
	0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x2d, 0x20, 0x76, // y * normal.y - v
	0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, // ec.x * normal.x 
	0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, // - vec.z * normal
	0x2e, 0x7a, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, // .z,.vec.y * norm
	0x61, 0x6c, 0x2e, 0x7a, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x68, // al.z - vec.x * h
	0x7a, 0x78, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, // zx + vec.z * (no
	0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, // rmal.y+h*normal.
	0x78, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // x*normal.x));.}.
	0x65, 0x6c, 0x73, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x2d, 0x76, 0x65, 0x63, // else return -vec
	0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, // ;.}.uniform vec4
	0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x53, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, //  Stereo_Saturati
	0x6f, 0x6e, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, // on;.uniform vec4
	0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, //  Stereo_MS_ZPD_Y
	0x41, 0x78, 0x69, 0x73, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, // Axis;.uniform sa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x20, 0x74, 0x65, 0x78, // mpler2DArray tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // _stereo_fb;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, 0x72, 0x72, // orm sampler2DArr
	0x61, 0x79, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, // ay tex_stereo_de
	0x70, 0x74, 0x68, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, // pth;.uniform vec
	0x34, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, 0x76, 0x65, // 4 w_h_height;.ve
	0x63, 0x33, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, // c3 gatherEyeColo
	0x72, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x69, // r(vec2 u, bool i
	0x73, 0x4c, 0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // sLeft).{.return 
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x6f, // texture2DArrayLo
	0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, // d(tex_stereo_fb,
	0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, 0x20, //  vec3(u.x, u.y, 
	0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x30, 0x20, 0x3a, 0x20, 0x31, // isLeft ? 0.0 : 1
	0x2e, 0x30, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x7d, 0x0a, // .0), 0.).rgb;.}.
	0x76, 0x6f, 0x69, 0x64, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x52, // void gatherLeftR
	0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, // ightColors(vec2 
	0x75, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x63, 0x6f, 0x6c, // u, out vec3 lcol
	0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x6f, 0x6c, 0x29, // , out vec3 rcol)
	0x0a, 0x7b, 0x0a, 0x6c, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // .{.lcol = textur
	0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, // e2DArrayLod(tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, // stereo_fb, vec3(
	0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2c, 0x20, 0x30, // u.x, u.y, 0.), 0
	0x2e, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x72, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, // .).xyz;.rcol = t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x6f, 0x64, // exture2DArrayLod
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, // (tex_stereo_fb, 
	0x76, 0x65, 0x63, 0x33, 0x28, 0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, 0x20, 0x31, // vec3(u.x, u.y, 1
	0x2e, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, // .), 0.).xyz;.}.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, // niform mat4 Ster
	0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // eo_LeftMat;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // orm mat4 Stereo_
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // RightMat;.unifor
	0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, // m vec4 Stereo_Le
	0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, // ftLuminance_Gamm
	0x61, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // a;.uniform vec4 
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, // Stereo_RightLumi
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x3b, 0x0a, // nance_DynDesat;.
	0x76, 0x6f, 0x69, 0x64, 0x20, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x65, 0x73, 0x61, // void DynamicDesa
	0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // tAnaglyph(const 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, // vec3 lCol, const
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, //  vec3 rCol, out 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // vec3 lDesatCol, 
	0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, // out vec3 rDesatC
	0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, // ol).{.const floa
	0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, // t left2LeftLum =
	0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, //  dot(lCol, Stere
	0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, // o_LeftLuminance_
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // Gamma.xyz);.cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, // t float left2Rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, // htLum = dot(lCol
	0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // , Stereo_RightLu
	0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, // minance_DynDesat
	0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, // .xyz);.const flo
	0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // at right2LeftLum
	0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, //  = dot(rCol, Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, // reo_LeftLuminanc
	0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, // e_Gamma.xyz);.co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, // nst float right2
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, // RightLum = dot(r
	0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, // Col, Stereo_Righ
	0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, // tLuminance_DynDe
	0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // sat.xyz);.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, // float leftLum = 
	0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x6c, // left2LeftLum + l
	0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, 0x0a, 0x63, 0x6f, // eft2RightLum;.co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, // nst float rightL
	0x75, 0x6d, 0x20, 0x3d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, // um = right2LeftL
	0x75, 0x6d, 0x20, 0x2b, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, // um + right2Right
	0x4c, 0x75, 0x6d, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // Lum;.const float
	0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, //  leftDesat = Ste
	0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, // reo_RightLuminan
	0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, // ce_DynDesat.w * 
	0x61, 0x62, 0x73, 0x28, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, // abs((left2LeftLu
	0x6d, 0x20, 0x2d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // m - left2RightLu
	0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, // m) / (leftLum + 
	0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // 0.0001));.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, // float rightDesat
	0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, //  = Stereo_RightL
	0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, // uminance_DynDesa
	0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, // t.w * abs((right
	0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, // 2LeftLum - right
	0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x72, 0x69, // 2RightLum) / (ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, // ghtLum + 0.0001)
	0x29, 0x3b, 0x0a, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, // );.lDesatCol = m
	0x69, 0x78, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, // ix(lCol, vec3_sp
	0x6c, 0x61, 0x74, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, 0x6c, 0x65, // lat(leftLum), le
	0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x72, 0x44, 0x65, 0x73, 0x61, 0x74, // ftDesat);.rDesat
	0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // Col = mix(rCol, 
	0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, // vec3_splat(right
	0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, // Lum), rightDesat
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, // );.}.vec3 Linear
	0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, // Anaglyph(const v
	0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // ec3 lCol, const 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, // vec3 rCol).{.con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, // st vec3 color = 
	0x28, 0x28, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, // (( (vec4(lCol, 1
	0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, // .)) * (Stereo_Le
	0x66, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x20, 0x28, 0x76, 0x65, // ftMat) ) + ( (ve
	0x63, 0x34, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, // c4(rCol, 1.)) * 
	0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, // (Stereo_RightMat
	0x29, 0x20, 0x29, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // ) )).rgb;.return
	0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, //  color;.}.unifor
	0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, // m vec4 Stereo_De
	0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // ghostGamma;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // orm mat4 Stereo_
	0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3b, 0x0a, 0x76, // DeghostFilter;.v
	0x65, 0x63, 0x33, 0x20, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, // ec3 DeghostAnagl
	0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, // yph(const vec3 l
	0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // Col, const vec3 
	0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // rCol).{.const ve
	0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, // c3 color = Linea
	0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // rAnaglyph(lCol, 
	0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, // rCol);.return ( 
	0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, // (pow(color, Ster
	0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, // eo_DeghostGamma.
	0x72, 0x67, 0x62, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x53, 0x74, // rgb)) * (mat3(St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, // ereo_DeghostFilt
	0x65, 0x72, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // er[0].xyz, Stere
	0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, // o_DeghostFilter[
	0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, // 1].xyz, Stereo_D
	0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x32, 0x5d, 0x2e, // eghostFilter[2].
	0x78, 0x79, 0x7a, 0x29, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, // xyz)) );.}.void 
	0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, // main().{.bgfx_Fr
	0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x67, // agColor = vec4(g
	0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x66, 0x6c, // atherEyeColor(fl
	0x6f, 0x61, 0x74, 0x32, 0x28, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, // oat2(v_texcoord0
	0x2e, 0x78, 0x2c, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2e, // .x, v_texcoord0.
	0x79, 0x20, 0x2a, 0x20, 0x32, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, // y * 2.0), v_texc
	0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2e, 0x79, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x2c, 0x20, // oord0.y < 0.5), 
	0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x00,                                           // 1.0);.}..
};
static const uint8_t fs_pp_stereo_tb_st_glsl[8985] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x23, // FSH.Jc._.......#
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x34, 0x34, 0x30, 0x0a, 0x6f, // ..#version 440.o
	0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, // ut vec4 bgfx_Fra
	0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, // gColor;.#define 
	0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x62, 0x67, 0x66, // gl_FragColor bgf
	0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x0a, 0x23, 0x64, 0x65, 0x66, // x_FragColor.#def
	0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x20, 0x20, 0x20, // ine texture2D   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x0a, 0x23, //        texture.#
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, // define texture2D
	0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // Lod       textur
	0x65, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, // eLod.#define tex
	0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ture2DGrad      
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, // textureGrad.#def
	0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, // ine texture2DPro
	0x6a, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, // jLod   texturePr
	0x6f, 0x6a, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, // ojLod.#define te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, 0x20, // xture2DProjGrad 
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, //  textureProjGrad
	0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // .#define texture
	0x43, 0x75, 0x62, 0x65, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, // CubeLod     text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, // ureLod.#define t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, // extureCubeGrad  
	0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, //   textureGrad.#d
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x33, 0x44, 0x20, // efine texture3D 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, //          texture
	0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // .#define texture
	0x32, 0x44, 0x4c, 0x6f, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x20, 0x74, 0x65, 0x78, 0x74, // 2DLodOffset text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x0a, 0x23, 0x64, 0x65, // ureLodOffset.#de
	0x66, 0x69, 0x6e, 0x65, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x69, // fine attribute i
	0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, // n.#define varyin
	0x67, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x62, 0x67, 0x66, // g in.#define bgf
	0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, // xShadow2D(_sampl
	0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, // er, _coord)     
	0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, // vec4_splat(textu
	0x72, 0x65, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, // re(_sampler, _co
	0x6f, 0x72, 0x64, 0x29, 0x20, 0x29, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x62, // ord) ).#define b
	0x67, 0x66, 0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x28, // gfxShadow2DProj(
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, // _sampler, _coord
	0x29, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, // ) vec4_splat(tex
	0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // tureProj(_sample
	0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x29, 0x0a, 0x76, 0x61, 0x72, // r, _coord) ).var
	0x79, 0x69, 0x6e, 0x67, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x5f, 0x65, 0x79, 0x65, // ying float v_eye
	0x3b, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, // ;.varying vec2 v
	0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, // _texcoord0;.vec3
	0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, //  instMul(vec3 _v
	0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, // ec, mat3 _mtx) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, //  return ( (_vec)
	0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, //  * (_mtx) ); }.v
	0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, // ec3 instMul(mat3
	0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, //  _mtx, vec3 _vec
	0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, // ) { return ( (_m
	0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, // tx) * (_vec) ); 
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, // }.vec4 instMul(v
	0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, // ec4 _vec, mat4 _
	0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, // mtx) { return ( 
	0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, // (_vec) * (_mtx) 
	0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, // ); }.vec4 instMu
	0x6c, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, // l(mat4 _mtx, vec
	0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // 4 _vec) { return
	0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, //  ( (_mtx) * (_ve
	0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, // c) ); }.float rc
	0x70, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // p(float _a) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, // turn 1.0/_a; }.v
	0x65, 0x63, 0x32, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, // ec2 rcp(vec2 _a)
	0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, //  { return vec2(1
	0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, // .0)/_a; }.vec3 r
	0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // cp(vec3 _a) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, // turn vec3(1.0)/_
	0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, // a; }.vec4 rcp(ve
	0x63, 0x34, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // c4 _a) { return 
	0x76, 0x65, 0x63, 0x34, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, // vec4(1.0)/_a; }.
	0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, // vec2 vec2_splat(
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // float _x) { retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, // rn vec2(_x, _x);
	0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, //  }.vec3 vec3_spl
	0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, // at(float _x) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, // eturn vec3(_x, _
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, // x, _x); }.vec4 v
	0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // ec4_splat(float 
	0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, // _x) { return vec
	0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, // 4(_x, _x, _x, _x
	0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, // ); }.uvec2 uvec2
	0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, // _splat(uint _x) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, // { return uvec2(_
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, // x, _x); }.uvec3 
	0x75, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, // uvec3_splat(uint
	0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, //  _x) { return uv
	0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, // ec3(_x, _x, _x);
	0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, //  }.uvec4 uvec4_s
	0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, // plat(uint _x) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, // return uvec4(_x,
	0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, //  _x, _x, _x); }.
	0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, // mat4 mtxFromRows
	0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, // (vec4 _0, vec4 _
	0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // 1, vec4 _2, vec4
	0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, //  _3).{.return tr
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, // anspose(mat4(_0,
	0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, //  _1, _2, _3) );.
	0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, // }.mat4 mtxFromCo
	0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // ls(vec4 _0, vec4
	0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, //  _1, vec4 _2, ve
	0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // c4 _3).{.return 
	0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, // mat4(_0, _1, _2,
	0x20, 0x5f, 0x33, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, //  _3);.}.mat3 mtx
	0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, // FromRows(vec3 _0
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // , vec3 _1, vec3 
	0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, // _2).{.return tra
	0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, // nspose(mat3(_0, 
	0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, // _1, _2) );.}.mat
	0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, // 3 mtxFromCols(ve
	0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, // c3 _0, vec3 _1, 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // vec3 _2).{.retur
	0x6e, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, // n mat3(_0, _1, _
	0x32, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, // 2);.}.uniform ve
	0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, // c4 u_viewRect;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, // niform vec4 u_vi
	0x65, 0x77, 0x54, 0x65, 0x78, 0x65, 0x6c, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // ewTexel;.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, //  mat4 u_view;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, // iform mat4 u_inv
	0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, // View;.uniform ma
	0x74, 0x34, 0x20, 0x75, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, // t4 u_proj;.unifo
	0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, // rm mat4 u_invPro
	0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, // j;.uniform mat4 
	0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // u_viewProj;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, // orm mat4 u_invVi
	0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // ewProj;.uniform 
	0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, // mat4 u_model[32]
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, // ;.uniform mat4 u
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // _modelView;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, // orm mat4 u_model
	0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // ViewProj;.unifor
	0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, // m vec4 u_alphaRe
	0x66, 0x34, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, // f4;.float sqr(co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, // nst float v).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // eturn v*v;.}.vec
	0x32, 0x20, 0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, // 2 sqr(const vec2
	0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, //  v).{.return v*v
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, // ;.}.vec3 sqr(con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // st vec3 v).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // urn v*v;.}.vec3 
	0x6d, 0x75, 0x6c, 0x5f, 0x77, 0x31, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, // mul_w1(const vec
	0x33, 0x20, 0x76, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, // 3 v, const mat4 
	0x6d, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2e, 0x78, 0x2a, // m).{.return v.x*
	0x6d, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x79, 0x2a, // m[0].xyz + (v.y*
	0x6d, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x7a, 0x2a, // m[1].xyz + (v.z*
	0x6d, 0x5b, 0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x6d, 0x5b, 0x33, 0x5d, 0x2e, // m[2].xyz + m[3].
	0x78, 0x79, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, // xyz));.}.float a
	0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, // cos_approx_divPI
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, // (const float v).
	0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, // {.const float x 
	0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, // = abs(v);.if(1. 
	0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, // - x <= 0.0000610
	0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // 3515625).return 
	0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x20, 0x3a, // (v >= 0.) ? 0. :
	0x20, 0x31, 0x2e, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, //  1.;.const float
	0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, //  res = ((-0.1559
	0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, // 72/3.14159265358
	0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, // 9793238462643383
	0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, // 2795) * x + (1.5
	0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, // 6467/3.141592653
	0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, // 5897932384626433
	0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, // 832795) ) * sqrt
	0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // (1. - x);.return
	0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x72, 0x65, 0x73, //  (v >= 0.) ? res
	0x20, 0x3a, 0x20, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, //  : 1. - res;.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, // loat atan2_appro
	0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // x_div2PI(const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x79, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // loat y, const fl
	0x6f, 0x61, 0x74, 0x20, 0x78, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // oat x).{.const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, // loat abs_y = abs
	0x28, 0x79, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // (y);.const float
	0x20, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x78, 0x29, 0x3b, //  abs_x = abs(x);
	0x0a, 0x69, 0x66, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, // .if(abs_x <= 0.0
	0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x20, 0x26, 0x26, // 0006103515625 &&
	0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, //  abs_y <= 0.0000
	0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, // 6103515625).retu
	0x72, 0x6e, 0x20, 0x30, 0x2e, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, // rn 0.;.const flo
	0x61, 0x74, 0x20, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2d, 0x20, // at r = (abs_x - 
	0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, // abs_y) / (abs_x 
	0x2b, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // + abs_y);.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3d, 0x20, 0x28, 0x28, // float angle = ((
	0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x28, 0x33, 0x2e, 0x2f, 0x38, 0x2e, // x < 0.) ? (3./8.
	0x29, 0x20, 0x3a, 0x20, 0x28, 0x31, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x29, 0x0a, 0x2b, 0x20, 0x28, // ) : (1./8.)).+ (
	0x30, 0x2e, 0x32, 0x31, 0x31, 0x38, 0x36, 0x38, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, // 0.211868 /(2.*3.
	0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, // 1415926535897932
	0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, // 384626433832795)
	0x20, 0x2a, 0x20, 0x72, 0x20, 0x2a, 0x20, 0x72, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x39, 0x38, 0x37, //  * r * r - 0.987
	0x33, 0x30, 0x35, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, // 305 /(2.*3.14159
	0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, // 2653589793238462
	0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, // 6433832795)) * (
	0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x72, 0x20, 0x3a, 0x20, // (x < 0.) ? -r : 
	0x72, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x79, 0x20, 0x3c, 0x20, // r);.return (y < 
	0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3a, 0x20, 0x61, // 0.) ? -angle : a
	0x6e, 0x67, 0x6c, 0x65, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x73, // ngle;.}.float as
	0x69, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, // in_approx_divPI(
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, // const float v).{
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, // .const float x =
	0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, //  abs(v);.if(1. -
	0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, //  x <= 0.00006103
	0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // 515625).return (
	0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x3a, // v >= 0.) ? 0.5 :
	0x20, 0x2d, 0x30, 0x2e, 0x35, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, //  -0.5;.const flo
	0x61, 0x74, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, // at res = ((-0.15
	0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, // 5972/3.141592653
	0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, // 5897932384626433
	0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, // 832795) * x + (1
	0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, // .56467/3.1415926
	0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, // 5358979323846264
	0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, // 33832795) ) * sq
	0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // rt(1. - x);.retu
	0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, // rn (v >= 0.) ? 0
	0x2e, 0x35, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x20, // .5 - res : -0.5 
	0x2b, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x61, // + res;.}.vec2 ra
	0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, // y_to_equirectang
	0x75, 0x6c, 0x61, 0x72, 0x5f, 0x75, 0x76, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // ular_uv(const ve
	0x63, 0x33, 0x20, 0x72, 0x61, 0x79, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // c3 ray).{.return
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x0a, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x61, 0x74, 0x61, //  vec2(.0.5 + ata
	0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, // n2_approx_div2PI
	0x28, 0x72, 0x61, 0x79, 0x2e, 0x79, 0x2c, 0x20, 0x72, 0x61, 0x79, 0x2e, 0x78, 0x29, 0x2c, 0x0a, // (ray.y, ray.x),.
	0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, // acos_approx_divP
	0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // I(ray.z));.}.flo
	0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, // at InvsRGB(const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, //  float color).{.
	0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, // if (color <= 0.0
	0x34, 0x30, 0x34, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, // 4045).return col
	0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x29, // or * (1.0/12.92)
	0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, // ;.else.return po
	0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, // w(color * (1.0/1
	0x2e, 0x30, 0x35, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x2f, 0x31, // .055) + (0.055/1
	0x2e, 0x30, 0x35, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // .055), 2.4);.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x63, // loat InvRec709(c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // onst float color
	0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, // ).{.if (color <=
	0x20, 0x30, 0x2e, 0x30, 0x38, 0x31, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, //  0.081).return c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x34, 0x2e, 0x35, 0x29, // olor * (1.0/4.5)
	0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, // ;.else.return po
	0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, // w(color * (1.0/1
	0x2e, 0x30, 0x39, 0x39, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x2f, 0x31, // .099) + (0.099/1
	0x2e, 0x30, 0x39, 0x39, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x30, 0x2e, 0x34, 0x35, 0x29, // .099), 1.0/0.45)
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, // ;.}.float InvGam
	0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, // ma(const float c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x49, // olor).{.return I
	0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, // nvsRGB(color);.}
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, // .vec3 InvGamma(c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, // onst vec3 color)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x49, // .{.return vec3(I
	0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, // nvGamma(color.x)
	0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, // ,InvGamma(color.
	0x79, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // y),InvGamma(colo
	0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, // r.z));.}.vec3 In
	0x76, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, // vToneMap(const v
	0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, // ec3 color).{.con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, // st float inv_2bh
	0x20, 0x3d, 0x20, 0x30, 0x2e, 0x35, 0x2f, 0x30, 0x2e, 0x32, 0x35, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, //  = 0.5/0.25;.con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x34, 0x2e, // st float bh = 4.
	0x30, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2d, 0x20, 0x32, 0x2e, 0x30, 0x3b, 0x0a, 0x72, 0x65, // 0*0.25 - 2.0;.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2d, 0x20, 0x31, 0x2e, // turn (color - 1.
	0x30, 0x20, 0x2b, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2a, 0x28, // 0 + sqrt(color*(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x20, 0x62, 0x68, 0x29, 0x20, 0x2b, 0x20, 0x31, 0x2e, // color + bh) + 1.
	0x30, 0x29, 0x29, 0x2a, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // 0))*inv_2bh;.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // loat sRGB(const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // float f).{.float
	0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, //  s;.if (f <= 0.0
	0x30, 0x33, 0x31, 0x33, 0x30, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, // 031308).s = 12.9
	0x32, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, // 2 * f;.else.s = 
	0x31, 0x2e, 0x30, 0x35, 0x35, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x31, // 1.055 * pow(f, 1
	0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x34, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x3b, // .0/2.4) - 0.055;
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // .return s;.}.flo
	0x61, 0x74, 0x20, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // at Rec709(const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // float f).{.float
	0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, //  s;.if (f <= 0.0
	0x31, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x34, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x66, 0x3b, // 18).s = 4.5 * f;
	0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x20, // .else.s = 1.099 
	0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x20, 0x2d, // * pow(f, 0.45) -
	0x20, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, //  0.099;.return s
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, // ;.}.float FBGamm
	0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, // a(const float co
	0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x52, // lor).{.return sR
	0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // GB(color);.}.vec
	0x32, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // 2 FBGamma(const 
	0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // vec2 color).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, // turn vec2(FBGamm
	0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, // a(color.x),FBGam
	0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // ma(color.y));.}.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, // vec3 FBGamma(con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, // st vec3 color).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x46, 0x42, 0x47, // .return vec3(FBG
	0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, // amma(color.x),FB
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x46, // Gamma(color.y),F
	0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, // BGamma(color.z))
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, // ;.}.vec3 FBGamma
	0x32, 0x32, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, // 22(const vec3 co
	0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, // lor).{.return ve
	0x63, 0x33, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x2c, 0x20, // c3(pow(color.x, 
	0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, // 1.0/2.2),pow(col
	0x6f, 0x72, 0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, // or.y, 1.0/2.2),p
	0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, // ow(color.z, 1.0/
	0x32, 0x2e, 0x32, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, // 2.2));.}.float F
	0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // BToneMap(const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // loat l).{.return
	0x20, 0x6c, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, //  l * ((l*0.25 + 
	0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, // 1.0) / (l + 1.0)
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, // );.}.vec2 FBTone
	0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, // Map(const vec2 c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // olor).{.const fl
	0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // oat l = dot(colo
	0x72, 0x2c, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2b, // r,vec2(0.176204+
	0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x2c, 0x30, 0x2e, // 0.0108109*0.5,0.
	0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, // 812985+0.0108109
	0x2a, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, // *0.5));.return c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, // olor * ((l*0.25 
	0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, // + 1.0) / (l + 1.
	0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x54, 0x6f, // 0));.}.vec3 FBTo
	0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, // neMap(const vec3
	0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, //  color).{.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, // float l = dot(co
	0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, // lor,vec3(0.17620
	0x34, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2c, 0x30, 0x2e, 0x30, 0x31, 0x30, // 4,0.812985,0.010
	0x38, 0x31, 0x30, 0x39, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, // 8109));.return c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, // olor * ((l*0.25 
	0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, // + 1.0) / (l + 1.
	0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x41, 0x64, 0x64, 0x69, // 0));.}.vec4 Addi
	0x74, 0x69, 0x76, 0x65, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // tive(const vec4 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, // cBase, const vec
	0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // 4 cBlend, const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, // float percent).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2b, 0x20, // .return cBase + 
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, // cBlend*percent;.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x63, // }.vec3 Screen (c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, // onst vec3 cBase,
	0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, //  const vec3 cBle
	0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, // nd).{.return 1.0
	0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, //  - (1.0 - cBase)
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, //  * (1.0 - cBlend
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, // );.}.vec4 Screen
	0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, //  (const vec4 cBa
	0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, // se, const vec4 c
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // Blend).{.return 
	0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, // 1.0 - (1.0 - cBa
	0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, // se) * (1.0 - cBl
	0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, // end);.}.vec3 Scr
	0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // eenHDR (const ve
	0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // c3 cBase, const 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, // vec3 cBlend).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, // eturn max(1.0 - 
	0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, // (1.0 - cBase) * 
	0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, // (1.0 - cBlend), 
	0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, // vec3(0.,0.,0.));
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, // .}.vec4 ScreenHD
	0x52, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // R (const vec4 cB
	0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // ase, const vec4 
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // cBlend).{.return
	0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, //  max(1.0 - (1.0 
	0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, // - cBase) * (1.0 
	0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, // - cBlend), vec4(
	0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, // 0.,0.,0.,0.));.}
	0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x20, 0x28, // .vec4 Multiply (
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, // const vec4 cBase
	0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, // , const vec4 cBl
	0x65, 0x6e, 0x64, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // end, const float
	0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, //  percent).{.retu
	0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2a, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // rn cBase * cBlen
	0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // d*percent;.}.vec
	0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, // 4 Overlay (const
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, //  vec4 cBase, con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, // st vec4 cBlend).
	0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, // {.vec4 cNew = st
	0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, // ep(0.5, cBase);.
	0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, // cNew = mix(cBase
	0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, // *cBlend*2.0, 1.0
	0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, // -2.0*(1.0-cBase)
	0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, // *(1.0-cBlend), c
	0x4e, 0x65, 0x77, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, // New);.return cNe
	0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, // w;.}.vec4 Overla
	0x79, 0x48, 0x44, 0x52, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, // yHDR (const vec4
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, //  cBase, const ve
	0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, // c4 cBlend).{.vec
	0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, // 4 cNew = step(0.
	0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, // 5, cBase);.cNew 
	0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, // = max(mix(cBase*
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, // cBlend*2.0, 1.0-
	0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, // 2.0*(1.0-cBase)*
	0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, // (1.0-cBlend), cN
	0x65, 0x77, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, // ew), vec4(0.,0.,
	0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // 0.,0.));.return 
	0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x73, // cNew;.}.vec3 cos
	0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x5f, 0x73, 0x61, 0x6d, 0x70, // _hemisphere_samp
	0x6c, 0x65, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x29, // le(const vec2 t)
	0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, // .{.const float p
	0x68, 0x69, 0x20, 0x3d, 0x20, 0x74, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x28, 0x32, 0x2e, 0x30, 0x2a, // hi = t.y * (2.0*
	0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, // 3.14159265358979
	0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, // 3238462643383279
	0x35, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // 5);.const float 
	0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, // cosTheta = sqrt(
	0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // 1.0 - t.x);.cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, // t float sinTheta
	0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, //  = sqrt(t.x);.fl
	0x6f, 0x61, 0x74, 0x20, 0x73, 0x70, 0x2c, 0x63, 0x70, 0x3b, 0x0a, 0x73, 0x69, 0x6e, 0x63, 0x6f, // oat sp,cp;.sinco
	0x73, 0x28, 0x70, 0x68, 0x69, 0x2c, 0x73, 0x70, 0x2c, 0x63, 0x70, 0x29, 0x3b, 0x0a, 0x72, 0x65, // s(phi,sp,cp);.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x63, 0x70, 0x20, 0x2a, 0x20, 0x73, // turn vec3(cp * s
	0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, // inTheta, cosThet
	0x61, 0x2c, 0x20, 0x73, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, // a, sp * sinTheta
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, // );.}.vec3 rotate
	0x5f, 0x74, 0x6f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, // _to_vector_upper
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x2c, // (const vec3 vec,
	0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, //  const vec3 norm
	0x61, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, // al).{.if(normal.
	0x79, 0x20, 0x3e, 0x20, 0x2d, 0x30, 0x2e, 0x39, 0x39, 0x39, 0x39, 0x39, 0x29, 0x0a, 0x7b, 0x0a, // y > -0.99999).{.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x20, 0x3d, 0x20, // const float h = 
	0x31, 0x2e, 0x30, 0x2f, 0x28, 0x31, 0x2e, 0x30, 0x2b, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, // 1.0/(1.0+normal.
	0x79, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // y);.const float 
	0x68, 0x7a, 0x20, 0x3d, 0x20, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x3b, // hz = h*normal.z;
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x78, // .const float hzx
	0x20, 0x3d, 0x20, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x3b, 0x0a, //  = hz*normal.x;.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x0a, 0x76, 0x65, 0x63, // return vec3(.vec
	0x2e, 0x78, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, // .x * (normal.y+h
	0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x29, 0x20, 0x2b, 0x20, 0x76, 0x65, // z*normal.z) + ve
	0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, // c.y * normal.x -
	0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x2c, 0x0a, 0x76, 0x65, //  vec.z * hzx,.ve
	0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x2d, // c.y * normal.y -
	0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, //  vec.x * normal.
	0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, // x - vec.z * norm
	0x61, 0x6c, 0x2e, 0x7a, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, // al.z,.vec.y * no
	0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, // rmal.z - vec.x *
	0x20, 0x68, 0x7a, 0x78, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x28, //  hzx + vec.z * (
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, // normal.y+h*norma
	0x6c, 0x2e, 0x78, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, // l.x*normal.x));.
	0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x2d, 0x76, // }.else return -v
	0x65, 0x63, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, // ec;.}.uniform ve
	0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x53, 0x61, 0x74, 0x75, 0x72, 0x61, // c4 Stereo_Satura
	0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, // tion;.uniform ve
	0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, // c4 Stereo_MS_ZPD
	0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // _YAxis;.uniform 
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x20, 0x74, // sampler2DArray t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x3b, 0x0a, 0x75, 0x6e, // ex_stereo_fb;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, // iform sampler2DA
	0x72, 0x72, 0x61, 0x79, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // rray tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, // depth;.uniform v
	0x65, 0x63, 0x34, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, // ec4 w_h_height;.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, // vec3 gatherEyeCo
	0x6c, 0x6f, 0x72, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, // lor(vec2 u, bool
	0x20, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, //  isLeft).{.retur
	0x6e, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, // n texture2DArray
	0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, // Lod(tex_stereo_f
	0x62, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, // b, vec3(u.x, u.y
	0x2c, 0x20, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x30, 0x20, 0x3a, // , isLeft ? 0.0 :
	0x20, 0x31, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, //  1.0), 0.).rgb;.
	0x7d, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x66, // }.void gatherLef
	0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x28, 0x76, 0x65, 0x63, // tRightColors(vec
	0x32, 0x20, 0x75, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x63, // 2 u, out vec3 lc
	0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x6f, // ol, out vec3 rco
	0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x6c, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, // l).{.lcol = text
	0x75, 0x72, 0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, // ure2DArrayLod(te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x76, 0x65, 0x63, // x_stereo_fb, vec
	0x33, 0x28, 0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2c, // 3(u.x, u.y, 0.),
	0x20, 0x30, 0x2e, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x72, 0x63, 0x6f, 0x6c, 0x20, 0x3d, //  0.).xyz;.rcol =
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, //  texture2DArrayL
	0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, // od(tex_stereo_fb
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, // , vec3(u.x, u.y,
	0x20, 0x31, 0x2e, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, //  1.), 0.).xyz;.}
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, // .uniform mat4 St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, // ereo_LeftMat;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // iform mat4 Stere
	0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // o_RightMat;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // orm vec4 Stereo_
	0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, // LeftLuminance_Ga
	0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, // mma;.uniform vec
	0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // 4 Stereo_RightLu
	0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, // minance_DynDesat
	0x3b, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x65, // ;.void DynamicDe
	0x73, 0x61, 0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, // satAnaglyph(cons
	0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, // t vec3 lCol, con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, // st vec3 rCol, ou
	0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, // t vec3 lDesatCol
	0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x44, 0x65, 0x73, 0x61, // , out vec3 rDesa
	0x74, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // tCol).{.const fl
	0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // oat left2LeftLum
	0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, //  = dot(lCol, Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, // reo_LeftLuminanc
	0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, // e_Gamma.xyz);.co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, // nst float left2R
	0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, // ightLum = dot(lC
	0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, // ol, Stereo_Right
	0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, // Luminance_DynDes
	0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // at.xyz);.const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, // loat right2LeftL
	0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, // um = dot(rCol, S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, // tereo_LeftLumina
	0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, // nce_Gamma.xyz);.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, // const float righ
	0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, // t2RightLum = dot
	0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, // (rCol, Stereo_Ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, // ghtLuminance_Dyn
	0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // Desat.xyz);.cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, // t float leftLum 
	0x3d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, // = left2LeftLum +
	0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, 0x0a, //  left2RightLum;.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, // const float righ
	0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, // tLum = right2Lef
	0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, // tLum + right2Rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, // htLum;.const flo
	0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, // at leftDesat = S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, // tereo_RightLumin
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, // ance_DynDesat.w 
	0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, // * abs((left2Left
	0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, // Lum - left2Right
	0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, // Lum) / (leftLum 
	0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // + 0.0001));.cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x73, // t float rightDes
	0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, // at = Stereo_Righ
	0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, // tLuminance_DynDe
	0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x72, 0x69, 0x67, // sat.w * abs((rig
	0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x72, 0x69, 0x67, // ht2LeftLum - rig
	0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, // ht2RightLum) / (
	0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, // rightLum + 0.000
	0x31, 0x29, 0x29, 0x3b, 0x0a, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, 0x3d, // 1));.lDesatCol =
	0x20, 0x6d, 0x69, 0x78, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, //  mix(lCol, vec3_
	0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, // splat(leftLum), 
	0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x72, 0x44, 0x65, 0x73, // leftDesat);.rDes
	0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x72, 0x43, 0x6f, 0x6c, // atCol = mix(rCol
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x72, 0x69, 0x67, // , vec3_splat(rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x73, // htLum), rightDes
	0x61, 0x74, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x4c, 0x69, 0x6e, 0x65, // at);.}.vec3 Line
	0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, // arAnaglyph(const
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, //  vec3 lCol, cons
	0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, // t vec3 rCol).{.c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, // onst vec3 color 
	0x3d, 0x20, 0x28, 0x28, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, // = (( (vec4(lCol,
	0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, //  1.)) * (Stereo_
	0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x20, 0x28, // LeftMat) ) + ( (
	0x76, 0x65, 0x63, 0x34, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, // vec4(rCol, 1.)) 
	0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, // * (Stereo_RightM
	0x61, 0x74, 0x29, 0x20, 0x29, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // at) )).rgb;.retu
	0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, // rn color;.}.unif
	0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // orm vec4 Stereo_
	0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, 0x6e, // DeghostGamma;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // iform mat4 Stere
	0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3b, // o_DeghostFilter;
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x6e, 0x61, // .vec3 DeghostAna
	0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, // glyph(const vec3
	0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, //  lCol, const vec
	0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // 3 rCol).{.const 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, 0x6e, // vec3 color = Lin
	0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, // earAnaglyph(lCol
	0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // , rCol);.return 
	0x28, 0x20, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x53, 0x74, // ( (pow(color, St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, // ereo_DeghostGamm
	0x61, 0x2e, 0x72, 0x67, 0x62, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, // a.rgb)) * (mat3(
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, // Stereo_DeghostFi
	0x6c, 0x74, 0x65, 0x72, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, // lter[0].xyz, Ste
	0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, // reo_DeghostFilte
	0x72, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // r[1].xyz, Stereo
	0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x32, // _DeghostFilter[2
	0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, // ].xyz)) );.}.voi
	0x64, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x67, 0x6c, 0x5f, 0x46, 0x72, // d main().{.gl_Fr
	0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x67, // agColor = vec4(g
	0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x66, 0x6c, // atherEyeColor(fl
	0x6f, 0x61, 0x74, 0x32, 0x28, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, // oat2(v_texcoord0
	0x2e, 0x78, 0x2c, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2e, // .x, v_texcoord0.
	0x79, 0x20, 0x2a, 0x20, 0x32, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, // y * 2.0), v_texc
	0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2e, 0x79, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x2c, 0x20, // oord0.y < 0.5), 
	0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x00,                                           // 1.0);.}..
};
static const uint8_t fs_pp_stereo_tb_st_dx11[558] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x0d, 0x74, // FSH.Jc._.......t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x30, 0x01, 0x00, 0x00, // ex_stereo_fb0...
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // .......tex_stere
	0x6f, 0x5f, 0x66, 0x62, 0x30, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe8, 0x01, // o_fb0...........
	0x00, 0x00, 0x44, 0x58, 0x42, 0x43, 0x4d, 0xcb, 0x83, 0x7d, 0x07, 0x16, 0x09, 0xee, 0x9a, 0xaa, // ..DXBCM..}......
	0xa0, 0x7d, 0x69, 0x92, 0x63, 0x98, 0x01, 0x00, 0x00, 0x00, 0xe8, 0x01, 0x00, 0x00, 0x03, 0x00, // .}i.c...........
	0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x9c, 0x00, 0x00, 0x00, 0xd0, 0x00, 0x00, 0x00, 0x49, 0x53, // ..,...........IS
	0x47, 0x4e, 0x68, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x50, 0x00, // GNh...........P.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x5c, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, // ................
	0x00, 0x00, 0x06, 0x06, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, // ......SV_POSITIO
	0x4e, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0xab, 0xab, 0xab, 0x4f, 0x53, // N.TEXCOORD....OS
	0x47, 0x4e, 0x2c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x20, 0x00, // GN,........... .
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x00, // ......SV_TARGET.
	0xab, 0xab, 0x53, 0x48, 0x45, 0x58, 0x10, 0x01, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x44, 0x00, // ..SHEX....P...D.
	0x00, 0x00, 0x6a, 0x08, 0x00, 0x01, 0x5a, 0x00, 0x00, 0x03, 0x00, 0x60, 0x10, 0x00, 0x00, 0x00, // ..j...Z....`....
	0x00, 0x00, 0x58, 0x40, 0x00, 0x04, 0x00, 0x70, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x55, // ..X@...p......UU
	0x00, 0x00, 0x62, 0x10, 0x00, 0x03, 0x62, 0x10, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x65, 0x00, // ..b...b.......e.
	0x00, 0x03, 0xf2, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x02, 0x01, 0x00, // ... ......h.....
	0x00, 0x00, 0x31, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x10, // ..1...........*.
	0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x37, 0x00, // .......@.....?7.
	0x00, 0x09, 0x42, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, // ..B.............
	0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, // ...@.......@....
	0x80, 0x3f, 0x38, 0x00, 0x00, 0x0a, 0x32, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x96, 0x15, // .?8...2.........
	0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, // .......@.....?..
	0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0x02, 0x02, // .@........H.....
	0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, // ..CU..r.......F.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, // ......F~.......`
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, // .......@......6.
	0x00, 0x05, 0x72, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, // ..r ......F.....
	0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x82, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, // ..6.... .......@
	0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x3e, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,             // .....?>.......
};
static const uint8_t fs_pp_stereo_tb_st_spv[1098] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0d, 0x74, // FSH.Jc._.......t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x30, 0x00, 0x02, 0x00, // ex_stereo_fb0...
	0x00, 0x00, 0x00, 0x03, 0x22, 0x00, 0x1c, 0x04, 0x00, 0x00, 0x03, 0x02, 0x23, 0x07, 0x00, 0x00, // ....".......#...
	0x01, 0x00, 0x0b, 0x00, 0x08, 0x00, 0xe4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, // ................
	0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, 0x4c, // ..............GL
	0x53, 0x4c, 0x2e, 0x73, 0x74, 0x64, 0x2e, 0x34, 0x35, 0x30, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, // SL.std.450......
	0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x07, 0x00, 0x04, 0x00, // ................
	0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x83, 0x00, // ......main......
	0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x10, 0x00, 0x03, 0x00, 0x04, 0x00, 0x00, 0x00, 0x07, 0x00, // ................
	0x00, 0x00, 0x03, 0x00, 0x03, 0x00, 0x05, 0x00, 0x00, 0x00, 0xf4, 0x01, 0x00, 0x00, 0x05, 0x00, // ................
	0x04, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, // ......main......
	0x08, 0x00, 0x2d, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // ..-...tex_stereo
	0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, // _fbSampler......
	0x08, 0x00, 0x30, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // ..0...tex_stereo
	0x5f, 0x66, 0x62, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, // _fbTexture......
	0x05, 0x00, 0x83, 0x00, 0x00, 0x00, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, // ......v_texcoord
	0x30, 0x00, 0x05, 0x00, 0x06, 0x00, 0x90, 0x00, 0x00, 0x00, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, // 0.........bgfx_F
	0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x2d, 0x00, // ragData0..G...-.
	0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x2d, 0x00, // ..".......G...-.
	0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x30, 0x00, // ..!.......G...0.
	0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x30, 0x00, // ..".......G...0.
	0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x83, 0x00, // ..!.......G.....
	0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x90, 0x00, // ..........G.....
	0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x02, 0x00, 0x02, 0x00, // ................
	0x00, 0x00, 0x21, 0x00, 0x03, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x1a, 0x00, // ..!.............
	0x02, 0x00, 0x06, 0x00, 0x00, 0x00, 0x16, 0x00, 0x03, 0x00, 0x07, 0x00, 0x00, 0x00, 0x20, 0x00, // .............. .
	0x00, 0x00, 0x19, 0x00, 0x09, 0x00, 0x08, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x07, 0x00, // ................
	0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x00, // ................
	0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x19, 0x00, 0x00, 0x00, 0x07, 0x00, // ................
	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x14, 0x00, 0x02, 0x00, 0x1b, 0x00, 0x00, 0x00, 0x20, 0x00, // .............. .
	0x04, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x3b, 0x00, // ..,...........;.
	0x04, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x2d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, // ..,...-....... .
	0x04, 0x00, 0x2f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x3b, 0x00, // ../...........;.
	0x04, 0x00, 0x2f, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x00, // ../...0.........
	0x03, 0x00, 0x42, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, // ..B.......+.....
	0x00, 0x00, 0x58, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, // ..X.......+.....
	0x00, 0x00, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, // ..Y......?+.....
	0x00, 0x00, 0x6b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, // ..k......@+.....
	0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x20, 0x00, 0x04, 0x00, 0x82, 0x00, // ..p......? .....
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x82, 0x00, // ..........;.....
	0x00, 0x00, 0x83, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x8f, 0x00, // .......... .....
	0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x8f, 0x00, // ..........;.....
	0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x36, 0x00, 0x05, 0x00, 0x02, 0x00, // ..........6.....
	0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0xf8, 0x00, // ................
	0x02, 0x00, 0x05, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0x2e, 0x00, // ......=.........
	0x00, 0x00, 0x2d, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x08, 0x00, 0x00, 0x00, 0x31, 0x00, // ..-...=.......1.
	0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x19, 0x00, 0x00, 0x00, 0x84, 0x00, // ..0...=.........
	0x00, 0x00, 0x83, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xb7, 0x00, // ......Q.........
	0x00, 0x00, 0x84, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, // ..........Q.....
	0x00, 0x00, 0xb9, 0x00, 0x00, 0x00, 0x84, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x85, 0x00, // ................
	0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xba, 0x00, 0x00, 0x00, 0xb9, 0x00, 0x00, 0x00, 0x6b, 0x00, // ..............k.
	0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xbd, 0x00, 0x00, 0x00, 0x84, 0x00, // ..Q.............
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xb8, 0x00, 0x05, 0x00, 0x1b, 0x00, 0x00, 0x00, 0xbe, 0x00, // ................
	0x00, 0x00, 0xbd, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0xa9, 0x00, 0x06, 0x00, 0x07, 0x00, // ......p.........
	0x00, 0x00, 0xd5, 0x00, 0x00, 0x00, 0xbe, 0x00, 0x00, 0x00, 0x58, 0x00, 0x00, 0x00, 0x59, 0x00, // ..........X...Y.
	0x00, 0x00, 0x50, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xd6, 0x00, 0x00, 0x00, 0xb7, 0x00, // ..P.............
	0x00, 0x00, 0xba, 0x00, 0x00, 0x00, 0xd5, 0x00, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, 0x42, 0x00, // ..........V...B.
	0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x31, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x58, 0x00, // ......1.......X.
	0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xe3, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0xd6, 0x00, // ................
	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x58, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, // ......X...Q.....
	0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0xe3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, // ..............Q.
	0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xc1, 0x00, 0x00, 0x00, 0xe3, 0x00, 0x00, 0x00, 0x01, 0x00, // ................
	0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xc2, 0x00, 0x00, 0x00, 0xe3, 0x00, // ..Q.............
	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x50, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xc3, 0x00, // ......P.........
	0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0xc1, 0x00, 0x00, 0x00, 0xc2, 0x00, 0x00, 0x00, 0x59, 0x00, // ..............Y.
	0x00, 0x00, 0x3e, 0x00, 0x03, 0x00, 0x90, 0x00, 0x00, 0x00, 0xc3, 0x00, 0x00, 0x00, 0xfd, 0x00, // ..>.............
	0x01, 0x00, 0x38, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,                                     // ..8.......
};
static const bgfx::EmbeddedShader fs_pp_stereo_tb_st = BGFX_EMBEDDED_SHADER(fs_pp_stereo_tb_st);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Build of fragment shader from fs_pp_stereo.sc to fs_pp_stereo_int_st with options: INT STEREO
static const uint8_t fs_pp_stereo_int_st_mtl[855] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x14, 0x74, // FSH.Jc._.......t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, // ex_stereo_fbSamp
	0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x74, 0x65, // ler...........te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x54, 0x65, 0x78, 0x74, 0x75, // x_stereo_fbTextu
	0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x74, 0x65, 0x78, // re...........tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, // _stereo_depthSam
	0x70, 0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x74, // pler...........t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x54, // ex_stereo_depthT
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, // exture..........
	0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x10, 0x00, // .tex_stereo_fb..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa7, 0x02, 0x00, 0x00, 0x23, 0x69, 0x6e, 0x63, // ............#inc
	0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x64, 0x6c, // lude <metal_stdl
	0x69, 0x62, 0x3e, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x73, 0x69, // ib>.#include <si
	0x6d, 0x64, 0x2f, 0x73, 0x69, 0x6d, 0x64, 0x2e, 0x68, 0x3e, 0x0a, 0x0a, 0x75, 0x73, 0x69, 0x6e, // md/simd.h>..usin
	0x67, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x6d, 0x65, 0x74, 0x61, // g namespace meta
	0x6c, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, // l;..struct xlatM
	0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, // tlMain_out.{.   
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, //  float4 bgfx_Fra
	0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x20, 0x5b, 0x5b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x30, // gData0 [[color(0
	0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, // )]];.};..struct 
	0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x0a, 0x7b, // xlatMtlMain_in.{
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, // .    float2 v_te
	0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x5b, 0x5b, 0x75, 0x73, 0x65, 0x72, 0x28, 0x6c, // xcoord0 [[user(l
	0x6f, 0x63, 0x6e, 0x31, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x66, 0x72, 0x61, // ocn1)]];.};..fra
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, // gment xlatMtlMai
	0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, // n_out xlatMtlMai
	0x6e, 0x28, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, // n(xlatMtlMain_in
	0x20, 0x69, 0x6e, 0x20, 0x5b, 0x5b, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x5d, 0x5d, //  in [[stage_in]]
	0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x61, // , texture2d_arra
	0x79, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3e, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, // y<float> tex_ste
	0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // reo_fb [[texture
	0x28, 0x30, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x74, // (0)]], sampler t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, // ex_stereo_fbSamp
	0x6c, 0x65, 0x72, 0x20, 0x5b, 0x5b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x30, 0x29, // ler [[sampler(0)
	0x5d, 0x5d, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x67, 0x6c, 0x5f, 0x46, 0x72, // ]], float4 gl_Fr
	0x61, 0x67, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x5b, 0x5b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, // agCoord [[positi
	0x6f, 0x6e, 0x5d, 0x5d, 0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x78, 0x6c, 0x61, 0x74, // on]]).{.    xlat
	0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x6f, 0x75, 0x74, 0x20, // MtlMain_out out 
	0x3d, 0x20, 0x7b, 0x7d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, // = {};.    float3
	0x20, 0x5f, 0x32, 0x30, 0x34, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x69, //  _204 = float3(i
	0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2c, 0x20, 0x28, // n.v_texcoord0, (
	0x66, 0x72, 0x61, 0x63, 0x74, 0x28, 0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6f, // fract(gl_FragCoo
	0x72, 0x64, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x20, 0x3c, 0x20, 0x30, 0x2e, // rd.y * 0.5) < 0.
	0x35, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x30, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, // 5) ? 0.0 : 1.0);
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x6f, 0x75, 0x74, 0x2e, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, // .    out.bgfx_Fr
	0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, // agData0 = float4
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2e, 0x73, // (tex_stereo_fb.s
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // ample(tex_stereo
	0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x32, 0x30, 0x34, // _fbSampler, _204
	0x2e, 0x78, 0x79, 0x2c, 0x20, 0x75, 0x69, 0x6e, 0x74, 0x28, 0x72, 0x69, 0x6e, 0x74, 0x28, 0x5f, // .xy, uint(rint(_
	0x32, 0x30, 0x34, 0x2e, 0x7a, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, // 204.z)), level(0
	0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, // .0)).xyz, 1.0);.
	0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6f, 0x75, 0x74, 0x3b, 0x0a, //     return out;.
	0x7d, 0x0a, 0x0a, 0x00, 0x00, 0x40, 0x00,                                                       // }....@.
};
static const uint8_t fs_pp_stereo_int_st_essl[8981] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x23, // FSH.Jc._.......#
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x33, 0x32, 0x30, 0x20, 0x65, // ..#version 320 e
	0x73, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, // s.#define attrib
	0x75, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x76, // ute in.#define v
	0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, // arying in.precis
	0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3b, // ion highp float;
	0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, // .precision highp
	0x20, 0x69, 0x6e, 0x74, 0x3b, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, //  int;.precision 
	0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, // highp sampler2DA
	0x72, 0x72, 0x61, 0x79, 0x3b, 0x0a, 0x23, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, // rray;.#extension
	0x20, 0x47, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x74, //  GL_EXT_shader_t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6c, 0x6f, 0x64, 0x20, 0x3a, 0x20, 0x65, 0x6e, 0x61, // exture_lod : ena
	0x62, 0x6c, 0x65, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, // ble.#define text
	0x75, 0x72, 0x65, 0x32, 0x44, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, // ure2DLod      te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x4c, 0x6f, 0x64, 0x45, 0x58, 0x54, 0x0a, 0x23, 0x64, // xture2DLodEXT.#d
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x47, // efine texture2DG
	0x72, 0x61, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, // rad     texture2
	0x44, 0x47, 0x72, 0x61, 0x64, 0x45, 0x58, 0x54, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, // DGradEXT.#define
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x4c, 0x6f, //  texture2DProjLo
	0x64, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, // d  texture2DProj
	0x4c, 0x6f, 0x64, 0x45, 0x58, 0x54, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, // LodEXT.#define t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, // exture2DProjGrad
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, //  texture2DProjGr
	0x61, 0x64, 0x45, 0x58, 0x54, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, // adEXT.#define te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, // xtureCubeLod    
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x4c, 0x6f, 0x64, 0x45, 0x58, // textureCubeLodEX
	0x54, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // T.#define textur
	0x65, 0x43, 0x75, 0x62, 0x65, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, // eCubeGrad   text
	0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x47, 0x72, 0x61, 0x64, 0x45, 0x58, 0x54, 0x0a, 0x23, // ureCubeGradEXT.#
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x28, // define shadow2D(
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, // _sampler, _coord
	0x29, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, // ) texture(_sampl
	0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x0a, 0x23, 0x64, 0x65, 0x66, // er, _coord).#def
	0x69, 0x6e, 0x65, 0x20, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, // ine shadow2DProj
	0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, // (_sampler, _coor
	0x64, 0x29, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, // d) textureProj(_
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, // sampler, _coord)
	0x0a, 0x23, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x47, 0x4c, 0x5f, 0x45, // .#extension GL_E
	0x58, 0x54, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, // XT_texture_array
	0x20, 0x3a, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x0a, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x65, //  : enable.out me
	0x64, 0x69, 0x75, 0x6d, 0x70, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, // diump vec4 bgfx_
	0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, // FragColor;.varyi
	0x6e, 0x67, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x5f, 0x65, 0x79, 0x65, 0x3b, 0x0a, // ng float v_eye;.
	0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x5f, 0x74, // varying vec2 v_t
	0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, // excoord0;.vec3 i
	0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, // nstMul(vec3 _vec
	0x2c, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, // , mat3 _mtx) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, // eturn ( (_vec) *
	0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, //  (_mtx) ); }.vec
	0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, // 3 instMul(mat3 _
	0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, // mtx, vec3 _vec) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, // { return ( (_mtx
	0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, // ) * (_vec) ); }.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, // vec4 instMul(vec
	0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, // 4 _vec, mat4 _mt
	0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, // x) { return ( (_
	0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, // vec) * (_mtx) );
	0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, //  }.vec4 instMul(
	0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // mat4 _mtx, vec4 
	0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // _vec) { return (
	0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, //  (_mtx) * (_vec)
	0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, 0x70, 0x28, //  ); }.float rcp(
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // float _a) { retu
	0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, // rn 1.0/_a; }.vec
	0x32, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, // 2 rcp(vec2 _a) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, //  return vec2(1.0
	0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x70, // )/_a; }.vec3 rcp
	0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // (vec3 _a) { retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, // rn vec3(1.0)/_a;
	0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x34, //  }.vec4 rcp(vec4
	0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, //  _a) { return ve
	0x63, 0x34, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, // c4(1.0)/_a; }.ve
	0x63, 0x32, 0x20, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, // c2 vec2_splat(fl
	0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // oat _x) { return
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, //  vec2(_x, _x); }
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, // .vec3 vec3_splat
	0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // (float _x) { ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, // urn vec3(_x, _x,
	0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, 0x65, 0x63, //  _x); }.vec4 vec
	0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, // 4_splat(float _x
	0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, // ) { return vec4(
	0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, // _x, _x, _x, _x);
	0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, //  }.uvec2 uvec2_s
	0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, // plat(uint _x) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, // return uvec2(_x,
	0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, 0x75, 0x76, //  _x); }.uvec3 uv
	0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, // ec3_splat(uint _
	0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, // x) { return uvec
	0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, // 3(_x, _x, _x); }
	0x0a, 0x75, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, // .uvec4 uvec4_spl
	0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // at(uint _x) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, // turn uvec4(_x, _
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x6d, 0x61, // x, _x, _x); }.ma
	0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, // t4 mtxFromRows(v
	0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, // ec4 _0, vec4 _1,
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, //  vec4 _2, vec4 _
	0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, // 3).{.return tran
	0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, // spose(mat4(_0, _
	0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // 1, _2, _3) );.}.
	0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, // mat4 mtxFromCols
	0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, // (vec4 _0, vec4 _
	0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // 1, vec4 _2, vec4
	0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, //  _3).{.return ma
	0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, // t4(_0, _1, _2, _
	0x33, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, // 3);.}.mat3 mtxFr
	0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, // omRows(vec3 _0, 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, // vec3 _1, vec3 _2
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, // ).{.return trans
	0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, // pose(mat3(_0, _1
	0x2c, 0x20, 0x5f, 0x32, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, // , _2) );.}.mat3 
	0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, // mtxFromCols(vec3
	0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, //  _0, vec3 _1, ve
	0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // c3 _2).{.return 
	0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, // mat3(_0, _1, _2)
	0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, // ;.}.uniform vec4
	0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, //  u_viewRect;.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, // form vec4 u_view
	0x54, 0x65, 0x78, 0x65, 0x6c, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, // Texel;.uniform m
	0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // at4 u_view;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, // orm mat4 u_invVi
	0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, // ew;.uniform mat4
	0x20, 0x75, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, //  u_proj;.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, 0x6a, 0x3b, //  mat4 u_invProj;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, // .uniform mat4 u_
	0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // viewProj;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, // m mat4 u_invView
	0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, // Proj;.uniform ma
	0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, 0x3b, 0x0a, // t4 u_model[32];.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, // uniform mat4 u_m
	0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // odelView;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, // m mat4 u_modelVi
	0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // ewProj;.uniform 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x66, 0x34, // vec4 u_alphaRef4
	0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, // ;.float sqr(cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // t float v).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, // urn v*v;.}.vec2 
	0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, // sqr(const vec2 v
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, // ).{.return v*v;.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, // }.vec3 sqr(const
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, //  vec3 v).{.retur
	0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6d, 0x75, // n v*v;.}.vec3 mu
	0x6c, 0x5f, 0x77, 0x31, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // l_w1(const vec3 
	0x76, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x29, // v, const mat4 m)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2e, 0x78, 0x2a, 0x6d, 0x5b, // .{.return v.x*m[
	0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x79, 0x2a, 0x6d, 0x5b, // 0].xyz + (v.y*m[
	0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x7a, 0x2a, 0x6d, 0x5b, // 1].xyz + (v.z*m[
	0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x6d, 0x5b, 0x33, 0x5d, 0x2e, 0x78, 0x79, // 2].xyz + m[3].xy
	0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x63, 0x6f, // z));.}.float aco
	0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x63, // s_approx_divPI(c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, // onst float v).{.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, // const float x = 
	0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, // abs(v);.if(1. - 
	0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, // x <= 0.000061035
	0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, // 15625).return (v
	0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x20, 0x3a, 0x20, 0x31, //  >= 0.) ? 0. : 1
	0x2e, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, // .;.const float r
	0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, // es = ((-0.155972
	0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, // /3.1415926535897
	0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, // 9323846264338327
	0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, // 95) * x + (1.564
	0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, // 67/3.14159265358
	0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, // 9793238462643383
	0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, // 2795) ) * sqrt(1
	0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // . - x);.return (
	0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, // v >= 0.) ? res :
	0x20, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, //  1. - res;.}.flo
	0x61, 0x74, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, // at atan2_approx_
	0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, // div2PI(const flo
	0x61, 0x74, 0x20, 0x79, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, // at y, const floa
	0x74, 0x20, 0x78, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, // t x).{.const flo
	0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x79, // at abs_y = abs(y
	0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, // );.const float a
	0x62, 0x73, 0x5f, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x78, 0x29, 0x3b, 0x0a, 0x69, // bs_x = abs(x);.i
	0x66, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, // f(abs_x <= 0.000
	0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x20, 0x26, 0x26, 0x20, 0x61, // 06103515625 && a
	0x62, 0x73, 0x5f, 0x79, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, // bs_y <= 0.000061
	0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // 03515625).return
	0x20, 0x30, 0x2e, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, //  0.;.const float
	0x20, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2d, 0x20, 0x61, 0x62, //  r = (abs_x - ab
	0x73, 0x5f, 0x79, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2b, 0x20, // s_y) / (abs_x + 
	0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // abs_y);.const fl
	0x6f, 0x61, 0x74, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x78, 0x20, // oat angle = ((x 
	0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x28, 0x33, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x20, // < 0.) ? (3./8.) 
	0x3a, 0x20, 0x28, 0x31, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x29, 0x0a, 0x2b, 0x20, 0x28, 0x30, 0x2e, // : (1./8.)).+ (0.
	0x32, 0x31, 0x31, 0x38, 0x36, 0x38, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, // 211868 /(2.*3.14
	0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, // 1592653589793238
	0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, // 4626433832795) *
	0x20, 0x72, 0x20, 0x2a, 0x20, 0x72, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x39, 0x38, 0x37, 0x33, 0x30, //  r * r - 0.98730
	0x35, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, // 5 /(2.*3.1415926
	0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, // 5358979323846264
	0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x78, // 33832795)) * ((x
	0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x72, 0x20, 0x3a, 0x20, 0x72, 0x29, //  < 0.) ? -r : r)
	0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x79, 0x20, 0x3c, 0x20, 0x30, 0x2e, // ;.return (y < 0.
	0x29, 0x20, 0x3f, 0x20, 0x2d, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3a, 0x20, 0x61, 0x6e, 0x67, // ) ? -angle : ang
	0x6c, 0x65, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x73, 0x69, 0x6e, // le;.}.float asin
	0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x63, 0x6f, // _approx_divPI(co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x63, // nst float v).{.c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, // onst float x = a
	0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, // bs(v);.if(1. - x
	0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, //  <= 0.0000610351
	0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, // 5625).return (v 
	0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x3a, 0x20, 0x2d, // >= 0.) ? 0.5 : -
	0x30, 0x2e, 0x35, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // 0.5;.const float
	0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, //  res = ((-0.1559
	0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, // 72/3.14159265358
	0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, // 9793238462643383
	0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, // 2795) * x + (1.5
	0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, // 6467/3.141592653
	0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, // 5897932384626433
	0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, // 832795) ) * sqrt
	0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // (1. - x);.return
	0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, //  (v >= 0.) ? 0.5
	0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, //  - res : -0.5 + 
	0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x61, 0x79, 0x5f, // res;.}.vec2 ray_
	0x74, 0x6f, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x75, 0x6c, // to_equirectangul
	0x61, 0x72, 0x5f, 0x75, 0x76, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, // ar_uv(const vec3
	0x20, 0x72, 0x61, 0x79, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, //  ray).{.return v
	0x65, 0x63, 0x32, 0x28, 0x0a, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, // ec2(.0.5 + atan2
	0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x72, // _approx_div2PI(r
	0x61, 0x79, 0x2e, 0x79, 0x2c, 0x20, 0x72, 0x61, 0x79, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x61, 0x63, // ay.y, ray.x),.ac
	0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, // os_approx_divPI(
	0x72, 0x61, 0x79, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // ray.z));.}.float
	0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, //  InvsRGB(const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, // loat color).{.if
	0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, //  (color <= 0.040
	0x34, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // 45).return color
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x29, 0x3b, 0x0a, //  * (1.0/12.92);.
	0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, // else.return pow(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, // color * (1.0/1.0
	0x35, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x2f, 0x31, 0x2e, 0x30, // 55) + (0.055/1.0
	0x35, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // 55), 2.4);.}.flo
	0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x63, 0x6f, 0x6e, // at InvRec709(con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, // st float color).
	0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, // {.if (color <= 0
	0x2e, 0x30, 0x38, 0x31, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, // .081).return col
	0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x34, 0x2e, 0x35, 0x29, 0x3b, 0x0a, // or * (1.0/4.5);.
	0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, // else.return pow(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, // color * (1.0/1.0
	0x39, 0x39, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x2f, 0x31, 0x2e, 0x30, // 99) + (0.099/1.0
	0x39, 0x39, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x3b, 0x0a, // 99), 1.0/0.45);.
	0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, // }.float InvGamma
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, // (const float col
	0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x49, 0x6e, 0x76, // or).{.return Inv
	0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // sRGB(color);.}.v
	0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, // ec3 InvGamma(con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, // st vec3 color).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x49, 0x6e, 0x76, // .return vec3(Inv
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x49, // Gamma(color.x),I
	0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, // nvGamma(color.y)
	0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, // ,InvGamma(color.
	0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x54, // z));.}.vec3 InvT
	0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, // oneMap(const vec
	0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, // 3 color).{.const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x20, 0x3d, //  float inv_2bh =
	0x20, 0x30, 0x2e, 0x35, 0x2f, 0x30, 0x2e, 0x32, 0x35, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, //  0.5/0.25;.const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x34, 0x2e, 0x30, 0x2a, //  float bh = 4.0*
	0x30, 0x2e, 0x32, 0x35, 0x20, 0x2d, 0x20, 0x32, 0x2e, 0x30, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // 0.25 - 2.0;.retu
	0x72, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, // rn (color - 1.0 
	0x2b, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2a, 0x28, 0x63, 0x6f, // + sqrt(color*(co
	0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x20, 0x62, 0x68, 0x29, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, // lor + bh) + 1.0)
	0x29, 0x2a, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // )*inv_2bh;.}.flo
	0x61, 0x74, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // at sRGB(const fl
	0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, // oat f).{.float s
	0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x33, // ;.if (f <= 0.003
	0x31, 0x33, 0x30, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x20, // 1308).s = 12.92 
	0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, // * f;.else.s = 1.
	0x30, 0x35, 0x35, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x31, 0x2e, 0x30, // 055 * pow(f, 1.0
	0x2f, 0x32, 0x2e, 0x34, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x3b, 0x0a, 0x72, // /2.4) - 0.055;.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // eturn s;.}.float
	0x20, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, //  Rec709(const fl
	0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, // oat f).{.float s
	0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, // ;.if (f <= 0.018
	0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x34, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, // ).s = 4.5 * f;.e
	0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x20, 0x2a, 0x20, // lse.s = 1.099 * 
	0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x20, 0x2d, 0x20, 0x30, // pow(f, 0.45) - 0
	0x2e, 0x30, 0x39, 0x39, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, // .099;.return s;.
	0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, // }.float FBGamma(
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // const float colo
	0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x52, 0x47, 0x42, // r).{.return sRGB
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, // (color);.}.vec2 
	0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // FBGamma(const ve
	0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, // c2 color).{.retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, // rn vec2(FBGamma(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, // color.x),FBGamma
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // (color.y));.}.ve
	0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, // c3 FBGamma(const
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, //  vec3 color).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, // eturn vec3(FBGam
	0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, // ma(color.x),FBGa
	0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x46, 0x42, 0x47, // mma(color.y),FBG
	0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, // amma(color.z));.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x32, 0x32, // }.vec3 FBGamma22
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // (const vec3 colo
	0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, // r).{.return vec3
	0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x2c, 0x20, 0x31, 0x2e, // (pow(color.x, 1.
	0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // 0/2.2),pow(color
	0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, // .y, 1.0/2.2),pow
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, // (color.z, 1.0/2.
	0x32, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x54, // 2));.}.float FBT
	0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, // oneMap(const flo
	0x61, 0x74, 0x20, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6c, // at l).{.return l
	0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, //  * ((l*0.25 + 1.
	0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, // 0) / (l + 1.0));
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, // .}.vec2 FBToneMa
	0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, // p(const vec2 col
	0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, // or).{.const floa
	0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, // t l = dot(color,
	0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2b, 0x30, 0x2e, // vec2(0.176204+0.
	0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x2c, 0x30, 0x2e, 0x38, 0x31, // 0108109*0.5,0.81
	0x32, 0x39, 0x38, 0x35, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, // 2985+0.0108109*0
	0x2e, 0x35, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, // .5));.return col
	0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, // or * ((l*0.25 + 
	0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, // 1.0) / (l + 1.0)
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, // );.}.vec3 FBTone
	0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, // Map(const vec3 c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // olor).{.const fl
	0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // oat l = dot(colo
	0x72, 0x2c, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2c, // r,vec3(0.176204,
	0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2c, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, // 0.812985,0.01081
	0x30, 0x39, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, // 09));.return col
	0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, // or * ((l*0.25 + 
	0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, // 1.0) / (l + 1.0)
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, // );.}.vec4 Additi
	0x76, 0x65, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // ve(const vec4 cB
	0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // ase, const vec4 
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // cBlend, const fl
	0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, // oat percent).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2b, 0x20, 0x63, 0x42, // eturn cBase + cB
	0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, // lend*percent;.}.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6e, // vec3 Screen (con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, // st vec3 cBase, c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, // onst vec3 cBlend
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, // ).{.return 1.0 -
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, //  (1.0 - cBase) *
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, //  (1.0 - cBlend);
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, // .}.vec4 Screen (
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, // const vec4 cBase
	0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, // , const vec4 cBl
	0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, // end).{.return 1.
	0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, // 0 - (1.0 - cBase
	0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // ) * (1.0 - cBlen
	0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, // d);.}.vec3 Scree
	0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, // nHDR (const vec3
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, //  cBase, const ve
	0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // c3 cBlend).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, // urn max(1.0 - (1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, // .0 - cBase) * (1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, // .0 - cBlend), ve
	0x63, 0x33, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, // c3(0.,0.,0.));.}
	0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, // .vec4 ScreenHDR 
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, // (const vec4 cBas
	0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // e, const vec4 cB
	0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, // lend).{.return m
	0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, // ax(1.0 - (1.0 - 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, // cBase) * (1.0 - 
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, // cBlend), vec4(0.
	0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // ,0.,0.,0.));.}.v
	0x65, 0x63, 0x34, 0x20, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x20, 0x28, 0x63, 0x6f, // ec4 Multiply (co
	0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, // nst vec4 cBase, 
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // const vec4 cBlen
	0x64, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, // d, const float p
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // ercent).{.return
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2a, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, //  cBase * cBlend*
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, // percent;.}.vec4 
	0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, // Overlay (const v
	0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, // ec4 cBase, const
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, //  vec4 cBlend).{.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, // vec4 cNew = step
	0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, // (0.5, cBase);.cN
	0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, // ew = mix(cBase*c
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, // Blend*2.0, 1.0-2
	0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, // .0*(1.0-cBase)*(
	0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, // 1.0-cBlend), cNe
	0x77, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, // w);.return cNew;
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x48, // .}.vec4 OverlayH
	0x44, 0x52, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, // DR (const vec4 c
	0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, // Base, const vec4
	0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, //  cBlend).{.vec4 
	0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, // cNew = step(0.5,
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, //  cBase);.cNew = 
	0x6d, 0x61, 0x78, 0x28, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, // max(mix(cBase*cB
	0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, // lend*2.0, 1.0-2.
	0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, // 0*(1.0-cBase)*(1
	0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, // .0-cBlend), cNew
	0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, // ), vec4(0.,0.,0.
	0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, // ,0.));.return cN
	0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x73, 0x5f, 0x68, // ew;.}.vec3 cos_h
	0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // emisphere_sample
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x29, 0x0a, 0x7b, // (const vec2 t).{
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x68, 0x69, // .const float phi
	0x20, 0x3d, 0x20, 0x74, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x28, 0x32, 0x2e, 0x30, 0x2a, 0x33, 0x2e, //  = t.y * (2.0*3.
	0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, // 1415926535897932
	0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, // 384626433832795)
	0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, // ;.const float co
	0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, // sTheta = sqrt(1.
	0x30, 0x20, 0x2d, 0x20, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // 0 - t.x);.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, // float sinTheta =
	0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, //  sqrt(t.x);.floa
	0x74, 0x20, 0x73, 0x70, 0x2c, 0x63, 0x70, 0x3b, 0x0a, 0x73, 0x69, 0x6e, 0x63, 0x6f, 0x73, 0x28, // t sp,cp;.sincos(
	0x70, 0x68, 0x69, 0x2c, 0x73, 0x70, 0x2c, 0x63, 0x70, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // phi,sp,cp);.retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x63, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, // rn vec3(cp * sin
	0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, // Theta, cosTheta,
	0x20, 0x73, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x29, 0x3b, //  sp * sinTheta);
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, // .}.vec3 rotate_t
	0x6f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x28, 0x63, // o_vector_upper(c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x63, // onst vec3 vec, c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, // onst vec3 normal
	0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, // ).{.if(normal.y 
	0x3e, 0x20, 0x2d, 0x30, 0x2e, 0x39, 0x39, 0x39, 0x39, 0x39, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, // > -0.99999).{.co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x20, 0x3d, 0x20, 0x31, 0x2e, // nst float h = 1.
	0x30, 0x2f, 0x28, 0x31, 0x2e, 0x30, 0x2b, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x29, // 0/(1.0+normal.y)
	0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, // ;.const float hz
	0x20, 0x3d, 0x20, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x3b, 0x0a, 0x63, //  = h*normal.z;.c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x3d, // onst float hzx =
	0x20, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x3b, 0x0a, 0x72, 0x65, //  hz*normal.x;.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x78, // turn vec3(.vec.x
	0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x7a, 0x2a, //  * (normal.y+hz*
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x29, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, // normal.z) + vec.
	0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, // y * normal.x - v
	0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, // ec.z * hzx,.vec.
	0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x2d, 0x20, 0x76, // y * normal.y - v
	0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, // ec.x * normal.x 
	0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, // - vec.z * normal
	0x2e, 0x7a, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, // .z,.vec.y * norm
	0x61, 0x6c, 0x2e, 0x7a, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x68, // al.z - vec.x * h
	0x7a, 0x78, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, // zx + vec.z * (no
	0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, // rmal.y+h*normal.
	0x78, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // x*normal.x));.}.
	0x65, 0x6c, 0x73, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x2d, 0x76, 0x65, 0x63, // else return -vec
	0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, // ;.}.uniform vec4
	0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x53, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, //  Stereo_Saturati
	0x6f, 0x6e, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, // on;.uniform vec4
	0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, //  Stereo_MS_ZPD_Y
	0x41, 0x78, 0x69, 0x73, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, // Axis;.uniform sa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x20, 0x74, 0x65, 0x78, // mpler2DArray tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // _stereo_fb;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, 0x72, 0x72, // orm sampler2DArr
	0x61, 0x79, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, // ay tex_stereo_de
	0x70, 0x74, 0x68, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, // pth;.uniform vec
	0x34, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, 0x76, 0x65, // 4 w_h_height;.ve
	0x63, 0x33, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, // c3 gatherEyeColo
	0x72, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x69, // r(vec2 u, bool i
	0x73, 0x4c, 0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // sLeft).{.return 
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x6f, // texture2DArrayLo
	0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, // d(tex_stereo_fb,
	0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, 0x20, //  vec3(u.x, u.y, 
	0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x30, 0x20, 0x3a, 0x20, 0x31, // isLeft ? 0.0 : 1
	0x2e, 0x30, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x7d, 0x0a, // .0), 0.).rgb;.}.
	0x76, 0x6f, 0x69, 0x64, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x52, // void gatherLeftR
	0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, // ightColors(vec2 
	0x75, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x63, 0x6f, 0x6c, // u, out vec3 lcol
	0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x6f, 0x6c, 0x29, // , out vec3 rcol)
	0x0a, 0x7b, 0x0a, 0x6c, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // .{.lcol = textur
	0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, // e2DArrayLod(tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, // stereo_fb, vec3(
	0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2c, 0x20, 0x30, // u.x, u.y, 0.), 0
	0x2e, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x72, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, // .).xyz;.rcol = t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x6f, 0x64, // exture2DArrayLod
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, // (tex_stereo_fb, 
	0x76, 0x65, 0x63, 0x33, 0x28, 0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, 0x20, 0x31, // vec3(u.x, u.y, 1
	0x2e, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, // .), 0.).xyz;.}.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, // niform mat4 Ster
	0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // eo_LeftMat;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // orm mat4 Stereo_
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // RightMat;.unifor
	0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, // m vec4 Stereo_Le
	0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, // ftLuminance_Gamm
	0x61, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // a;.uniform vec4 
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, // Stereo_RightLumi
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x3b, 0x0a, // nance_DynDesat;.
	0x76, 0x6f, 0x69, 0x64, 0x20, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x65, 0x73, 0x61, // void DynamicDesa
	0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // tAnaglyph(const 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, // vec3 lCol, const
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, //  vec3 rCol, out 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // vec3 lDesatCol, 
	0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, // out vec3 rDesatC
	0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, // ol).{.const floa
	0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, // t left2LeftLum =
	0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, //  dot(lCol, Stere
	0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, // o_LeftLuminance_
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // Gamma.xyz);.cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, // t float left2Rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, // htLum = dot(lCol
	0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // , Stereo_RightLu
	0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, // minance_DynDesat
	0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, // .xyz);.const flo
	0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // at right2LeftLum
	0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, //  = dot(rCol, Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, // reo_LeftLuminanc
	0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, // e_Gamma.xyz);.co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, // nst float right2
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, // RightLum = dot(r
	0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, // Col, Stereo_Righ
	0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, // tLuminance_DynDe
	0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // sat.xyz);.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, // float leftLum = 
	0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x6c, // left2LeftLum + l
	0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, 0x0a, 0x63, 0x6f, // eft2RightLum;.co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, // nst float rightL
	0x75, 0x6d, 0x20, 0x3d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, // um = right2LeftL
	0x75, 0x6d, 0x20, 0x2b, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, // um + right2Right
	0x4c, 0x75, 0x6d, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // Lum;.const float
	0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, //  leftDesat = Ste
	0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, // reo_RightLuminan
	0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, // ce_DynDesat.w * 
	0x61, 0x62, 0x73, 0x28, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, // abs((left2LeftLu
	0x6d, 0x20, 0x2d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // m - left2RightLu
	0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, // m) / (leftLum + 
	0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // 0.0001));.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, // float rightDesat
	0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, //  = Stereo_RightL
	0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, // uminance_DynDesa
	0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, // t.w * abs((right
	0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, // 2LeftLum - right
	0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x72, 0x69, // 2RightLum) / (ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, // ghtLum + 0.0001)
	0x29, 0x3b, 0x0a, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, // );.lDesatCol = m
	0x69, 0x78, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, // ix(lCol, vec3_sp
	0x6c, 0x61, 0x74, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, 0x6c, 0x65, // lat(leftLum), le
	0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x72, 0x44, 0x65, 0x73, 0x61, 0x74, // ftDesat);.rDesat
	0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // Col = mix(rCol, 
	0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, // vec3_splat(right
	0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, // Lum), rightDesat
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, // );.}.vec3 Linear
	0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, // Anaglyph(const v
	0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // ec3 lCol, const 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, // vec3 rCol).{.con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, // st vec3 color = 
	0x28, 0x28, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, // (( (vec4(lCol, 1
	0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, // .)) * (Stereo_Le
	0x66, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x20, 0x28, 0x76, 0x65, // ftMat) ) + ( (ve
	0x63, 0x34, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, // c4(rCol, 1.)) * 
	0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, // (Stereo_RightMat
	0x29, 0x20, 0x29, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // ) )).rgb;.return
	0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, //  color;.}.unifor
	0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, // m vec4 Stereo_De
	0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // ghostGamma;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // orm mat4 Stereo_
	0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3b, 0x0a, 0x76, // DeghostFilter;.v
	0x65, 0x63, 0x33, 0x20, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, // ec3 DeghostAnagl
	0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, // yph(const vec3 l
	0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // Col, const vec3 
	0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // rCol).{.const ve
	0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, // c3 color = Linea
	0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // rAnaglyph(lCol, 
	0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, // rCol);.return ( 
	0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, // (pow(color, Ster
	0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, // eo_DeghostGamma.
	0x72, 0x67, 0x62, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x53, 0x74, // rgb)) * (mat3(St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, // ereo_DeghostFilt
	0x65, 0x72, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // er[0].xyz, Stere
	0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, // o_DeghostFilter[
	0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, // 1].xyz, Stereo_D
	0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x32, 0x5d, 0x2e, // eghostFilter[2].
	0x78, 0x79, 0x7a, 0x29, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, // xyz)) );.}.void 
	0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, // main().{.bgfx_Fr
	0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x67, // agColor = vec4(g
	0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x76, 0x5f, // atherEyeColor(v_
	0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2c, 0x20, 0x66, 0x72, 0x61, 0x63, 0x28, // texcoord0, frac(
	0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x2e, 0x79, 0x2a, 0x30, // gl_FragCoord.y*0
	0x2e, 0x35, 0x29, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, // .5) < 0.5), 1.0)
	0x3b, 0x0a, 0x7d, 0x0a, 0x00,                                                                   // ;.}..
};
static const uint8_t fs_pp_stereo_int_st_glsl[8965] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf2, 0x22, // FSH.Jc._......."
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x34, 0x34, 0x30, 0x0a, 0x6f, // ..#version 440.o
	0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, // ut vec4 bgfx_Fra
	0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, // gColor;.#define 
	0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x62, 0x67, 0x66, // gl_FragColor bgf
	0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x0a, 0x23, 0x64, 0x65, 0x66, // x_FragColor.#def
	0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x20, 0x20, 0x20, // ine texture2D   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x0a, 0x23, //        texture.#
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, // define texture2D
	0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // Lod       textur
	0x65, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, // eLod.#define tex
	0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ture2DGrad      
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, // textureGrad.#def
	0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, // ine texture2DPro
	0x6a, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, // jLod   texturePr
	0x6f, 0x6a, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, // ojLod.#define te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, 0x20, // xture2DProjGrad 
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, //  textureProjGrad
	0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // .#define texture
	0x43, 0x75, 0x62, 0x65, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, // CubeLod     text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, // ureLod.#define t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, // extureCubeGrad  
	0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, //   textureGrad.#d
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x33, 0x44, 0x20, // efine texture3D 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, //          texture
	0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // .#define texture
	0x32, 0x44, 0x4c, 0x6f, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x20, 0x74, 0x65, 0x78, 0x74, // 2DLodOffset text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x0a, 0x23, 0x64, 0x65, // ureLodOffset.#de
	0x66, 0x69, 0x6e, 0x65, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x69, // fine attribute i
	0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, // n.#define varyin
	0x67, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x62, 0x67, 0x66, // g in.#define bgf
	0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, // xShadow2D(_sampl
	0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, // er, _coord)     
	0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, // vec4_splat(textu
	0x72, 0x65, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, // re(_sampler, _co
	0x6f, 0x72, 0x64, 0x29, 0x20, 0x29, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x62, // ord) ).#define b
	0x67, 0x66, 0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x28, // gfxShadow2DProj(
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, // _sampler, _coord
	0x29, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, // ) vec4_splat(tex
	0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // tureProj(_sample
	0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x29, 0x0a, 0x76, 0x61, 0x72, // r, _coord) ).var
	0x79, 0x69, 0x6e, 0x67, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x5f, 0x65, 0x79, 0x65, // ying float v_eye
	0x3b, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, // ;.varying vec2 v
	0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, // _texcoord0;.vec3
	0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, //  instMul(vec3 _v
	0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, // ec, mat3 _mtx) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, //  return ( (_vec)
	0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, //  * (_mtx) ); }.v
	0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, // ec3 instMul(mat3
	0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, //  _mtx, vec3 _vec
	0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, // ) { return ( (_m
	0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, // tx) * (_vec) ); 
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, // }.vec4 instMul(v
	0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, // ec4 _vec, mat4 _
	0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, // mtx) { return ( 
	0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, // (_vec) * (_mtx) 
	0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, // ); }.vec4 instMu
	0x6c, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, // l(mat4 _mtx, vec
	0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // 4 _vec) { return
	0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, //  ( (_mtx) * (_ve
	0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, // c) ); }.float rc
	0x70, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // p(float _a) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, // turn 1.0/_a; }.v
	0x65, 0x63, 0x32, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, // ec2 rcp(vec2 _a)
	0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, //  { return vec2(1
	0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, // .0)/_a; }.vec3 r
	0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // cp(vec3 _a) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, // turn vec3(1.0)/_
	0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, // a; }.vec4 rcp(ve
	0x63, 0x34, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // c4 _a) { return 
	0x76, 0x65, 0x63, 0x34, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, // vec4(1.0)/_a; }.
	0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, // vec2 vec2_splat(
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // float _x) { retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, // rn vec2(_x, _x);
	0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, //  }.vec3 vec3_spl
	0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, // at(float _x) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, // eturn vec3(_x, _
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, // x, _x); }.vec4 v
	0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // ec4_splat(float 
	0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, // _x) { return vec
	0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, // 4(_x, _x, _x, _x
	0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, // ); }.uvec2 uvec2
	0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, // _splat(uint _x) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, // { return uvec2(_
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, // x, _x); }.uvec3 
	0x75, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, // uvec3_splat(uint
	0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, //  _x) { return uv
	0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, // ec3(_x, _x, _x);
	0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, //  }.uvec4 uvec4_s
	0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, // plat(uint _x) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, // return uvec4(_x,
	0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, //  _x, _x, _x); }.
	0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, // mat4 mtxFromRows
	0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, // (vec4 _0, vec4 _
	0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // 1, vec4 _2, vec4
	0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, //  _3).{.return tr
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, // anspose(mat4(_0,
	0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, //  _1, _2, _3) );.
	0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, // }.mat4 mtxFromCo
	0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // ls(vec4 _0, vec4
	0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, //  _1, vec4 _2, ve
	0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // c4 _3).{.return 
	0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, // mat4(_0, _1, _2,
	0x20, 0x5f, 0x33, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, //  _3);.}.mat3 mtx
	0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, // FromRows(vec3 _0
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // , vec3 _1, vec3 
	0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, // _2).{.return tra
	0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, // nspose(mat3(_0, 
	0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, // _1, _2) );.}.mat
	0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, // 3 mtxFromCols(ve
	0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, // c3 _0, vec3 _1, 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // vec3 _2).{.retur
	0x6e, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, // n mat3(_0, _1, _
	0x32, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, // 2);.}.uniform ve
	0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, // c4 u_viewRect;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, // niform vec4 u_vi
	0x65, 0x77, 0x54, 0x65, 0x78, 0x65, 0x6c, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // ewTexel;.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, //  mat4 u_view;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, // iform mat4 u_inv
	0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, // View;.uniform ma
	0x74, 0x34, 0x20, 0x75, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, // t4 u_proj;.unifo
	0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, // rm mat4 u_invPro
	0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, // j;.uniform mat4 
	0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // u_viewProj;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, // orm mat4 u_invVi
	0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // ewProj;.uniform 
	0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, // mat4 u_model[32]
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, // ;.uniform mat4 u
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // _modelView;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, // orm mat4 u_model
	0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // ViewProj;.unifor
	0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, // m vec4 u_alphaRe
	0x66, 0x34, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, // f4;.float sqr(co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, // nst float v).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // eturn v*v;.}.vec
	0x32, 0x20, 0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, // 2 sqr(const vec2
	0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, //  v).{.return v*v
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, // ;.}.vec3 sqr(con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // st vec3 v).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // urn v*v;.}.vec3 
	0x6d, 0x75, 0x6c, 0x5f, 0x77, 0x31, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, // mul_w1(const vec
	0x33, 0x20, 0x76, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, // 3 v, const mat4 
	0x6d, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2e, 0x78, 0x2a, // m).{.return v.x*
	0x6d, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x79, 0x2a, // m[0].xyz + (v.y*
	0x6d, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x7a, 0x2a, // m[1].xyz + (v.z*
	0x6d, 0x5b, 0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x6d, 0x5b, 0x33, 0x5d, 0x2e, // m[2].xyz + m[3].
	0x78, 0x79, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, // xyz));.}.float a
	0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, // cos_approx_divPI
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, // (const float v).
	0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, // {.const float x 
	0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, // = abs(v);.if(1. 
	0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, // - x <= 0.0000610
	0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // 3515625).return 
	0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x20, 0x3a, // (v >= 0.) ? 0. :
	0x20, 0x31, 0x2e, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, //  1.;.const float
	0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, //  res = ((-0.1559
	0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, // 72/3.14159265358
	0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, // 9793238462643383
	0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, // 2795) * x + (1.5
	0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, // 6467/3.141592653
	0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, // 5897932384626433
	0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, // 832795) ) * sqrt
	0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // (1. - x);.return
	0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x72, 0x65, 0x73, //  (v >= 0.) ? res
	0x20, 0x3a, 0x20, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, //  : 1. - res;.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, // loat atan2_appro
	0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // x_div2PI(const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x79, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // loat y, const fl
	0x6f, 0x61, 0x74, 0x20, 0x78, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // oat x).{.const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, // loat abs_y = abs
	0x28, 0x79, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // (y);.const float
	0x20, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x78, 0x29, 0x3b, //  abs_x = abs(x);
	0x0a, 0x69, 0x66, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, // .if(abs_x <= 0.0
	0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x20, 0x26, 0x26, // 0006103515625 &&
	0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, //  abs_y <= 0.0000
	0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, // 6103515625).retu
	0x72, 0x6e, 0x20, 0x30, 0x2e, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, // rn 0.;.const flo
	0x61, 0x74, 0x20, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2d, 0x20, // at r = (abs_x - 
	0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, // abs_y) / (abs_x 
	0x2b, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // + abs_y);.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3d, 0x20, 0x28, 0x28, // float angle = ((
	0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x28, 0x33, 0x2e, 0x2f, 0x38, 0x2e, // x < 0.) ? (3./8.
	0x29, 0x20, 0x3a, 0x20, 0x28, 0x31, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x29, 0x0a, 0x2b, 0x20, 0x28, // ) : (1./8.)).+ (
	0x30, 0x2e, 0x32, 0x31, 0x31, 0x38, 0x36, 0x38, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, // 0.211868 /(2.*3.
	0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, // 1415926535897932
	0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, // 384626433832795)
	0x20, 0x2a, 0x20, 0x72, 0x20, 0x2a, 0x20, 0x72, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x39, 0x38, 0x37, //  * r * r - 0.987
	0x33, 0x30, 0x35, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, // 305 /(2.*3.14159
	0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, // 2653589793238462
	0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, // 6433832795)) * (
	0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x72, 0x20, 0x3a, 0x20, // (x < 0.) ? -r : 
	0x72, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x79, 0x20, 0x3c, 0x20, // r);.return (y < 
	0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3a, 0x20, 0x61, // 0.) ? -angle : a
	0x6e, 0x67, 0x6c, 0x65, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x73, // ngle;.}.float as
	0x69, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, // in_approx_divPI(
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, // const float v).{
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, // .const float x =
	0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, //  abs(v);.if(1. -
	0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, //  x <= 0.00006103
	0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // 515625).return (
	0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x3a, // v >= 0.) ? 0.5 :
	0x20, 0x2d, 0x30, 0x2e, 0x35, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, //  -0.5;.const flo
	0x61, 0x74, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, // at res = ((-0.15
	0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, // 5972/3.141592653
	0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, // 5897932384626433
	0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, // 832795) * x + (1
	0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, // .56467/3.1415926
	0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, // 5358979323846264
	0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, // 33832795) ) * sq
	0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // rt(1. - x);.retu
	0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, // rn (v >= 0.) ? 0
	0x2e, 0x35, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x20, // .5 - res : -0.5 
	0x2b, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x61, // + res;.}.vec2 ra
	0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, // y_to_equirectang
	0x75, 0x6c, 0x61, 0x72, 0x5f, 0x75, 0x76, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // ular_uv(const ve
	0x63, 0x33, 0x20, 0x72, 0x61, 0x79, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // c3 ray).{.return
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x0a, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x61, 0x74, 0x61, //  vec2(.0.5 + ata
	0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, // n2_approx_div2PI
	0x28, 0x72, 0x61, 0x79, 0x2e, 0x79, 0x2c, 0x20, 0x72, 0x61, 0x79, 0x2e, 0x78, 0x29, 0x2c, 0x0a, // (ray.y, ray.x),.
	0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, // acos_approx_divP
	0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // I(ray.z));.}.flo
	0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, // at InvsRGB(const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, //  float color).{.
	0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, // if (color <= 0.0
	0x34, 0x30, 0x34, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, // 4045).return col
	0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x29, // or * (1.0/12.92)
	0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, // ;.else.return po
	0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, // w(color * (1.0/1
	0x2e, 0x30, 0x35, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x2f, 0x31, // .055) + (0.055/1
	0x2e, 0x30, 0x35, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // .055), 2.4);.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x63, // loat InvRec709(c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // onst float color
	0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, // ).{.if (color <=
	0x20, 0x30, 0x2e, 0x30, 0x38, 0x31, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, //  0.081).return c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x34, 0x2e, 0x35, 0x29, // olor * (1.0/4.5)
	0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, // ;.else.return po
	0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, // w(color * (1.0/1
	0x2e, 0x30, 0x39, 0x39, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x2f, 0x31, // .099) + (0.099/1
	0x2e, 0x30, 0x39, 0x39, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x30, 0x2e, 0x34, 0x35, 0x29, // .099), 1.0/0.45)
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, // ;.}.float InvGam
	0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, // ma(const float c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x49, // olor).{.return I
	0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, // nvsRGB(color);.}
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, // .vec3 InvGamma(c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, // onst vec3 color)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x49, // .{.return vec3(I
	0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, // nvGamma(color.x)
	0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, // ,InvGamma(color.
	0x79, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // y),InvGamma(colo
	0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, // r.z));.}.vec3 In
	0x76, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, // vToneMap(const v
	0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, // ec3 color).{.con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, // st float inv_2bh
	0x20, 0x3d, 0x20, 0x30, 0x2e, 0x35, 0x2f, 0x30, 0x2e, 0x32, 0x35, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, //  = 0.5/0.25;.con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x34, 0x2e, // st float bh = 4.
	0x30, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2d, 0x20, 0x32, 0x2e, 0x30, 0x3b, 0x0a, 0x72, 0x65, // 0*0.25 - 2.0;.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2d, 0x20, 0x31, 0x2e, // turn (color - 1.
	0x30, 0x20, 0x2b, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2a, 0x28, // 0 + sqrt(color*(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x20, 0x62, 0x68, 0x29, 0x20, 0x2b, 0x20, 0x31, 0x2e, // color + bh) + 1.
	0x30, 0x29, 0x29, 0x2a, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // 0))*inv_2bh;.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // loat sRGB(const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // float f).{.float
	0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, //  s;.if (f <= 0.0
	0x30, 0x33, 0x31, 0x33, 0x30, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, // 031308).s = 12.9
	0x32, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, // 2 * f;.else.s = 
	0x31, 0x2e, 0x30, 0x35, 0x35, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x31, // 1.055 * pow(f, 1
	0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x34, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x3b, // .0/2.4) - 0.055;
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // .return s;.}.flo
	0x61, 0x74, 0x20, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // at Rec709(const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // float f).{.float
	0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, //  s;.if (f <= 0.0
	0x31, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x34, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x66, 0x3b, // 18).s = 4.5 * f;
	0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x20, // .else.s = 1.099 
	0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x20, 0x2d, // * pow(f, 0.45) -
	0x20, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, //  0.099;.return s
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, // ;.}.float FBGamm
	0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, // a(const float co
	0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x52, // lor).{.return sR
	0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // GB(color);.}.vec
	0x32, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // 2 FBGamma(const 
	0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // vec2 color).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, // turn vec2(FBGamm
	0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, // a(color.x),FBGam
	0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // ma(color.y));.}.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, // vec3 FBGamma(con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, // st vec3 color).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x46, 0x42, 0x47, // .return vec3(FBG
	0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, // amma(color.x),FB
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x46, // Gamma(color.y),F
	0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, // BGamma(color.z))
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, // ;.}.vec3 FBGamma
	0x32, 0x32, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, // 22(const vec3 co
	0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, // lor).{.return ve
	0x63, 0x33, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x2c, 0x20, // c3(pow(color.x, 
	0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, // 1.0/2.2),pow(col
	0x6f, 0x72, 0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, // or.y, 1.0/2.2),p
	0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, // ow(color.z, 1.0/
	0x32, 0x2e, 0x32, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, // 2.2));.}.float F
	0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // BToneMap(const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // loat l).{.return
	0x20, 0x6c, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, //  l * ((l*0.25 + 
	0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, // 1.0) / (l + 1.0)
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, // );.}.vec2 FBTone
	0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, // Map(const vec2 c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // olor).{.const fl
	0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // oat l = dot(colo
	0x72, 0x2c, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2b, // r,vec2(0.176204+
	0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x2c, 0x30, 0x2e, // 0.0108109*0.5,0.
	0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, // 812985+0.0108109
	0x2a, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, // *0.5));.return c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, // olor * ((l*0.25 
	0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, // + 1.0) / (l + 1.
	0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x54, 0x6f, // 0));.}.vec3 FBTo
	0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, // neMap(const vec3
	0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, //  color).{.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, // float l = dot(co
	0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, // lor,vec3(0.17620
	0x34, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2c, 0x30, 0x2e, 0x30, 0x31, 0x30, // 4,0.812985,0.010
	0x38, 0x31, 0x30, 0x39, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, // 8109));.return c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, // olor * ((l*0.25 
	0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, // + 1.0) / (l + 1.
	0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x41, 0x64, 0x64, 0x69, // 0));.}.vec4 Addi
	0x74, 0x69, 0x76, 0x65, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // tive(const vec4 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, // cBase, const vec
	0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // 4 cBlend, const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, // float percent).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2b, 0x20, // .return cBase + 
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, // cBlend*percent;.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x63, // }.vec3 Screen (c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, // onst vec3 cBase,
	0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, //  const vec3 cBle
	0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, // nd).{.return 1.0
	0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, //  - (1.0 - cBase)
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, //  * (1.0 - cBlend
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, // );.}.vec4 Screen
	0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, //  (const vec4 cBa
	0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, // se, const vec4 c
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // Blend).{.return 
	0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, // 1.0 - (1.0 - cBa
	0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, // se) * (1.0 - cBl
	0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, // end);.}.vec3 Scr
	0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // eenHDR (const ve
	0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // c3 cBase, const 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, // vec3 cBlend).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, // eturn max(1.0 - 
	0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, // (1.0 - cBase) * 
	0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, // (1.0 - cBlend), 
	0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, // vec3(0.,0.,0.));
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, // .}.vec4 ScreenHD
	0x52, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // R (const vec4 cB
	0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // ase, const vec4 
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // cBlend).{.return
	0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, //  max(1.0 - (1.0 
	0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, // - cBase) * (1.0 
	0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, // - cBlend), vec4(
	0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, // 0.,0.,0.,0.));.}
	0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x20, 0x28, // .vec4 Multiply (
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, // const vec4 cBase
	0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, // , const vec4 cBl
	0x65, 0x6e, 0x64, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // end, const float
	0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, //  percent).{.retu
	0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2a, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // rn cBase * cBlen
	0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // d*percent;.}.vec
	0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, // 4 Overlay (const
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, //  vec4 cBase, con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, // st vec4 cBlend).
	0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, // {.vec4 cNew = st
	0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, // ep(0.5, cBase);.
	0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, // cNew = mix(cBase
	0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, // *cBlend*2.0, 1.0
	0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, // -2.0*(1.0-cBase)
	0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, // *(1.0-cBlend), c
	0x4e, 0x65, 0x77, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, // New);.return cNe
	0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, // w;.}.vec4 Overla
	0x79, 0x48, 0x44, 0x52, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, // yHDR (const vec4
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, //  cBase, const ve
	0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, // c4 cBlend).{.vec
	0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, // 4 cNew = step(0.
	0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, // 5, cBase);.cNew 
	0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, // = max(mix(cBase*
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, // cBlend*2.0, 1.0-
	0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, // 2.0*(1.0-cBase)*
	0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, // (1.0-cBlend), cN
	0x65, 0x77, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, // ew), vec4(0.,0.,
	0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // 0.,0.));.return 
	0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x73, // cNew;.}.vec3 cos
	0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x5f, 0x73, 0x61, 0x6d, 0x70, // _hemisphere_samp
	0x6c, 0x65, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x29, // le(const vec2 t)
	0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, // .{.const float p
	0x68, 0x69, 0x20, 0x3d, 0x20, 0x74, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x28, 0x32, 0x2e, 0x30, 0x2a, // hi = t.y * (2.0*
	0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, // 3.14159265358979
	0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, // 3238462643383279
	0x35, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // 5);.const float 
	0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, // cosTheta = sqrt(
	0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // 1.0 - t.x);.cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, // t float sinTheta
	0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, //  = sqrt(t.x);.fl
	0x6f, 0x61, 0x74, 0x20, 0x73, 0x70, 0x2c, 0x63, 0x70, 0x3b, 0x0a, 0x73, 0x69, 0x6e, 0x63, 0x6f, // oat sp,cp;.sinco
	0x73, 0x28, 0x70, 0x68, 0x69, 0x2c, 0x73, 0x70, 0x2c, 0x63, 0x70, 0x29, 0x3b, 0x0a, 0x72, 0x65, // s(phi,sp,cp);.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x63, 0x70, 0x20, 0x2a, 0x20, 0x73, // turn vec3(cp * s
	0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, // inTheta, cosThet
	0x61, 0x2c, 0x20, 0x73, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, // a, sp * sinTheta
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, // );.}.vec3 rotate
	0x5f, 0x74, 0x6f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, // _to_vector_upper
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x2c, // (const vec3 vec,
	0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, //  const vec3 norm
	0x61, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, // al).{.if(normal.
	0x79, 0x20, 0x3e, 0x20, 0x2d, 0x30, 0x2e, 0x39, 0x39, 0x39, 0x39, 0x39, 0x29, 0x0a, 0x7b, 0x0a, // y > -0.99999).{.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x20, 0x3d, 0x20, // const float h = 
	0x31, 0x2e, 0x30, 0x2f, 0x28, 0x31, 0x2e, 0x30, 0x2b, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, // 1.0/(1.0+normal.
	0x79, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // y);.const float 
	0x68, 0x7a, 0x20, 0x3d, 0x20, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x3b, // hz = h*normal.z;
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x78, // .const float hzx
	0x20, 0x3d, 0x20, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x3b, 0x0a, //  = hz*normal.x;.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x0a, 0x76, 0x65, 0x63, // return vec3(.vec
	0x2e, 0x78, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, // .x * (normal.y+h
	0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x29, 0x20, 0x2b, 0x20, 0x76, 0x65, // z*normal.z) + ve
	0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, // c.y * normal.x -
	0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x2c, 0x0a, 0x76, 0x65, //  vec.z * hzx,.ve
	0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x2d, // c.y * normal.y -
	0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, //  vec.x * normal.
	0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, // x - vec.z * norm
	0x61, 0x6c, 0x2e, 0x7a, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, // al.z,.vec.y * no
	0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, // rmal.z - vec.x *
	0x20, 0x68, 0x7a, 0x78, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x28, //  hzx + vec.z * (
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, // normal.y+h*norma
	0x6c, 0x2e, 0x78, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, // l.x*normal.x));.
	0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x2d, 0x76, // }.else return -v
	0x65, 0x63, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, // ec;.}.uniform ve
	0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x53, 0x61, 0x74, 0x75, 0x72, 0x61, // c4 Stereo_Satura
	0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, // tion;.uniform ve
	0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, // c4 Stereo_MS_ZPD
	0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // _YAxis;.uniform 
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x20, 0x74, // sampler2DArray t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x3b, 0x0a, 0x75, 0x6e, // ex_stereo_fb;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, // iform sampler2DA
	0x72, 0x72, 0x61, 0x79, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // rray tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, // depth;.uniform v
	0x65, 0x63, 0x34, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, // ec4 w_h_height;.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, // vec3 gatherEyeCo
	0x6c, 0x6f, 0x72, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, // lor(vec2 u, bool
	0x20, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, //  isLeft).{.retur
	0x6e, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, // n texture2DArray
	0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, // Lod(tex_stereo_f
	0x62, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, // b, vec3(u.x, u.y
	0x2c, 0x20, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x30, 0x20, 0x3a, // , isLeft ? 0.0 :
	0x20, 0x31, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, //  1.0), 0.).rgb;.
	0x7d, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x66, // }.void gatherLef
	0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x28, 0x76, 0x65, 0x63, // tRightColors(vec
	0x32, 0x20, 0x75, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x63, // 2 u, out vec3 lc
	0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x6f, // ol, out vec3 rco
	0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x6c, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, // l).{.lcol = text
	0x75, 0x72, 0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, // ure2DArrayLod(te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x76, 0x65, 0x63, // x_stereo_fb, vec
	0x33, 0x28, 0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2c, // 3(u.x, u.y, 0.),
	0x20, 0x30, 0x2e, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x72, 0x63, 0x6f, 0x6c, 0x20, 0x3d, //  0.).xyz;.rcol =
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, //  texture2DArrayL
	0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, // od(tex_stereo_fb
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, // , vec3(u.x, u.y,
	0x20, 0x31, 0x2e, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, //  1.), 0.).xyz;.}
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, // .uniform mat4 St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, // ereo_LeftMat;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // iform mat4 Stere
	0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // o_RightMat;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // orm vec4 Stereo_
	0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, // LeftLuminance_Ga
	0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, // mma;.uniform vec
	0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // 4 Stereo_RightLu
	0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, // minance_DynDesat
	0x3b, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x65, // ;.void DynamicDe
	0x73, 0x61, 0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, // satAnaglyph(cons
	0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, // t vec3 lCol, con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, // st vec3 rCol, ou
	0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, // t vec3 lDesatCol
	0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x44, 0x65, 0x73, 0x61, // , out vec3 rDesa
	0x74, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // tCol).{.const fl
	0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // oat left2LeftLum
	0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, //  = dot(lCol, Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, // reo_LeftLuminanc
	0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, // e_Gamma.xyz);.co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, // nst float left2R
	0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, // ightLum = dot(lC
	0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, // ol, Stereo_Right
	0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, // Luminance_DynDes
	0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // at.xyz);.const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, // loat right2LeftL
	0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, // um = dot(rCol, S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, // tereo_LeftLumina
	0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, // nce_Gamma.xyz);.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, // const float righ
	0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, // t2RightLum = dot
	0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, // (rCol, Stereo_Ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, // ghtLuminance_Dyn
	0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // Desat.xyz);.cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, // t float leftLum 
	0x3d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, // = left2LeftLum +
	0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, 0x0a, //  left2RightLum;.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, // const float righ
	0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, // tLum = right2Lef
	0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, // tLum + right2Rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, // htLum;.const flo
	0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, // at leftDesat = S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, // tereo_RightLumin
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, // ance_DynDesat.w 
	0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, // * abs((left2Left
	0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, // Lum - left2Right
	0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, // Lum) / (leftLum 
	0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // + 0.0001));.cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x73, // t float rightDes
	0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, // at = Stereo_Righ
	0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, // tLuminance_DynDe
	0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x72, 0x69, 0x67, // sat.w * abs((rig
	0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x72, 0x69, 0x67, // ht2LeftLum - rig
	0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, // ht2RightLum) / (
	0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, // rightLum + 0.000
	0x31, 0x29, 0x29, 0x3b, 0x0a, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, 0x3d, // 1));.lDesatCol =
	0x20, 0x6d, 0x69, 0x78, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, //  mix(lCol, vec3_
	0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, // splat(leftLum), 
	0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x72, 0x44, 0x65, 0x73, // leftDesat);.rDes
	0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x72, 0x43, 0x6f, 0x6c, // atCol = mix(rCol
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x72, 0x69, 0x67, // , vec3_splat(rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x73, // htLum), rightDes
	0x61, 0x74, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x4c, 0x69, 0x6e, 0x65, // at);.}.vec3 Line
	0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, // arAnaglyph(const
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, //  vec3 lCol, cons
	0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, // t vec3 rCol).{.c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, // onst vec3 color 
	0x3d, 0x20, 0x28, 0x28, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, // = (( (vec4(lCol,
	0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, //  1.)) * (Stereo_
	0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x20, 0x28, // LeftMat) ) + ( (
	0x76, 0x65, 0x63, 0x34, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, // vec4(rCol, 1.)) 
	0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, // * (Stereo_RightM
	0x61, 0x74, 0x29, 0x20, 0x29, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // at) )).rgb;.retu
	0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, // rn color;.}.unif
	0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // orm vec4 Stereo_
	0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, 0x6e, // DeghostGamma;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // iform mat4 Stere
	0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3b, // o_DeghostFilter;
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x6e, 0x61, // .vec3 DeghostAna
	0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, // glyph(const vec3
	0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, //  lCol, const vec
	0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // 3 rCol).{.const 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, 0x6e, // vec3 color = Lin
	0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, // earAnaglyph(lCol
	0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // , rCol);.return 
	0x28, 0x20, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x53, 0x74, // ( (pow(color, St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, // ereo_DeghostGamm
	0x61, 0x2e, 0x72, 0x67, 0x62, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, // a.rgb)) * (mat3(
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, // Stereo_DeghostFi
	0x6c, 0x74, 0x65, 0x72, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, // lter[0].xyz, Ste
	0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, // reo_DeghostFilte
	0x72, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // r[1].xyz, Stereo
	0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x32, // _DeghostFilter[2
	0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, // ].xyz)) );.}.voi
	0x64, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x67, 0x6c, 0x5f, 0x46, 0x72, // d main().{.gl_Fr
	0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x67, // agColor = vec4(g
	0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x76, 0x5f, // atherEyeColor(v_
	0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2c, 0x20, 0x66, 0x72, 0x61, 0x63, 0x28, // texcoord0, frac(
	0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x2e, 0x79, 0x2a, 0x30, // gl_FragCoord.y*0
	0x2e, 0x35, 0x29, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, // .5) < 0.5), 1.0)
	0x3b, 0x0a, 0x7d, 0x0a, 0x00,                                                                   // ;.}..
};
static const uint8_t fs_pp_stereo_int_st_dx11[602] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x0d, 0x74, // FSH.Jc._.......t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x30, 0x01, 0x00, 0x00, // ex_stereo_fb0...
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // .......tex_stere
	0x6f, 0x5f, 0x66, 0x62, 0x30, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x02, // o_fb0...........
	0x00, 0x00, 0x44, 0x58, 0x42, 0x43, 0x81, 0x46, 0x2e, 0x53, 0xf9, 0x3d, 0x15, 0xcc, 0x6b, 0xc6, // ..DXBC.F.S.=..k.
	0x86, 0x06, 0xbf, 0xc9, 0xf8, 0x50, 0x01, 0x00, 0x00, 0x00, 0x14, 0x02, 0x00, 0x00, 0x03, 0x00, // .....P..........
	0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x9c, 0x00, 0x00, 0x00, 0xd0, 0x00, 0x00, 0x00, 0x49, 0x53, // ..,...........IS
	0x47, 0x4e, 0x68, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x50, 0x00, // GNh...........P.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x0f, 0x02, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x5c, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, // ................
	0x00, 0x00, 0x06, 0x06, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, // ......SV_POSITIO
	0x4e, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0xab, 0xab, 0xab, 0x4f, 0x53, // N.TEXCOORD....OS
	0x47, 0x4e, 0x2c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x20, 0x00, // GN,........... .
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x00, // ......SV_TARGET.
	0xab, 0xab, 0x53, 0x48, 0x45, 0x58, 0x3c, 0x01, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x4f, 0x00, // ..SHEX<...P...O.
	0x00, 0x00, 0x6a, 0x08, 0x00, 0x01, 0x5a, 0x00, 0x00, 0x03, 0x00, 0x60, 0x10, 0x00, 0x00, 0x00, // ..j...Z....`....
	0x00, 0x00, 0x58, 0x40, 0x00, 0x04, 0x00, 0x70, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x55, // ..X@...p......UU
	0x00, 0x00, 0x64, 0x20, 0x00, 0x04, 0x22, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, // ..d ..".........
	0x00, 0x00, 0x62, 0x10, 0x00, 0x03, 0x62, 0x10, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x65, 0x00, // ..b...b.......e.
	0x00, 0x03, 0xf2, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x02, 0x01, 0x00, // ... ......h.....
	0x00, 0x00, 0x38, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x10, // ..8.............
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x1a, 0x00, // .......@.....?..
	0x00, 0x05, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x31, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, // ..1.............
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x37, 0x00, // .......@.....?7.
	0x00, 0x09, 0x42, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, // ..B.............
	0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, // ...@.......@....
	0x80, 0x3f, 0x36, 0x00, 0x00, 0x05, 0x32, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x96, 0x15, // .?6...2.........
	0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0x02, 0x02, 0x00, 0x80, 0x43, 0x55, // ......H.......CU
	0x15, 0x00, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, // ..r.......F.....
	0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x00, 0x00, // ..F~.......`....
	0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x72, 0x20, // ...@......6...r 
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, // ......F.......6.
	0x00, 0x05, 0x82, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, // ... .......@....
	0x80, 0x3f, 0x3e, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,                                     // .?>.......
};
static const uint8_t fs_pp_stereo_int_st_spv[1198] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0d, 0x74, // FSH.Jc._.......t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x30, 0x00, 0x02, 0x00, // ex_stereo_fb0...
	0x00, 0x00, 0x00, 0x03, 0x22, 0x00, 0x80, 0x04, 0x00, 0x00, 0x03, 0x02, 0x23, 0x07, 0x00, 0x00, // ....".......#...
	0x01, 0x00, 0x0b, 0x00, 0x08, 0x00, 0xdd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, // ................
	0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, 0x4c, // ..............GL
	0x53, 0x4c, 0x2e, 0x73, 0x74, 0x64, 0x2e, 0x34, 0x35, 0x30, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, // SL.std.450......
	0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x08, 0x00, 0x04, 0x00, // ................
	0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x77, 0x00, // ......main....w.
	0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x8c, 0x00, 0x00, 0x00, 0x10, 0x00, 0x03, 0x00, 0x04, 0x00, // ................
	0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x03, 0x00, 0x03, 0x00, 0x05, 0x00, 0x00, 0x00, 0xf4, 0x01, // ................
	0x00, 0x00, 0x05, 0x00, 0x04, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, // ..........main..
	0x00, 0x00, 0x05, 0x00, 0x08, 0x00, 0x2d, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // ......-...tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x00, 0x00, // ereo_fbSampler..
	0x00, 0x00, 0x05, 0x00, 0x08, 0x00, 0x30, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // ......0...tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x00, 0x00, // ereo_fbTexture..
	0x00, 0x00, 0x05, 0x00, 0x06, 0x00, 0x77, 0x00, 0x00, 0x00, 0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, // ......w...gl_Fra
	0x67, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x05, 0x00, 0x7f, 0x00, // gCoord..........
	0x00, 0x00, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x00, 0x05, 0x00, // ..v_texcoord0...
	0x06, 0x00, 0x8c, 0x00, 0x00, 0x00, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, // ......bgfx_FragD
	0x61, 0x74, 0x61, 0x30, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x2d, 0x00, 0x00, 0x00, 0x22, 0x00, // ata0..G...-...".
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x2d, 0x00, 0x00, 0x00, 0x21, 0x00, // ......G...-...!.
	0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x30, 0x00, 0x00, 0x00, 0x22, 0x00, // ......G...0...".
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x30, 0x00, 0x00, 0x00, 0x21, 0x00, // ......G...0...!.
	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x77, 0x00, 0x00, 0x00, 0x0b, 0x00, // ......G...w.....
	0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x1e, 0x00, // ......G.........
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x8c, 0x00, 0x00, 0x00, 0x1e, 0x00, // ......G.........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x21, 0x00, // ..............!.
	0x03, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x02, 0x00, 0x06, 0x00, // ................
	0x00, 0x00, 0x16, 0x00, 0x03, 0x00, 0x07, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x19, 0x00, // .......... .....
	0x09, 0x00, 0x08, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x03, 0x00, // ................
	0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x04, 0x00, // ................
	0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x19, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x02, 0x00, // ................
	0x00, 0x00, 0x14, 0x00, 0x02, 0x00, 0x1b, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x2c, 0x00, // .......... ...,.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x2c, 0x00, // ..........;...,.
	0x00, 0x00, 0x2d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x2f, 0x00, // ..-....... .../.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x2f, 0x00, // ..........;.../.
	0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x03, 0x00, 0x42, 0x00, // ..0...........B.
	0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x58, 0x00, // ......+.......X.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x59, 0x00, // ......+.......Y.
	0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x69, 0x00, // .....?+.......i.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x20, 0x00, 0x04, 0x00, 0x76, 0x00, 0x00, 0x00, 0x01, 0x00, // .....? ...v.....
	0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x76, 0x00, 0x00, 0x00, 0x77, 0x00, // ......;...v...w.
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x01, 0x00, // ...... ...~.....
	0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x7f, 0x00, // ......;...~.....
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x8b, 0x00, 0x00, 0x00, 0x03, 0x00, // ...... .........
	0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x8b, 0x00, 0x00, 0x00, 0x8c, 0x00, // ......;.........
	0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x36, 0x00, 0x05, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, // ......6.........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x05, 0x00, // ................
	0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x2d, 0x00, // ..=...........-.
	0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x08, 0x00, 0x00, 0x00, 0x31, 0x00, 0x00, 0x00, 0x30, 0x00, // ..=.......1...0.
	0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x77, 0x00, // ..=.......x...w.
	0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x19, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x7f, 0x00, // ..=.............
	0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xb3, 0x00, 0x00, 0x00, 0x78, 0x00, // ..Q...........x.
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xb4, 0x00, // ................
	0x00, 0x00, 0xb3, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x06, 0x00, 0x07, 0x00, // ......i.........
	0x00, 0x00, 0xb5, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0xb4, 0x00, // ................
	0x00, 0x00, 0xb8, 0x00, 0x05, 0x00, 0x1b, 0x00, 0x00, 0x00, 0xb6, 0x00, 0x00, 0x00, 0xb5, 0x00, // ................
	0x00, 0x00, 0x69, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xca, 0x00, // ..i...Q.........
	0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, // ..........Q.....
	0x00, 0x00, 0xcc, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xa9, 0x00, // ................
	0x06, 0x00, 0x07, 0x00, 0x00, 0x00, 0xce, 0x00, 0x00, 0x00, 0xb6, 0x00, 0x00, 0x00, 0x58, 0x00, // ..............X.
	0x00, 0x00, 0x59, 0x00, 0x00, 0x00, 0x50, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xcf, 0x00, // ..Y...P.........
	0x00, 0x00, 0xca, 0x00, 0x00, 0x00, 0xcc, 0x00, 0x00, 0x00, 0xce, 0x00, 0x00, 0x00, 0x56, 0x00, // ..............V.
	0x05, 0x00, 0x42, 0x00, 0x00, 0x00, 0xd9, 0x00, 0x00, 0x00, 0x31, 0x00, 0x00, 0x00, 0x2e, 0x00, // ..B.......1.....
	0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xdc, 0x00, 0x00, 0x00, 0xd9, 0x00, // ..X.............
	0x00, 0x00, 0xcf, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x58, 0x00, 0x00, 0x00, 0x51, 0x00, // ..........X...Q.
	0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xb9, 0x00, 0x00, 0x00, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xba, 0x00, 0x00, 0x00, 0xdc, 0x00, // ..Q.............
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xbb, 0x00, // ......Q.........
	0x00, 0x00, 0xdc, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x50, 0x00, 0x07, 0x00, 0x0e, 0x00, // ..........P.....
	0x00, 0x00, 0xbc, 0x00, 0x00, 0x00, 0xb9, 0x00, 0x00, 0x00, 0xba, 0x00, 0x00, 0x00, 0xbb, 0x00, // ................
	0x00, 0x00, 0x59, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x03, 0x00, 0x8c, 0x00, 0x00, 0x00, 0xbc, 0x00, // ..Y...>.........
	0x00, 0x00, 0xfd, 0x00, 0x01, 0x00, 0x38, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,             // ......8.......
};
static const bgfx::EmbeddedShader fs_pp_stereo_int_st = BGFX_EMBEDDED_SHADER(fs_pp_stereo_int_st);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Build of fragment shader from fs_pp_stereo.sc to fs_pp_stereo_flipped_int_st with options: FLIPPED_INT STEREO
static const uint8_t fs_pp_stereo_flipped_int_st_mtl[856] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x14, 0x74, // FSH.Jc._.......t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, // ex_stereo_fbSamp
	0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x74, 0x65, // ler...........te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x54, 0x65, 0x78, 0x74, 0x75, // x_stereo_fbTextu
	0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x74, 0x65, 0x78, // re...........tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, // _stereo_depthSam
	0x70, 0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x74, // pler...........t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x54, // ex_stereo_depthT
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, // exture..........
	0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x10, 0x00, // .tex_stereo_fb..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa8, 0x02, 0x00, 0x00, 0x23, 0x69, 0x6e, 0x63, // ............#inc
	0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x64, 0x6c, // lude <metal_stdl
	0x69, 0x62, 0x3e, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x73, 0x69, // ib>.#include <si
	0x6d, 0x64, 0x2f, 0x73, 0x69, 0x6d, 0x64, 0x2e, 0x68, 0x3e, 0x0a, 0x0a, 0x75, 0x73, 0x69, 0x6e, // md/simd.h>..usin
	0x67, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x6d, 0x65, 0x74, 0x61, // g namespace meta
	0x6c, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, // l;..struct xlatM
	0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, // tlMain_out.{.   
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, //  float4 bgfx_Fra
	0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x20, 0x5b, 0x5b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x30, // gData0 [[color(0
	0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, // )]];.};..struct 
	0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x0a, 0x7b, // xlatMtlMain_in.{
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, // .    float2 v_te
	0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x5b, 0x5b, 0x75, 0x73, 0x65, 0x72, 0x28, 0x6c, // xcoord0 [[user(l
	0x6f, 0x63, 0x6e, 0x31, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x66, 0x72, 0x61, // ocn1)]];.};..fra
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, // gment xlatMtlMai
	0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, // n_out xlatMtlMai
	0x6e, 0x28, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, // n(xlatMtlMain_in
	0x20, 0x69, 0x6e, 0x20, 0x5b, 0x5b, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x5d, 0x5d, //  in [[stage_in]]
	0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x61, // , texture2d_arra
	0x79, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3e, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, // y<float> tex_ste
	0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // reo_fb [[texture
	0x28, 0x30, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x74, // (0)]], sampler t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, // ex_stereo_fbSamp
	0x6c, 0x65, 0x72, 0x20, 0x5b, 0x5b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x30, 0x29, // ler [[sampler(0)
	0x5d, 0x5d, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x67, 0x6c, 0x5f, 0x46, 0x72, // ]], float4 gl_Fr
	0x61, 0x67, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x20, 0x5b, 0x5b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, // agCoord [[positi
	0x6f, 0x6e, 0x5d, 0x5d, 0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x78, 0x6c, 0x61, 0x74, // on]]).{.    xlat
	0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x6f, 0x75, 0x74, 0x20, // MtlMain_out out 
	0x3d, 0x20, 0x7b, 0x7d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, // = {};.    float3
	0x20, 0x5f, 0x32, 0x30, 0x34, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x69, //  _204 = float3(i
	0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2c, 0x20, 0x28, // n.v_texcoord0, (
	0x66, 0x72, 0x61, 0x63, 0x74, 0x28, 0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6f, // fract(gl_FragCoo
	0x72, 0x64, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x20, 0x3e, 0x3d, 0x20, 0x30, // rd.y * 0.5) >= 0
	0x2e, 0x35, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x30, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x30, 0x29, // .5) ? 0.0 : 1.0)
	0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x6f, 0x75, 0x74, 0x2e, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, // ;.    out.bgfx_F
	0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // ragData0 = float
	0x34, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2e, // 4(tex_stereo_fb.
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // sample(tex_stere
	0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x32, 0x30, // o_fbSampler, _20
	0x34, 0x2e, 0x78, 0x79, 0x2c, 0x20, 0x75, 0x69, 0x6e, 0x74, 0x28, 0x72, 0x69, 0x6e, 0x74, 0x28, // 4.xy, uint(rint(
	0x5f, 0x32, 0x30, 0x34, 0x2e, 0x7a, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, // _204.z)), level(
	0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, // 0.0)).xyz, 1.0);
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6f, 0x75, 0x74, 0x3b, // .    return out;
	0x0a, 0x7d, 0x0a, 0x0a, 0x00, 0x00, 0x40, 0x00,                                                 // .}....@.
};
static const uint8_t fs_pp_stereo_flipped_int_st_essl[8982] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x23, // FSH.Jc._.......#
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x33, 0x32, 0x30, 0x20, 0x65, // ..#version 320 e
	0x73, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, // s.#define attrib
	0x75, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x76, // ute in.#define v
	0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, // arying in.precis
	0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3b, // ion highp float;
	0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, // .precision highp
	0x20, 0x69, 0x6e, 0x74, 0x3b, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, //  int;.precision 
	0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, // highp sampler2DA
	0x72, 0x72, 0x61, 0x79, 0x3b, 0x0a, 0x23, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, // rray;.#extension
	0x20, 0x47, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x74, //  GL_EXT_shader_t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6c, 0x6f, 0x64, 0x20, 0x3a, 0x20, 0x65, 0x6e, 0x61, // exture_lod : ena
	0x62, 0x6c, 0x65, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, // ble.#define text
	0x75, 0x72, 0x65, 0x32, 0x44, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, // ure2DLod      te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x4c, 0x6f, 0x64, 0x45, 0x58, 0x54, 0x0a, 0x23, 0x64, // xture2DLodEXT.#d
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x47, // efine texture2DG
	0x72, 0x61, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, // rad     texture2
	0x44, 0x47, 0x72, 0x61, 0x64, 0x45, 0x58, 0x54, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, // DGradEXT.#define
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x4c, 0x6f, //  texture2DProjLo
	0x64, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, // d  texture2DProj
	0x4c, 0x6f, 0x64, 0x45, 0x58, 0x54, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, // LodEXT.#define t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, // exture2DProjGrad
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, //  texture2DProjGr
	0x61, 0x64, 0x45, 0x58, 0x54, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, // adEXT.#define te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, // xtureCubeLod    
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x4c, 0x6f, 0x64, 0x45, 0x58, // textureCubeLodEX
	0x54, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // T.#define textur
	0x65, 0x43, 0x75, 0x62, 0x65, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, // eCubeGrad   text
	0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x47, 0x72, 0x61, 0x64, 0x45, 0x58, 0x54, 0x0a, 0x23, // ureCubeGradEXT.#
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x28, // define shadow2D(
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, // _sampler, _coord
	0x29, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, // ) texture(_sampl
	0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x0a, 0x23, 0x64, 0x65, 0x66, // er, _coord).#def
	0x69, 0x6e, 0x65, 0x20, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, // ine shadow2DProj
	0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, // (_sampler, _coor
	0x64, 0x29, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, // d) textureProj(_
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, // sampler, _coord)
	0x0a, 0x23, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x47, 0x4c, 0x5f, 0x45, // .#extension GL_E
	0x58, 0x54, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, // XT_texture_array
	0x20, 0x3a, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x0a, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x65, //  : enable.out me
	0x64, 0x69, 0x75, 0x6d, 0x70, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, // diump vec4 bgfx_
	0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, // FragColor;.varyi
	0x6e, 0x67, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x5f, 0x65, 0x79, 0x65, 0x3b, 0x0a, // ng float v_eye;.
	0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x5f, 0x74, // varying vec2 v_t
	0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, // excoord0;.vec3 i
	0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, // nstMul(vec3 _vec
	0x2c, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, // , mat3 _mtx) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, // eturn ( (_vec) *
	0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, //  (_mtx) ); }.vec
	0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, // 3 instMul(mat3 _
	0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, // mtx, vec3 _vec) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, // { return ( (_mtx
	0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, // ) * (_vec) ); }.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, // vec4 instMul(vec
	0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, // 4 _vec, mat4 _mt
	0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, // x) { return ( (_
	0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, // vec) * (_mtx) );
	0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, //  }.vec4 instMul(
	0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // mat4 _mtx, vec4 
	0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // _vec) { return (
	0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, //  (_mtx) * (_vec)
	0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, 0x70, 0x28, //  ); }.float rcp(
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // float _a) { retu
	0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, // rn 1.0/_a; }.vec
	0x32, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, // 2 rcp(vec2 _a) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, //  return vec2(1.0
	0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x70, // )/_a; }.vec3 rcp
	0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // (vec3 _a) { retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, // rn vec3(1.0)/_a;
	0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x34, //  }.vec4 rcp(vec4
	0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, //  _a) { return ve
	0x63, 0x34, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, // c4(1.0)/_a; }.ve
	0x63, 0x32, 0x20, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, // c2 vec2_splat(fl
	0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // oat _x) { return
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, //  vec2(_x, _x); }
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, // .vec3 vec3_splat
	0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // (float _x) { ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, // urn vec3(_x, _x,
	0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, 0x65, 0x63, //  _x); }.vec4 vec
	0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, // 4_splat(float _x
	0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, // ) { return vec4(
	0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, // _x, _x, _x, _x);
	0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, //  }.uvec2 uvec2_s
	0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, // plat(uint _x) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, // return uvec2(_x,
	0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, 0x75, 0x76, //  _x); }.uvec3 uv
	0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, // ec3_splat(uint _
	0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, // x) { return uvec
	0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, // 3(_x, _x, _x); }
	0x0a, 0x75, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, // .uvec4 uvec4_spl
	0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // at(uint _x) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, // turn uvec4(_x, _
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x6d, 0x61, // x, _x, _x); }.ma
	0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, // t4 mtxFromRows(v
	0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, // ec4 _0, vec4 _1,
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, //  vec4 _2, vec4 _
	0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, // 3).{.return tran
	0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, // spose(mat4(_0, _
	0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // 1, _2, _3) );.}.
	0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, // mat4 mtxFromCols
	0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, // (vec4 _0, vec4 _
	0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // 1, vec4 _2, vec4
	0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, //  _3).{.return ma
	0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, // t4(_0, _1, _2, _
	0x33, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, // 3);.}.mat3 mtxFr
	0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, // omRows(vec3 _0, 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, // vec3 _1, vec3 _2
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, // ).{.return trans
	0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, // pose(mat3(_0, _1
	0x2c, 0x20, 0x5f, 0x32, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, // , _2) );.}.mat3 
	0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, // mtxFromCols(vec3
	0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, //  _0, vec3 _1, ve
	0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // c3 _2).{.return 
	0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, // mat3(_0, _1, _2)
	0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, // ;.}.uniform vec4
	0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, //  u_viewRect;.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, // form vec4 u_view
	0x54, 0x65, 0x78, 0x65, 0x6c, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, // Texel;.uniform m
	0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // at4 u_view;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, // orm mat4 u_invVi
	0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, // ew;.uniform mat4
	0x20, 0x75, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, //  u_proj;.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, 0x6a, 0x3b, //  mat4 u_invProj;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, // .uniform mat4 u_
	0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // viewProj;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, // m mat4 u_invView
	0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, // Proj;.uniform ma
	0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, 0x3b, 0x0a, // t4 u_model[32];.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, // uniform mat4 u_m
	0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // odelView;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, // m mat4 u_modelVi
	0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // ewProj;.uniform 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x66, 0x34, // vec4 u_alphaRef4
	0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, // ;.float sqr(cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // t float v).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, // urn v*v;.}.vec2 
	0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, // sqr(const vec2 v
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, // ).{.return v*v;.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, // }.vec3 sqr(const
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, //  vec3 v).{.retur
	0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6d, 0x75, // n v*v;.}.vec3 mu
	0x6c, 0x5f, 0x77, 0x31, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // l_w1(const vec3 
	0x76, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x29, // v, const mat4 m)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2e, 0x78, 0x2a, 0x6d, 0x5b, // .{.return v.x*m[
	0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x79, 0x2a, 0x6d, 0x5b, // 0].xyz + (v.y*m[
	0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x7a, 0x2a, 0x6d, 0x5b, // 1].xyz + (v.z*m[
	0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x6d, 0x5b, 0x33, 0x5d, 0x2e, 0x78, 0x79, // 2].xyz + m[3].xy
	0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x63, 0x6f, // z));.}.float aco
	0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x63, // s_approx_divPI(c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, // onst float v).{.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, // const float x = 
	0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, // abs(v);.if(1. - 
	0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, // x <= 0.000061035
	0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, // 15625).return (v
	0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x20, 0x3a, 0x20, 0x31, //  >= 0.) ? 0. : 1
	0x2e, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, // .;.const float r
	0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, // es = ((-0.155972
	0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, // /3.1415926535897
	0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, // 9323846264338327
	0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, // 95) * x + (1.564
	0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, // 67/3.14159265358
	0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, // 9793238462643383
	0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, // 2795) ) * sqrt(1
	0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // . - x);.return (
	0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, // v >= 0.) ? res :
	0x20, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, //  1. - res;.}.flo
	0x61, 0x74, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, // at atan2_approx_
	0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, // div2PI(const flo
	0x61, 0x74, 0x20, 0x79, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, // at y, const floa
	0x74, 0x20, 0x78, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, // t x).{.const flo
	0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x79, // at abs_y = abs(y
	0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, // );.const float a
	0x62, 0x73, 0x5f, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x78, 0x29, 0x3b, 0x0a, 0x69, // bs_x = abs(x);.i
	0x66, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, // f(abs_x <= 0.000
	0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x20, 0x26, 0x26, 0x20, 0x61, // 06103515625 && a
	0x62, 0x73, 0x5f, 0x79, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, // bs_y <= 0.000061
	0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // 03515625).return
	0x20, 0x30, 0x2e, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, //  0.;.const float
	0x20, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2d, 0x20, 0x61, 0x62, //  r = (abs_x - ab
	0x73, 0x5f, 0x79, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2b, 0x20, // s_y) / (abs_x + 
	0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // abs_y);.const fl
	0x6f, 0x61, 0x74, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x78, 0x20, // oat angle = ((x 
	0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x28, 0x33, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x20, // < 0.) ? (3./8.) 
	0x3a, 0x20, 0x28, 0x31, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x29, 0x0a, 0x2b, 0x20, 0x28, 0x30, 0x2e, // : (1./8.)).+ (0.
	0x32, 0x31, 0x31, 0x38, 0x36, 0x38, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, // 211868 /(2.*3.14
	0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, // 1592653589793238
	0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, // 4626433832795) *
	0x20, 0x72, 0x20, 0x2a, 0x20, 0x72, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x39, 0x38, 0x37, 0x33, 0x30, //  r * r - 0.98730
	0x35, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, // 5 /(2.*3.1415926
	0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, // 5358979323846264
	0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x78, // 33832795)) * ((x
	0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x72, 0x20, 0x3a, 0x20, 0x72, 0x29, //  < 0.) ? -r : r)
	0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x79, 0x20, 0x3c, 0x20, 0x30, 0x2e, // ;.return (y < 0.
	0x29, 0x20, 0x3f, 0x20, 0x2d, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3a, 0x20, 0x61, 0x6e, 0x67, // ) ? -angle : ang
	0x6c, 0x65, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x73, 0x69, 0x6e, // le;.}.float asin
	0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x63, 0x6f, // _approx_divPI(co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x63, // nst float v).{.c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, // onst float x = a
	0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, // bs(v);.if(1. - x
	0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, //  <= 0.0000610351
	0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, // 5625).return (v 
	0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x3a, 0x20, 0x2d, // >= 0.) ? 0.5 : -
	0x30, 0x2e, 0x35, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // 0.5;.const float
	0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, //  res = ((-0.1559
	0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, // 72/3.14159265358
	0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, // 9793238462643383
	0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, // 2795) * x + (1.5
	0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, // 6467/3.141592653
	0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, // 5897932384626433
	0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, // 832795) ) * sqrt
	0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // (1. - x);.return
	0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, //  (v >= 0.) ? 0.5
	0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, //  - res : -0.5 + 
	0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x61, 0x79, 0x5f, // res;.}.vec2 ray_
	0x74, 0x6f, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x75, 0x6c, // to_equirectangul
	0x61, 0x72, 0x5f, 0x75, 0x76, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, // ar_uv(const vec3
	0x20, 0x72, 0x61, 0x79, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, //  ray).{.return v
	0x65, 0x63, 0x32, 0x28, 0x0a, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, // ec2(.0.5 + atan2
	0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x72, // _approx_div2PI(r
	0x61, 0x79, 0x2e, 0x79, 0x2c, 0x20, 0x72, 0x61, 0x79, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x61, 0x63, // ay.y, ray.x),.ac
	0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, // os_approx_divPI(
	0x72, 0x61, 0x79, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // ray.z));.}.float
	0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, //  InvsRGB(const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, // loat color).{.if
	0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, //  (color <= 0.040
	0x34, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // 45).return color
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x29, 0x3b, 0x0a, //  * (1.0/12.92);.
	0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, // else.return pow(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, // color * (1.0/1.0
	0x35, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x2f, 0x31, 0x2e, 0x30, // 55) + (0.055/1.0
	0x35, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // 55), 2.4);.}.flo
	0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x63, 0x6f, 0x6e, // at InvRec709(con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, // st float color).
	0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, // {.if (color <= 0
	0x2e, 0x30, 0x38, 0x31, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, // .081).return col
	0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x34, 0x2e, 0x35, 0x29, 0x3b, 0x0a, // or * (1.0/4.5);.
	0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, // else.return pow(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, // color * (1.0/1.0
	0x39, 0x39, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x2f, 0x31, 0x2e, 0x30, // 99) + (0.099/1.0
	0x39, 0x39, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x3b, 0x0a, // 99), 1.0/0.45);.
	0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, // }.float InvGamma
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, // (const float col
	0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x49, 0x6e, 0x76, // or).{.return Inv
	0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // sRGB(color);.}.v
	0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, // ec3 InvGamma(con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, // st vec3 color).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x49, 0x6e, 0x76, // .return vec3(Inv
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x49, // Gamma(color.x),I
	0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, // nvGamma(color.y)
	0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, // ,InvGamma(color.
	0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x54, // z));.}.vec3 InvT
	0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, // oneMap(const vec
	0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, // 3 color).{.const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x20, 0x3d, //  float inv_2bh =
	0x20, 0x30, 0x2e, 0x35, 0x2f, 0x30, 0x2e, 0x32, 0x35, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, //  0.5/0.25;.const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x34, 0x2e, 0x30, 0x2a, //  float bh = 4.0*
	0x30, 0x2e, 0x32, 0x35, 0x20, 0x2d, 0x20, 0x32, 0x2e, 0x30, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // 0.25 - 2.0;.retu
	0x72, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, // rn (color - 1.0 
	0x2b, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2a, 0x28, 0x63, 0x6f, // + sqrt(color*(co
	0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x20, 0x62, 0x68, 0x29, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, // lor + bh) + 1.0)
	0x29, 0x2a, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // )*inv_2bh;.}.flo
	0x61, 0x74, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // at sRGB(const fl
	0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, // oat f).{.float s
	0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x33, // ;.if (f <= 0.003
	0x31, 0x33, 0x30, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x20, // 1308).s = 12.92 
	0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, // * f;.else.s = 1.
	0x30, 0x35, 0x35, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x31, 0x2e, 0x30, // 055 * pow(f, 1.0
	0x2f, 0x32, 0x2e, 0x34, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x3b, 0x0a, 0x72, // /2.4) - 0.055;.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // eturn s;.}.float
	0x20, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, //  Rec709(const fl
	0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, // oat f).{.float s
	0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, // ;.if (f <= 0.018
	0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x34, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, // ).s = 4.5 * f;.e
	0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x20, 0x2a, 0x20, // lse.s = 1.099 * 
	0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x20, 0x2d, 0x20, 0x30, // pow(f, 0.45) - 0
	0x2e, 0x30, 0x39, 0x39, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, // .099;.return s;.
	0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, // }.float FBGamma(
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // const float colo
	0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x52, 0x47, 0x42, // r).{.return sRGB
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, // (color);.}.vec2 
	0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // FBGamma(const ve
	0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, // c2 color).{.retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, // rn vec2(FBGamma(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, // color.x),FBGamma
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // (color.y));.}.ve
	0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, // c3 FBGamma(const
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, //  vec3 color).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, // eturn vec3(FBGam
	0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, // ma(color.x),FBGa
	0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x46, 0x42, 0x47, // mma(color.y),FBG
	0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, // amma(color.z));.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x32, 0x32, // }.vec3 FBGamma22
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // (const vec3 colo
	0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, // r).{.return vec3
	0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x2c, 0x20, 0x31, 0x2e, // (pow(color.x, 1.
	0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // 0/2.2),pow(color
	0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, // .y, 1.0/2.2),pow
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, // (color.z, 1.0/2.
	0x32, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x54, // 2));.}.float FBT
	0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, // oneMap(const flo
	0x61, 0x74, 0x20, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6c, // at l).{.return l
	0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, //  * ((l*0.25 + 1.
	0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, // 0) / (l + 1.0));
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, // .}.vec2 FBToneMa
	0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, // p(const vec2 col
	0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, // or).{.const floa
	0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, // t l = dot(color,
	0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2b, 0x30, 0x2e, // vec2(0.176204+0.
	0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x2c, 0x30, 0x2e, 0x38, 0x31, // 0108109*0.5,0.81
	0x32, 0x39, 0x38, 0x35, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, // 2985+0.0108109*0
	0x2e, 0x35, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, // .5));.return col
	0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, // or * ((l*0.25 + 
	0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, // 1.0) / (l + 1.0)
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, // );.}.vec3 FBTone
	0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, // Map(const vec3 c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // olor).{.const fl
	0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // oat l = dot(colo
	0x72, 0x2c, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2c, // r,vec3(0.176204,
	0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2c, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, // 0.812985,0.01081
	0x30, 0x39, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, // 09));.return col
	0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, // or * ((l*0.25 + 
	0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, // 1.0) / (l + 1.0)
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, // );.}.vec4 Additi
	0x76, 0x65, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // ve(const vec4 cB
	0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // ase, const vec4 
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // cBlend, const fl
	0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, // oat percent).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2b, 0x20, 0x63, 0x42, // eturn cBase + cB
	0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, // lend*percent;.}.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6e, // vec3 Screen (con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, // st vec3 cBase, c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, // onst vec3 cBlend
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, // ).{.return 1.0 -
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, //  (1.0 - cBase) *
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, //  (1.0 - cBlend);
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, // .}.vec4 Screen (
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, // const vec4 cBase
	0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, // , const vec4 cBl
	0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, // end).{.return 1.
	0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, // 0 - (1.0 - cBase
	0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // ) * (1.0 - cBlen
	0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, // d);.}.vec3 Scree
	0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, // nHDR (const vec3
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, //  cBase, const ve
	0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // c3 cBlend).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, // urn max(1.0 - (1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, // .0 - cBase) * (1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, // .0 - cBlend), ve
	0x63, 0x33, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, // c3(0.,0.,0.));.}
	0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, // .vec4 ScreenHDR 
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, // (const vec4 cBas
	0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // e, const vec4 cB
	0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, // lend).{.return m
	0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, // ax(1.0 - (1.0 - 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, // cBase) * (1.0 - 
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, // cBlend), vec4(0.
	0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // ,0.,0.,0.));.}.v
	0x65, 0x63, 0x34, 0x20, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x20, 0x28, 0x63, 0x6f, // ec4 Multiply (co
	0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, // nst vec4 cBase, 
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // const vec4 cBlen
	0x64, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, // d, const float p
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // ercent).{.return
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2a, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, //  cBase * cBlend*
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, // percent;.}.vec4 
	0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, // Overlay (const v
	0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, // ec4 cBase, const
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, //  vec4 cBlend).{.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, // vec4 cNew = step
	0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, // (0.5, cBase);.cN
	0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, // ew = mix(cBase*c
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, // Blend*2.0, 1.0-2
	0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, // .0*(1.0-cBase)*(
	0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, // 1.0-cBlend), cNe
	0x77, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, // w);.return cNew;
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x48, // .}.vec4 OverlayH
	0x44, 0x52, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, // DR (const vec4 c
	0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, // Base, const vec4
	0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, //  cBlend).{.vec4 
	0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, // cNew = step(0.5,
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, //  cBase);.cNew = 
	0x6d, 0x61, 0x78, 0x28, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, // max(mix(cBase*cB
	0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, // lend*2.0, 1.0-2.
	0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, // 0*(1.0-cBase)*(1
	0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, // .0-cBlend), cNew
	0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, // ), vec4(0.,0.,0.
	0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, // ,0.));.return cN
	0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x73, 0x5f, 0x68, // ew;.}.vec3 cos_h
	0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // emisphere_sample
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x29, 0x0a, 0x7b, // (const vec2 t).{
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x68, 0x69, // .const float phi
	0x20, 0x3d, 0x20, 0x74, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x28, 0x32, 0x2e, 0x30, 0x2a, 0x33, 0x2e, //  = t.y * (2.0*3.
	0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, // 1415926535897932
	0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, // 384626433832795)
	0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, // ;.const float co
	0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, // sTheta = sqrt(1.
	0x30, 0x20, 0x2d, 0x20, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // 0 - t.x);.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, // float sinTheta =
	0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, //  sqrt(t.x);.floa
	0x74, 0x20, 0x73, 0x70, 0x2c, 0x63, 0x70, 0x3b, 0x0a, 0x73, 0x69, 0x6e, 0x63, 0x6f, 0x73, 0x28, // t sp,cp;.sincos(
	0x70, 0x68, 0x69, 0x2c, 0x73, 0x70, 0x2c, 0x63, 0x70, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // phi,sp,cp);.retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x63, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, // rn vec3(cp * sin
	0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, // Theta, cosTheta,
	0x20, 0x73, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x29, 0x3b, //  sp * sinTheta);
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, // .}.vec3 rotate_t
	0x6f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x28, 0x63, // o_vector_upper(c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x63, // onst vec3 vec, c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, // onst vec3 normal
	0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, // ).{.if(normal.y 
	0x3e, 0x20, 0x2d, 0x30, 0x2e, 0x39, 0x39, 0x39, 0x39, 0x39, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, // > -0.99999).{.co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x20, 0x3d, 0x20, 0x31, 0x2e, // nst float h = 1.
	0x30, 0x2f, 0x28, 0x31, 0x2e, 0x30, 0x2b, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x29, // 0/(1.0+normal.y)
	0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, // ;.const float hz
	0x20, 0x3d, 0x20, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x3b, 0x0a, 0x63, //  = h*normal.z;.c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x3d, // onst float hzx =
	0x20, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x3b, 0x0a, 0x72, 0x65, //  hz*normal.x;.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x78, // turn vec3(.vec.x
	0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x7a, 0x2a, //  * (normal.y+hz*
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x29, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, // normal.z) + vec.
	0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, // y * normal.x - v
	0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, // ec.z * hzx,.vec.
	0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x2d, 0x20, 0x76, // y * normal.y - v
	0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, // ec.x * normal.x 
	0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, // - vec.z * normal
	0x2e, 0x7a, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, // .z,.vec.y * norm
	0x61, 0x6c, 0x2e, 0x7a, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x68, // al.z - vec.x * h
	0x7a, 0x78, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, // zx + vec.z * (no
	0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, // rmal.y+h*normal.
	0x78, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // x*normal.x));.}.
	0x65, 0x6c, 0x73, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x2d, 0x76, 0x65, 0x63, // else return -vec
	0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, // ;.}.uniform vec4
	0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x53, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, //  Stereo_Saturati
	0x6f, 0x6e, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, // on;.uniform vec4
	0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, //  Stereo_MS_ZPD_Y
	0x41, 0x78, 0x69, 0x73, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, // Axis;.uniform sa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x20, 0x74, 0x65, 0x78, // mpler2DArray tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // _stereo_fb;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, 0x72, 0x72, // orm sampler2DArr
	0x61, 0x79, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, // ay tex_stereo_de
	0x70, 0x74, 0x68, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, // pth;.uniform vec
	0x34, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, 0x76, 0x65, // 4 w_h_height;.ve
	0x63, 0x33, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, // c3 gatherEyeColo
	0x72, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x69, // r(vec2 u, bool i
	0x73, 0x4c, 0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // sLeft).{.return 
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x6f, // texture2DArrayLo
	0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, // d(tex_stereo_fb,
	0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, 0x20, //  vec3(u.x, u.y, 
	0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x30, 0x20, 0x3a, 0x20, 0x31, // isLeft ? 0.0 : 1
	0x2e, 0x30, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x7d, 0x0a, // .0), 0.).rgb;.}.
	0x76, 0x6f, 0x69, 0x64, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x52, // void gatherLeftR
	0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, // ightColors(vec2 
	0x75, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x63, 0x6f, 0x6c, // u, out vec3 lcol
	0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x6f, 0x6c, 0x29, // , out vec3 rcol)
	0x0a, 0x7b, 0x0a, 0x6c, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // .{.lcol = textur
	0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, // e2DArrayLod(tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, // stereo_fb, vec3(
	0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2c, 0x20, 0x30, // u.x, u.y, 0.), 0
	0x2e, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x72, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, // .).xyz;.rcol = t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x6f, 0x64, // exture2DArrayLod
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, // (tex_stereo_fb, 
	0x76, 0x65, 0x63, 0x33, 0x28, 0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, 0x20, 0x31, // vec3(u.x, u.y, 1
	0x2e, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, // .), 0.).xyz;.}.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, // niform mat4 Ster
	0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // eo_LeftMat;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // orm mat4 Stereo_
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // RightMat;.unifor
	0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, // m vec4 Stereo_Le
	0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, // ftLuminance_Gamm
	0x61, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // a;.uniform vec4 
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, // Stereo_RightLumi
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x3b, 0x0a, // nance_DynDesat;.
	0x76, 0x6f, 0x69, 0x64, 0x20, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x65, 0x73, 0x61, // void DynamicDesa
	0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // tAnaglyph(const 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, // vec3 lCol, const
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, //  vec3 rCol, out 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // vec3 lDesatCol, 
	0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, // out vec3 rDesatC
	0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, // ol).{.const floa
	0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, // t left2LeftLum =
	0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, //  dot(lCol, Stere
	0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, // o_LeftLuminance_
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // Gamma.xyz);.cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, // t float left2Rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, // htLum = dot(lCol
	0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // , Stereo_RightLu
	0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, // minance_DynDesat
	0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, // .xyz);.const flo
	0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // at right2LeftLum
	0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, //  = dot(rCol, Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, // reo_LeftLuminanc
	0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, // e_Gamma.xyz);.co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, // nst float right2
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, // RightLum = dot(r
	0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, // Col, Stereo_Righ
	0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, // tLuminance_DynDe
	0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // sat.xyz);.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, // float leftLum = 
	0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x6c, // left2LeftLum + l
	0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, 0x0a, 0x63, 0x6f, // eft2RightLum;.co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, // nst float rightL
	0x75, 0x6d, 0x20, 0x3d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, // um = right2LeftL
	0x75, 0x6d, 0x20, 0x2b, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, // um + right2Right
	0x4c, 0x75, 0x6d, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // Lum;.const float
	0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, //  leftDesat = Ste
	0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, // reo_RightLuminan
	0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, // ce_DynDesat.w * 
	0x61, 0x62, 0x73, 0x28, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, // abs((left2LeftLu
	0x6d, 0x20, 0x2d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // m - left2RightLu
	0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, // m) / (leftLum + 
	0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // 0.0001));.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, // float rightDesat
	0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, //  = Stereo_RightL
	0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, // uminance_DynDesa
	0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, // t.w * abs((right
	0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, // 2LeftLum - right
	0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x72, 0x69, // 2RightLum) / (ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, // ghtLum + 0.0001)
	0x29, 0x3b, 0x0a, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, // );.lDesatCol = m
	0x69, 0x78, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, // ix(lCol, vec3_sp
	0x6c, 0x61, 0x74, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, 0x6c, 0x65, // lat(leftLum), le
	0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x72, 0x44, 0x65, 0x73, 0x61, 0x74, // ftDesat);.rDesat
	0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // Col = mix(rCol, 
	0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, // vec3_splat(right
	0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, // Lum), rightDesat
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, // );.}.vec3 Linear
	0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, // Anaglyph(const v
	0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // ec3 lCol, const 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, // vec3 rCol).{.con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, // st vec3 color = 
	0x28, 0x28, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, // (( (vec4(lCol, 1
	0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, // .)) * (Stereo_Le
	0x66, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x20, 0x28, 0x76, 0x65, // ftMat) ) + ( (ve
	0x63, 0x34, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, // c4(rCol, 1.)) * 
	0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, // (Stereo_RightMat
	0x29, 0x20, 0x29, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // ) )).rgb;.return
	0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, //  color;.}.unifor
	0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, // m vec4 Stereo_De
	0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // ghostGamma;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // orm mat4 Stereo_
	0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3b, 0x0a, 0x76, // DeghostFilter;.v
	0x65, 0x63, 0x33, 0x20, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, // ec3 DeghostAnagl
	0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, // yph(const vec3 l
	0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // Col, const vec3 
	0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // rCol).{.const ve
	0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, // c3 color = Linea
	0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // rAnaglyph(lCol, 
	0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, // rCol);.return ( 
	0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, // (pow(color, Ster
	0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, // eo_DeghostGamma.
	0x72, 0x67, 0x62, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x53, 0x74, // rgb)) * (mat3(St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, // ereo_DeghostFilt
	0x65, 0x72, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // er[0].xyz, Stere
	0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, // o_DeghostFilter[
	0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, // 1].xyz, Stereo_D
	0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x32, 0x5d, 0x2e, // eghostFilter[2].
	0x78, 0x79, 0x7a, 0x29, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, // xyz)) );.}.void 
	0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, // main().{.bgfx_Fr
	0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x67, // agColor = vec4(g
	0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x76, 0x5f, // atherEyeColor(v_
	0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2c, 0x20, 0x66, 0x72, 0x61, 0x63, 0x28, // texcoord0, frac(
	0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x2e, 0x79, 0x2a, 0x30, // gl_FragCoord.y*0
	0x2e, 0x35, 0x29, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, // .5) >= 0.5), 1.0
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x00,                                                             // );.}..
};
static const uint8_t fs_pp_stereo_flipped_int_st_glsl[8966] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf3, 0x22, // FSH.Jc._......."
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x34, 0x34, 0x30, 0x0a, 0x6f, // ..#version 440.o
	0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, // ut vec4 bgfx_Fra
	0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, // gColor;.#define 
	0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x62, 0x67, 0x66, // gl_FragColor bgf
	0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x0a, 0x23, 0x64, 0x65, 0x66, // x_FragColor.#def
	0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x20, 0x20, 0x20, // ine texture2D   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x0a, 0x23, //        texture.#
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, // define texture2D
	0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // Lod       textur
	0x65, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, // eLod.#define tex
	0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ture2DGrad      
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, // textureGrad.#def
	0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, // ine texture2DPro
	0x6a, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, // jLod   texturePr
	0x6f, 0x6a, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, // ojLod.#define te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, 0x20, // xture2DProjGrad 
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, //  textureProjGrad
	0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // .#define texture
	0x43, 0x75, 0x62, 0x65, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, // CubeLod     text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, // ureLod.#define t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, // extureCubeGrad  
	0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, //   textureGrad.#d
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x33, 0x44, 0x20, // efine texture3D 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, //          texture
	0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // .#define texture
	0x32, 0x44, 0x4c, 0x6f, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x20, 0x74, 0x65, 0x78, 0x74, // 2DLodOffset text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x0a, 0x23, 0x64, 0x65, // ureLodOffset.#de
	0x66, 0x69, 0x6e, 0x65, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x69, // fine attribute i
	0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, // n.#define varyin
	0x67, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x62, 0x67, 0x66, // g in.#define bgf
	0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, // xShadow2D(_sampl
	0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, // er, _coord)     
	0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, // vec4_splat(textu
	0x72, 0x65, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, // re(_sampler, _co
	0x6f, 0x72, 0x64, 0x29, 0x20, 0x29, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x62, // ord) ).#define b
	0x67, 0x66, 0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x28, // gfxShadow2DProj(
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, // _sampler, _coord
	0x29, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, // ) vec4_splat(tex
	0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // tureProj(_sample
	0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x29, 0x0a, 0x76, 0x61, 0x72, // r, _coord) ).var
	0x79, 0x69, 0x6e, 0x67, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x5f, 0x65, 0x79, 0x65, // ying float v_eye
	0x3b, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, // ;.varying vec2 v
	0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, // _texcoord0;.vec3
	0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, //  instMul(vec3 _v
	0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, // ec, mat3 _mtx) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, //  return ( (_vec)
	0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, //  * (_mtx) ); }.v
	0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, // ec3 instMul(mat3
	0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, //  _mtx, vec3 _vec
	0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, // ) { return ( (_m
	0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, // tx) * (_vec) ); 
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, // }.vec4 instMul(v
	0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, // ec4 _vec, mat4 _
	0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, // mtx) { return ( 
	0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, // (_vec) * (_mtx) 
	0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, // ); }.vec4 instMu
	0x6c, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, // l(mat4 _mtx, vec
	0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // 4 _vec) { return
	0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, //  ( (_mtx) * (_ve
	0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, // c) ); }.float rc
	0x70, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // p(float _a) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, // turn 1.0/_a; }.v
	0x65, 0x63, 0x32, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, // ec2 rcp(vec2 _a)
	0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, //  { return vec2(1
	0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, // .0)/_a; }.vec3 r
	0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // cp(vec3 _a) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, // turn vec3(1.0)/_
	0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, // a; }.vec4 rcp(ve
	0x63, 0x34, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // c4 _a) { return 
	0x76, 0x65, 0x63, 0x34, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, // vec4(1.0)/_a; }.
	0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, // vec2 vec2_splat(
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // float _x) { retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, // rn vec2(_x, _x);
	0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, //  }.vec3 vec3_spl
	0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, // at(float _x) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, // eturn vec3(_x, _
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, // x, _x); }.vec4 v
	0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // ec4_splat(float 
	0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, // _x) { return vec
	0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, // 4(_x, _x, _x, _x
	0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, // ); }.uvec2 uvec2
	0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, // _splat(uint _x) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, // { return uvec2(_
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, // x, _x); }.uvec3 
	0x75, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, // uvec3_splat(uint
	0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, //  _x) { return uv
	0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, // ec3(_x, _x, _x);
	0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, //  }.uvec4 uvec4_s
	0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, // plat(uint _x) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, // return uvec4(_x,
	0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, //  _x, _x, _x); }.
	0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, // mat4 mtxFromRows
	0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, // (vec4 _0, vec4 _
	0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // 1, vec4 _2, vec4
	0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, //  _3).{.return tr
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, // anspose(mat4(_0,
	0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, //  _1, _2, _3) );.
	0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, // }.mat4 mtxFromCo
	0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // ls(vec4 _0, vec4
	0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, //  _1, vec4 _2, ve
	0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // c4 _3).{.return 
	0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, // mat4(_0, _1, _2,
	0x20, 0x5f, 0x33, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, //  _3);.}.mat3 mtx
	0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, // FromRows(vec3 _0
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // , vec3 _1, vec3 
	0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, // _2).{.return tra
	0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, // nspose(mat3(_0, 
	0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, // _1, _2) );.}.mat
	0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, // 3 mtxFromCols(ve
	0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, // c3 _0, vec3 _1, 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // vec3 _2).{.retur
	0x6e, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, // n mat3(_0, _1, _
	0x32, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, // 2);.}.uniform ve
	0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, // c4 u_viewRect;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, // niform vec4 u_vi
	0x65, 0x77, 0x54, 0x65, 0x78, 0x65, 0x6c, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // ewTexel;.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, //  mat4 u_view;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, // iform mat4 u_inv
	0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, // View;.uniform ma
	0x74, 0x34, 0x20, 0x75, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, // t4 u_proj;.unifo
	0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, // rm mat4 u_invPro
	0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, // j;.uniform mat4 
	0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // u_viewProj;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, // orm mat4 u_invVi
	0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // ewProj;.uniform 
	0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, // mat4 u_model[32]
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, // ;.uniform mat4 u
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // _modelView;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, // orm mat4 u_model
	0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // ViewProj;.unifor
	0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, // m vec4 u_alphaRe
	0x66, 0x34, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, // f4;.float sqr(co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, // nst float v).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // eturn v*v;.}.vec
	0x32, 0x20, 0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, // 2 sqr(const vec2
	0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, //  v).{.return v*v
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, // ;.}.vec3 sqr(con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // st vec3 v).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // urn v*v;.}.vec3 
	0x6d, 0x75, 0x6c, 0x5f, 0x77, 0x31, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, // mul_w1(const vec
	0x33, 0x20, 0x76, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, // 3 v, const mat4 
	0x6d, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2e, 0x78, 0x2a, // m).{.return v.x*
	0x6d, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x79, 0x2a, // m[0].xyz + (v.y*
	0x6d, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x7a, 0x2a, // m[1].xyz + (v.z*
	0x6d, 0x5b, 0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x6d, 0x5b, 0x33, 0x5d, 0x2e, // m[2].xyz + m[3].
	0x78, 0x79, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, // xyz));.}.float a
	0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, // cos_approx_divPI
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, // (const float v).
	0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, // {.const float x 
	0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, // = abs(v);.if(1. 
	0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, // - x <= 0.0000610
	0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // 3515625).return 
	0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x20, 0x3a, // (v >= 0.) ? 0. :
	0x20, 0x31, 0x2e, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, //  1.;.const float
	0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, //  res = ((-0.1559
	0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, // 72/3.14159265358
	0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, // 9793238462643383
	0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, // 2795) * x + (1.5
	0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, // 6467/3.141592653
	0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, // 5897932384626433
	0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, // 832795) ) * sqrt
	0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // (1. - x);.return
	0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x72, 0x65, 0x73, //  (v >= 0.) ? res
	0x20, 0x3a, 0x20, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, //  : 1. - res;.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, // loat atan2_appro
	0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // x_div2PI(const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x79, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // loat y, const fl
	0x6f, 0x61, 0x74, 0x20, 0x78, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // oat x).{.const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, // loat abs_y = abs
	0x28, 0x79, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // (y);.const float
	0x20, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x78, 0x29, 0x3b, //  abs_x = abs(x);
	0x0a, 0x69, 0x66, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, // .if(abs_x <= 0.0
	0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x20, 0x26, 0x26, // 0006103515625 &&
	0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, //  abs_y <= 0.0000
	0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, // 6103515625).retu
	0x72, 0x6e, 0x20, 0x30, 0x2e, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, // rn 0.;.const flo
	0x61, 0x74, 0x20, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2d, 0x20, // at r = (abs_x - 
	0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, // abs_y) / (abs_x 
	0x2b, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // + abs_y);.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3d, 0x20, 0x28, 0x28, // float angle = ((
	0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x28, 0x33, 0x2e, 0x2f, 0x38, 0x2e, // x < 0.) ? (3./8.
	0x29, 0x20, 0x3a, 0x20, 0x28, 0x31, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x29, 0x0a, 0x2b, 0x20, 0x28, // ) : (1./8.)).+ (
	0x30, 0x2e, 0x32, 0x31, 0x31, 0x38, 0x36, 0x38, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, // 0.211868 /(2.*3.
	0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, // 1415926535897932
	0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, // 384626433832795)
	0x20, 0x2a, 0x20, 0x72, 0x20, 0x2a, 0x20, 0x72, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x39, 0x38, 0x37, //  * r * r - 0.987
	0x33, 0x30, 0x35, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, // 305 /(2.*3.14159
	0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, // 2653589793238462
	0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, // 6433832795)) * (
	0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x72, 0x20, 0x3a, 0x20, // (x < 0.) ? -r : 
	0x72, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x79, 0x20, 0x3c, 0x20, // r);.return (y < 
	0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3a, 0x20, 0x61, // 0.) ? -angle : a
	0x6e, 0x67, 0x6c, 0x65, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x73, // ngle;.}.float as
	0x69, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, // in_approx_divPI(
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, // const float v).{
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, // .const float x =
	0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, //  abs(v);.if(1. -
	0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, //  x <= 0.00006103
	0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // 515625).return (
	0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x3a, // v >= 0.) ? 0.5 :
	0x20, 0x2d, 0x30, 0x2e, 0x35, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, //  -0.5;.const flo
	0x61, 0x74, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, // at res = ((-0.15
	0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, // 5972/3.141592653
	0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, // 5897932384626433
	0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, // 832795) * x + (1
	0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, // .56467/3.1415926
	0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, // 5358979323846264
	0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, // 33832795) ) * sq
	0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // rt(1. - x);.retu
	0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, // rn (v >= 0.) ? 0
	0x2e, 0x35, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x20, // .5 - res : -0.5 
	0x2b, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x61, // + res;.}.vec2 ra
	0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, // y_to_equirectang
	0x75, 0x6c, 0x61, 0x72, 0x5f, 0x75, 0x76, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // ular_uv(const ve
	0x63, 0x33, 0x20, 0x72, 0x61, 0x79, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // c3 ray).{.return
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x0a, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x61, 0x74, 0x61, //  vec2(.0.5 + ata
	0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, // n2_approx_div2PI
	0x28, 0x72, 0x61, 0x79, 0x2e, 0x79, 0x2c, 0x20, 0x72, 0x61, 0x79, 0x2e, 0x78, 0x29, 0x2c, 0x0a, // (ray.y, ray.x),.
	0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, // acos_approx_divP
	0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // I(ray.z));.}.flo
	0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, // at InvsRGB(const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, //  float color).{.
	0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, // if (color <= 0.0
	0x34, 0x30, 0x34, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, // 4045).return col
	0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x29, // or * (1.0/12.92)
	0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, // ;.else.return po
	0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, // w(color * (1.0/1
	0x2e, 0x30, 0x35, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x2f, 0x31, // .055) + (0.055/1
	0x2e, 0x30, 0x35, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // .055), 2.4);.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x63, // loat InvRec709(c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // onst float color
	0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, // ).{.if (color <=
	0x20, 0x30, 0x2e, 0x30, 0x38, 0x31, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, //  0.081).return c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x34, 0x2e, 0x35, 0x29, // olor * (1.0/4.5)
	0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, // ;.else.return po
	0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, // w(color * (1.0/1
	0x2e, 0x30, 0x39, 0x39, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x2f, 0x31, // .099) + (0.099/1
	0x2e, 0x30, 0x39, 0x39, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x30, 0x2e, 0x34, 0x35, 0x29, // .099), 1.0/0.45)
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, // ;.}.float InvGam
	0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, // ma(const float c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x49, // olor).{.return I
	0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, // nvsRGB(color);.}
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, // .vec3 InvGamma(c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, // onst vec3 color)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x49, // .{.return vec3(I
	0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, // nvGamma(color.x)
	0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, // ,InvGamma(color.
	0x79, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // y),InvGamma(colo
	0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, // r.z));.}.vec3 In
	0x76, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, // vToneMap(const v
	0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, // ec3 color).{.con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, // st float inv_2bh
	0x20, 0x3d, 0x20, 0x30, 0x2e, 0x35, 0x2f, 0x30, 0x2e, 0x32, 0x35, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, //  = 0.5/0.25;.con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x34, 0x2e, // st float bh = 4.
	0x30, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2d, 0x20, 0x32, 0x2e, 0x30, 0x3b, 0x0a, 0x72, 0x65, // 0*0.25 - 2.0;.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2d, 0x20, 0x31, 0x2e, // turn (color - 1.
	0x30, 0x20, 0x2b, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2a, 0x28, // 0 + sqrt(color*(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x20, 0x62, 0x68, 0x29, 0x20, 0x2b, 0x20, 0x31, 0x2e, // color + bh) + 1.
	0x30, 0x29, 0x29, 0x2a, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // 0))*inv_2bh;.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // loat sRGB(const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // float f).{.float
	0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, //  s;.if (f <= 0.0
	0x30, 0x33, 0x31, 0x33, 0x30, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, // 031308).s = 12.9
	0x32, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, // 2 * f;.else.s = 
	0x31, 0x2e, 0x30, 0x35, 0x35, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x31, // 1.055 * pow(f, 1
	0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x34, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x3b, // .0/2.4) - 0.055;
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // .return s;.}.flo
	0x61, 0x74, 0x20, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // at Rec709(const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // float f).{.float
	0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, //  s;.if (f <= 0.0
	0x31, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x34, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x66, 0x3b, // 18).s = 4.5 * f;
	0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x20, // .else.s = 1.099 
	0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x20, 0x2d, // * pow(f, 0.45) -
	0x20, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, //  0.099;.return s
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, // ;.}.float FBGamm
	0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, // a(const float co
	0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x52, // lor).{.return sR
	0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // GB(color);.}.vec
	0x32, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // 2 FBGamma(const 
	0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // vec2 color).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, // turn vec2(FBGamm
	0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, // a(color.x),FBGam
	0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // ma(color.y));.}.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, // vec3 FBGamma(con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, // st vec3 color).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x46, 0x42, 0x47, // .return vec3(FBG
	0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, // amma(color.x),FB
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x46, // Gamma(color.y),F
	0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, // BGamma(color.z))
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, // ;.}.vec3 FBGamma
	0x32, 0x32, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, // 22(const vec3 co
	0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, // lor).{.return ve
	0x63, 0x33, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x2c, 0x20, // c3(pow(color.x, 
	0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, // 1.0/2.2),pow(col
	0x6f, 0x72, 0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, // or.y, 1.0/2.2),p
	0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, // ow(color.z, 1.0/
	0x32, 0x2e, 0x32, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, // 2.2));.}.float F
	0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // BToneMap(const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // loat l).{.return
	0x20, 0x6c, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, //  l * ((l*0.25 + 
	0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, // 1.0) / (l + 1.0)
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, // );.}.vec2 FBTone
	0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, // Map(const vec2 c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // olor).{.const fl
	0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // oat l = dot(colo
	0x72, 0x2c, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2b, // r,vec2(0.176204+
	0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x2c, 0x30, 0x2e, // 0.0108109*0.5,0.
	0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, // 812985+0.0108109
	0x2a, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, // *0.5));.return c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, // olor * ((l*0.25 
	0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, // + 1.0) / (l + 1.
	0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x54, 0x6f, // 0));.}.vec3 FBTo
	0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, // neMap(const vec3
	0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, //  color).{.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, // float l = dot(co
	0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, // lor,vec3(0.17620
	0x34, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2c, 0x30, 0x2e, 0x30, 0x31, 0x30, // 4,0.812985,0.010
	0x38, 0x31, 0x30, 0x39, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, // 8109));.return c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, // olor * ((l*0.25 
	0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, // + 1.0) / (l + 1.
	0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x41, 0x64, 0x64, 0x69, // 0));.}.vec4 Addi
	0x74, 0x69, 0x76, 0x65, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // tive(const vec4 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, // cBase, const vec
	0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // 4 cBlend, const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, // float percent).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2b, 0x20, // .return cBase + 
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, // cBlend*percent;.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x63, // }.vec3 Screen (c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, // onst vec3 cBase,
	0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, //  const vec3 cBle
	0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, // nd).{.return 1.0
	0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, //  - (1.0 - cBase)
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, //  * (1.0 - cBlend
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, // );.}.vec4 Screen
	0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, //  (const vec4 cBa
	0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, // se, const vec4 c
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // Blend).{.return 
	0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, // 1.0 - (1.0 - cBa
	0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, // se) * (1.0 - cBl
	0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, // end);.}.vec3 Scr
	0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // eenHDR (const ve
	0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // c3 cBase, const 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, // vec3 cBlend).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, // eturn max(1.0 - 
	0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, // (1.0 - cBase) * 
	0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, // (1.0 - cBlend), 
	0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, // vec3(0.,0.,0.));
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, // .}.vec4 ScreenHD
	0x52, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // R (const vec4 cB
	0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // ase, const vec4 
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // cBlend).{.return
	0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, //  max(1.0 - (1.0 
	0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, // - cBase) * (1.0 
	0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, // - cBlend), vec4(
	0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, // 0.,0.,0.,0.));.}
	0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x20, 0x28, // .vec4 Multiply (
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, // const vec4 cBase
	0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, // , const vec4 cBl
	0x65, 0x6e, 0x64, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // end, const float
	0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, //  percent).{.retu
	0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2a, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // rn cBase * cBlen
	0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // d*percent;.}.vec
	0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, // 4 Overlay (const
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, //  vec4 cBase, con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, // st vec4 cBlend).
	0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, // {.vec4 cNew = st
	0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, // ep(0.5, cBase);.
	0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, // cNew = mix(cBase
	0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, // *cBlend*2.0, 1.0
	0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, // -2.0*(1.0-cBase)
	0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, // *(1.0-cBlend), c
	0x4e, 0x65, 0x77, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, // New);.return cNe
	0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, // w;.}.vec4 Overla
	0x79, 0x48, 0x44, 0x52, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, // yHDR (const vec4
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, //  cBase, const ve
	0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, // c4 cBlend).{.vec
	0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, // 4 cNew = step(0.
	0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, // 5, cBase);.cNew 
	0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, // = max(mix(cBase*
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, // cBlend*2.0, 1.0-
	0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, // 2.0*(1.0-cBase)*
	0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, // (1.0-cBlend), cN
	0x65, 0x77, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, // ew), vec4(0.,0.,
	0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // 0.,0.));.return 
	0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x73, // cNew;.}.vec3 cos
	0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x5f, 0x73, 0x61, 0x6d, 0x70, // _hemisphere_samp
	0x6c, 0x65, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x29, // le(const vec2 t)
	0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, // .{.const float p
	0x68, 0x69, 0x20, 0x3d, 0x20, 0x74, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x28, 0x32, 0x2e, 0x30, 0x2a, // hi = t.y * (2.0*
	0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, // 3.14159265358979
	0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, // 3238462643383279
	0x35, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // 5);.const float 
	0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, // cosTheta = sqrt(
	0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // 1.0 - t.x);.cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, // t float sinTheta
	0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, //  = sqrt(t.x);.fl
	0x6f, 0x61, 0x74, 0x20, 0x73, 0x70, 0x2c, 0x63, 0x70, 0x3b, 0x0a, 0x73, 0x69, 0x6e, 0x63, 0x6f, // oat sp,cp;.sinco
	0x73, 0x28, 0x70, 0x68, 0x69, 0x2c, 0x73, 0x70, 0x2c, 0x63, 0x70, 0x29, 0x3b, 0x0a, 0x72, 0x65, // s(phi,sp,cp);.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x63, 0x70, 0x20, 0x2a, 0x20, 0x73, // turn vec3(cp * s
	0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, // inTheta, cosThet
	0x61, 0x2c, 0x20, 0x73, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, // a, sp * sinTheta
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, // );.}.vec3 rotate
	0x5f, 0x74, 0x6f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, // _to_vector_upper
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x2c, // (const vec3 vec,
	0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, //  const vec3 norm
	0x61, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, // al).{.if(normal.
	0x79, 0x20, 0x3e, 0x20, 0x2d, 0x30, 0x2e, 0x39, 0x39, 0x39, 0x39, 0x39, 0x29, 0x0a, 0x7b, 0x0a, // y > -0.99999).{.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x20, 0x3d, 0x20, // const float h = 
	0x31, 0x2e, 0x30, 0x2f, 0x28, 0x31, 0x2e, 0x30, 0x2b, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, // 1.0/(1.0+normal.
	0x79, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // y);.const float 
	0x68, 0x7a, 0x20, 0x3d, 0x20, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x3b, // hz = h*normal.z;
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x78, // .const float hzx
	0x20, 0x3d, 0x20, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x3b, 0x0a, //  = hz*normal.x;.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x0a, 0x76, 0x65, 0x63, // return vec3(.vec
	0x2e, 0x78, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, // .x * (normal.y+h
	0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x29, 0x20, 0x2b, 0x20, 0x76, 0x65, // z*normal.z) + ve
	0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, // c.y * normal.x -
	0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x2c, 0x0a, 0x76, 0x65, //  vec.z * hzx,.ve
	0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x2d, // c.y * normal.y -
	0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, //  vec.x * normal.
	0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, // x - vec.z * norm
	0x61, 0x6c, 0x2e, 0x7a, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, // al.z,.vec.y * no
	0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, // rmal.z - vec.x *
	0x20, 0x68, 0x7a, 0x78, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x28, //  hzx + vec.z * (
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, // normal.y+h*norma
	0x6c, 0x2e, 0x78, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, // l.x*normal.x));.
	0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x2d, 0x76, // }.else return -v
	0x65, 0x63, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, // ec;.}.uniform ve
	0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x53, 0x61, 0x74, 0x75, 0x72, 0x61, // c4 Stereo_Satura
	0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, // tion;.uniform ve
	0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, // c4 Stereo_MS_ZPD
	0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // _YAxis;.uniform 
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x20, 0x74, // sampler2DArray t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x3b, 0x0a, 0x75, 0x6e, // ex_stereo_fb;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, // iform sampler2DA
	0x72, 0x72, 0x61, 0x79, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // rray tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, // depth;.uniform v
	0x65, 0x63, 0x34, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, // ec4 w_h_height;.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, // vec3 gatherEyeCo
	0x6c, 0x6f, 0x72, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, // lor(vec2 u, bool
	0x20, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, //  isLeft).{.retur
	0x6e, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, // n texture2DArray
	0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, // Lod(tex_stereo_f
	0x62, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, // b, vec3(u.x, u.y
	0x2c, 0x20, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x30, 0x20, 0x3a, // , isLeft ? 0.0 :
	0x20, 0x31, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, //  1.0), 0.).rgb;.
	0x7d, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x66, // }.void gatherLef
	0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x28, 0x76, 0x65, 0x63, // tRightColors(vec
	0x32, 0x20, 0x75, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x63, // 2 u, out vec3 lc
	0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x6f, // ol, out vec3 rco
	0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x6c, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, // l).{.lcol = text
	0x75, 0x72, 0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, // ure2DArrayLod(te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x76, 0x65, 0x63, // x_stereo_fb, vec
	0x33, 0x28, 0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2c, // 3(u.x, u.y, 0.),
	0x20, 0x30, 0x2e, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x72, 0x63, 0x6f, 0x6c, 0x20, 0x3d, //  0.).xyz;.rcol =
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, //  texture2DArrayL
	0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, // od(tex_stereo_fb
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, // , vec3(u.x, u.y,
	0x20, 0x31, 0x2e, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, //  1.), 0.).xyz;.}
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, // .uniform mat4 St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, // ereo_LeftMat;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // iform mat4 Stere
	0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // o_RightMat;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // orm vec4 Stereo_
	0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, // LeftLuminance_Ga
	0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, // mma;.uniform vec
	0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // 4 Stereo_RightLu
	0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, // minance_DynDesat
	0x3b, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x65, // ;.void DynamicDe
	0x73, 0x61, 0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, // satAnaglyph(cons
	0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, // t vec3 lCol, con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, // st vec3 rCol, ou
	0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, // t vec3 lDesatCol
	0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x44, 0x65, 0x73, 0x61, // , out vec3 rDesa
	0x74, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // tCol).{.const fl
	0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // oat left2LeftLum
	0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, //  = dot(lCol, Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, // reo_LeftLuminanc
	0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, // e_Gamma.xyz);.co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, // nst float left2R
	0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, // ightLum = dot(lC
	0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, // ol, Stereo_Right
	0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, // Luminance_DynDes
	0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // at.xyz);.const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, // loat right2LeftL
	0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, // um = dot(rCol, S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, // tereo_LeftLumina
	0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, // nce_Gamma.xyz);.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, // const float righ
	0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, // t2RightLum = dot
	0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, // (rCol, Stereo_Ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, // ghtLuminance_Dyn
	0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // Desat.xyz);.cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, // t float leftLum 
	0x3d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, // = left2LeftLum +
	0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, 0x0a, //  left2RightLum;.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, // const float righ
	0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, // tLum = right2Lef
	0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, // tLum + right2Rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, // htLum;.const flo
	0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, // at leftDesat = S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, // tereo_RightLumin
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, // ance_DynDesat.w 
	0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, // * abs((left2Left
	0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, // Lum - left2Right
	0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, // Lum) / (leftLum 
	0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // + 0.0001));.cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x73, // t float rightDes
	0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, // at = Stereo_Righ
	0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, // tLuminance_DynDe
	0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x72, 0x69, 0x67, // sat.w * abs((rig
	0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x72, 0x69, 0x67, // ht2LeftLum - rig
	0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, // ht2RightLum) / (
	0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, // rightLum + 0.000
	0x31, 0x29, 0x29, 0x3b, 0x0a, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, 0x3d, // 1));.lDesatCol =
	0x20, 0x6d, 0x69, 0x78, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, //  mix(lCol, vec3_
	0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, // splat(leftLum), 
	0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x72, 0x44, 0x65, 0x73, // leftDesat);.rDes
	0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x72, 0x43, 0x6f, 0x6c, // atCol = mix(rCol
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x72, 0x69, 0x67, // , vec3_splat(rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x73, // htLum), rightDes
	0x61, 0x74, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x4c, 0x69, 0x6e, 0x65, // at);.}.vec3 Line
	0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, // arAnaglyph(const
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, //  vec3 lCol, cons
	0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, // t vec3 rCol).{.c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, // onst vec3 color 
	0x3d, 0x20, 0x28, 0x28, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, // = (( (vec4(lCol,
	0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, //  1.)) * (Stereo_
	0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x20, 0x28, // LeftMat) ) + ( (
	0x76, 0x65, 0x63, 0x34, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, // vec4(rCol, 1.)) 
	0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, // * (Stereo_RightM
	0x61, 0x74, 0x29, 0x20, 0x29, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // at) )).rgb;.retu
	0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, // rn color;.}.unif
	0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // orm vec4 Stereo_
	0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, 0x6e, // DeghostGamma;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // iform mat4 Stere
	0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3b, // o_DeghostFilter;
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x6e, 0x61, // .vec3 DeghostAna
	0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, // glyph(const vec3
	0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, //  lCol, const vec
	0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // 3 rCol).{.const 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, 0x6e, // vec3 color = Lin
	0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, // earAnaglyph(lCol
	0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // , rCol);.return 
	0x28, 0x20, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x53, 0x74, // ( (pow(color, St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, // ereo_DeghostGamm
	0x61, 0x2e, 0x72, 0x67, 0x62, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, // a.rgb)) * (mat3(
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, // Stereo_DeghostFi
	0x6c, 0x74, 0x65, 0x72, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, // lter[0].xyz, Ste
	0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, // reo_DeghostFilte
	0x72, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // r[1].xyz, Stereo
	0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x32, // _DeghostFilter[2
	0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, // ].xyz)) );.}.voi
	0x64, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x67, 0x6c, 0x5f, 0x46, 0x72, // d main().{.gl_Fr
	0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x67, // agColor = vec4(g
	0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x76, 0x5f, // atherEyeColor(v_
	0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2c, 0x20, 0x66, 0x72, 0x61, 0x63, 0x28, // texcoord0, frac(
	0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x2e, 0x79, 0x2a, 0x30, // gl_FragCoord.y*0
	0x2e, 0x35, 0x29, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x35, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, // .5) >= 0.5), 1.0
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x00,                                                             // );.}..
};
static const uint8_t fs_pp_stereo_flipped_int_st_dx11[602] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x0d, 0x74, // FSH.Jc._.......t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x30, 0x01, 0x00, 0x00, // ex_stereo_fb0...
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // .......tex_stere
	0x6f, 0x5f, 0x66, 0x62, 0x30, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x02, // o_fb0...........
	0x00, 0x00, 0x44, 0x58, 0x42, 0x43, 0xd8, 0xb2, 0xf7, 0xd0, 0xdb, 0xb8, 0x44, 0x80, 0x3a, 0x32, // ..DXBC......D.:2
	0x05, 0x36, 0x43, 0x2d, 0x0b, 0x55, 0x01, 0x00, 0x00, 0x00, 0x14, 0x02, 0x00, 0x00, 0x03, 0x00, // .6C-.U..........
	0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x9c, 0x00, 0x00, 0x00, 0xd0, 0x00, 0x00, 0x00, 0x49, 0x53, // ..,...........IS
	0x47, 0x4e, 0x68, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x50, 0x00, // GNh...........P.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x0f, 0x02, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x5c, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, // ................
	0x00, 0x00, 0x06, 0x06, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, // ......SV_POSITIO
	0x4e, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0xab, 0xab, 0xab, 0x4f, 0x53, // N.TEXCOORD....OS
	0x47, 0x4e, 0x2c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x20, 0x00, // GN,........... .
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x00, // ......SV_TARGET.
	0xab, 0xab, 0x53, 0x48, 0x45, 0x58, 0x3c, 0x01, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x4f, 0x00, // ..SHEX<...P...O.
	0x00, 0x00, 0x6a, 0x08, 0x00, 0x01, 0x5a, 0x00, 0x00, 0x03, 0x00, 0x60, 0x10, 0x00, 0x00, 0x00, // ..j...Z....`....
	0x00, 0x00, 0x58, 0x40, 0x00, 0x04, 0x00, 0x70, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x55, // ..X@...p......UU
	0x00, 0x00, 0x64, 0x20, 0x00, 0x04, 0x22, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, // ..d ..".........
	0x00, 0x00, 0x62, 0x10, 0x00, 0x03, 0x62, 0x10, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x65, 0x00, // ..b...b.......e.
	0x00, 0x03, 0xf2, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x02, 0x01, 0x00, // ... ......h.....
	0x00, 0x00, 0x38, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x10, // ..8.............
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x1a, 0x00, // .......@.....?..
	0x00, 0x05, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x1d, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, // ................
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x37, 0x00, // .......@.....?7.
	0x00, 0x09, 0x42, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, // ..B.............
	0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, // ...@.......@....
	0x80, 0x3f, 0x36, 0x00, 0x00, 0x05, 0x32, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x96, 0x15, // .?6...2.........
	0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0x02, 0x02, 0x00, 0x80, 0x43, 0x55, // ......H.......CU
	0x15, 0x00, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, // ..r.......F.....
	0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x00, 0x00, // ..F~.......`....
	0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x72, 0x20, // ...@......6...r 
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, // ......F.......6.
	0x00, 0x05, 0x82, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, // ... .......@....
	0x80, 0x3f, 0x3e, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00,                                     // .?>.......
};
static const uint8_t fs_pp_stereo_flipped_int_st_spv[1198] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x0d, 0x74, // FSH.Jc._.......t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x30, 0x00, 0x02, 0x00, // ex_stereo_fb0...
	0x00, 0x00, 0x00, 0x03, 0x22, 0x00, 0x80, 0x04, 0x00, 0x00, 0x03, 0x02, 0x23, 0x07, 0x00, 0x00, // ....".......#...
	0x01, 0x00, 0x0b, 0x00, 0x08, 0x00, 0xdd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, // ................
	0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, 0x4c, // ..............GL
	0x53, 0x4c, 0x2e, 0x73, 0x74, 0x64, 0x2e, 0x34, 0x35, 0x30, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, // SL.std.450......
	0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x08, 0x00, 0x04, 0x00, // ................
	0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x77, 0x00, // ......main....w.
	0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x8c, 0x00, 0x00, 0x00, 0x10, 0x00, 0x03, 0x00, 0x04, 0x00, // ................
	0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x03, 0x00, 0x03, 0x00, 0x05, 0x00, 0x00, 0x00, 0xf4, 0x01, // ................
	0x00, 0x00, 0x05, 0x00, 0x04, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, // ..........main..
	0x00, 0x00, 0x05, 0x00, 0x08, 0x00, 0x2d, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // ......-...tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x00, 0x00, // ereo_fbSampler..
	0x00, 0x00, 0x05, 0x00, 0x08, 0x00, 0x30, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // ......0...tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x00, 0x00, // ereo_fbTexture..
	0x00, 0x00, 0x05, 0x00, 0x06, 0x00, 0x77, 0x00, 0x00, 0x00, 0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, // ......w...gl_Fra
	0x67, 0x43, 0x6f, 0x6f, 0x72, 0x64, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x05, 0x00, 0x7f, 0x00, // gCoord..........
	0x00, 0x00, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x00, 0x05, 0x00, // ..v_texcoord0...
	0x06, 0x00, 0x8c, 0x00, 0x00, 0x00, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, // ......bgfx_FragD
	0x61, 0x74, 0x61, 0x30, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x2d, 0x00, 0x00, 0x00, 0x22, 0x00, // ata0..G...-...".
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x2d, 0x00, 0x00, 0x00, 0x21, 0x00, // ......G...-...!.
	0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x30, 0x00, 0x00, 0x00, 0x22, 0x00, // ......G...0...".
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x30, 0x00, 0x00, 0x00, 0x21, 0x00, // ......G...0...!.
	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x77, 0x00, 0x00, 0x00, 0x0b, 0x00, // ......G...w.....
	0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x1e, 0x00, // ......G.........
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x8c, 0x00, 0x00, 0x00, 0x1e, 0x00, // ......G.........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x21, 0x00, // ..............!.
	0x03, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x02, 0x00, 0x06, 0x00, // ................
	0x00, 0x00, 0x16, 0x00, 0x03, 0x00, 0x07, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x19, 0x00, // .......... .....
	0x09, 0x00, 0x08, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x03, 0x00, // ................
	0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x04, 0x00, // ................
	0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x19, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x02, 0x00, // ................
	0x00, 0x00, 0x14, 0x00, 0x02, 0x00, 0x1b, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x2c, 0x00, // .......... ...,.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x2c, 0x00, // ..........;...,.
	0x00, 0x00, 0x2d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x2f, 0x00, // ..-....... .../.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x2f, 0x00, // ..........;.../.
	0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x03, 0x00, 0x42, 0x00, // ..0...........B.
	0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x58, 0x00, // ......+.......X.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x59, 0x00, // ......+.......Y.
	0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x69, 0x00, // .....?+.......i.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x20, 0x00, 0x04, 0x00, 0x76, 0x00, 0x00, 0x00, 0x01, 0x00, // .....? ...v.....
	0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x76, 0x00, 0x00, 0x00, 0x77, 0x00, // ......;...v...w.
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x01, 0x00, // ...... ...~.....
	0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x7f, 0x00, // ......;...~.....
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x8b, 0x00, 0x00, 0x00, 0x03, 0x00, // ...... .........
	0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x8b, 0x00, 0x00, 0x00, 0x8c, 0x00, // ......;.........
	0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x36, 0x00, 0x05, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, // ......6.........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x05, 0x00, // ................
	0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x2d, 0x00, // ..=...........-.
	0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x08, 0x00, 0x00, 0x00, 0x31, 0x00, 0x00, 0x00, 0x30, 0x00, // ..=.......1...0.
	0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x77, 0x00, // ..=.......x...w.
	0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x19, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x7f, 0x00, // ..=.............
	0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xb3, 0x00, 0x00, 0x00, 0x78, 0x00, // ..Q...........x.
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xb4, 0x00, // ................
	0x00, 0x00, 0xb3, 0x00, 0x00, 0x00, 0x69, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x06, 0x00, 0x07, 0x00, // ......i.........
	0x00, 0x00, 0xb5, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0xb4, 0x00, // ................
	0x00, 0x00, 0xbe, 0x00, 0x05, 0x00, 0x1b, 0x00, 0x00, 0x00, 0xb6, 0x00, 0x00, 0x00, 0xb5, 0x00, // ................
	0x00, 0x00, 0x69, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xca, 0x00, // ..i...Q.........
	0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, // ..........Q.....
	0x00, 0x00, 0xcc, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xa9, 0x00, // ................
	0x06, 0x00, 0x07, 0x00, 0x00, 0x00, 0xce, 0x00, 0x00, 0x00, 0xb6, 0x00, 0x00, 0x00, 0x58, 0x00, // ..............X.
	0x00, 0x00, 0x59, 0x00, 0x00, 0x00, 0x50, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xcf, 0x00, // ..Y...P.........
	0x00, 0x00, 0xca, 0x00, 0x00, 0x00, 0xcc, 0x00, 0x00, 0x00, 0xce, 0x00, 0x00, 0x00, 0x56, 0x00, // ..............V.
	0x05, 0x00, 0x42, 0x00, 0x00, 0x00, 0xd9, 0x00, 0x00, 0x00, 0x31, 0x00, 0x00, 0x00, 0x2e, 0x00, // ..B.......1.....
	0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xdc, 0x00, 0x00, 0x00, 0xd9, 0x00, // ..X.............
	0x00, 0x00, 0xcf, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x58, 0x00, 0x00, 0x00, 0x51, 0x00, // ..........X...Q.
	0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xb9, 0x00, 0x00, 0x00, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xba, 0x00, 0x00, 0x00, 0xdc, 0x00, // ..Q.............
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xbb, 0x00, // ......Q.........
	0x00, 0x00, 0xdc, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x50, 0x00, 0x07, 0x00, 0x0e, 0x00, // ..........P.....
	0x00, 0x00, 0xbc, 0x00, 0x00, 0x00, 0xb9, 0x00, 0x00, 0x00, 0xba, 0x00, 0x00, 0x00, 0xbb, 0x00, // ................
	0x00, 0x00, 0x59, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x03, 0x00, 0x8c, 0x00, 0x00, 0x00, 0xbc, 0x00, // ..Y...>.........
	0x00, 0x00, 0xfd, 0x00, 0x01, 0x00, 0x38, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00,             // ......8.......
};
static const bgfx::EmbeddedShader fs_pp_stereo_flipped_int_st = BGFX_EMBEDDED_SHADER(fs_pp_stereo_flipped_int_st);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Build of fragment shader from fs_pp_stereo.sc to fs_pp_stereo_anaglyph_deghost_st with options: ANAGLYPH DEGHOST STEREO
static const uint8_t fs_pp_stereo_anaglyph_deghost_st_mtl[1686] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x14, 0x74, // FSH.Jc._.......t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, // ex_stereo_fbSamp
	0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x74, 0x65, // ler...........te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x54, 0x65, 0x78, 0x74, 0x75, // x_stereo_fbTextu
	0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x74, 0x65, 0x78, // re...........tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, // _stereo_depthSam
	0x70, 0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x74, // pler...........t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x54, // ex_stereo_depthT
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, // exture..........
	0x0e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x14, // .Stereo_LeftMat.
	0x01, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // ..........Stereo
	0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x01, 0x40, 0x00, 0x04, 0x00, 0x00, // _RightMat..@....
	0x00, 0x00, 0x00, 0x14, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, // ....Stereo_Degho
	0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x14, 0x01, 0x90, 0x00, 0x04, 0x00, 0x00, 0x00, // stFilter........
	0x00, 0x00, 0x13, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, // ...Stereo_Deghos
	0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x12, 0x01, 0x80, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, // tGamma..........
	0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x10, 0x00, // .tex_stereo_fb..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x76, 0x05, 0x00, 0x00, 0x23, 0x69, 0x6e, 0x63, // ........v...#inc
	0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x64, 0x6c, // lude <metal_stdl
	0x69, 0x62, 0x3e, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x73, 0x69, // ib>.#include <si
	0x6d, 0x64, 0x2f, 0x73, 0x69, 0x6d, 0x64, 0x2e, 0x68, 0x3e, 0x0a, 0x0a, 0x75, 0x73, 0x69, 0x6e, // md/simd.h>..usin
	0x67, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x6d, 0x65, 0x74, 0x61, // g namespace meta
	0x6c, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x5f, 0x47, 0x6c, 0x6f, 0x62, // l;..struct _Glob
	0x61, 0x6c, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x78, // al.{.    float4x
	0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, // 4 Stereo_LeftMat
	0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x78, 0x34, 0x20, 0x53, // ;.    float4x4 S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, // tereo_RightMat;.
	0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, //     float4 Stere
	0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, // o_DeghostGamma;.
	0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x78, 0x34, 0x20, 0x53, 0x74, 0x65, //     float4x4 Ste
	0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, // reo_DeghostFilte
	0x72, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x78, 0x6c, // r;.};..struct xl
	0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x0a, 0x7b, 0x0a, // atMtlMain_out.{.
	0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, //     float4 bgfx_
	0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x20, 0x5b, 0x5b, 0x63, 0x6f, 0x6c, 0x6f, // FragData0 [[colo
	0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, // r(0)]];.};..stru
	0x63, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x69, // ct xlatMtlMain_i
	0x6e, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x76, // n.{.    float2 v
	0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x5b, 0x5b, 0x75, 0x73, 0x65, // _texcoord0 [[use
	0x72, 0x28, 0x6c, 0x6f, 0x63, 0x6e, 0x31, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, // r(locn1)]];.};..
	0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, // fragment xlatMtl
	0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, // Main_out xlatMtl
	0x4d, 0x61, 0x69, 0x6e, 0x28, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, // Main(xlatMtlMain
	0x5f, 0x69, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x5b, 0x5b, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, // _in in [[stage_i
	0x6e, 0x5d, 0x5d, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x20, 0x5f, 0x47, // n]], constant _G
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x26, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x20, 0x5b, 0x5b, // lobal& _mtl_u [[
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x74, 0x65, 0x78, // buffer(0)]], tex
	0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x3c, 0x66, 0x6c, 0x6f, // ture2d_array<flo
	0x61, 0x74, 0x3e, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, // at> tex_stereo_f
	0x62, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x30, 0x29, 0x5d, 0x5d, // b [[texture(0)]]
	0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // , sampler tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x5b, // ereo_fbSampler [
	0x5b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x29, 0x0a, 0x7b, // [sampler(0)]]).{
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, // .    xlatMtlMain
	0x5f, 0x6f, 0x75, 0x74, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x3d, 0x20, 0x7b, 0x7d, 0x3b, 0x0a, 0x20, // _out out = {};. 
	0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x32, 0x38, 0x30, 0x20, 0x3d, //    float3 _280 =
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, //  float3(in.v_tex
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, // coord0, 0.0);.  
	0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x32, 0x38, 0x38, 0x20, 0x3d, 0x20, //   float3 _288 = 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, // float3(in.v_texc
	0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, // oord0, 1.0);.   
	0x20, 0x6f, 0x75, 0x74, 0x2e, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, 0x61, //  out.bgfx_FragDa
	0x74, 0x61, 0x30, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x66, 0x6c, 0x6f, // ta0 = float4(flo
	0x61, 0x74, 0x33, 0x78, 0x33, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x6d, 0x74, // at3x3(float3(_mt
	0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, // l_u.Stereo_Degho
	0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x30, 0x5d, 0x5b, 0x30, 0x5d, 0x2c, 0x20, // stFilter[0][0], 
	0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, // _mtl_u.Stereo_De
	0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x31, 0x5d, 0x5b, 0x30, // ghostFilter[1][0
	0x5d, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // ], _mtl_u.Stereo
	0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x32, // _DeghostFilter[2
	0x5d, 0x5b, 0x30, 0x5d, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x6d, // ][0]), float3(_m
	0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, // tl_u.Stereo_Degh
	0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x30, 0x5d, 0x5b, 0x31, 0x5d, 0x2c, // ostFilter[0][1],
	0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, //  _mtl_u.Stereo_D
	0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x31, 0x5d, 0x5b, // eghostFilter[1][
	0x31, 0x5d, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, // 1], _mtl_u.Stere
	0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, // o_DeghostFilter[
	0x32, 0x5d, 0x5b, 0x31, 0x5d, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x5f, // 2][1]), float3(_
	0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, // mtl_u.Stereo_Deg
	0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x30, 0x5d, 0x5b, 0x32, 0x5d, // hostFilter[0][2]
	0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // , _mtl_u.Stereo_
	0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x31, 0x5d, // DeghostFilter[1]
	0x5b, 0x32, 0x5d, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, // [2], _mtl_u.Ster
	0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, // eo_DeghostFilter
	0x5b, 0x32, 0x5d, 0x5b, 0x32, 0x5d, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x72, 0x28, // [2][2])) * powr(
	0x28, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, // ((float4(tex_ste
	0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, // reo_fb.sample(te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, // x_stereo_fbSampl
	0x65, 0x72, 0x2c, 0x20, 0x5f, 0x32, 0x38, 0x30, 0x2e, 0x78, 0x79, 0x2c, 0x20, 0x75, 0x69, 0x6e, // er, _280.xy, uin
	0x74, 0x28, 0x72, 0x69, 0x6e, 0x74, 0x28, 0x5f, 0x32, 0x38, 0x30, 0x2e, 0x7a, 0x29, 0x29, 0x2c, // t(rint(_280.z)),
	0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x79, 0x7a, //  level(0.0)).xyz
	0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, // , 1.0) * _mtl_u.
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, // Stereo_LeftMat) 
	0x2b, 0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // + (float4(tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, // ereo_fb.sample(t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, // ex_stereo_fbSamp
	0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x32, 0x38, 0x38, 0x2e, 0x78, 0x79, 0x2c, 0x20, 0x75, 0x69, // ler, _288.xy, ui
	0x6e, 0x74, 0x28, 0x72, 0x69, 0x6e, 0x74, 0x28, 0x5f, 0x32, 0x38, 0x38, 0x2e, 0x7a, 0x29, 0x29, // nt(rint(_288.z))
	0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x79, // , level(0.0)).xy
	0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, // z, 1.0) * _mtl_u
	0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, // .Stereo_RightMat
	0x29, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, // )).xyz, _mtl_u.S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, // tereo_DeghostGam
	0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, // ma.xyz), 1.0);. 
	0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6f, 0x75, 0x74, 0x3b, 0x0a, 0x7d, //    return out;.}
	0x0a, 0x0a, 0x00, 0x00, 0x10, 0x01,                                                             // ......
};
static const uint8_t fs_pp_stereo_anaglyph_deghost_st_essl[9014] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x23, // FSH.Jc._......##
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x33, 0x32, 0x30, 0x20, 0x65, // ..#version 320 e
	0x73, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, // s.#define attrib
	0x75, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x76, // ute in.#define v
	0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, // arying in.precis
	0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3b, // ion highp float;
	0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, // .precision highp
	0x20, 0x69, 0x6e, 0x74, 0x3b, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, //  int;.precision 
	0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, // highp sampler2DA
	0x72, 0x72, 0x61, 0x79, 0x3b, 0x0a, 0x23, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, // rray;.#extension
	0x20, 0x47, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x74, //  GL_EXT_shader_t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6c, 0x6f, 0x64, 0x20, 0x3a, 0x20, 0x65, 0x6e, 0x61, // exture_lod : ena
	0x62, 0x6c, 0x65, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, // ble.#define text
	0x75, 0x72, 0x65, 0x32, 0x44, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, // ure2DLod      te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x4c, 0x6f, 0x64, 0x45, 0x58, 0x54, 0x0a, 0x23, 0x64, // xture2DLodEXT.#d
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x47, // efine texture2DG
	0x72, 0x61, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, // rad     texture2
	0x44, 0x47, 0x72, 0x61, 0x64, 0x45, 0x58, 0x54, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, // DGradEXT.#define
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x4c, 0x6f, //  texture2DProjLo
	0x64, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, // d  texture2DProj
	0x4c, 0x6f, 0x64, 0x45, 0x58, 0x54, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, // LodEXT.#define t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, // exture2DProjGrad
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, //  texture2DProjGr
	0x61, 0x64, 0x45, 0x58, 0x54, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, // adEXT.#define te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, // xtureCubeLod    
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x4c, 0x6f, 0x64, 0x45, 0x58, // textureCubeLodEX
	0x54, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // T.#define textur
	0x65, 0x43, 0x75, 0x62, 0x65, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, // eCubeGrad   text
	0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x47, 0x72, 0x61, 0x64, 0x45, 0x58, 0x54, 0x0a, 0x23, // ureCubeGradEXT.#
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x28, // define shadow2D(
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, // _sampler, _coord
	0x29, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, // ) texture(_sampl
	0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x0a, 0x23, 0x64, 0x65, 0x66, // er, _coord).#def
	0x69, 0x6e, 0x65, 0x20, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, // ine shadow2DProj
	0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, // (_sampler, _coor
	0x64, 0x29, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, // d) textureProj(_
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, // sampler, _coord)
	0x0a, 0x23, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x47, 0x4c, 0x5f, 0x45, // .#extension GL_E
	0x58, 0x54, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, // XT_texture_array
	0x20, 0x3a, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x0a, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x65, //  : enable.out me
	0x64, 0x69, 0x75, 0x6d, 0x70, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, // diump vec4 bgfx_
	0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, // FragColor;.varyi
	0x6e, 0x67, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x5f, 0x65, 0x79, 0x65, 0x3b, 0x0a, // ng float v_eye;.
	0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x5f, 0x74, // varying vec2 v_t
	0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, // excoord0;.vec3 i
	0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, // nstMul(vec3 _vec
	0x2c, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, // , mat3 _mtx) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, // eturn ( (_vec) *
	0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, //  (_mtx) ); }.vec
	0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, // 3 instMul(mat3 _
	0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, // mtx, vec3 _vec) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, // { return ( (_mtx
	0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, // ) * (_vec) ); }.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, // vec4 instMul(vec
	0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, // 4 _vec, mat4 _mt
	0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, // x) { return ( (_
	0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, // vec) * (_mtx) );
	0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, //  }.vec4 instMul(
	0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // mat4 _mtx, vec4 
	0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // _vec) { return (
	0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, //  (_mtx) * (_vec)
	0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, 0x70, 0x28, //  ); }.float rcp(
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // float _a) { retu
	0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, // rn 1.0/_a; }.vec
	0x32, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, // 2 rcp(vec2 _a) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, //  return vec2(1.0
	0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x70, // )/_a; }.vec3 rcp
	0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // (vec3 _a) { retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, // rn vec3(1.0)/_a;
	0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x34, //  }.vec4 rcp(vec4
	0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, //  _a) { return ve
	0x63, 0x34, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, // c4(1.0)/_a; }.ve
	0x63, 0x32, 0x20, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, // c2 vec2_splat(fl
	0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // oat _x) { return
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, //  vec2(_x, _x); }
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, // .vec3 vec3_splat
	0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // (float _x) { ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, // urn vec3(_x, _x,
	0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, 0x65, 0x63, //  _x); }.vec4 vec
	0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, // 4_splat(float _x
	0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, // ) { return vec4(
	0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, // _x, _x, _x, _x);
	0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, //  }.uvec2 uvec2_s
	0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, // plat(uint _x) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, // return uvec2(_x,
	0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, 0x75, 0x76, //  _x); }.uvec3 uv
	0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, // ec3_splat(uint _
	0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, // x) { return uvec
	0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, // 3(_x, _x, _x); }
	0x0a, 0x75, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, // .uvec4 uvec4_spl
	0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // at(uint _x) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, // turn uvec4(_x, _
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x6d, 0x61, // x, _x, _x); }.ma
	0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, // t4 mtxFromRows(v
	0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, // ec4 _0, vec4 _1,
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, //  vec4 _2, vec4 _
	0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, // 3).{.return tran
	0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, // spose(mat4(_0, _
	0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // 1, _2, _3) );.}.
	0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, // mat4 mtxFromCols
	0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, // (vec4 _0, vec4 _
	0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // 1, vec4 _2, vec4
	0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, //  _3).{.return ma
	0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, // t4(_0, _1, _2, _
	0x33, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, // 3);.}.mat3 mtxFr
	0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, // omRows(vec3 _0, 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, // vec3 _1, vec3 _2
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, // ).{.return trans
	0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, // pose(mat3(_0, _1
	0x2c, 0x20, 0x5f, 0x32, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, // , _2) );.}.mat3 
	0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, // mtxFromCols(vec3
	0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, //  _0, vec3 _1, ve
	0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // c3 _2).{.return 
	0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, // mat3(_0, _1, _2)
	0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, // ;.}.uniform vec4
	0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, //  u_viewRect;.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, // form vec4 u_view
	0x54, 0x65, 0x78, 0x65, 0x6c, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, // Texel;.uniform m
	0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // at4 u_view;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, // orm mat4 u_invVi
	0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, // ew;.uniform mat4
	0x20, 0x75, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, //  u_proj;.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, 0x6a, 0x3b, //  mat4 u_invProj;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, // .uniform mat4 u_
	0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // viewProj;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, // m mat4 u_invView
	0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, // Proj;.uniform ma
	0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, 0x3b, 0x0a, // t4 u_model[32];.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, // uniform mat4 u_m
	0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // odelView;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, // m mat4 u_modelVi
	0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // ewProj;.uniform 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x66, 0x34, // vec4 u_alphaRef4
	0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, // ;.float sqr(cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // t float v).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, // urn v*v;.}.vec2 
	0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, // sqr(const vec2 v
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, // ).{.return v*v;.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, // }.vec3 sqr(const
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, //  vec3 v).{.retur
	0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6d, 0x75, // n v*v;.}.vec3 mu
	0x6c, 0x5f, 0x77, 0x31, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // l_w1(const vec3 
	0x76, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x29, // v, const mat4 m)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2e, 0x78, 0x2a, 0x6d, 0x5b, // .{.return v.x*m[
	0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x79, 0x2a, 0x6d, 0x5b, // 0].xyz + (v.y*m[
	0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x7a, 0x2a, 0x6d, 0x5b, // 1].xyz + (v.z*m[
	0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x6d, 0x5b, 0x33, 0x5d, 0x2e, 0x78, 0x79, // 2].xyz + m[3].xy
	0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x63, 0x6f, // z));.}.float aco
	0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x63, // s_approx_divPI(c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, // onst float v).{.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, // const float x = 
	0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, // abs(v);.if(1. - 
	0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, // x <= 0.000061035
	0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, // 15625).return (v
	0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x20, 0x3a, 0x20, 0x31, //  >= 0.) ? 0. : 1
	0x2e, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, // .;.const float r
	0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, // es = ((-0.155972
	0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, // /3.1415926535897
	0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, // 9323846264338327
	0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, // 95) * x + (1.564
	0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, // 67/3.14159265358
	0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, // 9793238462643383
	0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, // 2795) ) * sqrt(1
	0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // . - x);.return (
	0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, // v >= 0.) ? res :
	0x20, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, //  1. - res;.}.flo
	0x61, 0x74, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, // at atan2_approx_
	0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, // div2PI(const flo
	0x61, 0x74, 0x20, 0x79, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, // at y, const floa
	0x74, 0x20, 0x78, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, // t x).{.const flo
	0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x79, // at abs_y = abs(y
	0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, // );.const float a
	0x62, 0x73, 0x5f, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x78, 0x29, 0x3b, 0x0a, 0x69, // bs_x = abs(x);.i
	0x66, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, // f(abs_x <= 0.000
	0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x20, 0x26, 0x26, 0x20, 0x61, // 06103515625 && a
	0x62, 0x73, 0x5f, 0x79, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, // bs_y <= 0.000061
	0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // 03515625).return
	0x20, 0x30, 0x2e, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, //  0.;.const float
	0x20, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2d, 0x20, 0x61, 0x62, //  r = (abs_x - ab
	0x73, 0x5f, 0x79, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2b, 0x20, // s_y) / (abs_x + 
	0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // abs_y);.const fl
	0x6f, 0x61, 0x74, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x78, 0x20, // oat angle = ((x 
	0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x28, 0x33, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x20, // < 0.) ? (3./8.) 
	0x3a, 0x20, 0x28, 0x31, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x29, 0x0a, 0x2b, 0x20, 0x28, 0x30, 0x2e, // : (1./8.)).+ (0.
	0x32, 0x31, 0x31, 0x38, 0x36, 0x38, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, // 211868 /(2.*3.14
	0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, // 1592653589793238
	0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, // 4626433832795) *
	0x20, 0x72, 0x20, 0x2a, 0x20, 0x72, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x39, 0x38, 0x37, 0x33, 0x30, //  r * r - 0.98730
	0x35, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, // 5 /(2.*3.1415926
	0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, // 5358979323846264
	0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x78, // 33832795)) * ((x
	0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x72, 0x20, 0x3a, 0x20, 0x72, 0x29, //  < 0.) ? -r : r)
	0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x79, 0x20, 0x3c, 0x20, 0x30, 0x2e, // ;.return (y < 0.
	0x29, 0x20, 0x3f, 0x20, 0x2d, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3a, 0x20, 0x61, 0x6e, 0x67, // ) ? -angle : ang
	0x6c, 0x65, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x73, 0x69, 0x6e, // le;.}.float asin
	0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x63, 0x6f, // _approx_divPI(co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x63, // nst float v).{.c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, // onst float x = a
	0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, // bs(v);.if(1. - x
	0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, //  <= 0.0000610351
	0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, // 5625).return (v 
	0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x3a, 0x20, 0x2d, // >= 0.) ? 0.5 : -
	0x30, 0x2e, 0x35, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // 0.5;.const float
	0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, //  res = ((-0.1559
	0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, // 72/3.14159265358
	0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, // 9793238462643383
	0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, // 2795) * x + (1.5
	0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, // 6467/3.141592653
	0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, // 5897932384626433
	0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, // 832795) ) * sqrt
	0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // (1. - x);.return
	0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, //  (v >= 0.) ? 0.5
	0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, //  - res : -0.5 + 
	0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x61, 0x79, 0x5f, // res;.}.vec2 ray_
	0x74, 0x6f, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x75, 0x6c, // to_equirectangul
	0x61, 0x72, 0x5f, 0x75, 0x76, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, // ar_uv(const vec3
	0x20, 0x72, 0x61, 0x79, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, //  ray).{.return v
	0x65, 0x63, 0x32, 0x28, 0x0a, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, // ec2(.0.5 + atan2
	0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x72, // _approx_div2PI(r
	0x61, 0x79, 0x2e, 0x79, 0x2c, 0x20, 0x72, 0x61, 0x79, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x61, 0x63, // ay.y, ray.x),.ac
	0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, // os_approx_divPI(
	0x72, 0x61, 0x79, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // ray.z));.}.float
	0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, //  InvsRGB(const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, // loat color).{.if
	0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, //  (color <= 0.040
	0x34, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // 45).return color
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x29, 0x3b, 0x0a, //  * (1.0/12.92);.
	0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, // else.return pow(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, // color * (1.0/1.0
	0x35, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x2f, 0x31, 0x2e, 0x30, // 55) + (0.055/1.0
	0x35, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // 55), 2.4);.}.flo
	0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x63, 0x6f, 0x6e, // at InvRec709(con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, // st float color).
	0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, // {.if (color <= 0
	0x2e, 0x30, 0x38, 0x31, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, // .081).return col
	0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x34, 0x2e, 0x35, 0x29, 0x3b, 0x0a, // or * (1.0/4.5);.
	0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, // else.return pow(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, // color * (1.0/1.0
	0x39, 0x39, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x2f, 0x31, 0x2e, 0x30, // 99) + (0.099/1.0
	0x39, 0x39, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x3b, 0x0a, // 99), 1.0/0.45);.
	0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, // }.float InvGamma
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, // (const float col
	0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x49, 0x6e, 0x76, // or).{.return Inv
	0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // sRGB(color);.}.v
	0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, // ec3 InvGamma(con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, // st vec3 color).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x49, 0x6e, 0x76, // .return vec3(Inv
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x49, // Gamma(color.x),I
	0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, // nvGamma(color.y)
	0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, // ,InvGamma(color.
	0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x54, // z));.}.vec3 InvT
	0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, // oneMap(const vec
	0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, // 3 color).{.const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x20, 0x3d, //  float inv_2bh =
	0x20, 0x30, 0x2e, 0x35, 0x2f, 0x30, 0x2e, 0x32, 0x35, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, //  0.5/0.25;.const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x34, 0x2e, 0x30, 0x2a, //  float bh = 4.0*
	0x30, 0x2e, 0x32, 0x35, 0x20, 0x2d, 0x20, 0x32, 0x2e, 0x30, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // 0.25 - 2.0;.retu
	0x72, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, // rn (color - 1.0 
	0x2b, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2a, 0x28, 0x63, 0x6f, // + sqrt(color*(co
	0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x20, 0x62, 0x68, 0x29, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, // lor + bh) + 1.0)
	0x29, 0x2a, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // )*inv_2bh;.}.flo
	0x61, 0x74, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // at sRGB(const fl
	0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, // oat f).{.float s
	0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x33, // ;.if (f <= 0.003
	0x31, 0x33, 0x30, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x20, // 1308).s = 12.92 
	0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, // * f;.else.s = 1.
	0x30, 0x35, 0x35, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x31, 0x2e, 0x30, // 055 * pow(f, 1.0
	0x2f, 0x32, 0x2e, 0x34, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x3b, 0x0a, 0x72, // /2.4) - 0.055;.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // eturn s;.}.float
	0x20, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, //  Rec709(const fl
	0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, // oat f).{.float s
	0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, // ;.if (f <= 0.018
	0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x34, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, // ).s = 4.5 * f;.e
	0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x20, 0x2a, 0x20, // lse.s = 1.099 * 
	0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x20, 0x2d, 0x20, 0x30, // pow(f, 0.45) - 0
	0x2e, 0x30, 0x39, 0x39, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, // .099;.return s;.
	0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, // }.float FBGamma(
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // const float colo
	0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x52, 0x47, 0x42, // r).{.return sRGB
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, // (color);.}.vec2 
	0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // FBGamma(const ve
	0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, // c2 color).{.retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, // rn vec2(FBGamma(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, // color.x),FBGamma
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // (color.y));.}.ve
	0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, // c3 FBGamma(const
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, //  vec3 color).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, // eturn vec3(FBGam
	0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, // ma(color.x),FBGa
	0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x46, 0x42, 0x47, // mma(color.y),FBG
	0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, // amma(color.z));.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x32, 0x32, // }.vec3 FBGamma22
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // (const vec3 colo
	0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, // r).{.return vec3
	0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x2c, 0x20, 0x31, 0x2e, // (pow(color.x, 1.
	0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // 0/2.2),pow(color
	0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, // .y, 1.0/2.2),pow
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, // (color.z, 1.0/2.
	0x32, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x54, // 2));.}.float FBT
	0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, // oneMap(const flo
	0x61, 0x74, 0x20, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6c, // at l).{.return l
	0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, //  * ((l*0.25 + 1.
	0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, // 0) / (l + 1.0));
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, // .}.vec2 FBToneMa
	0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, // p(const vec2 col
	0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, // or).{.const floa
	0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, // t l = dot(color,
	0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2b, 0x30, 0x2e, // vec2(0.176204+0.
	0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x2c, 0x30, 0x2e, 0x38, 0x31, // 0108109*0.5,0.81
	0x32, 0x39, 0x38, 0x35, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, // 2985+0.0108109*0
	0x2e, 0x35, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, // .5));.return col
	0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, // or * ((l*0.25 + 
	0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, // 1.0) / (l + 1.0)
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, // );.}.vec3 FBTone
	0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, // Map(const vec3 c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // olor).{.const fl
	0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // oat l = dot(colo
	0x72, 0x2c, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2c, // r,vec3(0.176204,
	0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2c, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, // 0.812985,0.01081
	0x30, 0x39, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, // 09));.return col
	0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, // or * ((l*0.25 + 
	0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, // 1.0) / (l + 1.0)
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, // );.}.vec4 Additi
	0x76, 0x65, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // ve(const vec4 cB
	0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // ase, const vec4 
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // cBlend, const fl
	0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, // oat percent).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2b, 0x20, 0x63, 0x42, // eturn cBase + cB
	0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, // lend*percent;.}.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6e, // vec3 Screen (con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, // st vec3 cBase, c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, // onst vec3 cBlend
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, // ).{.return 1.0 -
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, //  (1.0 - cBase) *
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, //  (1.0 - cBlend);
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, // .}.vec4 Screen (
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, // const vec4 cBase
	0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, // , const vec4 cBl
	0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, // end).{.return 1.
	0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, // 0 - (1.0 - cBase
	0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // ) * (1.0 - cBlen
	0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, // d);.}.vec3 Scree
	0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, // nHDR (const vec3
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, //  cBase, const ve
	0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // c3 cBlend).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, // urn max(1.0 - (1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, // .0 - cBase) * (1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, // .0 - cBlend), ve
	0x63, 0x33, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, // c3(0.,0.,0.));.}
	0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, // .vec4 ScreenHDR 
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, // (const vec4 cBas
	0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // e, const vec4 cB
	0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, // lend).{.return m
	0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, // ax(1.0 - (1.0 - 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, // cBase) * (1.0 - 
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, // cBlend), vec4(0.
	0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // ,0.,0.,0.));.}.v
	0x65, 0x63, 0x34, 0x20, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x20, 0x28, 0x63, 0x6f, // ec4 Multiply (co
	0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, // nst vec4 cBase, 
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // const vec4 cBlen
	0x64, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, // d, const float p
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // ercent).{.return
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2a, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, //  cBase * cBlend*
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, // percent;.}.vec4 
	0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, // Overlay (const v
	0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, // ec4 cBase, const
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, //  vec4 cBlend).{.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, // vec4 cNew = step
	0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, // (0.5, cBase);.cN
	0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, // ew = mix(cBase*c
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, // Blend*2.0, 1.0-2
	0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, // .0*(1.0-cBase)*(
	0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, // 1.0-cBlend), cNe
	0x77, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, // w);.return cNew;
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x48, // .}.vec4 OverlayH
	0x44, 0x52, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, // DR (const vec4 c
	0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, // Base, const vec4
	0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, //  cBlend).{.vec4 
	0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, // cNew = step(0.5,
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, //  cBase);.cNew = 
	0x6d, 0x61, 0x78, 0x28, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, // max(mix(cBase*cB
	0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, // lend*2.0, 1.0-2.
	0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, // 0*(1.0-cBase)*(1
	0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, // .0-cBlend), cNew
	0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, // ), vec4(0.,0.,0.
	0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, // ,0.));.return cN
	0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x73, 0x5f, 0x68, // ew;.}.vec3 cos_h
	0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // emisphere_sample
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x29, 0x0a, 0x7b, // (const vec2 t).{
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x68, 0x69, // .const float phi
	0x20, 0x3d, 0x20, 0x74, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x28, 0x32, 0x2e, 0x30, 0x2a, 0x33, 0x2e, //  = t.y * (2.0*3.
	0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, // 1415926535897932
	0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, // 384626433832795)
	0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, // ;.const float co
	0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, // sTheta = sqrt(1.
	0x30, 0x20, 0x2d, 0x20, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // 0 - t.x);.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, // float sinTheta =
	0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, //  sqrt(t.x);.floa
	0x74, 0x20, 0x73, 0x70, 0x2c, 0x63, 0x70, 0x3b, 0x0a, 0x73, 0x69, 0x6e, 0x63, 0x6f, 0x73, 0x28, // t sp,cp;.sincos(
	0x70, 0x68, 0x69, 0x2c, 0x73, 0x70, 0x2c, 0x63, 0x70, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // phi,sp,cp);.retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x63, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, // rn vec3(cp * sin
	0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, // Theta, cosTheta,
	0x20, 0x73, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x29, 0x3b, //  sp * sinTheta);
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, // .}.vec3 rotate_t
	0x6f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x28, 0x63, // o_vector_upper(c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x63, // onst vec3 vec, c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, // onst vec3 normal
	0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, // ).{.if(normal.y 
	0x3e, 0x20, 0x2d, 0x30, 0x2e, 0x39, 0x39, 0x39, 0x39, 0x39, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, // > -0.99999).{.co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x20, 0x3d, 0x20, 0x31, 0x2e, // nst float h = 1.
	0x30, 0x2f, 0x28, 0x31, 0x2e, 0x30, 0x2b, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x29, // 0/(1.0+normal.y)
	0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, // ;.const float hz
	0x20, 0x3d, 0x20, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x3b, 0x0a, 0x63, //  = h*normal.z;.c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x3d, // onst float hzx =
	0x20, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x3b, 0x0a, 0x72, 0x65, //  hz*normal.x;.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x78, // turn vec3(.vec.x
	0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x7a, 0x2a, //  * (normal.y+hz*
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x29, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, // normal.z) + vec.
	0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, // y * normal.x - v
	0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, // ec.z * hzx,.vec.
	0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x2d, 0x20, 0x76, // y * normal.y - v
	0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, // ec.x * normal.x 
	0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, // - vec.z * normal
	0x2e, 0x7a, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, // .z,.vec.y * norm
	0x61, 0x6c, 0x2e, 0x7a, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x68, // al.z - vec.x * h
	0x7a, 0x78, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, // zx + vec.z * (no
	0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, // rmal.y+h*normal.
	0x78, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // x*normal.x));.}.
	0x65, 0x6c, 0x73, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x2d, 0x76, 0x65, 0x63, // else return -vec
	0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, // ;.}.uniform vec4
	0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x53, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, //  Stereo_Saturati
	0x6f, 0x6e, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, // on;.uniform vec4
	0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, //  Stereo_MS_ZPD_Y
	0x41, 0x78, 0x69, 0x73, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, // Axis;.uniform sa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x20, 0x74, 0x65, 0x78, // mpler2DArray tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // _stereo_fb;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, 0x72, 0x72, // orm sampler2DArr
	0x61, 0x79, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, // ay tex_stereo_de
	0x70, 0x74, 0x68, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, // pth;.uniform vec
	0x34, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, 0x76, 0x65, // 4 w_h_height;.ve
	0x63, 0x33, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, // c3 gatherEyeColo
	0x72, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x69, // r(vec2 u, bool i
	0x73, 0x4c, 0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // sLeft).{.return 
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x6f, // texture2DArrayLo
	0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, // d(tex_stereo_fb,
	0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, 0x20, //  vec3(u.x, u.y, 
	0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x30, 0x20, 0x3a, 0x20, 0x31, // isLeft ? 0.0 : 1
	0x2e, 0x30, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x7d, 0x0a, // .0), 0.).rgb;.}.
	0x76, 0x6f, 0x69, 0x64, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x52, // void gatherLeftR
	0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, // ightColors(vec2 
	0x75, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x63, 0x6f, 0x6c, // u, out vec3 lcol
	0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x6f, 0x6c, 0x29, // , out vec3 rcol)
	0x0a, 0x7b, 0x0a, 0x6c, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // .{.lcol = textur
	0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, // e2DArrayLod(tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, // stereo_fb, vec3(
	0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2c, 0x20, 0x30, // u.x, u.y, 0.), 0
	0x2e, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x72, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, // .).xyz;.rcol = t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x6f, 0x64, // exture2DArrayLod
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, // (tex_stereo_fb, 
	0x76, 0x65, 0x63, 0x33, 0x28, 0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, 0x20, 0x31, // vec3(u.x, u.y, 1
	0x2e, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, // .), 0.).xyz;.}.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, // niform mat4 Ster
	0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // eo_LeftMat;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // orm mat4 Stereo_
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // RightMat;.unifor
	0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, // m vec4 Stereo_Le
	0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, // ftLuminance_Gamm
	0x61, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // a;.uniform vec4 
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, // Stereo_RightLumi
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x3b, 0x0a, // nance_DynDesat;.
	0x76, 0x6f, 0x69, 0x64, 0x20, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x65, 0x73, 0x61, // void DynamicDesa
	0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // tAnaglyph(const 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, // vec3 lCol, const
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, //  vec3 rCol, out 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // vec3 lDesatCol, 
	0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, // out vec3 rDesatC
	0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, // ol).{.const floa
	0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, // t left2LeftLum =
	0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, //  dot(lCol, Stere
	0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, // o_LeftLuminance_
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // Gamma.xyz);.cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, // t float left2Rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, // htLum = dot(lCol
	0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // , Stereo_RightLu
	0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, // minance_DynDesat
	0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, // .xyz);.const flo
	0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // at right2LeftLum
	0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, //  = dot(rCol, Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, // reo_LeftLuminanc
	0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, // e_Gamma.xyz);.co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, // nst float right2
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, // RightLum = dot(r
	0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, // Col, Stereo_Righ
	0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, // tLuminance_DynDe
	0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // sat.xyz);.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, // float leftLum = 
	0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x6c, // left2LeftLum + l
	0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, 0x0a, 0x63, 0x6f, // eft2RightLum;.co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, // nst float rightL
	0x75, 0x6d, 0x20, 0x3d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, // um = right2LeftL
	0x75, 0x6d, 0x20, 0x2b, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, // um + right2Right
	0x4c, 0x75, 0x6d, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // Lum;.const float
	0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, //  leftDesat = Ste
	0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, // reo_RightLuminan
	0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, // ce_DynDesat.w * 
	0x61, 0x62, 0x73, 0x28, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, // abs((left2LeftLu
	0x6d, 0x20, 0x2d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // m - left2RightLu
	0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, // m) / (leftLum + 
	0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // 0.0001));.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, // float rightDesat
	0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, //  = Stereo_RightL
	0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, // uminance_DynDesa
	0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, // t.w * abs((right
	0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, // 2LeftLum - right
	0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x72, 0x69, // 2RightLum) / (ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, // ghtLum + 0.0001)
	0x29, 0x3b, 0x0a, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, // );.lDesatCol = m
	0x69, 0x78, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, // ix(lCol, vec3_sp
	0x6c, 0x61, 0x74, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, 0x6c, 0x65, // lat(leftLum), le
	0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x72, 0x44, 0x65, 0x73, 0x61, 0x74, // ftDesat);.rDesat
	0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // Col = mix(rCol, 
	0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, // vec3_splat(right
	0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, // Lum), rightDesat
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, // );.}.vec3 Linear
	0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, // Anaglyph(const v
	0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // ec3 lCol, const 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, // vec3 rCol).{.con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, // st vec3 color = 
	0x28, 0x28, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, // (( (vec4(lCol, 1
	0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, // .)) * (Stereo_Le
	0x66, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x20, 0x28, 0x76, 0x65, // ftMat) ) + ( (ve
	0x63, 0x34, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, // c4(rCol, 1.)) * 
	0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, // (Stereo_RightMat
	0x29, 0x20, 0x29, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // ) )).rgb;.return
	0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, //  color;.}.unifor
	0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, // m vec4 Stereo_De
	0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // ghostGamma;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // orm mat4 Stereo_
	0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3b, 0x0a, 0x76, // DeghostFilter;.v
	0x65, 0x63, 0x33, 0x20, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, // ec3 DeghostAnagl
	0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, // yph(const vec3 l
	0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // Col, const vec3 
	0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // rCol).{.const ve
	0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, // c3 color = Linea
	0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // rAnaglyph(lCol, 
	0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, // rCol);.return ( 
	0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, // (pow(color, Ster
	0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, // eo_DeghostGamma.
	0x72, 0x67, 0x62, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x53, 0x74, // rgb)) * (mat3(St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, // ereo_DeghostFilt
	0x65, 0x72, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // er[0].xyz, Stere
	0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, // o_DeghostFilter[
	0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, // 1].xyz, Stereo_D
	0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x32, 0x5d, 0x2e, // eghostFilter[2].
	0x78, 0x79, 0x7a, 0x29, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, // xyz)) );.}.void 
	0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, // main().{.vec3 lC
	0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x3b, 0x0a, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, // ol, rCol;.gather
	0x4c, 0x65, 0x66, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x28, // LeftRightColors(
	0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2c, 0x20, 0x6c, 0x43, 0x6f, // v_texcoord0, lCo
	0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, // l, rCol);.bgfx_F
	0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, // ragColor = vec4(
	0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, // DeghostAnaglyph(
	0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, // lCol, rCol), 1.0
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x00,                                                             // );.}..
};
static const uint8_t fs_pp_stereo_anaglyph_deghost_st_glsl[8998] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x23, // FSH.Jc._.......#
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x34, 0x34, 0x30, 0x0a, 0x6f, // ..#version 440.o
	0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, // ut vec4 bgfx_Fra
	0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, // gColor;.#define 
	0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x62, 0x67, 0x66, // gl_FragColor bgf
	0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x0a, 0x23, 0x64, 0x65, 0x66, // x_FragColor.#def
	0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x20, 0x20, 0x20, // ine texture2D   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x0a, 0x23, //        texture.#
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, // define texture2D
	0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // Lod       textur
	0x65, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, // eLod.#define tex
	0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ture2DGrad      
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, // textureGrad.#def
	0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, // ine texture2DPro
	0x6a, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, // jLod   texturePr
	0x6f, 0x6a, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, // ojLod.#define te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, 0x20, // xture2DProjGrad 
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, //  textureProjGrad
	0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // .#define texture
	0x43, 0x75, 0x62, 0x65, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, // CubeLod     text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, // ureLod.#define t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, // extureCubeGrad  
	0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, //   textureGrad.#d
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x33, 0x44, 0x20, // efine texture3D 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, //          texture
	0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // .#define texture
	0x32, 0x44, 0x4c, 0x6f, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x20, 0x74, 0x65, 0x78, 0x74, // 2DLodOffset text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x0a, 0x23, 0x64, 0x65, // ureLodOffset.#de
	0x66, 0x69, 0x6e, 0x65, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x69, // fine attribute i
	0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, // n.#define varyin
	0x67, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x62, 0x67, 0x66, // g in.#define bgf
	0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, // xShadow2D(_sampl
	0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, // er, _coord)     
	0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, // vec4_splat(textu
	0x72, 0x65, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, // re(_sampler, _co
	0x6f, 0x72, 0x64, 0x29, 0x20, 0x29, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x62, // ord) ).#define b
	0x67, 0x66, 0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x28, // gfxShadow2DProj(
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, // _sampler, _coord
	0x29, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, // ) vec4_splat(tex
	0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // tureProj(_sample
	0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x29, 0x0a, 0x76, 0x61, 0x72, // r, _coord) ).var
	0x79, 0x69, 0x6e, 0x67, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x5f, 0x65, 0x79, 0x65, // ying float v_eye
	0x3b, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, // ;.varying vec2 v
	0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, // _texcoord0;.vec3
	0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, //  instMul(vec3 _v
	0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, // ec, mat3 _mtx) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, //  return ( (_vec)
	0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, //  * (_mtx) ); }.v
	0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, // ec3 instMul(mat3
	0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, //  _mtx, vec3 _vec
	0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, // ) { return ( (_m
	0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, // tx) * (_vec) ); 
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, // }.vec4 instMul(v
	0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, // ec4 _vec, mat4 _
	0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, // mtx) { return ( 
	0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, // (_vec) * (_mtx) 
	0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, // ); }.vec4 instMu
	0x6c, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, // l(mat4 _mtx, vec
	0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // 4 _vec) { return
	0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, //  ( (_mtx) * (_ve
	0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, // c) ); }.float rc
	0x70, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // p(float _a) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, // turn 1.0/_a; }.v
	0x65, 0x63, 0x32, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, // ec2 rcp(vec2 _a)
	0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, //  { return vec2(1
	0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, // .0)/_a; }.vec3 r
	0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // cp(vec3 _a) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, // turn vec3(1.0)/_
	0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, // a; }.vec4 rcp(ve
	0x63, 0x34, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // c4 _a) { return 
	0x76, 0x65, 0x63, 0x34, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, // vec4(1.0)/_a; }.
	0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, // vec2 vec2_splat(
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // float _x) { retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, // rn vec2(_x, _x);
	0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, //  }.vec3 vec3_spl
	0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, // at(float _x) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, // eturn vec3(_x, _
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, // x, _x); }.vec4 v
	0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // ec4_splat(float 
	0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, // _x) { return vec
	0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, // 4(_x, _x, _x, _x
	0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, // ); }.uvec2 uvec2
	0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, // _splat(uint _x) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, // { return uvec2(_
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, // x, _x); }.uvec3 
	0x75, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, // uvec3_splat(uint
	0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, //  _x) { return uv
	0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, // ec3(_x, _x, _x);
	0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, //  }.uvec4 uvec4_s
	0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, // plat(uint _x) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, // return uvec4(_x,
	0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, //  _x, _x, _x); }.
	0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, // mat4 mtxFromRows
	0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, // (vec4 _0, vec4 _
	0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // 1, vec4 _2, vec4
	0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, //  _3).{.return tr
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, // anspose(mat4(_0,
	0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, //  _1, _2, _3) );.
	0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, // }.mat4 mtxFromCo
	0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // ls(vec4 _0, vec4
	0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, //  _1, vec4 _2, ve
	0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // c4 _3).{.return 
	0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, // mat4(_0, _1, _2,
	0x20, 0x5f, 0x33, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, //  _3);.}.mat3 mtx
	0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, // FromRows(vec3 _0
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // , vec3 _1, vec3 
	0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, // _2).{.return tra
	0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, // nspose(mat3(_0, 
	0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, // _1, _2) );.}.mat
	0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, // 3 mtxFromCols(ve
	0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, // c3 _0, vec3 _1, 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // vec3 _2).{.retur
	0x6e, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, // n mat3(_0, _1, _
	0x32, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, // 2);.}.uniform ve
	0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, // c4 u_viewRect;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, // niform vec4 u_vi
	0x65, 0x77, 0x54, 0x65, 0x78, 0x65, 0x6c, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // ewTexel;.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, //  mat4 u_view;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, // iform mat4 u_inv
	0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, // View;.uniform ma
	0x74, 0x34, 0x20, 0x75, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, // t4 u_proj;.unifo
	0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, // rm mat4 u_invPro
	0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, // j;.uniform mat4 
	0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // u_viewProj;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, // orm mat4 u_invVi
	0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // ewProj;.uniform 
	0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, // mat4 u_model[32]
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, // ;.uniform mat4 u
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // _modelView;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, // orm mat4 u_model
	0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // ViewProj;.unifor
	0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, // m vec4 u_alphaRe
	0x66, 0x34, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, // f4;.float sqr(co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, // nst float v).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // eturn v*v;.}.vec
	0x32, 0x20, 0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, // 2 sqr(const vec2
	0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, //  v).{.return v*v
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, // ;.}.vec3 sqr(con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // st vec3 v).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // urn v*v;.}.vec3 
	0x6d, 0x75, 0x6c, 0x5f, 0x77, 0x31, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, // mul_w1(const vec
	0x33, 0x20, 0x76, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, // 3 v, const mat4 
	0x6d, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2e, 0x78, 0x2a, // m).{.return v.x*
	0x6d, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x79, 0x2a, // m[0].xyz + (v.y*
	0x6d, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x7a, 0x2a, // m[1].xyz + (v.z*
	0x6d, 0x5b, 0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x6d, 0x5b, 0x33, 0x5d, 0x2e, // m[2].xyz + m[3].
	0x78, 0x79, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, // xyz));.}.float a
	0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, // cos_approx_divPI
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, // (const float v).
	0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, // {.const float x 
	0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, // = abs(v);.if(1. 
	0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, // - x <= 0.0000610
	0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // 3515625).return 
	0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x20, 0x3a, // (v >= 0.) ? 0. :
	0x20, 0x31, 0x2e, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, //  1.;.const float
	0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, //  res = ((-0.1559
	0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, // 72/3.14159265358
	0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, // 9793238462643383
	0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, // 2795) * x + (1.5
	0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, // 6467/3.141592653
	0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, // 5897932384626433
	0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, // 832795) ) * sqrt
	0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // (1. - x);.return
	0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x72, 0x65, 0x73, //  (v >= 0.) ? res
	0x20, 0x3a, 0x20, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, //  : 1. - res;.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, // loat atan2_appro
	0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // x_div2PI(const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x79, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // loat y, const fl
	0x6f, 0x61, 0x74, 0x20, 0x78, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // oat x).{.const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, // loat abs_y = abs
	0x28, 0x79, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // (y);.const float
	0x20, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x78, 0x29, 0x3b, //  abs_x = abs(x);
	0x0a, 0x69, 0x66, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, // .if(abs_x <= 0.0
	0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x20, 0x26, 0x26, // 0006103515625 &&
	0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, //  abs_y <= 0.0000
	0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, // 6103515625).retu
	0x72, 0x6e, 0x20, 0x30, 0x2e, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, // rn 0.;.const flo
	0x61, 0x74, 0x20, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2d, 0x20, // at r = (abs_x - 
	0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, // abs_y) / (abs_x 
	0x2b, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // + abs_y);.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3d, 0x20, 0x28, 0x28, // float angle = ((
	0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x28, 0x33, 0x2e, 0x2f, 0x38, 0x2e, // x < 0.) ? (3./8.
	0x29, 0x20, 0x3a, 0x20, 0x28, 0x31, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x29, 0x0a, 0x2b, 0x20, 0x28, // ) : (1./8.)).+ (
	0x30, 0x2e, 0x32, 0x31, 0x31, 0x38, 0x36, 0x38, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, // 0.211868 /(2.*3.
	0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, // 1415926535897932
	0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, // 384626433832795)
	0x20, 0x2a, 0x20, 0x72, 0x20, 0x2a, 0x20, 0x72, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x39, 0x38, 0x37, //  * r * r - 0.987
	0x33, 0x30, 0x35, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, // 305 /(2.*3.14159
	0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, // 2653589793238462
	0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, // 6433832795)) * (
	0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x72, 0x20, 0x3a, 0x20, // (x < 0.) ? -r : 
	0x72, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x79, 0x20, 0x3c, 0x20, // r);.return (y < 
	0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3a, 0x20, 0x61, // 0.) ? -angle : a
	0x6e, 0x67, 0x6c, 0x65, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x73, // ngle;.}.float as
	0x69, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, // in_approx_divPI(
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, // const float v).{
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, // .const float x =
	0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, //  abs(v);.if(1. -
	0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, //  x <= 0.00006103
	0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // 515625).return (
	0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x3a, // v >= 0.) ? 0.5 :
	0x20, 0x2d, 0x30, 0x2e, 0x35, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, //  -0.5;.const flo
	0x61, 0x74, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, // at res = ((-0.15
	0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, // 5972/3.141592653
	0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, // 5897932384626433
	0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, // 832795) * x + (1
	0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, // .56467/3.1415926
	0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, // 5358979323846264
	0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, // 33832795) ) * sq
	0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // rt(1. - x);.retu
	0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, // rn (v >= 0.) ? 0
	0x2e, 0x35, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x20, // .5 - res : -0.5 
	0x2b, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x61, // + res;.}.vec2 ra
	0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, // y_to_equirectang
	0x75, 0x6c, 0x61, 0x72, 0x5f, 0x75, 0x76, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // ular_uv(const ve
	0x63, 0x33, 0x20, 0x72, 0x61, 0x79, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // c3 ray).{.return
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x0a, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x61, 0x74, 0x61, //  vec2(.0.5 + ata
	0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, // n2_approx_div2PI
	0x28, 0x72, 0x61, 0x79, 0x2e, 0x79, 0x2c, 0x20, 0x72, 0x61, 0x79, 0x2e, 0x78, 0x29, 0x2c, 0x0a, // (ray.y, ray.x),.
	0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, // acos_approx_divP
	0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // I(ray.z));.}.flo
	0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, // at InvsRGB(const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, //  float color).{.
	0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, // if (color <= 0.0
	0x34, 0x30, 0x34, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, // 4045).return col
	0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x29, // or * (1.0/12.92)
	0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, // ;.else.return po
	0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, // w(color * (1.0/1
	0x2e, 0x30, 0x35, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x2f, 0x31, // .055) + (0.055/1
	0x2e, 0x30, 0x35, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // .055), 2.4);.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x63, // loat InvRec709(c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // onst float color
	0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, // ).{.if (color <=
	0x20, 0x30, 0x2e, 0x30, 0x38, 0x31, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, //  0.081).return c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x34, 0x2e, 0x35, 0x29, // olor * (1.0/4.5)
	0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, // ;.else.return po
	0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, // w(color * (1.0/1
	0x2e, 0x30, 0x39, 0x39, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x2f, 0x31, // .099) + (0.099/1
	0x2e, 0x30, 0x39, 0x39, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x30, 0x2e, 0x34, 0x35, 0x29, // .099), 1.0/0.45)
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, // ;.}.float InvGam
	0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, // ma(const float c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x49, // olor).{.return I
	0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, // nvsRGB(color);.}
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, // .vec3 InvGamma(c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, // onst vec3 color)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x49, // .{.return vec3(I
	0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, // nvGamma(color.x)
	0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, // ,InvGamma(color.
	0x79, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // y),InvGamma(colo
	0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, // r.z));.}.vec3 In
	0x76, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, // vToneMap(const v
	0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, // ec3 color).{.con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, // st float inv_2bh
	0x20, 0x3d, 0x20, 0x30, 0x2e, 0x35, 0x2f, 0x30, 0x2e, 0x32, 0x35, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, //  = 0.5/0.25;.con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x34, 0x2e, // st float bh = 4.
	0x30, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2d, 0x20, 0x32, 0x2e, 0x30, 0x3b, 0x0a, 0x72, 0x65, // 0*0.25 - 2.0;.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2d, 0x20, 0x31, 0x2e, // turn (color - 1.
	0x30, 0x20, 0x2b, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2a, 0x28, // 0 + sqrt(color*(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x20, 0x62, 0x68, 0x29, 0x20, 0x2b, 0x20, 0x31, 0x2e, // color + bh) + 1.
	0x30, 0x29, 0x29, 0x2a, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // 0))*inv_2bh;.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // loat sRGB(const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // float f).{.float
	0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, //  s;.if (f <= 0.0
	0x30, 0x33, 0x31, 0x33, 0x30, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, // 031308).s = 12.9
	0x32, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, // 2 * f;.else.s = 
	0x31, 0x2e, 0x30, 0x35, 0x35, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x31, // 1.055 * pow(f, 1
	0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x34, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x3b, // .0/2.4) - 0.055;
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // .return s;.}.flo
	0x61, 0x74, 0x20, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // at Rec709(const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // float f).{.float
	0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, //  s;.if (f <= 0.0
	0x31, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x34, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x66, 0x3b, // 18).s = 4.5 * f;
	0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x20, // .else.s = 1.099 
	0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x20, 0x2d, // * pow(f, 0.45) -
	0x20, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, //  0.099;.return s
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, // ;.}.float FBGamm
	0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, // a(const float co
	0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x52, // lor).{.return sR
	0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // GB(color);.}.vec
	0x32, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // 2 FBGamma(const 
	0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // vec2 color).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, // turn vec2(FBGamm
	0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, // a(color.x),FBGam
	0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // ma(color.y));.}.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, // vec3 FBGamma(con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, // st vec3 color).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x46, 0x42, 0x47, // .return vec3(FBG
	0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, // amma(color.x),FB
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x46, // Gamma(color.y),F
	0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, // BGamma(color.z))
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, // ;.}.vec3 FBGamma
	0x32, 0x32, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, // 22(const vec3 co
	0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, // lor).{.return ve
	0x63, 0x33, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x2c, 0x20, // c3(pow(color.x, 
	0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, // 1.0/2.2),pow(col
	0x6f, 0x72, 0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, // or.y, 1.0/2.2),p
	0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, // ow(color.z, 1.0/
	0x32, 0x2e, 0x32, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, // 2.2));.}.float F
	0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // BToneMap(const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // loat l).{.return
	0x20, 0x6c, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, //  l * ((l*0.25 + 
	0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, // 1.0) / (l + 1.0)
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, // );.}.vec2 FBTone
	0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, // Map(const vec2 c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // olor).{.const fl
	0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // oat l = dot(colo
	0x72, 0x2c, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2b, // r,vec2(0.176204+
	0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x2c, 0x30, 0x2e, // 0.0108109*0.5,0.
	0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, // 812985+0.0108109
	0x2a, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, // *0.5));.return c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, // olor * ((l*0.25 
	0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, // + 1.0) / (l + 1.
	0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x54, 0x6f, // 0));.}.vec3 FBTo
	0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, // neMap(const vec3
	0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, //  color).{.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, // float l = dot(co
	0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, // lor,vec3(0.17620
	0x34, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2c, 0x30, 0x2e, 0x30, 0x31, 0x30, // 4,0.812985,0.010
	0x38, 0x31, 0x30, 0x39, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, // 8109));.return c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, // olor * ((l*0.25 
	0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, // + 1.0) / (l + 1.
	0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x41, 0x64, 0x64, 0x69, // 0));.}.vec4 Addi
	0x74, 0x69, 0x76, 0x65, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // tive(const vec4 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, // cBase, const vec
	0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // 4 cBlend, const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, // float percent).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2b, 0x20, // .return cBase + 
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, // cBlend*percent;.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x63, // }.vec3 Screen (c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, // onst vec3 cBase,
	0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, //  const vec3 cBle
	0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, // nd).{.return 1.0
	0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, //  - (1.0 - cBase)
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, //  * (1.0 - cBlend
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, // );.}.vec4 Screen
	0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, //  (const vec4 cBa
	0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, // se, const vec4 c
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // Blend).{.return 
	0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, // 1.0 - (1.0 - cBa
	0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, // se) * (1.0 - cBl
	0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, // end);.}.vec3 Scr
	0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // eenHDR (const ve
	0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // c3 cBase, const 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, // vec3 cBlend).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, // eturn max(1.0 - 
	0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, // (1.0 - cBase) * 
	0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, // (1.0 - cBlend), 
	0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, // vec3(0.,0.,0.));
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, // .}.vec4 ScreenHD
	0x52, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // R (const vec4 cB
	0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // ase, const vec4 
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // cBlend).{.return
	0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, //  max(1.0 - (1.0 
	0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, // - cBase) * (1.0 
	0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, // - cBlend), vec4(
	0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, // 0.,0.,0.,0.));.}
	0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x20, 0x28, // .vec4 Multiply (
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, // const vec4 cBase
	0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, // , const vec4 cBl
	0x65, 0x6e, 0x64, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // end, const float
	0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, //  percent).{.retu
	0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2a, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // rn cBase * cBlen
	0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // d*percent;.}.vec
	0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, // 4 Overlay (const
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, //  vec4 cBase, con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, // st vec4 cBlend).
	0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, // {.vec4 cNew = st
	0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, // ep(0.5, cBase);.
	0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, // cNew = mix(cBase
	0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, // *cBlend*2.0, 1.0
	0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, // -2.0*(1.0-cBase)
	0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, // *(1.0-cBlend), c
	0x4e, 0x65, 0x77, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, // New);.return cNe
	0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, // w;.}.vec4 Overla
	0x79, 0x48, 0x44, 0x52, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, // yHDR (const vec4
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, //  cBase, const ve
	0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, // c4 cBlend).{.vec
	0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, // 4 cNew = step(0.
	0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, // 5, cBase);.cNew 
	0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, // = max(mix(cBase*
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, // cBlend*2.0, 1.0-
	0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, // 2.0*(1.0-cBase)*
	0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, // (1.0-cBlend), cN
	0x65, 0x77, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, // ew), vec4(0.,0.,
	0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // 0.,0.));.return 
	0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x73, // cNew;.}.vec3 cos
	0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x5f, 0x73, 0x61, 0x6d, 0x70, // _hemisphere_samp
	0x6c, 0x65, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x29, // le(const vec2 t)
	0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, // .{.const float p
	0x68, 0x69, 0x20, 0x3d, 0x20, 0x74, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x28, 0x32, 0x2e, 0x30, 0x2a, // hi = t.y * (2.0*
	0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, // 3.14159265358979
	0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, // 3238462643383279
	0x35, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // 5);.const float 
	0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, // cosTheta = sqrt(
	0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // 1.0 - t.x);.cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, // t float sinTheta
	0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, //  = sqrt(t.x);.fl
	0x6f, 0x61, 0x74, 0x20, 0x73, 0x70, 0x2c, 0x63, 0x70, 0x3b, 0x0a, 0x73, 0x69, 0x6e, 0x63, 0x6f, // oat sp,cp;.sinco
	0x73, 0x28, 0x70, 0x68, 0x69, 0x2c, 0x73, 0x70, 0x2c, 0x63, 0x70, 0x29, 0x3b, 0x0a, 0x72, 0x65, // s(phi,sp,cp);.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x63, 0x70, 0x20, 0x2a, 0x20, 0x73, // turn vec3(cp * s
	0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, // inTheta, cosThet
	0x61, 0x2c, 0x20, 0x73, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, // a, sp * sinTheta
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, // );.}.vec3 rotate
	0x5f, 0x74, 0x6f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, // _to_vector_upper
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x2c, // (const vec3 vec,
	0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, //  const vec3 norm
	0x61, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, // al).{.if(normal.
	0x79, 0x20, 0x3e, 0x20, 0x2d, 0x30, 0x2e, 0x39, 0x39, 0x39, 0x39, 0x39, 0x29, 0x0a, 0x7b, 0x0a, // y > -0.99999).{.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x20, 0x3d, 0x20, // const float h = 
	0x31, 0x2e, 0x30, 0x2f, 0x28, 0x31, 0x2e, 0x30, 0x2b, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, // 1.0/(1.0+normal.
	0x79, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // y);.const float 
	0x68, 0x7a, 0x20, 0x3d, 0x20, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x3b, // hz = h*normal.z;
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x78, // .const float hzx
	0x20, 0x3d, 0x20, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x3b, 0x0a, //  = hz*normal.x;.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x0a, 0x76, 0x65, 0x63, // return vec3(.vec
	0x2e, 0x78, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, // .x * (normal.y+h
	0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x29, 0x20, 0x2b, 0x20, 0x76, 0x65, // z*normal.z) + ve
	0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, // c.y * normal.x -
	0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x2c, 0x0a, 0x76, 0x65, //  vec.z * hzx,.ve
	0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x2d, // c.y * normal.y -
	0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, //  vec.x * normal.
	0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, // x - vec.z * norm
	0x61, 0x6c, 0x2e, 0x7a, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, // al.z,.vec.y * no
	0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, // rmal.z - vec.x *
	0x20, 0x68, 0x7a, 0x78, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x28, //  hzx + vec.z * (
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, // normal.y+h*norma
	0x6c, 0x2e, 0x78, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, // l.x*normal.x));.
	0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x2d, 0x76, // }.else return -v
	0x65, 0x63, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, // ec;.}.uniform ve
	0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x53, 0x61, 0x74, 0x75, 0x72, 0x61, // c4 Stereo_Satura
	0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, // tion;.uniform ve
	0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, // c4 Stereo_MS_ZPD
	0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // _YAxis;.uniform 
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x20, 0x74, // sampler2DArray t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x3b, 0x0a, 0x75, 0x6e, // ex_stereo_fb;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, // iform sampler2DA
	0x72, 0x72, 0x61, 0x79, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // rray tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, // depth;.uniform v
	0x65, 0x63, 0x34, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, // ec4 w_h_height;.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, // vec3 gatherEyeCo
	0x6c, 0x6f, 0x72, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, // lor(vec2 u, bool
	0x20, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, //  isLeft).{.retur
	0x6e, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, // n texture2DArray
	0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, // Lod(tex_stereo_f
	0x62, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, // b, vec3(u.x, u.y
	0x2c, 0x20, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x30, 0x20, 0x3a, // , isLeft ? 0.0 :
	0x20, 0x31, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, //  1.0), 0.).rgb;.
	0x7d, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x66, // }.void gatherLef
	0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x28, 0x76, 0x65, 0x63, // tRightColors(vec
	0x32, 0x20, 0x75, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x63, // 2 u, out vec3 lc
	0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x6f, // ol, out vec3 rco
	0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x6c, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, // l).{.lcol = text
	0x75, 0x72, 0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, // ure2DArrayLod(te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x76, 0x65, 0x63, // x_stereo_fb, vec
	0x33, 0x28, 0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2c, // 3(u.x, u.y, 0.),
	0x20, 0x30, 0x2e, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x72, 0x63, 0x6f, 0x6c, 0x20, 0x3d, //  0.).xyz;.rcol =
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, //  texture2DArrayL
	0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, // od(tex_stereo_fb
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, // , vec3(u.x, u.y,
	0x20, 0x31, 0x2e, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, //  1.), 0.).xyz;.}
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, // .uniform mat4 St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, // ereo_LeftMat;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // iform mat4 Stere
	0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // o_RightMat;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // orm vec4 Stereo_
	0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, // LeftLuminance_Ga
	0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, // mma;.uniform vec
	0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // 4 Stereo_RightLu
	0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, // minance_DynDesat
	0x3b, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x65, // ;.void DynamicDe
	0x73, 0x61, 0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, // satAnaglyph(cons
	0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, // t vec3 lCol, con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, // st vec3 rCol, ou
	0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, // t vec3 lDesatCol
	0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x44, 0x65, 0x73, 0x61, // , out vec3 rDesa
	0x74, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // tCol).{.const fl
	0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // oat left2LeftLum
	0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, //  = dot(lCol, Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, // reo_LeftLuminanc
	0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, // e_Gamma.xyz);.co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, // nst float left2R
	0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, // ightLum = dot(lC
	0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, // ol, Stereo_Right
	0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, // Luminance_DynDes
	0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // at.xyz);.const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, // loat right2LeftL
	0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, // um = dot(rCol, S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, // tereo_LeftLumina
	0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, // nce_Gamma.xyz);.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, // const float righ
	0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, // t2RightLum = dot
	0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, // (rCol, Stereo_Ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, // ghtLuminance_Dyn
	0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // Desat.xyz);.cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, // t float leftLum 
	0x3d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, // = left2LeftLum +
	0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, 0x0a, //  left2RightLum;.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, // const float righ
	0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, // tLum = right2Lef
	0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, // tLum + right2Rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, // htLum;.const flo
	0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, // at leftDesat = S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, // tereo_RightLumin
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, // ance_DynDesat.w 
	0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, // * abs((left2Left
	0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, // Lum - left2Right
	0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, // Lum) / (leftLum 
	0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // + 0.0001));.cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x73, // t float rightDes
	0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, // at = Stereo_Righ
	0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, // tLuminance_DynDe
	0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x72, 0x69, 0x67, // sat.w * abs((rig
	0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x72, 0x69, 0x67, // ht2LeftLum - rig
	0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, // ht2RightLum) / (
	0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, // rightLum + 0.000
	0x31, 0x29, 0x29, 0x3b, 0x0a, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, 0x3d, // 1));.lDesatCol =
	0x20, 0x6d, 0x69, 0x78, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, //  mix(lCol, vec3_
	0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, // splat(leftLum), 
	0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x72, 0x44, 0x65, 0x73, // leftDesat);.rDes
	0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x72, 0x43, 0x6f, 0x6c, // atCol = mix(rCol
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x72, 0x69, 0x67, // , vec3_splat(rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x73, // htLum), rightDes
	0x61, 0x74, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x4c, 0x69, 0x6e, 0x65, // at);.}.vec3 Line
	0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, // arAnaglyph(const
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, //  vec3 lCol, cons
	0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, // t vec3 rCol).{.c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, // onst vec3 color 
	0x3d, 0x20, 0x28, 0x28, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, // = (( (vec4(lCol,
	0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, //  1.)) * (Stereo_
	0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x20, 0x28, // LeftMat) ) + ( (
	0x76, 0x65, 0x63, 0x34, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, // vec4(rCol, 1.)) 
	0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, // * (Stereo_RightM
	0x61, 0x74, 0x29, 0x20, 0x29, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // at) )).rgb;.retu
	0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, // rn color;.}.unif
	0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // orm vec4 Stereo_
	0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, 0x6e, // DeghostGamma;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // iform mat4 Stere
	0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3b, // o_DeghostFilter;
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x6e, 0x61, // .vec3 DeghostAna
	0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, // glyph(const vec3
	0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, //  lCol, const vec
	0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // 3 rCol).{.const 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, 0x6e, // vec3 color = Lin
	0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, // earAnaglyph(lCol
	0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // , rCol);.return 
	0x28, 0x20, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x53, 0x74, // ( (pow(color, St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, // ereo_DeghostGamm
	0x61, 0x2e, 0x72, 0x67, 0x62, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, // a.rgb)) * (mat3(
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, // Stereo_DeghostFi
	0x6c, 0x74, 0x65, 0x72, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, // lter[0].xyz, Ste
	0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, // reo_DeghostFilte
	0x72, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // r[1].xyz, Stereo
	0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x32, // _DeghostFilter[2
	0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, // ].xyz)) );.}.voi
	0x64, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // d main().{.vec3 
	0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x3b, 0x0a, 0x67, 0x61, 0x74, 0x68, // lCol, rCol;.gath
	0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, // erLeftRightColor
	0x73, 0x28, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2c, 0x20, 0x6c, // s(v_texcoord0, l
	0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x67, 0x6c, 0x5f, 0x46, // Col, rCol);.gl_F
	0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, // ragColor = vec4(
	0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, // DeghostAnaglyph(
	0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, // lCol, rCol), 1.0
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x00,                                                             // );.}..
};
static const uint8_t fs_pp_stereo_anaglyph_deghost_st_dx11[1122] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x0e, 0x53, // FSH.Jc._.......S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x00, 0x00, // tereo_LeftMat...
	0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, // ........Stereo_R
	0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x00, 0x40, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, // ightMat..@......
	0x00, 0x13, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, // ..Stereo_Deghost
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x12, 0x00, 0x80, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, // Gamma...........
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, // Stereo_DeghostFi
	0x6c, 0x74, 0x65, 0x72, 0x14, 0x00, 0x90, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x74, // lter...........t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x30, 0x01, 0x00, 0x00, // ex_stereo_fb0...
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // .......tex_stere
	0x6f, 0x5f, 0x66, 0x62, 0x30, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xac, 0x03, // o_fb0...........
	0x00, 0x00, 0x44, 0x58, 0x42, 0x43, 0x75, 0xdd, 0x99, 0x23, 0xb1, 0x50, 0x0b, 0xe6, 0xff, 0x75, // ..DXBCu..#.P...u
	0x58, 0x23, 0xf6, 0xdf, 0x9d, 0x9e, 0x01, 0x00, 0x00, 0x00, 0xac, 0x03, 0x00, 0x00, 0x03, 0x00, // X#..............
	0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x9c, 0x00, 0x00, 0x00, 0xd0, 0x00, 0x00, 0x00, 0x49, 0x53, // ..,...........IS
	0x47, 0x4e, 0x68, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x50, 0x00, // GNh...........P.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x5c, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, // ................
	0x00, 0x00, 0x06, 0x06, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, // ......SV_POSITIO
	0x4e, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0xab, 0xab, 0xab, 0x4f, 0x53, // N.TEXCOORD....OS
	0x47, 0x4e, 0x2c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x20, 0x00, // GN,........... .
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x00, // ......SV_TARGET.
	0xab, 0xab, 0x53, 0x48, 0x45, 0x58, 0xd4, 0x02, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0xb5, 0x00, // ..SHEX....P.....
	0x00, 0x00, 0x6a, 0x08, 0x00, 0x01, 0x59, 0x00, 0x00, 0x04, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, // ..j...Y...F. ...
	0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x03, 0x00, 0x60, 0x10, 0x00, 0x00, 0x00, // ......Z....`....
	0x00, 0x00, 0x58, 0x40, 0x00, 0x04, 0x00, 0x70, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x55, // ..X@...p......UU
	0x00, 0x00, 0x62, 0x10, 0x00, 0x03, 0x62, 0x10, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x65, 0x00, // ..b...b.......e.
	0x00, 0x03, 0xf2, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x02, 0x03, 0x00, // ... ......h.....
	0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x32, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x96, 0x15, // ..6...2.........
	0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x42, 0x00, 0x10, 0x00, 0x00, 0x00, // ......6...B.....
	0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0x02, 0x02, // ...@......H.....
	0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, // ..CU..r.......F.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, // ......F~.......`
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, // .......@......6.
	0x00, 0x05, 0x82, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, // ...........@....
	0x80, 0x3f, 0x11, 0x00, 0x00, 0x08, 0x12, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x0e, // .?............F.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ......F. .......
	0x00, 0x00, 0x11, 0x00, 0x00, 0x08, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x0e, // ......".......F.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, // ......F. .......
	0x00, 0x00, 0x11, 0x00, 0x00, 0x08, 0x42, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x0e, // ......B.......F.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, // ......F. .......
	0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x32, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x96, 0x15, // ..6...2.........
	0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x42, 0x00, 0x10, 0x00, 0x00, 0x00, // ......6...B.....
	0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x48, 0x00, 0x00, 0x8d, 0x02, 0x02, // ...@.....?H.....
	0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, // ..CU..r.......F.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, // ......F~.......`
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, // .......@......6.
	0x00, 0x05, 0x82, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, // ...........@....
	0x80, 0x3f, 0x11, 0x00, 0x00, 0x08, 0x12, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x0e, // .?............F.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, // ......F. .......
	0x00, 0x00, 0x11, 0x00, 0x00, 0x08, 0x22, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x0e, // ......".......F.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, // ......F. .......
	0x00, 0x00, 0x11, 0x00, 0x00, 0x08, 0x42, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x0e, // ......B.......F.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, // ......F. .......
	0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, // ......r.......F.
	0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2f, 0x00, // ......F......./.
	0x00, 0x05, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, // ..r.......F.....
	0x00, 0x00, 0x38, 0x00, 0x00, 0x08, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, // ..8...r.......F.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x82, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, // ......F. .......
	0x00, 0x00, 0x19, 0x00, 0x00, 0x05, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, // ......r.......F.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x08, 0x12, 0x20, 0x10, 0x00, 0x00, 0x00, // ........... ....
	0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x82, 0x20, 0x00, 0x00, 0x00, // ..F.......F. ...
	0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x08, 0x22, 0x20, 0x10, 0x00, 0x00, 0x00, // .........." ....
	0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x82, 0x20, 0x00, 0x00, 0x00, // ..F.......F. ...
	0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x08, 0x42, 0x20, 0x10, 0x00, 0x00, 0x00, // ..........B ....
	0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x82, 0x20, 0x00, 0x00, 0x00, // ..F.......F. ...
	0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x82, 0x20, 0x10, 0x00, 0x00, 0x00, // ......6.... ....
	0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x3e, 0x00, 0x00, 0x01, 0x00, 0x00, // ...@.....?>.....
	0xd0, 0x00,                                                                                     // ..
};
static const uint8_t fs_pp_stereo_anaglyph_deghost_st_spv[2642] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x0e, 0x53, // FSH.Jc._.......S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x01, 0x00, // tereo_LeftMat...
	0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, // ........Stereo_R
	0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x01, 0x40, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, // ightMat..@......
	0x00, 0x14, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, // ..Stereo_Deghost
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x14, 0x01, 0x90, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, // Filter..........
	0x13, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, // .Stereo_DeghostG
	0x61, 0x6d, 0x6d, 0x61, 0x12, 0x01, 0x80, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x74, // amma...........t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x30, 0x00, 0x02, 0x00, // ex_stereo_fb0...
	0x00, 0x00, 0x00, 0x03, 0x22, 0x00, 0xb4, 0x09, 0x00, 0x00, 0x03, 0x02, 0x23, 0x07, 0x00, 0x00, // ....".......#...
	0x01, 0x00, 0x0b, 0x00, 0x08, 0x00, 0x6b, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, // ......k.........
	0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, 0x4c, // ..............GL
	0x53, 0x4c, 0x2e, 0x73, 0x74, 0x64, 0x2e, 0x34, 0x35, 0x30, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, // SL.std.450......
	0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x07, 0x00, 0x04, 0x00, // ................
	0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, 0x00, 0xcd, 0x00, // ......main......
	0x00, 0x00, 0xda, 0x00, 0x00, 0x00, 0x10, 0x00, 0x03, 0x00, 0x04, 0x00, 0x00, 0x00, 0x07, 0x00, // ................
	0x00, 0x00, 0x03, 0x00, 0x03, 0x00, 0x05, 0x00, 0x00, 0x00, 0xf4, 0x01, 0x00, 0x00, 0x05, 0x00, // ................
	0x04, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, // ......main......
	0x08, 0x00, 0x35, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // ..5...tex_stereo
	0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, // _fbSampler......
	0x08, 0x00, 0x38, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // ..8...tex_stereo
	0x5f, 0x66, 0x62, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, // _fbTexture......
	0x06, 0x00, 0x75, 0x00, 0x00, 0x00, 0x55, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x6c, 0x6f, // ..u...UniformBlo
	0x63, 0x6b, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x07, 0x00, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00, // ck........u.....
	0x00, 0x00, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, // ..Stereo_LeftMat
	0x00, 0x00, 0x06, 0x00, 0x07, 0x00, 0x75, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x53, 0x74, // ......u.......St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x00, 0x06, 0x00, // ereo_RightMat...
	0x08, 0x00, 0x75, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // ..u.......Stereo
	0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x00, 0x06, 0x00, // _DeghostGamma...
	0x09, 0x00, 0x75, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // ..u.......Stereo
	0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x00, 0x00, // _DeghostFilter..
	0x00, 0x00, 0x05, 0x00, 0x03, 0x00, 0x77, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, // ......w.........
	0x05, 0x00, 0xcd, 0x00, 0x00, 0x00, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, // ......v_texcoord
	0x30, 0x00, 0x05, 0x00, 0x06, 0x00, 0xda, 0x00, 0x00, 0x00, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, // 0.........bgfx_F
	0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x35, 0x00, // ragData0..G...5.
	0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x35, 0x00, // ..".......G...5.
	0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x38, 0x00, // ..!.......G...8.
	0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x38, 0x00, // ..".......G...8.
	0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x48, 0x00, 0x04, 0x00, 0x75, 0x00, // ..!.......H...u.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0x75, 0x00, // ..........H...u.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, // ......#.......H.
	0x05, 0x00, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x10, 0x00, // ..u.............
	0x00, 0x00, 0x48, 0x00, 0x04, 0x00, 0x75, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04, 0x00, // ..H...u.........
	0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0x75, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x23, 0x00, // ..H...u.......#.
	0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0x75, 0x00, 0x00, 0x00, 0x01, 0x00, // ..@...H...u.....
	0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0x75, 0x00, // ..........H...u.
	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x48, 0x00, // ......#.......H.
	0x04, 0x00, 0x75, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x48, 0x00, // ..u...........H.
	0x05, 0x00, 0x75, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x90, 0x00, // ..u.......#.....
	0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0x75, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x07, 0x00, // ..H...u.........
	0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x47, 0x00, 0x03, 0x00, 0x75, 0x00, 0x00, 0x00, 0x02, 0x00, // ......G...u.....
	0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x77, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, // ..G...w...".....
	0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x77, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x01, 0x00, // ..G...w...!.....
	0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0xcd, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x01, 0x00, // ..G.............
	0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0xda, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, // ..G.............
	0x00, 0x00, 0x13, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x21, 0x00, 0x03, 0x00, 0x03, 0x00, // ..........!.....
	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x02, 0x00, 0x06, 0x00, 0x00, 0x00, 0x16, 0x00, // ................
	0x03, 0x00, 0x07, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x19, 0x00, 0x09, 0x00, 0x08, 0x00, // ...... .........
	0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x00, // ................
	0x04, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x17, 0x00, // ................
	0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x17, 0x00, // ................
	0x04, 0x00, 0x19, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x20, 0x00, // .............. .
	0x04, 0x00, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x3b, 0x00, // ..4...........;.
	0x04, 0x00, 0x34, 0x00, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, // ..4...5....... .
	0x04, 0x00, 0x37, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x3b, 0x00, // ..7...........;.
	0x04, 0x00, 0x37, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x00, // ..7...8.........
	0x04, 0x00, 0x41, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2b, 0x00, // ..A... .......+.
	0x04, 0x00, 0x41, 0x00, 0x00, 0x00, 0x42, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2b, 0x00, // ..A...B.......+.
	0x04, 0x00, 0x41, 0x00, 0x00, 0x00, 0x46, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x00, // ..A...F.........
	0x03, 0x00, 0x4a, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, // ..J.......+.....
	0x00, 0x00, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, // .._.......+.....
	0x00, 0x00, 0x6b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x18, 0x00, 0x04, 0x00, 0x74, 0x00, // ..k......?....t.
	0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x06, 0x00, 0x75, 0x00, // ..............u.
	0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x74, 0x00, // ..t...t.......t.
	0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x76, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x75, 0x00, // .. ...v.......u.
	0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x76, 0x00, 0x00, 0x00, 0x77, 0x00, 0x00, 0x00, 0x02, 0x00, // ..;...v...w.....
	0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x78, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x74, 0x00, // .. ...x.......t.
	0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x41, 0x00, 0x00, 0x00, 0x8e, 0x00, 0x00, 0x00, 0x03, 0x00, // ..+...A.........
	0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x8f, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0e, 0x00, // .. .............
	0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x41, 0x00, 0x00, 0x00, 0x96, 0x00, 0x00, 0x00, 0x02, 0x00, // ..+...A.........
	0x00, 0x00, 0x18, 0x00, 0x04, 0x00, 0x9a, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x03, 0x00, // ................
	0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0xcc, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x19, 0x00, // .. .............
	0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0xcc, 0x00, 0x00, 0x00, 0xcd, 0x00, 0x00, 0x00, 0x01, 0x00, // ..;.............
	0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0xd9, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0e, 0x00, // .. .............
	0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0xd9, 0x00, 0x00, 0x00, 0xda, 0x00, 0x00, 0x00, 0x03, 0x00, // ..;.............
	0x00, 0x00, 0x36, 0x00, 0x05, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, // ..6.............
	0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x05, 0x00, 0x00, 0x00, 0x3d, 0x00, // ..............=.
	0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x3d, 0x00, // ......6...5...=.
	0x04, 0x00, 0x08, 0x00, 0x00, 0x00, 0x39, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x3d, 0x00, // ......9...8...=.
	0x04, 0x00, 0x19, 0x00, 0x00, 0x00, 0xce, 0x00, 0x00, 0x00, 0xcd, 0x00, 0x00, 0x00, 0x51, 0x00, // ..............Q.
	0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x15, 0x01, 0x00, 0x00, 0xce, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x17, 0x01, 0x00, 0x00, 0xce, 0x00, // ..Q.............
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x50, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x18, 0x01, // ......P.........
	0x00, 0x00, 0x15, 0x01, 0x00, 0x00, 0x17, 0x01, 0x00, 0x00, 0x5f, 0x00, 0x00, 0x00, 0x56, 0x00, // .........._...V.
	0x05, 0x00, 0x4a, 0x00, 0x00, 0x00, 0x2a, 0x01, 0x00, 0x00, 0x39, 0x00, 0x00, 0x00, 0x36, 0x00, // ..J...*...9...6.
	0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x2d, 0x01, 0x00, 0x00, 0x2a, 0x01, // ..X.......-...*.
	0x00, 0x00, 0x18, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x5f, 0x00, 0x00, 0x00, 0x51, 0x00, // .........._...Q.
	0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x1d, 0x01, 0x00, 0x00, 0xce, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x1f, 0x01, 0x00, 0x00, 0xce, 0x00, // ..Q.............
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x50, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x20, 0x01, // ......P....... .
	0x00, 0x00, 0x1d, 0x01, 0x00, 0x00, 0x1f, 0x01, 0x00, 0x00, 0x6b, 0x00, 0x00, 0x00, 0x56, 0x00, // ..........k...V.
	0x05, 0x00, 0x4a, 0x00, 0x00, 0x00, 0x34, 0x01, 0x00, 0x00, 0x39, 0x00, 0x00, 0x00, 0x36, 0x00, // ..J...4...9...6.
	0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x37, 0x01, 0x00, 0x00, 0x34, 0x01, // ..X.......7...4.
	0x00, 0x00, 0x20, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x5f, 0x00, 0x00, 0x00, 0x41, 0x00, // .. ......._...A.
	0x05, 0x00, 0x78, 0x00, 0x00, 0x00, 0x5b, 0x01, 0x00, 0x00, 0x77, 0x00, 0x00, 0x00, 0x46, 0x00, // ..x...[...w...F.
	0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x74, 0x00, 0x00, 0x00, 0x5c, 0x01, 0x00, 0x00, 0x5b, 0x01, // ..=...t.......[.
	0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x5d, 0x01, 0x00, 0x00, 0x2d, 0x01, // ..Q.......]...-.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x5e, 0x01, // ......Q.......^.
	0x00, 0x00, 0x2d, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, // ..-.......Q.....
	0x00, 0x00, 0x5f, 0x01, 0x00, 0x00, 0x2d, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x50, 0x00, // .._...-.......P.
	0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x60, 0x01, 0x00, 0x00, 0x5d, 0x01, 0x00, 0x00, 0x5e, 0x01, // ......`...]...^.
	0x00, 0x00, 0x5f, 0x01, 0x00, 0x00, 0x6b, 0x00, 0x00, 0x00, 0x91, 0x00, 0x05, 0x00, 0x0e, 0x00, // .._...k.........
	0x00, 0x00, 0x61, 0x01, 0x00, 0x00, 0x5c, 0x01, 0x00, 0x00, 0x60, 0x01, 0x00, 0x00, 0x41, 0x00, // ..a.......`...A.
	0x05, 0x00, 0x78, 0x00, 0x00, 0x00, 0x62, 0x01, 0x00, 0x00, 0x77, 0x00, 0x00, 0x00, 0x42, 0x00, // ..x...b...w...B.
	0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x74, 0x00, 0x00, 0x00, 0x63, 0x01, 0x00, 0x00, 0x62, 0x01, // ..=...t...c...b.
	0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x64, 0x01, 0x00, 0x00, 0x37, 0x01, // ..Q.......d...7.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x65, 0x01, // ......Q.......e.
	0x00, 0x00, 0x37, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, // ..7.......Q.....
	0x00, 0x00, 0x66, 0x01, 0x00, 0x00, 0x37, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x50, 0x00, // ..f...7.......P.
	0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x67, 0x01, 0x00, 0x00, 0x64, 0x01, 0x00, 0x00, 0x65, 0x01, // ......g...d...e.
	0x00, 0x00, 0x66, 0x01, 0x00, 0x00, 0x6b, 0x00, 0x00, 0x00, 0x91, 0x00, 0x05, 0x00, 0x0e, 0x00, // ..f...k.........
	0x00, 0x00, 0x68, 0x01, 0x00, 0x00, 0x63, 0x01, 0x00, 0x00, 0x67, 0x01, 0x00, 0x00, 0x81, 0x00, // ..h...c...g.....
	0x05, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x69, 0x01, 0x00, 0x00, 0x61, 0x01, 0x00, 0x00, 0x68, 0x01, // ......i...a...h.
	0x00, 0x00, 0x4f, 0x00, 0x08, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x6a, 0x01, 0x00, 0x00, 0x69, 0x01, // ..O.......j...i.
	0x00, 0x00, 0x69, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, // ..i.............
	0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x8f, 0x00, 0x00, 0x00, 0x3c, 0x01, 0x00, 0x00, 0x77, 0x00, // ..A.......<...w.
	0x00, 0x00, 0x8e, 0x00, 0x00, 0x00, 0x46, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x0e, 0x00, // ......F...=.....
	0x00, 0x00, 0x3d, 0x01, 0x00, 0x00, 0x3c, 0x01, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x8f, 0x00, // ..=...<...A.....
	0x00, 0x00, 0x3f, 0x01, 0x00, 0x00, 0x77, 0x00, 0x00, 0x00, 0x8e, 0x00, 0x00, 0x00, 0x42, 0x00, // ..?...w.......B.
	0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x40, 0x01, 0x00, 0x00, 0x3f, 0x01, // ..=.......@...?.
	0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x8f, 0x00, 0x00, 0x00, 0x42, 0x01, 0x00, 0x00, 0x77, 0x00, // ..A.......B...w.
	0x00, 0x00, 0x8e, 0x00, 0x00, 0x00, 0x96, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x0e, 0x00, // ..........=.....
	0x00, 0x00, 0x43, 0x01, 0x00, 0x00, 0x42, 0x01, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, // ..C...B...Q.....
	0x00, 0x00, 0x45, 0x01, 0x00, 0x00, 0x3d, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, // ..E...=.......Q.
	0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x46, 0x01, 0x00, 0x00, 0x3d, 0x01, 0x00, 0x00, 0x01, 0x00, // ......F...=.....
	0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x47, 0x01, 0x00, 0x00, 0x3d, 0x01, // ..Q.......G...=.
	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x48, 0x01, // ......Q.......H.
	0x00, 0x00, 0x40, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, // ..@.......Q.....
	0x00, 0x00, 0x49, 0x01, 0x00, 0x00, 0x40, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x51, 0x00, // ..I...@.......Q.
	0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x4a, 0x01, 0x00, 0x00, 0x40, 0x01, 0x00, 0x00, 0x02, 0x00, // ......J...@.....
	0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x4b, 0x01, 0x00, 0x00, 0x43, 0x01, // ..Q.......K...C.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x4c, 0x01, // ......Q.......L.
	0x00, 0x00, 0x43, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, // ..C.......Q.....
	0x00, 0x00, 0x4d, 0x01, 0x00, 0x00, 0x43, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x50, 0x00, // ..M...C.......P.
	0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x4e, 0x01, 0x00, 0x00, 0x45, 0x01, 0x00, 0x00, 0x46, 0x01, // ......N...E...F.
	0x00, 0x00, 0x47, 0x01, 0x00, 0x00, 0x50, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x4f, 0x01, // ..G...P.......O.
	0x00, 0x00, 0x48, 0x01, 0x00, 0x00, 0x49, 0x01, 0x00, 0x00, 0x4a, 0x01, 0x00, 0x00, 0x50, 0x00, // ..H...I...J...P.
	0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x50, 0x01, 0x00, 0x00, 0x4b, 0x01, 0x00, 0x00, 0x4c, 0x01, // ......P...K...L.
	0x00, 0x00, 0x4d, 0x01, 0x00, 0x00, 0x50, 0x00, 0x06, 0x00, 0x9a, 0x00, 0x00, 0x00, 0x51, 0x01, // ..M...P.......Q.
	0x00, 0x00, 0x4e, 0x01, 0x00, 0x00, 0x4f, 0x01, 0x00, 0x00, 0x50, 0x01, 0x00, 0x00, 0x41, 0x00, // ..N...O...P...A.
	0x05, 0x00, 0x8f, 0x00, 0x00, 0x00, 0x53, 0x01, 0x00, 0x00, 0x77, 0x00, 0x00, 0x00, 0x96, 0x00, // ......S...w.....
	0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x54, 0x01, 0x00, 0x00, 0x53, 0x01, // ..=.......T...S.
	0x00, 0x00, 0x4f, 0x00, 0x08, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x55, 0x01, 0x00, 0x00, 0x54, 0x01, // ..O.......U...T.
	0x00, 0x00, 0x54, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, // ..T.............
	0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x56, 0x01, 0x00, 0x00, 0x01, 0x00, // ..........V.....
	0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x6a, 0x01, 0x00, 0x00, 0x55, 0x01, 0x00, 0x00, 0x91, 0x00, // ......j...U.....
	0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x57, 0x01, 0x00, 0x00, 0x51, 0x01, 0x00, 0x00, 0x56, 0x01, // ......W...Q...V.
	0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x57, 0x01, // ..Q...........W.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x03, 0x01, // ......Q.........
	0x00, 0x00, 0x57, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, // ..W.......Q.....
	0x00, 0x00, 0x04, 0x01, 0x00, 0x00, 0x57, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x50, 0x00, // ......W.......P.
	0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x05, 0x01, 0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x03, 0x01, // ................
	0x00, 0x00, 0x04, 0x01, 0x00, 0x00, 0x6b, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x03, 0x00, 0xda, 0x00, // ......k...>.....
	0x00, 0x00, 0x05, 0x01, 0x00, 0x00, 0xfd, 0x00, 0x01, 0x00, 0x38, 0x00, 0x01, 0x00, 0x00, 0x00, // ..........8.....
	0xd0, 0x00,                                                                                     // ..
};
static const bgfx::EmbeddedShader fs_pp_stereo_anaglyph_deghost_st = BGFX_EMBEDDED_SHADER(fs_pp_stereo_anaglyph_deghost_st);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Build of fragment shader from fs_pp_stereo.sc to fs_pp_stereo_anaglyph_lin_srgb_nodesat_st with options: ANAGLYPH NODESAT SRGB STEREO
static const uint8_t fs_pp_stereo_anaglyph_lin_srgb_nodesat_st_mtl[4738] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x14, 0x74, // FSH.Jc._.......t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, // ex_stereo_fbSamp
	0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x74, 0x65, // ler...........te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x54, 0x65, 0x78, 0x74, 0x75, // x_stereo_fbTextu
	0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x74, 0x65, 0x78, // re...........tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, // _stereo_depthSam
	0x70, 0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x74, // pler...........t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x54, // ex_stereo_depthT
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, // exture..........
	0x0e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x14, // .Stereo_LeftMat.
	0x01, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // ..........Stereo
	0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x01, 0x40, 0x00, 0x04, 0x00, 0x00, // _RightMat..@....
	0x00, 0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, // ....tex_stereo_f
	0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x9f, 0x11, 0x00, 0x00, 0x23, // b..............#
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x5f, 0x73, // include <metal_s
	0x74, 0x64, 0x6c, 0x69, 0x62, 0x3e, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, // tdlib>.#include 
	0x3c, 0x73, 0x69, 0x6d, 0x64, 0x2f, 0x73, 0x69, 0x6d, 0x64, 0x2e, 0x68, 0x3e, 0x0a, 0x0a, 0x75, // <simd/simd.h>..u
	0x73, 0x69, 0x6e, 0x67, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x6d, // sing namespace m
	0x65, 0x74, 0x61, 0x6c, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x5f, 0x47, // etal;..struct _G
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, // lobal.{.    floa
	0x74, 0x34, 0x78, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, // t4x4 Stereo_Left
	0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x78, // Mat;.    float4x
	0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, // 4 Stereo_RightMa
	0x74, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x78, 0x6c, // t;.};..struct xl
	0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x0a, 0x7b, 0x0a, // atMtlMain_out.{.
	0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, //     float4 bgfx_
	0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x20, 0x5b, 0x5b, 0x63, 0x6f, 0x6c, 0x6f, // FragData0 [[colo
	0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, // r(0)]];.};..stru
	0x63, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x69, // ct xlatMtlMain_i
	0x6e, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x76, // n.{.    float2 v
	0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x5b, 0x5b, 0x75, 0x73, 0x65, // _texcoord0 [[use
	0x72, 0x28, 0x6c, 0x6f, 0x63, 0x6e, 0x31, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, // r(locn1)]];.};..
	0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, // fragment xlatMtl
	0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, // Main_out xlatMtl
	0x4d, 0x61, 0x69, 0x6e, 0x28, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, // Main(xlatMtlMain
	0x5f, 0x69, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x5b, 0x5b, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, // _in in [[stage_i
	0x6e, 0x5d, 0x5d, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x20, 0x5f, 0x47, // n]], constant _G
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x26, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x20, 0x5b, 0x5b, // lobal& _mtl_u [[
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x74, 0x65, 0x78, // buffer(0)]], tex
	0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x3c, 0x66, 0x6c, 0x6f, // ture2d_array<flo
	0x61, 0x74, 0x3e, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, // at> tex_stereo_f
	0x62, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x30, 0x29, 0x5d, 0x5d, // b [[texture(0)]]
	0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // , sampler tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x5b, // ereo_fbSampler [
	0x5b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x29, 0x0a, 0x7b, // [sampler(0)]]).{
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, // .    xlatMtlMain
	0x5f, 0x6f, 0x75, 0x74, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x3d, 0x20, 0x7b, 0x7d, 0x3b, 0x0a, 0x20, // _out out = {};. 
	0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x33, 0x34, 0x33, 0x20, 0x3d, //    float3 _343 =
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, //  float3(in.v_tex
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, // coord0, 0.0);.  
	0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x33, 0x36, 0x34, 0x20, 0x3d, 0x20, //   float4 _364 = 
	0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2e, 0x73, 0x61, // tex_stereo_fb.sa
	0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // mple(tex_stereo_
	0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x33, 0x34, 0x33, 0x2e, // fbSampler, _343.
	0x78, 0x79, 0x2c, 0x20, 0x75, 0x69, 0x6e, 0x74, 0x28, 0x72, 0x69, 0x6e, 0x74, 0x28, 0x5f, 0x33, // xy, uint(rint(_3
	0x34, 0x33, 0x2e, 0x7a, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, // 43.z)), level(0.
	0x30, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, // 0));.    float3 
	0x5f, 0x33, 0x35, 0x31, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x69, 0x6e, // _351 = float3(in
	0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2c, 0x20, 0x31, 0x2e, // .v_texcoord0, 1.
	0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, // 0);.    float4 _
	0x33, 0x37, 0x34, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // 374 = tex_stereo
	0x5f, 0x66, 0x62, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, // _fb.sample(tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, // tereo_fbSampler,
	0x20, 0x5f, 0x33, 0x35, 0x31, 0x2e, 0x78, 0x79, 0x2c, 0x20, 0x75, 0x69, 0x6e, 0x74, 0x28, 0x72, //  _351.xy, uint(r
	0x69, 0x6e, 0x74, 0x28, 0x5f, 0x33, 0x35, 0x31, 0x2e, 0x7a, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, // int(_351.z)), le
	0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, // vel(0.0));.    f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x33, 0x37, 0x37, 0x20, 0x3d, 0x20, 0x5f, 0x33, 0x36, 0x34, // loat _377 = _364
	0x2e, 0x78, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x35, // .x;.    float _5
	0x39, 0x32, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x64, 0x6f, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, // 92;.    do.    {
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, 0x33, 0x37, // .        if (_37
	0x37, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, 0x34, 0x34, 0x39, 0x39, 0x39, 0x39, // 7 <= 0.040449999
	0x32, 0x37, 0x32, 0x38, 0x32, 0x33, 0x33, 0x33, 0x33, 0x37, 0x34, 0x30, 0x32, 0x33, 0x34, 0x33, // 2728233337402343
	0x37, 0x35, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, // 75).        {.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x35, 0x39, 0x32, 0x20, 0x3d, //           _592 =
	0x20, 0x5f, 0x33, 0x37, 0x37, 0x20, 0x2a, 0x20, 0x30, 0x2e, 0x30, 0x37, 0x37, 0x33, 0x39, 0x39, //  _377 * 0.077399
	0x33, 0x38, 0x30, 0x35, 0x30, 0x35, 0x30, 0x38, 0x34, 0x39, 0x39, 0x31, 0x34, 0x35, 0x35, 0x30, // 3805050849914550
	0x37, 0x38, 0x31, 0x32, 0x35, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 78125;.         
	0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //    break;.      
	0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, //   }.        else
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // .        {.     
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x35, 0x39, 0x32, 0x20, 0x3d, 0x20, 0x70, 0x6f, //        _592 = po
	0x77, 0x72, 0x28, 0x66, 0x6d, 0x61, 0x28, 0x5f, 0x33, 0x37, 0x37, 0x2c, 0x20, 0x30, 0x2e, 0x39, // wr(fma(_377, 0.9
	0x34, 0x37, 0x38, 0x36, 0x37, 0x32, 0x37, 0x34, 0x32, 0x38, 0x34, 0x33, 0x36, 0x32, 0x37, 0x39, // 4786727428436279
	0x32, 0x39, 0x36, 0x38, 0x37, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x32, 0x31, 0x33, 0x32, // 296875, 0.052132
	0x36, 0x39, 0x39, 0x36, 0x33, 0x38, 0x36, 0x30, 0x35, 0x31, 0x31, 0x37, 0x37, 0x39, 0x37, 0x38, // 6996386051177978
	0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x30, 0x30, 0x30, 0x30, // 515625), 2.40000
	0x30, 0x30, 0x39, 0x35, 0x33, 0x36, 0x37, 0x34, 0x33, 0x31, 0x36, 0x34, 0x30, 0x36, 0x32, 0x35, // 0095367431640625
	0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, // );.            b
	0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, // reak;.        }.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x20, 0x2f, //         break; /
	0x2f, 0x20, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x77, 0x6f, // / unreachable wo
	0x72, 0x6b, 0x61, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x20, 0x77, // rkaround.    } w
	0x68, 0x69, 0x6c, 0x65, 0x28, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, // hile(false);.   
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x33, 0x37, 0x39, 0x20, 0x3d, 0x20, 0x5f, 0x33, //  float _379 = _3
	0x36, 0x34, 0x2e, 0x79, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // 64.y;.    float 
	0x5f, 0x35, 0x39, 0x33, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x64, 0x6f, 0x0a, 0x20, 0x20, 0x20, // _593;.    do.   
	0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, //  {.        if (_
	0x33, 0x37, 0x39, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, 0x34, 0x34, 0x39, 0x39, // 379 <= 0.0404499
	0x39, 0x39, 0x32, 0x37, 0x32, 0x38, 0x32, 0x33, 0x33, 0x33, 0x33, 0x37, 0x34, 0x30, 0x32, 0x33, // 9927282333374023
	0x34, 0x33, 0x37, 0x35, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, // 4375).        {.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x35, 0x39, 0x33, //             _593
	0x20, 0x3d, 0x20, 0x5f, 0x33, 0x37, 0x39, 0x20, 0x2a, 0x20, 0x30, 0x2e, 0x30, 0x37, 0x37, 0x33, //  = _379 * 0.0773
	0x39, 0x39, 0x33, 0x38, 0x30, 0x35, 0x30, 0x35, 0x30, 0x38, 0x34, 0x39, 0x39, 0x31, 0x34, 0x35, // 9938050508499145
	0x35, 0x30, 0x37, 0x38, 0x31, 0x32, 0x35, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 5078125;.       
	0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, //      break;.    
	0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, //     }.        el
	0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, // se.        {.   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x35, 0x39, 0x33, 0x20, 0x3d, 0x20, //          _593 = 
	0x70, 0x6f, 0x77, 0x72, 0x28, 0x66, 0x6d, 0x61, 0x28, 0x5f, 0x33, 0x37, 0x39, 0x2c, 0x20, 0x30, // powr(fma(_379, 0
	0x2e, 0x39, 0x34, 0x37, 0x38, 0x36, 0x37, 0x32, 0x37, 0x34, 0x32, 0x38, 0x34, 0x33, 0x36, 0x32, // .947867274284362
	0x37, 0x39, 0x32, 0x39, 0x36, 0x38, 0x37, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x32, 0x31, // 79296875, 0.0521
	0x33, 0x32, 0x36, 0x39, 0x39, 0x36, 0x33, 0x38, 0x36, 0x30, 0x35, 0x31, 0x31, 0x37, 0x37, 0x39, // 3269963860511779
	0x37, 0x38, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x30, 0x30, // 78515625), 2.400
	0x30, 0x30, 0x30, 0x30, 0x39, 0x35, 0x33, 0x36, 0x37, 0x34, 0x33, 0x31, 0x36, 0x34, 0x30, 0x36, // 0000953674316406
	0x32, 0x35, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 25);.           
	0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //  break;.        
	0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, // }.        break;
	0x20, 0x2f, 0x2f, 0x20, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x20, //  // unreachable 
	0x77, 0x6f, 0x72, 0x6b, 0x61, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, // workaround.    }
	0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x28, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x20, //  while(false);. 
	0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x33, 0x38, 0x31, 0x20, 0x3d, 0x20, //    float _381 = 
	0x5f, 0x33, 0x36, 0x34, 0x2e, 0x7a, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, // _364.z;.    floa
	0x74, 0x20, 0x5f, 0x35, 0x39, 0x34, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x64, 0x6f, 0x0a, 0x20, // t _594;.    do. 
	0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, //    {.        if 
	0x28, 0x5f, 0x33, 0x38, 0x31, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, 0x34, 0x34, // (_381 <= 0.04044
	0x39, 0x39, 0x39, 0x39, 0x32, 0x37, 0x32, 0x38, 0x32, 0x33, 0x33, 0x33, 0x33, 0x37, 0x34, 0x30, // 9999272823333740
	0x32, 0x33, 0x34, 0x33, 0x37, 0x35, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 234375).        
	0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x35, // {.            _5
	0x39, 0x34, 0x20, 0x3d, 0x20, 0x5f, 0x33, 0x38, 0x31, 0x20, 0x2a, 0x20, 0x30, 0x2e, 0x30, 0x37, // 94 = _381 * 0.07
	0x37, 0x33, 0x39, 0x39, 0x33, 0x38, 0x30, 0x35, 0x30, 0x35, 0x30, 0x38, 0x34, 0x39, 0x39, 0x31, // 7399380505084991
	0x34, 0x35, 0x35, 0x30, 0x37, 0x38, 0x31, 0x32, 0x35, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // 455078125;.     
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, //        break;.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //       }.        
	0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, // else.        {. 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x35, 0x39, 0x34, 0x20, //            _594 
	0x3d, 0x20, 0x70, 0x6f, 0x77, 0x72, 0x28, 0x66, 0x6d, 0x61, 0x28, 0x5f, 0x33, 0x38, 0x31, 0x2c, // = powr(fma(_381,
	0x20, 0x30, 0x2e, 0x39, 0x34, 0x37, 0x38, 0x36, 0x37, 0x32, 0x37, 0x34, 0x32, 0x38, 0x34, 0x33, //  0.9478672742843
	0x36, 0x32, 0x37, 0x39, 0x32, 0x39, 0x36, 0x38, 0x37, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x35, // 6279296875, 0.05
	0x32, 0x31, 0x33, 0x32, 0x36, 0x39, 0x39, 0x36, 0x33, 0x38, 0x36, 0x30, 0x35, 0x31, 0x31, 0x37, // 2132699638605117
	0x37, 0x39, 0x37, 0x38, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, 0x34, // 7978515625), 2.4
	0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x39, 0x35, 0x33, 0x36, 0x37, 0x34, 0x33, 0x31, 0x36, 0x34, // 0000009536743164
	0x30, 0x36, 0x32, 0x35, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 0625);.         
	0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //    break;.      
	0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, //   }.        brea
	0x6b, 0x3b, 0x20, 0x2f, 0x2f, 0x20, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, // k; // unreachabl
	0x65, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x61, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x0a, 0x20, 0x20, 0x20, // e workaround.   
	0x20, 0x7d, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x28, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x29, 0x3b, //  } while(false);
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x34, 0x34, 0x30, 0x20, // .    float _440 
	0x3d, 0x20, 0x5f, 0x33, 0x37, 0x34, 0x2e, 0x78, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, // = _374.x;.    fl
	0x6f, 0x61, 0x74, 0x20, 0x5f, 0x35, 0x39, 0x38, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x64, 0x6f, // oat _598;.    do
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, // .    {.        i
	0x66, 0x20, 0x28, 0x5f, 0x34, 0x34, 0x30, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, // f (_440 <= 0.040
	0x34, 0x34, 0x39, 0x39, 0x39, 0x39, 0x32, 0x37, 0x32, 0x38, 0x32, 0x33, 0x33, 0x33, 0x33, 0x37, // 4499992728233337
	0x34, 0x30, 0x32, 0x33, 0x34, 0x33, 0x37, 0x35, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 40234375).      
	0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //   {.            
	0x5f, 0x35, 0x39, 0x38, 0x20, 0x3d, 0x20, 0x5f, 0x34, 0x34, 0x30, 0x20, 0x2a, 0x20, 0x30, 0x2e, // _598 = _440 * 0.
	0x30, 0x37, 0x37, 0x33, 0x39, 0x39, 0x33, 0x38, 0x30, 0x35, 0x30, 0x35, 0x30, 0x38, 0x34, 0x39, // 0773993805050849
	0x39, 0x31, 0x34, 0x35, 0x35, 0x30, 0x37, 0x38, 0x31, 0x32, 0x35, 0x3b, 0x0a, 0x20, 0x20, 0x20, // 91455078125;.   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, //          break;.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //         }.      
	0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, //   else.        {
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x35, 0x39, // .            _59
	0x38, 0x20, 0x3d, 0x20, 0x70, 0x6f, 0x77, 0x72, 0x28, 0x66, 0x6d, 0x61, 0x28, 0x5f, 0x34, 0x34, // 8 = powr(fma(_44
	0x30, 0x2c, 0x20, 0x30, 0x2e, 0x39, 0x34, 0x37, 0x38, 0x36, 0x37, 0x32, 0x37, 0x34, 0x32, 0x38, // 0, 0.94786727428
	0x34, 0x33, 0x36, 0x32, 0x37, 0x39, 0x32, 0x39, 0x36, 0x38, 0x37, 0x35, 0x2c, 0x20, 0x30, 0x2e, // 436279296875, 0.
	0x30, 0x35, 0x32, 0x31, 0x33, 0x32, 0x36, 0x39, 0x39, 0x36, 0x33, 0x38, 0x36, 0x30, 0x35, 0x31, // 0521326996386051
	0x31, 0x37, 0x37, 0x39, 0x37, 0x38, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x2c, 0x20, 0x32, // 177978515625), 2
	0x2e, 0x34, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x39, 0x35, 0x33, 0x36, 0x37, 0x34, 0x33, 0x31, // .400000095367431
	0x36, 0x34, 0x30, 0x36, 0x32, 0x35, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 640625);.       
	0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, //      break;.    
	0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, //     }.        br
	0x65, 0x61, 0x6b, 0x3b, 0x20, 0x2f, 0x2f, 0x20, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, // eak; // unreacha
	0x62, 0x6c, 0x65, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x61, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x0a, 0x20, // ble workaround. 
	0x20, 0x20, 0x20, 0x7d, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x28, 0x66, 0x61, 0x6c, 0x73, 0x65, //    } while(false
	0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x34, 0x34, // );.    float _44
	0x32, 0x20, 0x3d, 0x20, 0x5f, 0x33, 0x37, 0x34, 0x2e, 0x79, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, // 2 = _374.y;.    
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x35, 0x39, 0x39, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, // float _599;.    
	0x64, 0x6f, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // do.    {.       
	0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, 0x34, 0x34, 0x32, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, //  if (_442 <= 0.0
	0x34, 0x30, 0x34, 0x34, 0x39, 0x39, 0x39, 0x39, 0x32, 0x37, 0x32, 0x38, 0x32, 0x33, 0x33, 0x33, // 4044999927282333
	0x33, 0x37, 0x34, 0x30, 0x32, 0x33, 0x34, 0x33, 0x37, 0x35, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, // 3740234375).    
	0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //     {.          
	0x20, 0x20, 0x5f, 0x35, 0x39, 0x39, 0x20, 0x3d, 0x20, 0x5f, 0x34, 0x34, 0x32, 0x20, 0x2a, 0x20, //   _599 = _442 * 
	0x30, 0x2e, 0x30, 0x37, 0x37, 0x33, 0x39, 0x39, 0x33, 0x38, 0x30, 0x35, 0x30, 0x35, 0x30, 0x38, // 0.07739938050508
	0x34, 0x39, 0x39, 0x31, 0x34, 0x35, 0x35, 0x30, 0x37, 0x38, 0x31, 0x32, 0x35, 0x3b, 0x0a, 0x20, // 4991455078125;. 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, //            break
	0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, // ;.        }.    
	0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //     else.       
	0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, //  {.            _
	0x35, 0x39, 0x39, 0x20, 0x3d, 0x20, 0x70, 0x6f, 0x77, 0x72, 0x28, 0x66, 0x6d, 0x61, 0x28, 0x5f, // 599 = powr(fma(_
	0x34, 0x34, 0x32, 0x2c, 0x20, 0x30, 0x2e, 0x39, 0x34, 0x37, 0x38, 0x36, 0x37, 0x32, 0x37, 0x34, // 442, 0.947867274
	0x32, 0x38, 0x34, 0x33, 0x36, 0x32, 0x37, 0x39, 0x32, 0x39, 0x36, 0x38, 0x37, 0x35, 0x2c, 0x20, // 28436279296875, 
	0x30, 0x2e, 0x30, 0x35, 0x32, 0x31, 0x33, 0x32, 0x36, 0x39, 0x39, 0x36, 0x33, 0x38, 0x36, 0x30, // 0.05213269963860
	0x35, 0x31, 0x31, 0x37, 0x37, 0x39, 0x37, 0x38, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x2c, // 51177978515625),
	0x20, 0x32, 0x2e, 0x34, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x39, 0x35, 0x33, 0x36, 0x37, 0x34, //  2.4000000953674
	0x33, 0x31, 0x36, 0x34, 0x30, 0x36, 0x32, 0x35, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // 31640625);.     
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, //        break;.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //       }.        
	0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x20, 0x2f, 0x2f, 0x20, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, // break; // unreac
	0x68, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x61, 0x72, 0x6f, 0x75, 0x6e, 0x64, // hable workaround
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x28, 0x66, 0x61, 0x6c, // .    } while(fal
	0x73, 0x65, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, // se);.    float _
	0x34, 0x34, 0x34, 0x20, 0x3d, 0x20, 0x5f, 0x33, 0x37, 0x34, 0x2e, 0x7a, 0x3b, 0x0a, 0x20, 0x20, // 444 = _374.z;.  
	0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x36, 0x30, 0x30, 0x3b, 0x0a, 0x20, 0x20, //   float _600;.  
	0x20, 0x20, 0x64, 0x6f, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, //   do.    {.     
	0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, 0x34, 0x34, 0x34, 0x20, 0x3c, 0x3d, 0x20, 0x30, //    if (_444 <= 0
	0x2e, 0x30, 0x34, 0x30, 0x34, 0x34, 0x39, 0x39, 0x39, 0x39, 0x32, 0x37, 0x32, 0x38, 0x32, 0x33, // .040449999272823
	0x33, 0x33, 0x33, 0x37, 0x34, 0x30, 0x32, 0x33, 0x34, 0x33, 0x37, 0x35, 0x29, 0x0a, 0x20, 0x20, // 333740234375).  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //       {.        
	0x20, 0x20, 0x20, 0x20, 0x5f, 0x36, 0x30, 0x30, 0x20, 0x3d, 0x20, 0x5f, 0x34, 0x34, 0x34, 0x20, //     _600 = _444 
	0x2a, 0x20, 0x30, 0x2e, 0x30, 0x37, 0x37, 0x33, 0x39, 0x39, 0x33, 0x38, 0x30, 0x35, 0x30, 0x35, // * 0.077399380505
	0x30, 0x38, 0x34, 0x39, 0x39, 0x31, 0x34, 0x35, 0x35, 0x30, 0x37, 0x38, 0x31, 0x32, 0x35, 0x3b, // 084991455078125;
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, // .            bre
	0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, // ak;.        }.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, //       else.     
	0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //    {.           
	0x20, 0x5f, 0x36, 0x30, 0x30, 0x20, 0x3d, 0x20, 0x70, 0x6f, 0x77, 0x72, 0x28, 0x66, 0x6d, 0x61, //  _600 = powr(fma
	0x28, 0x5f, 0x34, 0x34, 0x34, 0x2c, 0x20, 0x30, 0x2e, 0x39, 0x34, 0x37, 0x38, 0x36, 0x37, 0x32, // (_444, 0.9478672
	0x37, 0x34, 0x32, 0x38, 0x34, 0x33, 0x36, 0x32, 0x37, 0x39, 0x32, 0x39, 0x36, 0x38, 0x37, 0x35, // 7428436279296875
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x32, 0x31, 0x33, 0x32, 0x36, 0x39, 0x39, 0x36, 0x33, 0x38, // , 0.052132699638
	0x36, 0x30, 0x35, 0x31, 0x31, 0x37, 0x37, 0x39, 0x37, 0x38, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, // 6051177978515625
	0x29, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x39, 0x35, 0x33, 0x36, // ), 2.40000009536
	0x37, 0x34, 0x33, 0x31, 0x36, 0x34, 0x30, 0x36, 0x32, 0x35, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, // 7431640625);.   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, //          break;.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //         }.      
	0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x20, 0x2f, 0x2f, 0x20, 0x75, 0x6e, 0x72, 0x65, //   break; // unre
	0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x61, 0x72, 0x6f, 0x75, // achable workarou
	0x6e, 0x64, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x28, 0x66, // nd.    } while(f
	0x61, 0x6c, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // alse);.    float
	0x34, 0x20, 0x5f, 0x35, 0x31, 0x38, 0x20, 0x3d, 0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, // 4 _518 = (float4
	0x28, 0x5f, 0x35, 0x39, 0x32, 0x2c, 0x20, 0x5f, 0x35, 0x39, 0x33, 0x2c, 0x20, 0x5f, 0x35, 0x39, // (_592, _593, _59
	0x34, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, // 4, 1.0) * _mtl_u
	0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x29, // .Stereo_LeftMat)
	0x20, 0x2b, 0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x35, 0x39, 0x38, 0x2c, //  + (float4(_598,
	0x20, 0x5f, 0x35, 0x39, 0x39, 0x2c, 0x20, 0x5f, 0x36, 0x30, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, //  _599, _600, 1.0
	0x29, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, // ) * _mtl_u.Stere
	0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, // o_RightMat);.   
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x35, 0x32, 0x33, 0x20, 0x3d, 0x20, 0x5f, 0x35, //  float _523 = _5
	0x31, 0x38, 0x2e, 0x78, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // 18.x;.    float 
	0x5f, 0x36, 0x30, 0x34, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, 0x35, // _604;.    if (_5
	0x32, 0x33, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x33, 0x31, 0x33, 0x30, 0x38, 0x30, // 23 <= 0.00313080
	0x30, 0x30, 0x39, 0x30, 0x37, 0x33, 0x30, 0x31, 0x39, 0x30, 0x32, 0x37, 0x37, 0x30, 0x39, 0x39, // 0090730190277099
	0x36, 0x30, 0x39, 0x33, 0x37, 0x35, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, // 609375).    {.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x36, 0x30, 0x34, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, //       _604 = 12.
	0x39, 0x32, 0x30, 0x30, 0x30, 0x30, 0x30, 0x37, 0x36, 0x32, 0x39, 0x33, 0x39, 0x34, 0x35, 0x33, // 9200000762939453
	0x31, 0x32, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x35, 0x32, 0x33, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, // 125 * _523;.    
	0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, // }.    else.    {
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x36, 0x30, 0x34, 0x20, 0x3d, 0x20, // .        _604 = 
	0x66, 0x6d, 0x61, 0x28, 0x31, 0x2e, 0x30, 0x35, 0x34, 0x39, 0x39, 0x39, 0x39, 0x34, 0x37, 0x35, // fma(1.0549999475
	0x34, 0x37, 0x39, 0x31, 0x32, 0x35, 0x39, 0x37, 0x36, 0x35, 0x36, 0x32, 0x35, 0x2c, 0x20, 0x70, // 4791259765625, p
	0x6f, 0x77, 0x72, 0x28, 0x5f, 0x35, 0x32, 0x33, 0x2c, 0x20, 0x30, 0x2e, 0x34, 0x31, 0x36, 0x36, // owr(_523, 0.4166
	0x36, 0x36, 0x36, 0x35, 0x36, 0x37, 0x33, 0x32, 0x35, 0x35, 0x39, 0x32, 0x30, 0x34, 0x31, 0x30, // 6665673255920410
	0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x2c, 0x20, 0x2d, 0x30, 0x2e, 0x30, 0x35, 0x34, 0x39, 0x39, // 15625), -0.05499
	0x39, 0x39, 0x39, 0x39, 0x37, 0x30, 0x31, 0x39, 0x37, 0x36, 0x37, 0x37, 0x36, 0x31, 0x32, 0x33, // 9999701976776123
	0x30, 0x34, 0x36, 0x38, 0x37, 0x35, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, // 046875);.    }. 
	0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x35, 0x32, 0x35, 0x20, 0x3d, 0x20, //    float _525 = 
	0x5f, 0x35, 0x31, 0x38, 0x2e, 0x79, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, // _518.y;.    floa
	0x74, 0x20, 0x5f, 0x36, 0x30, 0x35, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, // t _605;.    if (
	0x5f, 0x35, 0x32, 0x35, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x33, 0x31, 0x33, 0x30, // _525 <= 0.003130
	0x38, 0x30, 0x30, 0x30, 0x39, 0x30, 0x37, 0x33, 0x30, 0x31, 0x39, 0x30, 0x32, 0x37, 0x37, 0x30, // 8000907301902770
	0x39, 0x39, 0x36, 0x30, 0x39, 0x33, 0x37, 0x35, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, // 99609375).    {.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x36, 0x30, 0x35, 0x20, 0x3d, 0x20, 0x31, //         _605 = 1
	0x32, 0x2e, 0x39, 0x32, 0x30, 0x30, 0x30, 0x30, 0x30, 0x37, 0x36, 0x32, 0x39, 0x33, 0x39, 0x34, // 2.92000007629394
	0x35, 0x33, 0x31, 0x32, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x35, 0x32, 0x35, 0x3b, 0x0a, 0x20, 0x20, // 53125 * _525;.  
	0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, //   }.    else.   
	0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x36, 0x30, 0x35, 0x20, //  {.        _605 
	0x3d, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x31, 0x2e, 0x30, 0x35, 0x34, 0x39, 0x39, 0x39, 0x39, 0x34, // = fma(1.05499994
	0x37, 0x35, 0x34, 0x37, 0x39, 0x31, 0x32, 0x35, 0x39, 0x37, 0x36, 0x35, 0x36, 0x32, 0x35, 0x2c, // 754791259765625,
	0x20, 0x70, 0x6f, 0x77, 0x72, 0x28, 0x5f, 0x35, 0x32, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x34, 0x31, //  powr(_525, 0.41
	0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x37, 0x33, 0x32, 0x35, 0x35, 0x39, 0x32, 0x30, 0x34, // 6666656732559204
	0x31, 0x30, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x2c, 0x20, 0x2d, 0x30, 0x2e, 0x30, 0x35, 0x34, // 1015625), -0.054
	0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x37, 0x30, 0x31, 0x39, 0x37, 0x36, 0x37, 0x37, 0x36, 0x31, // 9999997019767761
	0x32, 0x33, 0x30, 0x34, 0x36, 0x38, 0x37, 0x35, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, // 23046875);.    }
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x35, 0x32, 0x37, 0x20, // .    float _527 
	0x3d, 0x20, 0x5f, 0x35, 0x31, 0x38, 0x2e, 0x7a, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, // = _518.z;.    fl
	0x6f, 0x61, 0x74, 0x20, 0x5f, 0x36, 0x30, 0x36, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, // oat _606;.    if
	0x20, 0x28, 0x5f, 0x35, 0x32, 0x37, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x33, 0x31, //  (_527 <= 0.0031
	0x33, 0x30, 0x38, 0x30, 0x30, 0x30, 0x39, 0x30, 0x37, 0x33, 0x30, 0x31, 0x39, 0x30, 0x32, 0x37, // 3080009073019027
	0x37, 0x30, 0x39, 0x39, 0x36, 0x30, 0x39, 0x33, 0x37, 0x35, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, // 7099609375).    
	0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x36, 0x30, 0x36, 0x20, 0x3d, // {.        _606 =
	0x20, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x30, 0x30, 0x30, 0x30, 0x30, 0x37, 0x36, 0x32, 0x39, 0x33, //  12.920000076293
	0x39, 0x34, 0x35, 0x33, 0x31, 0x32, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x35, 0x32, 0x37, 0x3b, 0x0a, // 9453125 * _527;.
	0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, //     }.    else. 
	0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x36, 0x30, //    {.        _60
	0x36, 0x20, 0x3d, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x31, 0x2e, 0x30, 0x35, 0x34, 0x39, 0x39, 0x39, // 6 = fma(1.054999
	0x39, 0x34, 0x37, 0x35, 0x34, 0x37, 0x39, 0x31, 0x32, 0x35, 0x39, 0x37, 0x36, 0x35, 0x36, 0x32, // 9475479125976562
	0x35, 0x2c, 0x20, 0x70, 0x6f, 0x77, 0x72, 0x28, 0x5f, 0x35, 0x32, 0x37, 0x2c, 0x20, 0x30, 0x2e, // 5, powr(_527, 0.
	0x34, 0x31, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x37, 0x33, 0x32, 0x35, 0x35, 0x39, 0x32, // 4166666567325592
	0x30, 0x34, 0x31, 0x30, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x2c, 0x20, 0x2d, 0x30, 0x2e, 0x30, // 041015625), -0.0
	0x35, 0x34, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x37, 0x30, 0x31, 0x39, 0x37, 0x36, 0x37, 0x37, // 5499999970197677
	0x36, 0x31, 0x32, 0x33, 0x30, 0x34, 0x36, 0x38, 0x37, 0x35, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, // 6123046875);.   
	0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x6f, 0x75, 0x74, 0x2e, 0x62, 0x67, 0x66, 0x78, 0x5f, //  }.    out.bgfx_
	0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, // FragData0 = floa
	0x74, 0x34, 0x28, 0x5f, 0x36, 0x30, 0x34, 0x2c, 0x20, 0x5f, 0x36, 0x30, 0x35, 0x2c, 0x20, 0x5f, // t4(_604, _605, _
	0x36, 0x30, 0x36, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x72, // 606, 1.0);.    r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6f, 0x75, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x0a, 0x00, 0x00, // eturn out;.}....
	0xc0, 0x00,                                                                                     // ..
};
static const uint8_t fs_pp_stereo_anaglyph_lin_srgb_nodesat_st_essl[9088] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6d, 0x23, // FSH.Jc._......m#
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x33, 0x32, 0x30, 0x20, 0x65, // ..#version 320 e
	0x73, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, // s.#define attrib
	0x75, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x76, // ute in.#define v
	0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, // arying in.precis
	0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3b, // ion highp float;
	0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, // .precision highp
	0x20, 0x69, 0x6e, 0x74, 0x3b, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, //  int;.precision 
	0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, // highp sampler2DA
	0x72, 0x72, 0x61, 0x79, 0x3b, 0x0a, 0x23, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, // rray;.#extension
	0x20, 0x47, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x74, //  GL_EXT_shader_t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6c, 0x6f, 0x64, 0x20, 0x3a, 0x20, 0x65, 0x6e, 0x61, // exture_lod : ena
	0x62, 0x6c, 0x65, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, // ble.#define text
	0x75, 0x72, 0x65, 0x32, 0x44, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, // ure2DLod      te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x4c, 0x6f, 0x64, 0x45, 0x58, 0x54, 0x0a, 0x23, 0x64, // xture2DLodEXT.#d
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x47, // efine texture2DG
	0x72, 0x61, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, // rad     texture2
	0x44, 0x47, 0x72, 0x61, 0x64, 0x45, 0x58, 0x54, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, // DGradEXT.#define
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x4c, 0x6f, //  texture2DProjLo
	0x64, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, // d  texture2DProj
	0x4c, 0x6f, 0x64, 0x45, 0x58, 0x54, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, // LodEXT.#define t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, // exture2DProjGrad
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, //  texture2DProjGr
	0x61, 0x64, 0x45, 0x58, 0x54, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, // adEXT.#define te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, // xtureCubeLod    
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x4c, 0x6f, 0x64, 0x45, 0x58, // textureCubeLodEX
	0x54, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // T.#define textur
	0x65, 0x43, 0x75, 0x62, 0x65, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, // eCubeGrad   text
	0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x47, 0x72, 0x61, 0x64, 0x45, 0x58, 0x54, 0x0a, 0x23, // ureCubeGradEXT.#
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x28, // define shadow2D(
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, // _sampler, _coord
	0x29, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, // ) texture(_sampl
	0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x0a, 0x23, 0x64, 0x65, 0x66, // er, _coord).#def
	0x69, 0x6e, 0x65, 0x20, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, // ine shadow2DProj
	0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, // (_sampler, _coor
	0x64, 0x29, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, // d) textureProj(_
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, // sampler, _coord)
	0x0a, 0x23, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x47, 0x4c, 0x5f, 0x45, // .#extension GL_E
	0x58, 0x54, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, // XT_texture_array
	0x20, 0x3a, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x0a, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x65, //  : enable.out me
	0x64, 0x69, 0x75, 0x6d, 0x70, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, // diump vec4 bgfx_
	0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, // FragColor;.varyi
	0x6e, 0x67, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x5f, 0x65, 0x79, 0x65, 0x3b, 0x0a, // ng float v_eye;.
	0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x5f, 0x74, // varying vec2 v_t
	0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, // excoord0;.vec3 i
	0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, // nstMul(vec3 _vec
	0x2c, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, // , mat3 _mtx) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, // eturn ( (_vec) *
	0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, //  (_mtx) ); }.vec
	0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, // 3 instMul(mat3 _
	0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, // mtx, vec3 _vec) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, // { return ( (_mtx
	0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, // ) * (_vec) ); }.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, // vec4 instMul(vec
	0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, // 4 _vec, mat4 _mt
	0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, // x) { return ( (_
	0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, // vec) * (_mtx) );
	0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, //  }.vec4 instMul(
	0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // mat4 _mtx, vec4 
	0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // _vec) { return (
	0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, //  (_mtx) * (_vec)
	0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, 0x70, 0x28, //  ); }.float rcp(
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // float _a) { retu
	0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, // rn 1.0/_a; }.vec
	0x32, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, // 2 rcp(vec2 _a) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, //  return vec2(1.0
	0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x70, // )/_a; }.vec3 rcp
	0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // (vec3 _a) { retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, // rn vec3(1.0)/_a;
	0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x34, //  }.vec4 rcp(vec4
	0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, //  _a) { return ve
	0x63, 0x34, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, // c4(1.0)/_a; }.ve
	0x63, 0x32, 0x20, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, // c2 vec2_splat(fl
	0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // oat _x) { return
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, //  vec2(_x, _x); }
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, // .vec3 vec3_splat
	0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // (float _x) { ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, // urn vec3(_x, _x,
	0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, 0x65, 0x63, //  _x); }.vec4 vec
	0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, // 4_splat(float _x
	0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, // ) { return vec4(
	0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, // _x, _x, _x, _x);
	0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, //  }.uvec2 uvec2_s
	0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, // plat(uint _x) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, // return uvec2(_x,
	0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, 0x75, 0x76, //  _x); }.uvec3 uv
	0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, // ec3_splat(uint _
	0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, // x) { return uvec
	0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, // 3(_x, _x, _x); }
	0x0a, 0x75, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, // .uvec4 uvec4_spl
	0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // at(uint _x) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, // turn uvec4(_x, _
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x6d, 0x61, // x, _x, _x); }.ma
	0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, // t4 mtxFromRows(v
	0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, // ec4 _0, vec4 _1,
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, //  vec4 _2, vec4 _
	0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, // 3).{.return tran
	0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, // spose(mat4(_0, _
	0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // 1, _2, _3) );.}.
	0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, // mat4 mtxFromCols
	0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, // (vec4 _0, vec4 _
	0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // 1, vec4 _2, vec4
	0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, //  _3).{.return ma
	0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, // t4(_0, _1, _2, _
	0x33, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, // 3);.}.mat3 mtxFr
	0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, // omRows(vec3 _0, 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, // vec3 _1, vec3 _2
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, // ).{.return trans
	0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, // pose(mat3(_0, _1
	0x2c, 0x20, 0x5f, 0x32, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, // , _2) );.}.mat3 
	0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, // mtxFromCols(vec3
	0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, //  _0, vec3 _1, ve
	0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // c3 _2).{.return 
	0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, // mat3(_0, _1, _2)
	0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, // ;.}.uniform vec4
	0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, //  u_viewRect;.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, // form vec4 u_view
	0x54, 0x65, 0x78, 0x65, 0x6c, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, // Texel;.uniform m
	0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // at4 u_view;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, // orm mat4 u_invVi
	0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, // ew;.uniform mat4
	0x20, 0x75, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, //  u_proj;.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, 0x6a, 0x3b, //  mat4 u_invProj;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, // .uniform mat4 u_
	0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // viewProj;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, // m mat4 u_invView
	0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, // Proj;.uniform ma
	0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, 0x3b, 0x0a, // t4 u_model[32];.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, // uniform mat4 u_m
	0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // odelView;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, // m mat4 u_modelVi
	0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // ewProj;.uniform 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x66, 0x34, // vec4 u_alphaRef4
	0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, // ;.float sqr(cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // t float v).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, // urn v*v;.}.vec2 
	0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, // sqr(const vec2 v
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, // ).{.return v*v;.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, // }.vec3 sqr(const
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, //  vec3 v).{.retur
	0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6d, 0x75, // n v*v;.}.vec3 mu
	0x6c, 0x5f, 0x77, 0x31, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // l_w1(const vec3 
	0x76, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x29, // v, const mat4 m)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2e, 0x78, 0x2a, 0x6d, 0x5b, // .{.return v.x*m[
	0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x79, 0x2a, 0x6d, 0x5b, // 0].xyz + (v.y*m[
	0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x7a, 0x2a, 0x6d, 0x5b, // 1].xyz + (v.z*m[
	0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x6d, 0x5b, 0x33, 0x5d, 0x2e, 0x78, 0x79, // 2].xyz + m[3].xy
	0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x63, 0x6f, // z));.}.float aco
	0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x63, // s_approx_divPI(c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, // onst float v).{.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, // const float x = 
	0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, // abs(v);.if(1. - 
	0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, // x <= 0.000061035
	0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, // 15625).return (v
	0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x20, 0x3a, 0x20, 0x31, //  >= 0.) ? 0. : 1
	0x2e, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, // .;.const float r
	0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, // es = ((-0.155972
	0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, // /3.1415926535897
	0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, // 9323846264338327
	0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, // 95) * x + (1.564
	0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, // 67/3.14159265358
	0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, // 9793238462643383
	0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, // 2795) ) * sqrt(1
	0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // . - x);.return (
	0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, // v >= 0.) ? res :
	0x20, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, //  1. - res;.}.flo
	0x61, 0x74, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, // at atan2_approx_
	0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, // div2PI(const flo
	0x61, 0x74, 0x20, 0x79, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, // at y, const floa
	0x74, 0x20, 0x78, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, // t x).{.const flo
	0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x79, // at abs_y = abs(y
	0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, // );.const float a
	0x62, 0x73, 0x5f, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x78, 0x29, 0x3b, 0x0a, 0x69, // bs_x = abs(x);.i
	0x66, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, // f(abs_x <= 0.000
	0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x20, 0x26, 0x26, 0x20, 0x61, // 06103515625 && a
	0x62, 0x73, 0x5f, 0x79, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, // bs_y <= 0.000061
	0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // 03515625).return
	0x20, 0x30, 0x2e, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, //  0.;.const float
	0x20, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2d, 0x20, 0x61, 0x62, //  r = (abs_x - ab
	0x73, 0x5f, 0x79, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2b, 0x20, // s_y) / (abs_x + 
	0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // abs_y);.const fl
	0x6f, 0x61, 0x74, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x78, 0x20, // oat angle = ((x 
	0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x28, 0x33, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x20, // < 0.) ? (3./8.) 
	0x3a, 0x20, 0x28, 0x31, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x29, 0x0a, 0x2b, 0x20, 0x28, 0x30, 0x2e, // : (1./8.)).+ (0.
	0x32, 0x31, 0x31, 0x38, 0x36, 0x38, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, // 211868 /(2.*3.14
	0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, // 1592653589793238
	0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, // 4626433832795) *
	0x20, 0x72, 0x20, 0x2a, 0x20, 0x72, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x39, 0x38, 0x37, 0x33, 0x30, //  r * r - 0.98730
	0x35, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, // 5 /(2.*3.1415926
	0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, // 5358979323846264
	0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x78, // 33832795)) * ((x
	0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x72, 0x20, 0x3a, 0x20, 0x72, 0x29, //  < 0.) ? -r : r)
	0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x79, 0x20, 0x3c, 0x20, 0x30, 0x2e, // ;.return (y < 0.
	0x29, 0x20, 0x3f, 0x20, 0x2d, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3a, 0x20, 0x61, 0x6e, 0x67, // ) ? -angle : ang
	0x6c, 0x65, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x73, 0x69, 0x6e, // le;.}.float asin
	0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x63, 0x6f, // _approx_divPI(co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x63, // nst float v).{.c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, // onst float x = a
	0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, // bs(v);.if(1. - x
	0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, //  <= 0.0000610351
	0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, // 5625).return (v 
	0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x3a, 0x20, 0x2d, // >= 0.) ? 0.5 : -
	0x30, 0x2e, 0x35, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // 0.5;.const float
	0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, //  res = ((-0.1559
	0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, // 72/3.14159265358
	0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, // 9793238462643383
	0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, // 2795) * x + (1.5
	0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, // 6467/3.141592653
	0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, // 5897932384626433
	0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, // 832795) ) * sqrt
	0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // (1. - x);.return
	0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, //  (v >= 0.) ? 0.5
	0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, //  - res : -0.5 + 
	0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x61, 0x79, 0x5f, // res;.}.vec2 ray_
	0x74, 0x6f, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x75, 0x6c, // to_equirectangul
	0x61, 0x72, 0x5f, 0x75, 0x76, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, // ar_uv(const vec3
	0x20, 0x72, 0x61, 0x79, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, //  ray).{.return v
	0x65, 0x63, 0x32, 0x28, 0x0a, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, // ec2(.0.5 + atan2
	0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x72, // _approx_div2PI(r
	0x61, 0x79, 0x2e, 0x79, 0x2c, 0x20, 0x72, 0x61, 0x79, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x61, 0x63, // ay.y, ray.x),.ac
	0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, // os_approx_divPI(
	0x72, 0x61, 0x79, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // ray.z));.}.float
	0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, //  InvsRGB(const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, // loat color).{.if
	0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, //  (color <= 0.040
	0x34, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // 45).return color
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x29, 0x3b, 0x0a, //  * (1.0/12.92);.
	0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, // else.return pow(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, // color * (1.0/1.0
	0x35, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x2f, 0x31, 0x2e, 0x30, // 55) + (0.055/1.0
	0x35, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // 55), 2.4);.}.flo
	0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x63, 0x6f, 0x6e, // at InvRec709(con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, // st float color).
	0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, // {.if (color <= 0
	0x2e, 0x30, 0x38, 0x31, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, // .081).return col
	0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x34, 0x2e, 0x35, 0x29, 0x3b, 0x0a, // or * (1.0/4.5);.
	0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, // else.return pow(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, // color * (1.0/1.0
	0x39, 0x39, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x2f, 0x31, 0x2e, 0x30, // 99) + (0.099/1.0
	0x39, 0x39, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x3b, 0x0a, // 99), 1.0/0.45);.
	0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, // }.float InvGamma
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, // (const float col
	0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x49, 0x6e, 0x76, // or).{.return Inv
	0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // sRGB(color);.}.v
	0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, // ec3 InvGamma(con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, // st vec3 color).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x49, 0x6e, 0x76, // .return vec3(Inv
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x49, // Gamma(color.x),I
	0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, // nvGamma(color.y)
	0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, // ,InvGamma(color.
	0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x54, // z));.}.vec3 InvT
	0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, // oneMap(const vec
	0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, // 3 color).{.const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x20, 0x3d, //  float inv_2bh =
	0x20, 0x30, 0x2e, 0x35, 0x2f, 0x30, 0x2e, 0x32, 0x35, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, //  0.5/0.25;.const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x34, 0x2e, 0x30, 0x2a, //  float bh = 4.0*
	0x30, 0x2e, 0x32, 0x35, 0x20, 0x2d, 0x20, 0x32, 0x2e, 0x30, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // 0.25 - 2.0;.retu
	0x72, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, // rn (color - 1.0 
	0x2b, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2a, 0x28, 0x63, 0x6f, // + sqrt(color*(co
	0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x20, 0x62, 0x68, 0x29, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, // lor + bh) + 1.0)
	0x29, 0x2a, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // )*inv_2bh;.}.flo
	0x61, 0x74, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // at sRGB(const fl
	0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, // oat f).{.float s
	0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x33, // ;.if (f <= 0.003
	0x31, 0x33, 0x30, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x20, // 1308).s = 12.92 
	0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, // * f;.else.s = 1.
	0x30, 0x35, 0x35, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x31, 0x2e, 0x30, // 055 * pow(f, 1.0
	0x2f, 0x32, 0x2e, 0x34, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x3b, 0x0a, 0x72, // /2.4) - 0.055;.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // eturn s;.}.float
	0x20, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, //  Rec709(const fl
	0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, // oat f).{.float s
	0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, // ;.if (f <= 0.018
	0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x34, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, // ).s = 4.5 * f;.e
	0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x20, 0x2a, 0x20, // lse.s = 1.099 * 
	0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x20, 0x2d, 0x20, 0x30, // pow(f, 0.45) - 0
	0x2e, 0x30, 0x39, 0x39, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, // .099;.return s;.
	0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, // }.float FBGamma(
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // const float colo
	0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x52, 0x47, 0x42, // r).{.return sRGB
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, // (color);.}.vec2 
	0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // FBGamma(const ve
	0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, // c2 color).{.retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, // rn vec2(FBGamma(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, // color.x),FBGamma
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // (color.y));.}.ve
	0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, // c3 FBGamma(const
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, //  vec3 color).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, // eturn vec3(FBGam
	0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, // ma(color.x),FBGa
	0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x46, 0x42, 0x47, // mma(color.y),FBG
	0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, // amma(color.z));.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x32, 0x32, // }.vec3 FBGamma22
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // (const vec3 colo
	0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, // r).{.return vec3
	0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x2c, 0x20, 0x31, 0x2e, // (pow(color.x, 1.
	0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // 0/2.2),pow(color
	0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, // .y, 1.0/2.2),pow
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, // (color.z, 1.0/2.
	0x32, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x54, // 2));.}.float FBT
	0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, // oneMap(const flo
	0x61, 0x74, 0x20, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6c, // at l).{.return l
	0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, //  * ((l*0.25 + 1.
	0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, // 0) / (l + 1.0));
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, // .}.vec2 FBToneMa
	0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, // p(const vec2 col
	0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, // or).{.const floa
	0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, // t l = dot(color,
	0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2b, 0x30, 0x2e, // vec2(0.176204+0.
	0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x2c, 0x30, 0x2e, 0x38, 0x31, // 0108109*0.5,0.81
	0x32, 0x39, 0x38, 0x35, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, // 2985+0.0108109*0
	0x2e, 0x35, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, // .5));.return col
	0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, // or * ((l*0.25 + 
	0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, // 1.0) / (l + 1.0)
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, // );.}.vec3 FBTone
	0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, // Map(const vec3 c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // olor).{.const fl
	0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // oat l = dot(colo
	0x72, 0x2c, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2c, // r,vec3(0.176204,
	0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2c, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, // 0.812985,0.01081
	0x30, 0x39, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, // 09));.return col
	0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, // or * ((l*0.25 + 
	0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, // 1.0) / (l + 1.0)
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, // );.}.vec4 Additi
	0x76, 0x65, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // ve(const vec4 cB
	0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // ase, const vec4 
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // cBlend, const fl
	0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, // oat percent).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2b, 0x20, 0x63, 0x42, // eturn cBase + cB
	0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, // lend*percent;.}.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6e, // vec3 Screen (con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, // st vec3 cBase, c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, // onst vec3 cBlend
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, // ).{.return 1.0 -
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, //  (1.0 - cBase) *
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, //  (1.0 - cBlend);
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, // .}.vec4 Screen (
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, // const vec4 cBase
	0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, // , const vec4 cBl
	0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, // end).{.return 1.
	0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, // 0 - (1.0 - cBase
	0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // ) * (1.0 - cBlen
	0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, // d);.}.vec3 Scree
	0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, // nHDR (const vec3
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, //  cBase, const ve
	0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // c3 cBlend).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, // urn max(1.0 - (1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, // .0 - cBase) * (1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, // .0 - cBlend), ve
	0x63, 0x33, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, // c3(0.,0.,0.));.}
	0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, // .vec4 ScreenHDR 
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, // (const vec4 cBas
	0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // e, const vec4 cB
	0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, // lend).{.return m
	0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, // ax(1.0 - (1.0 - 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, // cBase) * (1.0 - 
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, // cBlend), vec4(0.
	0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // ,0.,0.,0.));.}.v
	0x65, 0x63, 0x34, 0x20, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x20, 0x28, 0x63, 0x6f, // ec4 Multiply (co
	0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, // nst vec4 cBase, 
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // const vec4 cBlen
	0x64, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, // d, const float p
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // ercent).{.return
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2a, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, //  cBase * cBlend*
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, // percent;.}.vec4 
	0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, // Overlay (const v
	0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, // ec4 cBase, const
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, //  vec4 cBlend).{.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, // vec4 cNew = step
	0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, // (0.5, cBase);.cN
	0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, // ew = mix(cBase*c
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, // Blend*2.0, 1.0-2
	0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, // .0*(1.0-cBase)*(
	0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, // 1.0-cBlend), cNe
	0x77, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, // w);.return cNew;
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x48, // .}.vec4 OverlayH
	0x44, 0x52, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, // DR (const vec4 c
	0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, // Base, const vec4
	0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, //  cBlend).{.vec4 
	0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, // cNew = step(0.5,
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, //  cBase);.cNew = 
	0x6d, 0x61, 0x78, 0x28, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, // max(mix(cBase*cB
	0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, // lend*2.0, 1.0-2.
	0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, // 0*(1.0-cBase)*(1
	0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, // .0-cBlend), cNew
	0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, // ), vec4(0.,0.,0.
	0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, // ,0.));.return cN
	0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x73, 0x5f, 0x68, // ew;.}.vec3 cos_h
	0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // emisphere_sample
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x29, 0x0a, 0x7b, // (const vec2 t).{
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x68, 0x69, // .const float phi
	0x20, 0x3d, 0x20, 0x74, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x28, 0x32, 0x2e, 0x30, 0x2a, 0x33, 0x2e, //  = t.y * (2.0*3.
	0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, // 1415926535897932
	0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, // 384626433832795)
	0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, // ;.const float co
	0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, // sTheta = sqrt(1.
	0x30, 0x20, 0x2d, 0x20, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // 0 - t.x);.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, // float sinTheta =
	0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, //  sqrt(t.x);.floa
	0x74, 0x20, 0x73, 0x70, 0x2c, 0x63, 0x70, 0x3b, 0x0a, 0x73, 0x69, 0x6e, 0x63, 0x6f, 0x73, 0x28, // t sp,cp;.sincos(
	0x70, 0x68, 0x69, 0x2c, 0x73, 0x70, 0x2c, 0x63, 0x70, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // phi,sp,cp);.retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x63, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, // rn vec3(cp * sin
	0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, // Theta, cosTheta,
	0x20, 0x73, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x29, 0x3b, //  sp * sinTheta);
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, // .}.vec3 rotate_t
	0x6f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x28, 0x63, // o_vector_upper(c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x63, // onst vec3 vec, c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, // onst vec3 normal
	0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, // ).{.if(normal.y 
	0x3e, 0x20, 0x2d, 0x30, 0x2e, 0x39, 0x39, 0x39, 0x39, 0x39, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, // > -0.99999).{.co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x20, 0x3d, 0x20, 0x31, 0x2e, // nst float h = 1.
	0x30, 0x2f, 0x28, 0x31, 0x2e, 0x30, 0x2b, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x29, // 0/(1.0+normal.y)
	0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, // ;.const float hz
	0x20, 0x3d, 0x20, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x3b, 0x0a, 0x63, //  = h*normal.z;.c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x3d, // onst float hzx =
	0x20, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x3b, 0x0a, 0x72, 0x65, //  hz*normal.x;.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x78, // turn vec3(.vec.x
	0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x7a, 0x2a, //  * (normal.y+hz*
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x29, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, // normal.z) + vec.
	0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, // y * normal.x - v
	0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, // ec.z * hzx,.vec.
	0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x2d, 0x20, 0x76, // y * normal.y - v
	0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, // ec.x * normal.x 
	0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, // - vec.z * normal
	0x2e, 0x7a, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, // .z,.vec.y * norm
	0x61, 0x6c, 0x2e, 0x7a, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x68, // al.z - vec.x * h
	0x7a, 0x78, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, // zx + vec.z * (no
	0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, // rmal.y+h*normal.
	0x78, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // x*normal.x));.}.
	0x65, 0x6c, 0x73, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x2d, 0x76, 0x65, 0x63, // else return -vec
	0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, // ;.}.uniform vec4
	0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x53, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, //  Stereo_Saturati
	0x6f, 0x6e, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, // on;.uniform vec4
	0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, //  Stereo_MS_ZPD_Y
	0x41, 0x78, 0x69, 0x73, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, // Axis;.uniform sa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x20, 0x74, 0x65, 0x78, // mpler2DArray tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // _stereo_fb;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, 0x72, 0x72, // orm sampler2DArr
	0x61, 0x79, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, // ay tex_stereo_de
	0x70, 0x74, 0x68, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, // pth;.uniform vec
	0x34, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, 0x76, 0x65, // 4 w_h_height;.ve
	0x63, 0x33, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, // c3 gatherEyeColo
	0x72, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x69, // r(vec2 u, bool i
	0x73, 0x4c, 0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // sLeft).{.return 
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x6f, // texture2DArrayLo
	0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, // d(tex_stereo_fb,
	0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, 0x20, //  vec3(u.x, u.y, 
	0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x30, 0x20, 0x3a, 0x20, 0x31, // isLeft ? 0.0 : 1
	0x2e, 0x30, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x7d, 0x0a, // .0), 0.).rgb;.}.
	0x76, 0x6f, 0x69, 0x64, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x52, // void gatherLeftR
	0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, // ightColors(vec2 
	0x75, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x63, 0x6f, 0x6c, // u, out vec3 lcol
	0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x6f, 0x6c, 0x29, // , out vec3 rcol)
	0x0a, 0x7b, 0x0a, 0x6c, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // .{.lcol = textur
	0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, // e2DArrayLod(tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, // stereo_fb, vec3(
	0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2c, 0x20, 0x30, // u.x, u.y, 0.), 0
	0x2e, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x72, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, // .).xyz;.rcol = t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x6f, 0x64, // exture2DArrayLod
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, // (tex_stereo_fb, 
	0x76, 0x65, 0x63, 0x33, 0x28, 0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, 0x20, 0x31, // vec3(u.x, u.y, 1
	0x2e, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, // .), 0.).xyz;.}.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, // niform mat4 Ster
	0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // eo_LeftMat;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // orm mat4 Stereo_
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // RightMat;.unifor
	0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, // m vec4 Stereo_Le
	0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, // ftLuminance_Gamm
	0x61, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // a;.uniform vec4 
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, // Stereo_RightLumi
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x3b, 0x0a, // nance_DynDesat;.
	0x76, 0x6f, 0x69, 0x64, 0x20, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x65, 0x73, 0x61, // void DynamicDesa
	0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // tAnaglyph(const 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, // vec3 lCol, const
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, //  vec3 rCol, out 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // vec3 lDesatCol, 
	0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, // out vec3 rDesatC
	0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, // ol).{.const floa
	0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, // t left2LeftLum =
	0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, //  dot(lCol, Stere
	0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, // o_LeftLuminance_
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // Gamma.xyz);.cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, // t float left2Rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, // htLum = dot(lCol
	0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // , Stereo_RightLu
	0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, // minance_DynDesat
	0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, // .xyz);.const flo
	0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // at right2LeftLum
	0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, //  = dot(rCol, Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, // reo_LeftLuminanc
	0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, // e_Gamma.xyz);.co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, // nst float right2
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, // RightLum = dot(r
	0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, // Col, Stereo_Righ
	0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, // tLuminance_DynDe
	0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // sat.xyz);.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, // float leftLum = 
	0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x6c, // left2LeftLum + l
	0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, 0x0a, 0x63, 0x6f, // eft2RightLum;.co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, // nst float rightL
	0x75, 0x6d, 0x20, 0x3d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, // um = right2LeftL
	0x75, 0x6d, 0x20, 0x2b, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, // um + right2Right
	0x4c, 0x75, 0x6d, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // Lum;.const float
	0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, //  leftDesat = Ste
	0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, // reo_RightLuminan
	0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, // ce_DynDesat.w * 
	0x61, 0x62, 0x73, 0x28, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, // abs((left2LeftLu
	0x6d, 0x20, 0x2d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // m - left2RightLu
	0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, // m) / (leftLum + 
	0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // 0.0001));.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, // float rightDesat
	0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, //  = Stereo_RightL
	0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, // uminance_DynDesa
	0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, // t.w * abs((right
	0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, // 2LeftLum - right
	0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x72, 0x69, // 2RightLum) / (ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, // ghtLum + 0.0001)
	0x29, 0x3b, 0x0a, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, // );.lDesatCol = m
	0x69, 0x78, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, // ix(lCol, vec3_sp
	0x6c, 0x61, 0x74, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, 0x6c, 0x65, // lat(leftLum), le
	0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x72, 0x44, 0x65, 0x73, 0x61, 0x74, // ftDesat);.rDesat
	0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // Col = mix(rCol, 
	0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, // vec3_splat(right
	0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, // Lum), rightDesat
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, // );.}.vec3 Linear
	0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, // Anaglyph(const v
	0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // ec3 lCol, const 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, // vec3 rCol).{.con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, // st vec3 color = 
	0x28, 0x28, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, // (( (vec4(lCol, 1
	0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, // .)) * (Stereo_Le
	0x66, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x20, 0x28, 0x76, 0x65, // ftMat) ) + ( (ve
	0x63, 0x34, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, // c4(rCol, 1.)) * 
	0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, // (Stereo_RightMat
	0x29, 0x20, 0x29, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // ) )).rgb;.return
	0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, //  color;.}.unifor
	0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, // m vec4 Stereo_De
	0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // ghostGamma;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // orm mat4 Stereo_
	0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3b, 0x0a, 0x76, // DeghostFilter;.v
	0x65, 0x63, 0x33, 0x20, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, // ec3 DeghostAnagl
	0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, // yph(const vec3 l
	0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // Col, const vec3 
	0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // rCol).{.const ve
	0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, // c3 color = Linea
	0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // rAnaglyph(lCol, 
	0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, // rCol);.return ( 
	0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, // (pow(color, Ster
	0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, // eo_DeghostGamma.
	0x72, 0x67, 0x62, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x53, 0x74, // rgb)) * (mat3(St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, // ereo_DeghostFilt
	0x65, 0x72, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // er[0].xyz, Stere
	0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, // o_DeghostFilter[
	0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, // 1].xyz, Stereo_D
	0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x32, 0x5d, 0x2e, // eghostFilter[2].
	0x78, 0x79, 0x7a, 0x29, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, // xyz)) );.}.void 
	0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, // main().{.vec3 lC
	0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x3b, 0x0a, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, // ol, rCol;.gather
	0x4c, 0x65, 0x66, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x28, // LeftRightColors(
	0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2c, 0x20, 0x6c, 0x43, 0x6f, // v_texcoord0, lCo
	0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x6c, 0x43, 0x6f, 0x6c, 0x20, 0x3d, // l, rCol);.lCol =
	0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x29, 0x3b, //  InvGamma(lCol);
	0x0a, 0x72, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, // .rCol = InvGamma
	0x28, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, // (rCol);.vec3 col
	0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, // or = LinearAnagl
	0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, // yph(lCol, rCol);
	0x0a, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, // .bgfx_FragColor 
	0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, // = vec4(FBGamma(c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x00, // olor), 1.0);.}..
};
static const uint8_t fs_pp_stereo_anaglyph_lin_srgb_nodesat_st_glsl[9072] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5d, 0x23, // FSH.Jc._......]#
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x34, 0x34, 0x30, 0x0a, 0x6f, // ..#version 440.o
	0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, // ut vec4 bgfx_Fra
	0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, // gColor;.#define 
	0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x62, 0x67, 0x66, // gl_FragColor bgf
	0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x0a, 0x23, 0x64, 0x65, 0x66, // x_FragColor.#def
	0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x20, 0x20, 0x20, // ine texture2D   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x0a, 0x23, //        texture.#
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, // define texture2D
	0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // Lod       textur
	0x65, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, // eLod.#define tex
	0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ture2DGrad      
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, // textureGrad.#def
	0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, // ine texture2DPro
	0x6a, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, // jLod   texturePr
	0x6f, 0x6a, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, // ojLod.#define te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, 0x20, // xture2DProjGrad 
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, //  textureProjGrad
	0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // .#define texture
	0x43, 0x75, 0x62, 0x65, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, // CubeLod     text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, // ureLod.#define t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, // extureCubeGrad  
	0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, //   textureGrad.#d
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x33, 0x44, 0x20, // efine texture3D 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, //          texture
	0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // .#define texture
	0x32, 0x44, 0x4c, 0x6f, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x20, 0x74, 0x65, 0x78, 0x74, // 2DLodOffset text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x0a, 0x23, 0x64, 0x65, // ureLodOffset.#de
	0x66, 0x69, 0x6e, 0x65, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x69, // fine attribute i
	0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, // n.#define varyin
	0x67, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x62, 0x67, 0x66, // g in.#define bgf
	0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, // xShadow2D(_sampl
	0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, // er, _coord)     
	0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, // vec4_splat(textu
	0x72, 0x65, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, // re(_sampler, _co
	0x6f, 0x72, 0x64, 0x29, 0x20, 0x29, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x62, // ord) ).#define b
	0x67, 0x66, 0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x28, // gfxShadow2DProj(
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, // _sampler, _coord
	0x29, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, // ) vec4_splat(tex
	0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // tureProj(_sample
	0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x29, 0x0a, 0x76, 0x61, 0x72, // r, _coord) ).var
	0x79, 0x69, 0x6e, 0x67, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x5f, 0x65, 0x79, 0x65, // ying float v_eye
	0x3b, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, // ;.varying vec2 v
	0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, // _texcoord0;.vec3
	0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, //  instMul(vec3 _v
	0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, // ec, mat3 _mtx) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, //  return ( (_vec)
	0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, //  * (_mtx) ); }.v
	0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, // ec3 instMul(mat3
	0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, //  _mtx, vec3 _vec
	0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, // ) { return ( (_m
	0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, // tx) * (_vec) ); 
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, // }.vec4 instMul(v
	0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, // ec4 _vec, mat4 _
	0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, // mtx) { return ( 
	0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, // (_vec) * (_mtx) 
	0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, // ); }.vec4 instMu
	0x6c, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, // l(mat4 _mtx, vec
	0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // 4 _vec) { return
	0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, //  ( (_mtx) * (_ve
	0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, // c) ); }.float rc
	0x70, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // p(float _a) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, // turn 1.0/_a; }.v
	0x65, 0x63, 0x32, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, // ec2 rcp(vec2 _a)
	0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, //  { return vec2(1
	0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, // .0)/_a; }.vec3 r
	0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // cp(vec3 _a) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, // turn vec3(1.0)/_
	0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, // a; }.vec4 rcp(ve
	0x63, 0x34, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // c4 _a) { return 
	0x76, 0x65, 0x63, 0x34, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, // vec4(1.0)/_a; }.
	0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, // vec2 vec2_splat(
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // float _x) { retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, // rn vec2(_x, _x);
	0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, //  }.vec3 vec3_spl
	0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, // at(float _x) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, // eturn vec3(_x, _
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, // x, _x); }.vec4 v
	0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // ec4_splat(float 
	0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, // _x) { return vec
	0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, // 4(_x, _x, _x, _x
	0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, // ); }.uvec2 uvec2
	0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, // _splat(uint _x) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, // { return uvec2(_
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, // x, _x); }.uvec3 
	0x75, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, // uvec3_splat(uint
	0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, //  _x) { return uv
	0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, // ec3(_x, _x, _x);
	0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, //  }.uvec4 uvec4_s
	0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, // plat(uint _x) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, // return uvec4(_x,
	0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, //  _x, _x, _x); }.
	0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, // mat4 mtxFromRows
	0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, // (vec4 _0, vec4 _
	0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // 1, vec4 _2, vec4
	0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, //  _3).{.return tr
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, // anspose(mat4(_0,
	0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, //  _1, _2, _3) );.
	0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, // }.mat4 mtxFromCo
	0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // ls(vec4 _0, vec4
	0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, //  _1, vec4 _2, ve
	0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // c4 _3).{.return 
	0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, // mat4(_0, _1, _2,
	0x20, 0x5f, 0x33, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, //  _3);.}.mat3 mtx
	0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, // FromRows(vec3 _0
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // , vec3 _1, vec3 
	0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, // _2).{.return tra
	0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, // nspose(mat3(_0, 
	0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, // _1, _2) );.}.mat
	0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, // 3 mtxFromCols(ve
	0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, // c3 _0, vec3 _1, 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // vec3 _2).{.retur
	0x6e, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, // n mat3(_0, _1, _
	0x32, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, // 2);.}.uniform ve
	0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, // c4 u_viewRect;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, // niform vec4 u_vi
	0x65, 0x77, 0x54, 0x65, 0x78, 0x65, 0x6c, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // ewTexel;.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, //  mat4 u_view;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, // iform mat4 u_inv
	0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, // View;.uniform ma
	0x74, 0x34, 0x20, 0x75, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, // t4 u_proj;.unifo
	0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, // rm mat4 u_invPro
	0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, // j;.uniform mat4 
	0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // u_viewProj;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, // orm mat4 u_invVi
	0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // ewProj;.uniform 
	0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, // mat4 u_model[32]
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, // ;.uniform mat4 u
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // _modelView;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, // orm mat4 u_model
	0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // ViewProj;.unifor
	0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, // m vec4 u_alphaRe
	0x66, 0x34, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, // f4;.float sqr(co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, // nst float v).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // eturn v*v;.}.vec
	0x32, 0x20, 0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, // 2 sqr(const vec2
	0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, //  v).{.return v*v
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, // ;.}.vec3 sqr(con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // st vec3 v).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // urn v*v;.}.vec3 
	0x6d, 0x75, 0x6c, 0x5f, 0x77, 0x31, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, // mul_w1(const vec
	0x33, 0x20, 0x76, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, // 3 v, const mat4 
	0x6d, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2e, 0x78, 0x2a, // m).{.return v.x*
	0x6d, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x79, 0x2a, // m[0].xyz + (v.y*
	0x6d, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x7a, 0x2a, // m[1].xyz + (v.z*
	0x6d, 0x5b, 0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x6d, 0x5b, 0x33, 0x5d, 0x2e, // m[2].xyz + m[3].
	0x78, 0x79, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, // xyz));.}.float a
	0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, // cos_approx_divPI
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, // (const float v).
	0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, // {.const float x 
	0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, // = abs(v);.if(1. 
	0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, // - x <= 0.0000610
	0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // 3515625).return 
	0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x20, 0x3a, // (v >= 0.) ? 0. :
	0x20, 0x31, 0x2e, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, //  1.;.const float
	0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, //  res = ((-0.1559
	0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, // 72/3.14159265358
	0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, // 9793238462643383
	0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, // 2795) * x + (1.5
	0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, // 6467/3.141592653
	0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, // 5897932384626433
	0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, // 832795) ) * sqrt
	0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // (1. - x);.return
	0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x72, 0x65, 0x73, //  (v >= 0.) ? res
	0x20, 0x3a, 0x20, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, //  : 1. - res;.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, // loat atan2_appro
	0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // x_div2PI(const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x79, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // loat y, const fl
	0x6f, 0x61, 0x74, 0x20, 0x78, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // oat x).{.const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, // loat abs_y = abs
	0x28, 0x79, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // (y);.const float
	0x20, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x78, 0x29, 0x3b, //  abs_x = abs(x);
	0x0a, 0x69, 0x66, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, // .if(abs_x <= 0.0
	0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x20, 0x26, 0x26, // 0006103515625 &&
	0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, //  abs_y <= 0.0000
	0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, // 6103515625).retu
	0x72, 0x6e, 0x20, 0x30, 0x2e, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, // rn 0.;.const flo
	0x61, 0x74, 0x20, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2d, 0x20, // at r = (abs_x - 
	0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, // abs_y) / (abs_x 
	0x2b, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // + abs_y);.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3d, 0x20, 0x28, 0x28, // float angle = ((
	0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x28, 0x33, 0x2e, 0x2f, 0x38, 0x2e, // x < 0.) ? (3./8.
	0x29, 0x20, 0x3a, 0x20, 0x28, 0x31, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x29, 0x0a, 0x2b, 0x20, 0x28, // ) : (1./8.)).+ (
	0x30, 0x2e, 0x32, 0x31, 0x31, 0x38, 0x36, 0x38, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, // 0.211868 /(2.*3.
	0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, // 1415926535897932
	0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, // 384626433832795)
	0x20, 0x2a, 0x20, 0x72, 0x20, 0x2a, 0x20, 0x72, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x39, 0x38, 0x37, //  * r * r - 0.987
	0x33, 0x30, 0x35, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, // 305 /(2.*3.14159
	0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, // 2653589793238462
	0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, // 6433832795)) * (
	0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x72, 0x20, 0x3a, 0x20, // (x < 0.) ? -r : 
	0x72, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x79, 0x20, 0x3c, 0x20, // r);.return (y < 
	0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3a, 0x20, 0x61, // 0.) ? -angle : a
	0x6e, 0x67, 0x6c, 0x65, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x73, // ngle;.}.float as
	0x69, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, // in_approx_divPI(
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, // const float v).{
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, // .const float x =
	0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, //  abs(v);.if(1. -
	0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, //  x <= 0.00006103
	0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // 515625).return (
	0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x3a, // v >= 0.) ? 0.5 :
	0x20, 0x2d, 0x30, 0x2e, 0x35, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, //  -0.5;.const flo
	0x61, 0x74, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, // at res = ((-0.15
	0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, // 5972/3.141592653
	0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, // 5897932384626433
	0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, // 832795) * x + (1
	0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, // .56467/3.1415926
	0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, // 5358979323846264
	0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, // 33832795) ) * sq
	0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // rt(1. - x);.retu
	0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, // rn (v >= 0.) ? 0
	0x2e, 0x35, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x20, // .5 - res : -0.5 
	0x2b, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x61, // + res;.}.vec2 ra
	0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, // y_to_equirectang
	0x75, 0x6c, 0x61, 0x72, 0x5f, 0x75, 0x76, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // ular_uv(const ve
	0x63, 0x33, 0x20, 0x72, 0x61, 0x79, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // c3 ray).{.return
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x0a, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x61, 0x74, 0x61, //  vec2(.0.5 + ata
	0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, // n2_approx_div2PI
	0x28, 0x72, 0x61, 0x79, 0x2e, 0x79, 0x2c, 0x20, 0x72, 0x61, 0x79, 0x2e, 0x78, 0x29, 0x2c, 0x0a, // (ray.y, ray.x),.
	0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, // acos_approx_divP
	0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // I(ray.z));.}.flo
	0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, // at InvsRGB(const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, //  float color).{.
	0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, // if (color <= 0.0
	0x34, 0x30, 0x34, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, // 4045).return col
	0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x29, // or * (1.0/12.92)
	0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, // ;.else.return po
	0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, // w(color * (1.0/1
	0x2e, 0x30, 0x35, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x2f, 0x31, // .055) + (0.055/1
	0x2e, 0x30, 0x35, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // .055), 2.4);.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x63, // loat InvRec709(c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // onst float color
	0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, // ).{.if (color <=
	0x20, 0x30, 0x2e, 0x30, 0x38, 0x31, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, //  0.081).return c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x34, 0x2e, 0x35, 0x29, // olor * (1.0/4.5)
	0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, // ;.else.return po
	0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, // w(color * (1.0/1
	0x2e, 0x30, 0x39, 0x39, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x2f, 0x31, // .099) + (0.099/1
	0x2e, 0x30, 0x39, 0x39, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x30, 0x2e, 0x34, 0x35, 0x29, // .099), 1.0/0.45)
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, // ;.}.float InvGam
	0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, // ma(const float c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x49, // olor).{.return I
	0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, // nvsRGB(color);.}
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, // .vec3 InvGamma(c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, // onst vec3 color)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x49, // .{.return vec3(I
	0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, // nvGamma(color.x)
	0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, // ,InvGamma(color.
	0x79, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // y),InvGamma(colo
	0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, // r.z));.}.vec3 In
	0x76, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, // vToneMap(const v
	0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, // ec3 color).{.con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, // st float inv_2bh
	0x20, 0x3d, 0x20, 0x30, 0x2e, 0x35, 0x2f, 0x30, 0x2e, 0x32, 0x35, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, //  = 0.5/0.25;.con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x34, 0x2e, // st float bh = 4.
	0x30, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2d, 0x20, 0x32, 0x2e, 0x30, 0x3b, 0x0a, 0x72, 0x65, // 0*0.25 - 2.0;.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2d, 0x20, 0x31, 0x2e, // turn (color - 1.
	0x30, 0x20, 0x2b, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2a, 0x28, // 0 + sqrt(color*(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x20, 0x62, 0x68, 0x29, 0x20, 0x2b, 0x20, 0x31, 0x2e, // color + bh) + 1.
	0x30, 0x29, 0x29, 0x2a, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // 0))*inv_2bh;.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // loat sRGB(const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // float f).{.float
	0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, //  s;.if (f <= 0.0
	0x30, 0x33, 0x31, 0x33, 0x30, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, // 031308).s = 12.9
	0x32, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, // 2 * f;.else.s = 
	0x31, 0x2e, 0x30, 0x35, 0x35, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x31, // 1.055 * pow(f, 1
	0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x34, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x3b, // .0/2.4) - 0.055;
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // .return s;.}.flo
	0x61, 0x74, 0x20, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // at Rec709(const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // float f).{.float
	0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, //  s;.if (f <= 0.0
	0x31, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x34, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x66, 0x3b, // 18).s = 4.5 * f;
	0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x20, // .else.s = 1.099 
	0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x20, 0x2d, // * pow(f, 0.45) -
	0x20, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, //  0.099;.return s
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, // ;.}.float FBGamm
	0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, // a(const float co
	0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x52, // lor).{.return sR
	0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // GB(color);.}.vec
	0x32, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // 2 FBGamma(const 
	0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // vec2 color).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, // turn vec2(FBGamm
	0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, // a(color.x),FBGam
	0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // ma(color.y));.}.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, // vec3 FBGamma(con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, // st vec3 color).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x46, 0x42, 0x47, // .return vec3(FBG
	0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, // amma(color.x),FB
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x46, // Gamma(color.y),F
	0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, // BGamma(color.z))
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, // ;.}.vec3 FBGamma
	0x32, 0x32, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, // 22(const vec3 co
	0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, // lor).{.return ve
	0x63, 0x33, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x2c, 0x20, // c3(pow(color.x, 
	0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, // 1.0/2.2),pow(col
	0x6f, 0x72, 0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, // or.y, 1.0/2.2),p
	0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, // ow(color.z, 1.0/
	0x32, 0x2e, 0x32, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, // 2.2));.}.float F
	0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // BToneMap(const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // loat l).{.return
	0x20, 0x6c, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, //  l * ((l*0.25 + 
	0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, // 1.0) / (l + 1.0)
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, // );.}.vec2 FBTone
	0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, // Map(const vec2 c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // olor).{.const fl
	0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // oat l = dot(colo
	0x72, 0x2c, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2b, // r,vec2(0.176204+
	0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x2c, 0x30, 0x2e, // 0.0108109*0.5,0.
	0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, // 812985+0.0108109
	0x2a, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, // *0.5));.return c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, // olor * ((l*0.25 
	0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, // + 1.0) / (l + 1.
	0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x54, 0x6f, // 0));.}.vec3 FBTo
	0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, // neMap(const vec3
	0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, //  color).{.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, // float l = dot(co
	0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, // lor,vec3(0.17620
	0x34, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2c, 0x30, 0x2e, 0x30, 0x31, 0x30, // 4,0.812985,0.010
	0x38, 0x31, 0x30, 0x39, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, // 8109));.return c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, // olor * ((l*0.25 
	0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, // + 1.0) / (l + 1.
	0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x41, 0x64, 0x64, 0x69, // 0));.}.vec4 Addi
	0x74, 0x69, 0x76, 0x65, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // tive(const vec4 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, // cBase, const vec
	0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // 4 cBlend, const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, // float percent).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2b, 0x20, // .return cBase + 
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, // cBlend*percent;.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x63, // }.vec3 Screen (c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, // onst vec3 cBase,
	0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, //  const vec3 cBle
	0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, // nd).{.return 1.0
	0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, //  - (1.0 - cBase)
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, //  * (1.0 - cBlend
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, // );.}.vec4 Screen
	0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, //  (const vec4 cBa
	0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, // se, const vec4 c
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // Blend).{.return 
	0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, // 1.0 - (1.0 - cBa
	0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, // se) * (1.0 - cBl
	0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, // end);.}.vec3 Scr
	0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // eenHDR (const ve
	0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // c3 cBase, const 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, // vec3 cBlend).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, // eturn max(1.0 - 
	0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, // (1.0 - cBase) * 
	0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, // (1.0 - cBlend), 
	0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, // vec3(0.,0.,0.));
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, // .}.vec4 ScreenHD
	0x52, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // R (const vec4 cB
	0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // ase, const vec4 
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // cBlend).{.return
	0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, //  max(1.0 - (1.0 
	0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, // - cBase) * (1.0 
	0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, // - cBlend), vec4(
	0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, // 0.,0.,0.,0.));.}
	0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x20, 0x28, // .vec4 Multiply (
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, // const vec4 cBase
	0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, // , const vec4 cBl
	0x65, 0x6e, 0x64, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // end, const float
	0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, //  percent).{.retu
	0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2a, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // rn cBase * cBlen
	0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // d*percent;.}.vec
	0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, // 4 Overlay (const
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, //  vec4 cBase, con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, // st vec4 cBlend).
	0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, // {.vec4 cNew = st
	0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, // ep(0.5, cBase);.
	0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, // cNew = mix(cBase
	0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, // *cBlend*2.0, 1.0
	0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, // -2.0*(1.0-cBase)
	0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, // *(1.0-cBlend), c
	0x4e, 0x65, 0x77, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, // New);.return cNe
	0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, // w;.}.vec4 Overla
	0x79, 0x48, 0x44, 0x52, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, // yHDR (const vec4
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, //  cBase, const ve
	0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, // c4 cBlend).{.vec
	0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, // 4 cNew = step(0.
	0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, // 5, cBase);.cNew 
	0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, // = max(mix(cBase*
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, // cBlend*2.0, 1.0-
	0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, // 2.0*(1.0-cBase)*
	0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, // (1.0-cBlend), cN
	0x65, 0x77, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, // ew), vec4(0.,0.,
	0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // 0.,0.));.return 
	0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x73, // cNew;.}.vec3 cos
	0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x5f, 0x73, 0x61, 0x6d, 0x70, // _hemisphere_samp
	0x6c, 0x65, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x29, // le(const vec2 t)
	0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, // .{.const float p
	0x68, 0x69, 0x20, 0x3d, 0x20, 0x74, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x28, 0x32, 0x2e, 0x30, 0x2a, // hi = t.y * (2.0*
	0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, // 3.14159265358979
	0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, // 3238462643383279
	0x35, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // 5);.const float 
	0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, // cosTheta = sqrt(
	0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // 1.0 - t.x);.cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, // t float sinTheta
	0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, //  = sqrt(t.x);.fl
	0x6f, 0x61, 0x74, 0x20, 0x73, 0x70, 0x2c, 0x63, 0x70, 0x3b, 0x0a, 0x73, 0x69, 0x6e, 0x63, 0x6f, // oat sp,cp;.sinco
	0x73, 0x28, 0x70, 0x68, 0x69, 0x2c, 0x73, 0x70, 0x2c, 0x63, 0x70, 0x29, 0x3b, 0x0a, 0x72, 0x65, // s(phi,sp,cp);.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x63, 0x70, 0x20, 0x2a, 0x20, 0x73, // turn vec3(cp * s
	0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, // inTheta, cosThet
	0x61, 0x2c, 0x20, 0x73, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, // a, sp * sinTheta
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, // );.}.vec3 rotate
	0x5f, 0x74, 0x6f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, // _to_vector_upper
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x2c, // (const vec3 vec,
	0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, //  const vec3 norm
	0x61, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, // al).{.if(normal.
	0x79, 0x20, 0x3e, 0x20, 0x2d, 0x30, 0x2e, 0x39, 0x39, 0x39, 0x39, 0x39, 0x29, 0x0a, 0x7b, 0x0a, // y > -0.99999).{.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x20, 0x3d, 0x20, // const float h = 
	0x31, 0x2e, 0x30, 0x2f, 0x28, 0x31, 0x2e, 0x30, 0x2b, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, // 1.0/(1.0+normal.
	0x79, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // y);.const float 
	0x68, 0x7a, 0x20, 0x3d, 0x20, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x3b, // hz = h*normal.z;
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x78, // .const float hzx
	0x20, 0x3d, 0x20, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x3b, 0x0a, //  = hz*normal.x;.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x0a, 0x76, 0x65, 0x63, // return vec3(.vec
	0x2e, 0x78, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, // .x * (normal.y+h
	0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x29, 0x20, 0x2b, 0x20, 0x76, 0x65, // z*normal.z) + ve
	0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, // c.y * normal.x -
	0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x2c, 0x0a, 0x76, 0x65, //  vec.z * hzx,.ve
	0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x2d, // c.y * normal.y -
	0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, //  vec.x * normal.
	0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, // x - vec.z * norm
	0x61, 0x6c, 0x2e, 0x7a, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, // al.z,.vec.y * no
	0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, // rmal.z - vec.x *
	0x20, 0x68, 0x7a, 0x78, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x28, //  hzx + vec.z * (
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, // normal.y+h*norma
	0x6c, 0x2e, 0x78, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, // l.x*normal.x));.
	0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x2d, 0x76, // }.else return -v
	0x65, 0x63, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, // ec;.}.uniform ve
	0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x53, 0x61, 0x74, 0x75, 0x72, 0x61, // c4 Stereo_Satura
	0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, // tion;.uniform ve
	0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, // c4 Stereo_MS_ZPD
	0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // _YAxis;.uniform 
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x20, 0x74, // sampler2DArray t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x3b, 0x0a, 0x75, 0x6e, // ex_stereo_fb;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, // iform sampler2DA
	0x72, 0x72, 0x61, 0x79, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // rray tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, // depth;.uniform v
	0x65, 0x63, 0x34, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, // ec4 w_h_height;.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, // vec3 gatherEyeCo
	0x6c, 0x6f, 0x72, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, // lor(vec2 u, bool
	0x20, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, //  isLeft).{.retur
	0x6e, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, // n texture2DArray
	0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, // Lod(tex_stereo_f
	0x62, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, // b, vec3(u.x, u.y
	0x2c, 0x20, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x30, 0x20, 0x3a, // , isLeft ? 0.0 :
	0x20, 0x31, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, //  1.0), 0.).rgb;.
	0x7d, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x66, // }.void gatherLef
	0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x28, 0x76, 0x65, 0x63, // tRightColors(vec
	0x32, 0x20, 0x75, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x63, // 2 u, out vec3 lc
	0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x6f, // ol, out vec3 rco
	0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x6c, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, // l).{.lcol = text
	0x75, 0x72, 0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, // ure2DArrayLod(te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x76, 0x65, 0x63, // x_stereo_fb, vec
	0x33, 0x28, 0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2c, // 3(u.x, u.y, 0.),
	0x20, 0x30, 0x2e, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x72, 0x63, 0x6f, 0x6c, 0x20, 0x3d, //  0.).xyz;.rcol =
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, //  texture2DArrayL
	0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, // od(tex_stereo_fb
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, // , vec3(u.x, u.y,
	0x20, 0x31, 0x2e, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, //  1.), 0.).xyz;.}
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, // .uniform mat4 St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, // ereo_LeftMat;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // iform mat4 Stere
	0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // o_RightMat;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // orm vec4 Stereo_
	0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, // LeftLuminance_Ga
	0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, // mma;.uniform vec
	0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // 4 Stereo_RightLu
	0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, // minance_DynDesat
	0x3b, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x65, // ;.void DynamicDe
	0x73, 0x61, 0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, // satAnaglyph(cons
	0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, // t vec3 lCol, con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, // st vec3 rCol, ou
	0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, // t vec3 lDesatCol
	0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x44, 0x65, 0x73, 0x61, // , out vec3 rDesa
	0x74, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // tCol).{.const fl
	0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // oat left2LeftLum
	0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, //  = dot(lCol, Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, // reo_LeftLuminanc
	0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, // e_Gamma.xyz);.co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, // nst float left2R
	0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, // ightLum = dot(lC
	0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, // ol, Stereo_Right
	0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, // Luminance_DynDes
	0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // at.xyz);.const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, // loat right2LeftL
	0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, // um = dot(rCol, S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, // tereo_LeftLumina
	0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, // nce_Gamma.xyz);.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, // const float righ
	0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, // t2RightLum = dot
	0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, // (rCol, Stereo_Ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, // ghtLuminance_Dyn
	0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // Desat.xyz);.cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, // t float leftLum 
	0x3d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, // = left2LeftLum +
	0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, 0x0a, //  left2RightLum;.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, // const float righ
	0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, // tLum = right2Lef
	0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, // tLum + right2Rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, // htLum;.const flo
	0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, // at leftDesat = S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, // tereo_RightLumin
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, // ance_DynDesat.w 
	0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, // * abs((left2Left
	0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, // Lum - left2Right
	0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, // Lum) / (leftLum 
	0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // + 0.0001));.cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x73, // t float rightDes
	0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, // at = Stereo_Righ
	0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, // tLuminance_DynDe
	0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x72, 0x69, 0x67, // sat.w * abs((rig
	0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x72, 0x69, 0x67, // ht2LeftLum - rig
	0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, // ht2RightLum) / (
	0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, // rightLum + 0.000
	0x31, 0x29, 0x29, 0x3b, 0x0a, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, 0x3d, // 1));.lDesatCol =
	0x20, 0x6d, 0x69, 0x78, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, //  mix(lCol, vec3_
	0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, // splat(leftLum), 
	0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x72, 0x44, 0x65, 0x73, // leftDesat);.rDes
	0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x72, 0x43, 0x6f, 0x6c, // atCol = mix(rCol
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x72, 0x69, 0x67, // , vec3_splat(rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x73, // htLum), rightDes
	0x61, 0x74, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x4c, 0x69, 0x6e, 0x65, // at);.}.vec3 Line
	0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, // arAnaglyph(const
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, //  vec3 lCol, cons
	0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, // t vec3 rCol).{.c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, // onst vec3 color 
	0x3d, 0x20, 0x28, 0x28, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, // = (( (vec4(lCol,
	0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, //  1.)) * (Stereo_
	0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x20, 0x28, // LeftMat) ) + ( (
	0x76, 0x65, 0x63, 0x34, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, // vec4(rCol, 1.)) 
	0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, // * (Stereo_RightM
	0x61, 0x74, 0x29, 0x20, 0x29, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // at) )).rgb;.retu
	0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, // rn color;.}.unif
	0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // orm vec4 Stereo_
	0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, 0x6e, // DeghostGamma;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // iform mat4 Stere
	0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3b, // o_DeghostFilter;
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x6e, 0x61, // .vec3 DeghostAna
	0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, // glyph(const vec3
	0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, //  lCol, const vec
	0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // 3 rCol).{.const 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, 0x6e, // vec3 color = Lin
	0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, // earAnaglyph(lCol
	0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // , rCol);.return 
	0x28, 0x20, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x53, 0x74, // ( (pow(color, St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, // ereo_DeghostGamm
	0x61, 0x2e, 0x72, 0x67, 0x62, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, // a.rgb)) * (mat3(
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, // Stereo_DeghostFi
	0x6c, 0x74, 0x65, 0x72, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, // lter[0].xyz, Ste
	0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, // reo_DeghostFilte
	0x72, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // r[1].xyz, Stereo
	0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x32, // _DeghostFilter[2
	0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, // ].xyz)) );.}.voi
	0x64, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // d main().{.vec3 
	0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x3b, 0x0a, 0x67, 0x61, 0x74, 0x68, // lCol, rCol;.gath
	0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, // erLeftRightColor
	0x73, 0x28, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2c, 0x20, 0x6c, // s(v_texcoord0, l
	0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x6c, 0x43, 0x6f, 0x6c, // Col, rCol);.lCol
	0x20, 0x3d, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x6c, 0x43, 0x6f, 0x6c, //  = InvGamma(lCol
	0x29, 0x3b, 0x0a, 0x72, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, // );.rCol = InvGam
	0x6d, 0x61, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, // ma(rCol);.vec3 c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, // olor = LinearAna
	0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, // glyph(lCol, rCol
	0x29, 0x3b, 0x0a, 0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, // );.gl_FragColor 
	0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, // = vec4(FBGamma(c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x00, // olor), 1.0);.}..
};
static const uint8_t fs_pp_stereo_anaglyph_lin_srgb_nodesat_st_dx11[1981] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x0e, 0x53, // FSH.Jc._.......S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x00, 0x00, // tereo_LeftMat...
	0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, // ........Stereo_R
	0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x00, 0x40, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, // ightMat..@......
	0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x30, // ..tex_stereo_fb0
	0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // ..........tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x30, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, // ereo_fb0........
	0x00, 0x44, 0x07, 0x00, 0x00, 0x44, 0x58, 0x42, 0x43, 0x12, 0xee, 0x46, 0xbf, 0x5a, 0x8f, 0xcd, // .D...DXBC..F.Z..
	0x5b, 0xaa, 0x06, 0xef, 0xad, 0x55, 0x4d, 0x5a, 0x40, 0x01, 0x00, 0x00, 0x00, 0x44, 0x07, 0x00, // [....UMZ@....D..
	0x00, 0x03, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x9c, 0x00, 0x00, 0x00, 0xd0, 0x00, 0x00, // .....,..........
	0x00, 0x49, 0x53, 0x47, 0x4e, 0x68, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, // .ISGNh..........
	0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, // .P..............
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, // ................
	0x00, 0x5c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, // ................
	0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x06, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x4f, 0x53, 0x49, // .........SV_POSI
	0x54, 0x49, 0x4f, 0x4e, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0xab, 0xab, // TION.TEXCOORD...
	0xab, 0x4f, 0x53, 0x47, 0x4e, 0x2c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, // .OSGN,..........
	0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, // . ..............
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x54, 0x41, 0x52, 0x47, // .........SV_TARG
	0x45, 0x54, 0x00, 0xab, 0xab, 0x53, 0x48, 0x45, 0x58, 0x6c, 0x06, 0x00, 0x00, 0x50, 0x00, 0x00, // ET...SHEXl...P..
	0x00, 0x9b, 0x01, 0x00, 0x00, 0x6a, 0x08, 0x00, 0x01, 0x59, 0x00, 0x00, 0x04, 0x46, 0x8e, 0x20, // .....j...Y...F. 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x03, 0x00, 0x60, 0x10, // .........Z....`.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x58, 0x40, 0x00, 0x04, 0x00, 0x70, 0x10, 0x00, 0x00, 0x00, 0x00, // .....X@...p.....
	0x00, 0x55, 0x55, 0x00, 0x00, 0x62, 0x10, 0x00, 0x03, 0x62, 0x10, 0x10, 0x00, 0x01, 0x00, 0x00, // .UU..b...b......
	0x00, 0x65, 0x00, 0x00, 0x03, 0xf2, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, // .e.... ......h..
	0x02, 0x03, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x32, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, // .....6...2......
	0x00, 0x96, 0x15, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x42, 0x00, 0x10, // .........6...B..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, // ......@......H..
	0x8d, 0x02, 0x02, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, // .....CU..r......
	0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, 0x00, 0x00, 0x00, // .F.......F~.....
	0x00, 0x00, 0x60, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, // ..`.......@.....
	0x00, 0x32, 0x00, 0x00, 0x0f, 0x32, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, // .2...2.......F..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x6e, 0xa7, 0x72, 0x3f, 0x6e, 0xa7, 0x72, // ......@..n.r?n.r
	0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x19, 0x89, 0x55, // ?.........@....U
	0x3d, 0x19, 0x89, 0x55, 0x3d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00, // =..U=......../..
	0x05, 0x32, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, // .2.......F......
	0x00, 0x38, 0x00, 0x00, 0x0a, 0x32, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, // .8...2.......F..
	0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x9a, 0x99, 0x19, 0x40, 0x9a, 0x99, 0x19, // ......@.....@...
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x05, 0x32, 0x00, 0x10, // @............2..
	0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, // .....F.......8..
	0x0a, 0xc2, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x04, 0x10, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x91, 0x83, 0x9e, // ..@.............
	0x3d, 0x91, 0x83, 0x9e, 0x3d, 0x1d, 0x00, 0x00, 0x0a, 0xb2, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, // =...=...........
	0x00, 0x02, 0x40, 0x00, 0x00, 0xe6, 0xae, 0x25, 0x3d, 0xe6, 0xae, 0x25, 0x3d, 0x00, 0x00, 0x00, // ..@....%=..%=...
	0x00, 0xe6, 0xae, 0x25, 0x3d, 0x46, 0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, // ...%=F.......7..
	0x09, 0x32, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, // .2.......F......
	0x00, 0xe6, 0x0a, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, // .........F......
	0x00, 0x32, 0x00, 0x00, 0x09, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, // .2...........*..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x6e, 0xa7, 0x72, 0x3f, 0x01, 0x40, 0x00, // ......@..n.r?.@.
	0x00, 0x19, 0x89, 0x55, 0x3d, 0x2f, 0x00, 0x00, 0x05, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, // ...U=/..........
	0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x0a, 0x32, 0x00, 0x10, // .........8...2..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, // ..............@.
	0x00, 0x9a, 0x99, 0x19, 0x40, 0x91, 0x83, 0x9e, 0x3d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ....@...=.......
	0x00, 0x19, 0x00, 0x00, 0x05, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x09, 0x42, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, // .....7...B......
	0x00, 0x3a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, // .:..............
	0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x82, 0x00, 0x10, // .........6......
	0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x11, 0x00, 0x00, // ......@.....?...
	0x08, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x01, 0x00, 0x00, // .........F......
	0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, // .F. ............
	0x08, 0x22, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x01, 0x00, 0x00, // .".......F......
	0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, // .F. ............
	0x08, 0x42, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x01, 0x00, 0x00, // .B.......F......
	0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, // .F. .........6..
	0x05, 0x32, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x96, 0x15, 0x10, 0x00, 0x01, 0x00, 0x00, // .2..............
	0x00, 0x36, 0x00, 0x00, 0x05, 0x42, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, // .6...B........@.
	0x00, 0x00, 0x00, 0x80, 0x3f, 0x48, 0x00, 0x00, 0x8d, 0x02, 0x02, 0x00, 0x80, 0x43, 0x55, 0x15, // ....?H.......CU.
	0x00, 0x72, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x01, 0x00, 0x00, // .r.......F......
	0x00, 0x46, 0x7e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x00, 0x00, 0x00, // .F~.......`.....
	0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x0f, 0x32, 0x00, 0x10, // ..@......2...2..
	0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, // .....F........@.
	0x00, 0x6e, 0xa7, 0x72, 0x3f, 0x6e, 0xa7, 0x72, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .n.r?n.r?.......
	0x00, 0x02, 0x40, 0x00, 0x00, 0x19, 0x89, 0x55, 0x3d, 0x19, 0x89, 0x55, 0x3d, 0x00, 0x00, 0x00, // ..@....U=..U=...
	0x00, 0x00, 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x05, 0x32, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, // ...../...2......
	0x00, 0x46, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x0a, 0x32, 0x00, 0x10, // .F.......8...2..
	0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, // .....F........@.
	0x00, 0x9a, 0x99, 0x19, 0x40, 0x9a, 0x99, 0x19, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ....@...@.......
	0x00, 0x19, 0x00, 0x00, 0x05, 0x32, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, // .....2.......F..
	0x00, 0x02, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x0a, 0xc2, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, // .....8..........
	0x00, 0x06, 0x04, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, // ..........@.....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x91, 0x83, 0x9e, 0x3d, 0x91, 0x83, 0x9e, 0x3d, 0x1d, 0x00, 0x00, // ........=...=...
	0x0a, 0xb2, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0xe6, 0xae, 0x25, // ..........@....%
	0x3d, 0xe6, 0xae, 0x25, 0x3d, 0x00, 0x00, 0x00, 0x00, 0xe6, 0xae, 0x25, 0x3d, 0x46, 0x08, 0x10, // =..%=......%=F..
	0x00, 0x01, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x09, 0x32, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, // .....7...2......
	0x00, 0x46, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x02, 0x00, 0x00, // .F..............
	0x00, 0x46, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x09, 0x82, 0x00, 0x10, // .F.......2......
	0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, // .....*........@.
	0x00, 0x6e, 0xa7, 0x72, 0x3f, 0x01, 0x40, 0x00, 0x00, 0x19, 0x89, 0x55, 0x3d, 0x38, 0x00, 0x00, // .n.r?.@....U=8..
	0x07, 0x12, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, // .........*......
	0x00, 0x01, 0x40, 0x00, 0x00, 0x91, 0x83, 0x9e, 0x3d, 0x2f, 0x00, 0x00, 0x05, 0x82, 0x00, 0x10, // ..@.....=/......
	0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, // .....:.......8..
	0x07, 0x82, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, // .........:......
	0x00, 0x01, 0x40, 0x00, 0x00, 0x9a, 0x99, 0x19, 0x40, 0x19, 0x00, 0x00, 0x05, 0x82, 0x00, 0x10, // ..@.....@.......
	0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, // .....:.......7..
	0x09, 0x42, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, // .B.......:......
	0x00, 0x0a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, // .........:......
	0x00, 0x36, 0x00, 0x00, 0x05, 0x82, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, // .6............@.
	0x00, 0x00, 0x00, 0x80, 0x3f, 0x11, 0x00, 0x00, 0x08, 0x12, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, // ....?...........
	0x00, 0x46, 0x0e, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, // .F.......F. ....
	0x00, 0x04, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x08, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, // ........."......
	0x00, 0x46, 0x0e, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, // .F.......F. ....
	0x00, 0x05, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x08, 0x42, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, // .........B......
	0x00, 0x46, 0x0e, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, // .F.......F. ....
	0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, // .........r......
	0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x01, 0x00, 0x00, // .F.......F......
	0x00, 0x2f, 0x00, 0x00, 0x05, 0x72, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, // ./...r.......F..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x0a, 0x72, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, // .....8...r......
	0x00, 0x46, 0x02, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x55, 0x55, 0xd5, // .F........@..UU.
	0x3e, 0x55, 0x55, 0xd5, 0x3e, 0x55, 0x55, 0xd5, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, // >UU.>UU.>.......
	0x05, 0x72, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x01, 0x00, 0x00, // .r.......F......
	0x00, 0x32, 0x00, 0x00, 0x0f, 0x72, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, // .2...r.......F..
	0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x3d, 0x0a, 0x87, 0x3f, 0x3d, 0x0a, 0x87, // ......@..=..?=..
	0x3f, 0x3d, 0x0a, 0x87, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0xae, 0x47, 0x61, // ?=..?.....@...Ga
	0xbd, 0xae, 0x47, 0x61, 0xbd, 0xae, 0x47, 0x61, 0xbd, 0x00, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, // ..Ga..Ga........
	0x0a, 0x72, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x1c, 0x2e, 0x4d, // .r........@....M
	0x3b, 0x1c, 0x2e, 0x4d, 0x3b, 0x1c, 0x2e, 0x4d, 0x3b, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, // ;..M;..M;....F..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x0a, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, // .....8...r......
	0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x52, 0xb8, 0x4e, // .F........@..R.N
	0x41, 0x52, 0xb8, 0x4e, 0x41, 0x52, 0xb8, 0x4e, 0x41, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, // AR.NAR.NA....7..
	0x09, 0x72, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x02, 0x00, 0x00, // .r ......F......
	0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x01, 0x00, 0x00, // .F.......F......
	0x00, 0x36, 0x00, 0x00, 0x05, 0x82, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, // .6.... .......@.
	0x00, 0x00, 0x00, 0x80, 0x3f, 0x3e, 0x00, 0x00, 0x01, 0x00, 0x00, 0x80, 0x00,                   // ....?>.......
};
static const uint8_t fs_pp_stereo_anaglyph_lin_srgb_nodesat_st_spv[4049] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x0e, 0x53, // FSH.Jc._.......S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x01, 0x00, // tereo_LeftMat...
	0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, // ........Stereo_R
	0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x01, 0x40, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, // ightMat..@......
	0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x30, // ..tex_stereo_fb0
	0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x03, 0x22, 0x00, 0x70, 0x0f, 0x00, 0x00, 0x03, 0x02, 0x23, // .......".p.....#
	0x07, 0x00, 0x00, 0x01, 0x00, 0x0b, 0x00, 0x08, 0x00, 0x5f, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, // ........._......
	0x00, 0x11, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x06, 0x00, 0x01, 0x00, 0x00, // ................
	0x00, 0x47, 0x4c, 0x53, 0x4c, 0x2e, 0x73, 0x74, 0x64, 0x2e, 0x34, 0x35, 0x30, 0x00, 0x00, 0x00, // .GLSL.std.450...
	0x00, 0x0e, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x07, // ................
	0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, // .........main...
	0x00, 0xfb, 0x00, 0x00, 0x00, 0x08, 0x01, 0x00, 0x00, 0x10, 0x00, 0x03, 0x00, 0x04, 0x00, 0x00, // ................
	0x00, 0x07, 0x00, 0x00, 0x00, 0x03, 0x00, 0x03, 0x00, 0x05, 0x00, 0x00, 0x00, 0xf4, 0x01, 0x00, // ................
	0x00, 0x05, 0x00, 0x04, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, // .........main...
	0x00, 0x05, 0x00, 0x08, 0x00, 0x45, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, // .....E...tex_ste
	0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x00, 0x00, 0x00, // reo_fbSampler...
	0x00, 0x05, 0x00, 0x08, 0x00, 0x48, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, // .....H...tex_ste
	0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x00, 0x00, 0x00, // reo_fbTexture...
	0x00, 0x05, 0x00, 0x06, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x55, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // .........Uniform
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x07, 0x00, 0xc0, 0x00, 0x00, // Block...........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, // .....Stereo_Left
	0x4d, 0x61, 0x74, 0x00, 0x00, 0x06, 0x00, 0x07, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, // Mat.............
	0x00, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, // .Stereo_RightMat
	0x00, 0x05, 0x00, 0x03, 0x00, 0xc2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x05, // ................
	0x00, 0xfb, 0x00, 0x00, 0x00, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, // .....v_texcoord0
	0x00, 0x05, 0x00, 0x06, 0x00, 0x08, 0x01, 0x00, 0x00, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, // .........bgfx_Fr
	0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x45, 0x00, 0x00, // agData0..G...E..
	0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x45, 0x00, 0x00, // .".......G...E..
	0x00, 0x21, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x48, 0x00, 0x00, // .!.......G...H..
	0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x48, 0x00, 0x00, // .".......G...H..
	0x00, 0x21, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x48, 0x00, 0x04, 0x00, 0xc0, 0x00, 0x00, // .!.......H......
	0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0xc0, 0x00, 0x00, // .........H......
	0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, // .....#.......H..
	0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, // ................
	0x00, 0x48, 0x00, 0x04, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, // .H..............
	0x00, 0x48, 0x00, 0x05, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, // .H...........#..
	0x00, 0x40, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, // .@...H..........
	0x00, 0x07, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x47, 0x00, 0x03, 0x00, 0xc0, 0x00, 0x00, // .........G......
	0x00, 0x02, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0xc2, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, // .....G......."..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0xc2, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, // .....G.......!..
	0x00, 0x01, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0xfb, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, // .....G..........
	0x00, 0x01, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x08, 0x01, 0x00, 0x00, 0x1e, 0x00, 0x00, // .....G..........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x21, 0x00, 0x03, // .............!..
	0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x02, 0x00, 0x06, 0x00, 0x00, // ................
	0x00, 0x16, 0x00, 0x03, 0x00, 0x07, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x19, 0x00, 0x09, // ......... ......
	0x00, 0x08, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x17, 0x00, 0x04, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, // ................
	0x00, 0x17, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, // ................
	0x00, 0x17, 0x00, 0x04, 0x00, 0x2d, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, // .....-..........
	0x00, 0x20, 0x00, 0x04, 0x00, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, // . ...D..........
	0x00, 0x3b, 0x00, 0x04, 0x00, 0x44, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .;...D...E......
	0x00, 0x20, 0x00, 0x04, 0x00, 0x47, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, // . ...G..........
	0x00, 0x3b, 0x00, 0x04, 0x00, 0x47, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .;...G...H......
	0x00, 0x15, 0x00, 0x04, 0x00, 0x51, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, // .....Q... ......
	0x00, 0x2b, 0x00, 0x04, 0x00, 0x51, 0x00, 0x00, 0x00, 0x52, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, // .+...Q...R......
	0x00, 0x2b, 0x00, 0x04, 0x00, 0x51, 0x00, 0x00, 0x00, 0x56, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .+...Q...V......
	0x00, 0x1b, 0x00, 0x03, 0x00, 0x5a, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, // .....Z.......+..
	0x00, 0x07, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0xe6, 0xae, 0x25, 0x3d, 0x14, 0x00, 0x02, // .....h.....%=...
	0x00, 0x69, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x6d, 0x00, 0x00, // .i...+.......m..
	0x00, 0x91, 0x83, 0x9e, 0x3d, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x71, 0x00, 0x00, // ....=+.......q..
	0x00, 0x6e, 0xa7, 0x72, 0x3f, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x73, 0x00, 0x00, // .n.r?+.......s..
	0x00, 0x19, 0x89, 0x55, 0x3d, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x75, 0x00, 0x00, // ...U=+.......u..
	0x00, 0x9a, 0x99, 0x19, 0x40, 0x15, 0x00, 0x04, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, // ....@....|... ..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x7d, 0x00, 0x00, // .....+...|...}..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x89, 0x00, 0x00, // .....+..........
	0x00, 0x1c, 0x2e, 0x4d, 0x3b, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x8e, 0x00, 0x00, // ...M;+..........
	0x00, 0x52, 0xb8, 0x4e, 0x41, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x91, 0x00, 0x00, // .R.NA+..........
	0x00, 0x3d, 0x0a, 0x87, 0x3f, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x92, 0x00, 0x00, // .=..?+..........
	0x00, 0x55, 0x55, 0xd5, 0x3e, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0xaa, 0x00, 0x00, // .UU.>+..........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0xb6, 0x00, 0x00, // .....+..........
	0x00, 0x00, 0x00, 0x80, 0x3f, 0x18, 0x00, 0x04, 0x00, 0xbf, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, // ....?...........
	0x00, 0x04, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x04, 0x00, 0xc0, 0x00, 0x00, 0x00, 0xbf, 0x00, 0x00, // ................
	0x00, 0xbf, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0xc1, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, // ..... ..........
	0x00, 0xc0, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0xc1, 0x00, 0x00, 0x00, 0xc2, 0x00, 0x00, // .....;..........
	0x00, 0x02, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0xc3, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, // ..... ..........
	0x00, 0xbf, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0xfa, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, // ..... ..........
	0x00, 0x2d, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0xfa, 0x00, 0x00, 0x00, 0xfb, 0x00, 0x00, // .-...;..........
	0x00, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x07, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, // ..... ..........
	0x00, 0x0e, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x07, 0x01, 0x00, 0x00, 0x08, 0x01, 0x00, // .....;..........
	0x00, 0x03, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x4f, 0x02, 0x00, // .....+.......O..
	0x00, 0xae, 0x47, 0x61, 0xbd, 0x36, 0x00, 0x05, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, // ..Ga.6..........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x05, 0x00, 0x00, // ................
	0x00, 0x3d, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0x46, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00, // .=.......F...E..
	0x00, 0x3d, 0x00, 0x04, 0x00, 0x08, 0x00, 0x00, 0x00, 0x49, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, // .=.......I...H..
	0x00, 0x3d, 0x00, 0x04, 0x00, 0x2d, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0xfb, 0x00, 0x00, // .=...-..........
	0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x54, 0x01, 0x00, 0x00, 0xfc, 0x00, 0x00, // .Q.......T......
	0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x56, 0x01, 0x00, // .....Q.......V..
	0x00, 0xfc, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x50, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, // .........P......
	0x00, 0x57, 0x01, 0x00, 0x00, 0x54, 0x01, 0x00, 0x00, 0x56, 0x01, 0x00, 0x00, 0xaa, 0x00, 0x00, // .W...T...V......
	0x00, 0x56, 0x00, 0x05, 0x00, 0x5a, 0x00, 0x00, 0x00, 0x69, 0x01, 0x00, 0x00, 0x49, 0x00, 0x00, // .V...Z...i...I..
	0x00, 0x46, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x6c, 0x01, 0x00, // .F...X.......l..
	0x00, 0x69, 0x01, 0x00, 0x00, 0x57, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xaa, 0x00, 0x00, // .i...W..........
	0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x5c, 0x01, 0x00, 0x00, 0xfc, 0x00, 0x00, // .Q..............
	0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x5e, 0x01, 0x00, // .....Q.......^..
	0x00, 0xfc, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x50, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, // .........P......
	0x00, 0x5f, 0x01, 0x00, 0x00, 0x5c, 0x01, 0x00, 0x00, 0x5e, 0x01, 0x00, 0x00, 0xb6, 0x00, 0x00, // ._.......^......
	0x00, 0x56, 0x00, 0x05, 0x00, 0x5a, 0x00, 0x00, 0x00, 0x73, 0x01, 0x00, 0x00, 0x49, 0x00, 0x00, // .V...Z...s...I..
	0x00, 0x46, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x76, 0x01, 0x00, // .F...X.......v..
	0x00, 0x73, 0x01, 0x00, 0x00, 0x5f, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xaa, 0x00, 0x00, // .s..._..........
	0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x79, 0x01, 0x00, 0x00, 0x6c, 0x01, 0x00, // .Q.......y...l..
	0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x90, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0xfb, 0x00, 0x03, 0x00, 0x7d, 0x00, 0x00, 0x00, 0x87, 0x01, 0x00, 0x00, 0xf8, 0x00, 0x02, // .....}..........
	0x00, 0x87, 0x01, 0x00, 0x00, 0xbc, 0x00, 0x05, 0x00, 0x69, 0x00, 0x00, 0x00, 0x88, 0x01, 0x00, // .........i......
	0x00, 0x79, 0x01, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x8f, 0x01, 0x00, // .y...h..........
	0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0x88, 0x01, 0x00, 0x00, 0x89, 0x01, 0x00, // ................
	0x00, 0x8b, 0x01, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x8b, 0x01, 0x00, 0x00, 0x0c, 0x00, 0x08, // ................
	0x00, 0x07, 0x00, 0x00, 0x00, 0x8d, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, // .............2..
	0x00, 0x79, 0x01, 0x00, 0x00, 0x71, 0x00, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, // .y...q...s......
	0x00, 0x07, 0x00, 0x00, 0x00, 0x8e, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, // ................
	0x00, 0x8d, 0x01, 0x00, 0x00, 0x75, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x90, 0x01, 0x00, // .....u..........
	0x00, 0xf8, 0x00, 0x02, 0x00, 0x89, 0x01, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // ................
	0x00, 0x8a, 0x01, 0x00, 0x00, 0x79, 0x01, 0x00, 0x00, 0x6d, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, // .....y...m......
	0x00, 0x90, 0x01, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x8f, 0x01, 0x00, 0x00, 0xff, 0x00, 0x01, // ................
	0x00, 0xf8, 0x00, 0x02, 0x00, 0x90, 0x01, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, // ................
	0x00, 0x50, 0x02, 0x00, 0x00, 0x8e, 0x01, 0x00, 0x00, 0x8b, 0x01, 0x00, 0x00, 0x8a, 0x01, 0x00, // .P..............
	0x00, 0x89, 0x01, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x7b, 0x01, 0x00, // .....Q.......{..
	0x00, 0x6c, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0xa2, 0x01, 0x00, // .l..............
	0x00, 0x00, 0x00, 0x00, 0x00, 0xfb, 0x00, 0x03, 0x00, 0x7d, 0x00, 0x00, 0x00, 0x99, 0x01, 0x00, // .........}......
	0x00, 0xf8, 0x00, 0x02, 0x00, 0x99, 0x01, 0x00, 0x00, 0xbc, 0x00, 0x05, 0x00, 0x69, 0x00, 0x00, // .............i..
	0x00, 0x9a, 0x01, 0x00, 0x00, 0x7b, 0x01, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, // .....{...h......
	0x00, 0xa1, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0x9a, 0x01, 0x00, // ................
	0x00, 0x9b, 0x01, 0x00, 0x00, 0x9d, 0x01, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x9d, 0x01, 0x00, // ................
	0x00, 0x0c, 0x00, 0x08, 0x00, 0x07, 0x00, 0x00, 0x00, 0x9f, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, // ................
	0x00, 0x32, 0x00, 0x00, 0x00, 0x7b, 0x01, 0x00, 0x00, 0x71, 0x00, 0x00, 0x00, 0x73, 0x00, 0x00, // .2...{...q...s..
	0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0xa0, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, // ................
	0x00, 0x1a, 0x00, 0x00, 0x00, 0x9f, 0x01, 0x00, 0x00, 0x75, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, // .........u......
	0x00, 0xa2, 0x01, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x9b, 0x01, 0x00, 0x00, 0x85, 0x00, 0x05, // ................
	0x00, 0x07, 0x00, 0x00, 0x00, 0x9c, 0x01, 0x00, 0x00, 0x7b, 0x01, 0x00, 0x00, 0x6d, 0x00, 0x00, // .........{...m..
	0x00, 0xf9, 0x00, 0x02, 0x00, 0xa2, 0x01, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xa1, 0x01, 0x00, // ................
	0x00, 0xff, 0x00, 0x01, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xa2, 0x01, 0x00, 0x00, 0xf5, 0x00, 0x07, // ................
	0x00, 0x07, 0x00, 0x00, 0x00, 0x51, 0x02, 0x00, 0x00, 0xa0, 0x01, 0x00, 0x00, 0x9d, 0x01, 0x00, // .....Q..........
	0x00, 0x9c, 0x01, 0x00, 0x00, 0x9b, 0x01, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // .........Q......
	0x00, 0x7d, 0x01, 0x00, 0x00, 0x6c, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, // .}...l..........
	0x00, 0xb4, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfb, 0x00, 0x03, 0x00, 0x7d, 0x00, 0x00, // .............}..
	0x00, 0xab, 0x01, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xab, 0x01, 0x00, 0x00, 0xbc, 0x00, 0x05, // ................
	0x00, 0x69, 0x00, 0x00, 0x00, 0xac, 0x01, 0x00, 0x00, 0x7d, 0x01, 0x00, 0x00, 0x68, 0x00, 0x00, // .i.......}...h..
	0x00, 0xf7, 0x00, 0x03, 0x00, 0xb3, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, // ................
	0x00, 0xac, 0x01, 0x00, 0x00, 0xad, 0x01, 0x00, 0x00, 0xaf, 0x01, 0x00, 0x00, 0xf8, 0x00, 0x02, // ................
	0x00, 0xaf, 0x01, 0x00, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x07, 0x00, 0x00, 0x00, 0xb1, 0x01, 0x00, // ................
	0x00, 0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x7d, 0x01, 0x00, 0x00, 0x71, 0x00, 0x00, // .....2...}...q..
	0x00, 0x73, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0xb2, 0x01, 0x00, // .s..............
	0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0xb1, 0x01, 0x00, 0x00, 0x75, 0x00, 0x00, // .............u..
	0x00, 0xf9, 0x00, 0x02, 0x00, 0xb4, 0x01, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xad, 0x01, 0x00, // ................
	0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xae, 0x01, 0x00, 0x00, 0x7d, 0x01, 0x00, // .............}..
	0x00, 0x6d, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0xb4, 0x01, 0x00, 0x00, 0xf8, 0x00, 0x02, // .m..............
	0x00, 0xb3, 0x01, 0x00, 0x00, 0xff, 0x00, 0x01, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xb4, 0x01, 0x00, // ................
	0x00, 0xf5, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x52, 0x02, 0x00, 0x00, 0xb2, 0x01, 0x00, // .........R......
	0x00, 0xaf, 0x01, 0x00, 0x00, 0xae, 0x01, 0x00, 0x00, 0xad, 0x01, 0x00, 0x00, 0x51, 0x00, 0x05, // .............Q..
	0x00, 0x07, 0x00, 0x00, 0x00, 0xb8, 0x01, 0x00, 0x00, 0x76, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, // .........v......
	0x00, 0xf7, 0x00, 0x03, 0x00, 0xcf, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfb, 0x00, 0x03, // ................
	0x00, 0x7d, 0x00, 0x00, 0x00, 0xc6, 0x01, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xc6, 0x01, 0x00, // .}..............
	0x00, 0xbc, 0x00, 0x05, 0x00, 0x69, 0x00, 0x00, 0x00, 0xc7, 0x01, 0x00, 0x00, 0xb8, 0x01, 0x00, // .....i..........
	0x00, 0x68, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0xce, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, // .h..............
	0x00, 0xfa, 0x00, 0x04, 0x00, 0xc7, 0x01, 0x00, 0x00, 0xc8, 0x01, 0x00, 0x00, 0xca, 0x01, 0x00, // ................
	0x00, 0xf8, 0x00, 0x02, 0x00, 0xca, 0x01, 0x00, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x07, 0x00, 0x00, // ................
	0x00, 0xcc, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0xb8, 0x01, 0x00, // .........2......
	0x00, 0x71, 0x00, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, // .q...s..........
	0x00, 0xcd, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0xcc, 0x01, 0x00, // ................
	0x00, 0x75, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0xcf, 0x01, 0x00, 0x00, 0xf8, 0x00, 0x02, // .u..............
	0x00, 0xc8, 0x01, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xc9, 0x01, 0x00, // ................
	0x00, 0xb8, 0x01, 0x00, 0x00, 0x6d, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0xcf, 0x01, 0x00, // .....m..........
	0x00, 0xf8, 0x00, 0x02, 0x00, 0xce, 0x01, 0x00, 0x00, 0xff, 0x00, 0x01, 0x00, 0xf8, 0x00, 0x02, // ................
	0x00, 0xcf, 0x01, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x56, 0x02, 0x00, // .............V..
	0x00, 0xcd, 0x01, 0x00, 0x00, 0xca, 0x01, 0x00, 0x00, 0xc9, 0x01, 0x00, 0x00, 0xc8, 0x01, 0x00, // ................
	0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xba, 0x01, 0x00, 0x00, 0x76, 0x01, 0x00, // .Q...........v..
	0x00, 0x01, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0xe1, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0xfb, 0x00, 0x03, 0x00, 0x7d, 0x00, 0x00, 0x00, 0xd8, 0x01, 0x00, 0x00, 0xf8, 0x00, 0x02, // .....}..........
	0x00, 0xd8, 0x01, 0x00, 0x00, 0xbc, 0x00, 0x05, 0x00, 0x69, 0x00, 0x00, 0x00, 0xd9, 0x01, 0x00, // .........i......
	0x00, 0xba, 0x01, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0xe0, 0x01, 0x00, // .....h..........
	0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0xd9, 0x01, 0x00, 0x00, 0xda, 0x01, 0x00, // ................
	0x00, 0xdc, 0x01, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xdc, 0x01, 0x00, 0x00, 0x0c, 0x00, 0x08, // ................
	0x00, 0x07, 0x00, 0x00, 0x00, 0xde, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, // .............2..
	0x00, 0xba, 0x01, 0x00, 0x00, 0x71, 0x00, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, // .....q...s......
	0x00, 0x07, 0x00, 0x00, 0x00, 0xdf, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, // ................
	0x00, 0xde, 0x01, 0x00, 0x00, 0x75, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0xe1, 0x01, 0x00, // .....u..........
	0x00, 0xf8, 0x00, 0x02, 0x00, 0xda, 0x01, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, // ................
	0x00, 0xdb, 0x01, 0x00, 0x00, 0xba, 0x01, 0x00, 0x00, 0x6d, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, // .........m......
	0x00, 0xe1, 0x01, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xe0, 0x01, 0x00, 0x00, 0xff, 0x00, 0x01, // ................
	0x00, 0xf8, 0x00, 0x02, 0x00, 0xe1, 0x01, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, // ................
	0x00, 0x57, 0x02, 0x00, 0x00, 0xdf, 0x01, 0x00, 0x00, 0xdc, 0x01, 0x00, 0x00, 0xdb, 0x01, 0x00, // .W..............
	0x00, 0xda, 0x01, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xbc, 0x01, 0x00, // .....Q..........
	0x00, 0x76, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0xf3, 0x01, 0x00, // .v..............
	0x00, 0x00, 0x00, 0x00, 0x00, 0xfb, 0x00, 0x03, 0x00, 0x7d, 0x00, 0x00, 0x00, 0xea, 0x01, 0x00, // .........}......
	0x00, 0xf8, 0x00, 0x02, 0x00, 0xea, 0x01, 0x00, 0x00, 0xbc, 0x00, 0x05, 0x00, 0x69, 0x00, 0x00, // .............i..
	0x00, 0xeb, 0x01, 0x00, 0x00, 0xbc, 0x01, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, // .........h......
	0x00, 0xf2, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0xeb, 0x01, 0x00, // ................
	0x00, 0xec, 0x01, 0x00, 0x00, 0xee, 0x01, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xee, 0x01, 0x00, // ................
	0x00, 0x0c, 0x00, 0x08, 0x00, 0x07, 0x00, 0x00, 0x00, 0xf0, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, // ................
	0x00, 0x32, 0x00, 0x00, 0x00, 0xbc, 0x01, 0x00, 0x00, 0x71, 0x00, 0x00, 0x00, 0x73, 0x00, 0x00, // .2.......q...s..
	0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0xf1, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, // ................
	0x00, 0x1a, 0x00, 0x00, 0x00, 0xf0, 0x01, 0x00, 0x00, 0x75, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, // .........u......
	0x00, 0xf3, 0x01, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xec, 0x01, 0x00, 0x00, 0x85, 0x00, 0x05, // ................
	0x00, 0x07, 0x00, 0x00, 0x00, 0xed, 0x01, 0x00, 0x00, 0xbc, 0x01, 0x00, 0x00, 0x6d, 0x00, 0x00, // .............m..
	0x00, 0xf9, 0x00, 0x02, 0x00, 0xf3, 0x01, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xf2, 0x01, 0x00, // ................
	0x00, 0xff, 0x00, 0x01, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xf3, 0x01, 0x00, 0x00, 0xf5, 0x00, 0x07, // ................
	0x00, 0x07, 0x00, 0x00, 0x00, 0x58, 0x02, 0x00, 0x00, 0xf1, 0x01, 0x00, 0x00, 0xee, 0x01, 0x00, // .....X..........
	0x00, 0xed, 0x01, 0x00, 0x00, 0xec, 0x01, 0x00, 0x00, 0x41, 0x00, 0x05, 0x00, 0xc3, 0x00, 0x00, // .........A......
	0x00, 0xf8, 0x01, 0x00, 0x00, 0xc2, 0x00, 0x00, 0x00, 0x56, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, // .........V...=..
	0x00, 0xbf, 0x00, 0x00, 0x00, 0xf9, 0x01, 0x00, 0x00, 0xf8, 0x01, 0x00, 0x00, 0x50, 0x00, 0x07, // .............P..
	0x00, 0x0e, 0x00, 0x00, 0x00, 0xfd, 0x01, 0x00, 0x00, 0x50, 0x02, 0x00, 0x00, 0x51, 0x02, 0x00, // .........P...Q..
	0x00, 0x52, 0x02, 0x00, 0x00, 0xb6, 0x00, 0x00, 0x00, 0x91, 0x00, 0x05, 0x00, 0x0e, 0x00, 0x00, // .R..............
	0x00, 0xfe, 0x01, 0x00, 0x00, 0xf9, 0x01, 0x00, 0x00, 0xfd, 0x01, 0x00, 0x00, 0x41, 0x00, 0x05, // .............A..
	0x00, 0xc3, 0x00, 0x00, 0x00, 0xff, 0x01, 0x00, 0x00, 0xc2, 0x00, 0x00, 0x00, 0x52, 0x00, 0x00, // .............R..
	0x00, 0x3d, 0x00, 0x04, 0x00, 0xbf, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0xff, 0x01, 0x00, // .=..............
	0x00, 0x50, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x04, 0x02, 0x00, 0x00, 0x56, 0x02, 0x00, // .P...........V..
	0x00, 0x57, 0x02, 0x00, 0x00, 0x58, 0x02, 0x00, 0x00, 0xb6, 0x00, 0x00, 0x00, 0x91, 0x00, 0x05, // .W...X..........
	0x00, 0x0e, 0x00, 0x00, 0x00, 0x05, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x04, 0x02, 0x00, // ................
	0x00, 0x81, 0x00, 0x05, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x06, 0x02, 0x00, 0x00, 0xfe, 0x01, 0x00, // ................
	0x00, 0x05, 0x02, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x0b, 0x02, 0x00, // .....Q..........
	0x00, 0x06, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbc, 0x00, 0x05, 0x00, 0x69, 0x00, 0x00, // .............i..
	0x00, 0x18, 0x02, 0x00, 0x00, 0x0b, 0x02, 0x00, 0x00, 0x89, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, // ................
	0x00, 0x1f, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0x18, 0x02, 0x00, // ................
	0x00, 0x19, 0x02, 0x00, 0x00, 0x1b, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x1b, 0x02, 0x00, // ................
	0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x1c, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, // ................
	0x00, 0x1a, 0x00, 0x00, 0x00, 0x0b, 0x02, 0x00, 0x00, 0x92, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x08, // ................
	0x00, 0x07, 0x00, 0x00, 0x00, 0x1e, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, // .............2..
	0x00, 0x91, 0x00, 0x00, 0x00, 0x1c, 0x02, 0x00, 0x00, 0x4f, 0x02, 0x00, 0x00, 0xf9, 0x00, 0x02, // .........O......
	0x00, 0x1f, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x19, 0x02, 0x00, 0x00, 0x85, 0x00, 0x05, // ................
	0x00, 0x07, 0x00, 0x00, 0x00, 0x1a, 0x02, 0x00, 0x00, 0x8e, 0x00, 0x00, 0x00, 0x0b, 0x02, 0x00, // ................
	0x00, 0xf9, 0x00, 0x02, 0x00, 0x1f, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x1f, 0x02, 0x00, // ................
	0x00, 0xf5, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x5c, 0x02, 0x00, 0x00, 0x1e, 0x02, 0x00, // ................
	0x00, 0x1b, 0x02, 0x00, 0x00, 0x1a, 0x02, 0x00, 0x00, 0x19, 0x02, 0x00, 0x00, 0x51, 0x00, 0x05, // .............Q..
	0x00, 0x07, 0x00, 0x00, 0x00, 0x0d, 0x02, 0x00, 0x00, 0x06, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, // ................
	0x00, 0xbc, 0x00, 0x05, 0x00, 0x69, 0x00, 0x00, 0x00, 0x27, 0x02, 0x00, 0x00, 0x0d, 0x02, 0x00, // .....i...'......
	0x00, 0x89, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x2e, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0xfa, 0x00, 0x04, 0x00, 0x27, 0x02, 0x00, 0x00, 0x28, 0x02, 0x00, 0x00, 0x2a, 0x02, 0x00, // .....'...(...*..
	0x00, 0xf8, 0x00, 0x02, 0x00, 0x2a, 0x02, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, // .....*..........
	0x00, 0x2b, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x0d, 0x02, 0x00, // .+..............
	0x00, 0x92, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x07, 0x00, 0x00, 0x00, 0x2d, 0x02, 0x00, // .............-..
	0x00, 0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00, 0x2b, 0x02, 0x00, // .....2.......+..
	0x00, 0x4f, 0x02, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x2e, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, // .O..............
	0x00, 0x28, 0x02, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x29, 0x02, 0x00, // .(...........)..
	0x00, 0x8e, 0x00, 0x00, 0x00, 0x0d, 0x02, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x2e, 0x02, 0x00, // ................
	0x00, 0xf8, 0x00, 0x02, 0x00, 0x2e, 0x02, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, // ................
	0x00, 0x5d, 0x02, 0x00, 0x00, 0x2d, 0x02, 0x00, 0x00, 0x2a, 0x02, 0x00, 0x00, 0x29, 0x02, 0x00, // .]...-...*...)..
	0x00, 0x28, 0x02, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x0f, 0x02, 0x00, // .(...Q..........
	0x00, 0x06, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xbc, 0x00, 0x05, 0x00, 0x69, 0x00, 0x00, // .............i..
	0x00, 0x36, 0x02, 0x00, 0x00, 0x0f, 0x02, 0x00, 0x00, 0x89, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, // .6..............
	0x00, 0x3d, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0x36, 0x02, 0x00, // .=...........6..
	0x00, 0x37, 0x02, 0x00, 0x00, 0x39, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x39, 0x02, 0x00, // .7...9.......9..
	0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x3a, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, // .........:......
	0x00, 0x1a, 0x00, 0x00, 0x00, 0x0f, 0x02, 0x00, 0x00, 0x92, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x08, // ................
	0x00, 0x07, 0x00, 0x00, 0x00, 0x3c, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, // .....<.......2..
	0x00, 0x91, 0x00, 0x00, 0x00, 0x3a, 0x02, 0x00, 0x00, 0x4f, 0x02, 0x00, 0x00, 0xf9, 0x00, 0x02, // .....:...O......
	0x00, 0x3d, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x37, 0x02, 0x00, 0x00, 0x85, 0x00, 0x05, // .=.......7......
	0x00, 0x07, 0x00, 0x00, 0x00, 0x38, 0x02, 0x00, 0x00, 0x8e, 0x00, 0x00, 0x00, 0x0f, 0x02, 0x00, // .....8..........
	0x00, 0xf9, 0x00, 0x02, 0x00, 0x3d, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x3d, 0x02, 0x00, // .....=.......=..
	0x00, 0xf5, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x5e, 0x02, 0x00, 0x00, 0x3c, 0x02, 0x00, // .........^...<..
	0x00, 0x39, 0x02, 0x00, 0x00, 0x38, 0x02, 0x00, 0x00, 0x37, 0x02, 0x00, 0x00, 0x50, 0x00, 0x07, // .9...8...7...P..
	0x00, 0x0e, 0x00, 0x00, 0x00, 0x44, 0x01, 0x00, 0x00, 0x5c, 0x02, 0x00, 0x00, 0x5d, 0x02, 0x00, // .....D.......]..
	0x00, 0x5e, 0x02, 0x00, 0x00, 0xb6, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x03, 0x00, 0x08, 0x01, 0x00, // .^.......>......
	0x00, 0x44, 0x01, 0x00, 0x00, 0xfd, 0x00, 0x01, 0x00, 0x38, 0x00, 0x01, 0x00, 0x00, 0x00, 0x80, // .D.......8......
	0x00,                                                                                           // .
};
static const bgfx::EmbeddedShader fs_pp_stereo_anaglyph_lin_srgb_nodesat_st = BGFX_EMBEDDED_SHADER(fs_pp_stereo_anaglyph_lin_srgb_nodesat_st);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Build of fragment shader from fs_pp_stereo.sc to fs_pp_stereo_anaglyph_lin_srgb_dyndesat_st with options: ANAGLYPH DYNDESAT SRGB STEREO
static const uint8_t fs_pp_stereo_anaglyph_lin_srgb_dyndesat_st_mtl[5574] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x14, 0x74, // FSH.Jc._.......t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, // ex_stereo_fbSamp
	0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x74, 0x65, // ler...........te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x54, 0x65, 0x78, 0x74, 0x75, // x_stereo_fbTextu
	0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x74, 0x65, 0x78, // re...........tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, // _stereo_depthSam
	0x70, 0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x74, // pler...........t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x54, // ex_stereo_depthT
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, // exture..........
	0x1a, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, // .Stereo_LeftLumi
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x12, 0x01, 0x80, 0x00, 0x01, // nance_Gamma.....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, // ......Stereo_Rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, // htLuminance_DynD
	0x65, 0x73, 0x61, 0x74, 0x12, 0x01, 0x90, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x53, // esat...........S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x01, 0x00, // tereo_LeftMat...
	0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, // ........Stereo_R
	0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x01, 0x40, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, // ightMat..@......
	0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x10, // ..tex_stereo_fb.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x95, 0x14, 0x00, 0x00, 0x23, 0x69, 0x6e, // .............#in
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x64, // clude <metal_std
	0x6c, 0x69, 0x62, 0x3e, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x73, // lib>.#include <s
	0x69, 0x6d, 0x64, 0x2f, 0x73, 0x69, 0x6d, 0x64, 0x2e, 0x68, 0x3e, 0x0a, 0x0a, 0x75, 0x73, 0x69, // imd/simd.h>..usi
	0x6e, 0x67, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x6d, 0x65, 0x74, // ng namespace met
	0x61, 0x6c, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x5f, 0x47, 0x6c, 0x6f, // al;..struct _Glo
	0x62, 0x61, 0x6c, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, // bal.{.    float4
	0x78, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, // x4 Stereo_LeftMa
	0x74, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x78, 0x34, 0x20, // t;.    float4x4 
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x3b, // Stereo_RightMat;
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, // .    float4 Ster
	0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, // eo_LeftLuminance
	0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, // _Gamma;.    floa
	0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, // t4 Stereo_RightL
	0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, // uminance_DynDesa
	0x74, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x78, 0x6c, // t;.};..struct xl
	0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x0a, 0x7b, 0x0a, // atMtlMain_out.{.
	0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, //     float4 bgfx_
	0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x20, 0x5b, 0x5b, 0x63, 0x6f, 0x6c, 0x6f, // FragData0 [[colo
	0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, // r(0)]];.};..stru
	0x63, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x69, // ct xlatMtlMain_i
	0x6e, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x76, // n.{.    float2 v
	0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x5b, 0x5b, 0x75, 0x73, 0x65, // _texcoord0 [[use
	0x72, 0x28, 0x6c, 0x6f, 0x63, 0x6e, 0x31, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, // r(locn1)]];.};..
	0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, // fragment xlatMtl
	0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, // Main_out xlatMtl
	0x4d, 0x61, 0x69, 0x6e, 0x28, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, // Main(xlatMtlMain
	0x5f, 0x69, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x5b, 0x5b, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, // _in in [[stage_i
	0x6e, 0x5d, 0x5d, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x20, 0x5f, 0x47, // n]], constant _G
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x26, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x20, 0x5b, 0x5b, // lobal& _mtl_u [[
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x74, 0x65, 0x78, // buffer(0)]], tex
	0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x3c, 0x66, 0x6c, 0x6f, // ture2d_array<flo
	0x61, 0x74, 0x3e, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, // at> tex_stereo_f
	0x62, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x30, 0x29, 0x5d, 0x5d, // b [[texture(0)]]
	0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // , sampler tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x5b, // ereo_fbSampler [
	0x5b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x29, 0x0a, 0x7b, // [sampler(0)]]).{
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, // .    xlatMtlMain
	0x5f, 0x6f, 0x75, 0x74, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x3d, 0x20, 0x7b, 0x7d, 0x3b, 0x0a, 0x20, // _out out = {};. 
	0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x34, 0x36, 0x36, 0x20, 0x3d, //    float3 _466 =
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, //  float3(in.v_tex
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, // coord0, 0.0);.  
	0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x34, 0x38, 0x37, 0x20, 0x3d, 0x20, //   float4 _487 = 
	0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2e, 0x73, 0x61, // tex_stereo_fb.sa
	0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // mple(tex_stereo_
	0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x34, 0x36, 0x36, 0x2e, // fbSampler, _466.
	0x78, 0x79, 0x2c, 0x20, 0x75, 0x69, 0x6e, 0x74, 0x28, 0x72, 0x69, 0x6e, 0x74, 0x28, 0x5f, 0x34, // xy, uint(rint(_4
	0x36, 0x36, 0x2e, 0x7a, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, // 66.z)), level(0.
	0x30, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, // 0));.    float3 
	0x5f, 0x34, 0x37, 0x34, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x69, 0x6e, // _474 = float3(in
	0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2c, 0x20, 0x31, 0x2e, // .v_texcoord0, 1.
	0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, // 0);.    float4 _
	0x34, 0x39, 0x37, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // 497 = tex_stereo
	0x5f, 0x66, 0x62, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, // _fb.sample(tex_s
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, // tereo_fbSampler,
	0x20, 0x5f, 0x34, 0x37, 0x34, 0x2e, 0x78, 0x79, 0x2c, 0x20, 0x75, 0x69, 0x6e, 0x74, 0x28, 0x72, //  _474.xy, uint(r
	0x69, 0x6e, 0x74, 0x28, 0x5f, 0x34, 0x37, 0x34, 0x2e, 0x7a, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, // int(_474.z)), le
	0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, // vel(0.0));.    f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x35, 0x30, 0x30, 0x20, 0x3d, 0x20, 0x5f, 0x34, 0x38, 0x37, // loat _500 = _487
	0x2e, 0x78, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x38, // .x;.    float _8
	0x30, 0x38, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x64, 0x6f, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, // 08;.    do.    {
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, 0x35, 0x30, // .        if (_50
	0x30, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, 0x34, 0x34, 0x39, 0x39, 0x39, 0x39, // 0 <= 0.040449999
	0x32, 0x37, 0x32, 0x38, 0x32, 0x33, 0x33, 0x33, 0x33, 0x37, 0x34, 0x30, 0x32, 0x33, 0x34, 0x33, // 2728233337402343
	0x37, 0x35, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, // 75).        {.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x38, 0x30, 0x38, 0x20, 0x3d, //           _808 =
	0x20, 0x5f, 0x35, 0x30, 0x30, 0x20, 0x2a, 0x20, 0x30, 0x2e, 0x30, 0x37, 0x37, 0x33, 0x39, 0x39, //  _500 * 0.077399
	0x33, 0x38, 0x30, 0x35, 0x30, 0x35, 0x30, 0x38, 0x34, 0x39, 0x39, 0x31, 0x34, 0x35, 0x35, 0x30, // 3805050849914550
	0x37, 0x38, 0x31, 0x32, 0x35, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 78125;.         
	0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //    break;.      
	0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, //   }.        else
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // .        {.     
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x38, 0x30, 0x38, 0x20, 0x3d, 0x20, 0x70, 0x6f, //        _808 = po
	0x77, 0x72, 0x28, 0x66, 0x6d, 0x61, 0x28, 0x5f, 0x35, 0x30, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x39, // wr(fma(_500, 0.9
	0x34, 0x37, 0x38, 0x36, 0x37, 0x32, 0x37, 0x34, 0x32, 0x38, 0x34, 0x33, 0x36, 0x32, 0x37, 0x39, // 4786727428436279
	0x32, 0x39, 0x36, 0x38, 0x37, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x32, 0x31, 0x33, 0x32, // 296875, 0.052132
	0x36, 0x39, 0x39, 0x36, 0x33, 0x38, 0x36, 0x30, 0x35, 0x31, 0x31, 0x37, 0x37, 0x39, 0x37, 0x38, // 6996386051177978
	0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x30, 0x30, 0x30, 0x30, // 515625), 2.40000
	0x30, 0x30, 0x39, 0x35, 0x33, 0x36, 0x37, 0x34, 0x33, 0x31, 0x36, 0x34, 0x30, 0x36, 0x32, 0x35, // 0095367431640625
	0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, // );.            b
	0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, // reak;.        }.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x20, 0x2f, //         break; /
	0x2f, 0x20, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x20, 0x77, 0x6f, // / unreachable wo
	0x72, 0x6b, 0x61, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x20, 0x77, // rkaround.    } w
	0x68, 0x69, 0x6c, 0x65, 0x28, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, // hile(false);.   
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x35, 0x30, 0x32, 0x20, 0x3d, 0x20, 0x5f, 0x34, //  float _502 = _4
	0x38, 0x37, 0x2e, 0x79, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // 87.y;.    float 
	0x5f, 0x38, 0x30, 0x39, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x64, 0x6f, 0x0a, 0x20, 0x20, 0x20, // _809;.    do.   
	0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, //  {.        if (_
	0x35, 0x30, 0x32, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, 0x34, 0x34, 0x39, 0x39, // 502 <= 0.0404499
	0x39, 0x39, 0x32, 0x37, 0x32, 0x38, 0x32, 0x33, 0x33, 0x33, 0x33, 0x37, 0x34, 0x30, 0x32, 0x33, // 9927282333374023
	0x34, 0x33, 0x37, 0x35, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, // 4375).        {.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x38, 0x30, 0x39, //             _809
	0x20, 0x3d, 0x20, 0x5f, 0x35, 0x30, 0x32, 0x20, 0x2a, 0x20, 0x30, 0x2e, 0x30, 0x37, 0x37, 0x33, //  = _502 * 0.0773
	0x39, 0x39, 0x33, 0x38, 0x30, 0x35, 0x30, 0x35, 0x30, 0x38, 0x34, 0x39, 0x39, 0x31, 0x34, 0x35, // 9938050508499145
	0x35, 0x30, 0x37, 0x38, 0x31, 0x32, 0x35, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 5078125;.       
	0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, //      break;.    
	0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, //     }.        el
	0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, // se.        {.   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x38, 0x30, 0x39, 0x20, 0x3d, 0x20, //          _809 = 
	0x70, 0x6f, 0x77, 0x72, 0x28, 0x66, 0x6d, 0x61, 0x28, 0x5f, 0x35, 0x30, 0x32, 0x2c, 0x20, 0x30, // powr(fma(_502, 0
	0x2e, 0x39, 0x34, 0x37, 0x38, 0x36, 0x37, 0x32, 0x37, 0x34, 0x32, 0x38, 0x34, 0x33, 0x36, 0x32, // .947867274284362
	0x37, 0x39, 0x32, 0x39, 0x36, 0x38, 0x37, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x32, 0x31, // 79296875, 0.0521
	0x33, 0x32, 0x36, 0x39, 0x39, 0x36, 0x33, 0x38, 0x36, 0x30, 0x35, 0x31, 0x31, 0x37, 0x37, 0x39, // 3269963860511779
	0x37, 0x38, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x30, 0x30, // 78515625), 2.400
	0x30, 0x30, 0x30, 0x30, 0x39, 0x35, 0x33, 0x36, 0x37, 0x34, 0x33, 0x31, 0x36, 0x34, 0x30, 0x36, // 0000953674316406
	0x32, 0x35, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 25);.           
	0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //  break;.        
	0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, // }.        break;
	0x20, 0x2f, 0x2f, 0x20, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x20, //  // unreachable 
	0x77, 0x6f, 0x72, 0x6b, 0x61, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, // workaround.    }
	0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x28, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x20, //  while(false);. 
	0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x35, 0x30, 0x34, 0x20, 0x3d, 0x20, //    float _504 = 
	0x5f, 0x34, 0x38, 0x37, 0x2e, 0x7a, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, // _487.z;.    floa
	0x74, 0x20, 0x5f, 0x38, 0x31, 0x30, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x64, 0x6f, 0x0a, 0x20, // t _810;.    do. 
	0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, //    {.        if 
	0x28, 0x5f, 0x35, 0x30, 0x34, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, 0x34, 0x34, // (_504 <= 0.04044
	0x39, 0x39, 0x39, 0x39, 0x32, 0x37, 0x32, 0x38, 0x32, 0x33, 0x33, 0x33, 0x33, 0x37, 0x34, 0x30, // 9999272823333740
	0x32, 0x33, 0x34, 0x33, 0x37, 0x35, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 234375).        
	0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x38, // {.            _8
	0x31, 0x30, 0x20, 0x3d, 0x20, 0x5f, 0x35, 0x30, 0x34, 0x20, 0x2a, 0x20, 0x30, 0x2e, 0x30, 0x37, // 10 = _504 * 0.07
	0x37, 0x33, 0x39, 0x39, 0x33, 0x38, 0x30, 0x35, 0x30, 0x35, 0x30, 0x38, 0x34, 0x39, 0x39, 0x31, // 7399380505084991
	0x34, 0x35, 0x35, 0x30, 0x37, 0x38, 0x31, 0x32, 0x35, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // 455078125;.     
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, //        break;.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //       }.        
	0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, // else.        {. 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x38, 0x31, 0x30, 0x20, //            _810 
	0x3d, 0x20, 0x70, 0x6f, 0x77, 0x72, 0x28, 0x66, 0x6d, 0x61, 0x28, 0x5f, 0x35, 0x30, 0x34, 0x2c, // = powr(fma(_504,
	0x20, 0x30, 0x2e, 0x39, 0x34, 0x37, 0x38, 0x36, 0x37, 0x32, 0x37, 0x34, 0x32, 0x38, 0x34, 0x33, //  0.9478672742843
	0x36, 0x32, 0x37, 0x39, 0x32, 0x39, 0x36, 0x38, 0x37, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x35, // 6279296875, 0.05
	0x32, 0x31, 0x33, 0x32, 0x36, 0x39, 0x39, 0x36, 0x33, 0x38, 0x36, 0x30, 0x35, 0x31, 0x31, 0x37, // 2132699638605117
	0x37, 0x39, 0x37, 0x38, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, 0x34, // 7978515625), 2.4
	0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x39, 0x35, 0x33, 0x36, 0x37, 0x34, 0x33, 0x31, 0x36, 0x34, // 0000009536743164
	0x30, 0x36, 0x32, 0x35, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 0625);.         
	0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //    break;.      
	0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, //   }.        brea
	0x6b, 0x3b, 0x20, 0x2f, 0x2f, 0x20, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, // k; // unreachabl
	0x65, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x61, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x0a, 0x20, 0x20, 0x20, // e workaround.   
	0x20, 0x7d, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x28, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x29, 0x3b, //  } while(false);
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x35, 0x30, 0x36, // .    float3 _506
	0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x38, 0x30, 0x38, 0x2c, 0x20, //  = float3(_808, 
	0x5f, 0x38, 0x30, 0x39, 0x2c, 0x20, 0x5f, 0x38, 0x31, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, // _809, _810);.   
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x35, 0x36, 0x33, 0x20, 0x3d, 0x20, 0x5f, 0x34, //  float _563 = _4
	0x39, 0x37, 0x2e, 0x78, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // 97.x;.    float 
	0x5f, 0x38, 0x31, 0x34, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x64, 0x6f, 0x0a, 0x20, 0x20, 0x20, // _814;.    do.   
	0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, //  {.        if (_
	0x35, 0x36, 0x33, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, 0x34, 0x34, 0x39, 0x39, // 563 <= 0.0404499
	0x39, 0x39, 0x32, 0x37, 0x32, 0x38, 0x32, 0x33, 0x33, 0x33, 0x33, 0x37, 0x34, 0x30, 0x32, 0x33, // 9927282333374023
	0x34, 0x33, 0x37, 0x35, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, // 4375).        {.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x38, 0x31, 0x34, //             _814
	0x20, 0x3d, 0x20, 0x5f, 0x35, 0x36, 0x33, 0x20, 0x2a, 0x20, 0x30, 0x2e, 0x30, 0x37, 0x37, 0x33, //  = _563 * 0.0773
	0x39, 0x39, 0x33, 0x38, 0x30, 0x35, 0x30, 0x35, 0x30, 0x38, 0x34, 0x39, 0x39, 0x31, 0x34, 0x35, // 9938050508499145
	0x35, 0x30, 0x37, 0x38, 0x31, 0x32, 0x35, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 5078125;.       
	0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, //      break;.    
	0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, //     }.        el
	0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, // se.        {.   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x38, 0x31, 0x34, 0x20, 0x3d, 0x20, //          _814 = 
	0x70, 0x6f, 0x77, 0x72, 0x28, 0x66, 0x6d, 0x61, 0x28, 0x5f, 0x35, 0x36, 0x33, 0x2c, 0x20, 0x30, // powr(fma(_563, 0
	0x2e, 0x39, 0x34, 0x37, 0x38, 0x36, 0x37, 0x32, 0x37, 0x34, 0x32, 0x38, 0x34, 0x33, 0x36, 0x32, // .947867274284362
	0x37, 0x39, 0x32, 0x39, 0x36, 0x38, 0x37, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x32, 0x31, // 79296875, 0.0521
	0x33, 0x32, 0x36, 0x39, 0x39, 0x36, 0x33, 0x38, 0x36, 0x30, 0x35, 0x31, 0x31, 0x37, 0x37, 0x39, // 3269963860511779
	0x37, 0x38, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x30, 0x30, // 78515625), 2.400
	0x30, 0x30, 0x30, 0x30, 0x39, 0x35, 0x33, 0x36, 0x37, 0x34, 0x33, 0x31, 0x36, 0x34, 0x30, 0x36, // 0000953674316406
	0x32, 0x35, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 25);.           
	0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //  break;.        
	0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, // }.        break;
	0x20, 0x2f, 0x2f, 0x20, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x20, //  // unreachable 
	0x77, 0x6f, 0x72, 0x6b, 0x61, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, // workaround.    }
	0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x28, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x20, //  while(false);. 
	0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x35, 0x36, 0x35, 0x20, 0x3d, 0x20, //    float _565 = 
	0x5f, 0x34, 0x39, 0x37, 0x2e, 0x79, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, // _497.y;.    floa
	0x74, 0x20, 0x5f, 0x38, 0x31, 0x35, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x64, 0x6f, 0x0a, 0x20, // t _815;.    do. 
	0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, //    {.        if 
	0x28, 0x5f, 0x35, 0x36, 0x35, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, 0x34, 0x34, // (_565 <= 0.04044
	0x39, 0x39, 0x39, 0x39, 0x32, 0x37, 0x32, 0x38, 0x32, 0x33, 0x33, 0x33, 0x33, 0x37, 0x34, 0x30, // 9999272823333740
	0x32, 0x33, 0x34, 0x33, 0x37, 0x35, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 234375).        
	0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x38, // {.            _8
	0x31, 0x35, 0x20, 0x3d, 0x20, 0x5f, 0x35, 0x36, 0x35, 0x20, 0x2a, 0x20, 0x30, 0x2e, 0x30, 0x37, // 15 = _565 * 0.07
	0x37, 0x33, 0x39, 0x39, 0x33, 0x38, 0x30, 0x35, 0x30, 0x35, 0x30, 0x38, 0x34, 0x39, 0x39, 0x31, // 7399380505084991
	0x34, 0x35, 0x35, 0x30, 0x37, 0x38, 0x31, 0x32, 0x35, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // 455078125;.     
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, //        break;.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //       }.        
	0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, // else.        {. 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x38, 0x31, 0x35, 0x20, //            _815 
	0x3d, 0x20, 0x70, 0x6f, 0x77, 0x72, 0x28, 0x66, 0x6d, 0x61, 0x28, 0x5f, 0x35, 0x36, 0x35, 0x2c, // = powr(fma(_565,
	0x20, 0x30, 0x2e, 0x39, 0x34, 0x37, 0x38, 0x36, 0x37, 0x32, 0x37, 0x34, 0x32, 0x38, 0x34, 0x33, //  0.9478672742843
	0x36, 0x32, 0x37, 0x39, 0x32, 0x39, 0x36, 0x38, 0x37, 0x35, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x35, // 6279296875, 0.05
	0x32, 0x31, 0x33, 0x32, 0x36, 0x39, 0x39, 0x36, 0x33, 0x38, 0x36, 0x30, 0x35, 0x31, 0x31, 0x37, // 2132699638605117
	0x37, 0x39, 0x37, 0x38, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, 0x34, // 7978515625), 2.4
	0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x39, 0x35, 0x33, 0x36, 0x37, 0x34, 0x33, 0x31, 0x36, 0x34, // 0000009536743164
	0x30, 0x36, 0x32, 0x35, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 0625);.         
	0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //    break;.      
	0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, //   }.        brea
	0x6b, 0x3b, 0x20, 0x2f, 0x2f, 0x20, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, // k; // unreachabl
	0x65, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x61, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x0a, 0x20, 0x20, 0x20, // e workaround.   
	0x20, 0x7d, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x28, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x29, 0x3b, //  } while(false);
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x35, 0x36, 0x37, 0x20, // .    float _567 
	0x3d, 0x20, 0x5f, 0x34, 0x39, 0x37, 0x2e, 0x7a, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, // = _497.z;.    fl
	0x6f, 0x61, 0x74, 0x20, 0x5f, 0x38, 0x31, 0x36, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x64, 0x6f, // oat _816;.    do
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, // .    {.        i
	0x66, 0x20, 0x28, 0x5f, 0x35, 0x36, 0x37, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, // f (_567 <= 0.040
	0x34, 0x34, 0x39, 0x39, 0x39, 0x39, 0x32, 0x37, 0x32, 0x38, 0x32, 0x33, 0x33, 0x33, 0x33, 0x37, // 4499992728233337
	0x34, 0x30, 0x32, 0x33, 0x34, 0x33, 0x37, 0x35, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 40234375).      
	0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //   {.            
	0x5f, 0x38, 0x31, 0x36, 0x20, 0x3d, 0x20, 0x5f, 0x35, 0x36, 0x37, 0x20, 0x2a, 0x20, 0x30, 0x2e, // _816 = _567 * 0.
	0x30, 0x37, 0x37, 0x33, 0x39, 0x39, 0x33, 0x38, 0x30, 0x35, 0x30, 0x35, 0x30, 0x38, 0x34, 0x39, // 0773993805050849
	0x39, 0x31, 0x34, 0x35, 0x35, 0x30, 0x37, 0x38, 0x31, 0x32, 0x35, 0x3b, 0x0a, 0x20, 0x20, 0x20, // 91455078125;.   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, //          break;.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //         }.      
	0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, //   else.        {
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x38, 0x31, // .            _81
	0x36, 0x20, 0x3d, 0x20, 0x70, 0x6f, 0x77, 0x72, 0x28, 0x66, 0x6d, 0x61, 0x28, 0x5f, 0x35, 0x36, // 6 = powr(fma(_56
	0x37, 0x2c, 0x20, 0x30, 0x2e, 0x39, 0x34, 0x37, 0x38, 0x36, 0x37, 0x32, 0x37, 0x34, 0x32, 0x38, // 7, 0.94786727428
	0x34, 0x33, 0x36, 0x32, 0x37, 0x39, 0x32, 0x39, 0x36, 0x38, 0x37, 0x35, 0x2c, 0x20, 0x30, 0x2e, // 436279296875, 0.
	0x30, 0x35, 0x32, 0x31, 0x33, 0x32, 0x36, 0x39, 0x39, 0x36, 0x33, 0x38, 0x36, 0x30, 0x35, 0x31, // 0521326996386051
	0x31, 0x37, 0x37, 0x39, 0x37, 0x38, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x2c, 0x20, 0x32, // 177978515625), 2
	0x2e, 0x34, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x39, 0x35, 0x33, 0x36, 0x37, 0x34, 0x33, 0x31, // .400000095367431
	0x36, 0x34, 0x30, 0x36, 0x32, 0x35, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 640625);.       
	0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, //      break;.    
	0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, //     }.        br
	0x65, 0x61, 0x6b, 0x3b, 0x20, 0x2f, 0x2f, 0x20, 0x75, 0x6e, 0x72, 0x65, 0x61, 0x63, 0x68, 0x61, // eak; // unreacha
	0x62, 0x6c, 0x65, 0x20, 0x77, 0x6f, 0x72, 0x6b, 0x61, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x0a, 0x20, // ble workaround. 
	0x20, 0x20, 0x20, 0x7d, 0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x28, 0x66, 0x61, 0x6c, 0x73, 0x65, //    } while(false
	0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x35, // );.    float3 _5
	0x36, 0x39, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x38, 0x31, 0x34, // 69 = float3(_814
	0x2c, 0x20, 0x5f, 0x38, 0x31, 0x35, 0x2c, 0x20, 0x5f, 0x38, 0x31, 0x36, 0x29, 0x3b, 0x0a, 0x20, // , _815, _816);. 
	0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x36, 0x34, 0x34, 0x20, 0x3d, 0x20, //    float _644 = 
	0x64, 0x6f, 0x74, 0x28, 0x5f, 0x35, 0x30, 0x36, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, // dot(_506, _mtl_u
	0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, // .Stereo_LeftLumi
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, // nance_Gamma.xyz)
	0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x36, 0x34, 0x38, // ;.    float _648
	0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x5f, 0x35, 0x30, 0x36, 0x2c, 0x20, 0x5f, 0x6d, 0x74, //  = dot(_506, _mt
	0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, // l_u.Stereo_Right
	0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, // Luminance_DynDes
	0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, // at.xyz);.    flo
	0x61, 0x74, 0x20, 0x5f, 0x36, 0x35, 0x32, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x5f, 0x35, // at _652 = dot(_5
	0x36, 0x39, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, // 69, _mtl_u.Stere
	0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, // o_LeftLuminance_
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, // Gamma.xyz);.    
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x36, 0x35, 0x36, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, // float _656 = dot
	0x28, 0x5f, 0x35, 0x36, 0x39, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, // (_569, _mtl_u.St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, // ereo_RightLumina
	0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, // nce_DynDesat.xyz
	0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x36, 0x35, // );.    float _65
	0x39, 0x20, 0x3d, 0x20, 0x5f, 0x36, 0x34, 0x34, 0x20, 0x2b, 0x20, 0x5f, 0x36, 0x34, 0x38, 0x3b, // 9 = _644 + _648;
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x36, 0x36, 0x32, 0x20, // .    float _662 
	0x3d, 0x20, 0x5f, 0x36, 0x35, 0x32, 0x20, 0x2b, 0x20, 0x5f, 0x36, 0x35, 0x36, 0x3b, 0x0a, 0x20, // = _652 + _656;. 
	0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x37, 0x33, 0x34, 0x20, 0x3d, //    float4 _734 =
	0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x6d, 0x69, 0x78, 0x28, 0x5f, 0x35, 0x30, //  (float4(mix(_50
	0x36, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x36, 0x35, 0x39, 0x29, 0x2c, // 6, float3(_659),
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, //  float3(_mtl_u.S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, // tereo_RightLumin
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, // ance_DynDesat.w 
	0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x5f, 0x36, 0x34, 0x34, 0x20, 0x2d, 0x20, 0x5f, 0x36, // * abs((_644 - _6
	0x34, 0x38, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x5f, 0x36, 0x35, 0x39, 0x20, 0x2b, 0x20, 0x39, 0x2e, // 48) / (_659 + 9.
	0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x37, 0x34, 0x37, 0x33, 0x37, 0x38, 0x37, 0x35, 0x31, 0x36, // 9999997473787516
	0x33, 0x35, 0x35, 0x35, 0x31, 0x34, 0x35, 0x32, 0x36, 0x33, 0x36, 0x37, 0x31, 0x38, 0x38, 0x65, // 355514526367188e
	0x2d, 0x30, 0x35, 0x29, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2a, 0x20, // -05)))), 1.0) * 
	0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, // _mtl_u.Stereo_Le
	0x66, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, // ftMat) + (float4
	0x28, 0x6d, 0x69, 0x78, 0x28, 0x5f, 0x35, 0x36, 0x39, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // (mix(_569, float
	0x33, 0x28, 0x5f, 0x36, 0x36, 0x32, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, // 3(_662), float3(
	0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, // _mtl_u.Stereo_Ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, // ghtLuminance_Dyn
	0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x5f, // Desat.w * abs((_
	0x36, 0x35, 0x32, 0x20, 0x2d, 0x20, 0x5f, 0x36, 0x35, 0x36, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x5f, // 652 - _656) / (_
	0x36, 0x36, 0x32, 0x20, 0x2b, 0x20, 0x39, 0x2e, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x37, 0x34, // 662 + 9.99999974
	0x37, 0x33, 0x37, 0x38, 0x37, 0x35, 0x31, 0x36, 0x33, 0x35, 0x35, 0x35, 0x31, 0x34, 0x35, 0x32, // 7378751635551452
	0x36, 0x33, 0x36, 0x37, 0x31, 0x38, 0x38, 0x65, 0x2d, 0x30, 0x35, 0x29, 0x29, 0x29, 0x29, 0x2c, // 6367188e-05)))),
	0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, //  1.0) * _mtl_u.S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x3b, // tereo_RightMat);
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x37, 0x33, 0x39, 0x20, // .    float _739 
	0x3d, 0x20, 0x5f, 0x37, 0x33, 0x34, 0x2e, 0x78, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, // = _734.x;.    fl
	0x6f, 0x61, 0x74, 0x20, 0x5f, 0x38, 0x32, 0x30, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, // oat _820;.    if
	0x20, 0x28, 0x5f, 0x37, 0x33, 0x39, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x33, 0x31, //  (_739 <= 0.0031
	0x33, 0x30, 0x38, 0x30, 0x30, 0x30, 0x39, 0x30, 0x37, 0x33, 0x30, 0x31, 0x39, 0x30, 0x32, 0x37, // 3080009073019027
	0x37, 0x30, 0x39, 0x39, 0x36, 0x30, 0x39, 0x33, 0x37, 0x35, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, // 7099609375).    
	0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x38, 0x32, 0x30, 0x20, 0x3d, // {.        _820 =
	0x20, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x30, 0x30, 0x30, 0x30, 0x30, 0x37, 0x36, 0x32, 0x39, 0x33, //  12.920000076293
	0x39, 0x34, 0x35, 0x33, 0x31, 0x32, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x37, 0x33, 0x39, 0x3b, 0x0a, // 9453125 * _739;.
	0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, //     }.    else. 
	0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x38, 0x32, //    {.        _82
	0x30, 0x20, 0x3d, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x31, 0x2e, 0x30, 0x35, 0x34, 0x39, 0x39, 0x39, // 0 = fma(1.054999
	0x39, 0x34, 0x37, 0x35, 0x34, 0x37, 0x39, 0x31, 0x32, 0x35, 0x39, 0x37, 0x36, 0x35, 0x36, 0x32, // 9475479125976562
	0x35, 0x2c, 0x20, 0x70, 0x6f, 0x77, 0x72, 0x28, 0x5f, 0x37, 0x33, 0x39, 0x2c, 0x20, 0x30, 0x2e, // 5, powr(_739, 0.
	0x34, 0x31, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x37, 0x33, 0x32, 0x35, 0x35, 0x39, 0x32, // 4166666567325592
	0x30, 0x34, 0x31, 0x30, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x2c, 0x20, 0x2d, 0x30, 0x2e, 0x30, // 041015625), -0.0
	0x35, 0x34, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x37, 0x30, 0x31, 0x39, 0x37, 0x36, 0x37, 0x37, // 5499999970197677
	0x36, 0x31, 0x32, 0x33, 0x30, 0x34, 0x36, 0x38, 0x37, 0x35, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, // 6123046875);.   
	0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x37, 0x34, //  }.    float _74
	0x31, 0x20, 0x3d, 0x20, 0x5f, 0x37, 0x33, 0x34, 0x2e, 0x79, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, // 1 = _734.y;.    
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x38, 0x32, 0x31, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, // float _821;.    
	0x69, 0x66, 0x20, 0x28, 0x5f, 0x37, 0x34, 0x31, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, // if (_741 <= 0.00
	0x33, 0x31, 0x33, 0x30, 0x38, 0x30, 0x30, 0x30, 0x39, 0x30, 0x37, 0x33, 0x30, 0x31, 0x39, 0x30, // 3130800090730190
	0x32, 0x37, 0x37, 0x30, 0x39, 0x39, 0x36, 0x30, 0x39, 0x33, 0x37, 0x35, 0x29, 0x0a, 0x20, 0x20, // 277099609375).  
	0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x38, 0x32, 0x31, //   {.        _821
	0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x30, 0x30, 0x30, 0x30, 0x30, 0x37, 0x36, 0x32, //  = 12.9200000762
	0x39, 0x33, 0x39, 0x34, 0x35, 0x33, 0x31, 0x32, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x37, 0x34, 0x31, // 939453125 * _741
	0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, // ;.    }.    else
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, // .    {.        _
	0x38, 0x32, 0x31, 0x20, 0x3d, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x31, 0x2e, 0x30, 0x35, 0x34, 0x39, // 821 = fma(1.0549
	0x39, 0x39, 0x39, 0x34, 0x37, 0x35, 0x34, 0x37, 0x39, 0x31, 0x32, 0x35, 0x39, 0x37, 0x36, 0x35, // 9994754791259765
	0x36, 0x32, 0x35, 0x2c, 0x20, 0x70, 0x6f, 0x77, 0x72, 0x28, 0x5f, 0x37, 0x34, 0x31, 0x2c, 0x20, // 625, powr(_741, 
	0x30, 0x2e, 0x34, 0x31, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x37, 0x33, 0x32, 0x35, 0x35, // 0.41666665673255
	0x39, 0x32, 0x30, 0x34, 0x31, 0x30, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x2c, 0x20, 0x2d, 0x30, // 92041015625), -0
	0x2e, 0x30, 0x35, 0x34, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x37, 0x30, 0x31, 0x39, 0x37, 0x36, // .054999999701976
	0x37, 0x37, 0x36, 0x31, 0x32, 0x33, 0x30, 0x34, 0x36, 0x38, 0x37, 0x35, 0x29, 0x3b, 0x0a, 0x20, // 776123046875);. 
	0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, //    }.    float _
	0x37, 0x34, 0x33, 0x20, 0x3d, 0x20, 0x5f, 0x37, 0x33, 0x34, 0x2e, 0x7a, 0x3b, 0x0a, 0x20, 0x20, // 743 = _734.z;.  
	0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x38, 0x32, 0x32, 0x3b, 0x0a, 0x20, 0x20, //   float _822;.  
	0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, 0x37, 0x34, 0x33, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, //   if (_743 <= 0.
	0x30, 0x30, 0x33, 0x31, 0x33, 0x30, 0x38, 0x30, 0x30, 0x30, 0x39, 0x30, 0x37, 0x33, 0x30, 0x31, // 0031308000907301
	0x39, 0x30, 0x32, 0x37, 0x37, 0x30, 0x39, 0x39, 0x36, 0x30, 0x39, 0x33, 0x37, 0x35, 0x29, 0x0a, // 90277099609375).
	0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x38, //     {.        _8
	0x32, 0x32, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x30, 0x30, 0x30, 0x30, 0x30, 0x37, // 22 = 12.92000007
	0x36, 0x32, 0x39, 0x33, 0x39, 0x34, 0x35, 0x33, 0x31, 0x32, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x37, // 62939453125 * _7
	0x34, 0x33, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, // 43;.    }.    el
	0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // se.    {.       
	0x20, 0x5f, 0x38, 0x32, 0x32, 0x20, 0x3d, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x31, 0x2e, 0x30, 0x35, //  _822 = fma(1.05
	0x34, 0x39, 0x39, 0x39, 0x39, 0x34, 0x37, 0x35, 0x34, 0x37, 0x39, 0x31, 0x32, 0x35, 0x39, 0x37, // 4999947547912597
	0x36, 0x35, 0x36, 0x32, 0x35, 0x2c, 0x20, 0x70, 0x6f, 0x77, 0x72, 0x28, 0x5f, 0x37, 0x34, 0x33, // 65625, powr(_743
	0x2c, 0x20, 0x30, 0x2e, 0x34, 0x31, 0x36, 0x36, 0x36, 0x36, 0x36, 0x35, 0x36, 0x37, 0x33, 0x32, // , 0.416666656732
	0x35, 0x35, 0x39, 0x32, 0x30, 0x34, 0x31, 0x30, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x2c, 0x20, // 5592041015625), 
	0x2d, 0x30, 0x2e, 0x30, 0x35, 0x34, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x37, 0x30, 0x31, 0x39, // -0.0549999997019
	0x37, 0x36, 0x37, 0x37, 0x36, 0x31, 0x32, 0x33, 0x30, 0x34, 0x36, 0x38, 0x37, 0x35, 0x29, 0x3b, // 76776123046875);
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x6f, 0x75, 0x74, 0x2e, 0x62, // .    }.    out.b
	0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x20, 0x3d, 0x20, // gfx_FragData0 = 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x38, 0x32, 0x30, 0x2c, 0x20, 0x5f, 0x38, 0x32, // float4(_820, _82
	0x31, 0x2c, 0x20, 0x5f, 0x38, 0x32, 0x32, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, // 1, _822, 1.0);. 
	0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6f, 0x75, 0x74, 0x3b, 0x0a, 0x7d, //    return out;.}
	0x0a, 0x0a, 0x00, 0x00, 0xe0, 0x00,                                                             // ......
};
static const uint8_t fs_pp_stereo_anaglyph_lin_srgb_dyndesat_st_essl[9207] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe4, 0x23, // FSH.Jc._.......#
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x33, 0x32, 0x30, 0x20, 0x65, // ..#version 320 e
	0x73, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, // s.#define attrib
	0x75, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x76, // ute in.#define v
	0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, // arying in.precis
	0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3b, // ion highp float;
	0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, // .precision highp
	0x20, 0x69, 0x6e, 0x74, 0x3b, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, //  int;.precision 
	0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, // highp sampler2DA
	0x72, 0x72, 0x61, 0x79, 0x3b, 0x0a, 0x23, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, // rray;.#extension
	0x20, 0x47, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x74, //  GL_EXT_shader_t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6c, 0x6f, 0x64, 0x20, 0x3a, 0x20, 0x65, 0x6e, 0x61, // exture_lod : ena
	0x62, 0x6c, 0x65, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, // ble.#define text
	0x75, 0x72, 0x65, 0x32, 0x44, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, // ure2DLod      te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x4c, 0x6f, 0x64, 0x45, 0x58, 0x54, 0x0a, 0x23, 0x64, // xture2DLodEXT.#d
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x47, // efine texture2DG
	0x72, 0x61, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, // rad     texture2
	0x44, 0x47, 0x72, 0x61, 0x64, 0x45, 0x58, 0x54, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, // DGradEXT.#define
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x4c, 0x6f, //  texture2DProjLo
	0x64, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, // d  texture2DProj
	0x4c, 0x6f, 0x64, 0x45, 0x58, 0x54, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, // LodEXT.#define t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, // exture2DProjGrad
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, //  texture2DProjGr
	0x61, 0x64, 0x45, 0x58, 0x54, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, // adEXT.#define te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, // xtureCubeLod    
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x4c, 0x6f, 0x64, 0x45, 0x58, // textureCubeLodEX
	0x54, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // T.#define textur
	0x65, 0x43, 0x75, 0x62, 0x65, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, // eCubeGrad   text
	0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x47, 0x72, 0x61, 0x64, 0x45, 0x58, 0x54, 0x0a, 0x23, // ureCubeGradEXT.#
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x28, // define shadow2D(
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, // _sampler, _coord
	0x29, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, // ) texture(_sampl
	0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x0a, 0x23, 0x64, 0x65, 0x66, // er, _coord).#def
	0x69, 0x6e, 0x65, 0x20, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, // ine shadow2DProj
	0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, // (_sampler, _coor
	0x64, 0x29, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, // d) textureProj(_
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, // sampler, _coord)
	0x0a, 0x23, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x47, 0x4c, 0x5f, 0x45, // .#extension GL_E
	0x58, 0x54, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, // XT_texture_array
	0x20, 0x3a, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x0a, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x65, //  : enable.out me
	0x64, 0x69, 0x75, 0x6d, 0x70, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, // diump vec4 bgfx_
	0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, // FragColor;.varyi
	0x6e, 0x67, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x5f, 0x65, 0x79, 0x65, 0x3b, 0x0a, // ng float v_eye;.
	0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x5f, 0x74, // varying vec2 v_t
	0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, // excoord0;.vec3 i
	0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, // nstMul(vec3 _vec
	0x2c, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, // , mat3 _mtx) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, // eturn ( (_vec) *
	0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, //  (_mtx) ); }.vec
	0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, // 3 instMul(mat3 _
	0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, // mtx, vec3 _vec) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, // { return ( (_mtx
	0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, // ) * (_vec) ); }.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, // vec4 instMul(vec
	0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, // 4 _vec, mat4 _mt
	0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, // x) { return ( (_
	0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, // vec) * (_mtx) );
	0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, //  }.vec4 instMul(
	0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // mat4 _mtx, vec4 
	0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // _vec) { return (
	0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, //  (_mtx) * (_vec)
	0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, 0x70, 0x28, //  ); }.float rcp(
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // float _a) { retu
	0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, // rn 1.0/_a; }.vec
	0x32, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, // 2 rcp(vec2 _a) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, //  return vec2(1.0
	0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x70, // )/_a; }.vec3 rcp
	0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // (vec3 _a) { retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, // rn vec3(1.0)/_a;
	0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x34, //  }.vec4 rcp(vec4
	0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, //  _a) { return ve
	0x63, 0x34, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, // c4(1.0)/_a; }.ve
	0x63, 0x32, 0x20, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, // c2 vec2_splat(fl
	0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // oat _x) { return
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, //  vec2(_x, _x); }
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, // .vec3 vec3_splat
	0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // (float _x) { ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, // urn vec3(_x, _x,
	0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, 0x65, 0x63, //  _x); }.vec4 vec
	0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, // 4_splat(float _x
	0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, // ) { return vec4(
	0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, // _x, _x, _x, _x);
	0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, //  }.uvec2 uvec2_s
	0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, // plat(uint _x) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, // return uvec2(_x,
	0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, 0x75, 0x76, //  _x); }.uvec3 uv
	0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, // ec3_splat(uint _
	0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, // x) { return uvec
	0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, // 3(_x, _x, _x); }
	0x0a, 0x75, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, // .uvec4 uvec4_spl
	0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // at(uint _x) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, // turn uvec4(_x, _
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x6d, 0x61, // x, _x, _x); }.ma
	0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, // t4 mtxFromRows(v
	0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, // ec4 _0, vec4 _1,
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, //  vec4 _2, vec4 _
	0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, // 3).{.return tran
	0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, // spose(mat4(_0, _
	0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // 1, _2, _3) );.}.
	0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, // mat4 mtxFromCols
	0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, // (vec4 _0, vec4 _
	0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // 1, vec4 _2, vec4
	0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, //  _3).{.return ma
	0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, // t4(_0, _1, _2, _
	0x33, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, // 3);.}.mat3 mtxFr
	0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, // omRows(vec3 _0, 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, // vec3 _1, vec3 _2
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, // ).{.return trans
	0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, // pose(mat3(_0, _1
	0x2c, 0x20, 0x5f, 0x32, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, // , _2) );.}.mat3 
	0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, // mtxFromCols(vec3
	0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, //  _0, vec3 _1, ve
	0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // c3 _2).{.return 
	0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, // mat3(_0, _1, _2)
	0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, // ;.}.uniform vec4
	0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, //  u_viewRect;.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, // form vec4 u_view
	0x54, 0x65, 0x78, 0x65, 0x6c, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, // Texel;.uniform m
	0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // at4 u_view;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, // orm mat4 u_invVi
	0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, // ew;.uniform mat4
	0x20, 0x75, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, //  u_proj;.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, 0x6a, 0x3b, //  mat4 u_invProj;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, // .uniform mat4 u_
	0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // viewProj;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, // m mat4 u_invView
	0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, // Proj;.uniform ma
	0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, 0x3b, 0x0a, // t4 u_model[32];.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, // uniform mat4 u_m
	0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // odelView;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, // m mat4 u_modelVi
	0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // ewProj;.uniform 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x66, 0x34, // vec4 u_alphaRef4
	0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, // ;.float sqr(cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // t float v).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, // urn v*v;.}.vec2 
	0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, // sqr(const vec2 v
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, // ).{.return v*v;.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, // }.vec3 sqr(const
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, //  vec3 v).{.retur
	0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6d, 0x75, // n v*v;.}.vec3 mu
	0x6c, 0x5f, 0x77, 0x31, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // l_w1(const vec3 
	0x76, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x29, // v, const mat4 m)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2e, 0x78, 0x2a, 0x6d, 0x5b, // .{.return v.x*m[
	0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x79, 0x2a, 0x6d, 0x5b, // 0].xyz + (v.y*m[
	0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x7a, 0x2a, 0x6d, 0x5b, // 1].xyz + (v.z*m[
	0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x6d, 0x5b, 0x33, 0x5d, 0x2e, 0x78, 0x79, // 2].xyz + m[3].xy
	0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x63, 0x6f, // z));.}.float aco
	0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x63, // s_approx_divPI(c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, // onst float v).{.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, // const float x = 
	0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, // abs(v);.if(1. - 
	0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, // x <= 0.000061035
	0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, // 15625).return (v
	0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x20, 0x3a, 0x20, 0x31, //  >= 0.) ? 0. : 1
	0x2e, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, // .;.const float r
	0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, // es = ((-0.155972
	0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, // /3.1415926535897
	0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, // 9323846264338327
	0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, // 95) * x + (1.564
	0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, // 67/3.14159265358
	0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, // 9793238462643383
	0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, // 2795) ) * sqrt(1
	0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // . - x);.return (
	0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, // v >= 0.) ? res :
	0x20, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, //  1. - res;.}.flo
	0x61, 0x74, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, // at atan2_approx_
	0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, // div2PI(const flo
	0x61, 0x74, 0x20, 0x79, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, // at y, const floa
	0x74, 0x20, 0x78, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, // t x).{.const flo
	0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x79, // at abs_y = abs(y
	0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, // );.const float a
	0x62, 0x73, 0x5f, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x78, 0x29, 0x3b, 0x0a, 0x69, // bs_x = abs(x);.i
	0x66, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, // f(abs_x <= 0.000
	0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x20, 0x26, 0x26, 0x20, 0x61, // 06103515625 && a
	0x62, 0x73, 0x5f, 0x79, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, // bs_y <= 0.000061
	0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // 03515625).return
	0x20, 0x30, 0x2e, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, //  0.;.const float
	0x20, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2d, 0x20, 0x61, 0x62, //  r = (abs_x - ab
	0x73, 0x5f, 0x79, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2b, 0x20, // s_y) / (abs_x + 
	0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // abs_y);.const fl
	0x6f, 0x61, 0x74, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x78, 0x20, // oat angle = ((x 
	0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x28, 0x33, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x20, // < 0.) ? (3./8.) 
	0x3a, 0x20, 0x28, 0x31, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x29, 0x0a, 0x2b, 0x20, 0x28, 0x30, 0x2e, // : (1./8.)).+ (0.
	0x32, 0x31, 0x31, 0x38, 0x36, 0x38, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, // 211868 /(2.*3.14
	0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, // 1592653589793238
	0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, // 4626433832795) *
	0x20, 0x72, 0x20, 0x2a, 0x20, 0x72, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x39, 0x38, 0x37, 0x33, 0x30, //  r * r - 0.98730
	0x35, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, // 5 /(2.*3.1415926
	0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, // 5358979323846264
	0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x78, // 33832795)) * ((x
	0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x72, 0x20, 0x3a, 0x20, 0x72, 0x29, //  < 0.) ? -r : r)
	0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x79, 0x20, 0x3c, 0x20, 0x30, 0x2e, // ;.return (y < 0.
	0x29, 0x20, 0x3f, 0x20, 0x2d, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3a, 0x20, 0x61, 0x6e, 0x67, // ) ? -angle : ang
	0x6c, 0x65, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x73, 0x69, 0x6e, // le;.}.float asin
	0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x63, 0x6f, // _approx_divPI(co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x63, // nst float v).{.c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, // onst float x = a
	0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, // bs(v);.if(1. - x
	0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, //  <= 0.0000610351
	0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, // 5625).return (v 
	0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x3a, 0x20, 0x2d, // >= 0.) ? 0.5 : -
	0x30, 0x2e, 0x35, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // 0.5;.const float
	0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, //  res = ((-0.1559
	0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, // 72/3.14159265358
	0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, // 9793238462643383
	0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, // 2795) * x + (1.5
	0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, // 6467/3.141592653
	0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, // 5897932384626433
	0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, // 832795) ) * sqrt
	0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // (1. - x);.return
	0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, //  (v >= 0.) ? 0.5
	0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, //  - res : -0.5 + 
	0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x61, 0x79, 0x5f, // res;.}.vec2 ray_
	0x74, 0x6f, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x75, 0x6c, // to_equirectangul
	0x61, 0x72, 0x5f, 0x75, 0x76, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, // ar_uv(const vec3
	0x20, 0x72, 0x61, 0x79, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, //  ray).{.return v
	0x65, 0x63, 0x32, 0x28, 0x0a, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, // ec2(.0.5 + atan2
	0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x72, // _approx_div2PI(r
	0x61, 0x79, 0x2e, 0x79, 0x2c, 0x20, 0x72, 0x61, 0x79, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x61, 0x63, // ay.y, ray.x),.ac
	0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, // os_approx_divPI(
	0x72, 0x61, 0x79, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // ray.z));.}.float
	0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, //  InvsRGB(const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, // loat color).{.if
	0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, //  (color <= 0.040
	0x34, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // 45).return color
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x29, 0x3b, 0x0a, //  * (1.0/12.92);.
	0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, // else.return pow(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, // color * (1.0/1.0
	0x35, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x2f, 0x31, 0x2e, 0x30, // 55) + (0.055/1.0
	0x35, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // 55), 2.4);.}.flo
	0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x63, 0x6f, 0x6e, // at InvRec709(con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, // st float color).
	0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, // {.if (color <= 0
	0x2e, 0x30, 0x38, 0x31, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, // .081).return col
	0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x34, 0x2e, 0x35, 0x29, 0x3b, 0x0a, // or * (1.0/4.5);.
	0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, // else.return pow(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, // color * (1.0/1.0
	0x39, 0x39, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x2f, 0x31, 0x2e, 0x30, // 99) + (0.099/1.0
	0x39, 0x39, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x3b, 0x0a, // 99), 1.0/0.45);.
	0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, // }.float InvGamma
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, // (const float col
	0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x49, 0x6e, 0x76, // or).{.return Inv
	0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // sRGB(color);.}.v
	0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, // ec3 InvGamma(con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, // st vec3 color).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x49, 0x6e, 0x76, // .return vec3(Inv
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x49, // Gamma(color.x),I
	0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, // nvGamma(color.y)
	0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, // ,InvGamma(color.
	0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x54, // z));.}.vec3 InvT
	0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, // oneMap(const vec
	0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, // 3 color).{.const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x20, 0x3d, //  float inv_2bh =
	0x20, 0x30, 0x2e, 0x35, 0x2f, 0x30, 0x2e, 0x32, 0x35, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, //  0.5/0.25;.const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x34, 0x2e, 0x30, 0x2a, //  float bh = 4.0*
	0x30, 0x2e, 0x32, 0x35, 0x20, 0x2d, 0x20, 0x32, 0x2e, 0x30, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // 0.25 - 2.0;.retu
	0x72, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, // rn (color - 1.0 
	0x2b, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2a, 0x28, 0x63, 0x6f, // + sqrt(color*(co
	0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x20, 0x62, 0x68, 0x29, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, // lor + bh) + 1.0)
	0x29, 0x2a, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // )*inv_2bh;.}.flo
	0x61, 0x74, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // at sRGB(const fl
	0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, // oat f).{.float s
	0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x33, // ;.if (f <= 0.003
	0x31, 0x33, 0x30, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x20, // 1308).s = 12.92 
	0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, // * f;.else.s = 1.
	0x30, 0x35, 0x35, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x31, 0x2e, 0x30, // 055 * pow(f, 1.0
	0x2f, 0x32, 0x2e, 0x34, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x3b, 0x0a, 0x72, // /2.4) - 0.055;.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // eturn s;.}.float
	0x20, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, //  Rec709(const fl
	0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, // oat f).{.float s
	0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, // ;.if (f <= 0.018
	0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x34, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, // ).s = 4.5 * f;.e
	0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x20, 0x2a, 0x20, // lse.s = 1.099 * 
	0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x20, 0x2d, 0x20, 0x30, // pow(f, 0.45) - 0
	0x2e, 0x30, 0x39, 0x39, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, // .099;.return s;.
	0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, // }.float FBGamma(
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // const float colo
	0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x52, 0x47, 0x42, // r).{.return sRGB
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, // (color);.}.vec2 
	0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // FBGamma(const ve
	0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, // c2 color).{.retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, // rn vec2(FBGamma(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, // color.x),FBGamma
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // (color.y));.}.ve
	0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, // c3 FBGamma(const
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, //  vec3 color).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, // eturn vec3(FBGam
	0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, // ma(color.x),FBGa
	0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x46, 0x42, 0x47, // mma(color.y),FBG
	0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, // amma(color.z));.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x32, 0x32, // }.vec3 FBGamma22
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // (const vec3 colo
	0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, // r).{.return vec3
	0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x2c, 0x20, 0x31, 0x2e, // (pow(color.x, 1.
	0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // 0/2.2),pow(color
	0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, // .y, 1.0/2.2),pow
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, // (color.z, 1.0/2.
	0x32, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x54, // 2));.}.float FBT
	0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, // oneMap(const flo
	0x61, 0x74, 0x20, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6c, // at l).{.return l
	0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, //  * ((l*0.25 + 1.
	0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, // 0) / (l + 1.0));
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, // .}.vec2 FBToneMa
	0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, // p(const vec2 col
	0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, // or).{.const floa
	0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, // t l = dot(color,
	0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2b, 0x30, 0x2e, // vec2(0.176204+0.
	0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x2c, 0x30, 0x2e, 0x38, 0x31, // 0108109*0.5,0.81
	0x32, 0x39, 0x38, 0x35, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, // 2985+0.0108109*0
	0x2e, 0x35, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, // .5));.return col
	0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, // or * ((l*0.25 + 
	0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, // 1.0) / (l + 1.0)
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, // );.}.vec3 FBTone
	0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, // Map(const vec3 c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // olor).{.const fl
	0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // oat l = dot(colo
	0x72, 0x2c, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2c, // r,vec3(0.176204,
	0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2c, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, // 0.812985,0.01081
	0x30, 0x39, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, // 09));.return col
	0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, // or * ((l*0.25 + 
	0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, // 1.0) / (l + 1.0)
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, // );.}.vec4 Additi
	0x76, 0x65, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // ve(const vec4 cB
	0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // ase, const vec4 
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // cBlend, const fl
	0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, // oat percent).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2b, 0x20, 0x63, 0x42, // eturn cBase + cB
	0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, // lend*percent;.}.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6e, // vec3 Screen (con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, // st vec3 cBase, c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, // onst vec3 cBlend
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, // ).{.return 1.0 -
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, //  (1.0 - cBase) *
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, //  (1.0 - cBlend);
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, // .}.vec4 Screen (
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, // const vec4 cBase
	0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, // , const vec4 cBl
	0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, // end).{.return 1.
	0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, // 0 - (1.0 - cBase
	0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // ) * (1.0 - cBlen
	0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, // d);.}.vec3 Scree
	0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, // nHDR (const vec3
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, //  cBase, const ve
	0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // c3 cBlend).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, // urn max(1.0 - (1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, // .0 - cBase) * (1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, // .0 - cBlend), ve
	0x63, 0x33, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, // c3(0.,0.,0.));.}
	0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, // .vec4 ScreenHDR 
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, // (const vec4 cBas
	0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // e, const vec4 cB
	0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, // lend).{.return m
	0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, // ax(1.0 - (1.0 - 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, // cBase) * (1.0 - 
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, // cBlend), vec4(0.
	0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // ,0.,0.,0.));.}.v
	0x65, 0x63, 0x34, 0x20, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x20, 0x28, 0x63, 0x6f, // ec4 Multiply (co
	0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, // nst vec4 cBase, 
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // const vec4 cBlen
	0x64, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, // d, const float p
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // ercent).{.return
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2a, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, //  cBase * cBlend*
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, // percent;.}.vec4 
	0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, // Overlay (const v
	0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, // ec4 cBase, const
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, //  vec4 cBlend).{.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, // vec4 cNew = step
	0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, // (0.5, cBase);.cN
	0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, // ew = mix(cBase*c
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, // Blend*2.0, 1.0-2
	0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, // .0*(1.0-cBase)*(
	0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, // 1.0-cBlend), cNe
	0x77, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, // w);.return cNew;
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x48, // .}.vec4 OverlayH
	0x44, 0x52, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, // DR (const vec4 c
	0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, // Base, const vec4
	0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, //  cBlend).{.vec4 
	0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, // cNew = step(0.5,
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, //  cBase);.cNew = 
	0x6d, 0x61, 0x78, 0x28, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, // max(mix(cBase*cB
	0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, // lend*2.0, 1.0-2.
	0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, // 0*(1.0-cBase)*(1
	0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, // .0-cBlend), cNew
	0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, // ), vec4(0.,0.,0.
	0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, // ,0.));.return cN
	0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x73, 0x5f, 0x68, // ew;.}.vec3 cos_h
	0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // emisphere_sample
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x29, 0x0a, 0x7b, // (const vec2 t).{
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x68, 0x69, // .const float phi
	0x20, 0x3d, 0x20, 0x74, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x28, 0x32, 0x2e, 0x30, 0x2a, 0x33, 0x2e, //  = t.y * (2.0*3.
	0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, // 1415926535897932
	0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, // 384626433832795)
	0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, // ;.const float co
	0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, // sTheta = sqrt(1.
	0x30, 0x20, 0x2d, 0x20, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // 0 - t.x);.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, // float sinTheta =
	0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, //  sqrt(t.x);.floa
	0x74, 0x20, 0x73, 0x70, 0x2c, 0x63, 0x70, 0x3b, 0x0a, 0x73, 0x69, 0x6e, 0x63, 0x6f, 0x73, 0x28, // t sp,cp;.sincos(
	0x70, 0x68, 0x69, 0x2c, 0x73, 0x70, 0x2c, 0x63, 0x70, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // phi,sp,cp);.retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x63, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, // rn vec3(cp * sin
	0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, // Theta, cosTheta,
	0x20, 0x73, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x29, 0x3b, //  sp * sinTheta);
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, // .}.vec3 rotate_t
	0x6f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x28, 0x63, // o_vector_upper(c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x63, // onst vec3 vec, c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, // onst vec3 normal
	0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, // ).{.if(normal.y 
	0x3e, 0x20, 0x2d, 0x30, 0x2e, 0x39, 0x39, 0x39, 0x39, 0x39, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, // > -0.99999).{.co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x20, 0x3d, 0x20, 0x31, 0x2e, // nst float h = 1.
	0x30, 0x2f, 0x28, 0x31, 0x2e, 0x30, 0x2b, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x29, // 0/(1.0+normal.y)
	0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, // ;.const float hz
	0x20, 0x3d, 0x20, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x3b, 0x0a, 0x63, //  = h*normal.z;.c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x3d, // onst float hzx =
	0x20, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x3b, 0x0a, 0x72, 0x65, //  hz*normal.x;.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x78, // turn vec3(.vec.x
	0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x7a, 0x2a, //  * (normal.y+hz*
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x29, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, // normal.z) + vec.
	0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, // y * normal.x - v
	0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, // ec.z * hzx,.vec.
	0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x2d, 0x20, 0x76, // y * normal.y - v
	0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, // ec.x * normal.x 
	0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, // - vec.z * normal
	0x2e, 0x7a, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, // .z,.vec.y * norm
	0x61, 0x6c, 0x2e, 0x7a, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x68, // al.z - vec.x * h
	0x7a, 0x78, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, // zx + vec.z * (no
	0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, // rmal.y+h*normal.
	0x78, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // x*normal.x));.}.
	0x65, 0x6c, 0x73, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x2d, 0x76, 0x65, 0x63, // else return -vec
	0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, // ;.}.uniform vec4
	0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x53, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, //  Stereo_Saturati
	0x6f, 0x6e, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, // on;.uniform vec4
	0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, //  Stereo_MS_ZPD_Y
	0x41, 0x78, 0x69, 0x73, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, // Axis;.uniform sa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x20, 0x74, 0x65, 0x78, // mpler2DArray tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // _stereo_fb;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, 0x72, 0x72, // orm sampler2DArr
	0x61, 0x79, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, // ay tex_stereo_de
	0x70, 0x74, 0x68, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, // pth;.uniform vec
	0x34, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, 0x76, 0x65, // 4 w_h_height;.ve
	0x63, 0x33, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, // c3 gatherEyeColo
	0x72, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x69, // r(vec2 u, bool i
	0x73, 0x4c, 0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // sLeft).{.return 
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x6f, // texture2DArrayLo
	0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, // d(tex_stereo_fb,
	0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, 0x20, //  vec3(u.x, u.y, 
	0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x30, 0x20, 0x3a, 0x20, 0x31, // isLeft ? 0.0 : 1
	0x2e, 0x30, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x7d, 0x0a, // .0), 0.).rgb;.}.
	0x76, 0x6f, 0x69, 0x64, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x52, // void gatherLeftR
	0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, // ightColors(vec2 
	0x75, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x63, 0x6f, 0x6c, // u, out vec3 lcol
	0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x6f, 0x6c, 0x29, // , out vec3 rcol)
	0x0a, 0x7b, 0x0a, 0x6c, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // .{.lcol = textur
	0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, // e2DArrayLod(tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, // stereo_fb, vec3(
	0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2c, 0x20, 0x30, // u.x, u.y, 0.), 0
	0x2e, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x72, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, // .).xyz;.rcol = t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x6f, 0x64, // exture2DArrayLod
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, // (tex_stereo_fb, 
	0x76, 0x65, 0x63, 0x33, 0x28, 0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, 0x20, 0x31, // vec3(u.x, u.y, 1
	0x2e, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, // .), 0.).xyz;.}.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, // niform mat4 Ster
	0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // eo_LeftMat;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // orm mat4 Stereo_
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // RightMat;.unifor
	0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, // m vec4 Stereo_Le
	0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, // ftLuminance_Gamm
	0x61, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // a;.uniform vec4 
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, // Stereo_RightLumi
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x3b, 0x0a, // nance_DynDesat;.
	0x76, 0x6f, 0x69, 0x64, 0x20, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x65, 0x73, 0x61, // void DynamicDesa
	0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // tAnaglyph(const 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, // vec3 lCol, const
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, //  vec3 rCol, out 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // vec3 lDesatCol, 
	0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, // out vec3 rDesatC
	0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, // ol).{.const floa
	0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, // t left2LeftLum =
	0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, //  dot(lCol, Stere
	0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, // o_LeftLuminance_
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // Gamma.xyz);.cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, // t float left2Rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, // htLum = dot(lCol
	0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // , Stereo_RightLu
	0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, // minance_DynDesat
	0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, // .xyz);.const flo
	0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // at right2LeftLum
	0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, //  = dot(rCol, Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, // reo_LeftLuminanc
	0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, // e_Gamma.xyz);.co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, // nst float right2
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, // RightLum = dot(r
	0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, // Col, Stereo_Righ
	0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, // tLuminance_DynDe
	0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // sat.xyz);.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, // float leftLum = 
	0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x6c, // left2LeftLum + l
	0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, 0x0a, 0x63, 0x6f, // eft2RightLum;.co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, // nst float rightL
	0x75, 0x6d, 0x20, 0x3d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, // um = right2LeftL
	0x75, 0x6d, 0x20, 0x2b, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, // um + right2Right
	0x4c, 0x75, 0x6d, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // Lum;.const float
	0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, //  leftDesat = Ste
	0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, // reo_RightLuminan
	0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, // ce_DynDesat.w * 
	0x61, 0x62, 0x73, 0x28, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, // abs((left2LeftLu
	0x6d, 0x20, 0x2d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // m - left2RightLu
	0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, // m) / (leftLum + 
	0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // 0.0001));.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, // float rightDesat
	0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, //  = Stereo_RightL
	0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, // uminance_DynDesa
	0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, // t.w * abs((right
	0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, // 2LeftLum - right
	0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x72, 0x69, // 2RightLum) / (ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, // ghtLum + 0.0001)
	0x29, 0x3b, 0x0a, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, // );.lDesatCol = m
	0x69, 0x78, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, // ix(lCol, vec3_sp
	0x6c, 0x61, 0x74, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, 0x6c, 0x65, // lat(leftLum), le
	0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x72, 0x44, 0x65, 0x73, 0x61, 0x74, // ftDesat);.rDesat
	0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // Col = mix(rCol, 
	0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, // vec3_splat(right
	0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, // Lum), rightDesat
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, // );.}.vec3 Linear
	0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, // Anaglyph(const v
	0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // ec3 lCol, const 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, // vec3 rCol).{.con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, // st vec3 color = 
	0x28, 0x28, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, // (( (vec4(lCol, 1
	0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, // .)) * (Stereo_Le
	0x66, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x20, 0x28, 0x76, 0x65, // ftMat) ) + ( (ve
	0x63, 0x34, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, // c4(rCol, 1.)) * 
	0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, // (Stereo_RightMat
	0x29, 0x20, 0x29, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // ) )).rgb;.return
	0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, //  color;.}.unifor
	0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, // m vec4 Stereo_De
	0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // ghostGamma;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // orm mat4 Stereo_
	0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3b, 0x0a, 0x76, // DeghostFilter;.v
	0x65, 0x63, 0x33, 0x20, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, // ec3 DeghostAnagl
	0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, // yph(const vec3 l
	0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // Col, const vec3 
	0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // rCol).{.const ve
	0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, // c3 color = Linea
	0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // rAnaglyph(lCol, 
	0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, // rCol);.return ( 
	0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, // (pow(color, Ster
	0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, // eo_DeghostGamma.
	0x72, 0x67, 0x62, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x53, 0x74, // rgb)) * (mat3(St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, // ereo_DeghostFilt
	0x65, 0x72, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // er[0].xyz, Stere
	0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, // o_DeghostFilter[
	0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, // 1].xyz, Stereo_D
	0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x32, 0x5d, 0x2e, // eghostFilter[2].
	0x78, 0x79, 0x7a, 0x29, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, // xyz)) );.}.void 
	0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, // main().{.vec3 lC
	0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x3b, 0x0a, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, // ol, rCol;.gather
	0x4c, 0x65, 0x66, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x28, // LeftRightColors(
	0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2c, 0x20, 0x6c, 0x43, 0x6f, // v_texcoord0, lCo
	0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x6c, 0x43, 0x6f, 0x6c, 0x20, 0x3d, // l, rCol);.lCol =
	0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x29, 0x3b, //  InvGamma(lCol);
	0x0a, 0x72, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, // .rCol = InvGamma
	0x28, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, // (rCol);.vec3 lCo
	0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x44, 0x65, 0x73, 0x61, // lDesat, rColDesa
	0x74, 0x3b, 0x0a, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x65, 0x73, 0x61, 0x74, 0x41, // t;.DynamicDesatA
	0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, // naglyph(lCol, rC
	0x6f, 0x6c, 0x2c, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2c, 0x20, 0x72, // ol, lColDesat, r
	0x43, 0x6f, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x6c, 0x43, 0x6f, 0x6c, 0x20, // ColDesat);.lCol 
	0x3d, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x3b, 0x0a, 0x72, 0x43, 0x6f, // = lColDesat;.rCo
	0x6c, 0x20, 0x3d, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x3b, 0x0a, 0x76, // l = rColDesat;.v
	0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, 0x6e, 0x65, // ec3 color = Line
	0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, // arAnaglyph(lCol,
	0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, //  rCol);.bgfx_Fra
	0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x46, 0x42, // gColor = vec4(FB
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x2c, 0x20, 0x31, 0x2e, // Gamma(color), 1.
	0x30, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x00,                                                       // 0);.}..
};
static const uint8_t fs_pp_stereo_anaglyph_lin_srgb_dyndesat_st_glsl[9191] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd4, 0x23, // FSH.Jc._.......#
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x34, 0x34, 0x30, 0x0a, 0x6f, // ..#version 440.o
	0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, // ut vec4 bgfx_Fra
	0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, // gColor;.#define 
	0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x62, 0x67, 0x66, // gl_FragColor bgf
	0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x0a, 0x23, 0x64, 0x65, 0x66, // x_FragColor.#def
	0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x20, 0x20, 0x20, // ine texture2D   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x0a, 0x23, //        texture.#
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, // define texture2D
	0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // Lod       textur
	0x65, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, // eLod.#define tex
	0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ture2DGrad      
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, // textureGrad.#def
	0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, // ine texture2DPro
	0x6a, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, // jLod   texturePr
	0x6f, 0x6a, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, // ojLod.#define te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, 0x20, // xture2DProjGrad 
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, //  textureProjGrad
	0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // .#define texture
	0x43, 0x75, 0x62, 0x65, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, // CubeLod     text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, // ureLod.#define t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, // extureCubeGrad  
	0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, //   textureGrad.#d
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x33, 0x44, 0x20, // efine texture3D 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, //          texture
	0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // .#define texture
	0x32, 0x44, 0x4c, 0x6f, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x20, 0x74, 0x65, 0x78, 0x74, // 2DLodOffset text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x0a, 0x23, 0x64, 0x65, // ureLodOffset.#de
	0x66, 0x69, 0x6e, 0x65, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x69, // fine attribute i
	0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, // n.#define varyin
	0x67, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x62, 0x67, 0x66, // g in.#define bgf
	0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, // xShadow2D(_sampl
	0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, // er, _coord)     
	0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, // vec4_splat(textu
	0x72, 0x65, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, // re(_sampler, _co
	0x6f, 0x72, 0x64, 0x29, 0x20, 0x29, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x62, // ord) ).#define b
	0x67, 0x66, 0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x28, // gfxShadow2DProj(
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, // _sampler, _coord
	0x29, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, // ) vec4_splat(tex
	0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // tureProj(_sample
	0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x29, 0x0a, 0x76, 0x61, 0x72, // r, _coord) ).var
	0x79, 0x69, 0x6e, 0x67, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x5f, 0x65, 0x79, 0x65, // ying float v_eye
	0x3b, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, // ;.varying vec2 v
	0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, // _texcoord0;.vec3
	0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, //  instMul(vec3 _v
	0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, // ec, mat3 _mtx) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, //  return ( (_vec)
	0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, //  * (_mtx) ); }.v
	0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, // ec3 instMul(mat3
	0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, //  _mtx, vec3 _vec
	0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, // ) { return ( (_m
	0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, // tx) * (_vec) ); 
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, // }.vec4 instMul(v
	0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, // ec4 _vec, mat4 _
	0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, // mtx) { return ( 
	0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, // (_vec) * (_mtx) 
	0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, // ); }.vec4 instMu
	0x6c, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, // l(mat4 _mtx, vec
	0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // 4 _vec) { return
	0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, //  ( (_mtx) * (_ve
	0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, // c) ); }.float rc
	0x70, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // p(float _a) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, // turn 1.0/_a; }.v
	0x65, 0x63, 0x32, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, // ec2 rcp(vec2 _a)
	0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, //  { return vec2(1
	0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, // .0)/_a; }.vec3 r
	0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // cp(vec3 _a) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, // turn vec3(1.0)/_
	0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, // a; }.vec4 rcp(ve
	0x63, 0x34, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // c4 _a) { return 
	0x76, 0x65, 0x63, 0x34, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, // vec4(1.0)/_a; }.
	0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, // vec2 vec2_splat(
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // float _x) { retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, // rn vec2(_x, _x);
	0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, //  }.vec3 vec3_spl
	0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, // at(float _x) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, // eturn vec3(_x, _
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, // x, _x); }.vec4 v
	0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // ec4_splat(float 
	0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, // _x) { return vec
	0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, // 4(_x, _x, _x, _x
	0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, // ); }.uvec2 uvec2
	0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, // _splat(uint _x) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, // { return uvec2(_
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, // x, _x); }.uvec3 
	0x75, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, // uvec3_splat(uint
	0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, //  _x) { return uv
	0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, // ec3(_x, _x, _x);
	0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, //  }.uvec4 uvec4_s
	0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, // plat(uint _x) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, // return uvec4(_x,
	0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, //  _x, _x, _x); }.
	0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, // mat4 mtxFromRows
	0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, // (vec4 _0, vec4 _
	0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // 1, vec4 _2, vec4
	0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, //  _3).{.return tr
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, // anspose(mat4(_0,
	0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, //  _1, _2, _3) );.
	0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, // }.mat4 mtxFromCo
	0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // ls(vec4 _0, vec4
	0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, //  _1, vec4 _2, ve
	0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // c4 _3).{.return 
	0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, // mat4(_0, _1, _2,
	0x20, 0x5f, 0x33, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, //  _3);.}.mat3 mtx
	0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, // FromRows(vec3 _0
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // , vec3 _1, vec3 
	0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, // _2).{.return tra
	0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, // nspose(mat3(_0, 
	0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, // _1, _2) );.}.mat
	0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, // 3 mtxFromCols(ve
	0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, // c3 _0, vec3 _1, 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // vec3 _2).{.retur
	0x6e, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, // n mat3(_0, _1, _
	0x32, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, // 2);.}.uniform ve
	0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, // c4 u_viewRect;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, // niform vec4 u_vi
	0x65, 0x77, 0x54, 0x65, 0x78, 0x65, 0x6c, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // ewTexel;.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, //  mat4 u_view;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, // iform mat4 u_inv
	0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, // View;.uniform ma
	0x74, 0x34, 0x20, 0x75, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, // t4 u_proj;.unifo
	0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, // rm mat4 u_invPro
	0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, // j;.uniform mat4 
	0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // u_viewProj;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, // orm mat4 u_invVi
	0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // ewProj;.uniform 
	0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, // mat4 u_model[32]
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, // ;.uniform mat4 u
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // _modelView;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, // orm mat4 u_model
	0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // ViewProj;.unifor
	0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, // m vec4 u_alphaRe
	0x66, 0x34, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, // f4;.float sqr(co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, // nst float v).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // eturn v*v;.}.vec
	0x32, 0x20, 0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, // 2 sqr(const vec2
	0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, //  v).{.return v*v
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, // ;.}.vec3 sqr(con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // st vec3 v).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // urn v*v;.}.vec3 
	0x6d, 0x75, 0x6c, 0x5f, 0x77, 0x31, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, // mul_w1(const vec
	0x33, 0x20, 0x76, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, // 3 v, const mat4 
	0x6d, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2e, 0x78, 0x2a, // m).{.return v.x*
	0x6d, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x79, 0x2a, // m[0].xyz + (v.y*
	0x6d, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x7a, 0x2a, // m[1].xyz + (v.z*
	0x6d, 0x5b, 0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x6d, 0x5b, 0x33, 0x5d, 0x2e, // m[2].xyz + m[3].
	0x78, 0x79, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, // xyz));.}.float a
	0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, // cos_approx_divPI
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, // (const float v).
	0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, // {.const float x 
	0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, // = abs(v);.if(1. 
	0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, // - x <= 0.0000610
	0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // 3515625).return 
	0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x20, 0x3a, // (v >= 0.) ? 0. :
	0x20, 0x31, 0x2e, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, //  1.;.const float
	0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, //  res = ((-0.1559
	0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, // 72/3.14159265358
	0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, // 9793238462643383
	0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, // 2795) * x + (1.5
	0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, // 6467/3.141592653
	0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, // 5897932384626433
	0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, // 832795) ) * sqrt
	0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // (1. - x);.return
	0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x72, 0x65, 0x73, //  (v >= 0.) ? res
	0x20, 0x3a, 0x20, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, //  : 1. - res;.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, // loat atan2_appro
	0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // x_div2PI(const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x79, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // loat y, const fl
	0x6f, 0x61, 0x74, 0x20, 0x78, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // oat x).{.const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, // loat abs_y = abs
	0x28, 0x79, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // (y);.const float
	0x20, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x78, 0x29, 0x3b, //  abs_x = abs(x);
	0x0a, 0x69, 0x66, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, // .if(abs_x <= 0.0
	0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x20, 0x26, 0x26, // 0006103515625 &&
	0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, //  abs_y <= 0.0000
	0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, // 6103515625).retu
	0x72, 0x6e, 0x20, 0x30, 0x2e, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, // rn 0.;.const flo
	0x61, 0x74, 0x20, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2d, 0x20, // at r = (abs_x - 
	0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, // abs_y) / (abs_x 
	0x2b, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // + abs_y);.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3d, 0x20, 0x28, 0x28, // float angle = ((
	0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x28, 0x33, 0x2e, 0x2f, 0x38, 0x2e, // x < 0.) ? (3./8.
	0x29, 0x20, 0x3a, 0x20, 0x28, 0x31, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x29, 0x0a, 0x2b, 0x20, 0x28, // ) : (1./8.)).+ (
	0x30, 0x2e, 0x32, 0x31, 0x31, 0x38, 0x36, 0x38, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, // 0.211868 /(2.*3.
	0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, // 1415926535897932
	0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, // 384626433832795)
	0x20, 0x2a, 0x20, 0x72, 0x20, 0x2a, 0x20, 0x72, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x39, 0x38, 0x37, //  * r * r - 0.987
	0x33, 0x30, 0x35, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, // 305 /(2.*3.14159
	0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, // 2653589793238462
	0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, // 6433832795)) * (
	0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x72, 0x20, 0x3a, 0x20, // (x < 0.) ? -r : 
	0x72, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x79, 0x20, 0x3c, 0x20, // r);.return (y < 
	0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3a, 0x20, 0x61, // 0.) ? -angle : a
	0x6e, 0x67, 0x6c, 0x65, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x73, // ngle;.}.float as
	0x69, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, // in_approx_divPI(
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, // const float v).{
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, // .const float x =
	0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, //  abs(v);.if(1. -
	0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, //  x <= 0.00006103
	0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // 515625).return (
	0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x3a, // v >= 0.) ? 0.5 :
	0x20, 0x2d, 0x30, 0x2e, 0x35, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, //  -0.5;.const flo
	0x61, 0x74, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, // at res = ((-0.15
	0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, // 5972/3.141592653
	0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, // 5897932384626433
	0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, // 832795) * x + (1
	0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, // .56467/3.1415926
	0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, // 5358979323846264
	0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, // 33832795) ) * sq
	0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // rt(1. - x);.retu
	0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, // rn (v >= 0.) ? 0
	0x2e, 0x35, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x20, // .5 - res : -0.5 
	0x2b, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x61, // + res;.}.vec2 ra
	0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, // y_to_equirectang
	0x75, 0x6c, 0x61, 0x72, 0x5f, 0x75, 0x76, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // ular_uv(const ve
	0x63, 0x33, 0x20, 0x72, 0x61, 0x79, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // c3 ray).{.return
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x0a, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x61, 0x74, 0x61, //  vec2(.0.5 + ata
	0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, // n2_approx_div2PI
	0x28, 0x72, 0x61, 0x79, 0x2e, 0x79, 0x2c, 0x20, 0x72, 0x61, 0x79, 0x2e, 0x78, 0x29, 0x2c, 0x0a, // (ray.y, ray.x),.
	0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, // acos_approx_divP
	0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // I(ray.z));.}.flo
	0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, // at InvsRGB(const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, //  float color).{.
	0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, // if (color <= 0.0
	0x34, 0x30, 0x34, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, // 4045).return col
	0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x29, // or * (1.0/12.92)
	0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, // ;.else.return po
	0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, // w(color * (1.0/1
	0x2e, 0x30, 0x35, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x2f, 0x31, // .055) + (0.055/1
	0x2e, 0x30, 0x35, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // .055), 2.4);.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x63, // loat InvRec709(c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // onst float color
	0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, // ).{.if (color <=
	0x20, 0x30, 0x2e, 0x30, 0x38, 0x31, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, //  0.081).return c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x34, 0x2e, 0x35, 0x29, // olor * (1.0/4.5)
	0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, // ;.else.return po
	0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, // w(color * (1.0/1
	0x2e, 0x30, 0x39, 0x39, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x2f, 0x31, // .099) + (0.099/1
	0x2e, 0x30, 0x39, 0x39, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x30, 0x2e, 0x34, 0x35, 0x29, // .099), 1.0/0.45)
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, // ;.}.float InvGam
	0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, // ma(const float c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x49, // olor).{.return I
	0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, // nvsRGB(color);.}
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, // .vec3 InvGamma(c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, // onst vec3 color)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x49, // .{.return vec3(I
	0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, // nvGamma(color.x)
	0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, // ,InvGamma(color.
	0x79, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // y),InvGamma(colo
	0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, // r.z));.}.vec3 In
	0x76, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, // vToneMap(const v
	0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, // ec3 color).{.con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, // st float inv_2bh
	0x20, 0x3d, 0x20, 0x30, 0x2e, 0x35, 0x2f, 0x30, 0x2e, 0x32, 0x35, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, //  = 0.5/0.25;.con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x34, 0x2e, // st float bh = 4.
	0x30, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2d, 0x20, 0x32, 0x2e, 0x30, 0x3b, 0x0a, 0x72, 0x65, // 0*0.25 - 2.0;.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2d, 0x20, 0x31, 0x2e, // turn (color - 1.
	0x30, 0x20, 0x2b, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2a, 0x28, // 0 + sqrt(color*(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x20, 0x62, 0x68, 0x29, 0x20, 0x2b, 0x20, 0x31, 0x2e, // color + bh) + 1.
	0x30, 0x29, 0x29, 0x2a, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // 0))*inv_2bh;.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // loat sRGB(const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // float f).{.float
	0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, //  s;.if (f <= 0.0
	0x30, 0x33, 0x31, 0x33, 0x30, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, // 031308).s = 12.9
	0x32, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, // 2 * f;.else.s = 
	0x31, 0x2e, 0x30, 0x35, 0x35, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x31, // 1.055 * pow(f, 1
	0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x34, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x3b, // .0/2.4) - 0.055;
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // .return s;.}.flo
	0x61, 0x74, 0x20, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // at Rec709(const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // float f).{.float
	0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, //  s;.if (f <= 0.0
	0x31, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x34, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x66, 0x3b, // 18).s = 4.5 * f;
	0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x20, // .else.s = 1.099 
	0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x20, 0x2d, // * pow(f, 0.45) -
	0x20, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, //  0.099;.return s
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, // ;.}.float FBGamm
	0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, // a(const float co
	0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x52, // lor).{.return sR
	0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // GB(color);.}.vec
	0x32, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // 2 FBGamma(const 
	0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // vec2 color).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, // turn vec2(FBGamm
	0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, // a(color.x),FBGam
	0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // ma(color.y));.}.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, // vec3 FBGamma(con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, // st vec3 color).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x46, 0x42, 0x47, // .return vec3(FBG
	0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, // amma(color.x),FB
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x46, // Gamma(color.y),F
	0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, // BGamma(color.z))
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, // ;.}.vec3 FBGamma
	0x32, 0x32, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, // 22(const vec3 co
	0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, // lor).{.return ve
	0x63, 0x33, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x2c, 0x20, // c3(pow(color.x, 
	0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, // 1.0/2.2),pow(col
	0x6f, 0x72, 0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, // or.y, 1.0/2.2),p
	0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, // ow(color.z, 1.0/
	0x32, 0x2e, 0x32, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, // 2.2));.}.float F
	0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // BToneMap(const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // loat l).{.return
	0x20, 0x6c, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, //  l * ((l*0.25 + 
	0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, // 1.0) / (l + 1.0)
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, // );.}.vec2 FBTone
	0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, // Map(const vec2 c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // olor).{.const fl
	0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // oat l = dot(colo
	0x72, 0x2c, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2b, // r,vec2(0.176204+
	0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x2c, 0x30, 0x2e, // 0.0108109*0.5,0.
	0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, // 812985+0.0108109
	0x2a, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, // *0.5));.return c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, // olor * ((l*0.25 
	0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, // + 1.0) / (l + 1.
	0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x54, 0x6f, // 0));.}.vec3 FBTo
	0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, // neMap(const vec3
	0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, //  color).{.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, // float l = dot(co
	0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, // lor,vec3(0.17620
	0x34, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2c, 0x30, 0x2e, 0x30, 0x31, 0x30, // 4,0.812985,0.010
	0x38, 0x31, 0x30, 0x39, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, // 8109));.return c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, // olor * ((l*0.25 
	0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, // + 1.0) / (l + 1.
	0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x41, 0x64, 0x64, 0x69, // 0));.}.vec4 Addi
	0x74, 0x69, 0x76, 0x65, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // tive(const vec4 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, // cBase, const vec
	0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // 4 cBlend, const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, // float percent).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2b, 0x20, // .return cBase + 
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, // cBlend*percent;.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x63, // }.vec3 Screen (c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, // onst vec3 cBase,
	0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, //  const vec3 cBle
	0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, // nd).{.return 1.0
	0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, //  - (1.0 - cBase)
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, //  * (1.0 - cBlend
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, // );.}.vec4 Screen
	0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, //  (const vec4 cBa
	0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, // se, const vec4 c
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // Blend).{.return 
	0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, // 1.0 - (1.0 - cBa
	0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, // se) * (1.0 - cBl
	0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, // end);.}.vec3 Scr
	0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // eenHDR (const ve
	0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // c3 cBase, const 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, // vec3 cBlend).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, // eturn max(1.0 - 
	0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, // (1.0 - cBase) * 
	0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, // (1.0 - cBlend), 
	0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, // vec3(0.,0.,0.));
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, // .}.vec4 ScreenHD
	0x52, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // R (const vec4 cB
	0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // ase, const vec4 
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // cBlend).{.return
	0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, //  max(1.0 - (1.0 
	0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, // - cBase) * (1.0 
	0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, // - cBlend), vec4(
	0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, // 0.,0.,0.,0.));.}
	0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x20, 0x28, // .vec4 Multiply (
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, // const vec4 cBase
	0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, // , const vec4 cBl
	0x65, 0x6e, 0x64, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // end, const float
	0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, //  percent).{.retu
	0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2a, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // rn cBase * cBlen
	0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // d*percent;.}.vec
	0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, // 4 Overlay (const
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, //  vec4 cBase, con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, // st vec4 cBlend).
	0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, // {.vec4 cNew = st
	0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, // ep(0.5, cBase);.
	0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, // cNew = mix(cBase
	0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, // *cBlend*2.0, 1.0
	0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, // -2.0*(1.0-cBase)
	0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, // *(1.0-cBlend), c
	0x4e, 0x65, 0x77, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, // New);.return cNe
	0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, // w;.}.vec4 Overla
	0x79, 0x48, 0x44, 0x52, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, // yHDR (const vec4
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, //  cBase, const ve
	0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, // c4 cBlend).{.vec
	0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, // 4 cNew = step(0.
	0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, // 5, cBase);.cNew 
	0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, // = max(mix(cBase*
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, // cBlend*2.0, 1.0-
	0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, // 2.0*(1.0-cBase)*
	0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, // (1.0-cBlend), cN
	0x65, 0x77, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, // ew), vec4(0.,0.,
	0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // 0.,0.));.return 
	0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x73, // cNew;.}.vec3 cos
	0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x5f, 0x73, 0x61, 0x6d, 0x70, // _hemisphere_samp
	0x6c, 0x65, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x29, // le(const vec2 t)
	0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, // .{.const float p
	0x68, 0x69, 0x20, 0x3d, 0x20, 0x74, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x28, 0x32, 0x2e, 0x30, 0x2a, // hi = t.y * (2.0*
	0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, // 3.14159265358979
	0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, // 3238462643383279
	0x35, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // 5);.const float 
	0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, // cosTheta = sqrt(
	0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // 1.0 - t.x);.cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, // t float sinTheta
	0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, //  = sqrt(t.x);.fl
	0x6f, 0x61, 0x74, 0x20, 0x73, 0x70, 0x2c, 0x63, 0x70, 0x3b, 0x0a, 0x73, 0x69, 0x6e, 0x63, 0x6f, // oat sp,cp;.sinco
	0x73, 0x28, 0x70, 0x68, 0x69, 0x2c, 0x73, 0x70, 0x2c, 0x63, 0x70, 0x29, 0x3b, 0x0a, 0x72, 0x65, // s(phi,sp,cp);.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x63, 0x70, 0x20, 0x2a, 0x20, 0x73, // turn vec3(cp * s
	0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, // inTheta, cosThet
	0x61, 0x2c, 0x20, 0x73, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, // a, sp * sinTheta
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, // );.}.vec3 rotate
	0x5f, 0x74, 0x6f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, // _to_vector_upper
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x2c, // (const vec3 vec,
	0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, //  const vec3 norm
	0x61, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, // al).{.if(normal.
	0x79, 0x20, 0x3e, 0x20, 0x2d, 0x30, 0x2e, 0x39, 0x39, 0x39, 0x39, 0x39, 0x29, 0x0a, 0x7b, 0x0a, // y > -0.99999).{.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x20, 0x3d, 0x20, // const float h = 
	0x31, 0x2e, 0x30, 0x2f, 0x28, 0x31, 0x2e, 0x30, 0x2b, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, // 1.0/(1.0+normal.
	0x79, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // y);.const float 
	0x68, 0x7a, 0x20, 0x3d, 0x20, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x3b, // hz = h*normal.z;
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x78, // .const float hzx
	0x20, 0x3d, 0x20, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x3b, 0x0a, //  = hz*normal.x;.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x0a, 0x76, 0x65, 0x63, // return vec3(.vec
	0x2e, 0x78, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, // .x * (normal.y+h
	0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x29, 0x20, 0x2b, 0x20, 0x76, 0x65, // z*normal.z) + ve
	0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, // c.y * normal.x -
	0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x2c, 0x0a, 0x76, 0x65, //  vec.z * hzx,.ve
	0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x2d, // c.y * normal.y -
	0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, //  vec.x * normal.
	0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, // x - vec.z * norm
	0x61, 0x6c, 0x2e, 0x7a, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, // al.z,.vec.y * no
	0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, // rmal.z - vec.x *
	0x20, 0x68, 0x7a, 0x78, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x28, //  hzx + vec.z * (
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, // normal.y+h*norma
	0x6c, 0x2e, 0x78, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, // l.x*normal.x));.
	0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x2d, 0x76, // }.else return -v
	0x65, 0x63, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, // ec;.}.uniform ve
	0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x53, 0x61, 0x74, 0x75, 0x72, 0x61, // c4 Stereo_Satura
	0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, // tion;.uniform ve
	0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, // c4 Stereo_MS_ZPD
	0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // _YAxis;.uniform 
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x20, 0x74, // sampler2DArray t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x3b, 0x0a, 0x75, 0x6e, // ex_stereo_fb;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, // iform sampler2DA
	0x72, 0x72, 0x61, 0x79, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // rray tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, // depth;.uniform v
	0x65, 0x63, 0x34, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, // ec4 w_h_height;.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, // vec3 gatherEyeCo
	0x6c, 0x6f, 0x72, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, // lor(vec2 u, bool
	0x20, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, //  isLeft).{.retur
	0x6e, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, // n texture2DArray
	0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, // Lod(tex_stereo_f
	0x62, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, // b, vec3(u.x, u.y
	0x2c, 0x20, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x30, 0x20, 0x3a, // , isLeft ? 0.0 :
	0x20, 0x31, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, //  1.0), 0.).rgb;.
	0x7d, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x66, // }.void gatherLef
	0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x28, 0x76, 0x65, 0x63, // tRightColors(vec
	0x32, 0x20, 0x75, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x63, // 2 u, out vec3 lc
	0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x6f, // ol, out vec3 rco
	0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x6c, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, // l).{.lcol = text
	0x75, 0x72, 0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, // ure2DArrayLod(te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x76, 0x65, 0x63, // x_stereo_fb, vec
	0x33, 0x28, 0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2c, // 3(u.x, u.y, 0.),
	0x20, 0x30, 0x2e, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x72, 0x63, 0x6f, 0x6c, 0x20, 0x3d, //  0.).xyz;.rcol =
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, //  texture2DArrayL
	0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, // od(tex_stereo_fb
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, // , vec3(u.x, u.y,
	0x20, 0x31, 0x2e, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, //  1.), 0.).xyz;.}
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, // .uniform mat4 St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, // ereo_LeftMat;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // iform mat4 Stere
	0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // o_RightMat;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // orm vec4 Stereo_
	0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, // LeftLuminance_Ga
	0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, // mma;.uniform vec
	0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // 4 Stereo_RightLu
	0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, // minance_DynDesat
	0x3b, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x65, // ;.void DynamicDe
	0x73, 0x61, 0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, // satAnaglyph(cons
	0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, // t vec3 lCol, con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, // st vec3 rCol, ou
	0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, // t vec3 lDesatCol
	0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x44, 0x65, 0x73, 0x61, // , out vec3 rDesa
	0x74, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // tCol).{.const fl
	0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // oat left2LeftLum
	0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, //  = dot(lCol, Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, // reo_LeftLuminanc
	0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, // e_Gamma.xyz);.co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, // nst float left2R
	0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, // ightLum = dot(lC
	0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, // ol, Stereo_Right
	0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, // Luminance_DynDes
	0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // at.xyz);.const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, // loat right2LeftL
	0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, // um = dot(rCol, S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, // tereo_LeftLumina
	0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, // nce_Gamma.xyz);.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, // const float righ
	0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, // t2RightLum = dot
	0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, // (rCol, Stereo_Ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, // ghtLuminance_Dyn
	0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // Desat.xyz);.cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, // t float leftLum 
	0x3d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, // = left2LeftLum +
	0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, 0x0a, //  left2RightLum;.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, // const float righ
	0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, // tLum = right2Lef
	0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, // tLum + right2Rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, // htLum;.const flo
	0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, // at leftDesat = S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, // tereo_RightLumin
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, // ance_DynDesat.w 
	0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, // * abs((left2Left
	0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, // Lum - left2Right
	0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, // Lum) / (leftLum 
	0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // + 0.0001));.cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x73, // t float rightDes
	0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, // at = Stereo_Righ
	0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, // tLuminance_DynDe
	0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x72, 0x69, 0x67, // sat.w * abs((rig
	0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x72, 0x69, 0x67, // ht2LeftLum - rig
	0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, // ht2RightLum) / (
	0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, // rightLum + 0.000
	0x31, 0x29, 0x29, 0x3b, 0x0a, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, 0x3d, // 1));.lDesatCol =
	0x20, 0x6d, 0x69, 0x78, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, //  mix(lCol, vec3_
	0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, // splat(leftLum), 
	0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x72, 0x44, 0x65, 0x73, // leftDesat);.rDes
	0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x72, 0x43, 0x6f, 0x6c, // atCol = mix(rCol
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x72, 0x69, 0x67, // , vec3_splat(rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x73, // htLum), rightDes
	0x61, 0x74, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x4c, 0x69, 0x6e, 0x65, // at);.}.vec3 Line
	0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, // arAnaglyph(const
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, //  vec3 lCol, cons
	0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, // t vec3 rCol).{.c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, // onst vec3 color 
	0x3d, 0x20, 0x28, 0x28, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, // = (( (vec4(lCol,
	0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, //  1.)) * (Stereo_
	0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x20, 0x28, // LeftMat) ) + ( (
	0x76, 0x65, 0x63, 0x34, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, // vec4(rCol, 1.)) 
	0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, // * (Stereo_RightM
	0x61, 0x74, 0x29, 0x20, 0x29, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // at) )).rgb;.retu
	0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, // rn color;.}.unif
	0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // orm vec4 Stereo_
	0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, 0x6e, // DeghostGamma;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // iform mat4 Stere
	0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3b, // o_DeghostFilter;
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x6e, 0x61, // .vec3 DeghostAna
	0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, // glyph(const vec3
	0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, //  lCol, const vec
	0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // 3 rCol).{.const 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, 0x6e, // vec3 color = Lin
	0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, // earAnaglyph(lCol
	0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // , rCol);.return 
	0x28, 0x20, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x53, 0x74, // ( (pow(color, St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, // ereo_DeghostGamm
	0x61, 0x2e, 0x72, 0x67, 0x62, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, // a.rgb)) * (mat3(
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, // Stereo_DeghostFi
	0x6c, 0x74, 0x65, 0x72, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, // lter[0].xyz, Ste
	0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, // reo_DeghostFilte
	0x72, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // r[1].xyz, Stereo
	0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x32, // _DeghostFilter[2
	0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, // ].xyz)) );.}.voi
	0x64, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // d main().{.vec3 
	0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x3b, 0x0a, 0x67, 0x61, 0x74, 0x68, // lCol, rCol;.gath
	0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, // erLeftRightColor
	0x73, 0x28, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2c, 0x20, 0x6c, // s(v_texcoord0, l
	0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x6c, 0x43, 0x6f, 0x6c, // Col, rCol);.lCol
	0x20, 0x3d, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x6c, 0x43, 0x6f, 0x6c, //  = InvGamma(lCol
	0x29, 0x3b, 0x0a, 0x72, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, // );.rCol = InvGam
	0x6d, 0x61, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, // ma(rCol);.vec3 l
	0x43, 0x6f, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x44, 0x65, // ColDesat, rColDe
	0x73, 0x61, 0x74, 0x3b, 0x0a, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x65, 0x73, 0x61, // sat;.DynamicDesa
	0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // tAnaglyph(lCol, 
	0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2c, // rCol, lColDesat,
	0x20, 0x72, 0x43, 0x6f, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x6c, 0x43, 0x6f, //  rColDesat);.lCo
	0x6c, 0x20, 0x3d, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x3b, 0x0a, 0x72, // l = lColDesat;.r
	0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x3b, // Col = rColDesat;
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, // .vec3 color = Li
	0x6e, 0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, // nearAnaglyph(lCo
	0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, // l, rCol);.gl_Fra
	0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x46, 0x42, // gColor = vec4(FB
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x2c, 0x20, 0x31, 0x2e, // Gamma(color), 1.
	0x30, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x00,                                                       // 0);.}..
};
static const uint8_t fs_pp_stereo_anaglyph_lin_srgb_dyndesat_st_dx11[2611] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x0e, 0x53, // FSH.Jc._.......S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x00, 0x00, // tereo_LeftMat...
	0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, // ........Stereo_R
	0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x00, 0x40, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, // ightMat..@......
	0x00, 0x1a, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // ..Stereo_LeftLum
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x12, 0x00, 0x80, 0x00, // inance_Gamma....
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, // .......Stereo_Ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, // ghtLuminance_Dyn
	0x44, 0x65, 0x73, 0x61, 0x74, 0x12, 0x00, 0x90, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, // Desat...........
	0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x30, 0x01, 0x00, // tex_stereo_fb0..
	0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // ........tex_ster
	0x65, 0x6f, 0x5f, 0x66, 0x62, 0x30, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6c, // eo_fb0.........l
	0x09, 0x00, 0x00, 0x44, 0x58, 0x42, 0x43, 0x7d, 0x6a, 0xae, 0x0f, 0x88, 0x47, 0x83, 0x9a, 0x8a, // ...DXBC}j...G...
	0x60, 0xb1, 0x8e, 0xf5, 0xf1, 0x53, 0xd5, 0x01, 0x00, 0x00, 0x00, 0x6c, 0x09, 0x00, 0x00, 0x03, // `....S.....l....
	0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x9c, 0x00, 0x00, 0x00, 0xd0, 0x00, 0x00, 0x00, 0x49, // ...,...........I
	0x53, 0x47, 0x4e, 0x68, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x50, // SGNh...........P
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x5c, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x06, 0x06, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, // .......SV_POSITI
	0x4f, 0x4e, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0xab, 0xab, 0xab, 0x4f, // ON.TEXCOORD....O
	0x53, 0x47, 0x4e, 0x2c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x20, // SGN,........... 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, // .......SV_TARGET
	0x00, 0xab, 0xab, 0x53, 0x48, 0x45, 0x58, 0x94, 0x08, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x25, // ...SHEX....P...%
	0x02, 0x00, 0x00, 0x6a, 0x08, 0x00, 0x01, 0x59, 0x00, 0x00, 0x04, 0x46, 0x8e, 0x20, 0x00, 0x00, // ...j...Y...F. ..
	0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x03, 0x00, 0x60, 0x10, 0x00, 0x00, // .......Z....`...
	0x00, 0x00, 0x00, 0x58, 0x40, 0x00, 0x04, 0x00, 0x70, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, // ...X@...p......U
	0x55, 0x00, 0x00, 0x62, 0x10, 0x00, 0x03, 0x62, 0x10, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x65, // U..b...b.......e
	0x00, 0x00, 0x03, 0xf2, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x02, 0x04, // .... ......h....
	0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x32, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x96, // ...6...2........
	0x15, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x42, 0x00, 0x10, 0x00, 0x00, // .......6...B....
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0x02, // ....@......H....
	0x02, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, // ...CU..r.......F
	0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .......F~.......
	0x60, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, // `.......@......2
	0x00, 0x00, 0x0f, 0x32, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x00, // ...2.......F....
	0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x6e, 0xa7, 0x72, 0x3f, 0x6e, 0xa7, 0x72, 0x3f, 0x00, // ....@..n.r?n.r?.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x19, 0x89, 0x55, 0x3d, 0x19, // ........@....U=.
	0x89, 0x55, 0x3d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x05, 0x32, // .U=......../...2
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x38, // .......F.......8
	0x00, 0x00, 0x0a, 0x32, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x01, // ...2.......F....
	0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x9a, 0x99, 0x19, 0x40, 0x9a, 0x99, 0x19, 0x40, 0x00, // ....@.....@...@.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x05, 0x32, 0x00, 0x10, 0x00, 0x01, // ...........2....
	0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x0a, 0xc2, // ...F.......8....
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x04, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, // ................
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x91, 0x83, 0x9e, 0x3d, 0x91, // @.............=.
	0x83, 0x9e, 0x3d, 0x1d, 0x00, 0x00, 0x0a, 0xb2, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, // ..=.............
	0x40, 0x00, 0x00, 0xe6, 0xae, 0x25, 0x3d, 0xe6, 0xae, 0x25, 0x3d, 0x00, 0x00, 0x00, 0x00, 0xe6, // @....%=..%=.....
	0xae, 0x25, 0x3d, 0x46, 0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x09, 0x32, // .%=F.......7...2
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe6, // .......F........
	0x0a, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, // .......F.......2
	0x00, 0x00, 0x09, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x00, // ...........*....
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x6e, 0xa7, 0x72, 0x3f, 0x01, 0x40, 0x00, 0x00, 0x19, // ....@..n.r?.@...
	0x89, 0x55, 0x3d, 0x2f, 0x00, 0x00, 0x05, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, // .U=/............
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x0a, 0x32, 0x00, 0x10, 0x00, 0x00, // .......8...2....
	0x00, 0x00, 0x00, 0x86, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x9a, // ............@...
	0x99, 0x19, 0x40, 0x91, 0x83, 0x9e, 0x3d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, // ..@...=.........
	0x00, 0x00, 0x05, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x09, 0x42, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3a, // ...7...B.......:
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, // ................
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x08, 0x12, 0x00, 0x10, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x82, 0x20, 0x00, 0x00, // ...F.......F. ..
	0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x08, 0x22, 0x00, 0x10, 0x00, 0x00, // ..........."....
	0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x82, 0x20, 0x00, 0x00, // ...F.......F. ..
	0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x42, 0x00, 0x10, 0x00, 0x00, // ...........B....
	0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, // .......A........
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x22, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, // ......."........
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x17, 0xb7, 0xd1, 0x38, 0x00, // ........@.....8.
	0x00, 0x00, 0x08, 0x72, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x80, 0x41, // ...r.......F...A
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, // ................
	0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x00, // ...........*....
	0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x09, 0x12, // ...........8....
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x80, 0x81, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x3a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x32, // ...:. .........2
	0x00, 0x00, 0x09, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x10, 0x00, 0x00, // ...r............
	0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x01, // ...F.......F....
	0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x82, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, // ...6............
	0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x11, 0x00, 0x00, 0x08, 0x12, 0x00, 0x10, 0x00, 0x01, // @.....?.........
	0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, // ...F.......F. ..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x08, 0x22, 0x00, 0x10, 0x00, 0x01, // ..........."....
	0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, // ...F.......F. ..
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x08, 0x42, 0x00, 0x10, 0x00, 0x01, // ...........B....
	0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, // ...F.......F. ..
	0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x32, 0x00, 0x10, 0x00, 0x00, // .......6...2....
	0x00, 0x00, 0x00, 0x96, 0x15, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x42, // ...........6...B
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x48, // ........@.....?H
	0x00, 0x00, 0x8d, 0x02, 0x02, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x72, 0x00, 0x10, 0x00, 0x00, // .......CU..r....
	0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, 0x00, // ...F.......F~...
	0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, // ....`.......@...
	0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x0f, 0x32, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, // ...2...2.......F
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x6e, 0xa7, 0x72, 0x3f, 0x6e, // ........@..n.r?n
	0xa7, 0x72, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x19, // .r?.........@...
	0x89, 0x55, 0x3d, 0x19, 0x89, 0x55, 0x3d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2f, // .U=..U=......../
	0x00, 0x00, 0x05, 0x32, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x02, // ...2.......F....
	0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x0a, 0x32, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, // ...8...2.......F
	0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x9a, 0x99, 0x19, 0x40, 0x9a, // ........@.....@.
	0x99, 0x19, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x05, 0x32, // ..@............2
	0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x38, // .......F.......8
	0x00, 0x00, 0x0a, 0xc2, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x06, 0x04, 0x10, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x91, // ....@...........
	0x83, 0x9e, 0x3d, 0x91, 0x83, 0x9e, 0x3d, 0x1d, 0x00, 0x00, 0x0a, 0xb2, 0x00, 0x10, 0x00, 0x00, // ..=...=.........
	0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0xe6, 0xae, 0x25, 0x3d, 0xe6, 0xae, 0x25, 0x3d, 0x00, // ....@....%=..%=.
	0x00, 0x00, 0x00, 0xe6, 0xae, 0x25, 0x3d, 0x46, 0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, // .....%=F.......7
	0x00, 0x00, 0x09, 0x32, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x00, // ...2.......F....
	0x00, 0x00, 0x00, 0xe6, 0x0a, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x00, 0x10, 0x00, 0x02, // ...........F....
	0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x09, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, // ...2...........*
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x6e, 0xa7, 0x72, 0x3f, 0x01, // ........@..n.r?.
	0x40, 0x00, 0x00, 0x19, 0x89, 0x55, 0x3d, 0x2f, 0x00, 0x00, 0x05, 0x12, 0x00, 0x10, 0x00, 0x00, // @....U=/........
	0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x0a, 0x32, // ...........8...2
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x86, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, // ................
	0x40, 0x00, 0x00, 0x9a, 0x99, 0x19, 0x40, 0x91, 0x83, 0x9e, 0x3d, 0x00, 0x00, 0x00, 0x00, 0x00, // @.....@...=.....
	0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x05, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, // ................
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x09, 0x42, 0x00, 0x10, 0x00, 0x02, // .......7...B....
	0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x00, // ...:............
	0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x08, 0x12, // ................
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, // .......F.......F
	0x82, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x08, 0x22, // . ............."
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, // .......F.......F
	0x82, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x42, // . .............B
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x00, // ...........A....
	0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x12, // ................
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, // ................
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x22, 0x00, 0x10, 0x00, 0x00, // ..........."....
	0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x17, // ............@...
	0xb7, 0xd1, 0x38, 0x00, 0x00, 0x00, 0x08, 0x72, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x46, // ..8....r.......F
	0x02, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x06, 0x00, 0x10, 0x00, 0x00, // ...A............
	0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, // ...............*
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, // ...............8
	0x00, 0x00, 0x09, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x80, 0x81, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, // .......:. ......
	0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x09, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, // ...2...r........
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x46, // .......F.......F
	0x02, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x82, 0x00, 0x10, 0x00, 0x00, // .......6........
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x11, 0x00, 0x00, 0x08, 0x12, // ....@.....?.....
	0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, // .......F.......F
	0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x08, 0x22, // . ............."
	0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, // .......F.......F
	0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x08, 0x42, // . .............B
	0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, // .......F.......F
	0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x72, // . .............r
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, // .......F.......F
	0x02, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x05, 0x72, 0x00, 0x10, 0x00, 0x01, // ......./...r....
	0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x0a, 0x72, // ...F.......8...r
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, // .......F........
	0x40, 0x00, 0x00, 0x55, 0x55, 0xd5, 0x3e, 0x55, 0x55, 0xd5, 0x3e, 0x55, 0x55, 0xd5, 0x3e, 0x00, // @..UU.>UU.>UU.>.
	0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x05, 0x72, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, // .......r.......F
	0x02, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x0f, 0x72, 0x00, 0x10, 0x00, 0x01, // .......2...r....
	0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x3d, // ...F........@..=
	0x0a, 0x87, 0x3f, 0x3d, 0x0a, 0x87, 0x3f, 0x3d, 0x0a, 0x87, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x02, // ..?=..?=..?.....
	0x40, 0x00, 0x00, 0xae, 0x47, 0x61, 0xbd, 0xae, 0x47, 0x61, 0xbd, 0xae, 0x47, 0x61, 0xbd, 0x00, // @...Ga..Ga..Ga..
	0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x0a, 0x72, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, // .......r........
	0x40, 0x00, 0x00, 0x1c, 0x2e, 0x4d, 0x3b, 0x1c, 0x2e, 0x4d, 0x3b, 0x1c, 0x2e, 0x4d, 0x3b, 0x00, // @....M;..M;..M;.
	0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x0a, 0x72, // ...F.......8...r
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, // .......F........
	0x40, 0x00, 0x00, 0x52, 0xb8, 0x4e, 0x41, 0x52, 0xb8, 0x4e, 0x41, 0x52, 0xb8, 0x4e, 0x41, 0x00, // @..R.NAR.NAR.NA.
	0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x09, 0x72, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, // ...7...r ......F
	0x02, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, // .......F.......F
	0x02, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x82, 0x20, 0x10, 0x00, 0x00, // .......6.... ...
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x3e, 0x00, 0x00, 0x01, 0x00, // ....@.....?>....
	0x00, 0xa0, 0x00,                                                                               // ...
};
static const uint8_t fs_pp_stereo_anaglyph_lin_srgb_dyndesat_st_spv[5363] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x1a, 0x53, // FSH.Jc._.......S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, // tereo_LeftLumina
	0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x12, 0x01, 0x80, 0x00, 0x01, 0x00, 0x00, // nce_Gamma.......
	0x00, 0x00, 0x00, 0x1e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, // ....Stereo_Right
	0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, // Luminance_DynDes
	0x61, 0x74, 0x12, 0x01, 0x90, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x53, 0x74, 0x65, // at...........Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x01, 0x00, 0x00, 0x04, // reo_LeftMat.....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, // ......Stereo_Rig
	0x68, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x01, 0x40, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, // htMat..@........
	0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x30, 0x00, 0x02, // tex_stereo_fb0..
	0x00, 0x00, 0x00, 0x00, 0x03, 0x22, 0x00, 0x44, 0x14, 0x00, 0x00, 0x03, 0x02, 0x23, 0x07, 0x00, // .....".D.....#..
	0x00, 0x01, 0x00, 0x0b, 0x00, 0x08, 0x00, 0x37, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, // .......7........
	0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, // ...............G
	0x4c, 0x53, 0x4c, 0x2e, 0x73, 0x74, 0x64, 0x2e, 0x34, 0x35, 0x30, 0x00, 0x00, 0x00, 0x00, 0x0e, // LSL.std.450.....
	0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x07, 0x00, 0x04, // ................
	0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x6d, // .......main....m
	0x01, 0x00, 0x00, 0x7a, 0x01, 0x00, 0x00, 0x10, 0x00, 0x03, 0x00, 0x04, 0x00, 0x00, 0x00, 0x07, // ...z............
	0x00, 0x00, 0x00, 0x03, 0x00, 0x03, 0x00, 0x05, 0x00, 0x00, 0x00, 0xf4, 0x01, 0x00, 0x00, 0x05, // ................
	0x00, 0x04, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x05, // .......main.....
	0x00, 0x08, 0x00, 0x56, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // ...V...tex_stere
	0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x00, 0x00, 0x00, 0x00, 0x05, // o_fbSampler.....
	0x00, 0x08, 0x00, 0x59, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // ...Y...tex_stere
	0x6f, 0x5f, 0x66, 0x62, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x00, 0x00, 0x00, 0x00, 0x05, // o_fbTexture.....
	0x00, 0x06, 0x00, 0xdd, 0x00, 0x00, 0x00, 0x55, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x6c, // .......UniformBl
	0x6f, 0x63, 0x6b, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x07, 0x00, 0xdd, 0x00, 0x00, 0x00, 0x00, // ock.............
	0x00, 0x00, 0x00, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, // ...Stereo_LeftMa
	0x74, 0x00, 0x00, 0x06, 0x00, 0x07, 0x00, 0xdd, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x53, // t..............S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x00, 0x06, // tereo_RightMat..
	0x00, 0x0a, 0x00, 0xdd, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x53, 0x74, 0x65, 0x72, 0x65, // ...........Stere
	0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, // o_LeftLuminance_
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x00, 0x00, 0x06, 0x00, 0x0b, 0x00, 0xdd, 0x00, 0x00, 0x00, 0x03, // Gamma...........
	0x00, 0x00, 0x00, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, // ...Stereo_RightL
	0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, // uminance_DynDesa
	0x74, 0x00, 0x00, 0x05, 0x00, 0x03, 0x00, 0xdf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, // t...............
	0x00, 0x05, 0x00, 0x6d, 0x01, 0x00, 0x00, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, // ...m...v_texcoor
	0x64, 0x30, 0x00, 0x05, 0x00, 0x06, 0x00, 0x7a, 0x01, 0x00, 0x00, 0x62, 0x67, 0x66, 0x78, 0x5f, // d0.....z...bgfx_
	0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x56, // FragData0..G...V
	0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x56, // ...".......G...V
	0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x59, // ...!.......G...Y
	0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x59, // ...".......G...Y
	0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x48, 0x00, 0x04, 0x00, 0xdd, // ...!.......H....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0xdd, // ...........H....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, // .......#.......H
	0x00, 0x05, 0x00, 0xdd, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x10, // ................
	0x00, 0x00, 0x00, 0x48, 0x00, 0x04, 0x00, 0xdd, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04, // ...H............
	0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0xdd, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x23, // ...H...........#
	0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0xdd, 0x00, 0x00, 0x00, 0x01, // ...@...H........
	0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0xdd, // ...........H....
	0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x48, // .......#.......H
	0x00, 0x05, 0x00, 0xdd, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x90, // ...........#....
	0x00, 0x00, 0x00, 0x47, 0x00, 0x03, 0x00, 0xdd, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x47, // ...G...........G
	0x00, 0x04, 0x00, 0xdf, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, // .......".......G
	0x00, 0x04, 0x00, 0xdf, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, // .......!.......G
	0x00, 0x04, 0x00, 0x6d, 0x01, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, // ...m...........G
	0x00, 0x04, 0x00, 0x7a, 0x01, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, // ...z............
	0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x21, 0x00, 0x03, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, // .......!........
	0x00, 0x00, 0x00, 0x1a, 0x00, 0x02, 0x00, 0x06, 0x00, 0x00, 0x00, 0x16, 0x00, 0x03, 0x00, 0x07, // ................
	0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x19, 0x00, 0x09, 0x00, 0x08, 0x00, 0x00, 0x00, 0x07, // ... ............
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x0b, // ................
	0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x0e, // ................
	0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x37, // ...............7
	0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x55, // ........... ...U
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x55, // ...........;...U
	0x00, 0x00, 0x00, 0x56, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x58, // ...V....... ...X
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x58, // ...........;...X
	0x00, 0x00, 0x00, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x00, 0x04, 0x00, 0x62, // ...Y...........b
	0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x62, // ... .......+...b
	0x00, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x62, // ...c.......+...b
	0x00, 0x00, 0x00, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x03, 0x00, 0x6b, // ...g...........k
	0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x85, // .......+........
	0x00, 0x00, 0x00, 0xe6, 0xae, 0x25, 0x3d, 0x14, 0x00, 0x02, 0x00, 0x86, 0x00, 0x00, 0x00, 0x2b, // .....%=........+
	0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x8a, 0x00, 0x00, 0x00, 0x91, 0x83, 0x9e, 0x3d, 0x2b, // ..............=+
	0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x8e, 0x00, 0x00, 0x00, 0x6e, 0xa7, 0x72, 0x3f, 0x2b, // ...........n.r?+
	0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x19, 0x89, 0x55, 0x3d, 0x2b, // .............U=+
	0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x92, 0x00, 0x00, 0x00, 0x9a, 0x99, 0x19, 0x40, 0x15, // ..............@.
	0x00, 0x04, 0x00, 0x99, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, // ....... .......+
	0x00, 0x04, 0x00, 0x99, 0x00, 0x00, 0x00, 0x9a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, // ...............+
	0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0xa6, 0x00, 0x00, 0x00, 0x1c, 0x2e, 0x4d, 0x3b, 0x2b, // .............M;+
	0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0xab, 0x00, 0x00, 0x00, 0x52, 0xb8, 0x4e, 0x41, 0x2b, // ...........R.NA+
	0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0xae, 0x00, 0x00, 0x00, 0x3d, 0x0a, 0x87, 0x3f, 0x2b, // ...........=..?+
	0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0xaf, 0x00, 0x00, 0x00, 0x55, 0x55, 0xd5, 0x3e, 0x2b, // ...........UU.>+
	0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0xc7, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, // ...............+
	0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0xd3, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x18, // ..............?.
	0x00, 0x04, 0x00, 0xdc, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x1e, // ................
	0x00, 0x06, 0x00, 0xdd, 0x00, 0x00, 0x00, 0xdc, 0x00, 0x00, 0x00, 0xdc, 0x00, 0x00, 0x00, 0x0e, // ................
	0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0xde, 0x00, 0x00, 0x00, 0x02, // ....... ........
	0x00, 0x00, 0x00, 0xdd, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0xde, 0x00, 0x00, 0x00, 0xdf, // .......;........
	0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x62, 0x00, 0x00, 0x00, 0xe0, // .......+...b....
	0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0xe1, 0x00, 0x00, 0x00, 0x02, // ....... ........
	0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x62, 0x00, 0x00, 0x00, 0xe7, // .......+...b....
	0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x99, 0x00, 0x00, 0x00, 0xff, // .......+........
	0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x00, 0x01, 0x00, 0x00, 0x02, // ....... ........
	0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x07, // .......+........
	0x01, 0x00, 0x00, 0x17, 0xb7, 0xd1, 0x38, 0x20, 0x00, 0x04, 0x00, 0x2a, 0x01, 0x00, 0x00, 0x02, // ......8 ...*....
	0x00, 0x00, 0x00, 0xdc, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x6c, 0x01, 0x00, 0x00, 0x01, // ....... ...l....
	0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x6c, 0x01, 0x00, 0x00, 0x6d, // ...7...;...l...m
	0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x79, 0x01, 0x00, 0x00, 0x03, // ....... ...y....
	0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x79, 0x01, 0x00, 0x00, 0x7a, // .......;...y...z
	0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x27, // .......+.......'
	0x03, 0x00, 0x00, 0xae, 0x47, 0x61, 0xbd, 0x36, 0x00, 0x05, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, // ....Ga.6........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x05, // ................
	0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, 0x56, // ...=.......W...V
	0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x08, 0x00, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x00, 0x59, // ...=.......Z...Y
	0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x37, 0x00, 0x00, 0x00, 0x6e, 0x01, 0x00, 0x00, 0x6d, // ...=...7...n...m
	0x01, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xcf, 0x01, 0x00, 0x00, 0x6e, // ...Q...........n
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xd1, // .......Q........
	0x01, 0x00, 0x00, 0x6e, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x50, 0x00, 0x06, 0x00, 0x0b, // ...n.......P....
	0x00, 0x00, 0x00, 0xd2, 0x01, 0x00, 0x00, 0xcf, 0x01, 0x00, 0x00, 0xd1, 0x01, 0x00, 0x00, 0xc7, // ................
	0x00, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, 0x6b, 0x00, 0x00, 0x00, 0xe4, 0x01, 0x00, 0x00, 0x5a, // ...V...k.......Z
	0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xe7, // ...W...X........
	0x01, 0x00, 0x00, 0xe4, 0x01, 0x00, 0x00, 0xd2, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xc7, // ................
	0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xd7, 0x01, 0x00, 0x00, 0x6e, // ...Q...........n
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xd9, // .......Q........
	0x01, 0x00, 0x00, 0x6e, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x50, 0x00, 0x06, 0x00, 0x0b, // ...n.......P....
	0x00, 0x00, 0x00, 0xda, 0x01, 0x00, 0x00, 0xd7, 0x01, 0x00, 0x00, 0xd9, 0x01, 0x00, 0x00, 0xd3, // ................
	0x00, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, 0x6b, 0x00, 0x00, 0x00, 0xee, 0x01, 0x00, 0x00, 0x5a, // ...V...k.......Z
	0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xf1, // ...W...X........
	0x01, 0x00, 0x00, 0xee, 0x01, 0x00, 0x00, 0xda, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xc7, // ................
	0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xf4, 0x01, 0x00, 0x00, 0xe7, // ...Q............
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x0b, 0x02, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0xfb, 0x00, 0x03, 0x00, 0x9a, 0x00, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0xf8, // ................
	0x00, 0x02, 0x00, 0x02, 0x02, 0x00, 0x00, 0xbc, 0x00, 0x05, 0x00, 0x86, 0x00, 0x00, 0x00, 0x03, // ................
	0x02, 0x00, 0x00, 0xf4, 0x01, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x0a, // ................
	0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0x03, 0x02, 0x00, 0x00, 0x04, // ................
	0x02, 0x00, 0x00, 0x06, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x06, 0x02, 0x00, 0x00, 0x0c, // ................
	0x00, 0x08, 0x00, 0x07, 0x00, 0x00, 0x00, 0x08, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, // ...............2
	0x00, 0x00, 0x00, 0xf4, 0x01, 0x00, 0x00, 0x8e, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x0c, // ................
	0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x09, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, // ................
	0x00, 0x00, 0x00, 0x08, 0x02, 0x00, 0x00, 0x92, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x0b, // ................
	0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x04, 0x02, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, // ................
	0x00, 0x00, 0x00, 0x05, 0x02, 0x00, 0x00, 0xf4, 0x01, 0x00, 0x00, 0x8a, 0x00, 0x00, 0x00, 0xf9, // ................
	0x00, 0x02, 0x00, 0x0b, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x0a, 0x02, 0x00, 0x00, 0xff, // ................
	0x00, 0x01, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x0b, 0x02, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x07, // ................
	0x00, 0x00, 0x00, 0x28, 0x03, 0x00, 0x00, 0x09, 0x02, 0x00, 0x00, 0x06, 0x02, 0x00, 0x00, 0x05, // ...(............
	0x02, 0x00, 0x00, 0x04, 0x02, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xf6, // .......Q........
	0x01, 0x00, 0x00, 0xe7, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x1d, // ................
	0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfb, 0x00, 0x03, 0x00, 0x9a, 0x00, 0x00, 0x00, 0x14, // ................
	0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x14, 0x02, 0x00, 0x00, 0xbc, 0x00, 0x05, 0x00, 0x86, // ................
	0x00, 0x00, 0x00, 0x15, 0x02, 0x00, 0x00, 0xf6, 0x01, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0xf7, // ................
	0x00, 0x03, 0x00, 0x1c, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0x15, // ................
	0x02, 0x00, 0x00, 0x16, 0x02, 0x00, 0x00, 0x18, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x18, // ................
	0x02, 0x00, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x07, 0x00, 0x00, 0x00, 0x1a, 0x02, 0x00, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0xf6, 0x01, 0x00, 0x00, 0x8e, 0x00, 0x00, 0x00, 0x90, // ...2............
	0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x1b, 0x02, 0x00, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x1a, 0x02, 0x00, 0x00, 0x92, 0x00, 0x00, 0x00, 0xf9, // ................
	0x00, 0x02, 0x00, 0x1d, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x16, 0x02, 0x00, 0x00, 0x85, // ................
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x17, 0x02, 0x00, 0x00, 0xf6, 0x01, 0x00, 0x00, 0x8a, // ................
	0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x1d, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x1c, // ................
	0x02, 0x00, 0x00, 0xff, 0x00, 0x01, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x1d, 0x02, 0x00, 0x00, 0xf5, // ................
	0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x29, 0x03, 0x00, 0x00, 0x1b, 0x02, 0x00, 0x00, 0x18, // .......)........
	0x02, 0x00, 0x00, 0x17, 0x02, 0x00, 0x00, 0x16, 0x02, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, // ...........Q....
	0x00, 0x00, 0x00, 0xf8, 0x01, 0x00, 0x00, 0xe7, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xf7, // ................
	0x00, 0x03, 0x00, 0x2f, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfb, 0x00, 0x03, 0x00, 0x9a, // .../............
	0x00, 0x00, 0x00, 0x26, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x26, 0x02, 0x00, 0x00, 0xbc, // ...&.......&....
	0x00, 0x05, 0x00, 0x86, 0x00, 0x00, 0x00, 0x27, 0x02, 0x00, 0x00, 0xf8, 0x01, 0x00, 0x00, 0x85, // .......'........
	0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x2e, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, // ................
	0x00, 0x04, 0x00, 0x27, 0x02, 0x00, 0x00, 0x28, 0x02, 0x00, 0x00, 0x2a, 0x02, 0x00, 0x00, 0xf8, // ...'...(...*....
	0x00, 0x02, 0x00, 0x2a, 0x02, 0x00, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x07, 0x00, 0x00, 0x00, 0x2c, // ...*...........,
	0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0xf8, 0x01, 0x00, 0x00, 0x8e, // .......2........
	0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x2d, // ...............-
	0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x2c, 0x02, 0x00, 0x00, 0x92, // ...........,....
	0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x2f, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x28, // ......./.......(
	0x02, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x29, 0x02, 0x00, 0x00, 0xf8, // ...........)....
	0x01, 0x00, 0x00, 0x8a, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x2f, 0x02, 0x00, 0x00, 0xf8, // .........../....
	0x00, 0x02, 0x00, 0x2e, 0x02, 0x00, 0x00, 0xff, 0x00, 0x01, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x2f, // .............../
	0x02, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x2a, 0x03, 0x00, 0x00, 0x2d, // ...........*...-
	0x02, 0x00, 0x00, 0x2a, 0x02, 0x00, 0x00, 0x29, 0x02, 0x00, 0x00, 0x28, 0x02, 0x00, 0x00, 0x50, // ...*...)...(...P
	0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xfa, 0x01, 0x00, 0x00, 0x28, 0x03, 0x00, 0x00, 0x29, // ...........(...)
	0x03, 0x00, 0x00, 0x2a, 0x03, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x33, // ...*...Q.......3
	0x02, 0x00, 0x00, 0xf1, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x4a, // ...............J
	0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfb, 0x00, 0x03, 0x00, 0x9a, 0x00, 0x00, 0x00, 0x41, // ...............A
	0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x41, 0x02, 0x00, 0x00, 0xbc, 0x00, 0x05, 0x00, 0x86, // .......A........
	0x00, 0x00, 0x00, 0x42, 0x02, 0x00, 0x00, 0x33, 0x02, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0xf7, // ...B...3........
	0x00, 0x03, 0x00, 0x49, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0x42, // ...I...........B
	0x02, 0x00, 0x00, 0x43, 0x02, 0x00, 0x00, 0x45, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x45, // ...C...E.......E
	0x02, 0x00, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x07, 0x00, 0x00, 0x00, 0x47, 0x02, 0x00, 0x00, 0x01, // ...........G....
	0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x33, 0x02, 0x00, 0x00, 0x8e, 0x00, 0x00, 0x00, 0x90, // ...2...3........
	0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x48, 0x02, 0x00, 0x00, 0x01, // ...........H....
	0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x47, 0x02, 0x00, 0x00, 0x92, 0x00, 0x00, 0x00, 0xf9, // .......G........
	0x00, 0x02, 0x00, 0x4a, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x43, 0x02, 0x00, 0x00, 0x85, // ...J.......C....
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x44, 0x02, 0x00, 0x00, 0x33, 0x02, 0x00, 0x00, 0x8a, // .......D...3....
	0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x4a, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x49, // .......J.......I
	0x02, 0x00, 0x00, 0xff, 0x00, 0x01, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x4a, 0x02, 0x00, 0x00, 0xf5, // ...........J....
	0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x2e, 0x03, 0x00, 0x00, 0x48, 0x02, 0x00, 0x00, 0x45, // ...........H...E
	0x02, 0x00, 0x00, 0x44, 0x02, 0x00, 0x00, 0x43, 0x02, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, // ...D...C...Q....
	0x00, 0x00, 0x00, 0x35, 0x02, 0x00, 0x00, 0xf1, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xf7, // ...5............
	0x00, 0x03, 0x00, 0x5c, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfb, 0x00, 0x03, 0x00, 0x9a, // ................
	0x00, 0x00, 0x00, 0x53, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x53, 0x02, 0x00, 0x00, 0xbc, // ...S.......S....
	0x00, 0x05, 0x00, 0x86, 0x00, 0x00, 0x00, 0x54, 0x02, 0x00, 0x00, 0x35, 0x02, 0x00, 0x00, 0x85, // .......T...5....
	0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x5b, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, // .......[........
	0x00, 0x04, 0x00, 0x54, 0x02, 0x00, 0x00, 0x55, 0x02, 0x00, 0x00, 0x57, 0x02, 0x00, 0x00, 0xf8, // ...T...U...W....
	0x00, 0x02, 0x00, 0x57, 0x02, 0x00, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x07, 0x00, 0x00, 0x00, 0x59, // ...W...........Y
	0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x35, 0x02, 0x00, 0x00, 0x8e, // .......2...5....
	0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x5a, // ...............Z
	0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x59, 0x02, 0x00, 0x00, 0x92, // ...........Y....
	0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x5c, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x55, // ...............U
	0x02, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x56, 0x02, 0x00, 0x00, 0x35, // ...........V...5
	0x02, 0x00, 0x00, 0x8a, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x5c, 0x02, 0x00, 0x00, 0xf8, // ................
	0x00, 0x02, 0x00, 0x5b, 0x02, 0x00, 0x00, 0xff, 0x00, 0x01, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x5c, // ...[............
	0x02, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x2f, 0x03, 0x00, 0x00, 0x5a, // .........../...Z
	0x02, 0x00, 0x00, 0x57, 0x02, 0x00, 0x00, 0x56, 0x02, 0x00, 0x00, 0x55, 0x02, 0x00, 0x00, 0x51, // ...W...V...U...Q
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x37, 0x02, 0x00, 0x00, 0xf1, 0x01, 0x00, 0x00, 0x02, // .......7........
	0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x6e, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfb, // .......n........
	0x00, 0x03, 0x00, 0x9a, 0x00, 0x00, 0x00, 0x65, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x65, // .......e.......e
	0x02, 0x00, 0x00, 0xbc, 0x00, 0x05, 0x00, 0x86, 0x00, 0x00, 0x00, 0x66, 0x02, 0x00, 0x00, 0x37, // ...........f...7
	0x02, 0x00, 0x00, 0x85, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x6d, 0x02, 0x00, 0x00, 0x00, // ...........m....
	0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0x66, 0x02, 0x00, 0x00, 0x67, 0x02, 0x00, 0x00, 0x69, // .......f...g...i
	0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x69, 0x02, 0x00, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x07, // .......i........
	0x00, 0x00, 0x00, 0x6b, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x37, // ...k.......2...7
	0x02, 0x00, 0x00, 0x8e, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, // ................
	0x00, 0x00, 0x00, 0x6c, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x6b, // ...l...........k
	0x02, 0x00, 0x00, 0x92, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x6e, 0x02, 0x00, 0x00, 0xf8, // ...........n....
	0x00, 0x02, 0x00, 0x67, 0x02, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x68, // ...g...........h
	0x02, 0x00, 0x00, 0x37, 0x02, 0x00, 0x00, 0x8a, 0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x6e, // ...7...........n
	0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x6d, 0x02, 0x00, 0x00, 0xff, 0x00, 0x01, 0x00, 0xf8, // .......m........
	0x00, 0x02, 0x00, 0x6e, 0x02, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x30, // ...n...........0
	0x03, 0x00, 0x00, 0x6c, 0x02, 0x00, 0x00, 0x69, 0x02, 0x00, 0x00, 0x68, 0x02, 0x00, 0x00, 0x67, // ...l...i...h...g
	0x02, 0x00, 0x00, 0x50, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x39, 0x02, 0x00, 0x00, 0x2e, // ...P.......9....
	0x03, 0x00, 0x00, 0x2f, 0x03, 0x00, 0x00, 0x30, 0x03, 0x00, 0x00, 0x41, 0x00, 0x05, 0x00, 0xe1, // .../...0...A....
	0x00, 0x00, 0x00, 0x81, 0x02, 0x00, 0x00, 0xdf, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x3d, // ...............=
	0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x82, 0x02, 0x00, 0x00, 0x81, 0x02, 0x00, 0x00, 0x4f, // ...............O
	0x00, 0x08, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x83, 0x02, 0x00, 0x00, 0x82, 0x02, 0x00, 0x00, 0x82, // ................
	0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x94, // ................
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x84, 0x02, 0x00, 0x00, 0xfa, 0x01, 0x00, 0x00, 0x83, // ................
	0x02, 0x00, 0x00, 0x41, 0x00, 0x05, 0x00, 0xe1, 0x00, 0x00, 0x00, 0x85, 0x02, 0x00, 0x00, 0xdf, // ...A............
	0x00, 0x00, 0x00, 0xe7, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x86, // .......=........
	0x02, 0x00, 0x00, 0x85, 0x02, 0x00, 0x00, 0x4f, 0x00, 0x08, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x87, // .......O........
	0x02, 0x00, 0x00, 0x86, 0x02, 0x00, 0x00, 0x86, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x94, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x88, // ................
	0x02, 0x00, 0x00, 0xfa, 0x01, 0x00, 0x00, 0x87, 0x02, 0x00, 0x00, 0x41, 0x00, 0x05, 0x00, 0xe1, // ...........A....
	0x00, 0x00, 0x00, 0x89, 0x02, 0x00, 0x00, 0xdf, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x3d, // ...............=
	0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x8a, 0x02, 0x00, 0x00, 0x89, 0x02, 0x00, 0x00, 0x4f, // ...............O
	0x00, 0x08, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x8b, 0x02, 0x00, 0x00, 0x8a, 0x02, 0x00, 0x00, 0x8a, // ................
	0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x94, // ................
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x8c, 0x02, 0x00, 0x00, 0x39, 0x02, 0x00, 0x00, 0x8b, // ...........9....
	0x02, 0x00, 0x00, 0x41, 0x00, 0x05, 0x00, 0xe1, 0x00, 0x00, 0x00, 0x8d, 0x02, 0x00, 0x00, 0xdf, // ...A............
	0x00, 0x00, 0x00, 0xe7, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x8e, // .......=........
	0x02, 0x00, 0x00, 0x8d, 0x02, 0x00, 0x00, 0x4f, 0x00, 0x08, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x8f, // .......O........
	0x02, 0x00, 0x00, 0x8e, 0x02, 0x00, 0x00, 0x8e, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x94, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x90, // ................
	0x02, 0x00, 0x00, 0x39, 0x02, 0x00, 0x00, 0x8f, 0x02, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x07, // ...9............
	0x00, 0x00, 0x00, 0x93, 0x02, 0x00, 0x00, 0x84, 0x02, 0x00, 0x00, 0x88, 0x02, 0x00, 0x00, 0x81, // ................
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x96, 0x02, 0x00, 0x00, 0x8c, 0x02, 0x00, 0x00, 0x90, // ................
	0x02, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x00, 0x01, 0x00, 0x00, 0x97, 0x02, 0x00, 0x00, 0xdf, // ...A............
	0x00, 0x00, 0x00, 0xe7, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, // ...........=....
	0x00, 0x00, 0x00, 0x98, 0x02, 0x00, 0x00, 0x97, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x07, // ................
	0x00, 0x00, 0x00, 0x9b, 0x02, 0x00, 0x00, 0x84, 0x02, 0x00, 0x00, 0x88, 0x02, 0x00, 0x00, 0x81, // ................
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x9d, 0x02, 0x00, 0x00, 0x93, 0x02, 0x00, 0x00, 0x07, // ................
	0x01, 0x00, 0x00, 0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x9e, 0x02, 0x00, 0x00, 0x9b, // ................
	0x02, 0x00, 0x00, 0x9d, 0x02, 0x00, 0x00, 0x0c, 0x00, 0x06, 0x00, 0x07, 0x00, 0x00, 0x00, 0x9f, // ................
	0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x9e, 0x02, 0x00, 0x00, 0x85, // ................
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xa0, 0x02, 0x00, 0x00, 0x98, 0x02, 0x00, 0x00, 0x9f, // ................
	0x02, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x00, 0x01, 0x00, 0x00, 0xa1, 0x02, 0x00, 0x00, 0xdf, // ...A............
	0x00, 0x00, 0x00, 0xe7, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, // ...........=....
	0x00, 0x00, 0x00, 0xa2, 0x02, 0x00, 0x00, 0xa1, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x07, // ................
	0x00, 0x00, 0x00, 0xa5, 0x02, 0x00, 0x00, 0x8c, 0x02, 0x00, 0x00, 0x90, 0x02, 0x00, 0x00, 0x81, // ................
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xa7, 0x02, 0x00, 0x00, 0x96, 0x02, 0x00, 0x00, 0x07, // ................
	0x01, 0x00, 0x00, 0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xa8, 0x02, 0x00, 0x00, 0xa5, // ................
	0x02, 0x00, 0x00, 0xa7, 0x02, 0x00, 0x00, 0x0c, 0x00, 0x06, 0x00, 0x07, 0x00, 0x00, 0x00, 0xa9, // ................
	0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xa8, 0x02, 0x00, 0x00, 0x85, // ................
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xaa, 0x02, 0x00, 0x00, 0xa2, 0x02, 0x00, 0x00, 0xa9, // ................
	0x02, 0x00, 0x00, 0x50, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xba, 0x02, 0x00, 0x00, 0x93, // ...P............
	0x02, 0x00, 0x00, 0x93, 0x02, 0x00, 0x00, 0x93, 0x02, 0x00, 0x00, 0x50, 0x00, 0x06, 0x00, 0x0b, // ...........P....
	0x00, 0x00, 0x00, 0xae, 0x02, 0x00, 0x00, 0xa0, 0x02, 0x00, 0x00, 0xa0, 0x02, 0x00, 0x00, 0xa0, // ................
	0x02, 0x00, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xc0, 0x02, 0x00, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0xfa, 0x01, 0x00, 0x00, 0xba, 0x02, 0x00, 0x00, 0xae, // ................
	0x02, 0x00, 0x00, 0x50, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xc6, 0x02, 0x00, 0x00, 0x96, // ...P............
	0x02, 0x00, 0x00, 0x96, 0x02, 0x00, 0x00, 0x96, 0x02, 0x00, 0x00, 0x50, 0x00, 0x06, 0x00, 0x0b, // ...........P....
	0x00, 0x00, 0x00, 0xb3, 0x02, 0x00, 0x00, 0xaa, 0x02, 0x00, 0x00, 0xaa, 0x02, 0x00, 0x00, 0xaa, // ................
	0x02, 0x00, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xcc, 0x02, 0x00, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x39, 0x02, 0x00, 0x00, 0xc6, 0x02, 0x00, 0x00, 0xb3, // .......9........
	0x02, 0x00, 0x00, 0x41, 0x00, 0x05, 0x00, 0x2a, 0x01, 0x00, 0x00, 0xd0, 0x02, 0x00, 0x00, 0xdf, // ...A...*........
	0x00, 0x00, 0x00, 0x67, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0xdc, 0x00, 0x00, 0x00, 0xd1, // ...g...=........
	0x02, 0x00, 0x00, 0xd0, 0x02, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xd2, // .......Q........
	0x02, 0x00, 0x00, 0xc0, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, // ...........Q....
	0x00, 0x00, 0x00, 0xd3, 0x02, 0x00, 0x00, 0xc0, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x51, // ...............Q
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xd4, 0x02, 0x00, 0x00, 0xc0, 0x02, 0x00, 0x00, 0x02, // ................
	0x00, 0x00, 0x00, 0x50, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xd5, 0x02, 0x00, 0x00, 0xd2, // ...P............
	0x02, 0x00, 0x00, 0xd3, 0x02, 0x00, 0x00, 0xd4, 0x02, 0x00, 0x00, 0xd3, 0x00, 0x00, 0x00, 0x91, // ................
	0x00, 0x05, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xd6, 0x02, 0x00, 0x00, 0xd1, 0x02, 0x00, 0x00, 0xd5, // ................
	0x02, 0x00, 0x00, 0x41, 0x00, 0x05, 0x00, 0x2a, 0x01, 0x00, 0x00, 0xd7, 0x02, 0x00, 0x00, 0xdf, // ...A...*........
	0x00, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0xdc, 0x00, 0x00, 0x00, 0xd8, // ...c...=........
	0x02, 0x00, 0x00, 0xd7, 0x02, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xd9, // .......Q........
	0x02, 0x00, 0x00, 0xcc, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, // ...........Q....
	0x00, 0x00, 0x00, 0xda, 0x02, 0x00, 0x00, 0xcc, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x51, // ...............Q
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xdb, 0x02, 0x00, 0x00, 0xcc, 0x02, 0x00, 0x00, 0x02, // ................
	0x00, 0x00, 0x00, 0x50, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xdc, 0x02, 0x00, 0x00, 0xd9, // ...P............
	0x02, 0x00, 0x00, 0xda, 0x02, 0x00, 0x00, 0xdb, 0x02, 0x00, 0x00, 0xd3, 0x00, 0x00, 0x00, 0x91, // ................
	0x00, 0x05, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xdd, 0x02, 0x00, 0x00, 0xd8, 0x02, 0x00, 0x00, 0xdc, // ................
	0x02, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xde, 0x02, 0x00, 0x00, 0xd6, // ................
	0x02, 0x00, 0x00, 0xdd, 0x02, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xe3, // .......Q........
	0x02, 0x00, 0x00, 0xde, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbc, 0x00, 0x05, 0x00, 0x86, // ................
	0x00, 0x00, 0x00, 0xf0, 0x02, 0x00, 0x00, 0xe3, 0x02, 0x00, 0x00, 0xa6, 0x00, 0x00, 0x00, 0xf7, // ................
	0x00, 0x03, 0x00, 0xf7, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0xf0, // ................
	0x02, 0x00, 0x00, 0xf1, 0x02, 0x00, 0x00, 0xf3, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xf3, // ................
	0x02, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0xf4, 0x02, 0x00, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0xe3, 0x02, 0x00, 0x00, 0xaf, 0x00, 0x00, 0x00, 0x0c, // ................
	0x00, 0x08, 0x00, 0x07, 0x00, 0x00, 0x00, 0xf6, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, // ...............2
	0x00, 0x00, 0x00, 0xae, 0x00, 0x00, 0x00, 0xf4, 0x02, 0x00, 0x00, 0x27, 0x03, 0x00, 0x00, 0xf9, // ...........'....
	0x00, 0x02, 0x00, 0xf7, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xf1, 0x02, 0x00, 0x00, 0x85, // ................
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xf2, 0x02, 0x00, 0x00, 0xab, 0x00, 0x00, 0x00, 0xe3, // ................
	0x02, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0xf7, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xf7, // ................
	0x02, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x34, 0x03, 0x00, 0x00, 0xf6, // ...........4....
	0x02, 0x00, 0x00, 0xf3, 0x02, 0x00, 0x00, 0xf2, 0x02, 0x00, 0x00, 0xf1, 0x02, 0x00, 0x00, 0x51, // ...............Q
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xe5, 0x02, 0x00, 0x00, 0xde, 0x02, 0x00, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0xbc, 0x00, 0x05, 0x00, 0x86, 0x00, 0x00, 0x00, 0xff, 0x02, 0x00, 0x00, 0xe5, // ................
	0x02, 0x00, 0x00, 0xa6, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x06, 0x03, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0xff, 0x02, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x02, // ................
	0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x02, 0x03, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, // ................
	0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0xe5, // ................
	0x02, 0x00, 0x00, 0xaf, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x07, 0x00, 0x00, 0x00, 0x05, // ................
	0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0xae, 0x00, 0x00, 0x00, 0x03, // .......2........
	0x03, 0x00, 0x00, 0x27, 0x03, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x06, 0x03, 0x00, 0x00, 0xf8, // ...'............
	0x00, 0x02, 0x00, 0x00, 0x03, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, // ................
	0x03, 0x00, 0x00, 0xab, 0x00, 0x00, 0x00, 0xe5, 0x02, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x06, // ................
	0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x06, 0x03, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x07, // ................
	0x00, 0x00, 0x00, 0x35, 0x03, 0x00, 0x00, 0x05, 0x03, 0x00, 0x00, 0x02, 0x03, 0x00, 0x00, 0x01, // ...5............
	0x03, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xe7, // .......Q........
	0x02, 0x00, 0x00, 0xde, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xbc, 0x00, 0x05, 0x00, 0x86, // ................
	0x00, 0x00, 0x00, 0x0e, 0x03, 0x00, 0x00, 0xe7, 0x02, 0x00, 0x00, 0xa6, 0x00, 0x00, 0x00, 0xf7, // ................
	0x00, 0x03, 0x00, 0x15, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0x0e, // ................
	0x03, 0x00, 0x00, 0x0f, 0x03, 0x00, 0x00, 0x11, 0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x11, // ................
	0x03, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x12, 0x03, 0x00, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0xe7, 0x02, 0x00, 0x00, 0xaf, 0x00, 0x00, 0x00, 0x0c, // ................
	0x00, 0x08, 0x00, 0x07, 0x00, 0x00, 0x00, 0x14, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, // ...............2
	0x00, 0x00, 0x00, 0xae, 0x00, 0x00, 0x00, 0x12, 0x03, 0x00, 0x00, 0x27, 0x03, 0x00, 0x00, 0xf9, // ...........'....
	0x00, 0x02, 0x00, 0x15, 0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x0f, 0x03, 0x00, 0x00, 0x85, // ................
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x10, 0x03, 0x00, 0x00, 0xab, 0x00, 0x00, 0x00, 0xe7, // ................
	0x02, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x15, 0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x15, // ................
	0x03, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0x36, 0x03, 0x00, 0x00, 0x14, // ...........6....
	0x03, 0x00, 0x00, 0x11, 0x03, 0x00, 0x00, 0x10, 0x03, 0x00, 0x00, 0x0f, 0x03, 0x00, 0x00, 0x50, // ...............P
	0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xbf, 0x01, 0x00, 0x00, 0x34, 0x03, 0x00, 0x00, 0x35, // ...........4...5
	0x03, 0x00, 0x00, 0x36, 0x03, 0x00, 0x00, 0xd3, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x03, 0x00, 0x7a, // ...6.......>...z
	0x01, 0x00, 0x00, 0xbf, 0x01, 0x00, 0x00, 0xfd, 0x00, 0x01, 0x00, 0x38, 0x00, 0x01, 0x00, 0x00, // ...........8....
	0x00, 0xa0, 0x00,                                                                               // ...
};
static const bgfx::EmbeddedShader fs_pp_stereo_anaglyph_lin_srgb_dyndesat_st = BGFX_EMBEDDED_SHADER(fs_pp_stereo_anaglyph_lin_srgb_dyndesat_st);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Build of fragment shader from fs_pp_stereo.sc to fs_pp_stereo_anaglyph_lin_gamma_nodesat_st with options: ANAGLYPH NODESAT GAMMA STEREO
static const uint8_t fs_pp_stereo_anaglyph_lin_gamma_nodesat_st_mtl[1639] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x14, 0x74, // FSH.Jc._.......t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, // ex_stereo_fbSamp
	0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x74, 0x65, // ler...........te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x54, 0x65, 0x78, 0x74, 0x75, // x_stereo_fbTextu
	0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x74, 0x65, 0x78, // re...........tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, // _stereo_depthSam
	0x70, 0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x74, // pler...........t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x54, // ex_stereo_depthT
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, // exture..........
	0x0e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x14, // .Stereo_LeftMat.
	0x01, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // ..........Stereo
	0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x01, 0x40, 0x00, 0x04, 0x00, 0x00, // _RightMat..@....
	0x00, 0x00, 0x00, 0x1a, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, // ....Stereo_LeftL
	0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x12, 0x01, // uminance_Gamma..
	0x80, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, // .........tex_ste
	0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // reo_fb..........
	0x5f, 0x05, 0x00, 0x00, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x6d, 0x65, // _...#include <me
	0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x64, 0x6c, 0x69, 0x62, 0x3e, 0x0a, 0x23, 0x69, 0x6e, 0x63, // tal_stdlib>.#inc
	0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x73, 0x69, 0x6d, 0x64, 0x2f, 0x73, 0x69, 0x6d, 0x64, 0x2e, // lude <simd/simd.
	0x68, 0x3e, 0x0a, 0x0a, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, // h>..using namesp
	0x61, 0x63, 0x65, 0x20, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, // ace metal;..stru
	0x63, 0x74, 0x20, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, // ct _Global.{.   
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x78, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, //  float4x4 Stereo
	0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, // _LeftMat;.    fl
	0x6f, 0x61, 0x74, 0x34, 0x78, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, // oat4x4 Stereo_Ri
	0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, // ghtMat;.    floa
	0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, // t4 Stereo_LeftLu
	0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x7d, // minance_Gamma;.}
	0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, // ;..struct xlatMt
	0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, // lMain_out.{.    
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, // float4 bgfx_Frag
	0x44, 0x61, 0x74, 0x61, 0x30, 0x20, 0x5b, 0x5b, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x28, 0x30, 0x29, // Data0 [[color(0)
	0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x78, // ]];.};..struct x
	0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x0a, 0x7b, 0x0a, // latMtlMain_in.{.
	0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, //     float2 v_tex
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x5b, 0x5b, 0x75, 0x73, 0x65, 0x72, 0x28, 0x6c, 0x6f, // coord0 [[user(lo
	0x63, 0x6e, 0x31, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x66, 0x72, 0x61, 0x67, // cn1)]];.};..frag
	0x6d, 0x65, 0x6e, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, // ment xlatMtlMain
	0x5f, 0x6f, 0x75, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, // _out xlatMtlMain
	0x28, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x20, // (xlatMtlMain_in 
	0x69, 0x6e, 0x20, 0x5b, 0x5b, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x5d, 0x5d, 0x2c, // in [[stage_in]],
	0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x20, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, //  constant _Globa
	0x6c, 0x26, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x20, 0x5b, 0x5b, 0x62, 0x75, 0x66, 0x66, // l& _mtl_u [[buff
	0x65, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // er(0)]], texture
	0x32, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3e, 0x20, // 2d_array<float> 
	0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x20, 0x5b, 0x5b, // tex_stereo_fb [[
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x73, 0x61, // texture(0)]], sa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, // mpler tex_stereo
	0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x5b, 0x5b, 0x73, 0x61, 0x6d, // _fbSampler [[sam
	0x70, 0x6c, 0x65, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, // pler(0)]]).{.   
	0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, //  xlatMtlMain_out
	0x20, 0x6f, 0x75, 0x74, 0x20, 0x3d, 0x20, 0x7b, 0x7d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, //  out = {};.    f
	0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x33, 0x30, 0x36, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, // loat3 _306 = flo
	0x61, 0x74, 0x33, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, // at3(in.v_texcoor
	0x64, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, // d0, 0.0);.    fl
	0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x33, 0x31, 0x34, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, // oat3 _314 = floa
	0x74, 0x33, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, // t3(in.v_texcoord
	0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x6f, 0x75, 0x74, // 0, 1.0);.    out
	0x2e, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x20, // .bgfx_FragData0 
	0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x70, 0x6f, 0x77, 0x72, 0x28, 0x28, 0x28, // = float4(powr(((
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x70, 0x6f, 0x77, 0x72, 0x28, 0x74, 0x65, 0x78, 0x5f, // float4(powr(tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // stereo_fb.sample
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, // (tex_stereo_fbSa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x33, 0x30, 0x36, 0x2e, 0x78, 0x79, 0x2c, 0x20, // mpler, _306.xy, 
	0x75, 0x69, 0x6e, 0x74, 0x28, 0x72, 0x69, 0x6e, 0x74, 0x28, 0x5f, 0x33, 0x30, 0x36, 0x2e, 0x7a, // uint(rint(_306.z
	0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, // )), level(0.0)).
	0x78, 0x79, 0x7a, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x6d, 0x74, 0x6c, // xyz, float3(_mtl
	0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, // _u.Stereo_LeftLu
	0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, // minance_Gamma.w,
	0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, //  _mtl_u.Stereo_L
	0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, // eftLuminance_Gam
	0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, // ma.w, _mtl_u.Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, // reo_LeftLuminanc
	0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x29, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, // e_Gamma.w)), 1.0
	0x29, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, // ) * _mtl_u.Stere
	0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x66, 0x6c, // o_LeftMat) + (fl
	0x6f, 0x61, 0x74, 0x34, 0x28, 0x70, 0x6f, 0x77, 0x72, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // oat4(powr(tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, // ereo_fb.sample(t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, // ex_stereo_fbSamp
	0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x33, 0x31, 0x34, 0x2e, 0x78, 0x79, 0x2c, 0x20, 0x75, 0x69, // ler, _314.xy, ui
	0x6e, 0x74, 0x28, 0x72, 0x69, 0x6e, 0x74, 0x28, 0x5f, 0x33, 0x31, 0x34, 0x2e, 0x7a, 0x29, 0x29, // nt(rint(_314.z))
	0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x79, // , level(0.0)).xy
	0x7a, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, // z, float3(_mtl_u
	0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, // .Stereo_LeftLumi
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, 0x5f, // nance_Gamma.w, _
	0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, // mtl_u.Stereo_Lef
	0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, // tLuminance_Gamma
	0x2e, 0x77, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, // .w, _mtl_u.Stere
	0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, // o_LeftLuminance_
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x29, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, // Gamma.w)), 1.0) 
	0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // * _mtl_u.Stereo_
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, // RightMat)).xyz, 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x5f, 0x6d, 0x74, // float3(1.0 / _mt
	0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, // l_u.Stereo_LeftL
	0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, // uminance_Gamma.w
	0x2c, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, // , 1.0 / _mtl_u.S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, // tereo_LeftLumina
	0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, 0x31, 0x2e, 0x30, // nce_Gamma.w, 1.0
	0x20, 0x2f, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, //  / _mtl_u.Stereo
	0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, // _LeftLuminance_G
	0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x29, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, // amma.w)), 1.0);.
	0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6f, 0x75, 0x74, 0x3b, 0x0a, //     return out;.
	0x7d, 0x0a, 0x0a, 0x00, 0x00, 0xd0, 0x00,                                                       // }......
};
static const uint8_t fs_pp_stereo_anaglyph_lin_gamma_nodesat_st_essl[9371] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x88, 0x24, // FSH.Jc._.......$
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x33, 0x32, 0x30, 0x20, 0x65, // ..#version 320 e
	0x73, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, // s.#define attrib
	0x75, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x76, // ute in.#define v
	0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, // arying in.precis
	0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3b, // ion highp float;
	0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, // .precision highp
	0x20, 0x69, 0x6e, 0x74, 0x3b, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, //  int;.precision 
	0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, // highp sampler2DA
	0x72, 0x72, 0x61, 0x79, 0x3b, 0x0a, 0x23, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, // rray;.#extension
	0x20, 0x47, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x74, //  GL_EXT_shader_t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6c, 0x6f, 0x64, 0x20, 0x3a, 0x20, 0x65, 0x6e, 0x61, // exture_lod : ena
	0x62, 0x6c, 0x65, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, // ble.#define text
	0x75, 0x72, 0x65, 0x32, 0x44, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, // ure2DLod      te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x4c, 0x6f, 0x64, 0x45, 0x58, 0x54, 0x0a, 0x23, 0x64, // xture2DLodEXT.#d
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x47, // efine texture2DG
	0x72, 0x61, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, // rad     texture2
	0x44, 0x47, 0x72, 0x61, 0x64, 0x45, 0x58, 0x54, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, // DGradEXT.#define
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x4c, 0x6f, //  texture2DProjLo
	0x64, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, // d  texture2DProj
	0x4c, 0x6f, 0x64, 0x45, 0x58, 0x54, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, // LodEXT.#define t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, // exture2DProjGrad
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, //  texture2DProjGr
	0x61, 0x64, 0x45, 0x58, 0x54, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, // adEXT.#define te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, // xtureCubeLod    
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x4c, 0x6f, 0x64, 0x45, 0x58, // textureCubeLodEX
	0x54, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // T.#define textur
	0x65, 0x43, 0x75, 0x62, 0x65, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, // eCubeGrad   text
	0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x47, 0x72, 0x61, 0x64, 0x45, 0x58, 0x54, 0x0a, 0x23, // ureCubeGradEXT.#
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x28, // define shadow2D(
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, // _sampler, _coord
	0x29, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, // ) texture(_sampl
	0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x0a, 0x23, 0x64, 0x65, 0x66, // er, _coord).#def
	0x69, 0x6e, 0x65, 0x20, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, // ine shadow2DProj
	0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, // (_sampler, _coor
	0x64, 0x29, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, // d) textureProj(_
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, // sampler, _coord)
	0x0a, 0x23, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x47, 0x4c, 0x5f, 0x45, // .#extension GL_E
	0x58, 0x54, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, // XT_texture_array
	0x20, 0x3a, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x0a, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x65, //  : enable.out me
	0x64, 0x69, 0x75, 0x6d, 0x70, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, // diump vec4 bgfx_
	0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, // FragColor;.varyi
	0x6e, 0x67, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x5f, 0x65, 0x79, 0x65, 0x3b, 0x0a, // ng float v_eye;.
	0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x5f, 0x74, // varying vec2 v_t
	0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, // excoord0;.vec3 i
	0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, // nstMul(vec3 _vec
	0x2c, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, // , mat3 _mtx) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, // eturn ( (_vec) *
	0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, //  (_mtx) ); }.vec
	0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, // 3 instMul(mat3 _
	0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, // mtx, vec3 _vec) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, // { return ( (_mtx
	0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, // ) * (_vec) ); }.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, // vec4 instMul(vec
	0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, // 4 _vec, mat4 _mt
	0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, // x) { return ( (_
	0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, // vec) * (_mtx) );
	0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, //  }.vec4 instMul(
	0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // mat4 _mtx, vec4 
	0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // _vec) { return (
	0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, //  (_mtx) * (_vec)
	0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, 0x70, 0x28, //  ); }.float rcp(
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // float _a) { retu
	0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, // rn 1.0/_a; }.vec
	0x32, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, // 2 rcp(vec2 _a) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, //  return vec2(1.0
	0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x70, // )/_a; }.vec3 rcp
	0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // (vec3 _a) { retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, // rn vec3(1.0)/_a;
	0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x34, //  }.vec4 rcp(vec4
	0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, //  _a) { return ve
	0x63, 0x34, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, // c4(1.0)/_a; }.ve
	0x63, 0x32, 0x20, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, // c2 vec2_splat(fl
	0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // oat _x) { return
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, //  vec2(_x, _x); }
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, // .vec3 vec3_splat
	0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // (float _x) { ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, // urn vec3(_x, _x,
	0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, 0x65, 0x63, //  _x); }.vec4 vec
	0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, // 4_splat(float _x
	0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, // ) { return vec4(
	0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, // _x, _x, _x, _x);
	0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, //  }.uvec2 uvec2_s
	0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, // plat(uint _x) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, // return uvec2(_x,
	0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, 0x75, 0x76, //  _x); }.uvec3 uv
	0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, // ec3_splat(uint _
	0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, // x) { return uvec
	0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, // 3(_x, _x, _x); }
	0x0a, 0x75, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, // .uvec4 uvec4_spl
	0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // at(uint _x) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, // turn uvec4(_x, _
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x6d, 0x61, // x, _x, _x); }.ma
	0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, // t4 mtxFromRows(v
	0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, // ec4 _0, vec4 _1,
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, //  vec4 _2, vec4 _
	0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, // 3).{.return tran
	0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, // spose(mat4(_0, _
	0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // 1, _2, _3) );.}.
	0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, // mat4 mtxFromCols
	0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, // (vec4 _0, vec4 _
	0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // 1, vec4 _2, vec4
	0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, //  _3).{.return ma
	0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, // t4(_0, _1, _2, _
	0x33, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, // 3);.}.mat3 mtxFr
	0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, // omRows(vec3 _0, 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, // vec3 _1, vec3 _2
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, // ).{.return trans
	0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, // pose(mat3(_0, _1
	0x2c, 0x20, 0x5f, 0x32, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, // , _2) );.}.mat3 
	0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, // mtxFromCols(vec3
	0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, //  _0, vec3 _1, ve
	0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // c3 _2).{.return 
	0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, // mat3(_0, _1, _2)
	0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, // ;.}.uniform vec4
	0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, //  u_viewRect;.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, // form vec4 u_view
	0x54, 0x65, 0x78, 0x65, 0x6c, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, // Texel;.uniform m
	0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // at4 u_view;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, // orm mat4 u_invVi
	0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, // ew;.uniform mat4
	0x20, 0x75, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, //  u_proj;.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, 0x6a, 0x3b, //  mat4 u_invProj;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, // .uniform mat4 u_
	0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // viewProj;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, // m mat4 u_invView
	0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, // Proj;.uniform ma
	0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, 0x3b, 0x0a, // t4 u_model[32];.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, // uniform mat4 u_m
	0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // odelView;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, // m mat4 u_modelVi
	0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // ewProj;.uniform 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x66, 0x34, // vec4 u_alphaRef4
	0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, // ;.float sqr(cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // t float v).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, // urn v*v;.}.vec2 
	0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, // sqr(const vec2 v
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, // ).{.return v*v;.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, // }.vec3 sqr(const
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, //  vec3 v).{.retur
	0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6d, 0x75, // n v*v;.}.vec3 mu
	0x6c, 0x5f, 0x77, 0x31, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // l_w1(const vec3 
	0x76, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x29, // v, const mat4 m)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2e, 0x78, 0x2a, 0x6d, 0x5b, // .{.return v.x*m[
	0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x79, 0x2a, 0x6d, 0x5b, // 0].xyz + (v.y*m[
	0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x7a, 0x2a, 0x6d, 0x5b, // 1].xyz + (v.z*m[
	0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x6d, 0x5b, 0x33, 0x5d, 0x2e, 0x78, 0x79, // 2].xyz + m[3].xy
	0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x63, 0x6f, // z));.}.float aco
	0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x63, // s_approx_divPI(c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, // onst float v).{.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, // const float x = 
	0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, // abs(v);.if(1. - 
	0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, // x <= 0.000061035
	0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, // 15625).return (v
	0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x20, 0x3a, 0x20, 0x31, //  >= 0.) ? 0. : 1
	0x2e, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, // .;.const float r
	0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, // es = ((-0.155972
	0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, // /3.1415926535897
	0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, // 9323846264338327
	0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, // 95) * x + (1.564
	0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, // 67/3.14159265358
	0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, // 9793238462643383
	0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, // 2795) ) * sqrt(1
	0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // . - x);.return (
	0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, // v >= 0.) ? res :
	0x20, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, //  1. - res;.}.flo
	0x61, 0x74, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, // at atan2_approx_
	0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, // div2PI(const flo
	0x61, 0x74, 0x20, 0x79, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, // at y, const floa
	0x74, 0x20, 0x78, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, // t x).{.const flo
	0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x79, // at abs_y = abs(y
	0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, // );.const float a
	0x62, 0x73, 0x5f, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x78, 0x29, 0x3b, 0x0a, 0x69, // bs_x = abs(x);.i
	0x66, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, // f(abs_x <= 0.000
	0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x20, 0x26, 0x26, 0x20, 0x61, // 06103515625 && a
	0x62, 0x73, 0x5f, 0x79, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, // bs_y <= 0.000061
	0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // 03515625).return
	0x20, 0x30, 0x2e, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, //  0.;.const float
	0x20, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2d, 0x20, 0x61, 0x62, //  r = (abs_x - ab
	0x73, 0x5f, 0x79, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2b, 0x20, // s_y) / (abs_x + 
	0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // abs_y);.const fl
	0x6f, 0x61, 0x74, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x78, 0x20, // oat angle = ((x 
	0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x28, 0x33, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x20, // < 0.) ? (3./8.) 
	0x3a, 0x20, 0x28, 0x31, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x29, 0x0a, 0x2b, 0x20, 0x28, 0x30, 0x2e, // : (1./8.)).+ (0.
	0x32, 0x31, 0x31, 0x38, 0x36, 0x38, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, // 211868 /(2.*3.14
	0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, // 1592653589793238
	0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, // 4626433832795) *
	0x20, 0x72, 0x20, 0x2a, 0x20, 0x72, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x39, 0x38, 0x37, 0x33, 0x30, //  r * r - 0.98730
	0x35, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, // 5 /(2.*3.1415926
	0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, // 5358979323846264
	0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x78, // 33832795)) * ((x
	0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x72, 0x20, 0x3a, 0x20, 0x72, 0x29, //  < 0.) ? -r : r)
	0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x79, 0x20, 0x3c, 0x20, 0x30, 0x2e, // ;.return (y < 0.
	0x29, 0x20, 0x3f, 0x20, 0x2d, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3a, 0x20, 0x61, 0x6e, 0x67, // ) ? -angle : ang
	0x6c, 0x65, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x73, 0x69, 0x6e, // le;.}.float asin
	0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x63, 0x6f, // _approx_divPI(co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x63, // nst float v).{.c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, // onst float x = a
	0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, // bs(v);.if(1. - x
	0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, //  <= 0.0000610351
	0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, // 5625).return (v 
	0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x3a, 0x20, 0x2d, // >= 0.) ? 0.5 : -
	0x30, 0x2e, 0x35, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // 0.5;.const float
	0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, //  res = ((-0.1559
	0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, // 72/3.14159265358
	0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, // 9793238462643383
	0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, // 2795) * x + (1.5
	0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, // 6467/3.141592653
	0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, // 5897932384626433
	0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, // 832795) ) * sqrt
	0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // (1. - x);.return
	0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, //  (v >= 0.) ? 0.5
	0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, //  - res : -0.5 + 
	0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x61, 0x79, 0x5f, // res;.}.vec2 ray_
	0x74, 0x6f, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x75, 0x6c, // to_equirectangul
	0x61, 0x72, 0x5f, 0x75, 0x76, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, // ar_uv(const vec3
	0x20, 0x72, 0x61, 0x79, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, //  ray).{.return v
	0x65, 0x63, 0x32, 0x28, 0x0a, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, // ec2(.0.5 + atan2
	0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x72, // _approx_div2PI(r
	0x61, 0x79, 0x2e, 0x79, 0x2c, 0x20, 0x72, 0x61, 0x79, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x61, 0x63, // ay.y, ray.x),.ac
	0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, // os_approx_divPI(
	0x72, 0x61, 0x79, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // ray.z));.}.float
	0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, //  InvsRGB(const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, // loat color).{.if
	0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, //  (color <= 0.040
	0x34, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // 45).return color
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x29, 0x3b, 0x0a, //  * (1.0/12.92);.
	0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, // else.return pow(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, // color * (1.0/1.0
	0x35, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x2f, 0x31, 0x2e, 0x30, // 55) + (0.055/1.0
	0x35, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // 55), 2.4);.}.flo
	0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x63, 0x6f, 0x6e, // at InvRec709(con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, // st float color).
	0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, // {.if (color <= 0
	0x2e, 0x30, 0x38, 0x31, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, // .081).return col
	0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x34, 0x2e, 0x35, 0x29, 0x3b, 0x0a, // or * (1.0/4.5);.
	0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, // else.return pow(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, // color * (1.0/1.0
	0x39, 0x39, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x2f, 0x31, 0x2e, 0x30, // 99) + (0.099/1.0
	0x39, 0x39, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x3b, 0x0a, // 99), 1.0/0.45);.
	0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, // }.float InvGamma
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, // (const float col
	0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x49, 0x6e, 0x76, // or).{.return Inv
	0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // sRGB(color);.}.v
	0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, // ec3 InvGamma(con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, // st vec3 color).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x49, 0x6e, 0x76, // .return vec3(Inv
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x49, // Gamma(color.x),I
	0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, // nvGamma(color.y)
	0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, // ,InvGamma(color.
	0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x54, // z));.}.vec3 InvT
	0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, // oneMap(const vec
	0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, // 3 color).{.const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x20, 0x3d, //  float inv_2bh =
	0x20, 0x30, 0x2e, 0x35, 0x2f, 0x30, 0x2e, 0x32, 0x35, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, //  0.5/0.25;.const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x34, 0x2e, 0x30, 0x2a, //  float bh = 4.0*
	0x30, 0x2e, 0x32, 0x35, 0x20, 0x2d, 0x20, 0x32, 0x2e, 0x30, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // 0.25 - 2.0;.retu
	0x72, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, // rn (color - 1.0 
	0x2b, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2a, 0x28, 0x63, 0x6f, // + sqrt(color*(co
	0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x20, 0x62, 0x68, 0x29, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, // lor + bh) + 1.0)
	0x29, 0x2a, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // )*inv_2bh;.}.flo
	0x61, 0x74, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // at sRGB(const fl
	0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, // oat f).{.float s
	0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x33, // ;.if (f <= 0.003
	0x31, 0x33, 0x30, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x20, // 1308).s = 12.92 
	0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, // * f;.else.s = 1.
	0x30, 0x35, 0x35, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x31, 0x2e, 0x30, // 055 * pow(f, 1.0
	0x2f, 0x32, 0x2e, 0x34, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x3b, 0x0a, 0x72, // /2.4) - 0.055;.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // eturn s;.}.float
	0x20, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, //  Rec709(const fl
	0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, // oat f).{.float s
	0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, // ;.if (f <= 0.018
	0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x34, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, // ).s = 4.5 * f;.e
	0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x20, 0x2a, 0x20, // lse.s = 1.099 * 
	0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x20, 0x2d, 0x20, 0x30, // pow(f, 0.45) - 0
	0x2e, 0x30, 0x39, 0x39, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, // .099;.return s;.
	0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, // }.float FBGamma(
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // const float colo
	0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x52, 0x47, 0x42, // r).{.return sRGB
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, // (color);.}.vec2 
	0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // FBGamma(const ve
	0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, // c2 color).{.retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, // rn vec2(FBGamma(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, // color.x),FBGamma
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // (color.y));.}.ve
	0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, // c3 FBGamma(const
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, //  vec3 color).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, // eturn vec3(FBGam
	0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, // ma(color.x),FBGa
	0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x46, 0x42, 0x47, // mma(color.y),FBG
	0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, // amma(color.z));.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x32, 0x32, // }.vec3 FBGamma22
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // (const vec3 colo
	0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, // r).{.return vec3
	0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x2c, 0x20, 0x31, 0x2e, // (pow(color.x, 1.
	0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // 0/2.2),pow(color
	0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, // .y, 1.0/2.2),pow
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, // (color.z, 1.0/2.
	0x32, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x54, // 2));.}.float FBT
	0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, // oneMap(const flo
	0x61, 0x74, 0x20, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6c, // at l).{.return l
	0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, //  * ((l*0.25 + 1.
	0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, // 0) / (l + 1.0));
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, // .}.vec2 FBToneMa
	0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, // p(const vec2 col
	0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, // or).{.const floa
	0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, // t l = dot(color,
	0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2b, 0x30, 0x2e, // vec2(0.176204+0.
	0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x2c, 0x30, 0x2e, 0x38, 0x31, // 0108109*0.5,0.81
	0x32, 0x39, 0x38, 0x35, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, // 2985+0.0108109*0
	0x2e, 0x35, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, // .5));.return col
	0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, // or * ((l*0.25 + 
	0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, // 1.0) / (l + 1.0)
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, // );.}.vec3 FBTone
	0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, // Map(const vec3 c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // olor).{.const fl
	0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // oat l = dot(colo
	0x72, 0x2c, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2c, // r,vec3(0.176204,
	0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2c, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, // 0.812985,0.01081
	0x30, 0x39, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, // 09));.return col
	0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, // or * ((l*0.25 + 
	0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, // 1.0) / (l + 1.0)
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, // );.}.vec4 Additi
	0x76, 0x65, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // ve(const vec4 cB
	0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // ase, const vec4 
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // cBlend, const fl
	0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, // oat percent).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2b, 0x20, 0x63, 0x42, // eturn cBase + cB
	0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, // lend*percent;.}.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6e, // vec3 Screen (con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, // st vec3 cBase, c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, // onst vec3 cBlend
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, // ).{.return 1.0 -
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, //  (1.0 - cBase) *
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, //  (1.0 - cBlend);
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, // .}.vec4 Screen (
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, // const vec4 cBase
	0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, // , const vec4 cBl
	0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, // end).{.return 1.
	0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, // 0 - (1.0 - cBase
	0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // ) * (1.0 - cBlen
	0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, // d);.}.vec3 Scree
	0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, // nHDR (const vec3
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, //  cBase, const ve
	0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // c3 cBlend).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, // urn max(1.0 - (1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, // .0 - cBase) * (1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, // .0 - cBlend), ve
	0x63, 0x33, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, // c3(0.,0.,0.));.}
	0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, // .vec4 ScreenHDR 
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, // (const vec4 cBas
	0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // e, const vec4 cB
	0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, // lend).{.return m
	0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, // ax(1.0 - (1.0 - 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, // cBase) * (1.0 - 
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, // cBlend), vec4(0.
	0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // ,0.,0.,0.));.}.v
	0x65, 0x63, 0x34, 0x20, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x20, 0x28, 0x63, 0x6f, // ec4 Multiply (co
	0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, // nst vec4 cBase, 
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // const vec4 cBlen
	0x64, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, // d, const float p
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // ercent).{.return
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2a, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, //  cBase * cBlend*
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, // percent;.}.vec4 
	0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, // Overlay (const v
	0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, // ec4 cBase, const
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, //  vec4 cBlend).{.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, // vec4 cNew = step
	0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, // (0.5, cBase);.cN
	0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, // ew = mix(cBase*c
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, // Blend*2.0, 1.0-2
	0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, // .0*(1.0-cBase)*(
	0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, // 1.0-cBlend), cNe
	0x77, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, // w);.return cNew;
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x48, // .}.vec4 OverlayH
	0x44, 0x52, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, // DR (const vec4 c
	0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, // Base, const vec4
	0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, //  cBlend).{.vec4 
	0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, // cNew = step(0.5,
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, //  cBase);.cNew = 
	0x6d, 0x61, 0x78, 0x28, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, // max(mix(cBase*cB
	0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, // lend*2.0, 1.0-2.
	0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, // 0*(1.0-cBase)*(1
	0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, // .0-cBlend), cNew
	0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, // ), vec4(0.,0.,0.
	0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, // ,0.));.return cN
	0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x73, 0x5f, 0x68, // ew;.}.vec3 cos_h
	0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // emisphere_sample
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x29, 0x0a, 0x7b, // (const vec2 t).{
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x68, 0x69, // .const float phi
	0x20, 0x3d, 0x20, 0x74, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x28, 0x32, 0x2e, 0x30, 0x2a, 0x33, 0x2e, //  = t.y * (2.0*3.
	0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, // 1415926535897932
	0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, // 384626433832795)
	0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, // ;.const float co
	0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, // sTheta = sqrt(1.
	0x30, 0x20, 0x2d, 0x20, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // 0 - t.x);.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, // float sinTheta =
	0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, //  sqrt(t.x);.floa
	0x74, 0x20, 0x73, 0x70, 0x2c, 0x63, 0x70, 0x3b, 0x0a, 0x73, 0x69, 0x6e, 0x63, 0x6f, 0x73, 0x28, // t sp,cp;.sincos(
	0x70, 0x68, 0x69, 0x2c, 0x73, 0x70, 0x2c, 0x63, 0x70, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // phi,sp,cp);.retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x63, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, // rn vec3(cp * sin
	0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, // Theta, cosTheta,
	0x20, 0x73, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x29, 0x3b, //  sp * sinTheta);
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, // .}.vec3 rotate_t
	0x6f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x28, 0x63, // o_vector_upper(c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x63, // onst vec3 vec, c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, // onst vec3 normal
	0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, // ).{.if(normal.y 
	0x3e, 0x20, 0x2d, 0x30, 0x2e, 0x39, 0x39, 0x39, 0x39, 0x39, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, // > -0.99999).{.co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x20, 0x3d, 0x20, 0x31, 0x2e, // nst float h = 1.
	0x30, 0x2f, 0x28, 0x31, 0x2e, 0x30, 0x2b, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x29, // 0/(1.0+normal.y)
	0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, // ;.const float hz
	0x20, 0x3d, 0x20, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x3b, 0x0a, 0x63, //  = h*normal.z;.c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x3d, // onst float hzx =
	0x20, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x3b, 0x0a, 0x72, 0x65, //  hz*normal.x;.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x78, // turn vec3(.vec.x
	0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x7a, 0x2a, //  * (normal.y+hz*
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x29, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, // normal.z) + vec.
	0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, // y * normal.x - v
	0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, // ec.z * hzx,.vec.
	0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x2d, 0x20, 0x76, // y * normal.y - v
	0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, // ec.x * normal.x 
	0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, // - vec.z * normal
	0x2e, 0x7a, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, // .z,.vec.y * norm
	0x61, 0x6c, 0x2e, 0x7a, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x68, // al.z - vec.x * h
	0x7a, 0x78, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, // zx + vec.z * (no
	0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, // rmal.y+h*normal.
	0x78, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // x*normal.x));.}.
	0x65, 0x6c, 0x73, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x2d, 0x76, 0x65, 0x63, // else return -vec
	0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, // ;.}.uniform vec4
	0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x53, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, //  Stereo_Saturati
	0x6f, 0x6e, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, // on;.uniform vec4
	0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, //  Stereo_MS_ZPD_Y
	0x41, 0x78, 0x69, 0x73, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, // Axis;.uniform sa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x20, 0x74, 0x65, 0x78, // mpler2DArray tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // _stereo_fb;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, 0x72, 0x72, // orm sampler2DArr
	0x61, 0x79, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, // ay tex_stereo_de
	0x70, 0x74, 0x68, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, // pth;.uniform vec
	0x34, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, 0x76, 0x65, // 4 w_h_height;.ve
	0x63, 0x33, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, // c3 gatherEyeColo
	0x72, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x69, // r(vec2 u, bool i
	0x73, 0x4c, 0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // sLeft).{.return 
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x6f, // texture2DArrayLo
	0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, // d(tex_stereo_fb,
	0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, 0x20, //  vec3(u.x, u.y, 
	0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x30, 0x20, 0x3a, 0x20, 0x31, // isLeft ? 0.0 : 1
	0x2e, 0x30, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x7d, 0x0a, // .0), 0.).rgb;.}.
	0x76, 0x6f, 0x69, 0x64, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x52, // void gatherLeftR
	0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, // ightColors(vec2 
	0x75, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x63, 0x6f, 0x6c, // u, out vec3 lcol
	0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x6f, 0x6c, 0x29, // , out vec3 rcol)
	0x0a, 0x7b, 0x0a, 0x6c, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // .{.lcol = textur
	0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, // e2DArrayLod(tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, // stereo_fb, vec3(
	0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2c, 0x20, 0x30, // u.x, u.y, 0.), 0
	0x2e, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x72, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, // .).xyz;.rcol = t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x6f, 0x64, // exture2DArrayLod
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, // (tex_stereo_fb, 
	0x76, 0x65, 0x63, 0x33, 0x28, 0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, 0x20, 0x31, // vec3(u.x, u.y, 1
	0x2e, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, // .), 0.).xyz;.}.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, // niform mat4 Ster
	0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // eo_LeftMat;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // orm mat4 Stereo_
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // RightMat;.unifor
	0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, // m vec4 Stereo_Le
	0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, // ftLuminance_Gamm
	0x61, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // a;.uniform vec4 
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, // Stereo_RightLumi
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x3b, 0x0a, // nance_DynDesat;.
	0x76, 0x6f, 0x69, 0x64, 0x20, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x65, 0x73, 0x61, // void DynamicDesa
	0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // tAnaglyph(const 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, // vec3 lCol, const
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, //  vec3 rCol, out 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // vec3 lDesatCol, 
	0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, // out vec3 rDesatC
	0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, // ol).{.const floa
	0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, // t left2LeftLum =
	0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, //  dot(lCol, Stere
	0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, // o_LeftLuminance_
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // Gamma.xyz);.cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, // t float left2Rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, // htLum = dot(lCol
	0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // , Stereo_RightLu
	0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, // minance_DynDesat
	0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, // .xyz);.const flo
	0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // at right2LeftLum
	0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, //  = dot(rCol, Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, // reo_LeftLuminanc
	0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, // e_Gamma.xyz);.co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, // nst float right2
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, // RightLum = dot(r
	0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, // Col, Stereo_Righ
	0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, // tLuminance_DynDe
	0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // sat.xyz);.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, // float leftLum = 
	0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x6c, // left2LeftLum + l
	0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, 0x0a, 0x63, 0x6f, // eft2RightLum;.co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, // nst float rightL
	0x75, 0x6d, 0x20, 0x3d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, // um = right2LeftL
	0x75, 0x6d, 0x20, 0x2b, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, // um + right2Right
	0x4c, 0x75, 0x6d, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // Lum;.const float
	0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, //  leftDesat = Ste
	0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, // reo_RightLuminan
	0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, // ce_DynDesat.w * 
	0x61, 0x62, 0x73, 0x28, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, // abs((left2LeftLu
	0x6d, 0x20, 0x2d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // m - left2RightLu
	0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, // m) / (leftLum + 
	0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // 0.0001));.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, // float rightDesat
	0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, //  = Stereo_RightL
	0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, // uminance_DynDesa
	0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, // t.w * abs((right
	0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, // 2LeftLum - right
	0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x72, 0x69, // 2RightLum) / (ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, // ghtLum + 0.0001)
	0x29, 0x3b, 0x0a, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, // );.lDesatCol = m
	0x69, 0x78, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, // ix(lCol, vec3_sp
	0x6c, 0x61, 0x74, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, 0x6c, 0x65, // lat(leftLum), le
	0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x72, 0x44, 0x65, 0x73, 0x61, 0x74, // ftDesat);.rDesat
	0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // Col = mix(rCol, 
	0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, // vec3_splat(right
	0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, // Lum), rightDesat
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, // );.}.vec3 Linear
	0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, // Anaglyph(const v
	0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // ec3 lCol, const 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, // vec3 rCol).{.con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, // st vec3 color = 
	0x28, 0x28, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, // (( (vec4(lCol, 1
	0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, // .)) * (Stereo_Le
	0x66, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x20, 0x28, 0x76, 0x65, // ftMat) ) + ( (ve
	0x63, 0x34, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, // c4(rCol, 1.)) * 
	0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, // (Stereo_RightMat
	0x29, 0x20, 0x29, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // ) )).rgb;.return
	0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, //  color;.}.unifor
	0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, // m vec4 Stereo_De
	0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // ghostGamma;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // orm mat4 Stereo_
	0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3b, 0x0a, 0x76, // DeghostFilter;.v
	0x65, 0x63, 0x33, 0x20, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, // ec3 DeghostAnagl
	0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, // yph(const vec3 l
	0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // Col, const vec3 
	0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // rCol).{.const ve
	0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, // c3 color = Linea
	0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // rAnaglyph(lCol, 
	0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, // rCol);.return ( 
	0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, // (pow(color, Ster
	0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, // eo_DeghostGamma.
	0x72, 0x67, 0x62, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x53, 0x74, // rgb)) * (mat3(St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, // ereo_DeghostFilt
	0x65, 0x72, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // er[0].xyz, Stere
	0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, // o_DeghostFilter[
	0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, // 1].xyz, Stereo_D
	0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x32, 0x5d, 0x2e, // eghostFilter[2].
	0x78, 0x79, 0x7a, 0x29, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, // xyz)) );.}.void 
	0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, // main().{.vec3 lC
	0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x3b, 0x0a, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, // ol, rCol;.gather
	0x4c, 0x65, 0x66, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x28, // LeftRightColors(
	0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2c, 0x20, 0x6c, 0x43, 0x6f, // v_texcoord0, lCo
	0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x6c, 0x43, 0x6f, 0x6c, 0x20, 0x3d, // l, rCol);.lCol =
	0x20, 0x70, 0x6f, 0x77, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, //  pow(lCol, vec3(
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, // Stereo_LeftLumin
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, 0x53, 0x74, // ance_Gamma.w, St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, // ereo_LeftLuminan
	0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, // ce_Gamma.w, Ster
	0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, // eo_LeftLuminance
	0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x43, 0x6f, 0x6c, // _Gamma.w));.rCol
	0x20, 0x3d, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, //  = pow(rCol, vec
	0x33, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // 3(Stereo_LeftLum
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, // inance_Gamma.w, 
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, // Stereo_LeftLumin
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, 0x53, 0x74, // ance_Gamma.w, St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, // ereo_LeftLuminan
	0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x29, 0x29, 0x3b, 0x0a, 0x76, 0x65, // ce_Gamma.w));.ve
	0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, // c3 color = Linea
	0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // rAnaglyph(lCol, 
	0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, // rCol);.bgfx_Frag
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x70, 0x6f, 0x77, // Color = vec4(pow
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x31, 0x2e, 0x2f, // (color, vec3(1./
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, // Stereo_LeftLumin
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, 0x31, 0x2e, // ance_Gamma.w, 1.
	0x2f, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, // /Stereo_LeftLumi
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, 0x31, // nance_Gamma.w, 1
	0x2e, 0x2f, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // ./Stereo_LeftLum
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x29, 0x29, // inance_Gamma.w))
	0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x00,                               // , 1.0);.}..
};
static const uint8_t fs_pp_stereo_anaglyph_lin_gamma_nodesat_st_glsl[9355] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x24, // FSH.Jc._......x$
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x34, 0x34, 0x30, 0x0a, 0x6f, // ..#version 440.o
	0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, // ut vec4 bgfx_Fra
	0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, // gColor;.#define 
	0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x62, 0x67, 0x66, // gl_FragColor bgf
	0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x0a, 0x23, 0x64, 0x65, 0x66, // x_FragColor.#def
	0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x20, 0x20, 0x20, // ine texture2D   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x0a, 0x23, //        texture.#
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, // define texture2D
	0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // Lod       textur
	0x65, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, // eLod.#define tex
	0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ture2DGrad      
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, // textureGrad.#def
	0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, // ine texture2DPro
	0x6a, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, // jLod   texturePr
	0x6f, 0x6a, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, // ojLod.#define te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, 0x20, // xture2DProjGrad 
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, //  textureProjGrad
	0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // .#define texture
	0x43, 0x75, 0x62, 0x65, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, // CubeLod     text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, // ureLod.#define t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, // extureCubeGrad  
	0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, //   textureGrad.#d
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x33, 0x44, 0x20, // efine texture3D 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, //          texture
	0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // .#define texture
	0x32, 0x44, 0x4c, 0x6f, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x20, 0x74, 0x65, 0x78, 0x74, // 2DLodOffset text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x0a, 0x23, 0x64, 0x65, // ureLodOffset.#de
	0x66, 0x69, 0x6e, 0x65, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x69, // fine attribute i
	0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, // n.#define varyin
	0x67, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x62, 0x67, 0x66, // g in.#define bgf
	0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, // xShadow2D(_sampl
	0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, // er, _coord)     
	0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, // vec4_splat(textu
	0x72, 0x65, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, // re(_sampler, _co
	0x6f, 0x72, 0x64, 0x29, 0x20, 0x29, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x62, // ord) ).#define b
	0x67, 0x66, 0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x28, // gfxShadow2DProj(
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, // _sampler, _coord
	0x29, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, // ) vec4_splat(tex
	0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // tureProj(_sample
	0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x29, 0x0a, 0x76, 0x61, 0x72, // r, _coord) ).var
	0x79, 0x69, 0x6e, 0x67, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x5f, 0x65, 0x79, 0x65, // ying float v_eye
	0x3b, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, // ;.varying vec2 v
	0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, // _texcoord0;.vec3
	0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, //  instMul(vec3 _v
	0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, // ec, mat3 _mtx) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, //  return ( (_vec)
	0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, //  * (_mtx) ); }.v
	0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, // ec3 instMul(mat3
	0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, //  _mtx, vec3 _vec
	0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, // ) { return ( (_m
	0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, // tx) * (_vec) ); 
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, // }.vec4 instMul(v
	0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, // ec4 _vec, mat4 _
	0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, // mtx) { return ( 
	0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, // (_vec) * (_mtx) 
	0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, // ); }.vec4 instMu
	0x6c, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, // l(mat4 _mtx, vec
	0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // 4 _vec) { return
	0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, //  ( (_mtx) * (_ve
	0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, // c) ); }.float rc
	0x70, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // p(float _a) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, // turn 1.0/_a; }.v
	0x65, 0x63, 0x32, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, // ec2 rcp(vec2 _a)
	0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, //  { return vec2(1
	0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, // .0)/_a; }.vec3 r
	0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // cp(vec3 _a) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, // turn vec3(1.0)/_
	0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, // a; }.vec4 rcp(ve
	0x63, 0x34, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // c4 _a) { return 
	0x76, 0x65, 0x63, 0x34, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, // vec4(1.0)/_a; }.
	0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, // vec2 vec2_splat(
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // float _x) { retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, // rn vec2(_x, _x);
	0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, //  }.vec3 vec3_spl
	0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, // at(float _x) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, // eturn vec3(_x, _
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, // x, _x); }.vec4 v
	0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // ec4_splat(float 
	0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, // _x) { return vec
	0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, // 4(_x, _x, _x, _x
	0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, // ); }.uvec2 uvec2
	0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, // _splat(uint _x) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, // { return uvec2(_
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, // x, _x); }.uvec3 
	0x75, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, // uvec3_splat(uint
	0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, //  _x) { return uv
	0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, // ec3(_x, _x, _x);
	0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, //  }.uvec4 uvec4_s
	0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, // plat(uint _x) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, // return uvec4(_x,
	0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, //  _x, _x, _x); }.
	0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, // mat4 mtxFromRows
	0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, // (vec4 _0, vec4 _
	0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // 1, vec4 _2, vec4
	0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, //  _3).{.return tr
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, // anspose(mat4(_0,
	0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, //  _1, _2, _3) );.
	0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, // }.mat4 mtxFromCo
	0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // ls(vec4 _0, vec4
	0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, //  _1, vec4 _2, ve
	0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // c4 _3).{.return 
	0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, // mat4(_0, _1, _2,
	0x20, 0x5f, 0x33, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, //  _3);.}.mat3 mtx
	0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, // FromRows(vec3 _0
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // , vec3 _1, vec3 
	0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, // _2).{.return tra
	0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, // nspose(mat3(_0, 
	0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, // _1, _2) );.}.mat
	0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, // 3 mtxFromCols(ve
	0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, // c3 _0, vec3 _1, 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // vec3 _2).{.retur
	0x6e, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, // n mat3(_0, _1, _
	0x32, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, // 2);.}.uniform ve
	0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, // c4 u_viewRect;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, // niform vec4 u_vi
	0x65, 0x77, 0x54, 0x65, 0x78, 0x65, 0x6c, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // ewTexel;.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, //  mat4 u_view;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, // iform mat4 u_inv
	0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, // View;.uniform ma
	0x74, 0x34, 0x20, 0x75, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, // t4 u_proj;.unifo
	0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, // rm mat4 u_invPro
	0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, // j;.uniform mat4 
	0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // u_viewProj;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, // orm mat4 u_invVi
	0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // ewProj;.uniform 
	0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, // mat4 u_model[32]
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, // ;.uniform mat4 u
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // _modelView;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, // orm mat4 u_model
	0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // ViewProj;.unifor
	0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, // m vec4 u_alphaRe
	0x66, 0x34, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, // f4;.float sqr(co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, // nst float v).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // eturn v*v;.}.vec
	0x32, 0x20, 0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, // 2 sqr(const vec2
	0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, //  v).{.return v*v
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, // ;.}.vec3 sqr(con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // st vec3 v).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // urn v*v;.}.vec3 
	0x6d, 0x75, 0x6c, 0x5f, 0x77, 0x31, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, // mul_w1(const vec
	0x33, 0x20, 0x76, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, // 3 v, const mat4 
	0x6d, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2e, 0x78, 0x2a, // m).{.return v.x*
	0x6d, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x79, 0x2a, // m[0].xyz + (v.y*
	0x6d, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x7a, 0x2a, // m[1].xyz + (v.z*
	0x6d, 0x5b, 0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x6d, 0x5b, 0x33, 0x5d, 0x2e, // m[2].xyz + m[3].
	0x78, 0x79, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, // xyz));.}.float a
	0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, // cos_approx_divPI
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, // (const float v).
	0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, // {.const float x 
	0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, // = abs(v);.if(1. 
	0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, // - x <= 0.0000610
	0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // 3515625).return 
	0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x20, 0x3a, // (v >= 0.) ? 0. :
	0x20, 0x31, 0x2e, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, //  1.;.const float
	0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, //  res = ((-0.1559
	0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, // 72/3.14159265358
	0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, // 9793238462643383
	0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, // 2795) * x + (1.5
	0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, // 6467/3.141592653
	0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, // 5897932384626433
	0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, // 832795) ) * sqrt
	0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // (1. - x);.return
	0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x72, 0x65, 0x73, //  (v >= 0.) ? res
	0x20, 0x3a, 0x20, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, //  : 1. - res;.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, // loat atan2_appro
	0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // x_div2PI(const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x79, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // loat y, const fl
	0x6f, 0x61, 0x74, 0x20, 0x78, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // oat x).{.const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, // loat abs_y = abs
	0x28, 0x79, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // (y);.const float
	0x20, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x78, 0x29, 0x3b, //  abs_x = abs(x);
	0x0a, 0x69, 0x66, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, // .if(abs_x <= 0.0
	0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x20, 0x26, 0x26, // 0006103515625 &&
	0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, //  abs_y <= 0.0000
	0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, // 6103515625).retu
	0x72, 0x6e, 0x20, 0x30, 0x2e, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, // rn 0.;.const flo
	0x61, 0x74, 0x20, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2d, 0x20, // at r = (abs_x - 
	0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, // abs_y) / (abs_x 
	0x2b, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // + abs_y);.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3d, 0x20, 0x28, 0x28, // float angle = ((
	0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x28, 0x33, 0x2e, 0x2f, 0x38, 0x2e, // x < 0.) ? (3./8.
	0x29, 0x20, 0x3a, 0x20, 0x28, 0x31, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x29, 0x0a, 0x2b, 0x20, 0x28, // ) : (1./8.)).+ (
	0x30, 0x2e, 0x32, 0x31, 0x31, 0x38, 0x36, 0x38, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, // 0.211868 /(2.*3.
	0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, // 1415926535897932
	0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, // 384626433832795)
	0x20, 0x2a, 0x20, 0x72, 0x20, 0x2a, 0x20, 0x72, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x39, 0x38, 0x37, //  * r * r - 0.987
	0x33, 0x30, 0x35, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, // 305 /(2.*3.14159
	0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, // 2653589793238462
	0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, // 6433832795)) * (
	0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x72, 0x20, 0x3a, 0x20, // (x < 0.) ? -r : 
	0x72, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x79, 0x20, 0x3c, 0x20, // r);.return (y < 
	0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3a, 0x20, 0x61, // 0.) ? -angle : a
	0x6e, 0x67, 0x6c, 0x65, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x73, // ngle;.}.float as
	0x69, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, // in_approx_divPI(
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, // const float v).{
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, // .const float x =
	0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, //  abs(v);.if(1. -
	0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, //  x <= 0.00006103
	0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // 515625).return (
	0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x3a, // v >= 0.) ? 0.5 :
	0x20, 0x2d, 0x30, 0x2e, 0x35, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, //  -0.5;.const flo
	0x61, 0x74, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, // at res = ((-0.15
	0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, // 5972/3.141592653
	0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, // 5897932384626433
	0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, // 832795) * x + (1
	0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, // .56467/3.1415926
	0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, // 5358979323846264
	0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, // 33832795) ) * sq
	0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // rt(1. - x);.retu
	0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, // rn (v >= 0.) ? 0
	0x2e, 0x35, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x20, // .5 - res : -0.5 
	0x2b, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x61, // + res;.}.vec2 ra
	0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, // y_to_equirectang
	0x75, 0x6c, 0x61, 0x72, 0x5f, 0x75, 0x76, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // ular_uv(const ve
	0x63, 0x33, 0x20, 0x72, 0x61, 0x79, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // c3 ray).{.return
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x0a, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x61, 0x74, 0x61, //  vec2(.0.5 + ata
	0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, // n2_approx_div2PI
	0x28, 0x72, 0x61, 0x79, 0x2e, 0x79, 0x2c, 0x20, 0x72, 0x61, 0x79, 0x2e, 0x78, 0x29, 0x2c, 0x0a, // (ray.y, ray.x),.
	0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, // acos_approx_divP
	0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // I(ray.z));.}.flo
	0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, // at InvsRGB(const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, //  float color).{.
	0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, // if (color <= 0.0
	0x34, 0x30, 0x34, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, // 4045).return col
	0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x29, // or * (1.0/12.92)
	0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, // ;.else.return po
	0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, // w(color * (1.0/1
	0x2e, 0x30, 0x35, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x2f, 0x31, // .055) + (0.055/1
	0x2e, 0x30, 0x35, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // .055), 2.4);.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x63, // loat InvRec709(c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // onst float color
	0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, // ).{.if (color <=
	0x20, 0x30, 0x2e, 0x30, 0x38, 0x31, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, //  0.081).return c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x34, 0x2e, 0x35, 0x29, // olor * (1.0/4.5)
	0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, // ;.else.return po
	0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, // w(color * (1.0/1
	0x2e, 0x30, 0x39, 0x39, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x2f, 0x31, // .099) + (0.099/1
	0x2e, 0x30, 0x39, 0x39, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x30, 0x2e, 0x34, 0x35, 0x29, // .099), 1.0/0.45)
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, // ;.}.float InvGam
	0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, // ma(const float c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x49, // olor).{.return I
	0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, // nvsRGB(color);.}
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, // .vec3 InvGamma(c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, // onst vec3 color)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x49, // .{.return vec3(I
	0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, // nvGamma(color.x)
	0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, // ,InvGamma(color.
	0x79, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // y),InvGamma(colo
	0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, // r.z));.}.vec3 In
	0x76, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, // vToneMap(const v
	0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, // ec3 color).{.con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, // st float inv_2bh
	0x20, 0x3d, 0x20, 0x30, 0x2e, 0x35, 0x2f, 0x30, 0x2e, 0x32, 0x35, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, //  = 0.5/0.25;.con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x34, 0x2e, // st float bh = 4.
	0x30, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2d, 0x20, 0x32, 0x2e, 0x30, 0x3b, 0x0a, 0x72, 0x65, // 0*0.25 - 2.0;.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2d, 0x20, 0x31, 0x2e, // turn (color - 1.
	0x30, 0x20, 0x2b, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2a, 0x28, // 0 + sqrt(color*(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x20, 0x62, 0x68, 0x29, 0x20, 0x2b, 0x20, 0x31, 0x2e, // color + bh) + 1.
	0x30, 0x29, 0x29, 0x2a, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // 0))*inv_2bh;.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // loat sRGB(const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // float f).{.float
	0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, //  s;.if (f <= 0.0
	0x30, 0x33, 0x31, 0x33, 0x30, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, // 031308).s = 12.9
	0x32, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, // 2 * f;.else.s = 
	0x31, 0x2e, 0x30, 0x35, 0x35, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x31, // 1.055 * pow(f, 1
	0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x34, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x3b, // .0/2.4) - 0.055;
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // .return s;.}.flo
	0x61, 0x74, 0x20, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // at Rec709(const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // float f).{.float
	0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, //  s;.if (f <= 0.0
	0x31, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x34, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x66, 0x3b, // 18).s = 4.5 * f;
	0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x20, // .else.s = 1.099 
	0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x20, 0x2d, // * pow(f, 0.45) -
	0x20, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, //  0.099;.return s
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, // ;.}.float FBGamm
	0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, // a(const float co
	0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x52, // lor).{.return sR
	0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // GB(color);.}.vec
	0x32, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // 2 FBGamma(const 
	0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // vec2 color).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, // turn vec2(FBGamm
	0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, // a(color.x),FBGam
	0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // ma(color.y));.}.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, // vec3 FBGamma(con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, // st vec3 color).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x46, 0x42, 0x47, // .return vec3(FBG
	0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, // amma(color.x),FB
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x46, // Gamma(color.y),F
	0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, // BGamma(color.z))
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, // ;.}.vec3 FBGamma
	0x32, 0x32, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, // 22(const vec3 co
	0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, // lor).{.return ve
	0x63, 0x33, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x2c, 0x20, // c3(pow(color.x, 
	0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, // 1.0/2.2),pow(col
	0x6f, 0x72, 0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, // or.y, 1.0/2.2),p
	0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, // ow(color.z, 1.0/
	0x32, 0x2e, 0x32, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, // 2.2));.}.float F
	0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // BToneMap(const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // loat l).{.return
	0x20, 0x6c, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, //  l * ((l*0.25 + 
	0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, // 1.0) / (l + 1.0)
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, // );.}.vec2 FBTone
	0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, // Map(const vec2 c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // olor).{.const fl
	0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // oat l = dot(colo
	0x72, 0x2c, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2b, // r,vec2(0.176204+
	0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x2c, 0x30, 0x2e, // 0.0108109*0.5,0.
	0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, // 812985+0.0108109
	0x2a, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, // *0.5));.return c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, // olor * ((l*0.25 
	0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, // + 1.0) / (l + 1.
	0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x54, 0x6f, // 0));.}.vec3 FBTo
	0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, // neMap(const vec3
	0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, //  color).{.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, // float l = dot(co
	0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, // lor,vec3(0.17620
	0x34, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2c, 0x30, 0x2e, 0x30, 0x31, 0x30, // 4,0.812985,0.010
	0x38, 0x31, 0x30, 0x39, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, // 8109));.return c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, // olor * ((l*0.25 
	0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, // + 1.0) / (l + 1.
	0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x41, 0x64, 0x64, 0x69, // 0));.}.vec4 Addi
	0x74, 0x69, 0x76, 0x65, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // tive(const vec4 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, // cBase, const vec
	0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // 4 cBlend, const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, // float percent).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2b, 0x20, // .return cBase + 
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, // cBlend*percent;.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x63, // }.vec3 Screen (c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, // onst vec3 cBase,
	0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, //  const vec3 cBle
	0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, // nd).{.return 1.0
	0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, //  - (1.0 - cBase)
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, //  * (1.0 - cBlend
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, // );.}.vec4 Screen
	0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, //  (const vec4 cBa
	0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, // se, const vec4 c
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // Blend).{.return 
	0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, // 1.0 - (1.0 - cBa
	0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, // se) * (1.0 - cBl
	0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, // end);.}.vec3 Scr
	0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // eenHDR (const ve
	0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // c3 cBase, const 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, // vec3 cBlend).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, // eturn max(1.0 - 
	0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, // (1.0 - cBase) * 
	0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, // (1.0 - cBlend), 
	0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, // vec3(0.,0.,0.));
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, // .}.vec4 ScreenHD
	0x52, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // R (const vec4 cB
	0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // ase, const vec4 
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // cBlend).{.return
	0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, //  max(1.0 - (1.0 
	0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, // - cBase) * (1.0 
	0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, // - cBlend), vec4(
	0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, // 0.,0.,0.,0.));.}
	0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x20, 0x28, // .vec4 Multiply (
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, // const vec4 cBase
	0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, // , const vec4 cBl
	0x65, 0x6e, 0x64, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // end, const float
	0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, //  percent).{.retu
	0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2a, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // rn cBase * cBlen
	0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // d*percent;.}.vec
	0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, // 4 Overlay (const
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, //  vec4 cBase, con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, // st vec4 cBlend).
	0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, // {.vec4 cNew = st
	0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, // ep(0.5, cBase);.
	0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, // cNew = mix(cBase
	0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, // *cBlend*2.0, 1.0
	0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, // -2.0*(1.0-cBase)
	0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, // *(1.0-cBlend), c
	0x4e, 0x65, 0x77, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, // New);.return cNe
	0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, // w;.}.vec4 Overla
	0x79, 0x48, 0x44, 0x52, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, // yHDR (const vec4
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, //  cBase, const ve
	0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, // c4 cBlend).{.vec
	0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, // 4 cNew = step(0.
	0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, // 5, cBase);.cNew 
	0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, // = max(mix(cBase*
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, // cBlend*2.0, 1.0-
	0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, // 2.0*(1.0-cBase)*
	0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, // (1.0-cBlend), cN
	0x65, 0x77, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, // ew), vec4(0.,0.,
	0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // 0.,0.));.return 
	0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x73, // cNew;.}.vec3 cos
	0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x5f, 0x73, 0x61, 0x6d, 0x70, // _hemisphere_samp
	0x6c, 0x65, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x29, // le(const vec2 t)
	0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, // .{.const float p
	0x68, 0x69, 0x20, 0x3d, 0x20, 0x74, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x28, 0x32, 0x2e, 0x30, 0x2a, // hi = t.y * (2.0*
	0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, // 3.14159265358979
	0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, // 3238462643383279
	0x35, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // 5);.const float 
	0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, // cosTheta = sqrt(
	0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // 1.0 - t.x);.cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, // t float sinTheta
	0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, //  = sqrt(t.x);.fl
	0x6f, 0x61, 0x74, 0x20, 0x73, 0x70, 0x2c, 0x63, 0x70, 0x3b, 0x0a, 0x73, 0x69, 0x6e, 0x63, 0x6f, // oat sp,cp;.sinco
	0x73, 0x28, 0x70, 0x68, 0x69, 0x2c, 0x73, 0x70, 0x2c, 0x63, 0x70, 0x29, 0x3b, 0x0a, 0x72, 0x65, // s(phi,sp,cp);.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x63, 0x70, 0x20, 0x2a, 0x20, 0x73, // turn vec3(cp * s
	0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, // inTheta, cosThet
	0x61, 0x2c, 0x20, 0x73, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, // a, sp * sinTheta
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, // );.}.vec3 rotate
	0x5f, 0x74, 0x6f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, // _to_vector_upper
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x2c, // (const vec3 vec,
	0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, //  const vec3 norm
	0x61, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, // al).{.if(normal.
	0x79, 0x20, 0x3e, 0x20, 0x2d, 0x30, 0x2e, 0x39, 0x39, 0x39, 0x39, 0x39, 0x29, 0x0a, 0x7b, 0x0a, // y > -0.99999).{.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x20, 0x3d, 0x20, // const float h = 
	0x31, 0x2e, 0x30, 0x2f, 0x28, 0x31, 0x2e, 0x30, 0x2b, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, // 1.0/(1.0+normal.
	0x79, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // y);.const float 
	0x68, 0x7a, 0x20, 0x3d, 0x20, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x3b, // hz = h*normal.z;
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x78, // .const float hzx
	0x20, 0x3d, 0x20, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x3b, 0x0a, //  = hz*normal.x;.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x0a, 0x76, 0x65, 0x63, // return vec3(.vec
	0x2e, 0x78, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, // .x * (normal.y+h
	0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x29, 0x20, 0x2b, 0x20, 0x76, 0x65, // z*normal.z) + ve
	0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, // c.y * normal.x -
	0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x2c, 0x0a, 0x76, 0x65, //  vec.z * hzx,.ve
	0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x2d, // c.y * normal.y -
	0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, //  vec.x * normal.
	0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, // x - vec.z * norm
	0x61, 0x6c, 0x2e, 0x7a, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, // al.z,.vec.y * no
	0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, // rmal.z - vec.x *
	0x20, 0x68, 0x7a, 0x78, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x28, //  hzx + vec.z * (
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, // normal.y+h*norma
	0x6c, 0x2e, 0x78, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, // l.x*normal.x));.
	0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x2d, 0x76, // }.else return -v
	0x65, 0x63, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, // ec;.}.uniform ve
	0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x53, 0x61, 0x74, 0x75, 0x72, 0x61, // c4 Stereo_Satura
	0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, // tion;.uniform ve
	0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, // c4 Stereo_MS_ZPD
	0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // _YAxis;.uniform 
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x20, 0x74, // sampler2DArray t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x3b, 0x0a, 0x75, 0x6e, // ex_stereo_fb;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, // iform sampler2DA
	0x72, 0x72, 0x61, 0x79, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // rray tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, // depth;.uniform v
	0x65, 0x63, 0x34, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, // ec4 w_h_height;.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, // vec3 gatherEyeCo
	0x6c, 0x6f, 0x72, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, // lor(vec2 u, bool
	0x20, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, //  isLeft).{.retur
	0x6e, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, // n texture2DArray
	0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, // Lod(tex_stereo_f
	0x62, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, // b, vec3(u.x, u.y
	0x2c, 0x20, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x30, 0x20, 0x3a, // , isLeft ? 0.0 :
	0x20, 0x31, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, //  1.0), 0.).rgb;.
	0x7d, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x66, // }.void gatherLef
	0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x28, 0x76, 0x65, 0x63, // tRightColors(vec
	0x32, 0x20, 0x75, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x63, // 2 u, out vec3 lc
	0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x6f, // ol, out vec3 rco
	0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x6c, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, // l).{.lcol = text
	0x75, 0x72, 0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, // ure2DArrayLod(te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x76, 0x65, 0x63, // x_stereo_fb, vec
	0x33, 0x28, 0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2c, // 3(u.x, u.y, 0.),
	0x20, 0x30, 0x2e, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x72, 0x63, 0x6f, 0x6c, 0x20, 0x3d, //  0.).xyz;.rcol =
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, //  texture2DArrayL
	0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, // od(tex_stereo_fb
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, // , vec3(u.x, u.y,
	0x20, 0x31, 0x2e, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, //  1.), 0.).xyz;.}
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, // .uniform mat4 St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, // ereo_LeftMat;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // iform mat4 Stere
	0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // o_RightMat;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // orm vec4 Stereo_
	0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, // LeftLuminance_Ga
	0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, // mma;.uniform vec
	0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // 4 Stereo_RightLu
	0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, // minance_DynDesat
	0x3b, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x65, // ;.void DynamicDe
	0x73, 0x61, 0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, // satAnaglyph(cons
	0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, // t vec3 lCol, con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, // st vec3 rCol, ou
	0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, // t vec3 lDesatCol
	0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x44, 0x65, 0x73, 0x61, // , out vec3 rDesa
	0x74, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // tCol).{.const fl
	0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // oat left2LeftLum
	0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, //  = dot(lCol, Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, // reo_LeftLuminanc
	0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, // e_Gamma.xyz);.co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, // nst float left2R
	0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, // ightLum = dot(lC
	0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, // ol, Stereo_Right
	0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, // Luminance_DynDes
	0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // at.xyz);.const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, // loat right2LeftL
	0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, // um = dot(rCol, S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, // tereo_LeftLumina
	0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, // nce_Gamma.xyz);.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, // const float righ
	0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, // t2RightLum = dot
	0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, // (rCol, Stereo_Ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, // ghtLuminance_Dyn
	0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // Desat.xyz);.cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, // t float leftLum 
	0x3d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, // = left2LeftLum +
	0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, 0x0a, //  left2RightLum;.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, // const float righ
	0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, // tLum = right2Lef
	0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, // tLum + right2Rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, // htLum;.const flo
	0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, // at leftDesat = S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, // tereo_RightLumin
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, // ance_DynDesat.w 
	0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, // * abs((left2Left
	0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, // Lum - left2Right
	0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, // Lum) / (leftLum 
	0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // + 0.0001));.cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x73, // t float rightDes
	0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, // at = Stereo_Righ
	0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, // tLuminance_DynDe
	0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x72, 0x69, 0x67, // sat.w * abs((rig
	0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x72, 0x69, 0x67, // ht2LeftLum - rig
	0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, // ht2RightLum) / (
	0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, // rightLum + 0.000
	0x31, 0x29, 0x29, 0x3b, 0x0a, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, 0x3d, // 1));.lDesatCol =
	0x20, 0x6d, 0x69, 0x78, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, //  mix(lCol, vec3_
	0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, // splat(leftLum), 
	0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x72, 0x44, 0x65, 0x73, // leftDesat);.rDes
	0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x72, 0x43, 0x6f, 0x6c, // atCol = mix(rCol
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x72, 0x69, 0x67, // , vec3_splat(rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x73, // htLum), rightDes
	0x61, 0x74, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x4c, 0x69, 0x6e, 0x65, // at);.}.vec3 Line
	0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, // arAnaglyph(const
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, //  vec3 lCol, cons
	0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, // t vec3 rCol).{.c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, // onst vec3 color 
	0x3d, 0x20, 0x28, 0x28, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, // = (( (vec4(lCol,
	0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, //  1.)) * (Stereo_
	0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x20, 0x28, // LeftMat) ) + ( (
	0x76, 0x65, 0x63, 0x34, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, // vec4(rCol, 1.)) 
	0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, // * (Stereo_RightM
	0x61, 0x74, 0x29, 0x20, 0x29, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // at) )).rgb;.retu
	0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, // rn color;.}.unif
	0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // orm vec4 Stereo_
	0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, 0x6e, // DeghostGamma;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // iform mat4 Stere
	0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3b, // o_DeghostFilter;
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x6e, 0x61, // .vec3 DeghostAna
	0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, // glyph(const vec3
	0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, //  lCol, const vec
	0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // 3 rCol).{.const 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, 0x6e, // vec3 color = Lin
	0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, // earAnaglyph(lCol
	0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // , rCol);.return 
	0x28, 0x20, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x53, 0x74, // ( (pow(color, St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, // ereo_DeghostGamm
	0x61, 0x2e, 0x72, 0x67, 0x62, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, // a.rgb)) * (mat3(
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, // Stereo_DeghostFi
	0x6c, 0x74, 0x65, 0x72, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, // lter[0].xyz, Ste
	0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, // reo_DeghostFilte
	0x72, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // r[1].xyz, Stereo
	0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x32, // _DeghostFilter[2
	0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, // ].xyz)) );.}.voi
	0x64, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // d main().{.vec3 
	0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x3b, 0x0a, 0x67, 0x61, 0x74, 0x68, // lCol, rCol;.gath
	0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, // erLeftRightColor
	0x73, 0x28, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2c, 0x20, 0x6c, // s(v_texcoord0, l
	0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x6c, 0x43, 0x6f, 0x6c, // Col, rCol);.lCol
	0x20, 0x3d, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, //  = pow(lCol, vec
	0x33, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // 3(Stereo_LeftLum
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, // inance_Gamma.w, 
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, // Stereo_LeftLumin
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, 0x53, 0x74, // ance_Gamma.w, St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, // ereo_LeftLuminan
	0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x43, // ce_Gamma.w));.rC
	0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, // ol = pow(rCol, v
	0x65, 0x63, 0x33, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, // ec3(Stereo_LeftL
	0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, // uminance_Gamma.w
	0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // , Stereo_LeftLum
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, // inance_Gamma.w, 
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, // Stereo_LeftLumin
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x29, 0x29, 0x3b, 0x0a, // ance_Gamma.w));.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, 0x6e, // vec3 color = Lin
	0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, // earAnaglyph(lCol
	0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, // , rCol);.gl_Frag
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x70, 0x6f, 0x77, // Color = vec4(pow
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x31, 0x2e, 0x2f, // (color, vec3(1./
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, // Stereo_LeftLumin
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, 0x31, 0x2e, // ance_Gamma.w, 1.
	0x2f, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, // /Stereo_LeftLumi
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, 0x31, // nance_Gamma.w, 1
	0x2e, 0x2f, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // ./Stereo_LeftLum
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x29, 0x29, // inance_Gamma.w))
	0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x00,                               // , 1.0);.}..
};
static const uint8_t fs_pp_stereo_anaglyph_lin_gamma_nodesat_st_dx11[1186] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x0e, 0x53, // FSH.Jc._.......S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x00, 0x00, // tereo_LeftMat...
	0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, // ........Stereo_R
	0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x00, 0x40, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, // ightMat..@......
	0x00, 0x1a, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // ..Stereo_LeftLum
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x12, 0x00, 0x80, 0x00, // inance_Gamma....
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // .......tex_stere
	0x6f, 0x5f, 0x66, 0x62, 0x30, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x74, // o_fb0..........t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x30, 0x01, 0x00, 0x00, // ex_stereo_fb0...
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x44, 0x58, 0x42, 0x43, 0xf7, 0xe8, // ..........DXBC..
	0x29, 0x7b, 0x64, 0x7c, 0xe8, 0x19, 0xe7, 0x0d, 0x13, 0xb7, 0x2a, 0xf6, 0x15, 0x02, 0x01, 0x00, // ){d|......*.....
	0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x9c, 0x00, // ..........,.....
	0x00, 0x00, 0xd0, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x4e, 0x68, 0x00, 0x00, 0x00, 0x03, 0x00, // ......ISGNh.....
	0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, // ......P.........
	0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x5c, 0x00, // ................
	0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, // ................
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x06, 0x00, 0x00, 0x53, 0x56, // ..............SV
	0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, // _POSITION.TEXCOO
	0x52, 0x44, 0x00, 0xab, 0xab, 0xab, 0x4f, 0x53, 0x47, 0x4e, 0x2c, 0x00, 0x00, 0x00, 0x01, 0x00, // RD....OSGN,.....
	0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ...... .........
	0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x53, 0x56, // ..............SV
	0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x00, 0xab, 0xab, 0x53, 0x48, 0x45, 0x58, 0x2c, 0x03, // _TARGET...SHEX,.
	0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0xcb, 0x00, 0x00, 0x00, 0x6a, 0x08, 0x00, 0x01, 0x59, 0x00, // ..P.......j...Y.
	0x00, 0x04, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x5a, 0x00, // ..F. .........Z.
	0x00, 0x03, 0x00, 0x60, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x58, 0x40, 0x00, 0x04, 0x00, 0x70, // ...`......X@...p
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x55, 0x00, 0x00, 0x62, 0x10, 0x00, 0x03, 0x62, 0x10, // ......UU..b...b.
	0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x03, 0xf2, 0x20, 0x10, 0x00, 0x00, 0x00, // ......e.... ....
	0x00, 0x00, 0x68, 0x00, 0x00, 0x02, 0x03, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x32, 0x00, // ..h.......6...2.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x96, 0x15, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x36, 0x00, // ..............6.
	0x00, 0x05, 0x42, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, // ..B........@....
	0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0x02, 0x02, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x72, 0x00, // ..H.......CU..r.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x7e, // ......F.......F~
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, // .......`.......@
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x05, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, // ....../...r.....
	0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x08, 0x72, 0x00, // ..F.......8...r.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf6, 0x8f, // ......F.........
	0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x05, 0x72, 0x00, //  .............r.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, // ......F.......6.
	0x00, 0x05, 0x82, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, // ...........@....
	0x80, 0x3f, 0x11, 0x00, 0x00, 0x08, 0x12, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x0e, // .?............F.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ......F. .......
	0x00, 0x00, 0x11, 0x00, 0x00, 0x08, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x0e, // ......".......F.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, // ......F. .......
	0x00, 0x00, 0x11, 0x00, 0x00, 0x08, 0x42, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x0e, // ......B.......F.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, // ......F. .......
	0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x32, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x96, 0x15, // ..6...2.........
	0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x42, 0x00, 0x10, 0x00, 0x00, 0x00, // ......6...B.....
	0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x48, 0x00, 0x00, 0x8d, 0x02, 0x02, // ...@.....?H.....
	0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, // ..CU..r.......F.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, // ......F~.......`
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2f, 0x00, // .......@....../.
	0x00, 0x05, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, // ..r.......F.....
	0x00, 0x00, 0x38, 0x00, 0x00, 0x08, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, // ..8...r.......F.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf6, 0x8f, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, // ........ .......
	0x00, 0x00, 0x19, 0x00, 0x00, 0x05, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, // ......r.......F.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x82, 0x00, 0x10, 0x00, 0x00, 0x00, // ......6.........
	0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x11, 0x00, 0x00, 0x08, 0x12, 0x00, // ...@.....?......
	0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x8e, // ......F.......F.
	0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x08, 0x22, 0x00, //  .............".
	0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x8e, // ......F.......F.
	0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x08, 0x42, 0x00, //  .............B.
	0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x8e, // ......F.......F.
	0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x72, 0x00, //  .............r.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x02, // ......F.......F.
	0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x05, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, // ....../...r.....
	0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x0b, 0x82, 0x00, // ..F.............
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, // .......@.....?..
	0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x3a, 0x80, 0x20, 0x00, 0x00, 0x00, // .?...?...?:. ...
	0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x07, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, // ......8...r.....
	0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf6, 0x0f, 0x10, 0x00, 0x00, 0x00, // ..F.............
	0x00, 0x00, 0x19, 0x00, 0x00, 0x05, 0x72, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, // ......r ......F.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x82, 0x20, 0x10, 0x00, 0x00, 0x00, // ......6.... ....
	0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x3e, 0x00, 0x00, 0x01, 0x00, 0x00, // ...@.....?>.....
	0x90, 0x00,                                                                                     // ..
};
static const uint8_t fs_pp_stereo_anaglyph_lin_gamma_nodesat_st_spv[2658] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x0e, 0x53, // FSH.Jc._.......S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x01, 0x00, // tereo_LeftMat...
	0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, // ........Stereo_R
	0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x01, 0x40, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, // ightMat..@......
	0x00, 0x1a, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // ..Stereo_LeftLum
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x12, 0x01, 0x80, 0x00, // inance_Gamma....
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // .......tex_stere
	0x6f, 0x5f, 0x66, 0x62, 0x30, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x03, 0x22, 0x00, 0xdc, 0x09, // o_fb0......."...
	0x00, 0x00, 0x03, 0x02, 0x23, 0x07, 0x00, 0x00, 0x01, 0x00, 0x0b, 0x00, 0x08, 0x00, 0x65, 0x01, // ....#.........e.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0b, 0x00, // ................
	0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, 0x4c, 0x53, 0x4c, 0x2e, 0x73, 0x74, 0x64, 0x2e, 0x34, // ......GLSL.std.4
	0x35, 0x30, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, // 50..............
	0x00, 0x00, 0x0f, 0x00, 0x07, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, // ..............ma
	0x69, 0x6e, 0x00, 0x00, 0x00, 0x00, 0xc7, 0x00, 0x00, 0x00, 0xd4, 0x00, 0x00, 0x00, 0x10, 0x00, // in..............
	0x03, 0x00, 0x04, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x03, 0x00, 0x03, 0x00, 0x05, 0x00, // ................
	0x00, 0x00, 0xf4, 0x01, 0x00, 0x00, 0x05, 0x00, 0x04, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, // ..............ma
	0x69, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x08, 0x00, 0x31, 0x00, 0x00, 0x00, 0x74, 0x65, // in........1...te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, // x_stereo_fbSampl
	0x65, 0x72, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x08, 0x00, 0x34, 0x00, 0x00, 0x00, 0x74, 0x65, // er........4...te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x54, 0x65, 0x78, 0x74, 0x75, // x_stereo_fbTextu
	0x72, 0x65, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x06, 0x00, 0x71, 0x00, 0x00, 0x00, 0x55, 0x6e, // re........q...Un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, // iformBlock......
	0x07, 0x00, 0x71, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // ..q.......Stereo
	0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x00, 0x00, 0x06, 0x00, 0x07, 0x00, 0x71, 0x00, // _LeftMat......q.
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, // ......Stereo_Rig
	0x68, 0x74, 0x4d, 0x61, 0x74, 0x00, 0x06, 0x00, 0x0a, 0x00, 0x71, 0x00, 0x00, 0x00, 0x02, 0x00, // htMat.....q.....
	0x00, 0x00, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // ..Stereo_LeftLum
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x00, 0x00, 0x05, 0x00, // inance_Gamma....
	0x03, 0x00, 0x73, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x05, 0x00, 0xc7, 0x00, // ..s.............
	0x00, 0x00, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x00, 0x05, 0x00, // ..v_texcoord0...
	0x06, 0x00, 0xd4, 0x00, 0x00, 0x00, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, // ......bgfx_FragD
	0x61, 0x74, 0x61, 0x30, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x31, 0x00, 0x00, 0x00, 0x22, 0x00, // ata0..G...1...".
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x31, 0x00, 0x00, 0x00, 0x21, 0x00, // ......G...1...!.
	0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x34, 0x00, 0x00, 0x00, 0x22, 0x00, // ......G...4...".
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x34, 0x00, 0x00, 0x00, 0x21, 0x00, // ......G...4...!.
	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x48, 0x00, 0x04, 0x00, 0x71, 0x00, 0x00, 0x00, 0x00, 0x00, // ......H...q.....
	0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0x71, 0x00, 0x00, 0x00, 0x00, 0x00, // ......H...q.....
	0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0x71, 0x00, // ..#.......H...q.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x48, 0x00, // ..............H.
	0x04, 0x00, 0x71, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x48, 0x00, // ..q...........H.
	0x05, 0x00, 0x71, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x40, 0x00, // ..q.......#...@.
	0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0x71, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x07, 0x00, // ..H...q.........
	0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0x71, 0x00, 0x00, 0x00, 0x02, 0x00, // ......H...q.....
	0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x47, 0x00, 0x03, 0x00, 0x71, 0x00, // ..#.......G...q.
	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x73, 0x00, 0x00, 0x00, 0x22, 0x00, // ......G...s...".
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x73, 0x00, 0x00, 0x00, 0x21, 0x00, // ......G...s...!.
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0xc7, 0x00, 0x00, 0x00, 0x1e, 0x00, // ......G.........
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0xd4, 0x00, 0x00, 0x00, 0x1e, 0x00, // ......G.........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x21, 0x00, // ..............!.
	0x03, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x02, 0x00, 0x06, 0x00, // ................
	0x00, 0x00, 0x16, 0x00, 0x03, 0x00, 0x07, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x19, 0x00, // .......... .....
	0x09, 0x00, 0x08, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x03, 0x00, // ................
	0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x04, 0x00, // ................
	0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x19, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x02, 0x00, // ................
	0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, // .. ...0.........
	0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x30, 0x00, 0x00, 0x00, 0x31, 0x00, 0x00, 0x00, 0x00, 0x00, // ..;...0...1.....
	0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, // .. ...3.........
	0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x33, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x00, 0x00, // ..;...3...4.....
	0x00, 0x00, 0x15, 0x00, 0x04, 0x00, 0x3d, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x01, 0x00, // ......=... .....
	0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x3d, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x01, 0x00, // ..+...=...>.....
	0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x3d, 0x00, 0x00, 0x00, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, // ..+...=...B.....
	0x00, 0x00, 0x1b, 0x00, 0x03, 0x00, 0x46, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x15, 0x00, // ......F.........
	0x04, 0x00, 0x54, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, // ..T... .......+.
	0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x5b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, // ......[.......+.
	0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x67, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x18, 0x00, // ......g......?..
	0x04, 0x00, 0x70, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x1e, 0x00, // ..p.............
	0x05, 0x00, 0x71, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x0e, 0x00, // ..q...p...p.....
	0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x72, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x71, 0x00, // .. ...r.......q.
	0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x72, 0x00, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00, 0x02, 0x00, // ..;...r...s.....
	0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x74, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x70, 0x00, // .. ...t.......p.
	0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x3d, 0x00, 0x00, 0x00, 0x95, 0x00, 0x00, 0x00, 0x02, 0x00, // ..+...=.........
	0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x54, 0x00, 0x00, 0x00, 0x96, 0x00, 0x00, 0x00, 0x03, 0x00, // ..+...T.........
	0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x97, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x07, 0x00, // .. .............
	0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0xc6, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x19, 0x00, // .. .............
	0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0xc6, 0x00, 0x00, 0x00, 0xc7, 0x00, 0x00, 0x00, 0x01, 0x00, // ..;.............
	0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0xd3, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0e, 0x00, // .. .............
	0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0xd3, 0x00, 0x00, 0x00, 0xd4, 0x00, 0x00, 0x00, 0x03, 0x00, // ..;.............
	0x00, 0x00, 0x36, 0x00, 0x05, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, // ..6.............
	0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x05, 0x00, 0x00, 0x00, 0x3d, 0x00, // ..............=.
	0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x31, 0x00, 0x00, 0x00, 0x3d, 0x00, // ......2...1...=.
	0x04, 0x00, 0x08, 0x00, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x00, 0x3d, 0x00, // ......5...4...=.
	0x04, 0x00, 0x19, 0x00, 0x00, 0x00, 0xc8, 0x00, 0x00, 0x00, 0xc7, 0x00, 0x00, 0x00, 0x51, 0x00, // ..............Q.
	0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x2f, 0x01, 0x00, 0x00, 0xc8, 0x00, 0x00, 0x00, 0x00, 0x00, // ....../.........
	0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x31, 0x01, 0x00, 0x00, 0xc8, 0x00, // ..Q.......1.....
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x50, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x32, 0x01, // ......P.......2.
	0x00, 0x00, 0x2f, 0x01, 0x00, 0x00, 0x31, 0x01, 0x00, 0x00, 0x5b, 0x00, 0x00, 0x00, 0x56, 0x00, // ../...1...[...V.
	0x05, 0x00, 0x46, 0x00, 0x00, 0x00, 0x44, 0x01, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x32, 0x00, // ..F...D...5...2.
	0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x47, 0x01, 0x00, 0x00, 0x44, 0x01, // ..X.......G...D.
	0x00, 0x00, 0x32, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x5b, 0x00, 0x00, 0x00, 0x4f, 0x00, // ..2.......[...O.
	0x08, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x35, 0x01, 0x00, 0x00, 0x47, 0x01, 0x00, 0x00, 0x47, 0x01, // ......5...G...G.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x51, 0x00, // ..............Q.
	0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x37, 0x01, 0x00, 0x00, 0xc8, 0x00, 0x00, 0x00, 0x00, 0x00, // ......7.........
	0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x39, 0x01, 0x00, 0x00, 0xc8, 0x00, // ..Q.......9.....
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x50, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x3a, 0x01, // ......P.......:.
	0x00, 0x00, 0x37, 0x01, 0x00, 0x00, 0x39, 0x01, 0x00, 0x00, 0x67, 0x00, 0x00, 0x00, 0x56, 0x00, // ..7...9...g...V.
	0x05, 0x00, 0x46, 0x00, 0x00, 0x00, 0x4e, 0x01, 0x00, 0x00, 0x35, 0x00, 0x00, 0x00, 0x32, 0x00, // ..F...N...5...2.
	0x00, 0x00, 0x58, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x51, 0x01, 0x00, 0x00, 0x4e, 0x01, // ..X.......Q...N.
	0x00, 0x00, 0x3a, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x5b, 0x00, 0x00, 0x00, 0x4f, 0x00, // ..:.......[...O.
	0x08, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x3d, 0x01, 0x00, 0x00, 0x51, 0x01, 0x00, 0x00, 0x51, 0x01, // ......=...Q...Q.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x41, 0x00, // ..............A.
	0x06, 0x00, 0x97, 0x00, 0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00, 0x95, 0x00, // ..........s.....
	0x00, 0x00, 0x96, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0xfd, 0x00, // ......=.........
	0x00, 0x00, 0xfc, 0x00, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x97, 0x00, 0x00, 0x00, 0xfe, 0x00, // ......A.........
	0x00, 0x00, 0x73, 0x00, 0x00, 0x00, 0x95, 0x00, 0x00, 0x00, 0x96, 0x00, 0x00, 0x00, 0x3d, 0x00, // ..s...........=.
	0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x41, 0x00, // ..............A.
	0x06, 0x00, 0x97, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00, 0x95, 0x00, // ..........s.....
	0x00, 0x00, 0x96, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x01, // ......=.........
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x50, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x02, 0x01, // ......P.........
	0x00, 0x00, 0xfd, 0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x0c, 0x00, // ................
	0x07, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x03, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, // ................
	0x00, 0x00, 0x35, 0x01, 0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x97, 0x00, // ..5.......A.....
	0x00, 0x00, 0x05, 0x01, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00, 0x95, 0x00, 0x00, 0x00, 0x96, 0x00, // ......s.........
	0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x06, 0x01, 0x00, 0x00, 0x05, 0x01, // ..=.............
	0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x97, 0x00, 0x00, 0x00, 0x07, 0x01, 0x00, 0x00, 0x73, 0x00, // ..A...........s.
	0x00, 0x00, 0x95, 0x00, 0x00, 0x00, 0x96, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, // ..........=.....
	0x00, 0x00, 0x08, 0x01, 0x00, 0x00, 0x07, 0x01, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x97, 0x00, // ..........A.....
	0x00, 0x00, 0x09, 0x01, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00, 0x95, 0x00, 0x00, 0x00, 0x96, 0x00, // ......s.........
	0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x0a, 0x01, 0x00, 0x00, 0x09, 0x01, // ..=.............
	0x00, 0x00, 0x50, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x0b, 0x01, 0x00, 0x00, 0x06, 0x01, // ..P.............
	0x00, 0x00, 0x08, 0x01, 0x00, 0x00, 0x0a, 0x01, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x0b, 0x00, // ................
	0x00, 0x00, 0x0c, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x3d, 0x01, // ..............=.
	0x00, 0x00, 0x0b, 0x01, 0x00, 0x00, 0x41, 0x00, 0x05, 0x00, 0x74, 0x00, 0x00, 0x00, 0x55, 0x01, // ......A...t...U.
	0x00, 0x00, 0x73, 0x00, 0x00, 0x00, 0x42, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x70, 0x00, // ..s...B...=...p.
	0x00, 0x00, 0x56, 0x01, 0x00, 0x00, 0x55, 0x01, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, // ..V...U...Q.....
	0x00, 0x00, 0x57, 0x01, 0x00, 0x00, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, // ..W...........Q.
	0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x58, 0x01, 0x00, 0x00, 0x03, 0x01, 0x00, 0x00, 0x01, 0x00, // ......X.........
	0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x59, 0x01, 0x00, 0x00, 0x03, 0x01, // ..Q.......Y.....
	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x50, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x5a, 0x01, // ......P.......Z.
	0x00, 0x00, 0x57, 0x01, 0x00, 0x00, 0x58, 0x01, 0x00, 0x00, 0x59, 0x01, 0x00, 0x00, 0x67, 0x00, // ..W...X...Y...g.
	0x00, 0x00, 0x91, 0x00, 0x05, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x5b, 0x01, 0x00, 0x00, 0x56, 0x01, // ..........[...V.
	0x00, 0x00, 0x5a, 0x01, 0x00, 0x00, 0x41, 0x00, 0x05, 0x00, 0x74, 0x00, 0x00, 0x00, 0x5c, 0x01, // ..Z...A...t.....
	0x00, 0x00, 0x73, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x70, 0x00, // ..s...>...=...p.
	0x00, 0x00, 0x5d, 0x01, 0x00, 0x00, 0x5c, 0x01, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, // ..].......Q.....
	0x00, 0x00, 0x5e, 0x01, 0x00, 0x00, 0x0c, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, // ..^...........Q.
	0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x5f, 0x01, 0x00, 0x00, 0x0c, 0x01, 0x00, 0x00, 0x01, 0x00, // ......_.........
	0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x60, 0x01, 0x00, 0x00, 0x0c, 0x01, // ..Q.......`.....
	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x50, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x61, 0x01, // ......P.......a.
	0x00, 0x00, 0x5e, 0x01, 0x00, 0x00, 0x5f, 0x01, 0x00, 0x00, 0x60, 0x01, 0x00, 0x00, 0x67, 0x00, // ..^..._...`...g.
	0x00, 0x00, 0x91, 0x00, 0x05, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x62, 0x01, 0x00, 0x00, 0x5d, 0x01, // ..........b...].
	0x00, 0x00, 0x61, 0x01, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x63, 0x01, // ..a...........c.
	0x00, 0x00, 0x5b, 0x01, 0x00, 0x00, 0x62, 0x01, 0x00, 0x00, 0x4f, 0x00, 0x08, 0x00, 0x0b, 0x00, // ..[...b...O.....
	0x00, 0x00, 0x64, 0x01, 0x00, 0x00, 0x63, 0x01, 0x00, 0x00, 0x63, 0x01, 0x00, 0x00, 0x00, 0x00, // ..d...c...c.....
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x97, 0x00, // ..........A.....
	0x00, 0x00, 0x11, 0x01, 0x00, 0x00, 0x73, 0x00, 0x00, 0x00, 0x95, 0x00, 0x00, 0x00, 0x96, 0x00, // ......s.........
	0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x12, 0x01, 0x00, 0x00, 0x11, 0x01, // ..=.............
	0x00, 0x00, 0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x13, 0x01, 0x00, 0x00, 0x67, 0x00, // ..............g.
	0x00, 0x00, 0x12, 0x01, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x97, 0x00, 0x00, 0x00, 0x14, 0x01, // ......A.........
	0x00, 0x00, 0x73, 0x00, 0x00, 0x00, 0x95, 0x00, 0x00, 0x00, 0x96, 0x00, 0x00, 0x00, 0x3d, 0x00, // ..s...........=.
	0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x15, 0x01, 0x00, 0x00, 0x14, 0x01, 0x00, 0x00, 0x88, 0x00, // ................
	0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x16, 0x01, 0x00, 0x00, 0x67, 0x00, 0x00, 0x00, 0x15, 0x01, // ..........g.....
	0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x97, 0x00, 0x00, 0x00, 0x17, 0x01, 0x00, 0x00, 0x73, 0x00, // ..A...........s.
	0x00, 0x00, 0x95, 0x00, 0x00, 0x00, 0x96, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, // ..........=.....
	0x00, 0x00, 0x18, 0x01, 0x00, 0x00, 0x17, 0x01, 0x00, 0x00, 0x88, 0x00, 0x05, 0x00, 0x07, 0x00, // ................
	0x00, 0x00, 0x19, 0x01, 0x00, 0x00, 0x67, 0x00, 0x00, 0x00, 0x18, 0x01, 0x00, 0x00, 0x50, 0x00, // ......g.......P.
	0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x1a, 0x01, 0x00, 0x00, 0x13, 0x01, 0x00, 0x00, 0x16, 0x01, // ................
	0x00, 0x00, 0x19, 0x01, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x1b, 0x01, // ................
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x64, 0x01, 0x00, 0x00, 0x1a, 0x01, // ..........d.....
	0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x1c, 0x01, 0x00, 0x00, 0x1b, 0x01, // ..Q.............
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x1d, 0x01, // ......Q.........
	0x00, 0x00, 0x1b, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, // ..........Q.....
	0x00, 0x00, 0x1e, 0x01, 0x00, 0x00, 0x1b, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x50, 0x00, // ..............P.
	0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x1f, 0x01, 0x00, 0x00, 0x1c, 0x01, 0x00, 0x00, 0x1d, 0x01, // ................
	0x00, 0x00, 0x1e, 0x01, 0x00, 0x00, 0x67, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x03, 0x00, 0xd4, 0x00, // ......g...>.....
	0x00, 0x00, 0x1f, 0x01, 0x00, 0x00, 0xfd, 0x00, 0x01, 0x00, 0x38, 0x00, 0x01, 0x00, 0x00, 0x00, // ..........8.....
	0x90, 0x00,                                                                                     // ..
};
static const bgfx::EmbeddedShader fs_pp_stereo_anaglyph_lin_gamma_nodesat_st = BGFX_EMBEDDED_SHADER(fs_pp_stereo_anaglyph_lin_gamma_nodesat_st);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Build of fragment shader from fs_pp_stereo.sc to fs_pp_stereo_anaglyph_lin_gamma_dyndesat_st with options: ANAGLYPH DYNDESAT GAMMA STEREO
static const uint8_t fs_pp_stereo_anaglyph_lin_gamma_dyndesat_st_mtl[2383] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x14, 0x74, // FSH.Jc._.......t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, // ex_stereo_fbSamp
	0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x74, 0x65, // ler...........te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x54, 0x65, 0x78, 0x74, 0x75, // x_stereo_fbTextu
	0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x74, 0x65, 0x78, // re...........tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x53, 0x61, 0x6d, // _stereo_depthSam
	0x70, 0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x74, // pler...........t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, 0x70, 0x74, 0x68, 0x54, // ex_stereo_depthT
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, // exture..........
	0x1a, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, // .Stereo_LeftLumi
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x12, 0x01, 0x80, 0x00, 0x01, // nance_Gamma.....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, // ......Stereo_Rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, // htLuminance_DynD
	0x65, 0x73, 0x61, 0x74, 0x12, 0x01, 0x90, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x53, // esat...........S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x01, 0x00, // tereo_LeftMat...
	0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, // ........Stereo_R
	0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x01, 0x40, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, // ightMat..@......
	0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x10, // ..tex_stereo_fb.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x08, 0x00, 0x00, 0x23, 0x69, 0x6e, // .............#in
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x64, // clude <metal_std
	0x6c, 0x69, 0x62, 0x3e, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x73, // lib>.#include <s
	0x69, 0x6d, 0x64, 0x2f, 0x73, 0x69, 0x6d, 0x64, 0x2e, 0x68, 0x3e, 0x0a, 0x0a, 0x75, 0x73, 0x69, // imd/simd.h>..usi
	0x6e, 0x67, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x6d, 0x65, 0x74, // ng namespace met
	0x61, 0x6c, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x5f, 0x47, 0x6c, 0x6f, // al;..struct _Glo
	0x62, 0x61, 0x6c, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, // bal.{.    float4
	0x78, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, // x4 Stereo_LeftMa
	0x74, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x78, 0x34, 0x20, // t;.    float4x4 
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x3b, // Stereo_RightMat;
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, // .    float4 Ster
	0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, // eo_LeftLuminance
	0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, // _Gamma;.    floa
	0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, // t4 Stereo_RightL
	0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, // uminance_DynDesa
	0x74, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x78, 0x6c, // t;.};..struct xl
	0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x0a, 0x7b, 0x0a, // atMtlMain_out.{.
	0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, //     float4 bgfx_
	0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x20, 0x5b, 0x5b, 0x63, 0x6f, 0x6c, 0x6f, // FragData0 [[colo
	0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, // r(0)]];.};..stru
	0x63, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x69, // ct xlatMtlMain_i
	0x6e, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x76, // n.{.    float2 v
	0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x5b, 0x5b, 0x75, 0x73, 0x65, // _texcoord0 [[use
	0x72, 0x28, 0x6c, 0x6f, 0x63, 0x6e, 0x31, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, // r(locn1)]];.};..
	0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, // fragment xlatMtl
	0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, // Main_out xlatMtl
	0x4d, 0x61, 0x69, 0x6e, 0x28, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, // Main(xlatMtlMain
	0x5f, 0x69, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x5b, 0x5b, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, // _in in [[stage_i
	0x6e, 0x5d, 0x5d, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x20, 0x5f, 0x47, // n]], constant _G
	0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x26, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x20, 0x5b, 0x5b, // lobal& _mtl_u [[
	0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x74, 0x65, 0x78, // buffer(0)]], tex
	0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x3c, 0x66, 0x6c, 0x6f, // ture2d_array<flo
	0x61, 0x74, 0x3e, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, // at> tex_stereo_f
	0x62, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x30, 0x29, 0x5d, 0x5d, // b [[texture(0)]]
	0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, // , sampler tex_st
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x5b, // ereo_fbSampler [
	0x5b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x29, 0x0a, 0x7b, // [sampler(0)]]).{
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, // .    xlatMtlMain
	0x5f, 0x6f, 0x75, 0x74, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x3d, 0x20, 0x7b, 0x7d, 0x3b, 0x0a, 0x20, // _out out = {};. 
	0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x34, 0x32, 0x37, 0x20, 0x3d, //    float3 _427 =
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, //  float3(in.v_tex
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, // coord0, 0.0);.  
	0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x34, 0x33, 0x35, 0x20, 0x3d, 0x20, //   float3 _435 = 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, // float3(in.v_texc
	0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, // oord0, 1.0);.   
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x33, 0x37, 0x33, 0x20, 0x3d, 0x20, 0x70, //  float3 _373 = p
	0x6f, 0x77, 0x72, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, // owr(tex_stereo_f
	0x62, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, // b.sample(tex_ste
	0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, // reo_fbSampler, _
	0x34, 0x32, 0x37, 0x2e, 0x78, 0x79, 0x2c, 0x20, 0x75, 0x69, 0x6e, 0x74, 0x28, 0x72, 0x69, 0x6e, // 427.xy, uint(rin
	0x74, 0x28, 0x5f, 0x34, 0x32, 0x37, 0x2e, 0x7a, 0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, // t(_427.z)), leve
	0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x66, 0x6c, 0x6f, // l(0.0)).xyz, flo
	0x61, 0x74, 0x33, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, // at3(_mtl_u.Stere
	0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, // o_LeftLuminance_
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, // Gamma.w, _mtl_u.
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, // Stereo_LeftLumin
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, 0x5f, 0x6d, // ance_Gamma.w, _m
	0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, // tl_u.Stereo_Left
	0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, // Luminance_Gamma.
	0x77, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, // w));.    float3 
	0x5f, 0x33, 0x38, 0x32, 0x20, 0x3d, 0x20, 0x70, 0x6f, 0x77, 0x72, 0x28, 0x74, 0x65, 0x78, 0x5f, // _382 = powr(tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // stereo_fb.sample
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, // (tex_stereo_fbSa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x34, 0x33, 0x35, 0x2e, 0x78, 0x79, 0x2c, 0x20, // mpler, _435.xy, 
	0x75, 0x69, 0x6e, 0x74, 0x28, 0x72, 0x69, 0x6e, 0x74, 0x28, 0x5f, 0x34, 0x33, 0x35, 0x2e, 0x7a, // uint(rint(_435.z
	0x29, 0x29, 0x2c, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x2e, // )), level(0.0)).
	0x78, 0x79, 0x7a, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x6d, 0x74, 0x6c, // xyz, float3(_mtl
	0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, // _u.Stereo_LeftLu
	0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, // minance_Gamma.w,
	0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, //  _mtl_u.Stereo_L
	0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, // eftLuminance_Gam
	0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, // ma.w, _mtl_u.Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, // reo_LeftLuminanc
	0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, // e_Gamma.w));.   
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x34, 0x37, 0x39, 0x20, 0x3d, 0x20, 0x64, 0x6f, //  float _479 = do
	0x74, 0x28, 0x5f, 0x33, 0x37, 0x33, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, // t(_373, _mtl_u.S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, // tereo_LeftLumina
	0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, // nce_Gamma.xyz);.
	0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x34, 0x38, 0x33, 0x20, 0x3d, //     float _483 =
	0x20, 0x64, 0x6f, 0x74, 0x28, 0x5f, 0x33, 0x37, 0x33, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, //  dot(_373, _mtl_
	0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // u.Stereo_RightLu
	0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, // minance_DynDesat
	0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // .xyz);.    float
	0x20, 0x5f, 0x34, 0x38, 0x37, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x5f, 0x33, 0x38, 0x32, //  _487 = dot(_382
	0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // , _mtl_u.Stereo_
	0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, // LeftLuminance_Ga
	0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, // mma.xyz);.    fl
	0x6f, 0x61, 0x74, 0x20, 0x5f, 0x34, 0x39, 0x31, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x5f, // oat _491 = dot(_
	0x33, 0x38, 0x32, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, // 382, _mtl_u.Ster
	0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, // eo_RightLuminanc
	0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, // e_DynDesat.xyz);
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x34, 0x39, 0x34, 0x20, // .    float _494 
	0x3d, 0x20, 0x5f, 0x34, 0x37, 0x39, 0x20, 0x2b, 0x20, 0x5f, 0x34, 0x38, 0x33, 0x3b, 0x0a, 0x20, // = _479 + _483;. 
	0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x34, 0x39, 0x37, 0x20, 0x3d, 0x20, //    float _497 = 
	0x5f, 0x34, 0x38, 0x37, 0x20, 0x2b, 0x20, 0x5f, 0x34, 0x39, 0x31, 0x3b, 0x0a, 0x20, 0x20, 0x20, // _487 + _491;.   
	0x20, 0x6f, 0x75, 0x74, 0x2e, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, 0x61, //  out.bgfx_FragDa
	0x74, 0x61, 0x30, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x70, 0x6f, 0x77, // ta0 = float4(pow
	0x72, 0x28, 0x28, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x6d, 0x69, 0x78, 0x28, 0x5f, // r(((float4(mix(_
	0x33, 0x37, 0x33, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x34, 0x39, 0x34, // 373, float3(_494
	0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, // ), float3(_mtl_u
	0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, // .Stereo_RightLum
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, // inance_DynDesat.
	0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x5f, 0x34, 0x37, 0x39, 0x20, 0x2d, 0x20, // w * abs((_479 - 
	0x5f, 0x34, 0x38, 0x33, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x5f, 0x34, 0x39, 0x34, 0x20, 0x2b, 0x20, // _483) / (_494 + 
	0x39, 0x2e, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x37, 0x34, 0x37, 0x33, 0x37, 0x38, 0x37, 0x35, // 9.99999974737875
	0x31, 0x36, 0x33, 0x35, 0x35, 0x35, 0x31, 0x34, 0x35, 0x32, 0x36, 0x33, 0x36, 0x37, 0x31, 0x38, // 1635551452636718
	0x38, 0x65, 0x2d, 0x30, 0x35, 0x29, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, // 8e-05)))), 1.0) 
	0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // * _mtl_u.Stereo_
	0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x66, 0x6c, 0x6f, 0x61, // LeftMat) + (floa
	0x74, 0x34, 0x28, 0x6d, 0x69, 0x78, 0x28, 0x5f, 0x33, 0x38, 0x32, 0x2c, 0x20, 0x66, 0x6c, 0x6f, // t4(mix(_382, flo
	0x61, 0x74, 0x33, 0x28, 0x5f, 0x34, 0x39, 0x37, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // at3(_497), float
	0x33, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // 3(_mtl_u.Stereo_
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, // RightLuminance_D
	0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, // ynDesat.w * abs(
	0x28, 0x5f, 0x34, 0x38, 0x37, 0x20, 0x2d, 0x20, 0x5f, 0x34, 0x39, 0x31, 0x29, 0x20, 0x2f, 0x20, // (_487 - _491) / 
	0x28, 0x5f, 0x34, 0x39, 0x37, 0x20, 0x2b, 0x20, 0x39, 0x2e, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, // (_497 + 9.999999
	0x37, 0x34, 0x37, 0x33, 0x37, 0x38, 0x37, 0x35, 0x31, 0x36, 0x33, 0x35, 0x35, 0x35, 0x31, 0x34, // 7473787516355514
	0x35, 0x32, 0x36, 0x33, 0x36, 0x37, 0x31, 0x38, 0x38, 0x65, 0x2d, 0x30, 0x35, 0x29, 0x29, 0x29, // 526367188e-05)))
	0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, // ), 1.0) * _mtl_u
	0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, // .Stereo_RightMat
	0x29, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x28, 0x31, // )).xyz, float3(1
	0x2e, 0x30, 0x20, 0x2f, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, // .0 / _mtl_u.Ster
	0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, // eo_LeftLuminance
	0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, // _Gamma.w, 1.0 / 
	0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, // _mtl_u.Stereo_Le
	0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, // ftLuminance_Gamm
	0x61, 0x2e, 0x77, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, // a.w, 1.0 / _mtl_
	0x75, 0x2e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // u.Stereo_LeftLum
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x29, 0x29, // inance_Gamma.w))
	0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, // , 1.0);.    retu
	0x72, 0x6e, 0x20, 0x6f, 0x75, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x0a, 0x00, 0x00, 0xe0, 0x00,       // rn out;.}......
};
static const uint8_t fs_pp_stereo_anaglyph_lin_gamma_dyndesat_st_essl[9490] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0x24, // FSH.Jc._.......$
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x33, 0x32, 0x30, 0x20, 0x65, // ..#version 320 e
	0x73, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, // s.#define attrib
	0x75, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x76, // ute in.#define v
	0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, // arying in.precis
	0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3b, // ion highp float;
	0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, // .precision highp
	0x20, 0x69, 0x6e, 0x74, 0x3b, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, //  int;.precision 
	0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, // highp sampler2DA
	0x72, 0x72, 0x61, 0x79, 0x3b, 0x0a, 0x23, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, // rray;.#extension
	0x20, 0x47, 0x4c, 0x5f, 0x45, 0x58, 0x54, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x74, //  GL_EXT_shader_t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x6c, 0x6f, 0x64, 0x20, 0x3a, 0x20, 0x65, 0x6e, 0x61, // exture_lod : ena
	0x62, 0x6c, 0x65, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, // ble.#define text
	0x75, 0x72, 0x65, 0x32, 0x44, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, // ure2DLod      te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x4c, 0x6f, 0x64, 0x45, 0x58, 0x54, 0x0a, 0x23, 0x64, // xture2DLodEXT.#d
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x47, // efine texture2DG
	0x72, 0x61, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, // rad     texture2
	0x44, 0x47, 0x72, 0x61, 0x64, 0x45, 0x58, 0x54, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, // DGradEXT.#define
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x4c, 0x6f, //  texture2DProjLo
	0x64, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, // d  texture2DProj
	0x4c, 0x6f, 0x64, 0x45, 0x58, 0x54, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, // LodEXT.#define t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, // exture2DProjGrad
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, //  texture2DProjGr
	0x61, 0x64, 0x45, 0x58, 0x54, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, // adEXT.#define te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, // xtureCubeLod    
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x4c, 0x6f, 0x64, 0x45, 0x58, // textureCubeLodEX
	0x54, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // T.#define textur
	0x65, 0x43, 0x75, 0x62, 0x65, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, // eCubeGrad   text
	0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x47, 0x72, 0x61, 0x64, 0x45, 0x58, 0x54, 0x0a, 0x23, // ureCubeGradEXT.#
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x28, // define shadow2D(
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, // _sampler, _coord
	0x29, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, // ) texture(_sampl
	0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x0a, 0x23, 0x64, 0x65, 0x66, // er, _coord).#def
	0x69, 0x6e, 0x65, 0x20, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, // ine shadow2DProj
	0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, // (_sampler, _coor
	0x64, 0x29, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, // d) textureProj(_
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, // sampler, _coord)
	0x0a, 0x23, 0x65, 0x78, 0x74, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x47, 0x4c, 0x5f, 0x45, // .#extension GL_E
	0x58, 0x54, 0x5f, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, // XT_texture_array
	0x20, 0x3a, 0x20, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x0a, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x65, //  : enable.out me
	0x64, 0x69, 0x75, 0x6d, 0x70, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, // diump vec4 bgfx_
	0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, // FragColor;.varyi
	0x6e, 0x67, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x5f, 0x65, 0x79, 0x65, 0x3b, 0x0a, // ng float v_eye;.
	0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x5f, 0x74, // varying vec2 v_t
	0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, // excoord0;.vec3 i
	0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, // nstMul(vec3 _vec
	0x2c, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, // , mat3 _mtx) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, // eturn ( (_vec) *
	0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, //  (_mtx) ); }.vec
	0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, // 3 instMul(mat3 _
	0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, // mtx, vec3 _vec) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, // { return ( (_mtx
	0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, // ) * (_vec) ); }.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, // vec4 instMul(vec
	0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, // 4 _vec, mat4 _mt
	0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, // x) { return ( (_
	0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, // vec) * (_mtx) );
	0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, //  }.vec4 instMul(
	0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // mat4 _mtx, vec4 
	0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // _vec) { return (
	0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, //  (_mtx) * (_vec)
	0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, 0x70, 0x28, //  ); }.float rcp(
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // float _a) { retu
	0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, // rn 1.0/_a; }.vec
	0x32, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, // 2 rcp(vec2 _a) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, //  return vec2(1.0
	0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x70, // )/_a; }.vec3 rcp
	0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // (vec3 _a) { retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, // rn vec3(1.0)/_a;
	0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x34, //  }.vec4 rcp(vec4
	0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, //  _a) { return ve
	0x63, 0x34, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, // c4(1.0)/_a; }.ve
	0x63, 0x32, 0x20, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, // c2 vec2_splat(fl
	0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // oat _x) { return
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, //  vec2(_x, _x); }
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, // .vec3 vec3_splat
	0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // (float _x) { ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, // urn vec3(_x, _x,
	0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, 0x65, 0x63, //  _x); }.vec4 vec
	0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, // 4_splat(float _x
	0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, // ) { return vec4(
	0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, // _x, _x, _x, _x);
	0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, //  }.uvec2 uvec2_s
	0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, // plat(uint _x) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, // return uvec2(_x,
	0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, 0x75, 0x76, //  _x); }.uvec3 uv
	0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, // ec3_splat(uint _
	0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, // x) { return uvec
	0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, // 3(_x, _x, _x); }
	0x0a, 0x75, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, // .uvec4 uvec4_spl
	0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // at(uint _x) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, // turn uvec4(_x, _
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x6d, 0x61, // x, _x, _x); }.ma
	0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, // t4 mtxFromRows(v
	0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, // ec4 _0, vec4 _1,
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, //  vec4 _2, vec4 _
	0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, // 3).{.return tran
	0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, // spose(mat4(_0, _
	0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // 1, _2, _3) );.}.
	0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, // mat4 mtxFromCols
	0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, // (vec4 _0, vec4 _
	0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // 1, vec4 _2, vec4
	0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, //  _3).{.return ma
	0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, // t4(_0, _1, _2, _
	0x33, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, // 3);.}.mat3 mtxFr
	0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, // omRows(vec3 _0, 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, // vec3 _1, vec3 _2
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, // ).{.return trans
	0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, // pose(mat3(_0, _1
	0x2c, 0x20, 0x5f, 0x32, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, // , _2) );.}.mat3 
	0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, // mtxFromCols(vec3
	0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, //  _0, vec3 _1, ve
	0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // c3 _2).{.return 
	0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, // mat3(_0, _1, _2)
	0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, // ;.}.uniform vec4
	0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, //  u_viewRect;.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, // form vec4 u_view
	0x54, 0x65, 0x78, 0x65, 0x6c, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, // Texel;.uniform m
	0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // at4 u_view;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, // orm mat4 u_invVi
	0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, // ew;.uniform mat4
	0x20, 0x75, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, //  u_proj;.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, 0x6a, 0x3b, //  mat4 u_invProj;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, // .uniform mat4 u_
	0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // viewProj;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, // m mat4 u_invView
	0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, // Proj;.uniform ma
	0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, 0x3b, 0x0a, // t4 u_model[32];.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, // uniform mat4 u_m
	0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // odelView;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, // m mat4 u_modelVi
	0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // ewProj;.uniform 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x66, 0x34, // vec4 u_alphaRef4
	0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, // ;.float sqr(cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // t float v).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, // urn v*v;.}.vec2 
	0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, // sqr(const vec2 v
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, // ).{.return v*v;.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, // }.vec3 sqr(const
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, //  vec3 v).{.retur
	0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6d, 0x75, // n v*v;.}.vec3 mu
	0x6c, 0x5f, 0x77, 0x31, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // l_w1(const vec3 
	0x76, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x29, // v, const mat4 m)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2e, 0x78, 0x2a, 0x6d, 0x5b, // .{.return v.x*m[
	0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x79, 0x2a, 0x6d, 0x5b, // 0].xyz + (v.y*m[
	0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x7a, 0x2a, 0x6d, 0x5b, // 1].xyz + (v.z*m[
	0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x6d, 0x5b, 0x33, 0x5d, 0x2e, 0x78, 0x79, // 2].xyz + m[3].xy
	0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x63, 0x6f, // z));.}.float aco
	0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x63, // s_approx_divPI(c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, // onst float v).{.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, // const float x = 
	0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, // abs(v);.if(1. - 
	0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, // x <= 0.000061035
	0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, // 15625).return (v
	0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x20, 0x3a, 0x20, 0x31, //  >= 0.) ? 0. : 1
	0x2e, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, // .;.const float r
	0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, // es = ((-0.155972
	0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, // /3.1415926535897
	0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, // 9323846264338327
	0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, // 95) * x + (1.564
	0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, // 67/3.14159265358
	0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, // 9793238462643383
	0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, // 2795) ) * sqrt(1
	0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // . - x);.return (
	0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, // v >= 0.) ? res :
	0x20, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, //  1. - res;.}.flo
	0x61, 0x74, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, // at atan2_approx_
	0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, // div2PI(const flo
	0x61, 0x74, 0x20, 0x79, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, // at y, const floa
	0x74, 0x20, 0x78, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, // t x).{.const flo
	0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x79, // at abs_y = abs(y
	0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, // );.const float a
	0x62, 0x73, 0x5f, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x78, 0x29, 0x3b, 0x0a, 0x69, // bs_x = abs(x);.i
	0x66, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, // f(abs_x <= 0.000
	0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x20, 0x26, 0x26, 0x20, 0x61, // 06103515625 && a
	0x62, 0x73, 0x5f, 0x79, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, // bs_y <= 0.000061
	0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // 03515625).return
	0x20, 0x30, 0x2e, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, //  0.;.const float
	0x20, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2d, 0x20, 0x61, 0x62, //  r = (abs_x - ab
	0x73, 0x5f, 0x79, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2b, 0x20, // s_y) / (abs_x + 
	0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // abs_y);.const fl
	0x6f, 0x61, 0x74, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x78, 0x20, // oat angle = ((x 
	0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x28, 0x33, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x20, // < 0.) ? (3./8.) 
	0x3a, 0x20, 0x28, 0x31, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x29, 0x0a, 0x2b, 0x20, 0x28, 0x30, 0x2e, // : (1./8.)).+ (0.
	0x32, 0x31, 0x31, 0x38, 0x36, 0x38, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, // 211868 /(2.*3.14
	0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, // 1592653589793238
	0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, // 4626433832795) *
	0x20, 0x72, 0x20, 0x2a, 0x20, 0x72, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x39, 0x38, 0x37, 0x33, 0x30, //  r * r - 0.98730
	0x35, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, // 5 /(2.*3.1415926
	0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, // 5358979323846264
	0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x78, // 33832795)) * ((x
	0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x72, 0x20, 0x3a, 0x20, 0x72, 0x29, //  < 0.) ? -r : r)
	0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x79, 0x20, 0x3c, 0x20, 0x30, 0x2e, // ;.return (y < 0.
	0x29, 0x20, 0x3f, 0x20, 0x2d, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3a, 0x20, 0x61, 0x6e, 0x67, // ) ? -angle : ang
	0x6c, 0x65, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x73, 0x69, 0x6e, // le;.}.float asin
	0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x63, 0x6f, // _approx_divPI(co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x63, // nst float v).{.c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, // onst float x = a
	0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, // bs(v);.if(1. - x
	0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, //  <= 0.0000610351
	0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, // 5625).return (v 
	0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x3a, 0x20, 0x2d, // >= 0.) ? 0.5 : -
	0x30, 0x2e, 0x35, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // 0.5;.const float
	0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, //  res = ((-0.1559
	0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, // 72/3.14159265358
	0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, // 9793238462643383
	0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, // 2795) * x + (1.5
	0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, // 6467/3.141592653
	0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, // 5897932384626433
	0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, // 832795) ) * sqrt
	0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // (1. - x);.return
	0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, //  (v >= 0.) ? 0.5
	0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, //  - res : -0.5 + 
	0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x61, 0x79, 0x5f, // res;.}.vec2 ray_
	0x74, 0x6f, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x75, 0x6c, // to_equirectangul
	0x61, 0x72, 0x5f, 0x75, 0x76, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, // ar_uv(const vec3
	0x20, 0x72, 0x61, 0x79, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, //  ray).{.return v
	0x65, 0x63, 0x32, 0x28, 0x0a, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, // ec2(.0.5 + atan2
	0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x72, // _approx_div2PI(r
	0x61, 0x79, 0x2e, 0x79, 0x2c, 0x20, 0x72, 0x61, 0x79, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x61, 0x63, // ay.y, ray.x),.ac
	0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, // os_approx_divPI(
	0x72, 0x61, 0x79, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // ray.z));.}.float
	0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, //  InvsRGB(const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, // loat color).{.if
	0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, //  (color <= 0.040
	0x34, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // 45).return color
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x29, 0x3b, 0x0a, //  * (1.0/12.92);.
	0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, // else.return pow(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, // color * (1.0/1.0
	0x35, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x2f, 0x31, 0x2e, 0x30, // 55) + (0.055/1.0
	0x35, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // 55), 2.4);.}.flo
	0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x63, 0x6f, 0x6e, // at InvRec709(con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, // st float color).
	0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, // {.if (color <= 0
	0x2e, 0x30, 0x38, 0x31, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, // .081).return col
	0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x34, 0x2e, 0x35, 0x29, 0x3b, 0x0a, // or * (1.0/4.5);.
	0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, // else.return pow(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, // color * (1.0/1.0
	0x39, 0x39, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x2f, 0x31, 0x2e, 0x30, // 99) + (0.099/1.0
	0x39, 0x39, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x3b, 0x0a, // 99), 1.0/0.45);.
	0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, // }.float InvGamma
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, // (const float col
	0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x49, 0x6e, 0x76, // or).{.return Inv
	0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // sRGB(color);.}.v
	0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, // ec3 InvGamma(con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, // st vec3 color).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x49, 0x6e, 0x76, // .return vec3(Inv
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x49, // Gamma(color.x),I
	0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, // nvGamma(color.y)
	0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, // ,InvGamma(color.
	0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x54, // z));.}.vec3 InvT
	0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, // oneMap(const vec
	0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, // 3 color).{.const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x20, 0x3d, //  float inv_2bh =
	0x20, 0x30, 0x2e, 0x35, 0x2f, 0x30, 0x2e, 0x32, 0x35, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, //  0.5/0.25;.const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x34, 0x2e, 0x30, 0x2a, //  float bh = 4.0*
	0x30, 0x2e, 0x32, 0x35, 0x20, 0x2d, 0x20, 0x32, 0x2e, 0x30, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // 0.25 - 2.0;.retu
	0x72, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, // rn (color - 1.0 
	0x2b, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2a, 0x28, 0x63, 0x6f, // + sqrt(color*(co
	0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x20, 0x62, 0x68, 0x29, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, // lor + bh) + 1.0)
	0x29, 0x2a, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // )*inv_2bh;.}.flo
	0x61, 0x74, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // at sRGB(const fl
	0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, // oat f).{.float s
	0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x33, // ;.if (f <= 0.003
	0x31, 0x33, 0x30, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x20, // 1308).s = 12.92 
	0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, // * f;.else.s = 1.
	0x30, 0x35, 0x35, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x31, 0x2e, 0x30, // 055 * pow(f, 1.0
	0x2f, 0x32, 0x2e, 0x34, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x3b, 0x0a, 0x72, // /2.4) - 0.055;.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // eturn s;.}.float
	0x20, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, //  Rec709(const fl
	0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, // oat f).{.float s
	0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, // ;.if (f <= 0.018
	0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x34, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, // ).s = 4.5 * f;.e
	0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x20, 0x2a, 0x20, // lse.s = 1.099 * 
	0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x20, 0x2d, 0x20, 0x30, // pow(f, 0.45) - 0
	0x2e, 0x30, 0x39, 0x39, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, // .099;.return s;.
	0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, // }.float FBGamma(
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // const float colo
	0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x52, 0x47, 0x42, // r).{.return sRGB
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, // (color);.}.vec2 
	0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // FBGamma(const ve
	0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, // c2 color).{.retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, // rn vec2(FBGamma(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, // color.x),FBGamma
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // (color.y));.}.ve
	0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, // c3 FBGamma(const
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, //  vec3 color).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, // eturn vec3(FBGam
	0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, // ma(color.x),FBGa
	0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x46, 0x42, 0x47, // mma(color.y),FBG
	0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, // amma(color.z));.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x32, 0x32, // }.vec3 FBGamma22
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // (const vec3 colo
	0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, // r).{.return vec3
	0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x2c, 0x20, 0x31, 0x2e, // (pow(color.x, 1.
	0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // 0/2.2),pow(color
	0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, // .y, 1.0/2.2),pow
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, // (color.z, 1.0/2.
	0x32, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x54, // 2));.}.float FBT
	0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, // oneMap(const flo
	0x61, 0x74, 0x20, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6c, // at l).{.return l
	0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, //  * ((l*0.25 + 1.
	0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, // 0) / (l + 1.0));
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, // .}.vec2 FBToneMa
	0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, // p(const vec2 col
	0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, // or).{.const floa
	0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, // t l = dot(color,
	0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2b, 0x30, 0x2e, // vec2(0.176204+0.
	0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x2c, 0x30, 0x2e, 0x38, 0x31, // 0108109*0.5,0.81
	0x32, 0x39, 0x38, 0x35, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, // 2985+0.0108109*0
	0x2e, 0x35, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, // .5));.return col
	0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, // or * ((l*0.25 + 
	0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, // 1.0) / (l + 1.0)
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, // );.}.vec3 FBTone
	0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, // Map(const vec3 c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // olor).{.const fl
	0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // oat l = dot(colo
	0x72, 0x2c, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2c, // r,vec3(0.176204,
	0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2c, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, // 0.812985,0.01081
	0x30, 0x39, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, // 09));.return col
	0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, // or * ((l*0.25 + 
	0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, // 1.0) / (l + 1.0)
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, // );.}.vec4 Additi
	0x76, 0x65, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // ve(const vec4 cB
	0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // ase, const vec4 
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // cBlend, const fl
	0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, // oat percent).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2b, 0x20, 0x63, 0x42, // eturn cBase + cB
	0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, // lend*percent;.}.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6e, // vec3 Screen (con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, // st vec3 cBase, c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, // onst vec3 cBlend
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, // ).{.return 1.0 -
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, //  (1.0 - cBase) *
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, //  (1.0 - cBlend);
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, // .}.vec4 Screen (
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, // const vec4 cBase
	0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, // , const vec4 cBl
	0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, // end).{.return 1.
	0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, // 0 - (1.0 - cBase
	0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // ) * (1.0 - cBlen
	0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, // d);.}.vec3 Scree
	0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, // nHDR (const vec3
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, //  cBase, const ve
	0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // c3 cBlend).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, // urn max(1.0 - (1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, // .0 - cBase) * (1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, // .0 - cBlend), ve
	0x63, 0x33, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, // c3(0.,0.,0.));.}
	0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, // .vec4 ScreenHDR 
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, // (const vec4 cBas
	0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // e, const vec4 cB
	0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, // lend).{.return m
	0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, // ax(1.0 - (1.0 - 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, // cBase) * (1.0 - 
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, // cBlend), vec4(0.
	0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // ,0.,0.,0.));.}.v
	0x65, 0x63, 0x34, 0x20, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x20, 0x28, 0x63, 0x6f, // ec4 Multiply (co
	0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, // nst vec4 cBase, 
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // const vec4 cBlen
	0x64, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, // d, const float p
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // ercent).{.return
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2a, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, //  cBase * cBlend*
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, // percent;.}.vec4 
	0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, // Overlay (const v
	0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, // ec4 cBase, const
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, //  vec4 cBlend).{.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, // vec4 cNew = step
	0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, // (0.5, cBase);.cN
	0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, // ew = mix(cBase*c
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, // Blend*2.0, 1.0-2
	0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, // .0*(1.0-cBase)*(
	0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, // 1.0-cBlend), cNe
	0x77, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, // w);.return cNew;
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x48, // .}.vec4 OverlayH
	0x44, 0x52, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, // DR (const vec4 c
	0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, // Base, const vec4
	0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, //  cBlend).{.vec4 
	0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, // cNew = step(0.5,
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, //  cBase);.cNew = 
	0x6d, 0x61, 0x78, 0x28, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, // max(mix(cBase*cB
	0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, // lend*2.0, 1.0-2.
	0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, // 0*(1.0-cBase)*(1
	0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, // .0-cBlend), cNew
	0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, // ), vec4(0.,0.,0.
	0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, // ,0.));.return cN
	0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x73, 0x5f, 0x68, // ew;.}.vec3 cos_h
	0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // emisphere_sample
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x29, 0x0a, 0x7b, // (const vec2 t).{
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x68, 0x69, // .const float phi
	0x20, 0x3d, 0x20, 0x74, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x28, 0x32, 0x2e, 0x30, 0x2a, 0x33, 0x2e, //  = t.y * (2.0*3.
	0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, // 1415926535897932
	0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, // 384626433832795)
	0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, // ;.const float co
	0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, // sTheta = sqrt(1.
	0x30, 0x20, 0x2d, 0x20, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // 0 - t.x);.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, // float sinTheta =
	0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, //  sqrt(t.x);.floa
	0x74, 0x20, 0x73, 0x70, 0x2c, 0x63, 0x70, 0x3b, 0x0a, 0x73, 0x69, 0x6e, 0x63, 0x6f, 0x73, 0x28, // t sp,cp;.sincos(
	0x70, 0x68, 0x69, 0x2c, 0x73, 0x70, 0x2c, 0x63, 0x70, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // phi,sp,cp);.retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x63, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, // rn vec3(cp * sin
	0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, // Theta, cosTheta,
	0x20, 0x73, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x29, 0x3b, //  sp * sinTheta);
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, // .}.vec3 rotate_t
	0x6f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x28, 0x63, // o_vector_upper(c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x63, // onst vec3 vec, c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, // onst vec3 normal
	0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, // ).{.if(normal.y 
	0x3e, 0x20, 0x2d, 0x30, 0x2e, 0x39, 0x39, 0x39, 0x39, 0x39, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, // > -0.99999).{.co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x20, 0x3d, 0x20, 0x31, 0x2e, // nst float h = 1.
	0x30, 0x2f, 0x28, 0x31, 0x2e, 0x30, 0x2b, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x29, // 0/(1.0+normal.y)
	0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, // ;.const float hz
	0x20, 0x3d, 0x20, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x3b, 0x0a, 0x63, //  = h*normal.z;.c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x3d, // onst float hzx =
	0x20, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x3b, 0x0a, 0x72, 0x65, //  hz*normal.x;.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x78, // turn vec3(.vec.x
	0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x7a, 0x2a, //  * (normal.y+hz*
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x29, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, // normal.z) + vec.
	0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, // y * normal.x - v
	0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, // ec.z * hzx,.vec.
	0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x2d, 0x20, 0x76, // y * normal.y - v
	0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, // ec.x * normal.x 
	0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, // - vec.z * normal
	0x2e, 0x7a, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, // .z,.vec.y * norm
	0x61, 0x6c, 0x2e, 0x7a, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x68, // al.z - vec.x * h
	0x7a, 0x78, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, // zx + vec.z * (no
	0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, // rmal.y+h*normal.
	0x78, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // x*normal.x));.}.
	0x65, 0x6c, 0x73, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x2d, 0x76, 0x65, 0x63, // else return -vec
	0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, // ;.}.uniform vec4
	0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x53, 0x61, 0x74, 0x75, 0x72, 0x61, 0x74, 0x69, //  Stereo_Saturati
	0x6f, 0x6e, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, // on;.uniform vec4
	0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, 0x5f, 0x59, //  Stereo_MS_ZPD_Y
	0x41, 0x78, 0x69, 0x73, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, // Axis;.uniform sa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x20, 0x74, 0x65, 0x78, // mpler2DArray tex
	0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // _stereo_fb;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, 0x72, 0x72, // orm sampler2DArr
	0x61, 0x79, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x64, 0x65, // ay tex_stereo_de
	0x70, 0x74, 0x68, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, // pth;.uniform vec
	0x34, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, 0x76, 0x65, // 4 w_h_height;.ve
	0x63, 0x33, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, 0x6c, 0x6f, // c3 gatherEyeColo
	0x72, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x69, // r(vec2 u, bool i
	0x73, 0x4c, 0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // sLeft).{.return 
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x6f, // texture2DArrayLo
	0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, // d(tex_stereo_fb,
	0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, 0x20, //  vec3(u.x, u.y, 
	0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x30, 0x20, 0x3a, 0x20, 0x31, // isLeft ? 0.0 : 1
	0x2e, 0x30, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x7d, 0x0a, // .0), 0.).rgb;.}.
	0x76, 0x6f, 0x69, 0x64, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x52, // void gatherLeftR
	0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, // ightColors(vec2 
	0x75, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x63, 0x6f, 0x6c, // u, out vec3 lcol
	0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x6f, 0x6c, 0x29, // , out vec3 rcol)
	0x0a, 0x7b, 0x0a, 0x6c, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // .{.lcol = textur
	0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, // e2DArrayLod(tex_
	0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, // stereo_fb, vec3(
	0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2c, 0x20, 0x30, // u.x, u.y, 0.), 0
	0x2e, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x72, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, // .).xyz;.rcol = t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x6f, 0x64, // exture2DArrayLod
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, // (tex_stereo_fb, 
	0x76, 0x65, 0x63, 0x33, 0x28, 0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, 0x20, 0x31, // vec3(u.x, u.y, 1
	0x2e, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, // .), 0.).xyz;.}.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, // niform mat4 Ster
	0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // eo_LeftMat;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // orm mat4 Stereo_
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // RightMat;.unifor
	0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, // m vec4 Stereo_Le
	0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, // ftLuminance_Gamm
	0x61, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // a;.uniform vec4 
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, // Stereo_RightLumi
	0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x3b, 0x0a, // nance_DynDesat;.
	0x76, 0x6f, 0x69, 0x64, 0x20, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x65, 0x73, 0x61, // void DynamicDesa
	0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // tAnaglyph(const 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, // vec3 lCol, const
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, //  vec3 rCol, out 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // vec3 lDesatCol, 
	0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, // out vec3 rDesatC
	0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, // ol).{.const floa
	0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, // t left2LeftLum =
	0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, //  dot(lCol, Stere
	0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, // o_LeftLuminance_
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // Gamma.xyz);.cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, // t float left2Rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, // htLum = dot(lCol
	0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // , Stereo_RightLu
	0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, // minance_DynDesat
	0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, // .xyz);.const flo
	0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // at right2LeftLum
	0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, //  = dot(rCol, Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, // reo_LeftLuminanc
	0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, // e_Gamma.xyz);.co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, // nst float right2
	0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, // RightLum = dot(r
	0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, // Col, Stereo_Righ
	0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, // tLuminance_DynDe
	0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // sat.xyz);.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, // float leftLum = 
	0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x6c, // left2LeftLum + l
	0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, 0x0a, 0x63, 0x6f, // eft2RightLum;.co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, // nst float rightL
	0x75, 0x6d, 0x20, 0x3d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, // um = right2LeftL
	0x75, 0x6d, 0x20, 0x2b, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, // um + right2Right
	0x4c, 0x75, 0x6d, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // Lum;.const float
	0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, //  leftDesat = Ste
	0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, // reo_RightLuminan
	0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, // ce_DynDesat.w * 
	0x61, 0x62, 0x73, 0x28, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, // abs((left2LeftLu
	0x6d, 0x20, 0x2d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // m - left2RightLu
	0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, // m) / (leftLum + 
	0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // 0.0001));.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, // float rightDesat
	0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, //  = Stereo_RightL
	0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, // uminance_DynDesa
	0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, // t.w * abs((right
	0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, // 2LeftLum - right
	0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x72, 0x69, // 2RightLum) / (ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, // ghtLum + 0.0001)
	0x29, 0x3b, 0x0a, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, // );.lDesatCol = m
	0x69, 0x78, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, // ix(lCol, vec3_sp
	0x6c, 0x61, 0x74, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, 0x6c, 0x65, // lat(leftLum), le
	0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x72, 0x44, 0x65, 0x73, 0x61, 0x74, // ftDesat);.rDesat
	0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // Col = mix(rCol, 
	0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x72, 0x69, 0x67, 0x68, 0x74, // vec3_splat(right
	0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, // Lum), rightDesat
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, // );.}.vec3 Linear
	0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, // Anaglyph(const v
	0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // ec3 lCol, const 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, // vec3 rCol).{.con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, // st vec3 color = 
	0x28, 0x28, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, // (( (vec4(lCol, 1
	0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, // .)) * (Stereo_Le
	0x66, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x20, 0x28, 0x76, 0x65, // ftMat) ) + ( (ve
	0x63, 0x34, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, // c4(rCol, 1.)) * 
	0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, // (Stereo_RightMat
	0x29, 0x20, 0x29, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // ) )).rgb;.return
	0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, //  color;.}.unifor
	0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, // m vec4 Stereo_De
	0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // ghostGamma;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // orm mat4 Stereo_
	0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3b, 0x0a, 0x76, // DeghostFilter;.v
	0x65, 0x63, 0x33, 0x20, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, // ec3 DeghostAnagl
	0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, // yph(const vec3 l
	0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // Col, const vec3 
	0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // rCol).{.const ve
	0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, // c3 color = Linea
	0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, // rAnaglyph(lCol, 
	0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, // rCol);.return ( 
	0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, // (pow(color, Ster
	0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, // eo_DeghostGamma.
	0x72, 0x67, 0x62, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x53, 0x74, // rgb)) * (mat3(St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, // ereo_DeghostFilt
	0x65, 0x72, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // er[0].xyz, Stere
	0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, // o_DeghostFilter[
	0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, // 1].xyz, Stereo_D
	0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x32, 0x5d, 0x2e, // eghostFilter[2].
	0x78, 0x79, 0x7a, 0x29, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, // xyz)) );.}.void 
	0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, // main().{.vec3 lC
	0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x3b, 0x0a, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, // ol, rCol;.gather
	0x4c, 0x65, 0x66, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x28, // LeftRightColors(
	0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2c, 0x20, 0x6c, 0x43, 0x6f, // v_texcoord0, lCo
	0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x6c, 0x43, 0x6f, 0x6c, 0x20, 0x3d, // l, rCol);.lCol =
	0x20, 0x70, 0x6f, 0x77, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, //  pow(lCol, vec3(
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, // Stereo_LeftLumin
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, 0x53, 0x74, // ance_Gamma.w, St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, // ereo_LeftLuminan
	0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, // ce_Gamma.w, Ster
	0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, // eo_LeftLuminance
	0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x43, 0x6f, 0x6c, // _Gamma.w));.rCol
	0x20, 0x3d, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, //  = pow(rCol, vec
	0x33, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // 3(Stereo_LeftLum
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, // inance_Gamma.w, 
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, // Stereo_LeftLumin
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, 0x53, 0x74, // ance_Gamma.w, St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, // ereo_LeftLuminan
	0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x29, 0x29, 0x3b, 0x0a, 0x76, 0x65, // ce_Gamma.w));.ve
	0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2c, 0x20, 0x72, 0x43, // c3 lColDesat, rC
	0x6f, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x3b, 0x0a, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, // olDesat;.Dynamic
	0x44, 0x65, 0x73, 0x61, 0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, // DesatAnaglyph(lC
	0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x44, 0x65, // ol, rCol, lColDe
	0x73, 0x61, 0x74, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, // sat, rColDesat);
	0x0a, 0x6c, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x44, 0x65, 0x73, 0x61, // .lCol = lColDesa
	0x74, 0x3b, 0x0a, 0x72, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x44, 0x65, // t;.rCol = rColDe
	0x73, 0x61, 0x74, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, // sat;.vec3 color 
	0x3d, 0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, // = LinearAnaglyph
	0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x62, 0x67, // (lCol, rCol);.bg
	0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x76, // fx_FragColor = v
	0x65, 0x63, 0x34, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x76, // ec4(pow(color, v
	0x65, 0x63, 0x33, 0x28, 0x31, 0x2e, 0x2f, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, // ec3(1./Stereo_Le
	0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, // ftLuminance_Gamm
	0x61, 0x2e, 0x77, 0x2c, 0x20, 0x31, 0x2e, 0x2f, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, // a.w, 1./Stereo_L
	0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, // eftLuminance_Gam
	0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, 0x31, 0x2e, 0x2f, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // ma.w, 1./Stereo_
	0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, // LeftLuminance_Ga
	0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x29, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x7d, // mma.w)), 1.0);.}
	0x0a, 0x00,                                                                                     // ..
};
static const uint8_t fs_pp_stereo_anaglyph_lin_gamma_dyndesat_st_glsl[9474] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xef, 0x24, // FSH.Jc._.......$
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x34, 0x34, 0x30, 0x0a, 0x6f, // ..#version 440.o
	0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, // ut vec4 bgfx_Fra
	0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, // gColor;.#define 
	0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x62, 0x67, 0x66, // gl_FragColor bgf
	0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x0a, 0x23, 0x64, 0x65, 0x66, // x_FragColor.#def
	0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x20, 0x20, 0x20, // ine texture2D   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x0a, 0x23, //        texture.#
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, // define texture2D
	0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // Lod       textur
	0x65, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, // eLod.#define tex
	0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ture2DGrad      
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, // textureGrad.#def
	0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, // ine texture2DPro
	0x6a, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, // jLod   texturePr
	0x6f, 0x6a, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, // ojLod.#define te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, 0x20, // xture2DProjGrad 
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, //  textureProjGrad
	0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // .#define texture
	0x43, 0x75, 0x62, 0x65, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, // CubeLod     text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, // ureLod.#define t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, // extureCubeGrad  
	0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, //   textureGrad.#d
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x33, 0x44, 0x20, // efine texture3D 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, //          texture
	0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // .#define texture
	0x32, 0x44, 0x4c, 0x6f, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x20, 0x74, 0x65, 0x78, 0x74, // 2DLodOffset text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x0a, 0x23, 0x64, 0x65, // ureLodOffset.#de
	0x66, 0x69, 0x6e, 0x65, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x69, // fine attribute i
	0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, // n.#define varyin
	0x67, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x62, 0x67, 0x66, // g in.#define bgf
	0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, // xShadow2D(_sampl
	0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, // er, _coord)     
	0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, // vec4_splat(textu
	0x72, 0x65, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, // re(_sampler, _co
	0x6f, 0x72, 0x64, 0x29, 0x20, 0x29, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x62, // ord) ).#define b
	0x67, 0x66, 0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x28, // gfxShadow2DProj(
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, // _sampler, _coord
	0x29, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, // ) vec4_splat(tex
	0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // tureProj(_sample
	0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x29, 0x0a, 0x76, 0x61, 0x72, // r, _coord) ).var
	0x79, 0x69, 0x6e, 0x67, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x5f, 0x65, 0x79, 0x65, // ying float v_eye
	0x3b, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, // ;.varying vec2 v
	0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, // _texcoord0;.vec3
	0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, //  instMul(vec3 _v
	0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, // ec, mat3 _mtx) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, //  return ( (_vec)
	0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, //  * (_mtx) ); }.v
	0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, // ec3 instMul(mat3
	0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, //  _mtx, vec3 _vec
	0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, // ) { return ( (_m
	0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, // tx) * (_vec) ); 
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, // }.vec4 instMul(v
	0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, // ec4 _vec, mat4 _
	0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, // mtx) { return ( 
	0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, // (_vec) * (_mtx) 
	0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, // ); }.vec4 instMu
	0x6c, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, // l(mat4 _mtx, vec
	0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // 4 _vec) { return
	0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, //  ( (_mtx) * (_ve
	0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, // c) ); }.float rc
	0x70, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // p(float _a) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, // turn 1.0/_a; }.v
	0x65, 0x63, 0x32, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, // ec2 rcp(vec2 _a)
	0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, //  { return vec2(1
	0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, // .0)/_a; }.vec3 r
	0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // cp(vec3 _a) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, // turn vec3(1.0)/_
	0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, // a; }.vec4 rcp(ve
	0x63, 0x34, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // c4 _a) { return 
	0x76, 0x65, 0x63, 0x34, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, // vec4(1.0)/_a; }.
	0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, // vec2 vec2_splat(
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // float _x) { retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, // rn vec2(_x, _x);
	0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, //  }.vec3 vec3_spl
	0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, // at(float _x) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, // eturn vec3(_x, _
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, // x, _x); }.vec4 v
	0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // ec4_splat(float 
	0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, // _x) { return vec
	0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, // 4(_x, _x, _x, _x
	0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, // ); }.uvec2 uvec2
	0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, // _splat(uint _x) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, // { return uvec2(_
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, // x, _x); }.uvec3 
	0x75, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, // uvec3_splat(uint
	0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, //  _x) { return uv
	0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, // ec3(_x, _x, _x);
	0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, //  }.uvec4 uvec4_s
	0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, // plat(uint _x) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, // return uvec4(_x,
	0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, //  _x, _x, _x); }.
	0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, // mat4 mtxFromRows
	0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, // (vec4 _0, vec4 _
	0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // 1, vec4 _2, vec4
	0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, //  _3).{.return tr
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, // anspose(mat4(_0,
	0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, //  _1, _2, _3) );.
	0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, // }.mat4 mtxFromCo
	0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // ls(vec4 _0, vec4
	0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, //  _1, vec4 _2, ve
	0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // c4 _3).{.return 
	0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, // mat4(_0, _1, _2,
	0x20, 0x5f, 0x33, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, //  _3);.}.mat3 mtx
	0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, // FromRows(vec3 _0
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // , vec3 _1, vec3 
	0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, // _2).{.return tra
	0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, // nspose(mat3(_0, 
	0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, // _1, _2) );.}.mat
	0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, // 3 mtxFromCols(ve
	0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, // c3 _0, vec3 _1, 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // vec3 _2).{.retur
	0x6e, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, // n mat3(_0, _1, _
	0x32, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, // 2);.}.uniform ve
	0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, // c4 u_viewRect;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, // niform vec4 u_vi
	0x65, 0x77, 0x54, 0x65, 0x78, 0x65, 0x6c, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // ewTexel;.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, //  mat4 u_view;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, // iform mat4 u_inv
	0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, // View;.uniform ma
	0x74, 0x34, 0x20, 0x75, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, // t4 u_proj;.unifo
	0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, // rm mat4 u_invPro
	0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, // j;.uniform mat4 
	0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // u_viewProj;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, // orm mat4 u_invVi
	0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // ewProj;.uniform 
	0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, // mat4 u_model[32]
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, // ;.uniform mat4 u
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // _modelView;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, // orm mat4 u_model
	0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // ViewProj;.unifor
	0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, // m vec4 u_alphaRe
	0x66, 0x34, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, // f4;.float sqr(co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, // nst float v).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // eturn v*v;.}.vec
	0x32, 0x20, 0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, // 2 sqr(const vec2
	0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, //  v).{.return v*v
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x73, 0x71, 0x72, 0x28, 0x63, 0x6f, 0x6e, // ;.}.vec3 sqr(con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // st vec3 v).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // urn v*v;.}.vec3 
	0x6d, 0x75, 0x6c, 0x5f, 0x77, 0x31, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, // mul_w1(const vec
	0x33, 0x20, 0x76, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, // 3 v, const mat4 
	0x6d, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2e, 0x78, 0x2a, // m).{.return v.x*
	0x6d, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x79, 0x2a, // m[0].xyz + (v.y*
	0x6d, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x7a, 0x2a, // m[1].xyz + (v.z*
	0x6d, 0x5b, 0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x6d, 0x5b, 0x33, 0x5d, 0x2e, // m[2].xyz + m[3].
	0x78, 0x79, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, // xyz));.}.float a
	0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, // cos_approx_divPI
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, // (const float v).
	0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, // {.const float x 
	0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, // = abs(v);.if(1. 
	0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, // - x <= 0.0000610
	0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // 3515625).return 
	0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x20, 0x3a, // (v >= 0.) ? 0. :
	0x20, 0x31, 0x2e, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, //  1.;.const float
	0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, //  res = ((-0.1559
	0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, // 72/3.14159265358
	0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, // 9793238462643383
	0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, // 2795) * x + (1.5
	0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, // 6467/3.141592653
	0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, // 5897932384626433
	0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, // 832795) ) * sqrt
	0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // (1. - x);.return
	0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x72, 0x65, 0x73, //  (v >= 0.) ? res
	0x20, 0x3a, 0x20, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, //  : 1. - res;.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, // loat atan2_appro
	0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // x_div2PI(const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x79, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // loat y, const fl
	0x6f, 0x61, 0x74, 0x20, 0x78, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // oat x).{.const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, // loat abs_y = abs
	0x28, 0x79, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // (y);.const float
	0x20, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x78, 0x29, 0x3b, //  abs_x = abs(x);
	0x0a, 0x69, 0x66, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, // .if(abs_x <= 0.0
	0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x20, 0x26, 0x26, // 0006103515625 &&
	0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, //  abs_y <= 0.0000
	0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, // 6103515625).retu
	0x72, 0x6e, 0x20, 0x30, 0x2e, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, // rn 0.;.const flo
	0x61, 0x74, 0x20, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2d, 0x20, // at r = (abs_x - 
	0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, // abs_y) / (abs_x 
	0x2b, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // + abs_y);.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3d, 0x20, 0x28, 0x28, // float angle = ((
	0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x28, 0x33, 0x2e, 0x2f, 0x38, 0x2e, // x < 0.) ? (3./8.
	0x29, 0x20, 0x3a, 0x20, 0x28, 0x31, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x29, 0x0a, 0x2b, 0x20, 0x28, // ) : (1./8.)).+ (
	0x30, 0x2e, 0x32, 0x31, 0x31, 0x38, 0x36, 0x38, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, // 0.211868 /(2.*3.
	0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, // 1415926535897932
	0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, // 384626433832795)
	0x20, 0x2a, 0x20, 0x72, 0x20, 0x2a, 0x20, 0x72, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x39, 0x38, 0x37, //  * r * r - 0.987
	0x33, 0x30, 0x35, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, // 305 /(2.*3.14159
	0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, // 2653589793238462
	0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, // 6433832795)) * (
	0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x72, 0x20, 0x3a, 0x20, // (x < 0.) ? -r : 
	0x72, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x79, 0x20, 0x3c, 0x20, // r);.return (y < 
	0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3a, 0x20, 0x61, // 0.) ? -angle : a
	0x6e, 0x67, 0x6c, 0x65, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x73, // ngle;.}.float as
	0x69, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, // in_approx_divPI(
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, // const float v).{
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, // .const float x =
	0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, //  abs(v);.if(1. -
	0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, //  x <= 0.00006103
	0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // 515625).return (
	0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x3a, // v >= 0.) ? 0.5 :
	0x20, 0x2d, 0x30, 0x2e, 0x35, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, //  -0.5;.const flo
	0x61, 0x74, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, // at res = ((-0.15
	0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, // 5972/3.141592653
	0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, // 5897932384626433
	0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, // 832795) * x + (1
	0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, // .56467/3.1415926
	0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, // 5358979323846264
	0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, // 33832795) ) * sq
	0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // rt(1. - x);.retu
	0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, // rn (v >= 0.) ? 0
	0x2e, 0x35, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x20, // .5 - res : -0.5 
	0x2b, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x61, // + res;.}.vec2 ra
	0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, // y_to_equirectang
	0x75, 0x6c, 0x61, 0x72, 0x5f, 0x75, 0x76, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // ular_uv(const ve
	0x63, 0x33, 0x20, 0x72, 0x61, 0x79, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // c3 ray).{.return
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x0a, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x61, 0x74, 0x61, //  vec2(.0.5 + ata
	0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, // n2_approx_div2PI
	0x28, 0x72, 0x61, 0x79, 0x2e, 0x79, 0x2c, 0x20, 0x72, 0x61, 0x79, 0x2e, 0x78, 0x29, 0x2c, 0x0a, // (ray.y, ray.x),.
	0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, // acos_approx_divP
	0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // I(ray.z));.}.flo
	0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, // at InvsRGB(const
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, //  float color).{.
	0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, // if (color <= 0.0
	0x34, 0x30, 0x34, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, // 4045).return col
	0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x29, // or * (1.0/12.92)
	0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, // ;.else.return po
	0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, // w(color * (1.0/1
	0x2e, 0x30, 0x35, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x2f, 0x31, // .055) + (0.055/1
	0x2e, 0x30, 0x35, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // .055), 2.4);.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x63, // loat InvRec709(c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // onst float color
	0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, // ).{.if (color <=
	0x20, 0x30, 0x2e, 0x30, 0x38, 0x31, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, //  0.081).return c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x34, 0x2e, 0x35, 0x29, // olor * (1.0/4.5)
	0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, // ;.else.return po
	0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, // w(color * (1.0/1
	0x2e, 0x30, 0x39, 0x39, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x2f, 0x31, // .099) + (0.099/1
	0x2e, 0x30, 0x39, 0x39, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x30, 0x2e, 0x34, 0x35, 0x29, // .099), 1.0/0.45)
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, // ;.}.float InvGam
	0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, // ma(const float c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x49, // olor).{.return I
	0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, // nvsRGB(color);.}
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, // .vec3 InvGamma(c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, // onst vec3 color)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x49, // .{.return vec3(I
	0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, // nvGamma(color.x)
	0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, // ,InvGamma(color.
	0x79, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // y),InvGamma(colo
	0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, // r.z));.}.vec3 In
	0x76, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, // vToneMap(const v
	0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, // ec3 color).{.con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, // st float inv_2bh
	0x20, 0x3d, 0x20, 0x30, 0x2e, 0x35, 0x2f, 0x30, 0x2e, 0x32, 0x35, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, //  = 0.5/0.25;.con
	0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x34, 0x2e, // st float bh = 4.
	0x30, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2d, 0x20, 0x32, 0x2e, 0x30, 0x3b, 0x0a, 0x72, 0x65, // 0*0.25 - 2.0;.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2d, 0x20, 0x31, 0x2e, // turn (color - 1.
	0x30, 0x20, 0x2b, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2a, 0x28, // 0 + sqrt(color*(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x20, 0x62, 0x68, 0x29, 0x20, 0x2b, 0x20, 0x31, 0x2e, // color + bh) + 1.
	0x30, 0x29, 0x29, 0x2a, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // 0))*inv_2bh;.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // loat sRGB(const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // float f).{.float
	0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, //  s;.if (f <= 0.0
	0x30, 0x33, 0x31, 0x33, 0x30, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, // 031308).s = 12.9
	0x32, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, // 2 * f;.else.s = 
	0x31, 0x2e, 0x30, 0x35, 0x35, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x31, // 1.055 * pow(f, 1
	0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x34, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x3b, // .0/2.4) - 0.055;
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // .return s;.}.flo
	0x61, 0x74, 0x20, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // at Rec709(const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // float f).{.float
	0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, //  s;.if (f <= 0.0
	0x31, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x34, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x66, 0x3b, // 18).s = 4.5 * f;
	0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x20, // .else.s = 1.099 
	0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x20, 0x2d, // * pow(f, 0.45) -
	0x20, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, //  0.099;.return s
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, // ;.}.float FBGamm
	0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, // a(const float co
	0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x52, // lor).{.return sR
	0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // GB(color);.}.vec
	0x32, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // 2 FBGamma(const 
	0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // vec2 color).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, // turn vec2(FBGamm
	0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, // a(color.x),FBGam
	0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // ma(color.y));.}.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6e, // vec3 FBGamma(con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, // st vec3 color).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x46, 0x42, 0x47, // .return vec3(FBG
	0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, // amma(color.x),FB
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x46, // Gamma(color.y),F
	0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, // BGamma(color.z))
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, // ;.}.vec3 FBGamma
	0x32, 0x32, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, // 22(const vec3 co
	0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, // lor).{.return ve
	0x63, 0x33, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x2c, 0x20, // c3(pow(color.x, 
	0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, // 1.0/2.2),pow(col
	0x6f, 0x72, 0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, // or.y, 1.0/2.2),p
	0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, // ow(color.z, 1.0/
	0x32, 0x2e, 0x32, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, // 2.2));.}.float F
	0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // BToneMap(const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // loat l).{.return
	0x20, 0x6c, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, //  l * ((l*0.25 + 
	0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, // 1.0) / (l + 1.0)
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, // );.}.vec2 FBTone
	0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, // Map(const vec2 c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // olor).{.const fl
	0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // oat l = dot(colo
	0x72, 0x2c, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2b, // r,vec2(0.176204+
	0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x2c, 0x30, 0x2e, // 0.0108109*0.5,0.
	0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, // 812985+0.0108109
	0x2a, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, // *0.5));.return c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, // olor * ((l*0.25 
	0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, // + 1.0) / (l + 1.
	0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x54, 0x6f, // 0));.}.vec3 FBTo
	0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, // neMap(const vec3
	0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, //  color).{.const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, // float l = dot(co
	0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, // lor,vec3(0.17620
	0x34, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2c, 0x30, 0x2e, 0x30, 0x31, 0x30, // 4,0.812985,0.010
	0x38, 0x31, 0x30, 0x39, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, // 8109));.return c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, // olor * ((l*0.25 
	0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, // + 1.0) / (l + 1.
	0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x41, 0x64, 0x64, 0x69, // 0));.}.vec4 Addi
	0x74, 0x69, 0x76, 0x65, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // tive(const vec4 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, // cBase, const vec
	0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // 4 cBlend, const 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, // float percent).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2b, 0x20, // .return cBase + 
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, // cBlend*percent;.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x63, // }.vec3 Screen (c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, // onst vec3 cBase,
	0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, //  const vec3 cBle
	0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, // nd).{.return 1.0
	0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, //  - (1.0 - cBase)
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, //  * (1.0 - cBlend
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, // );.}.vec4 Screen
	0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, //  (const vec4 cBa
	0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, // se, const vec4 c
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // Blend).{.return 
	0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, // 1.0 - (1.0 - cBa
	0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, // se) * (1.0 - cBl
	0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, // end);.}.vec3 Scr
	0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, // eenHDR (const ve
	0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // c3 cBase, const 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, // vec3 cBlend).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, // eturn max(1.0 - 
	0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, // (1.0 - cBase) * 
	0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, // (1.0 - cBlend), 
	0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, // vec3(0.,0.,0.));
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, // .}.vec4 ScreenHD
	0x52, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // R (const vec4 cB
	0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // ase, const vec4 
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // cBlend).{.return
	0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, //  max(1.0 - (1.0 
	0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, // - cBase) * (1.0 
	0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, // - cBlend), vec4(
	0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, // 0.,0.,0.,0.));.}
	0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x20, 0x28, // .vec4 Multiply (
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, // const vec4 cBase
	0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, // , const vec4 cBl
	0x65, 0x6e, 0x64, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // end, const float
	0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, //  percent).{.retu
	0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2a, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // rn cBase * cBlen
	0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // d*percent;.}.vec
	0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, // 4 Overlay (const
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, //  vec4 cBase, con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, // st vec4 cBlend).
	0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, // {.vec4 cNew = st
	0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, // ep(0.5, cBase);.
	0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, // cNew = mix(cBase
	0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, // *cBlend*2.0, 1.0
	0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, // -2.0*(1.0-cBase)
	0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, // *(1.0-cBlend), c
	0x4e, 0x65, 0x77, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, // New);.return cNe
	0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, // w;.}.vec4 Overla
	0x79, 0x48, 0x44, 0x52, 0x20, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, // yHDR (const vec4
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, //  cBase, const ve
	0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, // c4 cBlend).{.vec
	0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, // 4 cNew = step(0.
	0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, // 5, cBase);.cNew 
	0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, // = max(mix(cBase*
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, // cBlend*2.0, 1.0-
	0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, // 2.0*(1.0-cBase)*
	0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, // (1.0-cBlend), cN
	0x65, 0x77, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, // ew), vec4(0.,0.,
	0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // 0.,0.));.return 
	0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x73, // cNew;.}.vec3 cos
	0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x5f, 0x73, 0x61, 0x6d, 0x70, // _hemisphere_samp
	0x6c, 0x65, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x29, // le(const vec2 t)
	0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, // .{.const float p
	0x68, 0x69, 0x20, 0x3d, 0x20, 0x74, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x28, 0x32, 0x2e, 0x30, 0x2a, // hi = t.y * (2.0*
	0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, // 3.14159265358979
	0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, // 3238462643383279
	0x35, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // 5);.const float 
	0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, // cosTheta = sqrt(
	0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // 1.0 - t.x);.cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, // t float sinTheta
	0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, //  = sqrt(t.x);.fl
	0x6f, 0x61, 0x74, 0x20, 0x73, 0x70, 0x2c, 0x63, 0x70, 0x3b, 0x0a, 0x73, 0x69, 0x6e, 0x63, 0x6f, // oat sp,cp;.sinco
	0x73, 0x28, 0x70, 0x68, 0x69, 0x2c, 0x73, 0x70, 0x2c, 0x63, 0x70, 0x29, 0x3b, 0x0a, 0x72, 0x65, // s(phi,sp,cp);.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x63, 0x70, 0x20, 0x2a, 0x20, 0x73, // turn vec3(cp * s
	0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, // inTheta, cosThet
	0x61, 0x2c, 0x20, 0x73, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, // a, sp * sinTheta
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, // );.}.vec3 rotate
	0x5f, 0x74, 0x6f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, // _to_vector_upper
	0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x2c, // (const vec3 vec,
	0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, //  const vec3 norm
	0x61, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, // al).{.if(normal.
	0x79, 0x20, 0x3e, 0x20, 0x2d, 0x30, 0x2e, 0x39, 0x39, 0x39, 0x39, 0x39, 0x29, 0x0a, 0x7b, 0x0a, // y > -0.99999).{.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x20, 0x3d, 0x20, // const float h = 
	0x31, 0x2e, 0x30, 0x2f, 0x28, 0x31, 0x2e, 0x30, 0x2b, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, // 1.0/(1.0+normal.
	0x79, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // y);.const float 
	0x68, 0x7a, 0x20, 0x3d, 0x20, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x3b, // hz = h*normal.z;
	0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x78, // .const float hzx
	0x20, 0x3d, 0x20, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x3b, 0x0a, //  = hz*normal.x;.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x0a, 0x76, 0x65, 0x63, // return vec3(.vec
	0x2e, 0x78, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, // .x * (normal.y+h
	0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x29, 0x20, 0x2b, 0x20, 0x76, 0x65, // z*normal.z) + ve
	0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, // c.y * normal.x -
	0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x2c, 0x0a, 0x76, 0x65, //  vec.z * hzx,.ve
	0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x2d, // c.y * normal.y -
	0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, //  vec.x * normal.
	0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, // x - vec.z * norm
	0x61, 0x6c, 0x2e, 0x7a, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, // al.z,.vec.y * no
	0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, // rmal.z - vec.x *
	0x20, 0x68, 0x7a, 0x78, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x28, //  hzx + vec.z * (
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, // normal.y+h*norma
	0x6c, 0x2e, 0x78, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, // l.x*normal.x));.
	0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x2d, 0x76, // }.else return -v
	0x65, 0x63, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, // ec;.}.uniform ve
	0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x53, 0x61, 0x74, 0x75, 0x72, 0x61, // c4 Stereo_Satura
	0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, // tion;.uniform ve
	0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4d, 0x53, 0x5f, 0x5a, 0x50, 0x44, // c4 Stereo_MS_ZPD
	0x5f, 0x59, 0x41, 0x78, 0x69, 0x73, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // _YAxis;.uniform 
	0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x20, 0x74, // sampler2DArray t
	0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x3b, 0x0a, 0x75, 0x6e, // ex_stereo_fb;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x41, // iform sampler2DA
	0x72, 0x72, 0x61, 0x79, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // rray tex_stereo_
	0x64, 0x65, 0x70, 0x74, 0x68, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, // depth;.uniform v
	0x65, 0x63, 0x34, 0x20, 0x77, 0x5f, 0x68, 0x5f, 0x68, 0x65, 0x69, 0x67, 0x68, 0x74, 0x3b, 0x0a, // ec4 w_h_height;.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x45, 0x79, 0x65, 0x43, 0x6f, // vec3 gatherEyeCo
	0x6c, 0x6f, 0x72, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x2c, 0x20, 0x62, 0x6f, 0x6f, 0x6c, // lor(vec2 u, bool
	0x20, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, //  isLeft).{.retur
	0x6e, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, // n texture2DArray
	0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, // Lod(tex_stereo_f
	0x62, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, // b, vec3(u.x, u.y
	0x2c, 0x20, 0x69, 0x73, 0x4c, 0x65, 0x66, 0x74, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x30, 0x20, 0x3a, // , isLeft ? 0.0 :
	0x20, 0x31, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, //  1.0), 0.).rgb;.
	0x7d, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x67, 0x61, 0x74, 0x68, 0x65, 0x72, 0x4c, 0x65, 0x66, // }.void gatherLef
	0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x28, 0x76, 0x65, 0x63, // tRightColors(vec
	0x32, 0x20, 0x75, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x63, // 2 u, out vec3 lc
	0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x6f, // ol, out vec3 rco
	0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x6c, 0x63, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, // l).{.lcol = text
	0x75, 0x72, 0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x6f, 0x64, 0x28, 0x74, 0x65, // ure2DArrayLod(te
	0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x2c, 0x20, 0x76, 0x65, 0x63, // x_stereo_fb, vec
	0x33, 0x28, 0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2c, // 3(u.x, u.y, 0.),
	0x20, 0x30, 0x2e, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x72, 0x63, 0x6f, 0x6c, 0x20, 0x3d, //  0.).xyz;.rcol =
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, //  texture2DArrayL
	0x6f, 0x64, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, // od(tex_stereo_fb
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x75, 0x2e, 0x78, 0x2c, 0x20, 0x75, 0x2e, 0x79, 0x2c, // , vec3(u.x, u.y,
	0x20, 0x31, 0x2e, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x29, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x7d, //  1.), 0.).xyz;.}
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, // .uniform mat4 St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, // ereo_LeftMat;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // iform mat4 Stere
	0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // o_RightMat;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // orm vec4 Stereo_
	0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, // LeftLuminance_Ga
	0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, // mma;.uniform vec
	0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, // 4 Stereo_RightLu
	0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, // minance_DynDesat
	0x3b, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x44, 0x65, // ;.void DynamicDe
	0x73, 0x61, 0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, // satAnaglyph(cons
	0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, // t vec3 lCol, con
	0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6f, 0x75, // st vec3 rCol, ou
	0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, // t vec3 lDesatCol
	0x2c, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x44, 0x65, 0x73, 0x61, // , out vec3 rDesa
	0x74, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, // tCol).{.const fl
	0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // oat left2LeftLum
	0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, //  = dot(lCol, Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, // reo_LeftLuminanc
	0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, // e_Gamma.xyz);.co
	0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, // nst float left2R
	0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x43, // ightLum = dot(lC
	0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, // ol, Stereo_Right
	0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, // Luminance_DynDes
	0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, // at.xyz);.const f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, // loat right2LeftL
	0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, // um = dot(rCol, S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, // tereo_LeftLumina
	0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, // nce_Gamma.xyz);.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, // const float righ
	0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, // t2RightLum = dot
	0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, // (rCol, Stereo_Ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, // ghtLuminance_Dyn
	0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // Desat.xyz);.cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, // t float leftLum 
	0x3d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, // = left2LeftLum +
	0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, 0x0a, //  left2RightLum;.
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, // const float righ
	0x74, 0x4c, 0x75, 0x6d, 0x20, 0x3d, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, // tLum = right2Lef
	0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x32, 0x52, 0x69, 0x67, // tLum + right2Rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x66, 0x6c, 0x6f, // htLum;.const flo
	0x61, 0x74, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, // at leftDesat = S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, // tereo_RightLumin
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, // ance_DynDesat.w 
	0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, // * abs((left2Left
	0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x6c, 0x65, 0x66, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, // Lum - left2Right
	0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, // Lum) / (leftLum 
	0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x31, 0x29, 0x29, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, // + 0.0001));.cons
	0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x73, // t float rightDes
	0x61, 0x74, 0x20, 0x3d, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, // at = Stereo_Righ
	0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, // tLuminance_DynDe
	0x73, 0x61, 0x74, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x61, 0x62, 0x73, 0x28, 0x28, 0x72, 0x69, 0x67, // sat.w * abs((rig
	0x68, 0x74, 0x32, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2d, 0x20, 0x72, 0x69, 0x67, // ht2LeftLum - rig
	0x68, 0x74, 0x32, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x20, 0x2f, 0x20, 0x28, // ht2RightLum) / (
	0x72, 0x69, 0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, // rightLum + 0.000
	0x31, 0x29, 0x29, 0x3b, 0x0a, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, 0x3d, // 1));.lDesatCol =
	0x20, 0x6d, 0x69, 0x78, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, //  mix(lCol, vec3_
	0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x6c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, // splat(leftLum), 
	0x6c, 0x65, 0x66, 0x74, 0x44, 0x65, 0x73, 0x61, 0x74, 0x29, 0x3b, 0x0a, 0x72, 0x44, 0x65, 0x73, // leftDesat);.rDes
	0x61, 0x74, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x72, 0x43, 0x6f, 0x6c, // atCol = mix(rCol
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x72, 0x69, 0x67, // , vec3_splat(rig
	0x68, 0x74, 0x4c, 0x75, 0x6d, 0x29, 0x2c, 0x20, 0x72, 0x69, 0x67, 0x68, 0x74, 0x44, 0x65, 0x73, // htLum), rightDes
	0x61, 0x74, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x4c, 0x69, 0x6e, 0x65, // at);.}.vec3 Line
	0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, // arAnaglyph(const
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, //  vec3 lCol, cons
	0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, // t vec3 rCol).{.c
	0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, // onst vec3 color 
	0x3d, 0x20, 0x28, 0x28, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, // = (( (vec4(lCol,
	0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, //  1.)) * (Stereo_
	0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x29, 0x20, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x20, 0x28, // LeftMat) ) + ( (
	0x76, 0x65, 0x63, 0x34, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x31, 0x2e, 0x29, 0x29, 0x20, // vec4(rCol, 1.)) 
	0x2a, 0x20, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, // * (Stereo_RightM
	0x61, 0x74, 0x29, 0x20, 0x29, 0x29, 0x2e, 0x72, 0x67, 0x62, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // at) )).rgb;.retu
	0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, // rn color;.}.unif
	0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // orm vec4 Stereo_
	0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x3b, 0x0a, 0x75, 0x6e, // DeghostGamma;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, // iform mat4 Stere
	0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x3b, // o_DeghostFilter;
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x41, 0x6e, 0x61, // .vec3 DeghostAna
	0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, 0x33, // glyph(const vec3
	0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, 0x76, 0x65, 0x63, //  lCol, const vec
	0x33, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x20, // 3 rCol).{.const 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, 0x6e, // vec3 color = Lin
	0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, // earAnaglyph(lCol
	0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // , rCol);.return 
	0x28, 0x20, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x53, 0x74, // ( (pow(color, St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x47, 0x61, 0x6d, 0x6d, // ereo_DeghostGamm
	0x61, 0x2e, 0x72, 0x67, 0x62, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, // a.rgb)) * (mat3(
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, // Stereo_DeghostFi
	0x6c, 0x74, 0x65, 0x72, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, // lter[0].xyz, Ste
	0x72, 0x65, 0x6f, 0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, // reo_DeghostFilte
	0x72, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, // r[1].xyz, Stereo
	0x5f, 0x44, 0x65, 0x67, 0x68, 0x6f, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x5b, 0x32, // _DeghostFilter[2
	0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x6f, 0x69, // ].xyz)) );.}.voi
	0x64, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // d main().{.vec3 
	0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x3b, 0x0a, 0x67, 0x61, 0x74, 0x68, // lCol, rCol;.gath
	0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, // erLeftRightColor
	0x73, 0x28, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x2c, 0x20, 0x6c, // s(v_texcoord0, l
	0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, 0x6c, 0x43, 0x6f, 0x6c, // Col, rCol);.lCol
	0x20, 0x3d, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, 0x65, 0x63, //  = pow(lCol, vec
	0x33, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // 3(Stereo_LeftLum
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, // inance_Gamma.w, 
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, // Stereo_LeftLumin
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, 0x53, 0x74, // ance_Gamma.w, St
	0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, // ereo_LeftLuminan
	0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x43, // ce_Gamma.w));.rC
	0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x76, // ol = pow(rCol, v
	0x65, 0x63, 0x33, 0x28, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, // ec3(Stereo_LeftL
	0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, // uminance_Gamma.w
	0x2c, 0x20, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // , Stereo_LeftLum
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, // inance_Gamma.w, 
	0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, // Stereo_LeftLumin
	0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x29, 0x29, 0x3b, 0x0a, // ance_Gamma.w));.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x2c, 0x20, // vec3 lColDesat, 
	0x72, 0x43, 0x6f, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, 0x3b, 0x0a, 0x44, 0x79, 0x6e, 0x61, 0x6d, // rColDesat;.Dynam
	0x69, 0x63, 0x44, 0x65, 0x73, 0x61, 0x74, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, 0x70, 0x68, 0x28, // icDesatAnaglyph(
	0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x6c, 0x43, 0x6f, 0x6c, // lCol, rCol, lCol
	0x44, 0x65, 0x73, 0x61, 0x74, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x44, 0x65, 0x73, 0x61, 0x74, // Desat, rColDesat
	0x29, 0x3b, 0x0a, 0x6c, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x6c, 0x43, 0x6f, 0x6c, 0x44, 0x65, // );.lCol = lColDe
	0x73, 0x61, 0x74, 0x3b, 0x0a, 0x72, 0x43, 0x6f, 0x6c, 0x20, 0x3d, 0x20, 0x72, 0x43, 0x6f, 0x6c, // sat;.rCol = rCol
	0x44, 0x65, 0x73, 0x61, 0x74, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // Desat;.vec3 colo
	0x72, 0x20, 0x3d, 0x20, 0x4c, 0x69, 0x6e, 0x65, 0x61, 0x72, 0x41, 0x6e, 0x61, 0x67, 0x6c, 0x79, // r = LinearAnagly
	0x70, 0x68, 0x28, 0x6c, 0x43, 0x6f, 0x6c, 0x2c, 0x20, 0x72, 0x43, 0x6f, 0x6c, 0x29, 0x3b, 0x0a, // ph(lCol, rCol);.
	0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x76, // gl_FragColor = v
	0x65, 0x63, 0x34, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x20, 0x76, // ec4(pow(color, v
	0x65, 0x63, 0x33, 0x28, 0x31, 0x2e, 0x2f, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, // ec3(1./Stereo_Le
	0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, // ftLuminance_Gamm
	0x61, 0x2e, 0x77, 0x2c, 0x20, 0x31, 0x2e, 0x2f, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, // a.w, 1./Stereo_L
	0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, // eftLuminance_Gam
	0x6d, 0x61, 0x2e, 0x77, 0x2c, 0x20, 0x31, 0x2e, 0x2f, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, // ma.w, 1./Stereo_
	0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, // LeftLuminance_Ga
	0x6d, 0x6d, 0x61, 0x2e, 0x77, 0x29, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x7d, // mma.w)), 1.0);.}
	0x0a, 0x00,                                                                                     // ..
};
static const uint8_t fs_pp_stereo_anaglyph_lin_gamma_dyndesat_st_dx11[1795] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x0e, 0x53, // FSH.Jc._.......S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x00, 0x00, // tereo_LeftMat...
	0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, // ........Stereo_R
	0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x00, 0x40, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, // ightMat..@......
	0x00, 0x1a, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, // ..Stereo_LeftLum
	0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x12, 0x00, 0x80, 0x00, // inance_Gamma....
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, // .......Stereo_Ri
	0x67, 0x68, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, // ghtLuminance_Dyn
	0x44, 0x65, 0x73, 0x61, 0x74, 0x12, 0x00, 0x90, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, // Desat...........
	0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x30, 0x01, 0x00, // tex_stereo_fb0..
	0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, // ........tex_ster
	0x65, 0x6f, 0x5f, 0x66, 0x62, 0x30, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3c, // eo_fb0.........<
	0x06, 0x00, 0x00, 0x44, 0x58, 0x42, 0x43, 0xc9, 0x1d, 0x8f, 0x72, 0x54, 0x4e, 0x9d, 0x3d, 0x4d, // ...DXBC...rTN.=M
	0x40, 0x6f, 0x52, 0x45, 0x77, 0x7a, 0x37, 0x01, 0x00, 0x00, 0x00, 0x3c, 0x06, 0x00, 0x00, 0x03, // @oREwz7....<....
	0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x9c, 0x00, 0x00, 0x00, 0xd0, 0x00, 0x00, 0x00, 0x49, // ...,...........I
	0x53, 0x47, 0x4e, 0x68, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x50, // SGNh...........P
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x5c, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x06, 0x06, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, // .......SV_POSITI
	0x4f, 0x4e, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0xab, 0xab, 0xab, 0x4f, // ON.TEXCOORD....O
	0x53, 0x47, 0x4e, 0x2c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x20, // SGN,........... 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, // .......SV_TARGET
	0x00, 0xab, 0xab, 0x53, 0x48, 0x45, 0x58, 0x64, 0x05, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x59, // ...SHEXd...P...Y
	0x01, 0x00, 0x00, 0x6a, 0x08, 0x00, 0x01, 0x59, 0x00, 0x00, 0x04, 0x46, 0x8e, 0x20, 0x00, 0x00, // ...j...Y...F. ..
	0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x03, 0x00, 0x60, 0x10, 0x00, 0x00, // .......Z....`...
	0x00, 0x00, 0x00, 0x58, 0x40, 0x00, 0x04, 0x00, 0x70, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, // ...X@...p......U
	0x55, 0x00, 0x00, 0x62, 0x10, 0x00, 0x03, 0x62, 0x10, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x65, // U..b...b.......e
	0x00, 0x00, 0x03, 0xf2, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x02, 0x03, // .... ......h....
	0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x32, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x96, // ...6...2........
	0x15, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x42, 0x00, 0x10, 0x00, 0x00, // .......6...B....
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x8d, 0x02, // ....@......H....
	0x02, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, // ...CU..r.......F
	0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .......F~.......
	0x60, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2f, // `.......@....../
	0x00, 0x00, 0x05, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, // ...r.......F....
	0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x08, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, // ...8...r.......F
	0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf6, 0x8f, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, // ......... ......
	0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x05, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, // .......r.......F
	0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x08, 0x82, 0x00, 0x10, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x82, 0x20, 0x00, 0x00, // ...F.......F. ..
	0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x08, 0x12, 0x00, 0x10, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x82, 0x20, 0x00, 0x00, // ...F.......F. ..
	0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x22, 0x00, 0x10, 0x00, 0x01, // ..........."....
	0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x80, 0x41, // ...:...........A
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x82, 0x00, 0x10, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x01, // ...:............
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3a, // ...............:
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x17, 0xb7, 0xd1, 0x38, 0x00, // ........@.....8.
	0x00, 0x00, 0x08, 0x72, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x80, 0x41, // ...r.......F...A
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf6, 0x0f, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, // ................
	0x00, 0x00, 0x07, 0x82, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x09, 0x82, // ...........8....
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x80, 0x81, 0x00, 0x00, 0x00, 0x00, // .......:........
	0x00, 0x00, 0x00, 0x3a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x32, // ...:. .........2
	0x00, 0x00, 0x09, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf6, 0x0f, 0x10, 0x00, 0x00, // ...r............
	0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, // ...F.......F....
	0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x82, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, // ...6............
	0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x11, 0x00, 0x00, 0x08, 0x12, 0x00, 0x10, 0x00, 0x01, // @.....?.........
	0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, // ...F.......F. ..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x08, 0x22, 0x00, 0x10, 0x00, 0x01, // ..........."....
	0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, // ...F.......F. ..
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x08, 0x42, 0x00, 0x10, 0x00, 0x01, // ...........B....
	0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, // ...F.......F. ..
	0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x32, 0x00, 0x10, 0x00, 0x00, // .......6...2....
	0x00, 0x00, 0x00, 0x96, 0x15, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x42, // ...........6...B
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x48, // ........@.....?H
	0x00, 0x00, 0x8d, 0x02, 0x02, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0x72, 0x00, 0x10, 0x00, 0x00, // .......CU..r....
	0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, 0x00, // ...F.......F~...
	0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, // ....`.......@...
	0x00, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x05, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, // .../...r.......F
	0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x08, 0x72, 0x00, 0x10, 0x00, 0x00, // .......8...r....
	0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf6, 0x8f, 0x20, 0x00, 0x00, // ...F......... ..
	0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x05, 0x72, 0x00, 0x10, 0x00, 0x00, // ...........r....
	0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x08, 0x82, // ...F............
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, // .......F.......F
	0x82, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x08, 0x82, // . ..............
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, // .......F.......F
	0x82, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x12, // . ..............
	0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, // .......:.......:
	0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x82, // ...A............
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, // .......:.......:
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x82, 0x00, 0x10, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x17, // ...:........@...
	0xb7, 0xd1, 0x38, 0x00, 0x00, 0x00, 0x08, 0xe2, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x06, // ..8.............
	0x09, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf6, 0x0f, 0x10, 0x00, 0x00, // ...A............
	0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x07, 0x82, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, // ................
	0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x38, // .......:.......8
	0x00, 0x00, 0x09, 0x82, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x80, 0x81, // ...........:....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, // .......:. ......
	0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x09, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf6, // ...2...r........
	0x0f, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x96, 0x07, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, // ...............F
	0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x82, 0x00, 0x10, 0x00, 0x00, // .......6........
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x11, 0x00, 0x00, 0x08, 0x12, // ....@.....?.....
	0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, // .......F.......F
	0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x08, 0x22, // . ............."
	0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, // .......F.......F
	0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x08, 0x42, // . .............B
	0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, // .......F.......F
	0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x72, // . .............r
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, // .......F.......F
	0x02, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x05, 0x72, 0x00, 0x10, 0x00, 0x00, // ......./...r....
	0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x0b, 0x82, // ...F............
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, // ........@.....?.
	0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x3a, 0x80, 0x20, 0x00, 0x00, // ..?...?...?:. ..
	0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x07, 0x72, 0x00, 0x10, 0x00, 0x00, // .......8...r....
	0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf6, 0x0f, 0x10, 0x00, 0x00, // ...F............
	0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x05, 0x72, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, // .......r ......F
	0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x82, 0x20, 0x10, 0x00, 0x00, // .......6.... ...
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x3e, 0x00, 0x00, 0x01, 0x00, // ....@.....?>....
	0x00, 0xa0, 0x00,                                                                               // ...
};
static const uint8_t fs_pp_stereo_anaglyph_lin_gamma_dyndesat_st_spv[3655] =
{
	0x46, 0x53, 0x48, 0x0b, 0x4a, 0x63, 0xcf, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x1a, 0x53, // FSH.Jc._.......S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, // tereo_LeftLumina
	0x6e, 0x63, 0x65, 0x5f, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x12, 0x01, 0x80, 0x00, 0x01, 0x00, 0x00, // nce_Gamma.......
	0x00, 0x00, 0x00, 0x1e, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, // ....Stereo_Right
	0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, // Luminance_DynDes
	0x61, 0x74, 0x12, 0x01, 0x90, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x53, 0x74, 0x65, // at...........Ste
	0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x01, 0x00, 0x00, 0x04, // reo_LeftMat.....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, // ......Stereo_Rig
	0x68, 0x74, 0x4d, 0x61, 0x74, 0x14, 0x01, 0x40, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, // htMat..@........
	0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x66, 0x62, 0x30, 0x00, 0x02, // tex_stereo_fb0..
	0x00, 0x00, 0x00, 0x00, 0x03, 0x22, 0x00, 0x98, 0x0d, 0x00, 0x00, 0x03, 0x02, 0x23, 0x07, 0x00, // .....".......#..
	0x00, 0x01, 0x00, 0x0b, 0x00, 0x08, 0x00, 0x3b, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, // .......;........
	0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, // ...............G
	0x4c, 0x53, 0x4c, 0x2e, 0x73, 0x74, 0x64, 0x2e, 0x34, 0x35, 0x30, 0x00, 0x00, 0x00, 0x00, 0x0e, // LSL.std.450.....
	0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x07, 0x00, 0x04, // ................
	0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x36, // .......main....6
	0x01, 0x00, 0x00, 0x43, 0x01, 0x00, 0x00, 0x10, 0x00, 0x03, 0x00, 0x04, 0x00, 0x00, 0x00, 0x07, // ...C............
	0x00, 0x00, 0x00, 0x03, 0x00, 0x03, 0x00, 0x05, 0x00, 0x00, 0x00, 0xf4, 0x01, 0x00, 0x00, 0x05, // ................
	0x00, 0x04, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x05, // .......main.....
	0x00, 0x08, 0x00, 0x42, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // ...B...tex_stere
	0x6f, 0x5f, 0x66, 0x62, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x00, 0x00, 0x00, 0x00, 0x05, // o_fbSampler.....
	0x00, 0x08, 0x00, 0x45, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x73, 0x74, 0x65, 0x72, 0x65, // ...E...tex_stere
	0x6f, 0x5f, 0x66, 0x62, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x00, 0x00, 0x00, 0x00, 0x05, // o_fbTexture.....
	0x00, 0x06, 0x00, 0x8e, 0x00, 0x00, 0x00, 0x55, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x6c, // .......UniformBl
	0x6f, 0x63, 0x6b, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x07, 0x00, 0x8e, 0x00, 0x00, 0x00, 0x00, // ock.............
	0x00, 0x00, 0x00, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4d, 0x61, // ...Stereo_LeftMa
	0x74, 0x00, 0x00, 0x06, 0x00, 0x07, 0x00, 0x8e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x53, // t..............S
	0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x61, 0x74, 0x00, 0x06, // tereo_RightMat..
	0x00, 0x0a, 0x00, 0x8e, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x53, 0x74, 0x65, 0x72, 0x65, // ...........Stere
	0x6f, 0x5f, 0x4c, 0x65, 0x66, 0x74, 0x4c, 0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, // o_LeftLuminance_
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x00, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x8e, 0x00, 0x00, 0x00, 0x03, // Gamma...........
	0x00, 0x00, 0x00, 0x53, 0x74, 0x65, 0x72, 0x65, 0x6f, 0x5f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4c, // ...Stereo_RightL
	0x75, 0x6d, 0x69, 0x6e, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x44, 0x79, 0x6e, 0x44, 0x65, 0x73, 0x61, // uminance_DynDesa
	0x74, 0x00, 0x00, 0x05, 0x00, 0x03, 0x00, 0x90, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, // t...............
	0x00, 0x05, 0x00, 0x36, 0x01, 0x00, 0x00, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, // ...6...v_texcoor
	0x64, 0x30, 0x00, 0x05, 0x00, 0x06, 0x00, 0x43, 0x01, 0x00, 0x00, 0x62, 0x67, 0x66, 0x78, 0x5f, // d0.....C...bgfx_
	0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x42, // FragData0..G...B
	0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x42, // ...".......G...B
	0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x45, // ...!.......G...E
	0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x45, // ...".......G...E
	0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x48, 0x00, 0x04, 0x00, 0x8e, // ...!.......H....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0x8e, // ...........H....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, // .......#.......H
	0x00, 0x05, 0x00, 0x8e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x10, // ................
	0x00, 0x00, 0x00, 0x48, 0x00, 0x04, 0x00, 0x8e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04, // ...H............
	0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0x8e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x23, // ...H...........#
	0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0x8e, 0x00, 0x00, 0x00, 0x01, // ...@...H........
	0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0x8e, // ...........H....
	0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x48, // .......#.......H
	0x00, 0x05, 0x00, 0x8e, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x90, // ...........#....
	0x00, 0x00, 0x00, 0x47, 0x00, 0x03, 0x00, 0x8e, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x47, // ...G...........G
	0x00, 0x04, 0x00, 0x90, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, // .......".......G
	0x00, 0x04, 0x00, 0x90, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, // .......!.......G
	0x00, 0x04, 0x00, 0x36, 0x01, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, // ...6...........G
	0x00, 0x04, 0x00, 0x43, 0x01, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, // ...C............
	0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x21, 0x00, 0x03, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, // .......!........
	0x00, 0x00, 0x00, 0x1a, 0x00, 0x02, 0x00, 0x06, 0x00, 0x00, 0x00, 0x16, 0x00, 0x03, 0x00, 0x07, // ................
	0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x19, 0x00, 0x09, 0x00, 0x08, 0x00, 0x00, 0x00, 0x07, // ... ............
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x0b, // ................
	0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x0e, // ................
	0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x23, // ...............#
	0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x41, // ........... ...A
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x41, // ...........;...A
	0x00, 0x00, 0x00, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x44, // ...B....... ...D
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x44, // ...........;...D
	0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x00, 0x04, 0x00, 0x4e, // ...E...........N
	0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x4e, // ... .......+...N
	0x00, 0x00, 0x00, 0x4f, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x4e, // ...O.......+...N
	0x00, 0x00, 0x00, 0x53, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x03, 0x00, 0x57, // ...S...........W
	0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x15, 0x00, 0x04, 0x00, 0x71, 0x00, 0x00, 0x00, 0x20, // ...........q... 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x78, // .......+.......x
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x84, // .......+........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x18, 0x00, 0x04, 0x00, 0x8d, 0x00, 0x00, 0x00, 0x0e, // ......?.........
	0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x06, 0x00, 0x8e, 0x00, 0x00, 0x00, 0x8d, // ................
	0x00, 0x00, 0x00, 0x8d, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x20, // ............... 
	0x00, 0x04, 0x00, 0x8f, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x8e, 0x00, 0x00, 0x00, 0x3b, // ...............;
	0x00, 0x04, 0x00, 0x8f, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2b, // ...............+
	0x00, 0x04, 0x00, 0x4e, 0x00, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x20, // ...N........... 
	0x00, 0x04, 0x00, 0x92, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x2b, // ...............+
	0x00, 0x04, 0x00, 0x4e, 0x00, 0x00, 0x00, 0x98, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x2b, // ...N...........+
	0x00, 0x04, 0x00, 0x71, 0x00, 0x00, 0x00, 0xb0, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x20, // ...q........... 
	0x00, 0x04, 0x00, 0xb1, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x2b, // ...............+
	0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0xb8, 0x00, 0x00, 0x00, 0x17, 0xb7, 0xd1, 0x38, 0x20, // ..............8 
	0x00, 0x04, 0x00, 0xdb, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x8d, 0x00, 0x00, 0x00, 0x20, // ............... 
	0x00, 0x04, 0x00, 0x35, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x3b, // ...5.......#...;
	0x00, 0x04, 0x00, 0x35, 0x01, 0x00, 0x00, 0x36, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x20, // ...5...6....... 
	0x00, 0x04, 0x00, 0x42, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x3b, // ...B...........;
	0x00, 0x04, 0x00, 0x42, 0x01, 0x00, 0x00, 0x43, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x36, // ...B...C.......6
	0x00, 0x05, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, // ................
	0x00, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x05, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x06, // ...........=....
	0x00, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00, 0x42, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x08, // ...C...B...=....
	0x00, 0x00, 0x00, 0x46, 0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x23, // ...F...E...=...#
	0x00, 0x00, 0x00, 0x37, 0x01, 0x00, 0x00, 0x36, 0x01, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, // ...7...6...Q....
	0x00, 0x00, 0x00, 0xa8, 0x01, 0x00, 0x00, 0x37, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, // .......7.......Q
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xaa, 0x01, 0x00, 0x00, 0x37, 0x01, 0x00, 0x00, 0x01, // ...........7....
	0x00, 0x00, 0x00, 0x50, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xab, 0x01, 0x00, 0x00, 0xa8, // ...P............
	0x01, 0x00, 0x00, 0xaa, 0x01, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, 0x57, // .......x...V...W
	0x00, 0x00, 0x00, 0xbd, 0x01, 0x00, 0x00, 0x46, 0x00, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00, 0x58, // .......F...C...X
	0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xc0, 0x01, 0x00, 0x00, 0xbd, 0x01, 0x00, 0x00, 0xab, // ................
	0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x4f, 0x00, 0x08, 0x00, 0x0b, // .......x...O....
	0x00, 0x00, 0x00, 0xae, 0x01, 0x00, 0x00, 0xc0, 0x01, 0x00, 0x00, 0xc0, 0x01, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, // ...........Q....
	0x00, 0x00, 0x00, 0xb0, 0x01, 0x00, 0x00, 0x37, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, // .......7.......Q
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xb2, 0x01, 0x00, 0x00, 0x37, 0x01, 0x00, 0x00, 0x01, // ...........7....
	0x00, 0x00, 0x00, 0x50, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xb3, 0x01, 0x00, 0x00, 0xb0, // ...P............
	0x01, 0x00, 0x00, 0xb2, 0x01, 0x00, 0x00, 0x84, 0x00, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, 0x57, // ...........V...W
	0x00, 0x00, 0x00, 0xc7, 0x01, 0x00, 0x00, 0x46, 0x00, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00, 0x58, // .......F...C...X
	0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xca, 0x01, 0x00, 0x00, 0xc7, 0x01, 0x00, 0x00, 0xb3, // ................
	0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x78, 0x00, 0x00, 0x00, 0x4f, 0x00, 0x08, 0x00, 0x0b, // .......x...O....
	0x00, 0x00, 0x00, 0xb6, 0x01, 0x00, 0x00, 0xca, 0x01, 0x00, 0x00, 0xca, 0x01, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0xb1, // ...........A....
	0x00, 0x00, 0x00, 0x6e, 0x01, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00, 0xb0, // ...n............
	0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x6f, 0x01, 0x00, 0x00, 0x6e, // ...=.......o...n
	0x01, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0xb1, 0x00, 0x00, 0x00, 0x70, 0x01, 0x00, 0x00, 0x90, // ...A.......p....
	0x00, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00, 0xb0, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, // ...........=....
	0x00, 0x00, 0x00, 0x71, 0x01, 0x00, 0x00, 0x70, 0x01, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0xb1, // ...q...p...A....
	0x00, 0x00, 0x00, 0x72, 0x01, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00, 0xb0, // ...r............
	0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x73, 0x01, 0x00, 0x00, 0x72, // ...=.......s...r
	0x01, 0x00, 0x00, 0x50, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x74, 0x01, 0x00, 0x00, 0x6f, // ...P.......t...o
	0x01, 0x00, 0x00, 0x71, 0x01, 0x00, 0x00, 0x73, 0x01, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x0b, // ...q...s........
	0x00, 0x00, 0x00, 0x75, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0xae, // ...u............
	0x01, 0x00, 0x00, 0x74, 0x01, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0xb1, 0x00, 0x00, 0x00, 0x77, // ...t...A.......w
	0x01, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00, 0xb0, 0x00, 0x00, 0x00, 0x3d, // ...............=
	0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x78, 0x01, 0x00, 0x00, 0x77, 0x01, 0x00, 0x00, 0x41, // .......x...w...A
	0x00, 0x06, 0x00, 0xb1, 0x00, 0x00, 0x00, 0x79, 0x01, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x91, // .......y........
	0x00, 0x00, 0x00, 0xb0, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x7a, // .......=.......z
	0x01, 0x00, 0x00, 0x79, 0x01, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0xb1, 0x00, 0x00, 0x00, 0x7b, // ...y...A.......{
	0x01, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00, 0xb0, 0x00, 0x00, 0x00, 0x3d, // ...............=
	0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x7c, 0x01, 0x00, 0x00, 0x7b, 0x01, 0x00, 0x00, 0x50, // .......|...{...P
	0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x7d, 0x01, 0x00, 0x00, 0x78, 0x01, 0x00, 0x00, 0x7a, // .......}...x...z
	0x01, 0x00, 0x00, 0x7c, 0x01, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x7e, // ...|...........~
	0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0xb6, 0x01, 0x00, 0x00, 0x7d, // ...............}
	0x01, 0x00, 0x00, 0x41, 0x00, 0x05, 0x00, 0x92, 0x00, 0x00, 0x00, 0xdc, 0x01, 0x00, 0x00, 0x90, // ...A............
	0x00, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xdd, // .......=........
	0x01, 0x00, 0x00, 0xdc, 0x01, 0x00, 0x00, 0x4f, 0x00, 0x08, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xde, // .......O........
	0x01, 0x00, 0x00, 0xdd, 0x01, 0x00, 0x00, 0xdd, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x94, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xdf, // ................
	0x01, 0x00, 0x00, 0x75, 0x01, 0x00, 0x00, 0xde, 0x01, 0x00, 0x00, 0x41, 0x00, 0x05, 0x00, 0x92, // ...u.......A....
	0x00, 0x00, 0x00, 0xe0, 0x01, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x98, 0x00, 0x00, 0x00, 0x3d, // ...............=
	0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xe1, 0x01, 0x00, 0x00, 0xe0, 0x01, 0x00, 0x00, 0x4f, // ...............O
	0x00, 0x08, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xe2, 0x01, 0x00, 0x00, 0xe1, 0x01, 0x00, 0x00, 0xe1, // ................
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x94, // ................
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xe3, 0x01, 0x00, 0x00, 0x75, 0x01, 0x00, 0x00, 0xe2, // ...........u....
	0x01, 0x00, 0x00, 0x41, 0x00, 0x05, 0x00, 0x92, 0x00, 0x00, 0x00, 0xe4, 0x01, 0x00, 0x00, 0x90, // ...A............
	0x00, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xe5, // .......=........
	0x01, 0x00, 0x00, 0xe4, 0x01, 0x00, 0x00, 0x4f, 0x00, 0x08, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xe6, // .......O........
	0x01, 0x00, 0x00, 0xe5, 0x01, 0x00, 0x00, 0xe5, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x94, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xe7, // ................
	0x01, 0x00, 0x00, 0x7e, 0x01, 0x00, 0x00, 0xe6, 0x01, 0x00, 0x00, 0x41, 0x00, 0x05, 0x00, 0x92, // ...~.......A....
	0x00, 0x00, 0x00, 0xe8, 0x01, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x98, 0x00, 0x00, 0x00, 0x3d, // ...............=
	0x00, 0x04, 0x00, 0x0e, 0x00, 0x00, 0x00, 0xe9, 0x01, 0x00, 0x00, 0xe8, 0x01, 0x00, 0x00, 0x4f, // ...............O
	0x00, 0x08, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xea, 0x01, 0x00, 0x00, 0xe9, 0x01, 0x00, 0x00, 0xe9, // ................
	0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x94, // ................
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xeb, 0x01, 0x00, 0x00, 0x7e, 0x01, 0x00, 0x00, 0xea, // ...........~....
	0x01, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xee, 0x01, 0x00, 0x00, 0xdf, // ................
	0x01, 0x00, 0x00, 0xe3, 0x01, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xf1, // ................
	0x01, 0x00, 0x00, 0xe7, 0x01, 0x00, 0x00, 0xeb, 0x01, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0xb1, // ...........A....
	0x00, 0x00, 0x00, 0xf2, 0x01, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x98, 0x00, 0x00, 0x00, 0xb0, // ................
	0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0xf3, 0x01, 0x00, 0x00, 0xf2, // ...=............
	0x01, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xf6, 0x01, 0x00, 0x00, 0xdf, // ................
	0x01, 0x00, 0x00, 0xe3, 0x01, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xf8, // ................
	0x01, 0x00, 0x00, 0xee, 0x01, 0x00, 0x00, 0xb8, 0x00, 0x00, 0x00, 0x88, 0x00, 0x05, 0x00, 0x07, // ................
	0x00, 0x00, 0x00, 0xf9, 0x01, 0x00, 0x00, 0xf6, 0x01, 0x00, 0x00, 0xf8, 0x01, 0x00, 0x00, 0x0c, // ................
	0x00, 0x06, 0x00, 0x07, 0x00, 0x00, 0x00, 0xfa, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04, // ................
	0x00, 0x00, 0x00, 0xf9, 0x01, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xfb, // ................
	0x01, 0x00, 0x00, 0xf3, 0x01, 0x00, 0x00, 0xfa, 0x01, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0xb1, // ...........A....
	0x00, 0x00, 0x00, 0xfc, 0x01, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x98, 0x00, 0x00, 0x00, 0xb0, // ................
	0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0xfd, 0x01, 0x00, 0x00, 0xfc, // ...=............
	0x01, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0xe7, // ................
	0x01, 0x00, 0x00, 0xeb, 0x01, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x02, // ................
	0x02, 0x00, 0x00, 0xf1, 0x01, 0x00, 0x00, 0xb8, 0x00, 0x00, 0x00, 0x88, 0x00, 0x05, 0x00, 0x07, // ................
	0x00, 0x00, 0x00, 0x03, 0x02, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x0c, // ................
	0x00, 0x06, 0x00, 0x07, 0x00, 0x00, 0x00, 0x04, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x04, // ................
	0x00, 0x00, 0x00, 0x03, 0x02, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x05, // ................
	0x02, 0x00, 0x00, 0xfd, 0x01, 0x00, 0x00, 0x04, 0x02, 0x00, 0x00, 0x50, 0x00, 0x06, 0x00, 0x0b, // ...........P....
	0x00, 0x00, 0x00, 0x15, 0x02, 0x00, 0x00, 0xee, 0x01, 0x00, 0x00, 0xee, 0x01, 0x00, 0x00, 0xee, // ................
	0x01, 0x00, 0x00, 0x50, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x09, 0x02, 0x00, 0x00, 0xfb, // ...P............
	0x01, 0x00, 0x00, 0xfb, 0x01, 0x00, 0x00, 0xfb, 0x01, 0x00, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x0b, // ................
	0x00, 0x00, 0x00, 0x1b, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x75, // ...............u
	0x01, 0x00, 0x00, 0x15, 0x02, 0x00, 0x00, 0x09, 0x02, 0x00, 0x00, 0x50, 0x00, 0x06, 0x00, 0x0b, // ...........P....
	0x00, 0x00, 0x00, 0x21, 0x02, 0x00, 0x00, 0xf1, 0x01, 0x00, 0x00, 0xf1, 0x01, 0x00, 0x00, 0xf1, // ...!............
	0x01, 0x00, 0x00, 0x50, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x0e, 0x02, 0x00, 0x00, 0x05, // ...P............
	0x02, 0x00, 0x00, 0x05, 0x02, 0x00, 0x00, 0x05, 0x02, 0x00, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x0b, // ................
	0x00, 0x00, 0x00, 0x27, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x7e, // ...'...........~
	0x01, 0x00, 0x00, 0x21, 0x02, 0x00, 0x00, 0x0e, 0x02, 0x00, 0x00, 0x41, 0x00, 0x05, 0x00, 0xdb, // ...!.......A....
	0x00, 0x00, 0x00, 0x2b, 0x02, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x53, 0x00, 0x00, 0x00, 0x3d, // ...+.......S...=
	0x00, 0x04, 0x00, 0x8d, 0x00, 0x00, 0x00, 0x2c, 0x02, 0x00, 0x00, 0x2b, 0x02, 0x00, 0x00, 0x51, // .......,...+...Q
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x2d, 0x02, 0x00, 0x00, 0x1b, 0x02, 0x00, 0x00, 0x00, // .......-........
	0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x2e, 0x02, 0x00, 0x00, 0x1b, // ...Q............
	0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x2f, // .......Q......./
	0x02, 0x00, 0x00, 0x1b, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x50, 0x00, 0x07, 0x00, 0x0e, // ...........P....
	0x00, 0x00, 0x00, 0x30, 0x02, 0x00, 0x00, 0x2d, 0x02, 0x00, 0x00, 0x2e, 0x02, 0x00, 0x00, 0x2f, // ...0...-......./
	0x02, 0x00, 0x00, 0x84, 0x00, 0x00, 0x00, 0x91, 0x00, 0x05, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x31, // ...............1
	0x02, 0x00, 0x00, 0x2c, 0x02, 0x00, 0x00, 0x30, 0x02, 0x00, 0x00, 0x41, 0x00, 0x05, 0x00, 0xdb, // ...,...0...A....
	0x00, 0x00, 0x00, 0x32, 0x02, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x4f, 0x00, 0x00, 0x00, 0x3d, // ...2.......O...=
	0x00, 0x04, 0x00, 0x8d, 0x00, 0x00, 0x00, 0x33, 0x02, 0x00, 0x00, 0x32, 0x02, 0x00, 0x00, 0x51, // .......3...2...Q
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x34, 0x02, 0x00, 0x00, 0x27, 0x02, 0x00, 0x00, 0x00, // .......4...'....
	0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x35, 0x02, 0x00, 0x00, 0x27, // ...Q.......5...'
	0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x36, // .......Q.......6
	0x02, 0x00, 0x00, 0x27, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x50, 0x00, 0x07, 0x00, 0x0e, // ...'.......P....
	0x00, 0x00, 0x00, 0x37, 0x02, 0x00, 0x00, 0x34, 0x02, 0x00, 0x00, 0x35, 0x02, 0x00, 0x00, 0x36, // ...7...4...5...6
	0x02, 0x00, 0x00, 0x84, 0x00, 0x00, 0x00, 0x91, 0x00, 0x05, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x38, // ...............8
	0x02, 0x00, 0x00, 0x33, 0x02, 0x00, 0x00, 0x37, 0x02, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x0e, // ...3...7........
	0x00, 0x00, 0x00, 0x39, 0x02, 0x00, 0x00, 0x31, 0x02, 0x00, 0x00, 0x38, 0x02, 0x00, 0x00, 0x4f, // ...9...1...8...O
	0x00, 0x08, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x3a, 0x02, 0x00, 0x00, 0x39, 0x02, 0x00, 0x00, 0x39, // .......:...9...9
	0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x41, // ...............A
	0x00, 0x06, 0x00, 0xb1, 0x00, 0x00, 0x00, 0x8a, 0x01, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x91, // ................
	0x00, 0x00, 0x00, 0xb0, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x8b, // .......=........
	0x01, 0x00, 0x00, 0x8a, 0x01, 0x00, 0x00, 0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x8c, // ................
	0x01, 0x00, 0x00, 0x84, 0x00, 0x00, 0x00, 0x8b, 0x01, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0xb1, // ...........A....
	0x00, 0x00, 0x00, 0x8d, 0x01, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00, 0xb0, // ................
	0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x8e, 0x01, 0x00, 0x00, 0x8d, // ...=............
	0x01, 0x00, 0x00, 0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x8f, 0x01, 0x00, 0x00, 0x84, // ................
	0x00, 0x00, 0x00, 0x8e, 0x01, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0xb1, 0x00, 0x00, 0x00, 0x90, // .......A........
	0x01, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x91, 0x00, 0x00, 0x00, 0xb0, 0x00, 0x00, 0x00, 0x3d, // ...............=
	0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x91, 0x01, 0x00, 0x00, 0x90, 0x01, 0x00, 0x00, 0x88, // ................
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x92, 0x01, 0x00, 0x00, 0x84, 0x00, 0x00, 0x00, 0x91, // ................
	0x01, 0x00, 0x00, 0x50, 0x00, 0x06, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x93, 0x01, 0x00, 0x00, 0x8c, // ...P............
	0x01, 0x00, 0x00, 0x8f, 0x01, 0x00, 0x00, 0x92, 0x01, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x0b, // ................
	0x00, 0x00, 0x00, 0x94, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x00, 0x00, 0x3a, // ...............:
	0x02, 0x00, 0x00, 0x93, 0x01, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x95, // .......Q........
	0x01, 0x00, 0x00, 0x94, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, // ...........Q....
	0x00, 0x00, 0x00, 0x96, 0x01, 0x00, 0x00, 0x94, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x51, // ...............Q
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x97, 0x01, 0x00, 0x00, 0x94, 0x01, 0x00, 0x00, 0x02, // ................
	0x00, 0x00, 0x00, 0x50, 0x00, 0x07, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x98, 0x01, 0x00, 0x00, 0x95, // ...P............
	0x01, 0x00, 0x00, 0x96, 0x01, 0x00, 0x00, 0x97, 0x01, 0x00, 0x00, 0x84, 0x00, 0x00, 0x00, 0x3e, // ...............>
	0x00, 0x03, 0x00, 0x43, 0x01, 0x00, 0x00, 0x98, 0x01, 0x00, 0x00, 0xfd, 0x00, 0x01, 0x00, 0x38, // ...C...........8
	0x00, 0x01, 0x00, 0x00, 0x00, 0xa0, 0x00,                                                       // .......
};
static const bgfx::EmbeddedShader fs_pp_stereo_anaglyph_lin_gamma_dyndesat_st = BGFX_EMBEDDED_SHADER(fs_pp_stereo_anaglyph_lin_gamma_dyndesat_st);
