// Flasher Shaders

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Build of vertex shader from vs_flasher.sc to vs_flasher_clip with options: CLIP
static const uint8_t vs_flasher_clip_mtl[1058] =
{
	0x56, 0x53, 0x48, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x11, 0xe4, 0xa0, 0x91, 0x02, 0x00, 0x0a, 0x63, // VSH............c
	0x6c, 0x69, 0x70, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x02, 0x01, 0x40, 0x00, 0x01, 0x00, 0x00, // lip_plane..@....
	0x00, 0x00, 0x00, 0x10, 0x6d, 0x61, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x56, 0x69, 0x65, 0x77, // ....matWorldView
	0x50, 0x72, 0x6f, 0x6a, 0x04, 0x01, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0xd8, 0x03, // Proj............
	0x00, 0x00, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x6d, 0x65, 0x74, 0x61, // ..#include <meta
	0x6c, 0x5f, 0x73, 0x74, 0x64, 0x6c, 0x69, 0x62, 0x3e, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, // l_stdlib>.#inclu
	0x64, 0x65, 0x20, 0x3c, 0x73, 0x69, 0x6d, 0x64, 0x2f, 0x73, 0x69, 0x6d, 0x64, 0x2e, 0x68, 0x3e, // de <simd/simd.h>
	0x0a, 0x0a, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, // ..using namespac
	0x65, 0x20, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, // e metal;..struct
	0x20, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, //  _Global.{.    f
	0x6c, 0x6f, 0x61, 0x74, 0x34, 0x78, 0x34, 0x20, 0x6d, 0x61, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, // loat4x4 matWorld
	0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, // ViewProj;.    fl
	0x6f, 0x61, 0x74, 0x34, 0x20, 0x63, 0x6c, 0x69, 0x70, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x3b, // oat4 clip_plane;
	0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, // .};..struct xlat
	0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x0a, 0x7b, 0x0a, 0x09, 0x66, // MtlMain_out.{..f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x5f, // loat bgfx_metal_
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x20, 0x5b, 0x5b, 0x70, 0x6f, 0x69, 0x6e, // pointSize [[poin
	0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5d, 0x5d, 0x20, 0x3d, 0x20, 0x31, 0x3b, 0x0a, 0x20, 0x20, // t_size]] = 1;.  
	0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x6f, //   float _entryPo
	0x69, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x5f, 0x63, 0x6c, 0x69, 0x70, // intOutput_v_clip
	0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x5b, 0x5b, 0x75, 0x73, 0x65, 0x72, 0x28, // Distance [[user(
	0x6c, 0x6f, 0x63, 0x6e, 0x30, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, // locn0)]];.    fl
	0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, // oat3 _entryPoint
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6f, // Output_v_tablePo
	0x73, 0x20, 0x5b, 0x5b, 0x75, 0x73, 0x65, 0x72, 0x28, 0x6c, 0x6f, 0x63, 0x6e, 0x31, 0x29, 0x5d, // s [[user(locn1)]
	0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x5f, 0x65, // ];.    float2 _e
	0x6e, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, // ntryPointOutput_
	0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x5b, 0x5b, 0x75, 0x73, // v_texcoord0 [[us
	0x65, 0x72, 0x28, 0x6c, 0x6f, 0x63, 0x6e, 0x32, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, // er(locn2)]];.   
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x67, 0x6c, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, //  float4 gl_Posit
	0x69, 0x6f, 0x6e, 0x20, 0x5b, 0x5b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5d, 0x5d, // ion [[position]]
	0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x78, 0x6c, 0x61, // ;.};..struct xla
	0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x0a, 0x7b, 0x0a, 0x20, 0x20, // tMtlMain_in.{.  
	0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x61, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, //   float3 a_posit
	0x69, 0x6f, 0x6e, 0x20, 0x5b, 0x5b, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x28, // ion [[attribute(
	0x30, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, // 0)]];.    float2
	0x20, 0x61, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x5b, 0x5b, 0x61, //  a_texcoord0 [[a
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x28, 0x31, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, // ttribute(1)]];.}
	0x3b, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x74, 0x65, 0x78, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, // ;..vertex xlatMt
	0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, // lMain_out xlatMt
	0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x28, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, // lMain(xlatMtlMai
	0x6e, 0x5f, 0x69, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x5b, 0x5b, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, // n_in in [[stage_
	0x69, 0x6e, 0x5d, 0x5d, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x20, 0x5f, // in]], constant _
	0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x26, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x20, 0x5b, // Global& _mtl_u [
	0x5b, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x29, 0x0a, 0x7b, 0x0a, // [buffer(0)]]).{.
	0x20, 0x20, 0x20, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, //     xlatMtlMain_
	0x6f, 0x75, 0x74, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x3d, 0x20, 0x7b, 0x7d, 0x3b, 0x0a, 0x20, 0x20, // out out = {};.  
	0x20, 0x20, 0x6f, 0x75, 0x74, 0x2e, 0x67, 0x6c, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, //   out.gl_Positio
	0x6e, 0x20, 0x3d, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x6d, 0x61, 0x74, 0x57, 0x6f, // n = _mtl_u.matWo
	0x72, 0x6c, 0x64, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x20, 0x2a, 0x20, 0x66, 0x6c, // rldViewProj * fl
	0x6f, 0x61, 0x74, 0x34, 0x28, 0x69, 0x6e, 0x2e, 0x61, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, // oat4(in.a_positi
	0x6f, 0x6e, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x6f, 0x75, // on, 1.0);.    ou
	0x74, 0x2e, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4f, 0x75, 0x74, // t._entryPointOut
	0x70, 0x75, 0x74, 0x5f, 0x76, 0x5f, 0x63, 0x6c, 0x69, 0x70, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, // put_v_clipDistan
	0x63, 0x65, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, // ce = dot(_mtl_u.
	0x63, 0x6c, 0x69, 0x70, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, // clip_plane, floa
	0x74, 0x34, 0x28, 0x69, 0x6e, 0x2e, 0x61, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, // t4(in.a_position
	0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x6f, 0x75, 0x74, // , 1.0));.    out
	0x2e, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x70, // ._entryPointOutp
	0x75, 0x74, 0x5f, 0x76, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x20, 0x3d, 0x20, // ut_v_tablePos = 
	0x69, 0x6e, 0x2e, 0x61, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x0a, 0x20, // in.a_position;. 
	0x20, 0x20, 0x20, 0x6f, 0x75, 0x74, 0x2e, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x69, //    out._entryPoi
	0x6e, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, // ntOutput_v_texco
	0x6f, 0x72, 0x64, 0x30, 0x20, 0x3d, 0x20, 0x69, 0x6e, 0x2e, 0x61, 0x5f, 0x74, 0x65, 0x78, 0x63, // ord0 = in.a_texc
	0x6f, 0x6f, 0x72, 0x64, 0x30, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, // oord0;.    retur
	0x6e, 0x20, 0x6f, 0x75, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x0a, 0x00, 0x02, 0x01, 0x00, 0x10, 0x00, // n out;.}........
	0x50, 0x00,                                                                                     // P.
};
static const uint8_t vs_flasher_clip_essl[6452] =
{
	0x56, 0x53, 0x48, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x11, 0xe4, 0xa0, 0x91, 0x00, 0x00, 0x21, 0x19, // VSH...........!.
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x33, 0x32, 0x30, 0x20, 0x65, // ..#version 320 e
	0x73, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, // s.#define attrib
	0x75, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x76, // ute in.#define v
	0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x75, 0x74, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, // arying out.preci
	0x73, 0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // sion highp float
	0x3b, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, // ;.precision high
	0x70, 0x20, 0x69, 0x6e, 0x74, 0x3b, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x73, // p int;.#define s
	0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // hadow2D(_sampler
	0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // , _coord) textur
	0x65, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, // e(_sampler, _coo
	0x72, 0x64, 0x29, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x73, 0x68, 0x61, 0x64, // rd).#define shad
	0x6f, 0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // ow2DProj(_sample
	0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, // r, _coord) textu
	0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, // reProj(_sampler,
	0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, //  _coord).attribu
	0x74, 0x65, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x61, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, // te vec3 a_positi
	0x6f, 0x6e, 0x3b, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x76, 0x65, // on;.attribute ve
	0x63, 0x32, 0x20, 0x61, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x3b, 0x0a, // c2 a_texcoord0;.
	0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x5f, // varying float v_
	0x63, 0x6c, 0x69, 0x70, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x3b, 0x0a, 0x76, 0x61, // clipDistance;.va
	0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x5f, 0x74, 0x61, 0x62, // rying vec3 v_tab
	0x6c, 0x65, 0x50, 0x6f, 0x73, 0x3b, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x76, // lePos;.varying v
	0x65, 0x63, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x3b, // ec2 v_texcoord0;
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, // .vec3 instMul(ve
	0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, // c3 _vec, mat3 _m
	0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, // tx) { return ( (
	0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, // _vec) * (_mtx) )
	0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, // ; }.vec3 instMul
	0x28, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, // (mat3 _mtx, vec3
	0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, //  _vec) { return 
	0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, // ( (_mtx) * (_vec
	0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, // ) ); }.vec4 inst
	0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, // Mul(vec4 _vec, m
	0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // at4 _mtx) { retu
	0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, // rn ( (_vec) * (_
	0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, // mtx) ); }.vec4 i
	0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, // nstMul(mat4 _mtx
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, // , vec4 _vec) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, // eturn ( (_mtx) *
	0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, //  (_vec) ); }.flo
	0x61, 0x74, 0x20, 0x72, 0x63, 0x70, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x61, 0x29, // at rcp(float _a)
	0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x5f, 0x61, //  { return 1.0/_a
	0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, // ; }.vec2 rcp(vec
	0x32, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // 2 _a) { return v
	0x65, 0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, // ec2(1.0)/_a; }.v
	0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x61, 0x29, // ec3 rcp(vec3 _a)
	0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x31, //  { return vec3(1
	0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x72, // .0)/_a; }.vec4 r
	0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // cp(vec4 _a) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, // turn vec4(1.0)/_
	0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, // a; }.vec2 vec2_s
	0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, // plat(float _x) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, //  return vec2(_x,
	0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, //  _x); }.vec3 vec
	0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, // 3_splat(float _x
	0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, // ) { return vec3(
	0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, // _x, _x, _x); }.v
	0x65, 0x63, 0x34, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, // ec4 vec4_splat(f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, // loat _x) { retur
	0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, // n vec4(_x, _x, _
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x32, 0x20, // x, _x); }.uvec2 
	0x75, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, // uvec2_splat(uint
	0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, //  _x) { return uv
	0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, // ec2(_x, _x); }.u
	0x76, 0x65, 0x63, 0x33, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, // vec3 uvec3_splat
	0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // (uint _x) { retu
	0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, // rn uvec3(_x, _x,
	0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x76, //  _x); }.uvec4 uv
	0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, // ec4_splat(uint _
	0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, // x) { return uvec
	0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, // 4(_x, _x, _x, _x
	0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, // ); }.mat4 mtxFro
	0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, // mRows(vec4 _0, v
	0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, // ec4 _1, vec4 _2,
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, //  vec4 _3).{.retu
	0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, // rn transpose(mat
	0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, // 4(_0, _1, _2, _3
	0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, // ) );.}.mat4 mtxF
	0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, // romCols(vec4 _0,
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, //  vec4 _1, vec4 _
	0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // 2, vec4 _3).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, // turn mat4(_0, _1
	0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, // , _2, _3);.}.mat
	0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, // 3 mtxFromRows(ve
	0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, // c3 _0, vec3 _1, 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // vec3 _2).{.retur
	0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x33, // n transpose(mat3
	0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x20, 0x29, 0x3b, 0x0a, // (_0, _1, _2) );.
	0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, // }.mat3 mtxFromCo
	0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, // ls(vec3 _0, vec3
	0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, //  _1, vec3 _2).{.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, // return mat3(_0, 
	0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, // _1, _2);.}.unifo
	0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, // rm vec4 u_viewRe
	0x63, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, // ct;.uniform vec4
	0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x54, 0x65, 0x78, 0x65, 0x6c, 0x3b, 0x0a, 0x75, 0x6e, //  u_viewTexel;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, // iform mat4 u_vie
	0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, // w;.uniform mat4 
	0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, // u_invView;.unifo
	0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, // rm mat4 u_proj;.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, // uniform mat4 u_i
	0x6e, 0x76, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // nvProj;.uniform 
	0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, // mat4 u_viewProj;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, // .uniform mat4 u_
	0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, // invViewProj;.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, // form mat4 u_mode
	0x6c, 0x5b, 0x33, 0x32, 0x5d, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, // l[32];.uniform m
	0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x3b, // at4 u_modelView;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, // .uniform mat4 u_
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, // modelViewProj;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x61, 0x6c, // niform vec4 u_al
	0x70, 0x68, 0x61, 0x52, 0x65, 0x66, 0x34, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, // phaRef4;.float s
	0x71, 0x72, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, // qr( float v).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // eturn v*v;.}.vec
	0x32, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x29, 0x0a, 0x7b, // 2 sqr( vec2 v).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // .return v*v;.}.v
	0x65, 0x63, 0x33, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x29, // ec3 sqr( vec3 v)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, // .{.return v*v;.}
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6d, 0x75, 0x6c, 0x5f, 0x77, 0x31, 0x28, 0x20, 0x76, 0x65, // .vec3 mul_w1( ve
	0x63, 0x33, 0x20, 0x76, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x29, 0x0a, 0x7b, 0x0a, // c3 v, mat4 m).{.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2e, 0x78, 0x2a, 0x6d, 0x5b, 0x30, 0x5d, 0x2e, // return v.x*m[0].
	0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x79, 0x2a, 0x6d, 0x5b, 0x31, 0x5d, 0x2e, // xyz + (v.y*m[1].
	0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x7a, 0x2a, 0x6d, 0x5b, 0x32, 0x5d, 0x2e, // xyz + (v.z*m[2].
	0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x6d, 0x5b, 0x33, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, // xyz + m[3].xyz))
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, // ;.}.float acos_a
	0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, // pprox_divPI( flo
	0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, // at v).{.float x 
	0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, // = abs(v);.if(1. 
	0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, // - x <= 0.0000610
	0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // 3515625).return 
	0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x20, 0x3a, // (v >= 0.) ? 0. :
	0x20, 0x31, 0x2e, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, //  1.;.float res =
	0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, //  ((-0.155972/3.1
	0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, // 4159265358979323
	0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, // 84626433832795) 
	0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, // * x + (1.56467/3
	0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, // .141592653589793
	0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, // 2384626433832795
	0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, // ) ) * sqrt(1. - 
	0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, // x);.return (v >=
	0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x20, //  0.) ? res : 1. 
	0x2d, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, // - res;.}.float a
	0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, // tan2_approx_div2
	0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x79, 0x2c, 0x20, 0x66, 0x6c, 0x6f, // PI( float y, flo
	0x61, 0x74, 0x20, 0x78, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, // at x).{.float ab
	0x73, 0x5f, 0x79, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, // s_y = abs(y);.fl
	0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, // oat abs_x = abs(
	0x78, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3c, 0x3d, 0x20, // x);.if(abs_x <= 
	0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, // 0.00006103515625
	0x20, 0x26, 0x26, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, //  && abs_y <= 0.0
	0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, // 0006103515625).r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x30, 0x2e, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // eturn 0.;.float 
	0x72, 0x20, 0x3d, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2d, 0x20, 0x61, 0x62, 0x73, // r = (abs_x - abs
	0x5f, 0x79, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2b, 0x20, 0x61, // _y) / (abs_x + a
	0x62, 0x73, 0x5f, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x6e, 0x67, // bs_y);.float ang
	0x6c, 0x65, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, // le = ((x < 0.) ?
	0x20, 0x28, 0x33, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x20, 0x3a, 0x20, 0x28, 0x31, 0x2e, 0x2f, 0x38, //  (3./8.) : (1./8
	0x2e, 0x29, 0x29, 0x0a, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x32, 0x31, 0x31, 0x38, 0x36, 0x38, 0x20, // .)).+ (0.211868 
	0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, // /(2.*3.141592653
	0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, // 5897932384626433
	0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x72, 0x20, 0x2a, 0x20, 0x72, 0x20, // 832795) * r * r 
	0x2d, 0x20, 0x30, 0x2e, 0x39, 0x38, 0x37, 0x33, 0x30, 0x35, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, // - 0.987305 /(2.*
	0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, // 3.14159265358979
	0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, // 3238462643383279
	0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, // 5)) * ((x < 0.) 
	0x3f, 0x20, 0x2d, 0x72, 0x20, 0x3a, 0x20, 0x72, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // ? -r : r);.retur
	0x6e, 0x20, 0x28, 0x79, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x61, 0x6e, // n (y < 0.) ? -an
	0x67, 0x6c, 0x65, 0x20, 0x3a, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // gle : angle;.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x73, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, // loat asin_approx
	0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, // _divPI( float v)
	0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, // .{.float x = abs
	0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, // (v);.if(1. - x <
	0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, // = 0.000061035156
	0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, // 25).return (v >=
	0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, //  0.) ? 0.5 : -0.
	0x35, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, // 5;.float res = (
	0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, // (-0.155972/3.141
	0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, // 5926535897932384
	0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, // 626433832795) * 
	0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, // x + (1.56467/3.1
	0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, // 4159265358979323
	0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, // 84626433832795) 
	0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, // ) * sqrt(1. - x)
	0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, // ;.return (v >= 0
	0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, // .) ? 0.5 - res :
	0x20, 0x2d, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, //  -0.5 + res;.}.v
	0x65, 0x63, 0x32, 0x20, 0x72, 0x61, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x72, // ec2 ray_to_equir
	0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x75, 0x76, 0x28, 0x20, 0x76, // ectangular_uv( v
	0x65, 0x63, 0x33, 0x20, 0x72, 0x61, 0x79, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // ec3 ray).{.retur
	0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x0a, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x61, 0x74, // n vec2(.0.5 + at
	0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, // an2_approx_div2P
	0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x79, 0x2c, 0x20, 0x72, 0x61, 0x79, 0x2e, 0x78, 0x29, 0x2c, // I(ray.y, ray.x),
	0x0a, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, // .acos_approx_div
	0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, // PI(ray.z));.}.fl
	0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x20, 0x66, 0x6c, 0x6f, // oat InvsRGB( flo
	0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, // at color).{.if (
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, 0x34, 0x35, // color <= 0.04045
	0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, // ).return color *
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x29, 0x3b, 0x0a, 0x65, 0x6c, //  (1.0/12.92);.el
	0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, // se.return pow(co
	0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, // lor * (1.0/1.055
	0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, // ) + (0.055/1.055
	0x29, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // ), 2.4);.}.float
	0x20, 0x49, 0x6e, 0x76, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, //  InvRec709( floa
	0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, // t color).{.if (c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x38, 0x31, 0x29, 0x0a, 0x72, // olor <= 0.081).r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, // eturn color * (1
	0x2e, 0x30, 0x2f, 0x34, 0x2e, 0x35, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, // .0/4.5);.else.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, // turn pow(color *
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, 0x20, 0x2b, 0x20, 0x28, //  (1.0/1.099) + (
	0x30, 0x2e, 0x30, 0x39, 0x39, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, 0x2c, 0x20, 0x31, 0x2e, // 0.099/1.099), 1.
	0x30, 0x2f, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // 0/0.45);.}.float
	0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, //  InvGamma( float
	0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, //  color).{.return
	0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, //  InvsRGB(color);
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, // .}.vec3 InvGamma
	0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, // ( vec3 color).{.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x49, 0x6e, 0x76, 0x47, // return vec3(InvG
	0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x49, 0x6e, // amma(color.x),In
	0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, // vGamma(color.y),
	0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, // InvGamma(color.z
	0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x54, 0x6f, // ));.}.vec3 InvTo
	0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // neMap( vec3 colo
	0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x69, 0x6e, 0x76, 0x5f, 0x32, // r).{.float inv_2
	0x62, 0x68, 0x20, 0x3d, 0x20, 0x30, 0x2e, 0x35, 0x2f, 0x30, 0x2e, 0x32, 0x35, 0x3b, 0x0a, 0x66, // bh = 0.5/0.25;.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x34, 0x2e, 0x30, 0x2a, 0x30, 0x2e, // loat bh = 4.0*0.
	0x32, 0x35, 0x20, 0x2d, 0x20, 0x32, 0x2e, 0x30, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // 25 - 2.0;.return
	0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2b, 0x20, //  (color - 1.0 + 
	0x73, 0x71, 0x72, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2a, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // sqrt(color*(colo
	0x72, 0x20, 0x2b, 0x20, 0x62, 0x68, 0x29, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x2a, // r + bh) + 1.0))*
	0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // inv_2bh;.}.float
	0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, //  sRGB( float f).
	0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, // {.float s;.if (f
	0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x33, 0x31, 0x33, 0x30, 0x38, 0x29, 0x0a, 0x73, //  <= 0.0031308).s
	0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, //  = 12.92 * f;.el
	0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x20, 0x2a, 0x20, 0x70, // se.s = 1.055 * p
	0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x34, 0x29, 0x20, 0x2d, // ow(f, 1.0/2.4) -
	0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, //  0.055;.return s
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, // ;.}.float Rec709
	0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, // ( float f).{.flo
	0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, // at s;.if (f <= 0
	0x2e, 0x30, 0x31, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x34, 0x2e, 0x35, 0x20, 0x2a, 0x20, // .018).s = 4.5 * 
	0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x39, // f;.else.s = 1.09
	0x39, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x34, 0x35, 0x29, // 9 * pow(f, 0.45)
	0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, //  - 0.099;.return
	0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x47, 0x61, //  s;.}.float FBGa
	0x6d, 0x6d, 0x61, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // mma( float color
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, // ).{.return sRGB(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, // color);.}.vec2 F
	0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, // BGamma( vec2 col
	0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, // or).{.return vec
	0x32, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, // 2(FBGamma(color.
	0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // x),FBGamma(color
	0x2e, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, // .y));.}.vec3 FBG
	0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // amma( vec3 color
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, // ).{.return vec3(
	0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, // FBGamma(color.x)
	0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, // ,FBGamma(color.y
	0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, // ),FBGamma(color.
	0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, // z));.}.vec3 FBGa
	0x6d, 0x6d, 0x61, 0x32, 0x32, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // mma22( vec3 colo
	0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, // r).{.return vec3
	0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x2c, 0x20, 0x31, 0x2e, // (pow(color.x, 1.
	0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // 0/2.2),pow(color
	0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, // .y, 1.0/2.2),pow
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, // (color.z, 1.0/2.
	0x32, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x54, // 2));.}.float FBT
	0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x29, // oneMap( float l)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6c, 0x20, 0x2a, 0x20, 0x28, 0x28, // .{.return l * ((
	0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, // l*0.25 + 1.0) / 
	0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // (l + 1.0));.}.ve
	0x63, 0x32, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, // c2 FBToneMap( ve
	0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // c2 color).{.floa
	0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, // t l = dot(color,
	0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2b, 0x30, 0x2e, // vec2(0.176204+0.
	0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x2c, 0x30, 0x2e, 0x38, 0x31, // 0108109*0.5,0.81
	0x32, 0x39, 0x38, 0x35, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, // 2985+0.0108109*0
	0x2e, 0x35, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, // .5));.return col
	0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, // or * ((l*0.25 + 
	0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, // 1.0) / (l + 1.0)
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, // );.}.vec3 FBTone
	0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, // Map( vec3 color)
	0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, // .{.float l = dot
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x31, 0x37, // (color,vec3(0.17
	0x36, 0x32, 0x30, 0x34, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2c, 0x30, 0x2e, // 6204,0.812985,0.
	0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // 0108109));.retur
	0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, // n color * ((l*0.
	0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, // 25 + 1.0) / (l +
	0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x41, //  1.0));.}.vec4 A
	0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // dditive( vec4 cB
	0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, // ase, vec4 cBlend
	0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, // , float percent)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, // .{.return cBase 
	0x2b, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, // + cBlend*percent
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, // ;.}.vec3 Screen 
	0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, // ( vec3 cBase, ve
	0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // c3 cBlend).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, // urn 1.0 - (1.0 -
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, //  cBase) * (1.0 -
	0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, //  cBlend);.}.vec4
	0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, //  Screen ( vec4 c
	0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // Base, vec4 cBlen
	0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, // d).{.return 1.0 
	0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, // - (1.0 - cBase) 
	0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, // * (1.0 - cBlend)
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, // ;.}.vec3 ScreenH
	0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, // DR ( vec3 cBase,
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, //  vec3 cBlend).{.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, // return max(1.0 -
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, //  (1.0 - cBase) *
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, //  (1.0 - cBlend),
	0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, //  vec3(0.,0.,0.))
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, // ;.}.vec4 ScreenH
	0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, // DR ( vec4 cBase,
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, //  vec4 cBlend).{.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, // return max(1.0 -
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, //  (1.0 - cBase) *
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, //  (1.0 - cBlend),
	0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, //  vec4(0.,0.,0.,0
	0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4d, 0x75, 0x6c, 0x74, // .));.}.vec4 Mult
	0x69, 0x70, 0x6c, 0x79, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, // iply ( vec4 cBas
	0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, // e, vec4 cBlend, 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, // float percent).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2a, 0x20, // .return cBase * 
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, // cBlend*percent;.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x20, 0x28, // }.vec4 Overlay (
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, //  vec4 cBase, vec
	0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, // 4 cBlend).{.vec4
	0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, //  cNew = step(0.5
	0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, // , cBase);.cNew =
	0x20, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, //  mix(cBase*cBlen
	0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, // d*2.0, 1.0-2.0*(
	0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, // 1.0-cBase)*(1.0-
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x3b, 0x0a, // cBlend), cNew);.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // return cNew;.}.v
	0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x48, 0x44, 0x52, 0x20, 0x28, // ec4 OverlayHDR (
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, //  vec4 cBase, vec
	0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, // 4 cBlend).{.vec4
	0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, //  cNew = step(0.5
	0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, // , cBase);.cNew =
	0x20, 0x6d, 0x61, 0x78, 0x28, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, //  max(mix(cBase*c
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, // Blend*2.0, 1.0-2
	0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, // .0*(1.0-cBase)*(
	0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, // 1.0-cBlend), cNe
	0x77, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, // w), vec4(0.,0.,0
	0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, // .,0.));.return c
	0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x73, 0x5f, // New;.}.vec3 cos_
	0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, // hemisphere_sampl
	0x65, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, // e( vec2 t).{.flo
	0x61, 0x74, 0x20, 0x70, 0x68, 0x69, 0x20, 0x3d, 0x20, 0x74, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x28, // at phi = t.y * (
	0x32, 0x2e, 0x30, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, // 2.0*3.1415926535
	0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, // 8979323846264338
	0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, // 32795);.float co
	0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, // sTheta = sqrt(1.
	0x30, 0x20, 0x2d, 0x20, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // 0 - t.x);.float 
	0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, // sinTheta = sqrt(
	0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x70, 0x2c, 0x63, // t.x);.float sp,c
	0x70, 0x3b, 0x0a, 0x7b, 0x73, 0x70, 0x3d, 0x73, 0x69, 0x6e, 0x28, 0x70, 0x68, 0x69, 0x29, 0x3b, // p;.{sp=sin(phi);
	0x63, 0x70, 0x3d, 0x63, 0x6f, 0x73, 0x28, 0x70, 0x68, 0x69, 0x29, 0x3b, 0x7d, 0x3b, 0x0a, 0x72, // cp=cos(phi);};.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x63, 0x70, 0x20, 0x2a, 0x20, // eturn vec3(cp * 
	0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, // sinTheta, cosThe
	0x74, 0x61, 0x2c, 0x20, 0x73, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, // ta, sp * sinThet
	0x61, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x6f, 0x74, 0x61, 0x74, // a);.}.vec3 rotat
	0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x70, 0x70, 0x65, // e_to_vector_uppe
	0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x76, 0x65, 0x63, // r( vec3 vec, vec
	0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x28, 0x6e, // 3 normal).{.if(n
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x3e, 0x20, 0x2d, 0x30, 0x2e, 0x39, 0x39, 0x39, // ormal.y > -0.999
	0x39, 0x39, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x20, 0x3d, 0x20, // 99).{.float h = 
	0x31, 0x2e, 0x30, 0x2f, 0x28, 0x31, 0x2e, 0x30, 0x2b, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, // 1.0/(1.0+normal.
	0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x20, 0x3d, 0x20, 0x68, // y);.float hz = h
	0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // *normal.z;.float
	0x20, 0x68, 0x7a, 0x78, 0x20, 0x3d, 0x20, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, //  hzx = hz*normal
	0x2e, 0x78, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, // .x;.return vec3(
	0x0a, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, // .vec.x * (normal
	0x2e, 0x79, 0x2b, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x29, 0x20, // .y+hz*normal.z) 
	0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, // + vec.y * normal
	0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, // .x - vec.z * hzx
	0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, // ,.vec.y * normal
	0x2e, 0x79, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, // .y - vec.x * nor
	0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, // mal.x - vec.z * 
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, // normal.z,.vec.y 
	0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, // * normal.z - vec
	0x2e, 0x78, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, // .x * hzx + vec.z
	0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x2a, 0x6e, //  * (normal.y+h*n
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, // ormal.x*normal.x
	0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, // ));.}.else retur
	0x6e, 0x20, 0x2d, 0x76, 0x65, 0x63, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // n -vec;.}.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x61, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x56, // m mat4 matWorldV
	0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // iewProj;.uniform
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x6c, 0x69, 0x70, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, //  vec4 clip_plane
	0x3b, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, // ;.void main().{.
	0x76, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x20, 0x3d, 0x20, 0x61, 0x5f, 0x70, // v_tablePos = a_p
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x76, 0x5f, 0x74, // osition.xyz;.v_t
	0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x3d, 0x20, 0x61, 0x5f, 0x74, 0x65, 0x78, // excoord0 = a_tex
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x3b, 0x0a, 0x76, 0x5f, 0x63, 0x6c, 0x69, 0x70, 0x44, 0x69, // coord0;.v_clipDi
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6c, 0x69, // stance = dot(cli
	0x70, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x61, 0x5f, // p_plane, vec4(a_
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, // position, 1.0));
	0x0a, 0x67, 0x6c, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x28, // .gl_Position = (
	0x20, 0x28, 0x6d, 0x61, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, //  (matWorldViewPr
	0x6f, 0x6a, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x61, 0x5f, 0x70, 0x6f, // oj) * (vec4(a_po
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x20, 0x29, 0x3b, // sition, 1.0)) );
	0x0a, 0x7d, 0x0a, 0x00,                                                                         // .}..
};
static const uint8_t vs_flasher_clip_glsl[6796] =
{
	0x56, 0x53, 0x48, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x11, 0xe4, 0xa0, 0x91, 0x00, 0x00, 0x79, 0x1a, // VSH...........y.
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x34, 0x34, 0x30, 0x0a, 0x23, // ..#version 440.#
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, // define texture2D
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, //           textur
	0x65, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // e.#define textur
	0x65, 0x32, 0x44, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, // e2DLod       tex
	0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, // tureLod.#define 
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, 0x20, // texture2DGrad   
	0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, //    textureGrad.#
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, // define texture2D
	0x50, 0x72, 0x6f, 0x6a, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // ProjLod   textur
	0x65, 0x50, 0x72, 0x6f, 0x6a, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, // eProjLod.#define
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, //  texture2DProjGr
	0x61, 0x64, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x47, // ad  textureProjG
	0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, // rad.#define text
	0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, // ureCubeLod     t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, // extureLod.#defin
	0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x47, 0x72, 0x61, // e textureCubeGra
	0x64, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x47, 0x72, 0x61, 0x64, // d    textureGrad
	0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // .#define texture
	0x33, 0x44, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, // 3D          text
	0x75, 0x72, 0x65, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, // ure.#define text
	0x75, 0x72, 0x65, 0x32, 0x44, 0x4c, 0x6f, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x20, 0x74, // ure2DLodOffset t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x0a, // extureLodOffset.
	0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, // #define attribut
	0x65, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x76, 0x61, 0x72, // e in.#define var
	0x79, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x75, 0x74, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, // ying out.#define
	0x20, 0x62, 0x67, 0x66, 0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x28, 0x5f, 0x73, //  bgfxShadow2D(_s
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, // ampler, _coord) 
	0x20, 0x20, 0x20, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x74, //     vec4_splat(t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, // exture(_sampler,
	0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x29, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, //  _coord) ).#defi
	0x6e, 0x65, 0x20, 0x62, 0x67, 0x66, 0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x50, // ne bgfxShadow2DP
	0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, // roj(_sampler, _c
	0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, // oord) vec4_splat
	0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, // (textureProj(_sa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x29, // mpler, _coord) )
	0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // .attribute vec3 
	0x61, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x0a, 0x61, 0x74, 0x74, 0x72, // a_position;.attr
	0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x61, 0x5f, 0x74, 0x65, 0x78, // ibute vec2 a_tex
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x3b, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, // coord0;.varying 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x5f, 0x63, 0x6c, 0x69, 0x70, 0x44, 0x69, 0x73, 0x74, // float v_clipDist
	0x61, 0x6e, 0x63, 0x65, 0x3b, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x65, // ance;.varying ve
	0x63, 0x33, 0x20, 0x76, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x3b, 0x0a, 0x76, // c3 v_tablePos;.v
	0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, // arying vec2 v_te
	0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, // xcoord0;.vec3 in
	0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, // stMul(vec3 _vec,
	0x20, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, //  mat3 _mtx) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, // turn ( (_vec) * 
	0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, // (_mtx) ); }.vec3
	0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, //  instMul(mat3 _m
	0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, // tx, vec3 _vec) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, //  return ( (_mtx)
	0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, //  * (_vec) ); }.v
	0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x34, // ec4 instMul(vec4
	0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, //  _vec, mat4 _mtx
	0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, // ) { return ( (_v
	0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, // ec) * (_mtx) ); 
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, // }.vec4 instMul(m
	0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, // at4 _mtx, vec4 _
	0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, // vec) { return ( 
	0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, // (_mtx) * (_vec) 
	0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, 0x70, 0x28, 0x66, // ); }.float rcp(f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, // loat _a) { retur
	0x6e, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, // n 1.0/_a; }.vec2
	0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, //  rcp(vec2 _a) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, 0x29, // return vec2(1.0)
	0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x70, 0x28, // /_a; }.vec3 rcp(
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, // vec3 _a) { retur
	0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, // n vec3(1.0)/_a; 
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, // }.vec4 rcp(vec4 
	0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, // _a) { return vec
	0x34, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, // 4(1.0)/_a; }.vec
	0x32, 0x20, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, // 2 vec2_splat(flo
	0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // at _x) { return 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, // vec2(_x, _x); }.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, // vec3 vec3_splat(
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // float _x) { retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, // rn vec3(_x, _x, 
	0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, 0x65, 0x63, 0x34, // _x); }.vec4 vec4
	0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, // _splat(float _x)
	0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, //  { return vec4(_
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, // x, _x, _x, _x); 
	0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, // }.uvec2 uvec2_sp
	0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, // lat(uint _x) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, // eturn uvec2(_x, 
	0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, 0x75, 0x76, 0x65, // _x); }.uvec3 uve
	0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, // c3_splat(uint _x
	0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, // ) { return uvec3
	0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, // (_x, _x, _x); }.
	0x75, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, // uvec4 uvec4_spla
	0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // t(uint _x) { ret
	0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, // urn uvec4(_x, _x
	0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x6d, 0x61, 0x74, // , _x, _x); }.mat
	0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, // 4 mtxFromRows(ve
	0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, // c4 _0, vec4 _1, 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, // vec4 _2, vec4 _3
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, // ).{.return trans
	0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, // pose(mat4(_0, _1
	0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, // , _2, _3) );.}.m
	0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, // at4 mtxFromCols(
	0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, // vec4 _0, vec4 _1
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // , vec4 _2, vec4 
	0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, // _3).{.return mat
	0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, // 4(_0, _1, _2, _3
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, // );.}.mat3 mtxFro
	0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, // mRows(vec3 _0, v
	0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, // ec3 _1, vec3 _2)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, // .{.return transp
	0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, // ose(mat3(_0, _1,
	0x20, 0x5f, 0x32, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, //  _2) );.}.mat3 m
	0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, // txFromCols(vec3 
	0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, // _0, vec3 _1, vec
	0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, // 3 _2).{.return m
	0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x3b, // at3(_0, _1, _2);
	0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // .}.uniform vec4 
	0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // u_viewRect;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x54, // orm vec4 u_viewT
	0x65, 0x78, 0x65, 0x6c, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, // exel;.uniform ma
	0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, // t4 u_view;.unifo
	0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, // rm mat4 u_invVie
	0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, // w;.uniform mat4 
	0x75, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // u_proj;.uniform 
	0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, // mat4 u_invProj;.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, // uniform mat4 u_v
	0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // iewProj;.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x50, //  mat4 u_invViewP
	0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, // roj;.uniform mat
	0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, 0x3b, 0x0a, 0x75, // 4 u_model[32];.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, // niform mat4 u_mo
	0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // delView;.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, //  mat4 u_modelVie
	0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, // wProj;.uniform v
	0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x66, 0x34, 0x3b, // ec4 u_alphaRef4;
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, // .float sqr( floa
	0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, // t v).{.return v*
	0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x76, // v;.}.vec2 sqr( v
	0x65, 0x63, 0x32, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // ec2 v).{.return 
	0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x73, 0x71, 0x72, 0x28, // v*v;.}.vec3 sqr(
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, //  vec3 v).{.retur
	0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6d, 0x75, // n v*v;.}.vec3 mu
	0x6c, 0x5f, 0x77, 0x31, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x2c, 0x20, 0x6d, 0x61, // l_w1( vec3 v, ma
	0x74, 0x34, 0x20, 0x6d, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // t4 m).{.return v
	0x2e, 0x78, 0x2a, 0x6d, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, // .x*m[0].xyz + (v
	0x2e, 0x79, 0x2a, 0x6d, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, // .y*m[1].xyz + (v
	0x2e, 0x7a, 0x2a, 0x6d, 0x5b, 0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x6d, 0x5b, // .z*m[2].xyz + m[
	0x33, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // 3].xyz));.}.floa
	0x74, 0x20, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, // t acos_approx_di
	0x76, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, // vPI( float v).{.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, // float x = abs(v)
	0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, // ;.if(1. - x <= 0
	0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, // .00006103515625)
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, // .return (v >= 0.
	0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, // ) ? 0. : 1.;.flo
	0x61, 0x74, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, // at res = ((-0.15
	0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, // 5972/3.141592653
	0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, // 5897932384626433
	0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, // 832795) * x + (1
	0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, // .56467/3.1415926
	0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, // 5358979323846264
	0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, // 33832795) ) * sq
	0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // rt(1. - x);.retu
	0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x72, // rn (v >= 0.) ? r
	0x65, 0x73, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, // es : 1. - res;.}
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, // .float atan2_app
	0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, // rox_div2PI( floa
	0x74, 0x20, 0x79, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x29, 0x0a, 0x7b, 0x0a, // t y, float x).{.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3d, 0x20, 0x61, 0x62, // float abs_y = ab
	0x73, 0x28, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, // s(y);.float abs_
	0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x78, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x61, // x = abs(x);.if(a
	0x62, 0x73, 0x5f, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, // bs_x <= 0.000061
	0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x20, 0x26, 0x26, 0x20, 0x61, 0x62, 0x73, 0x5f, // 03515625 && abs_
	0x79, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, // y <= 0.000061035
	0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x30, 0x2e, // 15625).return 0.
	0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x61, 0x62, 0x73, // ;.float r = (abs
	0x5f, 0x78, 0x20, 0x2d, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x61, // _x - abs_y) / (a
	0x62, 0x73, 0x5f, 0x78, 0x20, 0x2b, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x3b, 0x0a, 0x66, // bs_x + abs_y);.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x78, // loat angle = ((x
	0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x28, 0x33, 0x2e, 0x2f, 0x38, 0x2e, 0x29, //  < 0.) ? (3./8.)
	0x20, 0x3a, 0x20, 0x28, 0x31, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x29, 0x0a, 0x2b, 0x20, 0x28, 0x30, //  : (1./8.)).+ (0
	0x2e, 0x32, 0x31, 0x31, 0x38, 0x36, 0x38, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, // .211868 /(2.*3.1
	0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, // 4159265358979323
	0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, // 84626433832795) 
	0x2a, 0x20, 0x72, 0x20, 0x2a, 0x20, 0x72, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x39, 0x38, 0x37, 0x33, // * r * r - 0.9873
	0x30, 0x35, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, // 05 /(2.*3.141592
	0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, // 6535897932384626
	0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x28, // 433832795)) * ((
	0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x72, 0x20, 0x3a, 0x20, 0x72, // x < 0.) ? -r : r
	0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x79, 0x20, 0x3c, 0x20, 0x30, // );.return (y < 0
	0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3a, 0x20, 0x61, 0x6e, // .) ? -angle : an
	0x67, 0x6c, 0x65, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x73, 0x69, // gle;.}.float asi
	0x6e, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x20, // n_approx_divPI( 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // float v).{.float
	0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, //  x = abs(v);.if(
	0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, // 1. - x <= 0.0000
	0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, // 6103515625).retu
	0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, // rn (v >= 0.) ? 0
	0x2e, 0x35, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // .5 : -0.5;.float
	0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, //  res = ((-0.1559
	0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, // 72/3.14159265358
	0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, // 9793238462643383
	0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, // 2795) * x + (1.5
	0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, // 6467/3.141592653
	0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, // 5897932384626433
	0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, // 832795) ) * sqrt
	0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // (1. - x);.return
	0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, //  (v >= 0.) ? 0.5
	0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, //  - res : -0.5 + 
	0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x61, 0x79, 0x5f, // res;.}.vec2 ray_
	0x74, 0x6f, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x75, 0x6c, // to_equirectangul
	0x61, 0x72, 0x5f, 0x75, 0x76, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x61, 0x79, 0x29, // ar_uv( vec3 ray)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x0a, // .{.return vec2(.
	0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, // 0.5 + atan2_appr
	0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x79, 0x2c, // ox_div2PI(ray.y,
	0x20, 0x72, 0x61, 0x79, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, //  ray.x),.acos_ap
	0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x7a, // prox_divPI(ray.z
	0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x73, // ));.}.float Invs
	0x52, 0x47, 0x42, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // RGB( float color
	0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, // ).{.if (color <=
	0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, 0x34, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, //  0.04045).return
	0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x32, //  color * (1.0/12
	0x2e, 0x39, 0x32, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // .92);.else.retur
	0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, // n pow(color * (1
	0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, // .0/1.055) + (0.0
	0x35, 0x35, 0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x29, 0x3b, // 55/1.055), 2.4);
	0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x52, 0x65, 0x63, 0x37, // .}.float InvRec7
	0x30, 0x39, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, // 09( float color)
	0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, // .{.if (color <= 
	0x30, 0x2e, 0x30, 0x38, 0x31, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, // 0.081).return co
	0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x34, 0x2e, 0x35, 0x29, 0x3b, // lor * (1.0/4.5);
	0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, // .else.return pow
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, // (color * (1.0/1.
	0x30, 0x39, 0x39, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x2f, 0x31, 0x2e, // 099) + (0.099/1.
	0x30, 0x39, 0x39, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x3b, // 099), 1.0/0.45);
	0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, // .}.float InvGamm
	0x61, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, // a( float color).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, // {.return InvsRGB
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // (color);.}.vec3 
	0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, // InvGamma( vec3 c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // olor).{.return v
	0x65, 0x63, 0x33, 0x28, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, // ec3(InvGamma(col
	0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, // or.x),InvGamma(c
	0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, // olor.y),InvGamma
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // (color.z));.}.ve
	0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, // c3 InvToneMap( v
	0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, // ec3 color).{.flo
	0x61, 0x74, 0x20, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x30, 0x2e, 0x35, // at inv_2bh = 0.5
	0x2f, 0x30, 0x2e, 0x32, 0x35, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x68, 0x20, // /0.25;.float bh 
	0x3d, 0x20, 0x34, 0x2e, 0x30, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2d, 0x20, 0x32, 0x2e, 0x30, // = 4.0*0.25 - 2.0
	0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, // ;.return (color 
	0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2b, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x63, 0x6f, 0x6c, // - 1.0 + sqrt(col
	0x6f, 0x72, 0x2a, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x20, 0x62, 0x68, 0x29, 0x20, // or*(color + bh) 
	0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x2a, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x3b, // + 1.0))*inv_2bh;
	0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x20, 0x66, // .}.float sRGB( f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // loat f).{.float 
	0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, // s;.if (f <= 0.00
	0x33, 0x31, 0x33, 0x30, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, 0x32, // 31308).s = 12.92
	0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, //  * f;.else.s = 1
	0x2e, 0x30, 0x35, 0x35, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x31, 0x2e, // .055 * pow(f, 1.
	0x30, 0x2f, 0x32, 0x2e, 0x34, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x3b, 0x0a, // 0/2.4) - 0.055;.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // return s;.}.floa
	0x74, 0x20, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // t Rec709( float 
	0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, // f).{.float s;.if
	0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, 0x29, 0x0a, 0x73, 0x20, //  (f <= 0.018).s 
	0x3d, 0x20, 0x34, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, // = 4.5 * f;.else.
	0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, // s = 1.099 * pow(
	0x66, 0x2c, 0x20, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x39, 0x39, // f, 0.45) - 0.099
	0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, // ;.return s;.}.fl
	0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x66, 0x6c, 0x6f, // oat FBGamma( flo
	0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, // at color).{.retu
	0x72, 0x6e, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, // rn sRGB(color);.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, // }.vec2 FBGamma( 
	0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // vec2 color).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, // turn vec2(FBGamm
	0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, // a(color.x),FBGam
	0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // ma(color.y));.}.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, // vec3 FBGamma( ve
	0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, // c3 color).{.retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, // rn vec3(FBGamma(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, // color.x),FBGamma
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, // (color.y),FBGamm
	0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // a(color.z));.}.v
	0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x32, 0x32, 0x28, 0x20, 0x76, // ec3 FBGamma22( v
	0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // ec3 color).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, // urn vec3(pow(col
	0x6f, 0x72, 0x2e, 0x78, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, // or.x, 1.0/2.2),p
	0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, // ow(color.y, 1.0/
	0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, // 2.2),pow(color.z
	0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // , 1.0/2.2));.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, // loat FBToneMap( 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // float l).{.retur
	0x6e, 0x20, 0x6c, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, // n l * ((l*0.25 +
	0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, //  1.0) / (l + 1.0
	0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, // ));.}.vec2 FBTon
	0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // eMap( vec2 color
	0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, // ).{.float l = do
	0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x31, // t(color,vec2(0.1
	0x37, 0x36, 0x32, 0x30, 0x34, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, // 76204+0.0108109*
	0x30, 0x2e, 0x35, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2b, 0x30, 0x2e, 0x30, // 0.5,0.812985+0.0
	0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, // 108109*0.5));.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, // turn color * ((l
	0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, // *0.25 + 1.0) / (
	0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // l + 1.0));.}.vec
	0x33, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, // 3 FBToneMap( vec
	0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // 3 color).{.float
	0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, //  l = dot(color,v
	0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2c, 0x30, 0x2e, 0x38, // ec3(0.176204,0.8
	0x31, 0x32, 0x39, 0x38, 0x35, 0x2c, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x29, // 12985,0.0108109)
	0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, // );.return color 
	0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, // * ((l*0.25 + 1.0
	0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, // ) / (l + 1.0));.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x28, // }.vec4 Additive(
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, //  vec4 cBase, vec
	0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // 4 cBlend, float 
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // percent).{.retur
	0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2b, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, // n cBase + cBlend
	0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, // *percent;.}.vec3
	0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, //  Screen ( vec3 c
	0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // Base, vec3 cBlen
	0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, // d).{.return 1.0 
	0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, // - (1.0 - cBase) 
	0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, // * (1.0 - cBlend)
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, // ;.}.vec4 Screen 
	0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, // ( vec4 cBase, ve
	0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // c4 cBlend).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, // urn 1.0 - (1.0 -
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, //  cBase) * (1.0 -
	0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, //  cBlend);.}.vec3
	0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, //  ScreenHDR ( vec
	0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, // 3 cBase, vec3 cB
	0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, // lend).{.return m
	0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, // ax(1.0 - (1.0 - 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, // cBase) * (1.0 - 
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, // cBlend), vec3(0.
	0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, // ,0.,0.));.}.vec4
	0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, //  ScreenHDR ( vec
	0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // 4 cBase, vec4 cB
	0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, // lend).{.return m
	0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, // ax(1.0 - (1.0 - 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, // cBase) * (1.0 - 
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, // cBlend), vec4(0.
	0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // ,0.,0.,0.));.}.v
	0x65, 0x63, 0x34, 0x20, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x20, 0x28, 0x20, 0x76, // ec4 Multiply ( v
	0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // ec4 cBase, vec4 
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, // cBlend, float pe
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // rcent).{.return 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2a, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, // cBase * cBlend*p
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, // ercent;.}.vec4 O
	0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // verlay ( vec4 cB
	0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, // ase, vec4 cBlend
	0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, // ).{.vec4 cNew = 
	0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, // step(0.5, cBase)
	0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, // ;.cNew = mix(cBa
	0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, // se*cBlend*2.0, 1
	0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, // .0-2.0*(1.0-cBas
	0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, // e)*(1.0-cBlend),
	0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, //  cNew);.return c
	0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, // New;.}.vec4 Over
	0x6c, 0x61, 0x79, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // layHDR ( vec4 cB
	0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, // ase, vec4 cBlend
	0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, // ).{.vec4 cNew = 
	0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, // step(0.5, cBase)
	0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x6d, 0x69, 0x78, // ;.cNew = max(mix
	0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, // (cBase*cBlend*2.
	0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, // 0, 1.0-2.0*(1.0-
	0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, // cBase)*(1.0-cBle
	0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // nd), cNew), vec4
	0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, // (0.,0.,0.,0.));.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // return cNew;.}.v
	0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x73, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, // ec3 cos_hemisphe
	0x72, 0x65, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, // re_sample( vec2 
	0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x68, 0x69, 0x20, 0x3d, // t).{.float phi =
	0x20, 0x74, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x28, 0x32, 0x2e, 0x30, 0x2a, 0x33, 0x2e, 0x31, 0x34, //  t.y * (2.0*3.14
	0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, // 1592653589793238
	0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x3b, 0x0a, // 4626433832795);.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, // float cosTheta =
	0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x74, 0x2e, 0x78, 0x29, //  sqrt(1.0 - t.x)
	0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, // ;.float sinTheta
	0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, //  = sqrt(t.x);.fl
	0x6f, 0x61, 0x74, 0x20, 0x73, 0x70, 0x2c, 0x63, 0x70, 0x3b, 0x0a, 0x7b, 0x73, 0x70, 0x3d, 0x73, // oat sp,cp;.{sp=s
	0x69, 0x6e, 0x28, 0x70, 0x68, 0x69, 0x29, 0x3b, 0x63, 0x70, 0x3d, 0x63, 0x6f, 0x73, 0x28, 0x70, // in(phi);cp=cos(p
	0x68, 0x69, 0x29, 0x3b, 0x7d, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, // hi);};.return ve
	0x63, 0x33, 0x28, 0x63, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, // c3(cp * sinTheta
	0x2c, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x73, 0x70, 0x20, 0x2a, // , cosTheta, sp *
	0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, //  sinTheta);.}.ve
	0x63, 0x33, 0x20, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x76, 0x65, 0x63, // c3 rotate_to_vec
	0x74, 0x6f, 0x72, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // tor_upper( vec3 
	0x76, 0x65, 0x63, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, // vec, vec3 normal
	0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, // ).{.if(normal.y 
	0x3e, 0x20, 0x2d, 0x30, 0x2e, 0x39, 0x39, 0x39, 0x39, 0x39, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, // > -0.99999).{.fl
	0x6f, 0x61, 0x74, 0x20, 0x68, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x28, 0x31, 0x2e, 0x30, // oat h = 1.0/(1.0
	0x2b, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // +normal.y);.floa
	0x74, 0x20, 0x68, 0x7a, 0x20, 0x3d, 0x20, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, // t hz = h*normal.
	0x7a, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x3d, 0x20, 0x68, // z;.float hzx = h
	0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // z*normal.x;.retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, // rn vec3(.vec.x *
	0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, //  (normal.y+hz*no
	0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x29, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, // rmal.z) + vec.y 
	0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, // * normal.x - vec
	0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, // .z * hzx,.vec.y 
	0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, // * normal.y - vec
	0x2e, 0x78, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, // .x * normal.x - 
	0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, // vec.z * normal.z
	0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, // ,.vec.y * normal
	0x2e, 0x7a, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, // .z - vec.x * hzx
	0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, //  + vec.z * (norm
	0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x2a, // al.y+h*normal.x*
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, // normal.x));.}.el
	0x73, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x2d, 0x76, 0x65, 0x63, 0x3b, 0x0a, // se return -vec;.
	0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, // }.uniform mat4 m
	0x61, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, // atWorldViewProj;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x6c, // .uniform vec4 cl
	0x69, 0x70, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x3b, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x6d, // ip_plane;.void m
	0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, // ain().{.v_tableP
	0x6f, 0x73, 0x20, 0x3d, 0x20, 0x61, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, // os = a_position.
	0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, // xyz;.v_texcoord0
	0x20, 0x3d, 0x20, 0x61, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x3b, 0x0a, //  = a_texcoord0;.
	0x76, 0x5f, 0x63, 0x6c, 0x69, 0x70, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x3d, // v_clipDistance =
	0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6c, 0x69, 0x70, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2c, //  dot(clip_plane,
	0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x61, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, //  vec4(a_position
	0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x67, 0x6c, 0x5f, 0x50, 0x6f, 0x73, 0x69, // , 1.0));.gl_Posi
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x28, 0x20, 0x28, 0x6d, 0x61, 0x74, 0x57, 0x6f, 0x72, // tion = ( (matWor
	0x6c, 0x64, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x76, // ldViewProj) * (v
	0x65, 0x63, 0x34, 0x28, 0x61, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, // ec4(a_position, 
	0x31, 0x2e, 0x30, 0x29, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x00,                         // 1.0)) );.}..
};
static const uint8_t vs_flasher_clip_dx11[718] =
{
	0x56, 0x53, 0x48, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x11, 0xe4, 0xa0, 0x91, 0x02, 0x00, 0x10, 0x6d, // VSH............m
	0x61, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x04, // atWorldViewProj.
	0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x63, 0x6c, 0x69, 0x70, 0x5f, 0x70, // ..........clip_p
	0x6c, 0x61, 0x6e, 0x65, 0x02, 0x00, 0x40, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x84, 0x02, // lane..@.........
	0x00, 0x00, 0x44, 0x58, 0x42, 0x43, 0xa1, 0xe3, 0x38, 0x4d, 0x6c, 0x29, 0x82, 0xdd, 0x30, 0x54, // ..DXBC..8Ml)..0T
	0xa6, 0x53, 0x52, 0x05, 0x9f, 0x06, 0x01, 0x00, 0x00, 0x00, 0x84, 0x02, 0x00, 0x00, 0x03, 0x00, // .SR.............
	0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x08, 0x01, 0x00, 0x00, 0x49, 0x53, // ..,...........IS
	0x47, 0x4e, 0x4c, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x38, 0x00, // GNL...........8.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x07, 0x07, 0x00, 0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ......A.........
	0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x50, 0x4f, // ..............PO
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, // SITION.TEXCOORD.
	0xab, 0xab, 0x4f, 0x53, 0x47, 0x4e, 0x80, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00, // ..OSGN..........
	0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, // ..h.............
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0x04, 0x00, // ..........t.....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x0e, // ................
	0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, // ..t.............
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0e, 0x01, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, // ..........t.....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x0c, // ................
	0x00, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x00, 0x54, 0x45, // ..SV_POSITION.TE
	0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0xab, 0xab, 0xab, 0x53, 0x48, 0x45, 0x58, 0x74, 0x01, // XCOORD....SHEXt.
	0x00, 0x00, 0x50, 0x00, 0x01, 0x00, 0x5d, 0x00, 0x00, 0x00, 0x6a, 0x08, 0x00, 0x01, 0x59, 0x00, // ..P...]...j...Y.
	0x00, 0x04, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x5f, 0x00, // ..F. ........._.
	0x00, 0x03, 0x72, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5f, 0x00, 0x00, 0x03, 0x32, 0x10, // ..r......._...2.
	0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x67, 0x00, 0x00, 0x04, 0xf2, 0x20, 0x10, 0x00, 0x00, 0x00, // ......g.... ....
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x03, 0x12, 0x20, 0x10, 0x00, 0x01, 0x00, // ......e.... ....
	0x00, 0x00, 0x65, 0x00, 0x00, 0x03, 0xe2, 0x20, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x65, 0x00, // ..e.... ......e.
	0x00, 0x03, 0x32, 0x20, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x02, 0x01, 0x00, // ..2 ......h.....
	0x00, 0x00, 0x38, 0x00, 0x00, 0x08, 0xf2, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x56, 0x15, // ..8...........V.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, // ......F. .......
	0x00, 0x00, 0x32, 0x00, 0x00, 0x0a, 0xf2, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x8e, // ..2...........F.
	0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x10, 0x10, 0x00, 0x00, 0x00, //  ...............
	0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x0a, 0xf2, 0x00, // ..F.......2.....
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, // ......F. .......
	0x00, 0x00, 0xa6, 0x1a, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, // ..........F.....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0xf2, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x0e, // ....... ......F.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, // ......F. .......
	0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x12, // ..6...r.......F.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x82, 0x00, 0x10, 0x00, 0x00, 0x00, // ......6.........
	0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x11, 0x00, 0x00, 0x08, 0x12, 0x20, // ...@.....?..... 
	0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, // ......F. .......
	0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0xe2, 0x20, // ..F.......6.... 
	0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x19, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, // ..............6.
	0x00, 0x05, 0x32, 0x20, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x10, 0x10, 0x00, 0x01, 0x00, // ..2 ......F.....
	0x00, 0x00, 0x3e, 0x00, 0x00, 0x01, 0x00, 0x02, 0x01, 0x00, 0x10, 0x00, 0x50, 0x00,             // ..>.........P.
};
static const uint8_t vs_flasher_clip_spv[1558] =
{
	0x56, 0x53, 0x48, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x11, 0xe4, 0xa0, 0x91, 0x02, 0x00, 0x0a, 0x63, // VSH............c
	0x6c, 0x69, 0x70, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x02, 0x01, 0x40, 0x00, 0x01, 0x00, 0x00, // lip_plane..@....
	0x00, 0x00, 0x00, 0x10, 0x6d, 0x61, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x56, 0x69, 0x65, 0x77, // ....matWorldView
	0x50, 0x72, 0x6f, 0x6a, 0x04, 0x01, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0xcc, 0x05, // Proj............
	0x00, 0x00, 0x03, 0x02, 0x23, 0x07, 0x00, 0x00, 0x01, 0x00, 0x0b, 0x00, 0x08, 0x00, 0x8c, 0x00, // ....#...........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0b, 0x00, // ................
	0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, 0x4c, 0x53, 0x4c, 0x2e, 0x73, 0x74, 0x64, 0x2e, 0x34, // ......GLSL.std.4
	0x35, 0x30, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, // 50..............
	0x00, 0x00, 0x0f, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, // ..............ma
	0x69, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00, 0x47, 0x00, 0x00, 0x00, 0x50, 0x00, // in....C...G...P.
	0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x58, 0x00, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x03, 0x00, // ..T...X.........
	0x03, 0x00, 0x05, 0x00, 0x00, 0x00, 0xf4, 0x01, 0x00, 0x00, 0x05, 0x00, 0x04, 0x00, 0x04, 0x00, // ................
	0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x06, 0x00, 0x24, 0x00, // ..main........$.
	0x00, 0x00, 0x55, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x00, 0x00, // ..UniformBlock..
	0x00, 0x00, 0x06, 0x00, 0x08, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6d, 0x61, // ......$.......ma
	0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x00, 0x00, // tWorldViewProj..
	0x00, 0x00, 0x06, 0x00, 0x06, 0x00, 0x24, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x63, 0x6c, // ......$.......cl
	0x69, 0x70, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x00, 0x00, 0x05, 0x00, 0x03, 0x00, 0x26, 0x00, // ip_plane......&.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x05, 0x00, 0x43, 0x00, 0x00, 0x00, 0x61, 0x5f, // ..........C...a_
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x00, 0x00, 0x05, 0x00, 0x05, 0x00, 0x47, 0x00, // position......G.
	0x00, 0x00, 0x61, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x00, 0x05, 0x00, // ..a_texcoord0...
	0x0a, 0x00, 0x50, 0x00, 0x00, 0x00, 0x40, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, // ..P...@entryPoin
	0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x67, 0x6c, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, // tOutput.gl_Posit
	0x69, 0x6f, 0x6e, 0x00, 0x00, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x54, 0x00, 0x00, 0x00, 0x40, 0x65, // ion.......T...@e
	0x6e, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, // ntryPointOutput.
	0x76, 0x5f, 0x63, 0x6c, 0x69, 0x70, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x00, 0x00, // v_clipDistance..
	0x00, 0x00, 0x05, 0x00, 0x0a, 0x00, 0x58, 0x00, 0x00, 0x00, 0x40, 0x65, 0x6e, 0x74, 0x72, 0x79, // ......X...@entry
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x76, 0x5f, 0x74, 0x61, // PointOutput.v_ta
	0x62, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x0a, 0x00, 0x5c, 0x00, // blePos..........
	0x00, 0x00, 0x40, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4f, 0x75, 0x74, // ..@entryPointOut
	0x70, 0x75, 0x74, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x00, // put.v_texcoord0.
	0x00, 0x00, 0x48, 0x00, 0x04, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, // ..H...$.........
	0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x00, // ..H...$.......#.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, // ......H...$.....
	0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0x24, 0x00, // ..........H...$.
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x47, 0x00, // ......#...@...G.
	0x03, 0x00, 0x24, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x26, 0x00, // ..$.......G...&.
	0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x26, 0x00, // ..".......G...&.
	0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x43, 0x00, // ..!.......G...C.
	0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x47, 0x00, // ..........G...G.
	0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x50, 0x00, // ..........G...P.
	0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x54, 0x00, // ..........G...T.
	0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x58, 0x00, // ..........G...X.
	0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x5c, 0x00, // ..........G.....
	0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x13, 0x00, 0x02, 0x00, 0x02, 0x00, // ................
	0x00, 0x00, 0x21, 0x00, 0x03, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x16, 0x00, // ..!.............
	0x03, 0x00, 0x06, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x07, 0x00, // ...... .........
	0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x09, 0x00, // ................
	0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x0b, 0x00, // ................
	0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x15, 0x00, 0x04, 0x00, 0x14, 0x00, // ................
	0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x14, 0x00, // .. .......+.....
	0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x18, 0x00, 0x04, 0x00, 0x23, 0x00, // ..............#.
	0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x04, 0x00, 0x24, 0x00, // ..............$.
	0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x25, 0x00, // ..#....... ...%.
	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x25, 0x00, // ......$...;...%.
	0x00, 0x00, 0x26, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x27, 0x00, // ..&....... ...'.
	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x06, 0x00, // ..........+.....
	0x00, 0x00, 0x2b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x2b, 0x00, 0x04, 0x00, 0x14, 0x00, // ..+......?+.....
	0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x38, 0x00, // ..2....... ...8.
	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x42, 0x00, // ......#... ...B.
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x42, 0x00, // ..........;...B.
	0x00, 0x00, 0x43, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x46, 0x00, // ..C....... ...F.
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x46, 0x00, // ..........;...F.
	0x00, 0x00, 0x47, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x4f, 0x00, // ..G....... ...O.
	0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x4f, 0x00, // ..........;...O.
	0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x53, 0x00, // ..P....... ...S.
	0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x53, 0x00, // ..........;...S.
	0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x57, 0x00, // ..T....... ...W.
	0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x57, 0x00, // ..........;...W.
	0x00, 0x00, 0x58, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x5b, 0x00, // ..X....... ...[.
	0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x5b, 0x00, // ..........;...[.
	0x00, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x36, 0x00, 0x05, 0x00, 0x02, 0x00, // ..........6.....
	0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0xf8, 0x00, // ................
	0x02, 0x00, 0x05, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x44, 0x00, // ......=.......D.
	0x00, 0x00, 0x43, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x09, 0x00, 0x00, 0x00, 0x48, 0x00, // ..C...=.......H.
	0x00, 0x00, 0x47, 0x00, 0x00, 0x00, 0x41, 0x00, 0x05, 0x00, 0x27, 0x00, 0x00, 0x00, 0x7b, 0x00, // ..G...A...'...{.
	0x00, 0x00, 0x26, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x0b, 0x00, // ..&.......=.....
	0x00, 0x00, 0x7c, 0x00, 0x00, 0x00, 0x7b, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x06, 0x00, // ..|...{...Q.....
	0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, // ..~...D.......Q.
	0x05, 0x00, 0x06, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x01, 0x00, // ..........D.....
	0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x06, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x44, 0x00, // ..Q...........D.
	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x50, 0x00, 0x07, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x81, 0x00, // ......P.........
	0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x2b, 0x00, // ..~...........+.
	0x00, 0x00, 0x94, 0x00, 0x05, 0x00, 0x06, 0x00, 0x00, 0x00, 0x82, 0x00, 0x00, 0x00, 0x7c, 0x00, // ..............|.
	0x00, 0x00, 0x81, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x06, 0x00, 0x00, 0x00, 0x85, 0x00, // ......Q.........
	0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x06, 0x00, // ..D.......Q.....
	0x00, 0x00, 0x86, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x51, 0x00, // ......D.......Q.
	0x05, 0x00, 0x06, 0x00, 0x00, 0x00, 0x87, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x02, 0x00, // ..........D.....
	0x00, 0x00, 0x50, 0x00, 0x07, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x88, 0x00, 0x00, 0x00, 0x85, 0x00, // ..P.............
	0x00, 0x00, 0x86, 0x00, 0x00, 0x00, 0x87, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x00, 0x00, 0x41, 0x00, // ..........+...A.
	0x05, 0x00, 0x38, 0x00, 0x00, 0x00, 0x89, 0x00, 0x00, 0x00, 0x26, 0x00, 0x00, 0x00, 0x32, 0x00, // ..8.......&...2.
	0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x23, 0x00, 0x00, 0x00, 0x8a, 0x00, 0x00, 0x00, 0x89, 0x00, // ..=...#.........
	0x00, 0x00, 0x90, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x8b, 0x00, 0x00, 0x00, 0x88, 0x00, // ................
	0x00, 0x00, 0x8a, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x03, 0x00, 0x50, 0x00, 0x00, 0x00, 0x8b, 0x00, // ......>...P.....
	0x00, 0x00, 0x3e, 0x00, 0x03, 0x00, 0x54, 0x00, 0x00, 0x00, 0x82, 0x00, 0x00, 0x00, 0x3e, 0x00, // ..>...T.......>.
	0x03, 0x00, 0x58, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x03, 0x00, 0x5c, 0x00, // ..X...D...>.....
	0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0xfd, 0x00, 0x01, 0x00, 0x38, 0x00, 0x01, 0x00, 0x00, 0x02, // ..H.......8.....
	0x01, 0x00, 0x10, 0x00, 0x50, 0x00,                                                             // ....P.
};
static const bgfx::EmbeddedShader vs_flasher_clip = BGFX_EMBEDDED_SHADER(vs_flasher_clip);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Build of vertex shader from vs_flasher.sc to vs_flasher_clip_st with options: STEREO CLIP
static const uint8_t vs_flasher_clip_st_mtl[1206] =
{
	0x56, 0x53, 0x48, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x11, 0xe4, 0xa0, 0x91, 0x02, 0x00, 0x0a, 0x63, // VSH............c
	0x6c, 0x69, 0x70, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x02, 0x01, 0x80, 0x00, 0x01, 0x00, 0x00, // lip_plane.......
	0x00, 0x00, 0x00, 0x10, 0x6d, 0x61, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x56, 0x69, 0x65, 0x77, // ....matWorldView
	0x50, 0x72, 0x6f, 0x6a, 0x04, 0x02, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6a, 0x04, // Proj..........j.
	0x00, 0x00, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x6d, 0x65, 0x74, 0x61, // ..#include <meta
	0x6c, 0x5f, 0x73, 0x74, 0x64, 0x6c, 0x69, 0x62, 0x3e, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, // l_stdlib>.#inclu
	0x64, 0x65, 0x20, 0x3c, 0x73, 0x69, 0x6d, 0x64, 0x2f, 0x73, 0x69, 0x6d, 0x64, 0x2e, 0x68, 0x3e, // de <simd/simd.h>
	0x0a, 0x0a, 0x75, 0x73, 0x69, 0x6e, 0x67, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, // ..using namespac
	0x65, 0x20, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, // e metal;..struct
	0x20, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, //  _Global.{.    f
	0x6c, 0x6f, 0x61, 0x74, 0x34, 0x78, 0x34, 0x20, 0x6d, 0x61, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, // loat4x4 matWorld
	0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x5b, 0x32, 0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, // ViewProj[2];.   
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x63, 0x6c, 0x69, 0x70, 0x5f, 0x70, 0x6c, 0x61, //  float4 clip_pla
	0x6e, 0x65, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x78, // ne;.};..struct x
	0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x0a, 0x7b, // latMtlMain_out.{
	0x0a, 0x09, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x6d, 0x65, 0x74, // ..float bgfx_met
	0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x20, 0x5b, 0x5b, 0x70, // al_pointSize [[p
	0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5d, 0x5d, 0x20, 0x3d, 0x20, 0x31, 0x3b, // oint_size]] = 1;
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x65, 0x6e, 0x74, 0x72, // .    float _entr
	0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x5f, 0x63, // yPointOutput_v_c
	0x6c, 0x69, 0x70, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x5b, 0x5b, 0x75, 0x73, // lipDistance [[us
	0x65, 0x72, 0x28, 0x6c, 0x6f, 0x63, 0x6e, 0x30, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, // er(locn0)]];.   
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x6f, //  float3 _entryPo
	0x69, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x5f, 0x74, 0x61, 0x62, 0x6c, // intOutput_v_tabl
	0x65, 0x50, 0x6f, 0x73, 0x20, 0x5b, 0x5b, 0x75, 0x73, 0x65, 0x72, 0x28, 0x6c, 0x6f, 0x63, 0x6e, // ePos [[user(locn
	0x31, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, // 1)]];.    float2
	0x20, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x70, //  _entryPointOutp
	0x75, 0x74, 0x5f, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x5b, // ut_v_texcoord0 [
	0x5b, 0x75, 0x73, 0x65, 0x72, 0x28, 0x6c, 0x6f, 0x63, 0x6e, 0x32, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, // [user(locn2)]];.
	0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x67, 0x6c, 0x5f, 0x50, 0x6f, //     float4 gl_Po
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x5b, 0x5b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, // sition [[positio
	0x6e, 0x5d, 0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x67, 0x6c, // n]];.    uint gl
	0x5f, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x20, 0x5b, 0x5b, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, // _Layer [[render_
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x64, // target_array_ind
	0x65, 0x78, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, // ex]];.};..struct
	0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x0a, //  xlatMtlMain_in.
	0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x61, 0x5f, 0x70, // {.    float3 a_p
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x5b, 0x5b, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, // osition [[attrib
	0x75, 0x74, 0x65, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, // ute(0)]];.    fl
	0x6f, 0x61, 0x74, 0x32, 0x20, 0x61, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, // oat2 a_texcoord0
	0x20, 0x5b, 0x5b, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x28, 0x31, 0x29, 0x5d, //  [[attribute(1)]
	0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x74, 0x65, 0x78, 0x20, 0x78, 0x6c, // ];.};..vertex xl
	0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x78, 0x6c, // atMtlMain_out xl
	0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x28, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, // atMtlMain(xlatMt
	0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x5b, 0x5b, 0x73, 0x74, // lMain_in in [[st
	0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x5d, 0x5d, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, // age_in]], consta
	0x6e, 0x74, 0x20, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x26, 0x20, 0x5f, 0x6d, 0x74, 0x6c, // nt _Global& _mtl
	0x5f, 0x75, 0x20, 0x5b, 0x5b, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, // _u [[buffer(0)]]
	0x2c, 0x20, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x67, 0x6c, 0x5f, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, // , uint gl_Instan
	0x63, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x20, 0x5b, 0x5b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, // ceIndex [[instan
	0x63, 0x65, 0x5f, 0x69, 0x64, 0x5d, 0x5d, 0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x78, // ce_id]]).{.    x
	0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x6f, // latMtlMain_out o
	0x75, 0x74, 0x20, 0x3d, 0x20, 0x7b, 0x7d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x6f, 0x75, 0x74, // ut = {};.    out
	0x2e, 0x67, 0x6c, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x5f, // .gl_Position = _
	0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x6d, 0x61, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x56, 0x69, // mtl_u.matWorldVi
	0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x5b, 0x67, 0x6c, 0x5f, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, // ewProj[gl_Instan
	0x63, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x5d, 0x20, 0x2a, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // ceIndex] * float
	0x34, 0x28, 0x69, 0x6e, 0x2e, 0x61, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2c, // 4(in.a_position,
	0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x6f, 0x75, 0x74, 0x2e, 0x5f, //  1.0);.    out._
	0x65, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, // entryPointOutput
	0x5f, 0x76, 0x5f, 0x63, 0x6c, 0x69, 0x70, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x20, // _v_clipDistance 
	0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x63, 0x6c, 0x69, // = dot(_mtl_u.cli
	0x70, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, // p_plane, float4(
	0x69, 0x6e, 0x2e, 0x61, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x31, // in.a_position, 1
	0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x6f, 0x75, 0x74, 0x2e, 0x5f, 0x65, // .0));.    out._e
	0x6e, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, // ntryPointOutput_
	0x76, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x20, 0x3d, 0x20, 0x69, 0x6e, 0x2e, // v_tablePos = in.
	0x61, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, // a_position;.    
	0x6f, 0x75, 0x74, 0x2e, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4f, // out._entryPointO
	0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, // utput_v_texcoord
	0x30, 0x20, 0x3d, 0x20, 0x69, 0x6e, 0x2e, 0x61, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, // 0 = in.a_texcoor
	0x64, 0x30, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x6f, 0x75, 0x74, 0x2e, 0x67, 0x6c, 0x5f, 0x4c, // d0;.    out.gl_L
	0x61, 0x79, 0x65, 0x72, 0x20, 0x3d, 0x20, 0x67, 0x6c, 0x5f, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, // ayer = gl_Instan
	0x63, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, // ceIndex;.    ret
	0x75, 0x72, 0x6e, 0x20, 0x6f, 0x75, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x0a, 0x00, 0x03, 0x01, 0x00, // urn out;.}......
	0x10, 0x00, 0xff, 0xff, 0x90, 0x00,                                                             // ......
};
static const uint8_t vs_flasher_clip_st_essl[6496] =
{
	0x56, 0x53, 0x48, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x11, 0xe4, 0xa0, 0x91, 0x00, 0x00, 0x4d, 0x19, // VSH...........M.
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x33, 0x32, 0x30, 0x20, 0x65, // ..#version 320 e
	0x73, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, // s.#define attrib
	0x75, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x76, // ute in.#define v
	0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x75, 0x74, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, // arying out.preci
	0x73, 0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // sion highp float
	0x3b, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, // ;.precision high
	0x70, 0x20, 0x69, 0x6e, 0x74, 0x3b, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x73, // p int;.#define s
	0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // hadow2D(_sampler
	0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // , _coord) textur
	0x65, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, // e(_sampler, _coo
	0x72, 0x64, 0x29, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x73, 0x68, 0x61, 0x64, // rd).#define shad
	0x6f, 0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // ow2DProj(_sample
	0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, // r, _coord) textu
	0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, // reProj(_sampler,
	0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, //  _coord).attribu
	0x74, 0x65, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x61, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, // te vec3 a_positi
	0x6f, 0x6e, 0x3b, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x76, 0x65, // on;.attribute ve
	0x63, 0x32, 0x20, 0x61, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x3b, 0x0a, // c2 a_texcoord0;.
	0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x5f, // varying float v_
	0x63, 0x6c, 0x69, 0x70, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x3b, 0x0a, 0x76, 0x61, // clipDistance;.va
	0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x5f, 0x74, 0x61, 0x62, // rying vec3 v_tab
	0x6c, 0x65, 0x50, 0x6f, 0x73, 0x3b, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x76, // lePos;.varying v
	0x65, 0x63, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x3b, // ec2 v_texcoord0;
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, // .vec3 instMul(ve
	0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, // c3 _vec, mat3 _m
	0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, // tx) { return ( (
	0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, // _vec) * (_mtx) )
	0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, // ; }.vec3 instMul
	0x28, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, // (mat3 _mtx, vec3
	0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, //  _vec) { return 
	0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, // ( (_mtx) * (_vec
	0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, // ) ); }.vec4 inst
	0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, // Mul(vec4 _vec, m
	0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // at4 _mtx) { retu
	0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, // rn ( (_vec) * (_
	0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, // mtx) ); }.vec4 i
	0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, // nstMul(mat4 _mtx
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, // , vec4 _vec) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, // eturn ( (_mtx) *
	0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, //  (_vec) ); }.flo
	0x61, 0x74, 0x20, 0x72, 0x63, 0x70, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x61, 0x29, // at rcp(float _a)
	0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x5f, 0x61, //  { return 1.0/_a
	0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, // ; }.vec2 rcp(vec
	0x32, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // 2 _a) { return v
	0x65, 0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, // ec2(1.0)/_a; }.v
	0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x61, 0x29, // ec3 rcp(vec3 _a)
	0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x31, //  { return vec3(1
	0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x72, // .0)/_a; }.vec4 r
	0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // cp(vec4 _a) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, // turn vec4(1.0)/_
	0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, // a; }.vec2 vec2_s
	0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, // plat(float _x) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, //  return vec2(_x,
	0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, //  _x); }.vec3 vec
	0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, // 3_splat(float _x
	0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, // ) { return vec3(
	0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, // _x, _x, _x); }.v
	0x65, 0x63, 0x34, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, // ec4 vec4_splat(f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, // loat _x) { retur
	0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, // n vec4(_x, _x, _
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x32, 0x20, // x, _x); }.uvec2 
	0x75, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, // uvec2_splat(uint
	0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, //  _x) { return uv
	0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, // ec2(_x, _x); }.u
	0x76, 0x65, 0x63, 0x33, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, // vec3 uvec3_splat
	0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // (uint _x) { retu
	0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, // rn uvec3(_x, _x,
	0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x76, //  _x); }.uvec4 uv
	0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, // ec4_splat(uint _
	0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, // x) { return uvec
	0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, // 4(_x, _x, _x, _x
	0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, // ); }.mat4 mtxFro
	0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, // mRows(vec4 _0, v
	0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, // ec4 _1, vec4 _2,
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, //  vec4 _3).{.retu
	0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, // rn transpose(mat
	0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, // 4(_0, _1, _2, _3
	0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, // ) );.}.mat4 mtxF
	0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, // romCols(vec4 _0,
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, //  vec4 _1, vec4 _
	0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // 2, vec4 _3).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, // turn mat4(_0, _1
	0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, // , _2, _3);.}.mat
	0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, // 3 mtxFromRows(ve
	0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, // c3 _0, vec3 _1, 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // vec3 _2).{.retur
	0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x33, // n transpose(mat3
	0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x20, 0x29, 0x3b, 0x0a, // (_0, _1, _2) );.
	0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, // }.mat3 mtxFromCo
	0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, // ls(vec3 _0, vec3
	0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, //  _1, vec3 _2).{.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, // return mat3(_0, 
	0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, // _1, _2);.}.unifo
	0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, // rm vec4 u_viewRe
	0x63, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, // ct;.uniform vec4
	0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x54, 0x65, 0x78, 0x65, 0x6c, 0x3b, 0x0a, 0x75, 0x6e, //  u_viewTexel;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, // iform mat4 u_vie
	0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, // w;.uniform mat4 
	0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, // u_invView;.unifo
	0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, // rm mat4 u_proj;.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, // uniform mat4 u_i
	0x6e, 0x76, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // nvProj;.uniform 
	0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, // mat4 u_viewProj;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, // .uniform mat4 u_
	0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, // invViewProj;.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, // form mat4 u_mode
	0x6c, 0x5b, 0x33, 0x32, 0x5d, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, // l[32];.uniform m
	0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x3b, // at4 u_modelView;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, // .uniform mat4 u_
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, // modelViewProj;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x61, 0x6c, // niform vec4 u_al
	0x70, 0x68, 0x61, 0x52, 0x65, 0x66, 0x34, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, // phaRef4;.float s
	0x71, 0x72, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, // qr( float v).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // eturn v*v;.}.vec
	0x32, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x29, 0x0a, 0x7b, // 2 sqr( vec2 v).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // .return v*v;.}.v
	0x65, 0x63, 0x33, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x29, // ec3 sqr( vec3 v)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, // .{.return v*v;.}
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6d, 0x75, 0x6c, 0x5f, 0x77, 0x31, 0x28, 0x20, 0x76, 0x65, // .vec3 mul_w1( ve
	0x63, 0x33, 0x20, 0x76, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x29, 0x0a, 0x7b, 0x0a, // c3 v, mat4 m).{.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2e, 0x78, 0x2a, 0x6d, 0x5b, 0x30, 0x5d, 0x2e, // return v.x*m[0].
	0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x79, 0x2a, 0x6d, 0x5b, 0x31, 0x5d, 0x2e, // xyz + (v.y*m[1].
	0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x7a, 0x2a, 0x6d, 0x5b, 0x32, 0x5d, 0x2e, // xyz + (v.z*m[2].
	0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x6d, 0x5b, 0x33, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, // xyz + m[3].xyz))
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, // ;.}.float acos_a
	0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, // pprox_divPI( flo
	0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, // at v).{.float x 
	0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, // = abs(v);.if(1. 
	0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, // - x <= 0.0000610
	0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // 3515625).return 
	0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x20, 0x3a, // (v >= 0.) ? 0. :
	0x20, 0x31, 0x2e, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, //  1.;.float res =
	0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, //  ((-0.155972/3.1
	0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, // 4159265358979323
	0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, // 84626433832795) 
	0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, // * x + (1.56467/3
	0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, // .141592653589793
	0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, // 2384626433832795
	0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, // ) ) * sqrt(1. - 
	0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, // x);.return (v >=
	0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x20, //  0.) ? res : 1. 
	0x2d, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, // - res;.}.float a
	0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, // tan2_approx_div2
	0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x79, 0x2c, 0x20, 0x66, 0x6c, 0x6f, // PI( float y, flo
	0x61, 0x74, 0x20, 0x78, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, // at x).{.float ab
	0x73, 0x5f, 0x79, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, // s_y = abs(y);.fl
	0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, // oat abs_x = abs(
	0x78, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3c, 0x3d, 0x20, // x);.if(abs_x <= 
	0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, // 0.00006103515625
	0x20, 0x26, 0x26, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, //  && abs_y <= 0.0
	0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, // 0006103515625).r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x30, 0x2e, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // eturn 0.;.float 
	0x72, 0x20, 0x3d, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2d, 0x20, 0x61, 0x62, 0x73, // r = (abs_x - abs
	0x5f, 0x79, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2b, 0x20, 0x61, // _y) / (abs_x + a
	0x62, 0x73, 0x5f, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x6e, 0x67, // bs_y);.float ang
	0x6c, 0x65, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, // le = ((x < 0.) ?
	0x20, 0x28, 0x33, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x20, 0x3a, 0x20, 0x28, 0x31, 0x2e, 0x2f, 0x38, //  (3./8.) : (1./8
	0x2e, 0x29, 0x29, 0x0a, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x32, 0x31, 0x31, 0x38, 0x36, 0x38, 0x20, // .)).+ (0.211868 
	0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, // /(2.*3.141592653
	0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, // 5897932384626433
	0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x72, 0x20, 0x2a, 0x20, 0x72, 0x20, // 832795) * r * r 
	0x2d, 0x20, 0x30, 0x2e, 0x39, 0x38, 0x37, 0x33, 0x30, 0x35, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, // - 0.987305 /(2.*
	0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, // 3.14159265358979
	0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, // 3238462643383279
	0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, // 5)) * ((x < 0.) 
	0x3f, 0x20, 0x2d, 0x72, 0x20, 0x3a, 0x20, 0x72, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // ? -r : r);.retur
	0x6e, 0x20, 0x28, 0x79, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x61, 0x6e, // n (y < 0.) ? -an
	0x67, 0x6c, 0x65, 0x20, 0x3a, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // gle : angle;.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x73, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, // loat asin_approx
	0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, // _divPI( float v)
	0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, // .{.float x = abs
	0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, // (v);.if(1. - x <
	0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, // = 0.000061035156
	0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, // 25).return (v >=
	0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, //  0.) ? 0.5 : -0.
	0x35, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, // 5;.float res = (
	0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, // (-0.155972/3.141
	0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, // 5926535897932384
	0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, // 626433832795) * 
	0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, // x + (1.56467/3.1
	0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, // 4159265358979323
	0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, // 84626433832795) 
	0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, // ) * sqrt(1. - x)
	0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, // ;.return (v >= 0
	0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, // .) ? 0.5 - res :
	0x20, 0x2d, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, //  -0.5 + res;.}.v
	0x65, 0x63, 0x32, 0x20, 0x72, 0x61, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x72, // ec2 ray_to_equir
	0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x75, 0x76, 0x28, 0x20, 0x76, // ectangular_uv( v
	0x65, 0x63, 0x33, 0x20, 0x72, 0x61, 0x79, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // ec3 ray).{.retur
	0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x0a, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x61, 0x74, // n vec2(.0.5 + at
	0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, // an2_approx_div2P
	0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x79, 0x2c, 0x20, 0x72, 0x61, 0x79, 0x2e, 0x78, 0x29, 0x2c, // I(ray.y, ray.x),
	0x0a, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, // .acos_approx_div
	0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, // PI(ray.z));.}.fl
	0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x20, 0x66, 0x6c, 0x6f, // oat InvsRGB( flo
	0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, // at color).{.if (
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, 0x34, 0x35, // color <= 0.04045
	0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, // ).return color *
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x29, 0x3b, 0x0a, 0x65, 0x6c, //  (1.0/12.92);.el
	0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, // se.return pow(co
	0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, // lor * (1.0/1.055
	0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, // ) + (0.055/1.055
	0x29, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // ), 2.4);.}.float
	0x20, 0x49, 0x6e, 0x76, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, //  InvRec709( floa
	0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, // t color).{.if (c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x38, 0x31, 0x29, 0x0a, 0x72, // olor <= 0.081).r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, // eturn color * (1
	0x2e, 0x30, 0x2f, 0x34, 0x2e, 0x35, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, // .0/4.5);.else.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, // turn pow(color *
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, 0x20, 0x2b, 0x20, 0x28, //  (1.0/1.099) + (
	0x30, 0x2e, 0x30, 0x39, 0x39, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, 0x2c, 0x20, 0x31, 0x2e, // 0.099/1.099), 1.
	0x30, 0x2f, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // 0/0.45);.}.float
	0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, //  InvGamma( float
	0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, //  color).{.return
	0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, //  InvsRGB(color);
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, // .}.vec3 InvGamma
	0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, // ( vec3 color).{.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x49, 0x6e, 0x76, 0x47, // return vec3(InvG
	0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x49, 0x6e, // amma(color.x),In
	0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, // vGamma(color.y),
	0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, // InvGamma(color.z
	0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x54, 0x6f, // ));.}.vec3 InvTo
	0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // neMap( vec3 colo
	0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x69, 0x6e, 0x76, 0x5f, 0x32, // r).{.float inv_2
	0x62, 0x68, 0x20, 0x3d, 0x20, 0x30, 0x2e, 0x35, 0x2f, 0x30, 0x2e, 0x32, 0x35, 0x3b, 0x0a, 0x66, // bh = 0.5/0.25;.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x34, 0x2e, 0x30, 0x2a, 0x30, 0x2e, // loat bh = 4.0*0.
	0x32, 0x35, 0x20, 0x2d, 0x20, 0x32, 0x2e, 0x30, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // 25 - 2.0;.return
	0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2b, 0x20, //  (color - 1.0 + 
	0x73, 0x71, 0x72, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2a, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // sqrt(color*(colo
	0x72, 0x20, 0x2b, 0x20, 0x62, 0x68, 0x29, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x2a, // r + bh) + 1.0))*
	0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // inv_2bh;.}.float
	0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, //  sRGB( float f).
	0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, // {.float s;.if (f
	0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x33, 0x31, 0x33, 0x30, 0x38, 0x29, 0x0a, 0x73, //  <= 0.0031308).s
	0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, //  = 12.92 * f;.el
	0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x20, 0x2a, 0x20, 0x70, // se.s = 1.055 * p
	0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x34, 0x29, 0x20, 0x2d, // ow(f, 1.0/2.4) -
	0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, //  0.055;.return s
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, // ;.}.float Rec709
	0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, // ( float f).{.flo
	0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, // at s;.if (f <= 0
	0x2e, 0x30, 0x31, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x34, 0x2e, 0x35, 0x20, 0x2a, 0x20, // .018).s = 4.5 * 
	0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x39, // f;.else.s = 1.09
	0x39, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x34, 0x35, 0x29, // 9 * pow(f, 0.45)
	0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, //  - 0.099;.return
	0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x47, 0x61, //  s;.}.float FBGa
	0x6d, 0x6d, 0x61, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // mma( float color
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, // ).{.return sRGB(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, // color);.}.vec2 F
	0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, // BGamma( vec2 col
	0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, // or).{.return vec
	0x32, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, // 2(FBGamma(color.
	0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // x),FBGamma(color
	0x2e, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, // .y));.}.vec3 FBG
	0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // amma( vec3 color
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, // ).{.return vec3(
	0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, // FBGamma(color.x)
	0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, // ,FBGamma(color.y
	0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, // ),FBGamma(color.
	0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, // z));.}.vec3 FBGa
	0x6d, 0x6d, 0x61, 0x32, 0x32, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // mma22( vec3 colo
	0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, // r).{.return vec3
	0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x2c, 0x20, 0x31, 0x2e, // (pow(color.x, 1.
	0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // 0/2.2),pow(color
	0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, // .y, 1.0/2.2),pow
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, // (color.z, 1.0/2.
	0x32, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x54, // 2));.}.float FBT
	0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x29, // oneMap( float l)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6c, 0x20, 0x2a, 0x20, 0x28, 0x28, // .{.return l * ((
	0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, // l*0.25 + 1.0) / 
	0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // (l + 1.0));.}.ve
	0x63, 0x32, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, // c2 FBToneMap( ve
	0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // c2 color).{.floa
	0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, // t l = dot(color,
	0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2b, 0x30, 0x2e, // vec2(0.176204+0.
	0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x2c, 0x30, 0x2e, 0x38, 0x31, // 0108109*0.5,0.81
	0x32, 0x39, 0x38, 0x35, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, // 2985+0.0108109*0
	0x2e, 0x35, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, // .5));.return col
	0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, // or * ((l*0.25 + 
	0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, // 1.0) / (l + 1.0)
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, // );.}.vec3 FBTone
	0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, // Map( vec3 color)
	0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, // .{.float l = dot
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x31, 0x37, // (color,vec3(0.17
	0x36, 0x32, 0x30, 0x34, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2c, 0x30, 0x2e, // 6204,0.812985,0.
	0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // 0108109));.retur
	0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, // n color * ((l*0.
	0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, // 25 + 1.0) / (l +
	0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x41, //  1.0));.}.vec4 A
	0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // dditive( vec4 cB
	0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, // ase, vec4 cBlend
	0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, // , float percent)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, // .{.return cBase 
	0x2b, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, // + cBlend*percent
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, // ;.}.vec3 Screen 
	0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, // ( vec3 cBase, ve
	0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // c3 cBlend).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, // urn 1.0 - (1.0 -
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, //  cBase) * (1.0 -
	0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, //  cBlend);.}.vec4
	0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, //  Screen ( vec4 c
	0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // Base, vec4 cBlen
	0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, // d).{.return 1.0 
	0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, // - (1.0 - cBase) 
	0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, // * (1.0 - cBlend)
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, // ;.}.vec3 ScreenH
	0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, // DR ( vec3 cBase,
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, //  vec3 cBlend).{.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, // return max(1.0 -
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, //  (1.0 - cBase) *
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, //  (1.0 - cBlend),
	0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, //  vec3(0.,0.,0.))
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, // ;.}.vec4 ScreenH
	0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, // DR ( vec4 cBase,
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, //  vec4 cBlend).{.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, // return max(1.0 -
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, //  (1.0 - cBase) *
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, //  (1.0 - cBlend),
	0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, //  vec4(0.,0.,0.,0
	0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4d, 0x75, 0x6c, 0x74, // .));.}.vec4 Mult
	0x69, 0x70, 0x6c, 0x79, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, // iply ( vec4 cBas
	0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, // e, vec4 cBlend, 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, // float percent).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2a, 0x20, // .return cBase * 
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, // cBlend*percent;.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x20, 0x28, // }.vec4 Overlay (
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, //  vec4 cBase, vec
	0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, // 4 cBlend).{.vec4
	0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, //  cNew = step(0.5
	0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, // , cBase);.cNew =
	0x20, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, //  mix(cBase*cBlen
	0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, // d*2.0, 1.0-2.0*(
	0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, // 1.0-cBase)*(1.0-
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x3b, 0x0a, // cBlend), cNew);.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // return cNew;.}.v
	0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x48, 0x44, 0x52, 0x20, 0x28, // ec4 OverlayHDR (
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, //  vec4 cBase, vec
	0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, // 4 cBlend).{.vec4
	0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, //  cNew = step(0.5
	0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, // , cBase);.cNew =
	0x20, 0x6d, 0x61, 0x78, 0x28, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, //  max(mix(cBase*c
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, // Blend*2.0, 1.0-2
	0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, // .0*(1.0-cBase)*(
	0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, // 1.0-cBlend), cNe
	0x77, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, // w), vec4(0.,0.,0
	0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, // .,0.));.return c
	0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x73, 0x5f, // New;.}.vec3 cos_
	0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, // hemisphere_sampl
	0x65, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, // e( vec2 t).{.flo
	0x61, 0x74, 0x20, 0x70, 0x68, 0x69, 0x20, 0x3d, 0x20, 0x74, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x28, // at phi = t.y * (
	0x32, 0x2e, 0x30, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, // 2.0*3.1415926535
	0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, // 8979323846264338
	0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, // 32795);.float co
	0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, // sTheta = sqrt(1.
	0x30, 0x20, 0x2d, 0x20, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // 0 - t.x);.float 
	0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, // sinTheta = sqrt(
	0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x70, 0x2c, 0x63, // t.x);.float sp,c
	0x70, 0x3b, 0x0a, 0x7b, 0x73, 0x70, 0x3d, 0x73, 0x69, 0x6e, 0x28, 0x70, 0x68, 0x69, 0x29, 0x3b, // p;.{sp=sin(phi);
	0x63, 0x70, 0x3d, 0x63, 0x6f, 0x73, 0x28, 0x70, 0x68, 0x69, 0x29, 0x3b, 0x7d, 0x3b, 0x0a, 0x72, // cp=cos(phi);};.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x63, 0x70, 0x20, 0x2a, 0x20, // eturn vec3(cp * 
	0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, // sinTheta, cosThe
	0x74, 0x61, 0x2c, 0x20, 0x73, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, // ta, sp * sinThet
	0x61, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x6f, 0x74, 0x61, 0x74, // a);.}.vec3 rotat
	0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x70, 0x70, 0x65, // e_to_vector_uppe
	0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x76, 0x65, 0x63, // r( vec3 vec, vec
	0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x28, 0x6e, // 3 normal).{.if(n
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x3e, 0x20, 0x2d, 0x30, 0x2e, 0x39, 0x39, 0x39, // ormal.y > -0.999
	0x39, 0x39, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x20, 0x3d, 0x20, // 99).{.float h = 
	0x31, 0x2e, 0x30, 0x2f, 0x28, 0x31, 0x2e, 0x30, 0x2b, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, // 1.0/(1.0+normal.
	0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x20, 0x3d, 0x20, 0x68, // y);.float hz = h
	0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // *normal.z;.float
	0x20, 0x68, 0x7a, 0x78, 0x20, 0x3d, 0x20, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, //  hzx = hz*normal
	0x2e, 0x78, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, // .x;.return vec3(
	0x0a, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, // .vec.x * (normal
	0x2e, 0x79, 0x2b, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x29, 0x20, // .y+hz*normal.z) 
	0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, // + vec.y * normal
	0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, // .x - vec.z * hzx
	0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, // ,.vec.y * normal
	0x2e, 0x79, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, // .y - vec.x * nor
	0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, // mal.x - vec.z * 
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, // normal.z,.vec.y 
	0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, // * normal.z - vec
	0x2e, 0x78, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, // .x * hzx + vec.z
	0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x2a, 0x6e, //  * (normal.y+h*n
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, // ormal.x*normal.x
	0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, // ));.}.else retur
	0x6e, 0x20, 0x2d, 0x76, 0x65, 0x63, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // n -vec;.}.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x61, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x56, // m mat4 matWorldV
	0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x5b, 0x32, 0x5d, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // iewProj[2];.unif
	0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x6c, 0x69, 0x70, 0x5f, 0x70, 0x6c, // orm vec4 clip_pl
	0x61, 0x6e, 0x65, 0x3b, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, // ane;.void main()
	0x0a, 0x7b, 0x0a, 0x76, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x20, 0x3d, 0x20, // .{.v_tablePos = 
	0x61, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, // a_position.xyz;.
	0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x3d, 0x20, 0x61, 0x5f, // v_texcoord0 = a_
	0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x3b, 0x0a, 0x67, 0x6c, 0x5f, 0x4c, 0x61, // texcoord0;.gl_La
	0x79, 0x65, 0x72, 0x20, 0x3d, 0x20, 0x67, 0x6c, 0x5f, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, // yer = gl_Instanc
	0x65, 0x49, 0x44, 0x3b, 0x0a, 0x76, 0x5f, 0x63, 0x6c, 0x69, 0x70, 0x44, 0x69, 0x73, 0x74, 0x61, // eID;.v_clipDista
	0x6e, 0x63, 0x65, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6c, 0x69, 0x70, 0x5f, 0x70, // nce = dot(clip_p
	0x6c, 0x61, 0x6e, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x61, 0x5f, 0x70, 0x6f, 0x73, // lane, vec4(a_pos
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x67, 0x6c, // ition, 1.0));.gl
	0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x28, 0x20, 0x28, 0x6d, // _Position = ( (m
	0x61, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x5b, // atWorldViewProj[
	0x67, 0x6c, 0x5f, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x5d, 0x29, 0x20, // gl_InstanceID]) 
	0x2a, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x61, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, // * (vec4(a_positi
	0x6f, 0x6e, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x00, // on, 1.0)) );.}..
};
static const uint8_t vs_flasher_clip_st_glsl[6840] =
{
	0x56, 0x53, 0x48, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x11, 0xe4, 0xa0, 0x91, 0x00, 0x00, 0xa5, 0x1a, // VSH.............
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x34, 0x34, 0x30, 0x0a, 0x23, // ..#version 440.#
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, // define texture2D
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, //           textur
	0x65, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // e.#define textur
	0x65, 0x32, 0x44, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, // e2DLod       tex
	0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, // tureLod.#define 
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, 0x20, // texture2DGrad   
	0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, //    textureGrad.#
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, // define texture2D
	0x50, 0x72, 0x6f, 0x6a, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // ProjLod   textur
	0x65, 0x50, 0x72, 0x6f, 0x6a, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, // eProjLod.#define
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, //  texture2DProjGr
	0x61, 0x64, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x47, // ad  textureProjG
	0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, // rad.#define text
	0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, // ureCubeLod     t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, // extureLod.#defin
	0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x47, 0x72, 0x61, // e textureCubeGra
	0x64, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x47, 0x72, 0x61, 0x64, // d    textureGrad
	0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // .#define texture
	0x33, 0x44, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, // 3D          text
	0x75, 0x72, 0x65, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, // ure.#define text
	0x75, 0x72, 0x65, 0x32, 0x44, 0x4c, 0x6f, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x20, 0x74, // ure2DLodOffset t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x0a, // extureLodOffset.
	0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, // #define attribut
	0x65, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x76, 0x61, 0x72, // e in.#define var
	0x79, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x75, 0x74, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, // ying out.#define
	0x20, 0x62, 0x67, 0x66, 0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x28, 0x5f, 0x73, //  bgfxShadow2D(_s
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, // ampler, _coord) 
	0x20, 0x20, 0x20, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x74, //     vec4_splat(t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, // exture(_sampler,
	0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x29, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, //  _coord) ).#defi
	0x6e, 0x65, 0x20, 0x62, 0x67, 0x66, 0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x50, // ne bgfxShadow2DP
	0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, // roj(_sampler, _c
	0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, // oord) vec4_splat
	0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, // (textureProj(_sa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x29, // mpler, _coord) )
	0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // .attribute vec3 
	0x61, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x0a, 0x61, 0x74, 0x74, 0x72, // a_position;.attr
	0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x61, 0x5f, 0x74, 0x65, 0x78, // ibute vec2 a_tex
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x3b, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, // coord0;.varying 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x5f, 0x63, 0x6c, 0x69, 0x70, 0x44, 0x69, 0x73, 0x74, // float v_clipDist
	0x61, 0x6e, 0x63, 0x65, 0x3b, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x65, // ance;.varying ve
	0x63, 0x33, 0x20, 0x76, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x3b, 0x0a, 0x76, // c3 v_tablePos;.v
	0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, // arying vec2 v_te
	0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, // xcoord0;.vec3 in
	0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, // stMul(vec3 _vec,
	0x20, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, //  mat3 _mtx) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, // turn ( (_vec) * 
	0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, // (_mtx) ); }.vec3
	0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, //  instMul(mat3 _m
	0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, // tx, vec3 _vec) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, //  return ( (_mtx)
	0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, //  * (_vec) ); }.v
	0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x34, // ec4 instMul(vec4
	0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, //  _vec, mat4 _mtx
	0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, // ) { return ( (_v
	0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, // ec) * (_mtx) ); 
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, // }.vec4 instMul(m
	0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, // at4 _mtx, vec4 _
	0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, // vec) { return ( 
	0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, // (_mtx) * (_vec) 
	0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, 0x70, 0x28, 0x66, // ); }.float rcp(f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, // loat _a) { retur
	0x6e, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, // n 1.0/_a; }.vec2
	0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, //  rcp(vec2 _a) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, 0x29, // return vec2(1.0)
	0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x70, 0x28, // /_a; }.vec3 rcp(
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, // vec3 _a) { retur
	0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, // n vec3(1.0)/_a; 
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, // }.vec4 rcp(vec4 
	0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, // _a) { return vec
	0x34, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, // 4(1.0)/_a; }.vec
	0x32, 0x20, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, // 2 vec2_splat(flo
	0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // at _x) { return 
	0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, // vec2(_x, _x); }.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, // vec3 vec3_splat(
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // float _x) { retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, // rn vec3(_x, _x, 
	0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, 0x65, 0x63, 0x34, // _x); }.vec4 vec4
	0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, // _splat(float _x)
	0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, //  { return vec4(_
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, // x, _x, _x, _x); 
	0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, // }.uvec2 uvec2_sp
	0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, // lat(uint _x) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, // eturn uvec2(_x, 
	0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, 0x75, 0x76, 0x65, // _x); }.uvec3 uve
	0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, // c3_splat(uint _x
	0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, // ) { return uvec3
	0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, // (_x, _x, _x); }.
	0x75, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, // uvec4 uvec4_spla
	0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // t(uint _x) { ret
	0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, // urn uvec4(_x, _x
	0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x6d, 0x61, 0x74, // , _x, _x); }.mat
	0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, // 4 mtxFromRows(ve
	0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, // c4 _0, vec4 _1, 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, // vec4 _2, vec4 _3
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, // ).{.return trans
	0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, // pose(mat4(_0, _1
	0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, // , _2, _3) );.}.m
	0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, // at4 mtxFromCols(
	0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, // vec4 _0, vec4 _1
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // , vec4 _2, vec4 
	0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, // _3).{.return mat
	0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, // 4(_0, _1, _2, _3
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, // );.}.mat3 mtxFro
	0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, // mRows(vec3 _0, v
	0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, // ec3 _1, vec3 _2)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, // .{.return transp
	0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, // ose(mat3(_0, _1,
	0x20, 0x5f, 0x32, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, //  _2) );.}.mat3 m
	0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, // txFromCols(vec3 
	0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, // _0, vec3 _1, vec
	0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, // 3 _2).{.return m
	0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x3b, // at3(_0, _1, _2);
	0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // .}.uniform vec4 
	0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // u_viewRect;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x54, // orm vec4 u_viewT
	0x65, 0x78, 0x65, 0x6c, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, // exel;.uniform ma
	0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, // t4 u_view;.unifo
	0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, // rm mat4 u_invVie
	0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, // w;.uniform mat4 
	0x75, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // u_proj;.uniform 
	0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, // mat4 u_invProj;.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, // uniform mat4 u_v
	0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // iewProj;.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x50, //  mat4 u_invViewP
	0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, // roj;.uniform mat
	0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, 0x3b, 0x0a, 0x75, // 4 u_model[32];.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, // niform mat4 u_mo
	0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // delView;.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, //  mat4 u_modelVie
	0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, // wProj;.uniform v
	0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x66, 0x34, 0x3b, // ec4 u_alphaRef4;
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, // .float sqr( floa
	0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, // t v).{.return v*
	0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x76, // v;.}.vec2 sqr( v
	0x65, 0x63, 0x32, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // ec2 v).{.return 
	0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x73, 0x71, 0x72, 0x28, // v*v;.}.vec3 sqr(
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, //  vec3 v).{.retur
	0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6d, 0x75, // n v*v;.}.vec3 mu
	0x6c, 0x5f, 0x77, 0x31, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x2c, 0x20, 0x6d, 0x61, // l_w1( vec3 v, ma
	0x74, 0x34, 0x20, 0x6d, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // t4 m).{.return v
	0x2e, 0x78, 0x2a, 0x6d, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, // .x*m[0].xyz + (v
	0x2e, 0x79, 0x2a, 0x6d, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, // .y*m[1].xyz + (v
	0x2e, 0x7a, 0x2a, 0x6d, 0x5b, 0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x6d, 0x5b, // .z*m[2].xyz + m[
	0x33, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // 3].xyz));.}.floa
	0x74, 0x20, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, // t acos_approx_di
	0x76, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, // vPI( float v).{.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, // float x = abs(v)
	0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, // ;.if(1. - x <= 0
	0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, // .00006103515625)
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, // .return (v >= 0.
	0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, // ) ? 0. : 1.;.flo
	0x61, 0x74, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, // at res = ((-0.15
	0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, // 5972/3.141592653
	0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, // 5897932384626433
	0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, // 832795) * x + (1
	0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, // .56467/3.1415926
	0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, // 5358979323846264
	0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, // 33832795) ) * sq
	0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // rt(1. - x);.retu
	0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x72, // rn (v >= 0.) ? r
	0x65, 0x73, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, // es : 1. - res;.}
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, // .float atan2_app
	0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, // rox_div2PI( floa
	0x74, 0x20, 0x79, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x29, 0x0a, 0x7b, 0x0a, // t y, float x).{.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3d, 0x20, 0x61, 0x62, // float abs_y = ab
	0x73, 0x28, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, // s(y);.float abs_
	0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x78, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x61, // x = abs(x);.if(a
	0x62, 0x73, 0x5f, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, // bs_x <= 0.000061
	0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x20, 0x26, 0x26, 0x20, 0x61, 0x62, 0x73, 0x5f, // 03515625 && abs_
	0x79, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, // y <= 0.000061035
	0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x30, 0x2e, // 15625).return 0.
	0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x61, 0x62, 0x73, // ;.float r = (abs
	0x5f, 0x78, 0x20, 0x2d, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x61, // _x - abs_y) / (a
	0x62, 0x73, 0x5f, 0x78, 0x20, 0x2b, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x3b, 0x0a, 0x66, // bs_x + abs_y);.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x78, // loat angle = ((x
	0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x28, 0x33, 0x2e, 0x2f, 0x38, 0x2e, 0x29, //  < 0.) ? (3./8.)
	0x20, 0x3a, 0x20, 0x28, 0x31, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x29, 0x0a, 0x2b, 0x20, 0x28, 0x30, //  : (1./8.)).+ (0
	0x2e, 0x32, 0x31, 0x31, 0x38, 0x36, 0x38, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, // .211868 /(2.*3.1
	0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, // 4159265358979323
	0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, // 84626433832795) 
	0x2a, 0x20, 0x72, 0x20, 0x2a, 0x20, 0x72, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x39, 0x38, 0x37, 0x33, // * r * r - 0.9873
	0x30, 0x35, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, // 05 /(2.*3.141592
	0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, // 6535897932384626
	0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x28, // 433832795)) * ((
	0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x72, 0x20, 0x3a, 0x20, 0x72, // x < 0.) ? -r : r
	0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x79, 0x20, 0x3c, 0x20, 0x30, // );.return (y < 0
	0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3a, 0x20, 0x61, 0x6e, // .) ? -angle : an
	0x67, 0x6c, 0x65, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x73, 0x69, // gle;.}.float asi
	0x6e, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x20, // n_approx_divPI( 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // float v).{.float
	0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, //  x = abs(v);.if(
	0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, // 1. - x <= 0.0000
	0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, // 6103515625).retu
	0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, // rn (v >= 0.) ? 0
	0x2e, 0x35, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // .5 : -0.5;.float
	0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, //  res = ((-0.1559
	0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, // 72/3.14159265358
	0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, // 9793238462643383
	0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, // 2795) * x + (1.5
	0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, // 6467/3.141592653
	0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, // 5897932384626433
	0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, // 832795) ) * sqrt
	0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // (1. - x);.return
	0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, //  (v >= 0.) ? 0.5
	0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, //  - res : -0.5 + 
	0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x61, 0x79, 0x5f, // res;.}.vec2 ray_
	0x74, 0x6f, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x75, 0x6c, // to_equirectangul
	0x61, 0x72, 0x5f, 0x75, 0x76, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x61, 0x79, 0x29, // ar_uv( vec3 ray)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x0a, // .{.return vec2(.
	0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, // 0.5 + atan2_appr
	0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x79, 0x2c, // ox_div2PI(ray.y,
	0x20, 0x72, 0x61, 0x79, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, //  ray.x),.acos_ap
	0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x7a, // prox_divPI(ray.z
	0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x73, // ));.}.float Invs
	0x52, 0x47, 0x42, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // RGB( float color
	0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, // ).{.if (color <=
	0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, 0x34, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, //  0.04045).return
	0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x32, //  color * (1.0/12
	0x2e, 0x39, 0x32, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // .92);.else.retur
	0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, // n pow(color * (1
	0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, // .0/1.055) + (0.0
	0x35, 0x35, 0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x29, 0x3b, // 55/1.055), 2.4);
	0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x52, 0x65, 0x63, 0x37, // .}.float InvRec7
	0x30, 0x39, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, // 09( float color)
	0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, // .{.if (color <= 
	0x30, 0x2e, 0x30, 0x38, 0x31, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, // 0.081).return co
	0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x34, 0x2e, 0x35, 0x29, 0x3b, // lor * (1.0/4.5);
	0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, // .else.return pow
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, // (color * (1.0/1.
	0x30, 0x39, 0x39, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x2f, 0x31, 0x2e, // 099) + (0.099/1.
	0x30, 0x39, 0x39, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x3b, // 099), 1.0/0.45);
	0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, // .}.float InvGamm
	0x61, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, // a( float color).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, // {.return InvsRGB
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // (color);.}.vec3 
	0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, // InvGamma( vec3 c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // olor).{.return v
	0x65, 0x63, 0x33, 0x28, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, // ec3(InvGamma(col
	0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, // or.x),InvGamma(c
	0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, // olor.y),InvGamma
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // (color.z));.}.ve
	0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, // c3 InvToneMap( v
	0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, // ec3 color).{.flo
	0x61, 0x74, 0x20, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x30, 0x2e, 0x35, // at inv_2bh = 0.5
	0x2f, 0x30, 0x2e, 0x32, 0x35, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x68, 0x20, // /0.25;.float bh 
	0x3d, 0x20, 0x34, 0x2e, 0x30, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2d, 0x20, 0x32, 0x2e, 0x30, // = 4.0*0.25 - 2.0
	0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, // ;.return (color 
	0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2b, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x63, 0x6f, 0x6c, // - 1.0 + sqrt(col
	0x6f, 0x72, 0x2a, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x20, 0x62, 0x68, 0x29, 0x20, // or*(color + bh) 
	0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x2a, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x3b, // + 1.0))*inv_2bh;
	0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x20, 0x66, // .}.float sRGB( f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // loat f).{.float 
	0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, // s;.if (f <= 0.00
	0x33, 0x31, 0x33, 0x30, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, 0x32, // 31308).s = 12.92
	0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, //  * f;.else.s = 1
	0x2e, 0x30, 0x35, 0x35, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x31, 0x2e, // .055 * pow(f, 1.
	0x30, 0x2f, 0x32, 0x2e, 0x34, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x3b, 0x0a, // 0/2.4) - 0.055;.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // return s;.}.floa
	0x74, 0x20, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // t Rec709( float 
	0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, // f).{.float s;.if
	0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, 0x29, 0x0a, 0x73, 0x20, //  (f <= 0.018).s 
	0x3d, 0x20, 0x34, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, // = 4.5 * f;.else.
	0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, // s = 1.099 * pow(
	0x66, 0x2c, 0x20, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x39, 0x39, // f, 0.45) - 0.099
	0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, // ;.return s;.}.fl
	0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x66, 0x6c, 0x6f, // oat FBGamma( flo
	0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, // at color).{.retu
	0x72, 0x6e, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, // rn sRGB(color);.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, // }.vec2 FBGamma( 
	0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // vec2 color).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, // turn vec2(FBGamm
	0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, // a(color.x),FBGam
	0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // ma(color.y));.}.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, // vec3 FBGamma( ve
	0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, // c3 color).{.retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, // rn vec3(FBGamma(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, // color.x),FBGamma
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, // (color.y),FBGamm
	0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // a(color.z));.}.v
	0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x32, 0x32, 0x28, 0x20, 0x76, // ec3 FBGamma22( v
	0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // ec3 color).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, // urn vec3(pow(col
	0x6f, 0x72, 0x2e, 0x78, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, // or.x, 1.0/2.2),p
	0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, // ow(color.y, 1.0/
	0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, // 2.2),pow(color.z
	0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // , 1.0/2.2));.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, // loat FBToneMap( 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // float l).{.retur
	0x6e, 0x20, 0x6c, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, // n l * ((l*0.25 +
	0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, //  1.0) / (l + 1.0
	0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, // ));.}.vec2 FBTon
	0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // eMap( vec2 color
	0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, // ).{.float l = do
	0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x31, // t(color,vec2(0.1
	0x37, 0x36, 0x32, 0x30, 0x34, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, // 76204+0.0108109*
	0x30, 0x2e, 0x35, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2b, 0x30, 0x2e, 0x30, // 0.5,0.812985+0.0
	0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, // 108109*0.5));.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, // turn color * ((l
	0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, // *0.25 + 1.0) / (
	0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // l + 1.0));.}.vec
	0x33, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, // 3 FBToneMap( vec
	0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // 3 color).{.float
	0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, //  l = dot(color,v
	0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2c, 0x30, 0x2e, 0x38, // ec3(0.176204,0.8
	0x31, 0x32, 0x39, 0x38, 0x35, 0x2c, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x29, // 12985,0.0108109)
	0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, // );.return color 
	0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, // * ((l*0.25 + 1.0
	0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, // ) / (l + 1.0));.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x28, // }.vec4 Additive(
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, //  vec4 cBase, vec
	0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // 4 cBlend, float 
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // percent).{.retur
	0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2b, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, // n cBase + cBlend
	0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, // *percent;.}.vec3
	0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, //  Screen ( vec3 c
	0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // Base, vec3 cBlen
	0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, // d).{.return 1.0 
	0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, // - (1.0 - cBase) 
	0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, // * (1.0 - cBlend)
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, // ;.}.vec4 Screen 
	0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, // ( vec4 cBase, ve
	0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // c4 cBlend).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, // urn 1.0 - (1.0 -
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, //  cBase) * (1.0 -
	0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, //  cBlend);.}.vec3
	0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, //  ScreenHDR ( vec
	0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, // 3 cBase, vec3 cB
	0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, // lend).{.return m
	0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, // ax(1.0 - (1.0 - 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, // cBase) * (1.0 - 
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, // cBlend), vec3(0.
	0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, // ,0.,0.));.}.vec4
	0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, //  ScreenHDR ( vec
	0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // 4 cBase, vec4 cB
	0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, // lend).{.return m
	0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, // ax(1.0 - (1.0 - 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, // cBase) * (1.0 - 
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, // cBlend), vec4(0.
	0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // ,0.,0.,0.));.}.v
	0x65, 0x63, 0x34, 0x20, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x20, 0x28, 0x20, 0x76, // ec4 Multiply ( v
	0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // ec4 cBase, vec4 
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, // cBlend, float pe
	0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // rcent).{.return 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2a, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, // cBase * cBlend*p
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, // ercent;.}.vec4 O
	0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // verlay ( vec4 cB
	0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, // ase, vec4 cBlend
	0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, // ).{.vec4 cNew = 
	0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, // step(0.5, cBase)
	0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, // ;.cNew = mix(cBa
	0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, // se*cBlend*2.0, 1
	0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, // .0-2.0*(1.0-cBas
	0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, // e)*(1.0-cBlend),
	0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, //  cNew);.return c
	0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, // New;.}.vec4 Over
	0x6c, 0x61, 0x79, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // layHDR ( vec4 cB
	0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, // ase, vec4 cBlend
	0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, // ).{.vec4 cNew = 
	0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, // step(0.5, cBase)
	0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x6d, 0x69, 0x78, // ;.cNew = max(mix
	0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, // (cBase*cBlend*2.
	0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, // 0, 1.0-2.0*(1.0-
	0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, // cBase)*(1.0-cBle
	0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // nd), cNew), vec4
	0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, // (0.,0.,0.,0.));.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // return cNew;.}.v
	0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x73, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, // ec3 cos_hemisphe
	0x72, 0x65, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, // re_sample( vec2 
	0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x68, 0x69, 0x20, 0x3d, // t).{.float phi =
	0x20, 0x74, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x28, 0x32, 0x2e, 0x30, 0x2a, 0x33, 0x2e, 0x31, 0x34, //  t.y * (2.0*3.14
	0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, // 1592653589793238
	0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x3b, 0x0a, // 4626433832795);.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, // float cosTheta =
	0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x74, 0x2e, 0x78, 0x29, //  sqrt(1.0 - t.x)
	0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, // ;.float sinTheta
	0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, //  = sqrt(t.x);.fl
	0x6f, 0x61, 0x74, 0x20, 0x73, 0x70, 0x2c, 0x63, 0x70, 0x3b, 0x0a, 0x7b, 0x73, 0x70, 0x3d, 0x73, // oat sp,cp;.{sp=s
	0x69, 0x6e, 0x28, 0x70, 0x68, 0x69, 0x29, 0x3b, 0x63, 0x70, 0x3d, 0x63, 0x6f, 0x73, 0x28, 0x70, // in(phi);cp=cos(p
	0x68, 0x69, 0x29, 0x3b, 0x7d, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, // hi);};.return ve
	0x63, 0x33, 0x28, 0x63, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, // c3(cp * sinTheta
	0x2c, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x73, 0x70, 0x20, 0x2a, // , cosTheta, sp *
	0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, //  sinTheta);.}.ve
	0x63, 0x33, 0x20, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x76, 0x65, 0x63, // c3 rotate_to_vec
	0x74, 0x6f, 0x72, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // tor_upper( vec3 
	0x76, 0x65, 0x63, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, // vec, vec3 normal
	0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, // ).{.if(normal.y 
	0x3e, 0x20, 0x2d, 0x30, 0x2e, 0x39, 0x39, 0x39, 0x39, 0x39, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, // > -0.99999).{.fl
	0x6f, 0x61, 0x74, 0x20, 0x68, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x28, 0x31, 0x2e, 0x30, // oat h = 1.0/(1.0
	0x2b, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // +normal.y);.floa
	0x74, 0x20, 0x68, 0x7a, 0x20, 0x3d, 0x20, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, // t hz = h*normal.
	0x7a, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x3d, 0x20, 0x68, // z;.float hzx = h
	0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // z*normal.x;.retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, // rn vec3(.vec.x *
	0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, //  (normal.y+hz*no
	0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x29, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, // rmal.z) + vec.y 
	0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, // * normal.x - vec
	0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, // .z * hzx,.vec.y 
	0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, // * normal.y - vec
	0x2e, 0x78, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, // .x * normal.x - 
	0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, // vec.z * normal.z
	0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, // ,.vec.y * normal
	0x2e, 0x7a, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, // .z - vec.x * hzx
	0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, //  + vec.z * (norm
	0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x2a, // al.y+h*normal.x*
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, // normal.x));.}.el
	0x73, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x2d, 0x76, 0x65, 0x63, 0x3b, 0x0a, // se return -vec;.
	0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, // }.uniform mat4 m
	0x61, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x5b, // atWorldViewProj[
	0x32, 0x5d, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, // 2];.uniform vec4
	0x20, 0x63, 0x6c, 0x69, 0x70, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x3b, 0x0a, 0x76, 0x6f, 0x69, //  clip_plane;.voi
	0x64, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x5f, 0x74, 0x61, 0x62, // d main().{.v_tab
	0x6c, 0x65, 0x50, 0x6f, 0x73, 0x20, 0x3d, 0x20, 0x61, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, // lePos = a_positi
	0x6f, 0x6e, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, // on.xyz;.v_texcoo
	0x72, 0x64, 0x30, 0x20, 0x3d, 0x20, 0x61, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, // rd0 = a_texcoord
	0x30, 0x3b, 0x0a, 0x67, 0x6c, 0x5f, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x20, 0x3d, 0x20, 0x67, 0x6c, // 0;.gl_Layer = gl
	0x5f, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x3b, 0x0a, 0x76, 0x5f, 0x63, // _InstanceID;.v_c
	0x6c, 0x69, 0x70, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x3d, 0x20, 0x64, 0x6f, // lipDistance = do
	0x74, 0x28, 0x63, 0x6c, 0x69, 0x70, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x2c, 0x20, 0x76, 0x65, // t(clip_plane, ve
	0x63, 0x34, 0x28, 0x61, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x31, // c4(a_position, 1
	0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x67, 0x6c, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, // .0));.gl_Positio
	0x6e, 0x20, 0x3d, 0x20, 0x28, 0x20, 0x28, 0x6d, 0x61, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x56, // n = ( (matWorldV
	0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x5b, 0x67, 0x6c, 0x5f, 0x49, 0x6e, 0x73, 0x74, 0x61, // iewProj[gl_Insta
	0x6e, 0x63, 0x65, 0x49, 0x44, 0x5d, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, // nceID]) * (vec4(
	0x61, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, // a_position, 1.0)
	0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x00,                                                 // ) );.}..
};
static const uint8_t vs_flasher_clip_st_dx11[930] =
{
	0x56, 0x53, 0x48, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x11, 0xe4, 0xa0, 0x91, 0x02, 0x00, 0x10, 0x6d, // VSH............m
	0x61, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x04, // atWorldViewProj.
	0x02, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x63, 0x6c, 0x69, 0x70, 0x5f, 0x70, // ..........clip_p
	0x6c, 0x61, 0x6e, 0x65, 0x02, 0x00, 0x80, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x58, 0x03, // lane..........X.
	0x00, 0x00, 0x44, 0x58, 0x42, 0x43, 0x0f, 0xe0, 0xd0, 0x09, 0x6f, 0xea, 0x16, 0xa3, 0x16, 0xe2, // ..DXBC....o.....
	0x01, 0xac, 0x2d, 0xf1, 0xbf, 0x54, 0x01, 0x00, 0x00, 0x00, 0x58, 0x03, 0x00, 0x00, 0x04, 0x00, // ..-..T....X.....
	0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0xa8, 0x00, 0x00, 0x00, 0x60, 0x01, 0x00, 0x00, 0x48, 0x03, // ..0.......`...H.
	0x00, 0x00, 0x49, 0x53, 0x47, 0x4e, 0x70, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x08, 0x00, // ..ISGNp.........
	0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, // ..P.............
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x07, 0x00, 0x00, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, // ..........Y.....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x03, // ................
	0x00, 0x00, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, // ..b.............
	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, // ..........POSITI
	0x4f, 0x4e, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x53, 0x56, 0x5f, 0x49, // ON.TEXCOORD.SV_I
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x00, 0x4f, 0x53, 0x47, 0x4e, 0xb0, 0x00, // nstanceID.OSGN..
	0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, // ................
	0x00, 0x00, 0x8c, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, // ................
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x0e, 0x00, 0x00, 0x8c, 0x00, 0x00, 0x00, 0x01, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0e, 0x01, // ................
	0x00, 0x00, 0x8c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, // ................
	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x0c, 0x00, 0x00, 0x95, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x0e, // ................
	0x00, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x00, 0x54, 0x45, // ..SV_POSITION.TE
	0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x53, 0x56, 0x5f, 0x52, 0x65, 0x6e, 0x64, 0x65, 0x72, // XCOORD.SV_Render
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x49, 0x6e, 0x64, 0x65, 0x78, // TargetArrayIndex
	0x00, 0xab, 0x53, 0x48, 0x45, 0x58, 0xe0, 0x01, 0x00, 0x00, 0x50, 0x00, 0x01, 0x00, 0x78, 0x00, // ..SHEX....P...x.
	0x00, 0x00, 0x6a, 0x08, 0x00, 0x01, 0x59, 0x08, 0x00, 0x04, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, // ..j...Y...F. ...
	0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x5f, 0x00, 0x00, 0x03, 0x72, 0x10, 0x10, 0x00, 0x00, 0x00, // ......_...r.....
	0x00, 0x00, 0x5f, 0x00, 0x00, 0x03, 0x32, 0x10, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x60, 0x00, // .._...2.......`.
	0x00, 0x04, 0x12, 0x10, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x67, 0x00, // ..............g.
	0x00, 0x04, 0xf2, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x65, 0x00, // ... ..........e.
	0x00, 0x03, 0x12, 0x20, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x03, 0xe2, 0x20, // ... ......e.... 
	0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x03, 0x32, 0x20, 0x10, 0x00, 0x02, 0x00, // ......e...2 ....
	0x00, 0x00, 0x67, 0x00, 0x00, 0x04, 0x12, 0x20, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, // ..g.... ........
	0x00, 0x00, 0x68, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x07, 0x12, 0x00, // ..h.......).....
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x10, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x40, // ...............@
	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x0a, 0xf2, 0x00, 0x10, 0x00, 0x01, 0x00, // ......8.........
	0x00, 0x00, 0x56, 0x15, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x06, 0x00, 0x00, // ..V.......F. ...
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, // ..............2.
	0x00, 0x0b, 0xf2, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x04, 0x00, 0x00, // ..........F. ...
	0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x10, 0x10, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x0c, 0xf2, 0x00, // ..F.......2.....
	0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x06, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, // ......F. .......
	0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa6, 0x1a, 0x10, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0xf2, 0x20, // ..F............ 
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x8e, // ......F.......F.
	0x20, 0x06, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, //  ...............
	0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x12, // ..6...r.......F.
	0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x82, 0x00, 0x10, 0x00, 0x00, 0x00, // ......6.........
	0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x11, 0x00, 0x00, 0x08, 0x12, 0x20, // ...@.....?..... 
	0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, // ......F. .......
	0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0xe2, 0x20, // ..F.......6.... 
	0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x06, 0x19, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, // ..............6.
	0x00, 0x05, 0x32, 0x20, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x10, 0x10, 0x00, 0x01, 0x00, // ..2 ......F.....
	0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x12, 0x20, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0a, 0x10, // ..6.... ........
	0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x01, 0x53, 0x46, 0x49, 0x30, 0x08, 0x00, // ......>...SFI0..
	0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x01, 0x00, 0x10, 0x00, // ... ............
	0x90, 0x00,                                                                                     // ..
};
static const uint8_t vs_flasher_clip_st_spv[1868] =
{
	0x56, 0x53, 0x48, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x11, 0xe4, 0xa0, 0x91, 0x02, 0x00, 0x0a, 0x63, // VSH............c
	0x6c, 0x69, 0x70, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, 0x02, 0x01, 0x80, 0x00, 0x01, 0x00, 0x00, // lip_plane.......
	0x00, 0x00, 0x00, 0x10, 0x6d, 0x61, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x56, 0x69, 0x65, 0x77, // ....matWorldView
	0x50, 0x72, 0x6f, 0x6a, 0x04, 0x02, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, // Proj............
	0x00, 0x00, 0x03, 0x02, 0x23, 0x07, 0x00, 0x00, 0x01, 0x00, 0x0b, 0x00, 0x08, 0x00, 0xa1, 0x00, // ....#...........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x11, 0x00, // ................
	0x02, 0x00, 0x86, 0x14, 0x00, 0x00, 0x0a, 0x00, 0x0a, 0x00, 0x53, 0x50, 0x56, 0x5f, 0x45, 0x58, // ..........SPV_EX
	0x54, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x65, 0x72, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x70, 0x6f, 0x72, // T_shader_viewpor
	0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x00, 0x0b, 0x00, // t_index_layer...
	0x06, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, 0x4c, 0x53, 0x4c, 0x2e, 0x73, 0x74, 0x64, 0x2e, 0x34, // ......GLSL.std.4
	0x35, 0x30, 0x00, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, // 50..............
	0x00, 0x00, 0x0f, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, // ..............ma
	0x69, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x4c, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x54, 0x00, // in....L...P...T.
	0x00, 0x00, 0x5f, 0x00, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, 0x67, 0x00, 0x00, 0x00, 0x6b, 0x00, // .._...c...g...k.
	0x00, 0x00, 0x6f, 0x00, 0x00, 0x00, 0x03, 0x00, 0x03, 0x00, 0x05, 0x00, 0x00, 0x00, 0xf4, 0x01, // ..o.............
	0x00, 0x00, 0x05, 0x00, 0x04, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, // ..........main..
	0x00, 0x00, 0x05, 0x00, 0x06, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x55, 0x6e, 0x69, 0x66, 0x6f, 0x72, // ......,...Unifor
	0x6d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x08, 0x00, 0x2c, 0x00, // mBlock........,.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x56, 0x69, // ......matWorldVi
	0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x06, 0x00, 0x2c, 0x00, // ewProj........,.
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x63, 0x6c, 0x69, 0x70, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x65, // ......clip_plane
	0x00, 0x00, 0x05, 0x00, 0x03, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, // ................
	0x05, 0x00, 0x4c, 0x00, 0x00, 0x00, 0x61, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, // ..L...a_position
	0x00, 0x00, 0x05, 0x00, 0x05, 0x00, 0x50, 0x00, 0x00, 0x00, 0x61, 0x5f, 0x74, 0x65, 0x78, 0x63, // ......P...a_texc
	0x6f, 0x6f, 0x72, 0x64, 0x30, 0x00, 0x05, 0x00, 0x06, 0x00, 0x54, 0x00, 0x00, 0x00, 0x67, 0x6c, // oord0.....T...gl
	0x5f, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x00, 0x00, 0x00, 0x05, 0x00, // _InstanceID.....
	0x0a, 0x00, 0x5f, 0x00, 0x00, 0x00, 0x40, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, // .._...@entryPoin
	0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x67, 0x6c, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, // tOutput.gl_Posit
	0x69, 0x6f, 0x6e, 0x00, 0x00, 0x00, 0x05, 0x00, 0x0b, 0x00, 0x63, 0x00, 0x00, 0x00, 0x40, 0x65, // ion.......c...@e
	0x6e, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, // ntryPointOutput.
	0x76, 0x5f, 0x63, 0x6c, 0x69, 0x70, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x00, 0x00, // v_clipDistance..
	0x00, 0x00, 0x05, 0x00, 0x0a, 0x00, 0x67, 0x00, 0x00, 0x00, 0x40, 0x65, 0x6e, 0x74, 0x72, 0x79, // ......g...@entry
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x76, 0x5f, 0x74, 0x61, // PointOutput.v_ta
	0x62, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x0a, 0x00, 0x6b, 0x00, // blePos........k.
	0x00, 0x00, 0x40, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4f, 0x75, 0x74, // ..@entryPointOut
	0x70, 0x75, 0x74, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x00, // put.v_texcoord0.
	0x00, 0x00, 0x05, 0x00, 0x09, 0x00, 0x6f, 0x00, 0x00, 0x00, 0x40, 0x65, 0x6e, 0x74, 0x72, 0x79, // ......o...@entry
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x67, 0x6c, 0x5f, 0x4c, // PointOutput.gl_L
	0x61, 0x79, 0x65, 0x72, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x2b, 0x00, 0x00, 0x00, 0x06, 0x00, // ayer..G...+.....
	0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x48, 0x00, 0x04, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x00, // ..@...H...,.....
	0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x00, 0x00, // ......H...,.....
	0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0x2c, 0x00, // ..#.......H...,.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x48, 0x00, // ..............H.
	0x05, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x80, 0x00, // ..,.......#.....
	0x00, 0x00, 0x47, 0x00, 0x03, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x47, 0x00, // ..G...,.......G.
	0x04, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, // ......".......G.
	0x04, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, // ......!.......G.
	0x04, 0x00, 0x4c, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, // ..L...........G.
	0x04, 0x00, 0x50, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, 0x00, // ..P...........G.
	0x04, 0x00, 0x54, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x00, 0x00, 0x47, 0x00, // ..T.......+...G.
	0x04, 0x00, 0x5f, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, // .._...........G.
	0x04, 0x00, 0x63, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, // ..c...........G.
	0x04, 0x00, 0x67, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, 0x00, // ..g...........G.
	0x04, 0x00, 0x6b, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x47, 0x00, // ..k...........G.
	0x04, 0x00, 0x6f, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x13, 0x00, // ..o.............
	0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x21, 0x00, 0x03, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, // ......!.........
	0x00, 0x00, 0x16, 0x00, 0x03, 0x00, 0x06, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x17, 0x00, // .......... .....
	0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x17, 0x00, // ................
	0x04, 0x00, 0x09, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x15, 0x00, // ................
	0x04, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x00, // ...... .........
	0x04, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x15, 0x00, // ................
	0x04, 0x00, 0x17, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2b, 0x00, // ...... .......+.
	0x04, 0x00, 0x17, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x18, 0x00, // ................
	0x04, 0x00, 0x29, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x2b, 0x00, // ..)...........+.
	0x04, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x1c, 0x00, // ......*.........
	0x04, 0x00, 0x2b, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x1e, 0x00, // ..+...)...*.....
	0x04, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x20, 0x00, // ..,...+....... .
	0x04, 0x00, 0x2d, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, 0x00, 0x3b, 0x00, // ..-.......,...;.
	0x04, 0x00, 0x2d, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x20, 0x00, // ..-........... .
	0x04, 0x00, 0x2f, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x2b, 0x00, // ../...........+.
	0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x2b, 0x00, // ......3......?+.
	0x04, 0x00, 0x17, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, // ......:....... .
	0x04, 0x00, 0x41, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x29, 0x00, 0x00, 0x00, 0x20, 0x00, // ..A.......)... .
	0x04, 0x00, 0x4b, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x3b, 0x00, // ..K...........;.
	0x04, 0x00, 0x4b, 0x00, 0x00, 0x00, 0x4c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00, // ..K...L....... .
	0x04, 0x00, 0x4f, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x3b, 0x00, // ..O...........;.
	0x04, 0x00, 0x4f, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00, // ..O...P....... .
	0x04, 0x00, 0x53, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x3b, 0x00, // ..S...........;.
	0x04, 0x00, 0x53, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00, // ..S...T....... .
	0x04, 0x00, 0x5e, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x3b, 0x00, // ..^...........;.
	0x04, 0x00, 0x5e, 0x00, 0x00, 0x00, 0x5f, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x20, 0x00, // ..^..._....... .
	0x04, 0x00, 0x62, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x3b, 0x00, // ..b...........;.
	0x04, 0x00, 0x62, 0x00, 0x00, 0x00, 0x63, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x20, 0x00, // ..b...c....... .
	0x04, 0x00, 0x66, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x3b, 0x00, // ..f...........;.
	0x04, 0x00, 0x66, 0x00, 0x00, 0x00, 0x67, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x20, 0x00, // ..f...g....... .
	0x04, 0x00, 0x6a, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x3b, 0x00, // ..j...........;.
	0x04, 0x00, 0x6a, 0x00, 0x00, 0x00, 0x6b, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x20, 0x00, // ..j...k....... .
	0x04, 0x00, 0x6e, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x3b, 0x00, // ..n...........;.
	0x04, 0x00, 0x6e, 0x00, 0x00, 0x00, 0x6f, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x36, 0x00, // ..n...o.......6.
	0x05, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, // ................
	0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x05, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, // ..........=.....
	0x00, 0x00, 0x4d, 0x00, 0x00, 0x00, 0x4c, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x09, 0x00, // ..M...L...=.....
	0x00, 0x00, 0x51, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x0b, 0x00, // ..Q...P...=.....
	0x00, 0x00, 0x55, 0x00, 0x00, 0x00, 0x54, 0x00, 0x00, 0x00, 0x41, 0x00, 0x05, 0x00, 0x2f, 0x00, // ..U...T...A.../.
	0x00, 0x00, 0x8f, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x3d, 0x00, // ..............=.
	0x04, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x8f, 0x00, 0x00, 0x00, 0x51, 0x00, // ..............Q.
	0x05, 0x00, 0x06, 0x00, 0x00, 0x00, 0x92, 0x00, 0x00, 0x00, 0x4d, 0x00, 0x00, 0x00, 0x00, 0x00, // ..........M.....
	0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x06, 0x00, 0x00, 0x00, 0x93, 0x00, 0x00, 0x00, 0x4d, 0x00, // ..Q...........M.
	0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x06, 0x00, 0x00, 0x00, 0x94, 0x00, // ......Q.........
	0x00, 0x00, 0x4d, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x50, 0x00, 0x07, 0x00, 0x0d, 0x00, // ..M.......P.....
	0x00, 0x00, 0x95, 0x00, 0x00, 0x00, 0x92, 0x00, 0x00, 0x00, 0x93, 0x00, 0x00, 0x00, 0x94, 0x00, // ................
	0x00, 0x00, 0x33, 0x00, 0x00, 0x00, 0x94, 0x00, 0x05, 0x00, 0x06, 0x00, 0x00, 0x00, 0x96, 0x00, // ..3.............
	0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x95, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x06, 0x00, // ..........Q.....
	0x00, 0x00, 0x99, 0x00, 0x00, 0x00, 0x4d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, // ......M.......Q.
	0x05, 0x00, 0x06, 0x00, 0x00, 0x00, 0x9a, 0x00, 0x00, 0x00, 0x4d, 0x00, 0x00, 0x00, 0x01, 0x00, // ..........M.....
	0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x06, 0x00, 0x00, 0x00, 0x9b, 0x00, 0x00, 0x00, 0x4d, 0x00, // ..Q...........M.
	0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x50, 0x00, 0x07, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x9c, 0x00, // ......P.........
	0x00, 0x00, 0x99, 0x00, 0x00, 0x00, 0x9a, 0x00, 0x00, 0x00, 0x9b, 0x00, 0x00, 0x00, 0x33, 0x00, // ..............3.
	0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0x41, 0x00, 0x00, 0x00, 0x9e, 0x00, 0x00, 0x00, 0x2e, 0x00, // ..A...A.........
	0x00, 0x00, 0x3a, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x29, 0x00, // ..:...U...=...).
	0x00, 0x00, 0x9f, 0x00, 0x00, 0x00, 0x9e, 0x00, 0x00, 0x00, 0x90, 0x00, 0x05, 0x00, 0x0d, 0x00, // ................
	0x00, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x9c, 0x00, 0x00, 0x00, 0x9f, 0x00, 0x00, 0x00, 0x3e, 0x00, // ..............>.
	0x03, 0x00, 0x5f, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x03, 0x00, 0x63, 0x00, // .._.......>...c.
	0x00, 0x00, 0x96, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x03, 0x00, 0x67, 0x00, 0x00, 0x00, 0x4d, 0x00, // ......>...g...M.
	0x00, 0x00, 0x3e, 0x00, 0x03, 0x00, 0x6b, 0x00, 0x00, 0x00, 0x51, 0x00, 0x00, 0x00, 0x3e, 0x00, // ..>...k...Q...>.
	0x03, 0x00, 0x6f, 0x00, 0x00, 0x00, 0x55, 0x00, 0x00, 0x00, 0xfd, 0x00, 0x01, 0x00, 0x38, 0x00, // ..o...U.......8.
	0x01, 0x00, 0x00, 0x03, 0x01, 0x00, 0x10, 0x00, 0xff, 0xff, 0x90, 0x00,                         // ............
};
static const bgfx::EmbeddedShader vs_flasher_clip_st = BGFX_EMBEDDED_SHADER(vs_flasher_clip_st);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Build of fragment shader from fs_flasher.sc to fs_flasher_clip with options: CLIP
static const uint8_t fs_flasher_clip_mtl[6756] =
{
	0x46, 0x53, 0x48, 0x0b, 0x11, 0xe4, 0xa0, 0x91, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x05, 0x62, // FSH............b
	0x61, 0x6c, 0x6c, 0x73, 0x12, 0x08, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x74, // alls...........t
	0x65, 0x78, 0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x41, 0x53, 0x61, 0x6d, 0x70, // ex_flasher_ASamp
	0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x74, 0x65, // ler...........te
	0x78, 0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x41, 0x54, 0x65, 0x78, 0x74, 0x75, // x_flasher_ATextu
	0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x74, 0x65, 0x78, // re...........tex
	0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x42, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, // _flasher_BSample
	0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x74, 0x65, 0x78, 0x5f, // r...........tex_
	0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x42, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // flasher_BTexture
	0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, // ..........(amoun
	0x74, 0x5f, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x61, 0x74, 0x65, // t_blend_modulate
	0x5f, 0x76, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x4d, // _vs_add_flasherM
	0x6f, 0x64, 0x65, 0x12, 0x01, 0xa0, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x61, 0x6c, // ode..........$al
	0x70, 0x68, 0x61, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x42, 0x5f, 0x66, // phaTestValueAB_f
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x42, 0x6c, 0x65, // ilterMode_addBle
	0x6e, 0x64, 0x12, 0x01, 0x90, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x73, 0x74, 0x61, // nd...........sta
	0x74, 0x69, 0x63, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x12, 0x01, // ticColor_Alpha..
	0x80, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x43, 0x65, // .........lightCe
	0x6e, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x12, 0x01, 0xb0, // nter_doShadow...
	0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x66, 0x6c, 0x61, 0x73, // ........tex_flas
	0x68, 0x65, 0x72, 0x5f, 0x41, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, // her_A...........
	0x74, 0x65, 0x78, 0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x42, 0x10, 0x00, 0x00, // tex_flasher_B...
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf5, 0x18, 0x00, 0x00, 0x23, 0x69, 0x6e, 0x63, 0x6c, // ...........#incl
	0x75, 0x64, 0x65, 0x20, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x64, 0x6c, 0x69, // ude <metal_stdli
	0x62, 0x3e, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x73, 0x69, 0x6d, // b>.#include <sim
	0x64, 0x2f, 0x73, 0x69, 0x6d, 0x64, 0x2e, 0x68, 0x3e, 0x0a, 0x0a, 0x75, 0x73, 0x69, 0x6e, 0x67, // d/simd.h>..using
	0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x6d, 0x65, 0x74, 0x61, 0x6c, //  namespace metal
	0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, // ;..struct _Globa
	0x6c, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x62, // l.{.    float4 b
	0x61, 0x6c, 0x6c, 0x73, 0x5b, 0x38, 0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, // alls[8];.    flo
	0x61, 0x74, 0x34, 0x20, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, // at4 staticColor_
	0x41, 0x6c, 0x70, 0x68, 0x61, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // Alpha;.    float
	0x34, 0x20, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, // 4 alphaTestValue
	0x41, 0x42, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, // AB_filterMode_ad
	0x64, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, // dBlend;.    floa
	0x74, 0x34, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x5f, // t4 amount_blend_
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x5f, // modulate_vs_add_
	0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x3b, 0x0a, 0x20, 0x20, 0x20, // flasherMode;.   
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x43, 0x65, 0x6e, //  float4 lightCen
	0x74, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x3b, 0x0a, 0x7d, 0x3b, // ter_doShadow;.};
	0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // ..constant float
	0x34, 0x20, 0x5f, 0x38, 0x38, 0x33, 0x20, 0x3d, 0x20, 0x7b, 0x7d, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, // 4 _883 = {};.con
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x39, 0x31, 0x32, // stant float _912
	0x20, 0x3d, 0x20, 0x7b, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x78, //  = {};..struct x
	0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x0a, 0x7b, // latMtlMain_out.{
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, // .    float4 bgfx
	0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x20, 0x5b, 0x5b, 0x63, 0x6f, 0x6c, // _FragData0 [[col
	0x6f, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, // or(0)]];.};..str
	0x75, 0x63, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, // uct xlatMtlMain_
	0x69, 0x6e, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, // in.{.    float v
	0x5f, 0x63, 0x6c, 0x69, 0x70, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x5b, 0x5b, // _clipDistance [[
	0x75, 0x73, 0x65, 0x72, 0x28, 0x6c, 0x6f, 0x63, 0x6e, 0x30, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x20, // user(locn0)]];. 
	0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x76, 0x5f, 0x74, 0x61, 0x62, 0x6c, //    float3 v_tabl
	0x65, 0x50, 0x6f, 0x73, 0x20, 0x5b, 0x5b, 0x75, 0x73, 0x65, 0x72, 0x28, 0x6c, 0x6f, 0x63, 0x6e, // ePos [[user(locn
	0x31, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, // 1)]];.    float2
	0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x5b, 0x5b, 0x75, //  v_texcoord0 [[u
	0x73, 0x65, 0x72, 0x28, 0x6c, 0x6f, 0x63, 0x6e, 0x32, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, // ser(locn2)]];.};
	0x0a, 0x0a, 0x5b, 0x5b, 0x20, 0x65, 0x61, 0x72, 0x6c, 0x79, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, // ..[[ early_fragm
	0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x20, 0x5d, 0x5d, 0x20, 0x66, 0x72, 0x61, // ent_tests ]] fra
	0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, // gment xlatMtlMai
	0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, // n_out xlatMtlMai
	0x6e, 0x28, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, // n(xlatMtlMain_in
	0x20, 0x69, 0x6e, 0x20, 0x5b, 0x5b, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x5d, 0x5d, //  in [[stage_in]]
	0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x20, 0x5f, 0x47, 0x6c, 0x6f, 0x62, // , constant _Glob
	0x61, 0x6c, 0x26, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x20, 0x5b, 0x5b, 0x62, 0x75, 0x66, // al& _mtl_u [[buf
	0x66, 0x65, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // fer(0)]], textur
	0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3e, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x66, // e2d<float> tex_f
	0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x41, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, // lasher_A [[textu
	0x72, 0x65, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // re(0)]], texture
	0x32, 0x64, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3e, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x66, 0x6c, // 2d<float> tex_fl
	0x61, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x42, 0x20, 0x5b, 0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // asher_B [[textur
	0x65, 0x28, 0x31, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, // e(1)]], sampler 
	0x74, 0x65, 0x78, 0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x41, 0x53, 0x61, 0x6d, // tex_flasher_ASam
	0x70, 0x6c, 0x65, 0x72, 0x20, 0x5b, 0x5b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x30, // pler [[sampler(0
	0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x74, 0x65, 0x78, // )]], sampler tex
	0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x42, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, // _flasher_BSample
	0x72, 0x20, 0x5b, 0x5b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x28, 0x31, 0x29, 0x5d, 0x5d, // r [[sampler(1)]]
	0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, // ).{.    xlatMtlM
	0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x3d, 0x20, 0x7b, 0x7d, // ain_out out = {}
	0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x39, 0x32, // ;.    float4 _92
	0x35, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x64, 0x6f, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, // 5;.    do.    {.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x69, 0x6e, 0x2e, 0x76, //         if (in.v
	0x5f, 0x63, 0x6c, 0x69, 0x70, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x20, 0x3c, 0x20, // _clipDistance < 
	0x30, 0x2e, 0x30, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, // 0.0).        {. 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x64, 0x69, 0x73, 0x63, 0x61, //            disca
	0x72, 0x64, 0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x28, 0x29, 0x3b, 0x0a, 0x20, // rd_fragment();. 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //        }.       
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x38, 0x38, 0x32, 0x3b, 0x0a, 0x20, 0x20, //  float4 _882;.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, //       if (_mtl_u
	0x2e, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, // .amount_blend_mo
	0x64, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x66, 0x6c, // dulate_vs_add_fl
	0x61, 0x73, 0x68, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x7a, 0x20, 0x3c, 0x20, 0x32, 0x2e, // asherMode.z < 2.
	0x30, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, // 0).        {.   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, //          float4 
	0x5f, 0x36, 0x39, 0x31, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, // _691 = tex_flash
	0x65, 0x72, 0x5f, 0x41, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, // er_A.sample(tex_
	0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x41, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // flasher_ASampler
	0x2c, 0x20, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, // , in.v_texcoord0
	0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, // );.            i
	0x66, 0x20, 0x28, 0x5f, 0x36, 0x39, 0x31, 0x2e, 0x77, 0x20, 0x3c, 0x3d, 0x20, 0x5f, 0x6d, 0x74, // f (_691.w <= _mt
	0x6c, 0x5f, 0x75, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x6c, // l_u.alphaTestVal
	0x75, 0x65, 0x41, 0x42, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x5f, // ueAB_filterMode_
	0x61, 0x64, 0x64, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2e, 0x78, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, // addBlend.x).    
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //         {.      
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x39, 0x32, 0x35, 0x20, 0x3d, //           _925 =
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, //  float4(0.0);.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, //               br
	0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // eak;.           
	0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, //  }.            _
	0x38, 0x38, 0x32, 0x20, 0x3d, 0x20, 0x5f, 0x36, 0x39, 0x31, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, // 882 = _691;.    
	0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, //     }.        el
	0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, // se.        {.   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x38, 0x38, 0x32, 0x20, 0x3d, 0x20, //          _882 = 
	0x5f, 0x38, 0x38, 0x33, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, // _883;.        }.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, //         float4 _
	0x38, 0x38, 0x36, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, // 886;.        if 
	0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, // (_mtl_u.amount_b
	0x6c, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x73, // lend_modulate_vs
	0x5f, 0x61, 0x64, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, // _add_flasherMode
	0x2e, 0x7a, 0x20, 0x3d, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // .z == 1.0).     
	0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //    {.           
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x37, 0x30, 0x37, 0x20, 0x3d, 0x20, 0x74, //  float4 _707 = t
	0x65, 0x78, 0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x42, 0x2e, 0x73, 0x61, 0x6d, // ex_flasher_B.sam
	0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x5f, // ple(tex_flasher_
	0x42, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, // BSampler, in.v_t
	0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // excoord0);.     
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, 0x37, 0x30, 0x37, 0x2e, //        if (_707.
	0x77, 0x20, 0x3c, 0x3d, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x61, 0x6c, 0x70, 0x68, // w <= _mtl_u.alph
	0x61, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x42, 0x5f, 0x66, 0x69, 0x6c, // aTestValueAB_fil
	0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x42, 0x6c, 0x65, 0x6e, 0x64, // terMode_addBlend
	0x2e, 0x79, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // .y).            
	0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // {.              
	0x20, 0x20, 0x5f, 0x39, 0x32, 0x35, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, //   _925 = float4(
	0x30, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 0.0);.          
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, //       break;.   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, //          }.     
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x38, 0x38, 0x36, 0x20, 0x3d, 0x20, 0x5f, 0x37, //        _886 = _7
	0x30, 0x37, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, // 07;.        }.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, //       else.     
	0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //    {.           
	0x20, 0x5f, 0x38, 0x38, 0x36, 0x20, 0x3d, 0x20, 0x5f, 0x38, 0x38, 0x33, 0x3b, 0x0a, 0x20, 0x20, //  _886 = _883;.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //       }.        
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x38, 0x38, 0x38, 0x3b, 0x0a, 0x20, 0x20, 0x20, // float4 _888;.   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, //      if (_mtl_u.
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x64, // amount_blend_mod
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x66, 0x6c, 0x61, // ulate_vs_add_fla
	0x73, 0x68, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x7a, 0x20, 0x3d, 0x3d, 0x20, 0x30, 0x2e, // sherMode.z == 0.
	0x30, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, // 0).        {.   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x38, 0x38, 0x38, 0x20, 0x3d, 0x20, //          _888 = 
	0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x43, 0x6f, 0x6c, // _mtl_u.staticCol
	0x6f, 0x72, 0x5f, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x20, 0x2a, 0x20, 0x5f, 0x38, 0x38, 0x32, 0x3b, // or_Alpha * _882;
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // .        }.     
	0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //    else.        
	0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x38, // {.            _8
	0x38, 0x38, 0x20, 0x3d, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x73, 0x74, 0x61, 0x74, // 88 = _mtl_u.stat
	0x69, 0x63, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x3b, 0x0a, 0x20, // icColor_Alpha;. 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //        }.       
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x39, 0x32, 0x31, 0x3b, 0x0a, 0x20, 0x20, //  float4 _921;.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, //       if (_mtl_u
	0x2e, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, // .amount_blend_mo
	0x64, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x66, 0x6c, // dulate_vs_add_fl
	0x61, 0x73, 0x68, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x7a, 0x20, 0x3d, 0x3d, 0x20, 0x31, // asherMode.z == 1
	0x2e, 0x30, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, // .0).        {.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, //           float4
	0x20, 0x5f, 0x38, 0x39, 0x31, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //  _891;.         
	0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x61, 0x6c, //    if (_mtl_u.al
	0x70, 0x68, 0x61, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x42, 0x5f, 0x66, // phaTestValueAB_f
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x42, 0x6c, 0x65, // ilterMode_addBle
	0x6e, 0x64, 0x2e, 0x7a, 0x20, 0x3d, 0x3d, 0x20, 0x32, 0x2e, 0x30, 0x29, 0x0a, 0x20, 0x20, 0x20, // nd.z == 2.0).   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, //          {.     
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x38, 0x39, 0x31, 0x20, //            _891 
	0x3d, 0x20, 0x5f, 0x38, 0x38, 0x38, 0x20, 0x2a, 0x20, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, // = _888 * fast::m
	0x61, 0x78, 0x28, 0x6d, 0x69, 0x78, 0x28, 0x28, 0x5f, 0x38, 0x38, 0x32, 0x20, 0x2a, 0x20, 0x5f, // ax(mix((_882 * _
	0x38, 0x38, 0x36, 0x29, 0x20, 0x2a, 0x20, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x66, 0x6d, 0x61, 0x28, // 886) * 2.0, fma(
	0x2d, 0x28, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2d, // -((float4(1.0) -
	0x20, 0x5f, 0x38, 0x38, 0x32, 0x29, 0x20, 0x2a, 0x20, 0x32, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, //  _882) * 2.0), f
	0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2d, 0x20, 0x5f, 0x38, 0x38, // loat4(1.0) - _88
	0x36, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x2c, // 6, float4(1.0)),
	0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x30, 0x2e, 0x35, //  step(float4(0.5
	0x29, 0x2c, 0x20, 0x5f, 0x38, 0x38, 0x32, 0x29, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // ), _882)), float
	0x34, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 4(0.0));.       
	0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //      }.         
	0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //    else.        
	0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //     {.          
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x38, 0x39, 0x31, 0x20, 0x3d, 0x20, 0x5f, 0x38, 0x38, //       _891 = _88
	0x38, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, // 8;.            }
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, // .            flo
	0x61, 0x74, 0x34, 0x20, 0x5f, 0x38, 0x39, 0x34, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // at4 _894;.      
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, //       if (_mtl_u
	0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, // .alphaTestValueA
	0x42, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, // B_filterMode_add
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2e, 0x7a, 0x20, 0x3d, 0x3d, 0x20, 0x33, 0x2e, 0x30, 0x29, 0x0a, // Blend.z == 3.0).
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, //             {.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x38, //               _8
	0x39, 0x34, 0x20, 0x3d, 0x20, 0x5f, 0x38, 0x39, 0x31, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x5f, 0x38, // 94 = _891 * ((_8
	0x38, 0x32, 0x20, 0x2a, 0x20, 0x5f, 0x38, 0x38, 0x36, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, // 82 * _886) * _mt
	0x6c, 0x5f, 0x75, 0x2e, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x65, 0x6e, 0x64, // l_u.amount_blend
	0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x73, 0x5f, 0x61, 0x64, 0x64, // _modulate_vs_add
	0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x78, 0x29, 0x3b, // _flasherMode.x);
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, // .            }. 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, //            else.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, //             {.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x38, //               _8
	0x39, 0x34, 0x20, 0x3d, 0x20, 0x5f, 0x38, 0x39, 0x31, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // 94 = _891;.     
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //        }.       
	0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x38, 0x39, 0x37, //      float4 _897
	0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, // ;.            if
	0x20, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x54, 0x65, //  (_mtl_u.alphaTe
	0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x42, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, // stValueAB_filter
	0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2e, 0x7a, 0x20, // Mode_addBlend.z 
	0x3d, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // == 1.0).        
	0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //     {.          
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x38, 0x39, 0x37, 0x20, 0x3d, 0x20, 0x5f, 0x38, 0x39, //       _897 = _89
	0x34, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x38, 0x38, 0x32, 0x20, 0x2b, 0x20, 0x28, 0x5f, 0x38, 0x38, // 4 * (_882 + (_88
	0x36, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x61, 0x6d, 0x6f, 0x75, 0x6e, // 6 * _mtl_u.amoun
	0x74, 0x5f, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x61, 0x74, 0x65, // t_blend_modulate
	0x5f, 0x76, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x4d, // _vs_add_flasherM
	0x6f, 0x64, 0x65, 0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ode.x));.       
	0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //      }.         
	0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //    else.        
	0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //     {.          
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x38, 0x39, 0x37, 0x20, 0x3d, 0x20, 0x5f, 0x38, 0x39, //       _897 = _89
	0x34, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, // 4;.            }
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, // .            flo
	0x61, 0x74, 0x34, 0x20, 0x5f, 0x39, 0x32, 0x32, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // at4 _922;.      
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, //       if (_mtl_u
	0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, // .alphaTestValueA
	0x42, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, // B_filterMode_add
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2e, 0x7a, 0x20, 0x3d, 0x3d, 0x20, 0x34, 0x2e, 0x30, 0x29, 0x0a, // Blend.z == 4.0).
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, //             {.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x39, //               _9
	0x32, 0x32, 0x20, 0x3d, 0x20, 0x5f, 0x38, 0x39, 0x37, 0x20, 0x2a, 0x20, 0x66, 0x61, 0x73, 0x74, // 22 = _897 * fast
	0x3a, 0x3a, 0x6d, 0x61, 0x78, 0x28, 0x66, 0x6d, 0x61, 0x28, 0x5f, 0x38, 0x38, 0x32, 0x20, 0x2d, // ::max(fma(_882 -
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, //  float4(1.0), fl
	0x6f, 0x61, 0x74, 0x34, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2d, 0x20, 0x5f, 0x38, 0x38, 0x36, // oat4(1.0) - _886
	0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, // , float4(1.0)), 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, // float4(0.0));.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, //           }.    
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, //         else.   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, //          {.     
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x39, 0x32, 0x32, 0x20, //            _922 
	0x3d, 0x20, 0x5f, 0x38, 0x39, 0x37, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // = _897;.        
	0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //     }.          
	0x20, 0x20, 0x5f, 0x39, 0x32, 0x31, 0x20, 0x3d, 0x20, 0x5f, 0x39, 0x32, 0x32, 0x3b, 0x0a, 0x20, //   _921 = _922;. 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //        }.       
	0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, //  else.        {.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x39, 0x32, 0x31, //             _921
	0x20, 0x3d, 0x20, 0x5f, 0x38, 0x38, 0x38, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //  = _888;.       
	0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, //  }.        float
	0x34, 0x20, 0x5f, 0x39, 0x32, 0x34, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 4 _924;.        
	0x69, 0x66, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, // if (_mtl_u.light
	0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x2e, // Center_doShadow.
	0x77, 0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // w != 0.0).      
	0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //   {.            
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x36, 0x32, 0x32, 0x20, 0x3d, 0x20, 0x69, 0x6e, // float3 _622 = in
	0x2e, 0x76, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x20, 0x2d, 0x20, 0x5f, 0x6d, // .v_tablePos - _m
	0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, // tl_u.lightCenter
	0x5f, 0x64, 0x6f, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x20, // _doShadow.xyz;. 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, //            float
	0x20, 0x5f, 0x36, 0x32, 0x34, 0x20, 0x3d, 0x20, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x28, 0x5f, //  _624 = length(_
	0x36, 0x32, 0x32, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 622);.          
	0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x39, 0x30, 0x35, 0x3b, 0x0a, 0x20, 0x20, //   float _905;.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x64, 0x6f, 0x0a, 0x20, 0x20, 0x20, //           do.   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, //          {.     
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, //            float
	0x20, 0x5f, 0x38, 0x39, 0x39, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //  _899;.         
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x38, 0x39, 0x39, 0x20, 0x3d, 0x20, 0x31, 0x2e, //        _899 = 1.
	0x30, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 0;.             
	0x20, 0x20, 0x20, 0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x5f, 0x39, 0x30, 0x31, 0x3b, 0x0a, 0x20, 0x20, //    bool _901;.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, //               fl
	0x6f, 0x61, 0x74, 0x20, 0x5f, 0x39, 0x30, 0x36, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // oat _906;.      
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, //           float 
	0x5f, 0x39, 0x32, 0x37, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // _927;.          
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x38, 0x39, 0x38, 0x20, 0x3d, //       int _898 =
	0x20, 0x30, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //  0;.            
	0x20, 0x20, 0x20, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x28, 0x3b, 0x3b, 0x29, 0x0a, 0x20, 0x20, 0x20, //     for (;;).   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, //              {. 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, 0x38, 0x39, 0x38, 0x20, 0x3c, 0x20, 0x38, 0x29, //    if (_898 < 8)
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // .               
	0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //      {.         
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, //                i
	0x66, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x62, 0x61, 0x6c, 0x6c, 0x73, 0x5b, // f (_mtl_u.balls[
	0x5f, 0x38, 0x39, 0x38, 0x5d, 0x2e, 0x77, 0x20, 0x3d, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x0a, // _898].w == 0.0).
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //         {.      
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x39, 0x30, 0x36, 0x20, 0x3d, 0x20, 0x5f, 0x38, 0x39, //       _906 = _89
	0x39, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 9;.             
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, //                _
	0x39, 0x30, 0x31, 0x20, 0x3d, 0x20, 0x74, 0x72, 0x75, 0x65, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, // 901 = true;.    
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, //         break;. 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //        }.       
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x37, 0x39, 0x33, 0x20, 0x3d, 0x20, 0x5f, //  float3 _793 = _
	0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x62, 0x61, 0x6c, 0x6c, 0x73, 0x5b, 0x5f, 0x38, 0x39, 0x38, // mtl_u.balls[_898
	0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2d, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x6c, // ].xyz - _mtl_u.l
	0x69, 0x67, 0x68, 0x74, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x53, 0x68, 0x61, // ightCenter_doSha
	0x64, 0x6f, 0x77, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // dow.xyz;.       
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x37, 0x39, 0x37, 0x20, 0x3d, 0x20, 0x64, 0x6f, //  float _797 = do
	0x74, 0x28, 0x5f, 0x37, 0x39, 0x33, 0x2c, 0x20, 0x5f, 0x36, 0x32, 0x32, 0x29, 0x20, 0x2f, 0x20, // t(_793, _622) / 
	0x28, 0x5f, 0x36, 0x32, 0x34, 0x20, 0x2a, 0x20, 0x5f, 0x36, 0x32, 0x34, 0x29, 0x3b, 0x0a, 0x20, // (_624 * _624);. 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x28, 0x5f, 0x37, 0x39, 0x37, //        if ((_797
	0x20, 0x3e, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x20, 0x26, 0x26, 0x20, 0x28, 0x5f, 0x37, 0x39, 0x37, //  > 0.0) && (_797
	0x20, 0x3c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //  < 1.0)).       
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //  {.             
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, //                f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x38, 0x31, 0x32, 0x20, 0x3d, 0x20, 0x66, 0x6d, 0x61, 0x28, // loat _812 = fma(
	0x2d, 0x35, 0x2e, 0x30, 0x2c, 0x20, 0x5f, 0x37, 0x39, 0x37, 0x2c, 0x20, 0x35, 0x2e, 0x30, 0x29, // -5.0, _797, 5.0)
	0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ;.              
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x39, //               _9
	0x32, 0x37, 0x20, 0x3d, 0x20, 0x5f, 0x38, 0x39, 0x39, 0x20, 0x2a, 0x20, 0x66, 0x6d, 0x61, 0x28, // 27 = _899 * fma(
	0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x63, 0x6c, 0x61, 0x6d, 0x70, 0x28, 0x66, 0x6d, 0x61, 0x28, // fast::clamp(fma(
	0x5f, 0x37, 0x39, 0x33, 0x2e, 0x78, 0x2c, 0x20, 0x5f, 0x37, 0x39, 0x33, 0x2e, 0x78, 0x2c, 0x20, // _793.x, _793.x, 
	0x5f, 0x37, 0x39, 0x33, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x5f, 0x37, 0x39, 0x33, 0x2e, 0x79, 0x29, // _793.y * _793.y)
	0x20, 0x2f, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x62, 0x61, 0x6c, 0x6c, 0x73, //  / (_mtl_u.balls
	0x5b, 0x5f, 0x38, 0x39, 0x38, 0x5d, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, // [_898].w * _mtl_
	0x75, 0x2e, 0x62, 0x61, 0x6c, 0x6c, 0x73, 0x5b, 0x5f, 0x38, 0x39, 0x38, 0x5d, 0x2e, 0x77, 0x29, // u.balls[_898].w)
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6d, 0x61, // , 0.0, 1.0), fma
	0x28, 0x30, 0x2e, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x37, 0x36, 0x31, 0x35, 0x38, 0x31, // (0.8999999761581
	0x34, 0x32, 0x30, 0x38, 0x39, 0x38, 0x34, 0x33, 0x37, 0x35, 0x2c, 0x20, 0x73, 0x6d, 0x6f, 0x6f, // 4208984375, smoo
	0x74, 0x68, 0x73, 0x74, 0x65, 0x70, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x62, 0x61, // thstep(_mtl_u.ba
	0x6c, 0x6c, 0x73, 0x5b, 0x5f, 0x38, 0x39, 0x38, 0x5d, 0x2e, 0x77, 0x20, 0x2d, 0x20, 0x5f, 0x38, // lls[_898].w - _8
	0x31, 0x32, 0x2c, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x62, 0x61, 0x6c, 0x6c, 0x73, // 12, _mtl_u.balls
	0x5b, 0x5f, 0x38, 0x39, 0x38, 0x5d, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x5f, 0x38, 0x31, 0x32, 0x2c, // [_898].w + _812,
	0x20, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x28, 0x5f, 0x37, 0x39, 0x33, 0x20, 0x2d, 0x20, 0x28, //  length(_793 - (
	0x5f, 0x36, 0x32, 0x32, 0x20, 0x2a, 0x20, 0x5f, 0x37, 0x39, 0x37, 0x29, 0x29, 0x29, 0x2c, 0x20, // _622 * _797))), 
	0x2d, 0x30, 0x2e, 0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x37, 0x36, 0x31, 0x35, 0x38, 0x31, // -0.8999999761581
	0x34, 0x32, 0x30, 0x38, 0x39, 0x38, 0x34, 0x33, 0x37, 0x35, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, // 4208984375), 1.0
	0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // );.             
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, //            }.   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //      else.      
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //   {.            
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x5f, 0x39, 0x32, 0x37, 0x20, 0x3d, 0x20, 0x5f, 0x38, 0x39, 0x39, 0x3b, 0x0a, 0x20, 0x20, 0x20, // _927 = _899;.   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //      }.         
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, //                _
	0x38, 0x39, 0x39, 0x20, 0x3d, 0x20, 0x5f, 0x39, 0x32, 0x37, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, // 899 = _927;.    
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x20, 0x20, 0x20, 0x20, 0x5f, 0x38, 0x39, 0x38, 0x2b, 0x2b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, //     _898++;.    
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x20, 0x20, 0x20, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x3b, 0x0a, 0x20, 0x20, //     continue;.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //   }.            
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, //         else.   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //  {.             
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x39, 0x30, 0x36, 0x20, //            _906 
	0x3d, 0x20, 0x5f, 0x39, 0x31, 0x32, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // = _912;.        
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x5f, 0x39, 0x30, 0x31, 0x20, 0x3d, 0x20, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x3b, 0x0a, 0x20, 0x20, // _901 = false;.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, //       break;.   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //  }.             
	0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //    }.           
	0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, 0x39, 0x30, 0x31, 0x29, 0x0a, 0x20, //      if (_901). 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, //                {
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // .               
	0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x39, 0x30, 0x35, 0x20, 0x3d, 0x20, 0x5f, 0x39, 0x30, 0x36, //      _905 = _906
	0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ;.              
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, //       break;.   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, //              }. 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, //                _
	0x39, 0x30, 0x35, 0x20, 0x3d, 0x20, 0x5f, 0x38, 0x39, 0x39, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, // 905 = _899;.    
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, //             brea
	0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, // k;.            }
	0x20, 0x77, 0x68, 0x69, 0x6c, 0x65, 0x28, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x20, //  while(false);. 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, //            float
	0x33, 0x20, 0x5f, 0x36, 0x33, 0x34, 0x20, 0x3d, 0x20, 0x5f, 0x39, 0x32, 0x31, 0x2e, 0x78, 0x79, // 3 _634 = _921.xy
	0x7a, 0x20, 0x2a, 0x20, 0x5f, 0x39, 0x30, 0x35, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // z * _905;.      
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x38, 0x36, //       float4 _86
	0x39, 0x20, 0x3d, 0x20, 0x5f, 0x39, 0x32, 0x31, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 9 = _921;.      
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x38, 0x36, 0x39, 0x2e, 0x78, 0x20, 0x3d, 0x20, 0x5f, //       _869.x = _
	0x36, 0x33, 0x34, 0x2e, 0x78, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 634.x;.         
	0x20, 0x20, 0x20, 0x5f, 0x38, 0x36, 0x39, 0x2e, 0x79, 0x20, 0x3d, 0x20, 0x5f, 0x36, 0x33, 0x34, //    _869.y = _634
	0x2e, 0x79, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // .y;.            
	0x5f, 0x38, 0x36, 0x39, 0x2e, 0x7a, 0x20, 0x3d, 0x20, 0x5f, 0x36, 0x33, 0x34, 0x2e, 0x7a, 0x3b, // _869.z = _634.z;
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x39, 0x32, // .            _92
	0x34, 0x20, 0x3d, 0x20, 0x5f, 0x38, 0x36, 0x39, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 4 = _869;.      
	0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, //   }.        else
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // .        {.     
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x39, 0x32, 0x34, 0x20, 0x3d, 0x20, 0x5f, 0x39, //        _924 = _9
	0x32, 0x31, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, // 21;.        }.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x39, 0x32, //       float4 _92
	0x36, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, // 6;.        if (_
	0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x54, 0x65, 0x73, 0x74, 0x56, // mtl_u.alphaTestV
	0x61, 0x6c, 0x75, 0x65, 0x41, 0x42, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, // alueAB_filterMod
	0x65, 0x5f, 0x61, 0x64, 0x64, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2e, 0x77, 0x20, 0x3d, 0x3d, 0x20, // e_addBlend.w == 
	0x30, 0x2e, 0x30, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, // 0.0).        {. 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x39, 0x32, 0x36, 0x20, //            _926 
	0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x39, 0x32, 0x34, 0x2e, 0x78, 0x79, // = float4(_924.xy
	0x7a, 0x2c, 0x20, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x63, 0x6c, 0x61, 0x6d, 0x70, 0x28, 0x5f, // z, fast::clamp(_
	0x39, 0x32, 0x34, 0x2e, 0x77, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, // 924.w, 0.0, 1.0)
	0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, // );.        }.   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //      else.      
	0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //   {.            
	0x5f, 0x39, 0x32, 0x36, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x39, // _926 = float4(_9
	0x32, 0x34, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x2d, 0x5f, 0x6d, 0x74, 0x6c, // 24.xyz * ((-_mtl
	0x5f, 0x75, 0x2e, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x5f, // _u.amount_blend_
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x5f, // modulate_vs_add_
	0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x79, 0x29, 0x20, 0x2a, // flasherMode.y) *
	0x20, 0x5f, 0x39, 0x32, 0x34, 0x2e, 0x77, 0x29, 0x2c, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, //  _924.w), (1.0 /
	0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, //  _mtl_u.amount_b
	0x6c, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x73, // lend_modulate_vs
	0x5f, 0x61, 0x64, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, // _add_flasherMode
	0x2e, 0x79, 0x29, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, // .y) - 1.0);.    
	0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x39, //     }.        _9
	0x32, 0x35, 0x20, 0x3d, 0x20, 0x5f, 0x39, 0x32, 0x36, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // 25 = _926;.     
	0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x20, //    break;.    } 
	0x77, 0x68, 0x69, 0x6c, 0x65, 0x28, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x20, 0x20, // while(false);.  
	0x20, 0x20, 0x6f, 0x75, 0x74, 0x2e, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, //   out.bgfx_FragD
	0x61, 0x74, 0x61, 0x30, 0x20, 0x3d, 0x20, 0x5f, 0x39, 0x32, 0x35, 0x3b, 0x0a, 0x20, 0x20, 0x20, // ata0 = _925;.   
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6f, 0x75, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x0a, //  return out;.}..
	0x00, 0x00, 0x00, 0x01,                                                                         // ....
};
static const uint8_t fs_flasher_clip_essl[8867] =
{
	0x46, 0x53, 0x48, 0x0b, 0x11, 0xe4, 0xa0, 0x91, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x90, 0x22, // FSH............"
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x33, 0x32, 0x30, 0x20, 0x65, // ..#version 320 e
	0x73, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, // s.#define attrib
	0x75, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x76, // ute in.#define v
	0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, // arying in.precis
	0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3b, // ion highp float;
	0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, // .precision highp
	0x20, 0x69, 0x6e, 0x74, 0x3b, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x73, 0x68, //  int;.#define sh
	0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, // adow2D(_sampler,
	0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, //  _coord) texture
	0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, // (_sampler, _coor
	0x64, 0x29, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x73, 0x68, 0x61, 0x64, 0x6f, // d).#define shado
	0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // w2DProj(_sampler
	0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // , _coord) textur
	0x65, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, // eProj(_sampler, 
	0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x0a, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x65, 0x64, 0x69, // _coord).out medi
	0x75, 0x6d, 0x70, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, // ump vec4 bgfx_Fr
	0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, // agColor;.varying
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x5f, 0x63, 0x6c, 0x69, 0x70, 0x44, 0x69, 0x73, //  float v_clipDis
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x3b, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x76, // tance;.varying v
	0x65, 0x63, 0x33, 0x20, 0x76, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x3b, 0x0a, // ec3 v_tablePos;.
	0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x5f, 0x74, // varying vec2 v_t
	0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, // excoord0;.vec3 i
	0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, // nstMul(vec3 _vec
	0x2c, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, // , mat3 _mtx) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, // eturn ( (_vec) *
	0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, //  (_mtx) ); }.vec
	0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, // 3 instMul(mat3 _
	0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, // mtx, vec3 _vec) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, // { return ( (_mtx
	0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, // ) * (_vec) ); }.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, // vec4 instMul(vec
	0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, // 4 _vec, mat4 _mt
	0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, // x) { return ( (_
	0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, // vec) * (_mtx) );
	0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, //  }.vec4 instMul(
	0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // mat4 _mtx, vec4 
	0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // _vec) { return (
	0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, //  (_mtx) * (_vec)
	0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, 0x70, 0x28, //  ); }.float rcp(
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // float _a) { retu
	0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, // rn 1.0/_a; }.vec
	0x32, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, // 2 rcp(vec2 _a) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, //  return vec2(1.0
	0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x70, // )/_a; }.vec3 rcp
	0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // (vec3 _a) { retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, // rn vec3(1.0)/_a;
	0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x34, //  }.vec4 rcp(vec4
	0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, //  _a) { return ve
	0x63, 0x34, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, // c4(1.0)/_a; }.ve
	0x63, 0x32, 0x20, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, // c2 vec2_splat(fl
	0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // oat _x) { return
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, //  vec2(_x, _x); }
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, // .vec3 vec3_splat
	0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // (float _x) { ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, // urn vec3(_x, _x,
	0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, 0x65, 0x63, //  _x); }.vec4 vec
	0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, // 4_splat(float _x
	0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, // ) { return vec4(
	0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, // _x, _x, _x, _x);
	0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, //  }.uvec2 uvec2_s
	0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, // plat(uint _x) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, // return uvec2(_x,
	0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, 0x75, 0x76, //  _x); }.uvec3 uv
	0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, // ec3_splat(uint _
	0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, // x) { return uvec
	0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, // 3(_x, _x, _x); }
	0x0a, 0x75, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, // .uvec4 uvec4_spl
	0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // at(uint _x) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, // turn uvec4(_x, _
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x6d, 0x61, // x, _x, _x); }.ma
	0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, // t4 mtxFromRows(v
	0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, // ec4 _0, vec4 _1,
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, //  vec4 _2, vec4 _
	0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, // 3).{.return tran
	0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, // spose(mat4(_0, _
	0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // 1, _2, _3) );.}.
	0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, // mat4 mtxFromCols
	0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, // (vec4 _0, vec4 _
	0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // 1, vec4 _2, vec4
	0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, //  _3).{.return ma
	0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, // t4(_0, _1, _2, _
	0x33, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, // 3);.}.mat3 mtxFr
	0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, // omRows(vec3 _0, 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, // vec3 _1, vec3 _2
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, // ).{.return trans
	0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, // pose(mat3(_0, _1
	0x2c, 0x20, 0x5f, 0x32, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, // , _2) );.}.mat3 
	0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, // mtxFromCols(vec3
	0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, //  _0, vec3 _1, ve
	0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // c3 _2).{.return 
	0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, // mat3(_0, _1, _2)
	0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, // ;.}.uniform vec4
	0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, //  u_viewRect;.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, // form vec4 u_view
	0x54, 0x65, 0x78, 0x65, 0x6c, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, // Texel;.uniform m
	0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // at4 u_view;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, // orm mat4 u_invVi
	0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, // ew;.uniform mat4
	0x20, 0x75, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, //  u_proj;.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, 0x6a, 0x3b, //  mat4 u_invProj;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, // .uniform mat4 u_
	0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // viewProj;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, // m mat4 u_invView
	0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, // Proj;.uniform ma
	0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, 0x3b, 0x0a, // t4 u_model[32];.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, // uniform mat4 u_m
	0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // odelView;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, // m mat4 u_modelVi
	0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // ewProj;.uniform 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x66, 0x34, // vec4 u_alphaRef4
	0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x66, 0x6c, 0x6f, // ;.float sqr( flo
	0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // at v).{.return v
	0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, // *v;.}.vec2 sqr( 
	0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // vec2 v).{.return
	0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x73, 0x71, 0x72, //  v*v;.}.vec3 sqr
	0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, // ( vec3 v).{.retu
	0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6d, // rn v*v;.}.vec3 m
	0x75, 0x6c, 0x5f, 0x77, 0x31, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x2c, 0x20, 0x6d, // ul_w1( vec3 v, m
	0x61, 0x74, 0x34, 0x20, 0x6d, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // at4 m).{.return 
	0x76, 0x2e, 0x78, 0x2a, 0x6d, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, // v.x*m[0].xyz + (
	0x76, 0x2e, 0x79, 0x2a, 0x6d, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, // v.y*m[1].xyz + (
	0x76, 0x2e, 0x7a, 0x2a, 0x6d, 0x5b, 0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x6d, // v.z*m[2].xyz + m
	0x5b, 0x33, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // [3].xyz));.}.flo
	0x61, 0x74, 0x20, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, // at acos_approx_d
	0x69, 0x76, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, // ivPI( float v).{
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, // .float x = abs(v
	0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, // );.if(1. - x <= 
	0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, // 0.00006103515625
	0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, // ).return (v >= 0
	0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x3b, 0x0a, 0x66, 0x6c, // .) ? 0. : 1.;.fl
	0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, // oat res = ((-0.1
	0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, // 55972/3.14159265
	0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, // 3589793238462643
	0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, // 3832795) * x + (
	0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, // 1.56467/3.141592
	0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, // 6535897932384626
	0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, // 433832795) ) * s
	0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, // qrt(1. - x);.ret
	0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, // urn (v >= 0.) ? 
	0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, // res : 1. - res;.
	0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, // }.float atan2_ap
	0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, // prox_div2PI( flo
	0x61, 0x74, 0x20, 0x79, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x29, 0x0a, 0x7b, // at y, float x).{
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3d, 0x20, 0x61, // .float abs_y = a
	0x62, 0x73, 0x28, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, // bs(y);.float abs
	0x5f, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x78, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, // _x = abs(x);.if(
	0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, // abs_x <= 0.00006
	0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x20, 0x26, 0x26, 0x20, 0x61, 0x62, 0x73, // 103515625 && abs
	0x5f, 0x79, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, // _y <= 0.00006103
	0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x30, // 515625).return 0
	0x2e, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x61, 0x62, // .;.float r = (ab
	0x73, 0x5f, 0x78, 0x20, 0x2d, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x20, 0x2f, 0x20, 0x28, // s_x - abs_y) / (
	0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2b, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x3b, 0x0a, // abs_x + abs_y);.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3d, 0x20, 0x28, 0x28, // float angle = ((
	0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x28, 0x33, 0x2e, 0x2f, 0x38, 0x2e, // x < 0.) ? (3./8.
	0x29, 0x20, 0x3a, 0x20, 0x28, 0x31, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x29, 0x0a, 0x2b, 0x20, 0x28, // ) : (1./8.)).+ (
	0x30, 0x2e, 0x32, 0x31, 0x31, 0x38, 0x36, 0x38, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, // 0.211868 /(2.*3.
	0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, // 1415926535897932
	0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, // 384626433832795)
	0x20, 0x2a, 0x20, 0x72, 0x20, 0x2a, 0x20, 0x72, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x39, 0x38, 0x37, //  * r * r - 0.987
	0x33, 0x30, 0x35, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, // 305 /(2.*3.14159
	0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, // 2653589793238462
	0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, // 6433832795)) * (
	0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x72, 0x20, 0x3a, 0x20, // (x < 0.) ? -r : 
	0x72, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x79, 0x20, 0x3c, 0x20, // r);.return (y < 
	0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3a, 0x20, 0x61, // 0.) ? -angle : a
	0x6e, 0x67, 0x6c, 0x65, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x73, // ngle;.}.float as
	0x69, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, // in_approx_divPI(
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, //  float v).{.floa
	0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, // t x = abs(v);.if
	0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, // (1. - x <= 0.000
	0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, // 06103515625).ret
	0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, // urn (v >= 0.) ? 
	0x30, 0x2e, 0x35, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // 0.5 : -0.5;.floa
	0x74, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, // t res = ((-0.155
	0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, // 972/3.1415926535
	0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, // 8979323846264338
	0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, // 32795) * x + (1.
	0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, // 56467/3.14159265
	0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, // 3589793238462643
	0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, // 3832795) ) * sqr
	0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // t(1. - x);.retur
	0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, // n (v >= 0.) ? 0.
	0x35, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x20, 0x2b, // 5 - res : -0.5 +
	0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x61, 0x79, //  res;.}.vec2 ray
	0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x75, // _to_equirectangu
	0x6c, 0x61, 0x72, 0x5f, 0x75, 0x76, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x61, 0x79, // lar_uv( vec3 ray
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, // ).{.return vec2(
	0x0a, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, // .0.5 + atan2_app
	0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x79, // rox_div2PI(ray.y
	0x2c, 0x20, 0x72, 0x61, 0x79, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, // , ray.x),.acos_a
	0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, // pprox_divPI(ray.
	0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, // z));.}.float Inv
	0x73, 0x52, 0x47, 0x42, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // sRGB( float colo
	0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, // r).{.if (color <
	0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, 0x34, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // = 0.04045).retur
	0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, // n color * (1.0/1
	0x32, 0x2e, 0x39, 0x32, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, // 2.92);.else.retu
	0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, // rn pow(color * (
	0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, // 1.0/1.055) + (0.
	0x30, 0x35, 0x35, 0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x29, // 055/1.055), 2.4)
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x52, 0x65, 0x63, // ;.}.float InvRec
	0x37, 0x30, 0x39, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // 709( float color
	0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, // ).{.if (color <=
	0x20, 0x30, 0x2e, 0x30, 0x38, 0x31, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, //  0.081).return c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x34, 0x2e, 0x35, 0x29, // olor * (1.0/4.5)
	0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, // ;.else.return po
	0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, // w(color * (1.0/1
	0x2e, 0x30, 0x39, 0x39, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x2f, 0x31, // .099) + (0.099/1
	0x2e, 0x30, 0x39, 0x39, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x30, 0x2e, 0x34, 0x35, 0x29, // .099), 1.0/0.45)
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, // ;.}.float InvGam
	0x6d, 0x61, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, // ma( float color)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, // .{.return InvsRG
	0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, // B(color);.}.vec3
	0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, //  InvGamma( vec3 
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // color).{.return 
	0x76, 0x65, 0x63, 0x33, 0x28, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, // vec3(InvGamma(co
	0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, // lor.x),InvGamma(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, // color.y),InvGamm
	0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // a(color.z));.}.v
	0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, // ec3 InvToneMap( 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, // vec3 color).{.fl
	0x6f, 0x61, 0x74, 0x20, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x30, 0x2e, // oat inv_2bh = 0.
	0x35, 0x2f, 0x30, 0x2e, 0x32, 0x35, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x68, // 5/0.25;.float bh
	0x20, 0x3d, 0x20, 0x34, 0x2e, 0x30, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2d, 0x20, 0x32, 0x2e, //  = 4.0*0.25 - 2.
	0x30, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // 0;.return (color
	0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2b, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x63, 0x6f, //  - 1.0 + sqrt(co
	0x6c, 0x6f, 0x72, 0x2a, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x20, 0x62, 0x68, 0x29, // lor*(color + bh)
	0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x2a, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, //  + 1.0))*inv_2bh
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x20, // ;.}.float sRGB( 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // float f).{.float
	0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, //  s;.if (f <= 0.0
	0x30, 0x33, 0x31, 0x33, 0x30, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, // 031308).s = 12.9
	0x32, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, // 2 * f;.else.s = 
	0x31, 0x2e, 0x30, 0x35, 0x35, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x31, // 1.055 * pow(f, 1
	0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x34, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x3b, // .0/2.4) - 0.055;
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // .return s;.}.flo
	0x61, 0x74, 0x20, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // at Rec709( float
	0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, //  f).{.float s;.i
	0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, 0x29, 0x0a, 0x73, // f (f <= 0.018).s
	0x20, 0x3d, 0x20, 0x34, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, //  = 4.5 * f;.else
	0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, // .s = 1.099 * pow
	0x28, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x39, // (f, 0.45) - 0.09
	0x39, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // 9;.return s;.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x66, 0x6c, // loat FBGamma( fl
	0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // oat color).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, // urn sRGB(color);
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, // .}.vec2 FBGamma(
	0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, //  vec2 color).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, // eturn vec2(FBGam
	0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, // ma(color.x),FBGa
	0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, // mma(color.y));.}
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, // .vec3 FBGamma( v
	0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // ec3 color).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, // urn vec3(FBGamma
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, // (color.x),FBGamm
	0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, // a(color.y),FBGam
	0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // ma(color.z));.}.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x32, 0x32, 0x28, 0x20, // vec3 FBGamma22( 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // vec3 color).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, // turn vec3(pow(co
	0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, // lor.x, 1.0/2.2),
	0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, 0x30, // pow(color.y, 1.0
	0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, // /2.2),pow(color.
	0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // z, 1.0/2.2));.}.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, // float FBToneMap(
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, //  float l).{.retu
	0x72, 0x6e, 0x20, 0x6c, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, // rn l * ((l*0.25 
	0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, // + 1.0) / (l + 1.
	0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x54, 0x6f, // 0));.}.vec2 FBTo
	0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // neMap( vec2 colo
	0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, // r).{.float l = d
	0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, // ot(color,vec2(0.
	0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, // 176204+0.0108109
	0x2a, 0x30, 0x2e, 0x35, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2b, 0x30, 0x2e, // *0.5,0.812985+0.
	0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x3b, 0x0a, 0x72, // 0108109*0.5));.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, // eturn color * ((
	0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, // l*0.25 + 1.0) / 
	0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // (l + 1.0));.}.ve
	0x63, 0x33, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, // c3 FBToneMap( ve
	0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // c3 color).{.floa
	0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, // t l = dot(color,
	0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2c, 0x30, 0x2e, // vec3(0.176204,0.
	0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2c, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, // 812985,0.0108109
	0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // ));.return color
	0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, //  * ((l*0.25 + 1.
	0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, // 0) / (l + 1.0));
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, // .}.vec4 Additive
	0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, // ( vec4 cBase, ve
	0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // c4 cBlend, float
	0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, //  percent).{.retu
	0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2b, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // rn cBase + cBlen
	0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // d*percent;.}.vec
	0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // 3 Screen ( vec3 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, // cBase, vec3 cBle
	0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, // nd).{.return 1.0
	0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, //  - (1.0 - cBase)
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, //  * (1.0 - cBlend
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, // );.}.vec4 Screen
	0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, //  ( vec4 cBase, v
	0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // ec4 cBlend).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, // turn 1.0 - (1.0 
	0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, // - cBase) * (1.0 
	0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // - cBlend);.}.vec
	0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, // 3 ScreenHDR ( ve
	0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, // c3 cBase, vec3 c
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // Blend).{.return 
	0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, // max(1.0 - (1.0 -
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, //  cBase) * (1.0 -
	0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, //  cBlend), vec3(0
	0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // .,0.,0.));.}.vec
	0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, // 4 ScreenHDR ( ve
	0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, // c4 cBase, vec4 c
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // Blend).{.return 
	0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, // max(1.0 - (1.0 -
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, //  cBase) * (1.0 -
	0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, //  cBlend), vec4(0
	0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // .,0.,0.,0.));.}.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x20, 0x28, 0x20, // vec4 Multiply ( 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // vec4 cBase, vec4
	0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, //  cBlend, float p
	0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // ercent).{.return
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2a, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, //  cBase * cBlend*
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, // percent;.}.vec4 
	0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, // Overlay ( vec4 c
	0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // Base, vec4 cBlen
	0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, // d).{.vec4 cNew =
	0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, //  step(0.5, cBase
	0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, // );.cNew = mix(cB
	0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, // ase*cBlend*2.0, 
	0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, // 1.0-2.0*(1.0-cBa
	0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, // se)*(1.0-cBlend)
	0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // , cNew);.return 
	0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, // cNew;.}.vec4 Ove
	0x72, 0x6c, 0x61, 0x79, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, // rlayHDR ( vec4 c
	0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // Base, vec4 cBlen
	0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, // d).{.vec4 cNew =
	0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, //  step(0.5, cBase
	0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x6d, 0x69, // );.cNew = max(mi
	0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, // x(cBase*cBlend*2
	0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, // .0, 1.0-2.0*(1.0
	0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, // -cBase)*(1.0-cBl
	0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, // end), cNew), vec
	0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, // 4(0.,0.,0.,0.));
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, // .return cNew;.}.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x73, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, // vec3 cos_hemisph
	0x65, 0x72, 0x65, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, // ere_sample( vec2
	0x20, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x68, 0x69, 0x20, //  t).{.float phi 
	0x3d, 0x20, 0x74, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x28, 0x32, 0x2e, 0x30, 0x2a, 0x33, 0x2e, 0x31, // = t.y * (2.0*3.1
	0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, // 4159265358979323
	0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x3b, // 84626433832795);
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, // .float cosTheta 
	0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x74, 0x2e, 0x78, // = sqrt(1.0 - t.x
	0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, // );.float sinThet
	0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, // a = sqrt(t.x);.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x70, 0x2c, 0x63, 0x70, 0x3b, 0x0a, 0x7b, 0x73, 0x70, 0x3d, // loat sp,cp;.{sp=
	0x73, 0x69, 0x6e, 0x28, 0x70, 0x68, 0x69, 0x29, 0x3b, 0x63, 0x70, 0x3d, 0x63, 0x6f, 0x73, 0x28, // sin(phi);cp=cos(
	0x70, 0x68, 0x69, 0x29, 0x3b, 0x7d, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // phi);};.return v
	0x65, 0x63, 0x33, 0x28, 0x63, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, // ec3(cp * sinThet
	0x61, 0x2c, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x73, 0x70, 0x20, // a, cosTheta, sp 
	0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // * sinTheta);.}.v
	0x65, 0x63, 0x33, 0x20, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x76, 0x65, // ec3 rotate_to_ve
	0x63, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, // ctor_upper( vec3
	0x20, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, //  vec, vec3 norma
	0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, // l).{.if(normal.y
	0x20, 0x3e, 0x20, 0x2d, 0x30, 0x2e, 0x39, 0x39, 0x39, 0x39, 0x39, 0x29, 0x0a, 0x7b, 0x0a, 0x66, //  > -0.99999).{.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x28, 0x31, 0x2e, // loat h = 1.0/(1.
	0x30, 0x2b, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, // 0+normal.y);.flo
	0x61, 0x74, 0x20, 0x68, 0x7a, 0x20, 0x3d, 0x20, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, // at hz = h*normal
	0x2e, 0x7a, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x3d, 0x20, // .z;.float hzx = 
	0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x3b, 0x0a, 0x72, 0x65, 0x74, // hz*normal.x;.ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, // urn vec3(.vec.x 
	0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x7a, 0x2a, 0x6e, // * (normal.y+hz*n
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x29, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x79, // ormal.z) + vec.y
	0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, //  * normal.x - ve
	0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, // c.z * hzx,.vec.y
	0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x2d, 0x20, 0x76, 0x65, //  * normal.y - ve
	0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, // c.x * normal.x -
	0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, //  vec.z * normal.
	0x7a, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, // z,.vec.y * norma
	0x6c, 0x2e, 0x7a, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x68, 0x7a, // l.z - vec.x * hz
	0x78, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, // x + vec.z * (nor
	0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, // mal.y+h*normal.x
	0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, // *normal.x));.}.e
	0x6c, 0x73, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x2d, 0x76, 0x65, 0x63, 0x3b, // lse return -vec;
	0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // .}.uniform vec4 
	0x62, 0x61, 0x6c, 0x6c, 0x73, 0x5b, 0x38, 0x5d, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // balls[8];.float 
	0x67, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x73, // get_light_ball_s
	0x68, 0x61, 0x64, 0x6f, 0x77, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x69, 0x67, 0x68, // hadow( vec3 ligh
	0x74, 0x5f, 0x70, 0x6f, 0x73, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x69, 0x67, 0x68, // t_pos, vec3 ligh
	0x74, 0x5f, 0x64, 0x69, 0x72, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x69, 0x67, // t_dir, float lig
	0x68, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // ht_dist).{.float
	0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x3b, 0x0a, 0x66, //  result = 1.0;.f
	0x6f, 0x72, 0x20, 0x28, 0x69, 0x6e, 0x74, 0x20, 0x69, 0x20, 0x3d, 0x20, 0x30, 0x3b, 0x20, 0x69, // or (int i = 0; i
	0x20, 0x3c, 0x20, 0x38, 0x3b, 0x20, 0x69, 0x2b, 0x2b, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, //  < 8; i++).{.flo
	0x61, 0x74, 0x20, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x20, 0x3d, 0x20, 0x62, 0x61, 0x6c, 0x6c, // at ball_r = ball
	0x73, 0x5b, 0x69, 0x5d, 0x2e, 0x77, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x62, 0x61, 0x6c, 0x6c, // s[i].w;.if (ball
	0x5f, 0x72, 0x20, 0x3d, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // _r == 0.0).retur
	0x6e, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x62, // n result;.vec3 b
	0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x6f, 0x73, 0x20, 0x3d, 0x20, 0x62, 0x61, 0x6c, 0x6c, 0x73, 0x5b, // all_pos = balls[
	0x69, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x69, 0x67, // i].xyz;.vec3 lig
	0x68, 0x74, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x61, 0x79, 0x20, 0x3d, 0x20, 0x62, 0x61, // ht_ball_ray = ba
	0x6c, 0x6c, 0x5f, 0x70, 0x6f, 0x73, 0x20, 0x2d, 0x20, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x70, // ll_pos - light_p
	0x6f, 0x73, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x64, 0x6f, 0x74, 0x5f, 0x6c, 0x62, // os;.float dot_lb
	0x72, 0x5f, 0x6c, 0x72, 0x5f, 0x64, 0x69, 0x76, 0x6c, 0x64, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, // r_lr_divld = dot
	0x28, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x61, 0x79, 0x2c, // (light_ball_ray,
	0x20, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, //  light_dir) / (l
	0x69, 0x67, 0x68, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x20, 0x2a, 0x20, 0x6c, 0x69, 0x67, 0x68, // ight_dist * ligh
	0x74, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x64, 0x6f, 0x74, // t_dist);.if (dot
	0x5f, 0x6c, 0x62, 0x72, 0x5f, 0x6c, 0x72, 0x5f, 0x64, 0x69, 0x76, 0x6c, 0x64, 0x20, 0x3e, 0x20, // _lbr_lr_divld > 
	0x30, 0x2e, 0x30, 0x20, 0x26, 0x26, 0x20, 0x64, 0x6f, 0x74, 0x5f, 0x6c, 0x62, 0x72, 0x5f, 0x6c, // 0.0 && dot_lbr_l
	0x72, 0x5f, 0x64, 0x69, 0x76, 0x6c, 0x64, 0x20, 0x3c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x0a, 0x7b, // r_divld < 1.0).{
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x64, 0x69, 0x73, 0x74, 0x20, 0x3d, 0x20, 0x6c, 0x69, 0x67, // .vec3 dist = lig
	0x68, 0x74, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x61, 0x79, 0x20, 0x2d, 0x20, 0x64, 0x6f, // ht_ball_ray - do
	0x74, 0x5f, 0x6c, 0x62, 0x72, 0x5f, 0x6c, 0x72, 0x5f, 0x64, 0x69, 0x76, 0x6c, 0x64, 0x20, 0x2a, // t_lbr_lr_divld *
	0x20, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, //  light_dir;.floa
	0x74, 0x20, 0x64, 0x32, 0x20, 0x3d, 0x20, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x28, 0x64, 0x69, // t d2 = length(di
	0x73, 0x74, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x69, 0x67, 0x68, 0x74, // st);.float light
	0x5f, 0x72, 0x20, 0x3d, 0x20, 0x35, 0x2e, 0x30, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // _r = 5.0;.float 
	0x73, 0x6d, 0x6f, 0x6f, 0x74, 0x68, 0x6e, 0x65, 0x73, 0x73, 0x20, 0x3d, 0x20, 0x6c, 0x69, 0x67, // smoothness = lig
	0x68, 0x74, 0x5f, 0x72, 0x20, 0x2d, 0x20, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x72, 0x20, 0x2a, // ht_r - light_r *
	0x20, 0x64, 0x6f, 0x74, 0x5f, 0x6c, 0x62, 0x72, 0x5f, 0x6c, 0x72, 0x5f, 0x64, 0x69, 0x76, 0x6c, //  dot_lbr_lr_divl
	0x64, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x69, // d;.float light_i
	0x6e, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x71, 0x72, 0x20, 0x3d, // nside_ball_sqr =
	0x20, 0x63, 0x6c, 0x61, 0x6d, 0x70, 0x28, 0x28, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x62, 0x61, //  clamp((light_ba
	0x6c, 0x6c, 0x5f, 0x72, 0x61, 0x79, 0x2e, 0x78, 0x2a, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x62, // ll_ray.x*light_b
	0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x61, 0x79, 0x2e, 0x78, 0x20, 0x2b, 0x20, 0x6c, 0x69, 0x67, 0x68, // all_ray.x + ligh
	0x74, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x61, 0x79, 0x2e, 0x79, 0x2a, 0x6c, 0x69, 0x67, // t_ball_ray.y*lig
	0x68, 0x74, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x61, 0x79, 0x2e, 0x79, 0x29, 0x2f, 0x28, // ht_ball_ray.y)/(
	0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x2a, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x29, 0x2c, 0x20, // ball_r*ball_r), 
	0x30, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, // 0.0, 1.0);.resul
	0x74, 0x20, 0x2a, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2b, 0x20, 0x6c, 0x69, 0x67, 0x68, 0x74, // t *= 1.0 + light
	0x5f, 0x69, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x71, 0x72, // _inside_ball_sqr
	0x2a, 0x28, 0x2d, 0x31, 0x2e, 0x30, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x31, 0x20, 0x2b, 0x20, 0x30, // *(-1.0 + 0.1 + 0
	0x2e, 0x39, 0x20, 0x2a, 0x20, 0x73, 0x6d, 0x6f, 0x6f, 0x74, 0x68, 0x73, 0x74, 0x65, 0x70, 0x28, // .9 * smoothstep(
	0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x2d, 0x73, 0x6d, 0x6f, 0x6f, 0x74, 0x68, 0x6e, 0x65, 0x73, // ball_r-smoothnes
	0x73, 0x2c, 0x20, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x2b, 0x73, 0x6d, 0x6f, 0x6f, 0x74, 0x68, // s, ball_r+smooth
	0x6e, 0x65, 0x73, 0x73, 0x2c, 0x20, 0x64, 0x32, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x7d, 0x0a, // ness, d2));.}.}.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3b, 0x0a, 0x7d, // return result;.}
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x73, 0x74, // .uniform vec4 st
	0x61, 0x74, 0x69, 0x63, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x3b, // aticColor_Alpha;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x61, 0x6c, // .uniform vec4 al
	0x70, 0x68, 0x61, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x42, 0x5f, 0x66, // phaTestValueAB_f
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x42, 0x6c, 0x65, // ilterMode_addBle
	0x6e, 0x64, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, // nd;.uniform vec4
	0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, //  amount_blend_mo
	0x64, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x66, 0x6c, // dulate_vs_add_fl
	0x61, 0x73, 0x68, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, // asherMode;.unifo
	0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x43, 0x65, 0x6e, // rm vec4 lightCen
	0x74, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x3b, 0x0a, 0x75, 0x6e, // ter_doShadow;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x20, // iform sampler2D 
	0x74, 0x65, 0x78, 0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x41, 0x3b, 0x0a, 0x75, // tex_flasher_A;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, // niform sampler2D
	0x20, 0x74, 0x65, 0x78, 0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x42, 0x3b, 0x0a, //  tex_flasher_B;.
	0x76, 0x6f, 0x69, 0x64, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, // void main().{.if
	0x20, 0x28, 0x76, 0x5f, 0x63, 0x6c, 0x69, 0x70, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, //  (v_clipDistance
	0x20, 0x3c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x0a, 0x64, 0x69, 0x73, 0x63, 0x61, 0x72, 0x64, 0x3b, //  < 0.0).discard;
	0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x31, 0x2c, 0x70, 0x69, 0x78, // .vec4 pixel1,pix
	0x65, 0x6c, 0x32, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, // el2;.if (amount_
	0x62, 0x6c, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x76, // blend_modulate_v
	0x73, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x4d, 0x6f, 0x64, // s_add_flasherMod
	0x65, 0x2e, 0x7a, 0x20, 0x3c, 0x20, 0x32, 0x2e, 0x29, 0x0a, 0x7b, 0x0a, 0x70, 0x69, 0x78, 0x65, // e.z < 2.).{.pixe
	0x6c, 0x31, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x74, 0x65, 0x78, // l1 = texture(tex
	0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x41, 0x2c, 0x20, 0x76, 0x5f, 0x74, 0x65, // _flasher_A, v_te
	0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x70, 0x69, // xcoord0);.if (pi
	0x78, 0x65, 0x6c, 0x31, 0x2e, 0x61, 0x20, 0x3c, 0x3d, 0x20, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x54, // xel1.a <= alphaT
	0x65, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x42, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, // estValueAB_filte
	0x72, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2e, 0x78, // rMode_addBlend.x
	0x29, 0x0a, 0x7b, 0x0a, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, // ).{.bgfx_FragCol
	0x6f, 0x72, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, // or = vec4_splat(
	0x30, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x3b, 0x0a, 0x7d, 0x0a, // 0.0);.return;.}.
	0x7d, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x65, // }.if (amount_ble
	0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x73, 0x5f, 0x61, // nd_modulate_vs_a
	0x64, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x7a, // dd_flasherMode.z
	0x20, 0x3d, 0x3d, 0x20, 0x31, 0x2e, 0x29, 0x0a, 0x7b, 0x0a, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x32, //  == 1.).{.pixel2
	0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x66, //  = texture(tex_f
	0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x42, 0x2c, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, // lasher_B, v_texc
	0x6f, 0x6f, 0x72, 0x64, 0x30, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x70, 0x69, 0x78, 0x65, // oord0);.if (pixe
	0x6c, 0x32, 0x2e, 0x61, 0x20, 0x3c, 0x3d, 0x20, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x54, 0x65, 0x73, // l2.a <= alphaTes
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x42, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, // tValueAB_filterM
	0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2e, 0x79, 0x29, 0x0a, // ode_addBlend.y).
	0x7b, 0x0a, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, // {.bgfx_FragColor
	0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x30, 0x2e, //  = vec4_splat(0.
	0x30, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x3b, 0x0a, 0x7d, 0x0a, 0x7d, 0x0a, // 0);.return;.}.}.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x20, 0x3d, 0x20, 0x73, 0x74, // vec4 result = st
	0x61, 0x74, 0x69, 0x63, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x3b, // aticColor_Alpha;
	0x0a, 0x69, 0x66, 0x20, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x65, 0x6e, // .if (amount_blen
	0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x73, 0x5f, 0x61, 0x64, // d_modulate_vs_ad
	0x64, 0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x7a, 0x20, // d_flasherMode.z 
	0x3d, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x20, // == 0.).{.result 
	0x2a, 0x3d, 0x20, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x31, 0x3b, 0x0a, 0x7d, 0x0a, 0x69, 0x66, 0x20, // *= pixel1;.}.if 
	0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, // (amount_blend_mo
	0x64, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x66, 0x6c, // dulate_vs_add_fl
	0x61, 0x73, 0x68, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x7a, 0x20, 0x3d, 0x3d, 0x20, 0x31, // asherMode.z == 1
	0x2e, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x54, 0x65, // .).{.if (alphaTe
	0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x42, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, // stValueAB_filter
	0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2e, 0x7a, 0x20, // Mode_addBlend.z 
	0x3d, 0x3d, 0x20, 0x32, 0x2e, 0x29, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x20, 0x2a, 0x3d, // == 2.).result *=
	0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x48, 0x44, 0x52, 0x28, 0x70, 0x69, 0x78, 0x65, //  OverlayHDR(pixe
	0x6c, 0x31, 0x2c, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x32, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, // l1,pixel2);.if (
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x42, // alphaTestValueAB
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x42, // _filterMode_addB
	0x6c, 0x65, 0x6e, 0x64, 0x2e, 0x7a, 0x20, 0x3d, 0x3d, 0x20, 0x33, 0x2e, 0x29, 0x0a, 0x72, 0x65, // lend.z == 3.).re
	0x73, 0x75, 0x6c, 0x74, 0x20, 0x2a, 0x3d, 0x20, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, // sult *= Multiply
	0x28, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x31, 0x2c, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x32, 0x2c, 0x20, // (pixel1,pixel2, 
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x64, // amount_blend_mod
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x66, 0x6c, 0x61, // ulate_vs_add_fla
	0x73, 0x68, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x20, // sherMode.x);.if 
	0x28, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, // (alphaTestValueA
	0x42, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, // B_filterMode_add
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2e, 0x7a, 0x20, 0x3d, 0x3d, 0x20, 0x31, 0x2e, 0x29, 0x0a, 0x72, // Blend.z == 1.).r
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x20, 0x2a, 0x3d, 0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, // esult *= Additiv
	0x65, 0x28, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x31, 0x2c, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x32, 0x2c, // e(pixel1,pixel2,
	0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, //  amount_blend_mo
	0x64, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x66, 0x6c, // dulate_vs_add_fl
	0x61, 0x73, 0x68, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x69, 0x66, // asherMode.x);.if
	0x20, 0x28, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, //  (alphaTestValue
	0x41, 0x42, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, // AB_filterMode_ad
	0x64, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2e, 0x7a, 0x20, 0x3d, 0x3d, 0x20, 0x34, 0x2e, 0x29, 0x0a, // dBlend.z == 4.).
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x20, 0x2a, 0x3d, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, // result *= Screen
	0x48, 0x44, 0x52, 0x28, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x31, 0x2c, 0x70, 0x69, 0x78, 0x65, 0x6c, // HDR(pixel1,pixel
	0x32, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x43, // 2);.}.if (lightC
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x2e, 0x77, // enter_doShadow.w
	0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, //  != 0.).{.vec3 l
	0x69, 0x67, 0x68, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x20, 0x3d, 0x20, 0x76, 0x5f, 0x74, 0x61, 0x62, // ight_dir = v_tab
	0x6c, 0x65, 0x50, 0x6f, 0x73, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2d, 0x20, 0x6c, 0x69, 0x67, 0x68, // lePos.xyz - ligh
	0x74, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, // tCenter_doShadow
	0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x69, 0x67, 0x68, // .xyz;.float ligh
	0x74, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x20, 0x3d, 0x20, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x28, // t_dist = length(
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // light_dir);.floa
	0x74, 0x20, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x20, 0x3d, 0x20, 0x67, 0x65, 0x74, 0x5f, 0x6c, // t shadow = get_l
	0x69, 0x67, 0x68, 0x74, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, // ight_ball_shadow
	0x28, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x53, // (lightCenter_doS
	0x68, 0x61, 0x64, 0x6f, 0x77, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x6c, 0x69, 0x67, 0x68, 0x74, // hadow.xyz, light
	0x5f, 0x64, 0x69, 0x72, 0x2c, 0x20, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x74, // _dir, light_dist
	0x29, 0x3b, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x72, 0x67, 0x62, 0x20, 0x2a, 0x3d, // );.result.rgb *=
	0x20, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x61, //  shadow;.}.if (a
	0x6c, 0x70, 0x68, 0x61, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x42, 0x5f, // lphaTestValueAB_
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x42, 0x6c, // filterMode_addBl
	0x65, 0x6e, 0x64, 0x2e, 0x77, 0x20, 0x3d, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x0a, 0x62, 0x67, 0x66, // end.w == 0.).bgf
	0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x76, 0x65, // x_FragColor = ve
	0x63, 0x34, 0x28, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x63, // c4(result.xyz, c
	0x6c, 0x61, 0x6d, 0x70, 0x28, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x61, 0x2c, 0x20, 0x30, // lamp(result.a, 0
	0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, // .0, 1.0));.else.
	0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, // bgfx_FragColor =
	0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x78, 0x79, 0x7a, //  vec4(result.xyz
	0x2a, 0x28, 0x2d, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x5f, // *(-amount_blend_
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x5f, // modulate_vs_add_
	0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x79, 0x2a, 0x72, 0x65, // flasherMode.y*re
	0x73, 0x75, 0x6c, 0x74, 0x2e, 0x61, 0x29, 0x2c, 0x0a, 0x31, 0x2e, 0x30, 0x2f, 0x61, 0x6d, 0x6f, // sult.a),.1.0/amo
	0x75, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x61, // unt_blend_modula
	0x74, 0x65, 0x5f, 0x76, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, // te_vs_add_flashe
	0x72, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x79, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, // rMode.y - 1.0);.
	0x7d, 0x0a, 0x00,                                                                               // }..
};
static const uint8_t fs_flasher_clip_glsl[9231] =
{
	0x46, 0x53, 0x48, 0x0b, 0x11, 0xe4, 0xa0, 0x91, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfc, 0x23, // FSH............#
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x34, 0x34, 0x30, 0x0a, 0x6f, // ..#version 440.o
	0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, // ut vec4 bgfx_Fra
	0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, // gColor;.#define 
	0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x62, 0x67, 0x66, // gl_FragColor bgf
	0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x0a, 0x23, 0x64, 0x65, 0x66, // x_FragColor.#def
	0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x20, 0x20, 0x20, // ine texture2D   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x0a, 0x23, //        texture.#
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, // define texture2D
	0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // Lod       textur
	0x65, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, // eLod.#define tex
	0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ture2DGrad      
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, // textureGrad.#def
	0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, // ine texture2DPro
	0x6a, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, // jLod   texturePr
	0x6f, 0x6a, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, // ojLod.#define te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, 0x20, // xture2DProjGrad 
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, //  textureProjGrad
	0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // .#define texture
	0x43, 0x75, 0x62, 0x65, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, // CubeLod     text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, // ureLod.#define t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, // extureCubeGrad  
	0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, //   textureGrad.#d
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x33, 0x44, 0x20, // efine texture3D 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, //          texture
	0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // .#define texture
	0x32, 0x44, 0x4c, 0x6f, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x20, 0x74, 0x65, 0x78, 0x74, // 2DLodOffset text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x0a, 0x23, 0x64, 0x65, // ureLodOffset.#de
	0x66, 0x69, 0x6e, 0x65, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x69, // fine attribute i
	0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, // n.#define varyin
	0x67, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x62, 0x67, 0x66, // g in.#define bgf
	0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, // xShadow2D(_sampl
	0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, // er, _coord)     
	0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, // vec4_splat(textu
	0x72, 0x65, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, // re(_sampler, _co
	0x6f, 0x72, 0x64, 0x29, 0x20, 0x29, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x62, // ord) ).#define b
	0x67, 0x66, 0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x28, // gfxShadow2DProj(
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, // _sampler, _coord
	0x29, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, // ) vec4_splat(tex
	0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // tureProj(_sample
	0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x29, 0x0a, 0x76, 0x61, 0x72, // r, _coord) ).var
	0x79, 0x69, 0x6e, 0x67, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x5f, 0x63, 0x6c, 0x69, // ying float v_cli
	0x70, 0x44, 0x69, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x3b, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, // pDistance;.varyi
	0x6e, 0x67, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, // ng vec3 v_tableP
	0x6f, 0x73, 0x3b, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x65, 0x63, 0x32, // os;.varying vec2
	0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x3b, 0x0a, 0x76, 0x65, //  v_texcoord0;.ve
	0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, // c3 instMul(vec3 
	0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, // _vec, mat3 _mtx)
	0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, //  { return ( (_ve
	0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, // c) * (_mtx) ); }
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, // .vec3 instMul(ma
	0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, // t3 _mtx, vec3 _v
	0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, // ec) { return ( (
	0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, // _mtx) * (_vec) )
	0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, // ; }.vec4 instMul
	0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, // (vec4 _vec, mat4
	0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, //  _mtx) { return 
	0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, // ( (_vec) * (_mtx
	0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, // ) ); }.vec4 inst
	0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, // Mul(mat4 _mtx, v
	0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // ec4 _vec) { retu
	0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, // rn ( (_mtx) * (_
	0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // vec) ); }.float 
	0x72, 0x63, 0x70, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, // rcp(float _a) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, // return 1.0/_a; }
	0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x5f, // .vec2 rcp(vec2 _
	0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, // a) { return vec2
	0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, // (1.0)/_a; }.vec3
	0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, //  rcp(vec3 _a) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x31, 0x2e, 0x30, 0x29, // return vec3(1.0)
	0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x72, 0x63, 0x70, 0x28, // /_a; }.vec4 rcp(
	0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, // vec4 _a) { retur
	0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, // n vec4(1.0)/_a; 
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, // }.vec2 vec2_spla
	0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // t(float _x) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, // turn vec2(_x, _x
	0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, // ); }.vec3 vec3_s
	0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, // plat(float _x) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, //  return vec3(_x,
	0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, //  _x, _x); }.vec4
	0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, //  vec4_splat(floa
	0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // t _x) { return v
	0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, // ec4(_x, _x, _x, 
	0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x65, // _x); }.uvec2 uve
	0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, // c2_splat(uint _x
	0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, // ) { return uvec2
	0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, // (_x, _x); }.uvec
	0x33, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, // 3 uvec3_splat(ui
	0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // nt _x) { return 
	0x75, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, // uvec3(_x, _x, _x
	0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, // ); }.uvec4 uvec4
	0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, // _splat(uint _x) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, // { return uvec4(_
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, // x, _x, _x, _x); 
	0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, // }.mat4 mtxFromRo
	0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // ws(vec4 _0, vec4
	0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, //  _1, vec4 _2, ve
	0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // c4 _3).{.return 
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, // transpose(mat4(_
	0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x20, 0x29, // 0, _1, _2, _3) )
	0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, // ;.}.mat4 mtxFrom
	0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, // Cols(vec4 _0, ve
	0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, // c4 _1, vec4 _2, 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // vec4 _3).{.retur
	0x6e, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, // n mat4(_0, _1, _
	0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, // 2, _3);.}.mat3 m
	0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, // txFromRows(vec3 
	0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, // _0, vec3 _1, vec
	0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, // 3 _2).{.return t
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, // ranspose(mat3(_0
	0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, // , _1, _2) );.}.m
	0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, // at3 mtxFromCols(
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, // vec3 _0, vec3 _1
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // , vec3 _2).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, // urn mat3(_0, _1,
	0x20, 0x5f, 0x32, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, //  _2);.}.uniform 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x63, 0x74, 0x3b, // vec4 u_viewRect;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, // .uniform vec4 u_
	0x76, 0x69, 0x65, 0x77, 0x54, 0x65, 0x78, 0x65, 0x6c, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, // viewTexel;.unifo
	0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x3b, 0x0a, // rm mat4 u_view;.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, // uniform mat4 u_i
	0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // nvView;.uniform 
	0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, // mat4 u_proj;.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x50, // form mat4 u_invP
	0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, // roj;.uniform mat
	0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, // 4 u_viewProj;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, // iform mat4 u_inv
	0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // ViewProj;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5b, 0x33, // m mat4 u_model[3
	0x32, 0x5d, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, // 2];.uniform mat4
	0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, //  u_modelView;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, // iform mat4 u_mod
	0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // elViewProj;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, // orm vec4 u_alpha
	0x52, 0x65, 0x66, 0x34, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x71, 0x72, 0x28, // Ref4;.float sqr(
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, //  float v).{.retu
	0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x73, // rn v*v;.}.vec2 s
	0x71, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // qr( vec2 v).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, // turn v*v;.}.vec3
	0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, //  sqr( vec3 v).{.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // return v*v;.}.ve
	0x63, 0x33, 0x20, 0x6d, 0x75, 0x6c, 0x5f, 0x77, 0x31, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // c3 mul_w1( vec3 
	0x76, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // v, mat4 m).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x2e, 0x78, 0x2a, 0x6d, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, // urn v.x*m[0].xyz
	0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x79, 0x2a, 0x6d, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, //  + (v.y*m[1].xyz
	0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x7a, 0x2a, 0x6d, 0x5b, 0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, //  + (v.z*m[2].xyz
	0x20, 0x2b, 0x20, 0x6d, 0x5b, 0x33, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, //  + m[3].xyz));.}
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, // .float acos_appr
	0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // ox_divPI( float 
	0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, // v).{.float x = a
	0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, // bs(v);.if(1. - x
	0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, //  <= 0.0000610351
	0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, // 5625).return (v 
	0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x20, 0x3a, 0x20, 0x31, 0x2e, // >= 0.) ? 0. : 1.
	0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, // ;.float res = ((
	0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, // -0.155972/3.1415
	0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, // 9265358979323846
	0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, // 26433832795) * x
	0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, //  + (1.56467/3.14
	0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, // 1592653589793238
	0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, // 4626433832795) )
	0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, //  * sqrt(1. - x);
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, // .return (v >= 0.
	0x29, 0x20, 0x3f, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x72, // ) ? res : 1. - r
	0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x74, 0x61, 0x6e, // es;.}.float atan
	0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, // 2_approx_div2PI(
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x79, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, //  float y, float 
	0x78, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, // x).{.float abs_y
	0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, //  = abs(y);.float
	0x20, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x78, 0x29, 0x3b, //  abs_x = abs(x);
	0x0a, 0x69, 0x66, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, // .if(abs_x <= 0.0
	0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x20, 0x26, 0x26, // 0006103515625 &&
	0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, //  abs_y <= 0.0000
	0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, // 6103515625).retu
	0x72, 0x6e, 0x20, 0x30, 0x2e, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x20, 0x3d, // rn 0.;.float r =
	0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2d, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, //  (abs_x - abs_y)
	0x20, 0x2f, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2b, 0x20, 0x61, 0x62, 0x73, 0x5f, //  / (abs_x + abs_
	0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, // y);.float angle 
	0x3d, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x28, 0x33, // = ((x < 0.) ? (3
	0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x20, 0x3a, 0x20, 0x28, 0x31, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x29, // ./8.) : (1./8.))
	0x0a, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x32, 0x31, 0x31, 0x38, 0x36, 0x38, 0x20, 0x2f, 0x28, 0x32, // .+ (0.211868 /(2
	0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, // .*3.141592653589
	0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, // 7932384626433832
	0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x72, 0x20, 0x2a, 0x20, 0x72, 0x20, 0x2d, 0x20, 0x30, // 795) * r * r - 0
	0x2e, 0x39, 0x38, 0x37, 0x33, 0x30, 0x35, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, // .987305 /(2.*3.1
	0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, // 4159265358979323
	0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x29, // 84626433832795))
	0x20, 0x2a, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, //  * ((x < 0.) ? -
	0x72, 0x20, 0x3a, 0x20, 0x72, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // r : r);.return (
	0x79, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x61, 0x6e, 0x67, 0x6c, 0x65, // y < 0.) ? -angle
	0x20, 0x3a, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, //  : angle;.}.floa
	0x74, 0x20, 0x61, 0x73, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, // t asin_approx_di
	0x76, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, // vPI( float v).{.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, // float x = abs(v)
	0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, // ;.if(1. - x <= 0
	0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, // .00006103515625)
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, // .return (v >= 0.
	0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x3b, 0x0a, // ) ? 0.5 : -0.5;.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, // float res = ((-0
	0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, // .155972/3.141592
	0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, // 6535897932384626
	0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, // 433832795) * x +
	0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, //  (1.56467/3.1415
	0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, // 9265358979323846
	0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, // 26433832795) ) *
	0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, //  sqrt(1. - x);.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, // eturn (v >= 0.) 
	0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x2d, 0x30, // ? 0.5 - res : -0
	0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, // .5 + res;.}.vec2
	0x20, 0x72, 0x61, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x63, 0x74, //  ray_to_equirect
	0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x75, 0x76, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, // angular_uv( vec3
	0x20, 0x72, 0x61, 0x79, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, //  ray).{.return v
	0x65, 0x63, 0x32, 0x28, 0x0a, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, // ec2(.0.5 + atan2
	0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x72, // _approx_div2PI(r
	0x61, 0x79, 0x2e, 0x79, 0x2c, 0x20, 0x72, 0x61, 0x79, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x61, 0x63, // ay.y, ray.x),.ac
	0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, // os_approx_divPI(
	0x72, 0x61, 0x79, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // ray.z));.}.float
	0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, //  InvsRGB( float 
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, // color).{.if (col
	0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, 0x34, 0x35, 0x29, 0x0a, 0x72, // or <= 0.04045).r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, // eturn color * (1
	0x2e, 0x30, 0x2f, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, // .0/12.92);.else.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // return pow(color
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, 0x20, 0x2b, //  * (1.0/1.055) +
	0x20, 0x28, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, 0x2c, 0x20, //  (0.055/1.055), 
	0x32, 0x2e, 0x34, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, // 2.4);.}.float In
	0x76, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, // vRec709( float c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // olor).{.if (colo
	0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x38, 0x31, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, // r <= 0.081).retu
	0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, // rn color * (1.0/
	0x34, 0x2e, 0x35, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // 4.5);.else.retur
	0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, // n pow(color * (1
	0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, // .0/1.099) + (0.0
	0x39, 0x39, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x30, // 99/1.099), 1.0/0
	0x2e, 0x34, 0x35, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, // .45);.}.float In
	0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, // vGamma( float co
	0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x49, 0x6e, // lor).{.return In
	0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // vsRGB(color);.}.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, // vec3 InvGamma( v
	0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // ec3 color).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, // urn vec3(InvGamm
	0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, // a(color.x),InvGa
	0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x49, 0x6e, 0x76, // mma(color.y),Inv
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, // Gamma(color.z));
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x54, 0x6f, 0x6e, 0x65, 0x4d, // .}.vec3 InvToneM
	0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, // ap( vec3 color).
	0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x20, // {.float inv_2bh 
	0x3d, 0x20, 0x30, 0x2e, 0x35, 0x2f, 0x30, 0x2e, 0x32, 0x35, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // = 0.5/0.25;.floa
	0x74, 0x20, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x34, 0x2e, 0x30, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, // t bh = 4.0*0.25 
	0x2d, 0x20, 0x32, 0x2e, 0x30, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x63, // - 2.0;.return (c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2b, 0x20, 0x73, 0x71, 0x72, // olor - 1.0 + sqr
	0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2a, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, // t(color*(color +
	0x20, 0x62, 0x68, 0x29, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x2a, 0x69, 0x6e, 0x76, //  bh) + 1.0))*inv
	0x5f, 0x32, 0x62, 0x68, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x52, // _2bh;.}.float sR
	0x47, 0x42, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, // GB( float f).{.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, // loat s;.if (f <=
	0x20, 0x30, 0x2e, 0x30, 0x30, 0x33, 0x31, 0x33, 0x30, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, //  0.0031308).s = 
	0x31, 0x32, 0x2e, 0x39, 0x32, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, // 12.92 * f;.else.
	0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, // s = 1.055 * pow(
	0x66, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x34, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, // f, 1.0/2.4) - 0.
	0x30, 0x35, 0x35, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, // 055;.return s;.}
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x20, 0x66, // .float Rec709( f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // loat f).{.float 
	0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x31, // s;.if (f <= 0.01
	0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x34, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, // 8).s = 4.5 * f;.
	0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x20, 0x2a, // else.s = 1.099 *
	0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x20, 0x2d, 0x20, //  pow(f, 0.45) - 
	0x30, 0x2e, 0x30, 0x39, 0x39, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, // 0.099;.return s;
	0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, // .}.float FBGamma
	0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, // ( float color).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, // .return sRGB(col
	0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x47, 0x61, // or);.}.vec2 FBGa
	0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, // mma( vec2 color)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x46, // .{.return vec2(F
	0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, // BGamma(color.x),
	0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, // FBGamma(color.y)
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, // );.}.vec3 FBGamm
	0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, // a( vec3 color).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x46, 0x42, 0x47, // .return vec3(FBG
	0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, // amma(color.x),FB
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x46, // Gamma(color.y),F
	0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, // BGamma(color.z))
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, // ;.}.vec3 FBGamma
	0x32, 0x32, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, // 22( vec3 color).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x70, 0x6f, // {.return vec3(po
	0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, // w(color.x, 1.0/2
	0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x2c, // .2),pow(color.y,
	0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, //  1.0/2.2),pow(co
	0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x29, // lor.z, 1.0/2.2))
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, // ;.}.float FBTone
	0x4d, 0x61, 0x70, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, // Map( float l).{.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6c, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, // return l * ((l*0
	0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, // .25 + 1.0) / (l 
	0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, // + 1.0));.}.vec2 
	0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, // FBToneMap( vec2 
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, // color).{.float l
	0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, //  = dot(color,vec
	0x32, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, // 2(0.176204+0.010
	0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, // 8109*0.5,0.81298
	0x35, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x29, // 5+0.0108109*0.5)
	0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, // );.return color 
	0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, // * ((l*0.25 + 1.0
	0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, // ) / (l + 1.0));.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, // }.vec3 FBToneMap
	0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, // ( vec3 color).{.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, // float l = dot(co
	0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, // lor,vec3(0.17620
	0x34, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2c, 0x30, 0x2e, 0x30, 0x31, 0x30, // 4,0.812985,0.010
	0x38, 0x31, 0x30, 0x39, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, // 8109));.return c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, // olor * ((l*0.25 
	0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, // + 1.0) / (l + 1.
	0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x41, 0x64, 0x64, 0x69, // 0));.}.vec4 Addi
	0x74, 0x69, 0x76, 0x65, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, // tive( vec4 cBase
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x66, // , vec4 cBlend, f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, // loat percent).{.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2b, 0x20, 0x63, // return cBase + c
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, // Blend*percent;.}
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x20, 0x76, // .vec3 Screen ( v
	0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // ec3 cBase, vec3 
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // cBlend).{.return
	0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, //  1.0 - (1.0 - cB
	0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, // ase) * (1.0 - cB
	0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, // lend);.}.vec4 Sc
	0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, // reen ( vec4 cBas
	0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, // e, vec4 cBlend).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, // {.return 1.0 - (
	0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, // 1.0 - cBase) * (
	0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, // 1.0 - cBlend);.}
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, // .vec3 ScreenHDR 
	0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, // ( vec3 cBase, ve
	0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // c3 cBlend).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, // urn max(1.0 - (1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, // .0 - cBase) * (1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, // .0 - cBlend), ve
	0x63, 0x33, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, // c3(0.,0.,0.));.}
	0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, // .vec4 ScreenHDR 
	0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, // ( vec4 cBase, ve
	0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // c4 cBlend).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, // urn max(1.0 - (1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, // .0 - cBase) * (1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, // .0 - cBlend), ve
	0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, // c4(0.,0.,0.,0.))
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, // ;.}.vec4 Multipl
	0x79, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, // y ( vec4 cBase, 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, // vec4 cBlend, flo
	0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // at percent).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2a, 0x20, 0x63, 0x42, 0x6c, // turn cBase * cBl
	0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // end*percent;.}.v
	0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x20, 0x28, 0x20, 0x76, 0x65, // ec4 Overlay ( ve
	0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, // c4 cBase, vec4 c
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, // Blend).{.vec4 cN
	0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, // ew = step(0.5, c
	0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x69, // Base);.cNew = mi
	0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, // x(cBase*cBlend*2
	0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, // .0, 1.0-2.0*(1.0
	0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, // -cBase)*(1.0-cBl
	0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, // end), cNew);.ret
	0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, // urn cNew;.}.vec4
	0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, //  OverlayHDR ( ve
	0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, // c4 cBase, vec4 c
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, // Blend).{.vec4 cN
	0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, // ew = step(0.5, c
	0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x61, // Base);.cNew = ma
	0x78, 0x28, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, // x(mix(cBase*cBle
	0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, // nd*2.0, 1.0-2.0*
	0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, // (1.0-cBase)*(1.0
	0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x2c, // -cBlend), cNew),
	0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, //  vec4(0.,0.,0.,0
	0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, // .));.return cNew
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x73, 0x5f, 0x68, 0x65, 0x6d, // ;.}.vec3 cos_hem
	0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x20, // isphere_sample( 
	0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // vec2 t).{.float 
	0x70, 0x68, 0x69, 0x20, 0x3d, 0x20, 0x74, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x28, 0x32, 0x2e, 0x30, // phi = t.y * (2.0
	0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, // *3.1415926535897
	0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, // 9323846264338327
	0x39, 0x35, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, // 95);.float cosTh
	0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, // eta = sqrt(1.0 -
	0x20, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x69, 0x6e, //  t.x);.float sin
	0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x74, 0x2e, 0x78, // Theta = sqrt(t.x
	0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x70, 0x2c, 0x63, 0x70, 0x3b, 0x0a, // );.float sp,cp;.
	0x7b, 0x73, 0x70, 0x3d, 0x73, 0x69, 0x6e, 0x28, 0x70, 0x68, 0x69, 0x29, 0x3b, 0x63, 0x70, 0x3d, // {sp=sin(phi);cp=
	0x63, 0x6f, 0x73, 0x28, 0x70, 0x68, 0x69, 0x29, 0x3b, 0x7d, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // cos(phi);};.retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x63, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, // rn vec3(cp * sin
	0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, // Theta, cosTheta,
	0x20, 0x73, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x29, 0x3b, //  sp * sinTheta);
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, // .}.vec3 rotate_t
	0x6f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x28, 0x20, // o_vector_upper( 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6e, // vec3 vec, vec3 n
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x28, 0x6e, 0x6f, 0x72, 0x6d, // ormal).{.if(norm
	0x61, 0x6c, 0x2e, 0x79, 0x20, 0x3e, 0x20, 0x2d, 0x30, 0x2e, 0x39, 0x39, 0x39, 0x39, 0x39, 0x29, // al.y > -0.99999)
	0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, // .{.float h = 1.0
	0x2f, 0x28, 0x31, 0x2e, 0x30, 0x2b, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x29, 0x3b, // /(1.0+normal.y);
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x20, 0x3d, 0x20, 0x68, 0x2a, 0x6e, 0x6f, // .float hz = h*no
	0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, // rmal.z;.float hz
	0x78, 0x20, 0x3d, 0x20, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x3b, // x = hz*normal.x;
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x0a, 0x76, 0x65, // .return vec3(.ve
	0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, // c.x * (normal.y+
	0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x29, 0x20, 0x2b, 0x20, 0x76, // hz*normal.z) + v
	0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, // ec.y * normal.x 
	0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x2c, 0x0a, 0x76, // - vec.z * hzx,.v
	0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, // ec.y * normal.y 
	0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, // - vec.x * normal
	0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, // .x - vec.z * nor
	0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, // mal.z,.vec.y * n
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, // ormal.z - vec.x 
	0x2a, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, // * hzx + vec.z * 
	0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, // (normal.y+h*norm
	0x61, 0x6c, 0x2e, 0x78, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x29, 0x29, 0x3b, // al.x*normal.x));
	0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x2d, // .}.else return -
	0x76, 0x65, 0x63, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, // vec;.}.uniform v
	0x65, 0x63, 0x34, 0x20, 0x62, 0x61, 0x6c, 0x6c, 0x73, 0x5b, 0x38, 0x5d, 0x3b, 0x0a, 0x66, 0x6c, // ec4 balls[8];.fl
	0x6f, 0x61, 0x74, 0x20, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x62, 0x61, // oat get_light_ba
	0x6c, 0x6c, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // ll_shadow( vec3 
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // light_pos, vec3 
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // light_dir, float
	0x20, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x66, //  light_dist).{.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x20, 0x3d, 0x20, 0x31, 0x2e, // loat result = 1.
	0x30, 0x3b, 0x0a, 0x66, 0x6f, 0x72, 0x20, 0x28, 0x69, 0x6e, 0x74, 0x20, 0x69, 0x20, 0x3d, 0x20, // 0;.for (int i = 
	0x30, 0x3b, 0x20, 0x69, 0x20, 0x3c, 0x20, 0x38, 0x3b, 0x20, 0x69, 0x2b, 0x2b, 0x29, 0x0a, 0x7b, // 0; i < 8; i++).{
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x20, 0x3d, 0x20, // .float ball_r = 
	0x62, 0x61, 0x6c, 0x6c, 0x73, 0x5b, 0x69, 0x5d, 0x2e, 0x77, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, // balls[i].w;.if (
	0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x20, 0x3d, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x0a, 0x72, // ball_r == 0.0).r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3b, 0x0a, 0x76, 0x65, // eturn result;.ve
	0x63, 0x33, 0x20, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x6f, 0x73, 0x20, 0x3d, 0x20, 0x62, 0x61, // c3 ball_pos = ba
	0x6c, 0x6c, 0x73, 0x5b, 0x69, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, // lls[i].xyz;.vec3
	0x20, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x61, 0x79, 0x20, //  light_ball_ray 
	0x3d, 0x20, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x6f, 0x73, 0x20, 0x2d, 0x20, 0x6c, 0x69, 0x67, // = ball_pos - lig
	0x68, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x64, 0x6f, // ht_pos;.float do
	0x74, 0x5f, 0x6c, 0x62, 0x72, 0x5f, 0x6c, 0x72, 0x5f, 0x64, 0x69, 0x76, 0x6c, 0x64, 0x20, 0x3d, // t_lbr_lr_divld =
	0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x5f, //  dot(light_ball_
	0x72, 0x61, 0x79, 0x2c, 0x20, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x29, 0x20, // ray, light_dir) 
	0x2f, 0x20, 0x28, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x20, 0x2a, 0x20, // / (light_dist * 
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x20, // light_dist);.if 
	0x28, 0x64, 0x6f, 0x74, 0x5f, 0x6c, 0x62, 0x72, 0x5f, 0x6c, 0x72, 0x5f, 0x64, 0x69, 0x76, 0x6c, // (dot_lbr_lr_divl
	0x64, 0x20, 0x3e, 0x20, 0x30, 0x2e, 0x30, 0x20, 0x26, 0x26, 0x20, 0x64, 0x6f, 0x74, 0x5f, 0x6c, // d > 0.0 && dot_l
	0x62, 0x72, 0x5f, 0x6c, 0x72, 0x5f, 0x64, 0x69, 0x76, 0x6c, 0x64, 0x20, 0x3c, 0x20, 0x31, 0x2e, // br_lr_divld < 1.
	0x30, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x64, 0x69, 0x73, 0x74, 0x20, 0x3d, // 0).{.vec3 dist =
	0x20, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x61, 0x79, 0x20, //  light_ball_ray 
	0x2d, 0x20, 0x64, 0x6f, 0x74, 0x5f, 0x6c, 0x62, 0x72, 0x5f, 0x6c, 0x72, 0x5f, 0x64, 0x69, 0x76, // - dot_lbr_lr_div
	0x6c, 0x64, 0x20, 0x2a, 0x20, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x3b, 0x0a, // ld * light_dir;.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x64, 0x32, 0x20, 0x3d, 0x20, 0x6c, 0x65, 0x6e, 0x67, 0x74, // float d2 = lengt
	0x68, 0x28, 0x64, 0x69, 0x73, 0x74, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, // h(dist);.float l
	0x69, 0x67, 0x68, 0x74, 0x5f, 0x72, 0x20, 0x3d, 0x20, 0x35, 0x2e, 0x30, 0x3b, 0x0a, 0x66, 0x6c, // ight_r = 5.0;.fl
	0x6f, 0x61, 0x74, 0x20, 0x73, 0x6d, 0x6f, 0x6f, 0x74, 0x68, 0x6e, 0x65, 0x73, 0x73, 0x20, 0x3d, // oat smoothness =
	0x20, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x72, 0x20, 0x2d, 0x20, 0x6c, 0x69, 0x67, 0x68, 0x74, //  light_r - light
	0x5f, 0x72, 0x20, 0x2a, 0x20, 0x64, 0x6f, 0x74, 0x5f, 0x6c, 0x62, 0x72, 0x5f, 0x6c, 0x72, 0x5f, // _r * dot_lbr_lr_
	0x64, 0x69, 0x76, 0x6c, 0x64, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x69, 0x67, // divld;.float lig
	0x68, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x73, // ht_inside_ball_s
	0x71, 0x72, 0x20, 0x3d, 0x20, 0x63, 0x6c, 0x61, 0x6d, 0x70, 0x28, 0x28, 0x6c, 0x69, 0x67, 0x68, // qr = clamp((ligh
	0x74, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x61, 0x79, 0x2e, 0x78, 0x2a, 0x6c, 0x69, 0x67, // t_ball_ray.x*lig
	0x68, 0x74, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x61, 0x79, 0x2e, 0x78, 0x20, 0x2b, 0x20, // ht_ball_ray.x + 
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x61, 0x79, 0x2e, 0x79, // light_ball_ray.y
	0x2a, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x61, 0x79, 0x2e, // *light_ball_ray.
	0x79, 0x29, 0x2f, 0x28, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x2a, 0x62, 0x61, 0x6c, 0x6c, 0x5f, // y)/(ball_r*ball_
	0x72, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x72, // r), 0.0, 1.0);.r
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x20, 0x2a, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2b, 0x20, 0x6c, // esult *= 1.0 + l
	0x69, 0x67, 0x68, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x6c, // ight_inside_ball
	0x5f, 0x73, 0x71, 0x72, 0x2a, 0x28, 0x2d, 0x31, 0x2e, 0x30, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x31, // _sqr*(-1.0 + 0.1
	0x20, 0x2b, 0x20, 0x30, 0x2e, 0x39, 0x20, 0x2a, 0x20, 0x73, 0x6d, 0x6f, 0x6f, 0x74, 0x68, 0x73, //  + 0.9 * smooths
	0x74, 0x65, 0x70, 0x28, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x2d, 0x73, 0x6d, 0x6f, 0x6f, 0x74, // tep(ball_r-smoot
	0x68, 0x6e, 0x65, 0x73, 0x73, 0x2c, 0x20, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x2b, 0x73, 0x6d, // hness, ball_r+sm
	0x6f, 0x6f, 0x74, 0x68, 0x6e, 0x65, 0x73, 0x73, 0x2c, 0x20, 0x64, 0x32, 0x29, 0x29, 0x3b, 0x0a, // oothness, d2));.
	0x7d, 0x0a, 0x7d, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, // }.}.return resul
	0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, // t;.}.uniform vec
	0x34, 0x20, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x41, 0x6c, // 4 staticColor_Al
	0x70, 0x68, 0x61, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, // pha;.uniform vec
	0x34, 0x20, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, // 4 alphaTestValue
	0x41, 0x42, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, // AB_filterMode_ad
	0x64, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // dBlend;.uniform 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x65, 0x6e, // vec4 amount_blen
	0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x73, 0x5f, 0x61, 0x64, // d_modulate_vs_ad
	0x64, 0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x3b, 0x0a, 0x75, // d_flasherMode;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x6c, 0x69, 0x67, 0x68, // niform vec4 ligh
	0x74, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, // tCenter_doShadow
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // ;.uniform sample
	0x72, 0x32, 0x44, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x5f, // r2D tex_flasher_
	0x41, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, // A;.uniform sampl
	0x65, 0x72, 0x32, 0x44, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, // er2D tex_flasher
	0x5f, 0x42, 0x3b, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, // _B;.void main().
	0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x76, 0x5f, 0x63, 0x6c, 0x69, 0x70, 0x44, 0x69, 0x73, 0x74, // {.if (v_clipDist
	0x61, 0x6e, 0x63, 0x65, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x0a, 0x64, 0x69, 0x73, 0x63, // ance < 0.0).disc
	0x61, 0x72, 0x64, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x31, // ard;.vec4 pixel1
	0x2c, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x32, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x61, 0x6d, 0x6f, // ,pixel2;.if (amo
	0x75, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x61, // unt_blend_modula
	0x74, 0x65, 0x5f, 0x76, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, // te_vs_add_flashe
	0x72, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x7a, 0x20, 0x3c, 0x20, 0x32, 0x2e, 0x29, 0x0a, 0x7b, 0x0a, // rMode.z < 2.).{.
	0x70, 0x69, 0x78, 0x65, 0x6c, 0x31, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // pixel1 = texture
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x41, 0x2c, 0x20, // (tex_flasher_A, 
	0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x29, 0x3b, 0x0a, 0x69, 0x66, // v_texcoord0);.if
	0x20, 0x28, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x31, 0x2e, 0x61, 0x20, 0x3c, 0x3d, 0x20, 0x61, 0x6c, //  (pixel1.a <= al
	0x70, 0x68, 0x61, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x42, 0x5f, 0x66, // phaTestValueAB_f
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x42, 0x6c, 0x65, // ilterMode_addBle
	0x6e, 0x64, 0x2e, 0x78, 0x29, 0x0a, 0x7b, 0x0a, 0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, // nd.x).{.gl_FragC
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, // olor = vec4_spla
	0x74, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x3b, 0x0a, // t(0.0);.return;.
	0x7d, 0x0a, 0x7d, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, // }.}.if (amount_b
	0x6c, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x73, // lend_modulate_vs
	0x5f, 0x61, 0x64, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, // _add_flasherMode
	0x2e, 0x7a, 0x20, 0x3d, 0x3d, 0x20, 0x31, 0x2e, 0x29, 0x0a, 0x7b, 0x0a, 0x70, 0x69, 0x78, 0x65, // .z == 1.).{.pixe
	0x6c, 0x32, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x74, 0x65, 0x78, // l2 = texture(tex
	0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x42, 0x2c, 0x20, 0x76, 0x5f, 0x74, 0x65, // _flasher_B, v_te
	0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x70, 0x69, // xcoord0);.if (pi
	0x78, 0x65, 0x6c, 0x32, 0x2e, 0x61, 0x20, 0x3c, 0x3d, 0x20, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x54, // xel2.a <= alphaT
	0x65, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x42, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, // estValueAB_filte
	0x72, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2e, 0x79, // rMode_addBlend.y
	0x29, 0x0a, 0x7b, 0x0a, 0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, // ).{.gl_FragColor
	0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x30, 0x2e, //  = vec4_splat(0.
	0x30, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x3b, 0x0a, 0x7d, 0x0a, 0x7d, 0x0a, // 0);.return;.}.}.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x20, 0x3d, 0x20, 0x73, 0x74, // vec4 result = st
	0x61, 0x74, 0x69, 0x63, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x3b, // aticColor_Alpha;
	0x0a, 0x69, 0x66, 0x20, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x65, 0x6e, // .if (amount_blen
	0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x73, 0x5f, 0x61, 0x64, // d_modulate_vs_ad
	0x64, 0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x7a, 0x20, // d_flasherMode.z 
	0x3d, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x20, // == 0.).{.result 
	0x2a, 0x3d, 0x20, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x31, 0x3b, 0x0a, 0x7d, 0x0a, 0x69, 0x66, 0x20, // *= pixel1;.}.if 
	0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, // (amount_blend_mo
	0x64, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x66, 0x6c, // dulate_vs_add_fl
	0x61, 0x73, 0x68, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x7a, 0x20, 0x3d, 0x3d, 0x20, 0x31, // asherMode.z == 1
	0x2e, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x54, 0x65, // .).{.if (alphaTe
	0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x42, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, // stValueAB_filter
	0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2e, 0x7a, 0x20, // Mode_addBlend.z 
	0x3d, 0x3d, 0x20, 0x32, 0x2e, 0x29, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x20, 0x2a, 0x3d, // == 2.).result *=
	0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x48, 0x44, 0x52, 0x28, 0x70, 0x69, 0x78, 0x65, //  OverlayHDR(pixe
	0x6c, 0x31, 0x2c, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x32, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, // l1,pixel2);.if (
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x42, // alphaTestValueAB
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x42, // _filterMode_addB
	0x6c, 0x65, 0x6e, 0x64, 0x2e, 0x7a, 0x20, 0x3d, 0x3d, 0x20, 0x33, 0x2e, 0x29, 0x0a, 0x72, 0x65, // lend.z == 3.).re
	0x73, 0x75, 0x6c, 0x74, 0x20, 0x2a, 0x3d, 0x20, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, // sult *= Multiply
	0x28, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x31, 0x2c, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x32, 0x2c, 0x20, // (pixel1,pixel2, 
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x64, // amount_blend_mod
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x66, 0x6c, 0x61, // ulate_vs_add_fla
	0x73, 0x68, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x20, // sherMode.x);.if 
	0x28, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, // (alphaTestValueA
	0x42, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, // B_filterMode_add
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2e, 0x7a, 0x20, 0x3d, 0x3d, 0x20, 0x31, 0x2e, 0x29, 0x0a, 0x72, // Blend.z == 1.).r
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x20, 0x2a, 0x3d, 0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, // esult *= Additiv
	0x65, 0x28, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x31, 0x2c, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x32, 0x2c, // e(pixel1,pixel2,
	0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, //  amount_blend_mo
	0x64, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x66, 0x6c, // dulate_vs_add_fl
	0x61, 0x73, 0x68, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x69, 0x66, // asherMode.x);.if
	0x20, 0x28, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, //  (alphaTestValue
	0x41, 0x42, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, // AB_filterMode_ad
	0x64, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2e, 0x7a, 0x20, 0x3d, 0x3d, 0x20, 0x34, 0x2e, 0x29, 0x0a, // dBlend.z == 4.).
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x20, 0x2a, 0x3d, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, // result *= Screen
	0x48, 0x44, 0x52, 0x28, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x31, 0x2c, 0x70, 0x69, 0x78, 0x65, 0x6c, // HDR(pixel1,pixel
	0x32, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x43, // 2);.}.if (lightC
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x2e, 0x77, // enter_doShadow.w
	0x20, 0x21, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, //  != 0.).{.vec3 l
	0x69, 0x67, 0x68, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x20, 0x3d, 0x20, 0x76, 0x5f, 0x74, 0x61, 0x62, // ight_dir = v_tab
	0x6c, 0x65, 0x50, 0x6f, 0x73, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2d, 0x20, 0x6c, 0x69, 0x67, 0x68, // lePos.xyz - ligh
	0x74, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, // tCenter_doShadow
	0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x69, 0x67, 0x68, // .xyz;.float ligh
	0x74, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x20, 0x3d, 0x20, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x28, // t_dist = length(
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // light_dir);.floa
	0x74, 0x20, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x20, 0x3d, 0x20, 0x67, 0x65, 0x74, 0x5f, 0x6c, // t shadow = get_l
	0x69, 0x67, 0x68, 0x74, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, // ight_ball_shadow
	0x28, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x53, // (lightCenter_doS
	0x68, 0x61, 0x64, 0x6f, 0x77, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x6c, 0x69, 0x67, 0x68, 0x74, // hadow.xyz, light
	0x5f, 0x64, 0x69, 0x72, 0x2c, 0x20, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x74, // _dir, light_dist
	0x29, 0x3b, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x72, 0x67, 0x62, 0x20, 0x2a, 0x3d, // );.result.rgb *=
	0x20, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x61, //  shadow;.}.if (a
	0x6c, 0x70, 0x68, 0x61, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x42, 0x5f, // lphaTestValueAB_
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x42, 0x6c, // filterMode_addBl
	0x65, 0x6e, 0x64, 0x2e, 0x77, 0x20, 0x3d, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x0a, 0x67, 0x6c, 0x5f, // end.w == 0.).gl_
	0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, // FragColor = vec4
	0x28, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x63, 0x6c, 0x61, // (result.xyz, cla
	0x6d, 0x70, 0x28, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x61, 0x2c, 0x20, 0x30, 0x2e, 0x30, // mp(result.a, 0.0
	0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x67, 0x6c, // , 1.0));.else.gl
	0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, // _FragColor = vec
	0x34, 0x28, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x2a, 0x28, 0x2d, 0x61, // 4(result.xyz*(-a
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x75, // mount_blend_modu
	0x6c, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x73, // late_vs_add_flas
	0x68, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x79, 0x2a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, // herMode.y*result
	0x2e, 0x61, 0x29, 0x2c, 0x0a, 0x31, 0x2e, 0x30, 0x2f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, // .a),.1.0/amount_
	0x62, 0x6c, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x76, // blend_modulate_v
	0x73, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x4d, 0x6f, 0x64, // s_add_flasherMod
	0x65, 0x2e, 0x79, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x00,       // e.y - 1.0);.}..
};
static const uint8_t fs_flasher_clip_dx11[3807] =
{
	0x46, 0x53, 0x48, 0x0b, 0x11, 0xe4, 0xa0, 0x91, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x05, 0x62, // FSH............b
	0x61, 0x6c, 0x6c, 0x73, 0x12, 0x08, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x73, // alls...........s
	0x74, 0x61, 0x74, 0x69, 0x63, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x41, 0x6c, 0x70, 0x68, 0x61, // taticColor_Alpha
	0x12, 0x00, 0x80, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x61, 0x6c, 0x70, 0x68, 0x61, // ..........$alpha
	0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x42, 0x5f, 0x66, 0x69, 0x6c, 0x74, // TestValueAB_filt
	0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x12, // erMode_addBlend.
	0x00, 0x90, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, // .........(amount
	0x5f, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x5f, // _blend_modulate_
	0x76, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x4d, 0x6f, // vs_add_flasherMo
	0x64, 0x65, 0x12, 0x00, 0xa0, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x6c, 0x69, 0x67, // de...........lig
	0x68, 0x74, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x53, 0x68, 0x61, 0x64, 0x6f, // htCenter_doShado
	0x77, 0x12, 0x00, 0xb0, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, // w...........tex_
	0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x41, 0x30, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, // flasher_A0......
	0x00, 0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x5f, // ....tex_flasher_
	0x42, 0x30, 0x01, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, // B0..........tex_
	0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x41, 0x30, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, // flasher_A0......
	0x00, 0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x5f, // ....tex_flasher_
	0x42, 0x30, 0x01, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbc, 0x0d, 0x00, 0x00, 0x44, // B0.............D
	0x58, 0x42, 0x43, 0xae, 0xf6, 0x0f, 0x37, 0x06, 0x5a, 0xae, 0x11, 0x0e, 0x22, 0x9a, 0x19, 0x19, // XBC...7.Z..."...
	0xe1, 0x37, 0x86, 0x01, 0x00, 0x00, 0x00, 0xbc, 0x0d, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x2c, // .7.............,
	0x00, 0x00, 0x00, 0xb4, 0x00, 0x00, 0x00, 0xe8, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x4e, 0x80, // ...........ISGN.
	0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, // ...........h....
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, // ................
	0x00, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, // ...t............
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x01, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0x01, // ...........t....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0e, // ................
	0x0e, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, // ...t............
	0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x4f, // ...........SV_PO
	0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, // SITION.TEXCOORD.
	0xab, 0xab, 0xab, 0x4f, 0x53, 0x47, 0x4e, 0x2c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x08, // ...OSGN,........
	0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, // ... ............
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x54, 0x41, // ...........SV_TA
	0x52, 0x47, 0x45, 0x54, 0x00, 0xab, 0xab, 0x53, 0x48, 0x45, 0x58, 0xcc, 0x0c, 0x00, 0x00, 0x50, // RGET...SHEX....P
	0x00, 0x00, 0x00, 0x33, 0x03, 0x00, 0x00, 0x6a, 0x28, 0x00, 0x01, 0x59, 0x08, 0x00, 0x04, 0x46, // ...3...j(..Y...F
	0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x03, 0x00, // . .........Z....
	0x60, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x03, 0x00, 0x60, 0x10, 0x00, 0x01, // `......Z....`...
	0x00, 0x00, 0x00, 0x58, 0x18, 0x00, 0x04, 0x00, 0x70, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, // ...X....p......U
	0x55, 0x00, 0x00, 0x58, 0x18, 0x00, 0x04, 0x00, 0x70, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x55, // U..X....p......U
	0x55, 0x00, 0x00, 0x62, 0x10, 0x00, 0x03, 0x12, 0x10, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x62, // U..b...........b
	0x10, 0x00, 0x03, 0xe2, 0x10, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x62, 0x10, 0x00, 0x03, 0x32, // ...........b...2
	0x10, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x03, 0xf2, 0x20, 0x10, 0x00, 0x00, // .......e.... ...
	0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x02, 0x09, 0x00, 0x00, 0x00, 0x31, 0x00, 0x00, 0x07, 0x12, // ...h.......1....
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x10, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, // ................
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x04, 0x03, 0x0a, 0x00, 0x10, 0x00, 0x00, // @...............
	0x00, 0x00, 0x00, 0x31, 0x00, 0x00, 0x08, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, // ...1...........*
	0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, // . ..........@...
	0x00, 0x00, 0x40, 0x1f, 0x00, 0x04, 0x03, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x45, // ..@............E
	0x00, 0x00, 0x8b, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0xf2, 0x00, 0x10, 0x00, 0x00, // .......CU.......
	0x00, 0x00, 0x00, 0x46, 0x10, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, 0x00, // ...F.......F~...
	0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x08, 0x12, // ....`...........
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, // ......... ......
	0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x04, 0x03, 0x0a, // ...:............
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x08, 0xf2, 0x20, 0x10, 0x00, 0x00, // .......6.... ...
	0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ....@...........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x01, 0x15, 0x00, 0x00, 0x01, 0x15, // .......>........
	0x00, 0x00, 0x01, 0x18, 0x00, 0x00, 0x08, 0x12, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2a, // ...............*
	0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, // . ..........@...
	0x00, 0x80, 0x3f, 0x1f, 0x00, 0x04, 0x03, 0x0a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x45, // ..?............E
	0x00, 0x00, 0x8b, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0xf2, 0x00, 0x10, 0x00, 0x02, // .......CU.......
	0x00, 0x00, 0x00, 0x46, 0x10, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x7e, 0x10, 0x00, 0x01, // ...F.......F~...
	0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x08, 0x22, // ....`.........."
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, // ......... ......
	0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x04, 0x03, 0x1a, // ...:............
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x08, 0xf2, 0x20, 0x10, 0x00, 0x00, // .......6.... ...
	0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ....@...........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x01, 0x15, 0x00, 0x00, 0x01, 0x15, // .......>........
	0x00, 0x00, 0x01, 0x18, 0x00, 0x00, 0x08, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2a, // .......".......*
	0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, // . ..........@...
	0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x08, 0xf2, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x46, // ...8...........F
	0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, // .......F. ......
	0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x0a, 0xf2, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x56, // ...7...........V
	0x05, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x46, // .......F.......F
	0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x04, 0x03, 0x0a, // . ..............
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x0b, 0xf2, 0x00, 0x10, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0xa6, 0x8a, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x02, // ..... ..........
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x40, 0x40, 0x00, 0x00, 0x80, 0x3f, 0x00, // @.....@..@@...?.
	0x00, 0x80, 0x40, 0x1f, 0x00, 0x04, 0x03, 0x0a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1d, // ..@.............
	0x00, 0x00, 0x0a, 0xf2, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, // ...........F....
	0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x3f, 0x00, // ....@.....?...?.
	0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x3f, 0x01, 0x00, 0x00, 0x0a, 0xf2, 0x00, 0x10, 0x00, 0x04, // ..?...?.........
	0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, // ...F........@...
	0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x38, // ..?...?...?...?8
	0x00, 0x00, 0x07, 0xf2, 0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, // ...........F....
	0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xf2, // ...F............
	0x00, 0x10, 0x00, 0x06, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x46, // .......F.......F
	0x0e, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0xf2, 0x00, 0x10, 0x00, 0x07, // ................
	0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, // ...F...A........
	0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, // @.....?...?...?.
	0x00, 0x80, 0x3f, 0x00, 0x00, 0x00, 0x07, 0xf2, 0x00, 0x10, 0x00, 0x07, 0x00, 0x00, 0x00, 0x46, // ..?............F
	0x0e, 0x10, 0x00, 0x07, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, // .......F........
	0x00, 0x00, 0x0b, 0xf2, 0x00, 0x10, 0x00, 0x08, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x80, 0x41, // ...........F...A
	0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, // ........@.....?.
	0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x32, 0x00, 0x00, 0x0d, 0xf2, // ..?...?...?2....
	0x00, 0x10, 0x00, 0x07, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x07, // .......F...A....
	0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x08, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, // ...F........@...
	0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x32, // ..?...?...?...?2
	0x00, 0x00, 0x0d, 0xf2, 0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x80, 0x41, // ...........F...A
	0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, // ........@.....@.
	0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x46, 0x0e, 0x10, 0x00, 0x07, // ..@...@...@F....
	0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x09, 0xf2, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x46, // ...2...........F
	0x0e, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x46, // .......F.......F
	0x0e, 0x10, 0x00, 0x06, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x0a, 0xf2, 0x00, 0x10, 0x00, 0x04, // .......4........
	0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, // ...F........@...
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, // ...............8
	0x00, 0x00, 0x07, 0xf2, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x03, // ...........F....
	0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x01, 0x38, // ...F...........8
	0x00, 0x00, 0x07, 0xf2, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, // ...........F....
	0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x08, 0xf2, // ...F.......8....
	0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x06, // .......F........
	0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x07, 0xf2, // . .........8....
	0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x46, // .......F.......F
	0x0e, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x09, 0xf2, 0x00, 0x10, 0x00, 0x04, // .......7........
	0x00, 0x00, 0x00, 0x56, 0x05, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x04, // ...V.......F....
	0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x0a, 0xf2, // ...F.......2....
	0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x06, // .......F........
	0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, // . .........F....
	0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x07, 0xf2, 0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x46, // ...8...........F
	0x0e, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x37, // .......F.......7
	0x00, 0x00, 0x09, 0xf2, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0xa6, 0x0a, 0x10, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x04, // ...F.......F....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0xf2, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, // ...............F
	0x0e, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, // ...A........@...
	0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, // ..?...?...?...?.
	0x00, 0x00, 0x0b, 0xf2, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x80, 0x41, // ...........F...A
	0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, // ........@.....?.
	0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x32, 0x00, 0x00, 0x0d, 0xf2, // ..?...?...?2....
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x00, // .......F...A....
	0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, // ...F........@...
	0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x34, // ..?...?...?...?4
	0x00, 0x00, 0x0a, 0xf2, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, // ...........F....
	0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ....@...........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x07, 0xf2, 0x00, 0x10, 0x00, 0x00, // .......8........
	0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x04, // ...F.......F....
	0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x09, 0xf2, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0xf6, // ...7............
	0x0f, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, // .......F.......F
	0x0e, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x72, 0x00, 0x10, 0x00, 0x00, // .......6...r....
	0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x01, 0x36, // ...F...........6
	0x00, 0x00, 0x05, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x03, // ...r.......F....
	0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x01, 0x39, 0x00, 0x00, 0x08, 0x12, 0x00, 0x10, 0x00, 0x01, // .......9........
	0x00, 0x00, 0x00, 0x3a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x01, // ...:. ..........
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x04, 0x03, 0x0a, 0x00, 0x10, 0x00, 0x01, // @...............
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x72, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x96, // .......r........
	0x17, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x82, 0x20, 0x80, 0x41, 0x00, 0x00, 0x00, 0x00, // .......F. .A....
	0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x07, 0x82, 0x00, 0x10, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x01, // ...F.......F....
	0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x42, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, // ...6...B........
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x08, 0x72, 0x00, 0x10, 0x00, 0x03, // @......6...r....
	0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, // ....@.........?.
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x82, 0x00, 0x10, 0x00, 0x02, // .......6........
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x01, 0x21, // ....@......0...!
	0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x03, // ...........*....
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x82, // ....@......6....
	0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, // ........@.......
	0x00, 0x04, 0x03, 0x0a, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x09, 0x12, // ................
	0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, // ........@......:
	0x80, 0x20, 0x04, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x1f, // . .....*........
	0x00, 0x04, 0x03, 0x0a, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x32, // ...........6...2
	0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x56, 0x05, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x36, // .......V.......6
	0x00, 0x00, 0x05, 0x82, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0xff, // ............@...
	0xff, 0xff, 0xff, 0x02, 0x00, 0x00, 0x01, 0x15, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0b, 0xe2, // ................
	0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x06, 0x89, 0x20, 0x80, 0x41, 0x00, 0x00, 0x00, 0x00, // ......... .A....
	0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x06, 0x89, 0x20, 0x04, 0x00, 0x00, 0x00, 0x00, 0x2a, // ......... .....*
	0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x05, // ................
	0x00, 0x00, 0x00, 0x96, 0x07, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x01, // ...........F....
	0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x0a, // ................
	0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x31, // .......:.......1
	0x00, 0x00, 0x07, 0x22, 0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, // ..."........@...
	0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x31, 0x00, 0x00, 0x07, 0x42, // ...........1...B
	0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, // ................
	0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x01, 0x00, 0x00, 0x07, 0x22, 0x00, 0x10, 0x00, 0x05, // @.....?...."....
	0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x05, // ...*............
	0x00, 0x00, 0x00, 0x1f, 0x00, 0x04, 0x03, 0x1a, 0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x32, // ...............2
	0x00, 0x00, 0x0a, 0xe2, 0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x06, 0x00, 0x10, 0x80, 0x41, // ...............A
	0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x06, 0x09, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x56, // ...............V
	0x0e, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x07, 0x82, 0x00, 0x10, 0x00, 0x04, // ................
	0x00, 0x00, 0x00, 0x96, 0x07, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x96, 0x07, 0x10, 0x00, 0x05, // ................
	0x00, 0x00, 0x00, 0x4b, 0x00, 0x00, 0x05, 0x82, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x3a, // ...K...........:
	0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x0a, 0x12, 0x00, 0x10, 0x00, 0x05, // .......2........
	0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, // .......A........
	0x40, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x40, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x40, 0x0f, // @.....@.@.....@.
	0x00, 0x00, 0x07, 0x22, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x96, 0x05, 0x10, 0x00, 0x04, // ..."............
	0x00, 0x00, 0x00, 0x96, 0x05, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x0b, 0x42, // ...........8...B
	0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x3a, 0x80, 0x20, 0x04, 0x00, 0x00, 0x00, 0x00, 0x2a, // .......:. .....*
	0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x3a, 0x80, 0x20, 0x04, 0x00, 0x00, 0x00, 0x00, 0x2a, // .......:. .....*
	0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x07, 0x22, 0x00, 0x10, 0x00, 0x04, // ..........."....
	0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x04, // ...........*....
	0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x07, 0x22, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x1a, // ...3..."........
	0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, // ........@.....?.
	0x00, 0x00, 0x0a, 0x42, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x80, 0x41, // ...B...........A
	0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x3a, 0x80, 0x20, 0x04, 0x00, 0x00, 0x00, 0x00, 0x2a, // .......:. .....*
	0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x12, 0x00, 0x10, 0x00, 0x05, // ................
	0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x3a, 0x80, 0x20, 0x04, 0x00, // ...........:. ..
	0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x12, // ...*............
	0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x04, // .......*...A....
	0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x42, // ...............B
	0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x04, // .......*...A....
	0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x0a, 0x82, // ...:............
	0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, // ........@.....?.
	0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x0a, 0x00, 0x10, 0x00, 0x05, // ..?...?...?.....
	0x00, 0x00, 0x00, 0x38, 0x20, 0x00, 0x07, 0x42, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x3a, // ...8 ..B.......:
	0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x32, // .......*.......2
	0x00, 0x00, 0x09, 0x82, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x04, // ...........*....
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x01, 0x40, 0x00, 0x00, 0x00, // ....@.......@...
	0x00, 0x40, 0x40, 0x38, 0x00, 0x00, 0x07, 0x42, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x2a, // .@@8...B.......*
	0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x38, // .......*.......8
	0x00, 0x00, 0x07, 0x42, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x04, // ...B.......*....
	0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x09, 0x42, // ...:.......2...B
	0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, // .......*........
	0x40, 0x00, 0x00, 0x66, 0x66, 0x66, 0x3f, 0x01, 0x40, 0x00, 0x00, 0x66, 0x66, 0x66, 0xbf, 0x32, // @..fff?.@..fff.2
	0x00, 0x00, 0x09, 0x22, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x04, // ..."............
	0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, // ...*........@...
	0x00, 0x80, 0x3f, 0x38, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x1a, // ..?8............
	0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x12, // ................
	0x00, 0x00, 0x01, 0x36, 0x00, 0x00, 0x05, 0x12, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x1a, // ...6............
	0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x01, 0x1e, 0x00, 0x00, 0x07, 0x22, // ..............."
	0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, // .......*........
	0x40, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x72, 0x00, 0x10, 0x00, 0x03, // @......6...r....
	0x00, 0x00, 0x00, 0x26, 0x09, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x82, // ...&.......6....
	0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x16, // ................
	0x00, 0x00, 0x01, 0x37, 0x00, 0x00, 0x09, 0x12, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3a, // ...7...........:
	0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x1a, // ................
	0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x07, 0x72, 0x00, 0x10, 0x00, 0x00, // .......8...r....
	0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x10, 0x00, 0x01, // ...F............
	0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x01, 0x18, 0x00, 0x00, 0x08, 0x12, 0x00, 0x10, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x3a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x01, // ...:. ..........
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x20, 0x00, 0x05, 0x82, 0x00, 0x10, 0x00, 0x00, // @......6 .......
	0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x09, 0x22, // ...:.......8..."
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x1a, // .......:........
	0x80, 0x20, 0x80, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x38, // . .A...........8
	0x00, 0x00, 0x07, 0x72, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, // ...r.......F....
	0x00, 0x00, 0x00, 0x56, 0x05, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x0b, 0x22, // ...V..........."
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, // ........@.....?.
	0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x1a, 0x80, 0x20, 0x00, 0x00, // ..?...?...?.. ..
	0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x82, 0x00, 0x10, 0x00, 0x02, // ................
	0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, // ............@...
	0x00, 0x80, 0xbf, 0x37, 0x00, 0x00, 0x09, 0xf2, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, // ...7.... .......
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, // .......F.......F
	0x0e, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x01, 0x00, 0x00, 0xc0, 0x00,       // .......>.......
};
static const uint8_t fs_flasher_clip_spv[6911] =
{
	0x46, 0x53, 0x48, 0x0b, 0x11, 0xe4, 0xa0, 0x91, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x05, 0x62, // FSH............b
	0x61, 0x6c, 0x6c, 0x73, 0x12, 0x08, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x61, // alls..........(a
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x75, // mount_blend_modu
	0x6c, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x73, // late_vs_add_flas
	0x68, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x01, 0xa0, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, // herMode.........
	0x00, 0x24, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, // .$alphaTestValue
	0x41, 0x42, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, // AB_filterMode_ad
	0x64, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x12, 0x01, 0x90, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, // dBlend..........
	0x11, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x41, 0x6c, 0x70, // .staticColor_Alp
	0x68, 0x61, 0x12, 0x01, 0x80, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x6c, 0x69, 0x67, // ha...........lig
	0x68, 0x74, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x53, 0x68, 0x61, 0x64, 0x6f, // htCenter_doShado
	0x77, 0x12, 0x01, 0xb0, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, // w...........tex_
	0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x41, 0x30, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, // flasher_A0......
	0x02, 0x22, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x5f, // ."..tex_flasher_
	0x42, 0x30, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x02, 0x22, 0x00, 0x0c, 0x1a, 0x00, 0x00, 0x03, // B0......."......
	0x02, 0x23, 0x07, 0x00, 0x00, 0x01, 0x00, 0x0b, 0x00, 0x08, 0x00, 0xe4, 0x03, 0x00, 0x00, 0x00, // .#..............
	0x00, 0x00, 0x00, 0x11, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x06, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x47, 0x4c, 0x53, 0x4c, 0x2e, 0x73, 0x74, 0x64, 0x2e, 0x34, 0x35, 0x30, 0x00, // ...GLSL.std.450.
	0x00, 0x00, 0x00, 0x0e, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, // ................
	0x00, 0x09, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, // ...........main.
	0x00, 0x00, 0x00, 0xdf, 0x01, 0x00, 0x00, 0xe3, 0x01, 0x00, 0x00, 0xe7, 0x01, 0x00, 0x00, 0xf6, // ................
	0x01, 0x00, 0x00, 0x10, 0x00, 0x03, 0x00, 0x04, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x10, // ................
	0x00, 0x03, 0x00, 0x04, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x03, 0x00, 0x03, 0x00, 0x05, // ................
	0x00, 0x00, 0x00, 0xf4, 0x01, 0x00, 0x00, 0x05, 0x00, 0x04, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, // ...............m
	0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x08, 0x00, 0x46, 0x00, 0x00, 0x00, 0x74, // ain........F...t
	0x65, 0x78, 0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x41, 0x53, 0x61, 0x6d, 0x70, // ex_flasher_ASamp
	0x6c, 0x65, 0x72, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x08, 0x00, 0x49, 0x00, 0x00, 0x00, 0x74, // ler........I...t
	0x65, 0x78, 0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x41, 0x54, 0x65, 0x78, 0x74, // ex_flasher_AText
	0x75, 0x72, 0x65, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x08, 0x00, 0x4d, 0x00, 0x00, 0x00, 0x74, // ure........M...t
	0x65, 0x78, 0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x42, 0x53, 0x61, 0x6d, 0x70, // ex_flasher_BSamp
	0x6c, 0x65, 0x72, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x08, 0x00, 0x4f, 0x00, 0x00, 0x00, 0x74, // ler........O...t
	0x65, 0x78, 0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x42, 0x54, 0x65, 0x78, 0x74, // ex_flasher_BText
	0x75, 0x72, 0x65, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x06, 0x00, 0xb8, 0x00, 0x00, 0x00, 0x55, // ure............U
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x00, 0x00, 0x00, 0x00, 0x06, // niformBlock.....
	0x00, 0x05, 0x00, 0xb8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x61, 0x6c, 0x6c, 0x73, // ...........balls
	0x00, 0x00, 0x00, 0x06, 0x00, 0x08, 0x00, 0xb8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x73, // ...............s
	0x74, 0x61, 0x74, 0x69, 0x63, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x41, 0x6c, 0x70, 0x68, 0x61, // taticColor_Alpha
	0x00, 0x00, 0x00, 0x06, 0x00, 0x0d, 0x00, 0xb8, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x61, // ...............a
	0x6c, 0x70, 0x68, 0x61, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x42, 0x5f, // lphaTestValueAB_
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x42, 0x6c, // filterMode_addBl
	0x65, 0x6e, 0x64, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x0e, 0x00, 0xb8, 0x00, 0x00, 0x00, 0x03, // end.............
	0x00, 0x00, 0x00, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x5f, // ...amount_blend_
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x5f, // modulate_vs_add_
	0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x00, 0x00, 0x00, 0x00, 0x06, // flasherMode.....
	0x00, 0x09, 0x00, 0xb8, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6c, 0x69, 0x67, 0x68, 0x74, // ...........light
	0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x00, // Center_doShadow.
	0x00, 0x00, 0x00, 0x05, 0x00, 0x03, 0x00, 0xba, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, // ................
	0x00, 0x06, 0x00, 0xdf, 0x01, 0x00, 0x00, 0x76, 0x5f, 0x63, 0x6c, 0x69, 0x70, 0x44, 0x69, 0x73, // .......v_clipDis
	0x74, 0x61, 0x6e, 0x63, 0x65, 0x00, 0x00, 0x05, 0x00, 0x05, 0x00, 0xe3, 0x01, 0x00, 0x00, 0x76, // tance..........v
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x00, 0x00, 0x05, 0x00, 0x05, 0x00, 0xe7, // _tablePos.......
	0x01, 0x00, 0x00, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x00, 0x05, // ...v_texcoord0..
	0x00, 0x06, 0x00, 0xf6, 0x01, 0x00, 0x00, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, // .......bgfx_Frag
	0x44, 0x61, 0x74, 0x61, 0x30, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x46, 0x00, 0x00, 0x00, 0x22, // Data0..G...F..."
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x46, 0x00, 0x00, 0x00, 0x21, // .......G...F...!
	0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x49, 0x00, 0x00, 0x00, 0x22, // .......G...I..."
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x49, 0x00, 0x00, 0x00, 0x21, // .......G...I...!
	0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x4d, 0x00, 0x00, 0x00, 0x22, // .......G...M..."
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x4d, 0x00, 0x00, 0x00, 0x21, // .......G...M...!
	0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x4f, 0x00, 0x00, 0x00, 0x22, // .......G...O..."
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x4f, 0x00, 0x00, 0x00, 0x21, // .......G...O...!
	0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0xb7, 0x00, 0x00, 0x00, 0x06, // .......G........
	0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0xb8, 0x00, 0x00, 0x00, 0x00, // .......H........
	0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0xb8, // ...#.......H....
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x48, // .......#.......H
	0x00, 0x05, 0x00, 0xb8, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x90, // ...........#....
	0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0xb8, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x23, // ...H...........#
	0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0xb8, 0x00, 0x00, 0x00, 0x04, // .......H........
	0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0xb0, 0x00, 0x00, 0x00, 0x47, 0x00, 0x03, 0x00, 0xb8, // ...#.......G....
	0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0xba, 0x00, 0x00, 0x00, 0x22, // .......G......."
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0xba, 0x00, 0x00, 0x00, 0x21, // .......G.......!
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0xdf, 0x01, 0x00, 0x00, 0x1e, // .......G........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0xe3, 0x01, 0x00, 0x00, 0x1e, // .......G........
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0xe7, 0x01, 0x00, 0x00, 0x1e, // .......G........
	0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0xf6, 0x01, 0x00, 0x00, 0x1e, // .......G........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, 0x00, 0x21, // ...............!
	0x00, 0x03, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x02, 0x00, 0x06, // ................
	0x00, 0x00, 0x00, 0x16, 0x00, 0x03, 0x00, 0x07, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x19, // ........... ....
	0x00, 0x09, 0x00, 0x08, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x02, // ................
	0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x04, // ................
	0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x33, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x03, // .......3........
	0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x45, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, // ... ...E........
	0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x45, 0x00, 0x00, 0x00, 0x46, 0x00, 0x00, 0x00, 0x00, // ...;...E...F....
	0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, // ... ...H........
	0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x48, 0x00, 0x00, 0x00, 0x49, 0x00, 0x00, 0x00, 0x00, // ...;...H...I....
	0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x45, 0x00, 0x00, 0x00, 0x4d, 0x00, 0x00, 0x00, 0x00, // ...;...E...M....
	0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x48, 0x00, 0x00, 0x00, 0x4f, 0x00, 0x00, 0x00, 0x00, // ...;...H...O....
	0x00, 0x00, 0x00, 0x15, 0x00, 0x04, 0x00, 0x52, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x01, // .......R... ....
	0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x52, 0x00, 0x00, 0x00, 0x53, 0x00, 0x00, 0x00, 0x01, // ...+...R...S....
	0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x52, 0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, 0x00, // ...+...R...W....
	0x00, 0x00, 0x00, 0x1b, 0x00, 0x03, 0x00, 0x5b, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x2b, // .......[.......+
	0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x75, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x2b, // .......u......?+
	0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2c, // ...............,
	0x00, 0x07, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x7f, // ................
	0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, // ...........+....
	0x00, 0x00, 0x00, 0x8c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x2c, 0x00, 0x07, 0x00, 0x0d, // ..........?,....
	0x00, 0x00, 0x00, 0x8d, 0x00, 0x00, 0x00, 0x8c, 0x00, 0x00, 0x00, 0x8c, 0x00, 0x00, 0x00, 0x8c, // ................
	0x00, 0x00, 0x00, 0x8c, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x93, // .......+........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x2b, 0x00, 0x04, 0x00, 0x52, 0x00, 0x00, 0x00, 0xb1, // ......@+...R....
	0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x14, 0x00, 0x02, 0x00, 0xb2, 0x00, 0x00, 0x00, 0x15, // ................
	0x00, 0x04, 0x00, 0xb5, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, // ....... .......+
	0x00, 0x04, 0x00, 0xb5, 0x00, 0x00, 0x00, 0xb6, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x1c, // ................
	0x00, 0x04, 0x00, 0xb7, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0xb6, 0x00, 0x00, 0x00, 0x1e, // ................
	0x00, 0x07, 0x00, 0xb8, 0x00, 0x00, 0x00, 0xb7, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x0d, // ................
	0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0xb9, // ........... ....
	0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xb8, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0xb9, // ...........;....
	0x00, 0x00, 0x00, 0xba, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0xb5, // ...........+....
	0x00, 0x00, 0x00, 0xbc, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0xbd, // ........... ....
	0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0xc8, // ........... ....
	0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, // ...........+....
	0x00, 0x00, 0x00, 0xe9, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x40, 0x2b, 0x00, 0x04, 0x00, 0xb5, // ..........@+....
	0x00, 0x00, 0x00, 0xf1, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0xb5, // ...........+....
	0x00, 0x00, 0x00, 0xf7, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, // ...........+....
	0x00, 0x00, 0x00, 0x04, 0x01, 0x00, 0x00, 0x66, 0x66, 0x66, 0xbf, 0x2b, 0x00, 0x04, 0x00, 0x07, // .......fff.+....
	0x00, 0x00, 0x00, 0x05, 0x01, 0x00, 0x00, 0x66, 0x66, 0x66, 0x3f, 0x2b, 0x00, 0x04, 0x00, 0x52, // .......fff?+...R
	0x00, 0x00, 0x00, 0x21, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0xb5, // ...!.......+....
	0x00, 0x00, 0x00, 0x22, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x52, // ...".......+...R
	0x00, 0x00, 0x00, 0x30, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, // ...0.......+....
	0x00, 0x00, 0x00, 0x6c, 0x01, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x2b, 0x00, 0x04, 0x00, 0x07, // ...l.....@@+....
	0x00, 0x00, 0x00, 0x8b, 0x01, 0x00, 0x00, 0x00, 0x00, 0x80, 0x40, 0x2b, 0x00, 0x04, 0x00, 0x52, // ..........@+...R
	0x00, 0x00, 0x00, 0x96, 0x01, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0xde, // ........... ....
	0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0xde, // ...........;....
	0x01, 0x00, 0x00, 0xdf, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0xe2, // ........... ....
	0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0xe2, // .......3...;....
	0x01, 0x00, 0x00, 0xe3, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0xe6, // ........... ....
	0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0xe6, // ...........;....
	0x01, 0x00, 0x00, 0xe7, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0xf5, // ........... ....
	0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0xf5, // ...........;....
	0x01, 0x00, 0x00, 0xf6, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x03, 0x00, 0xb2, // ...........*....
	0x00, 0x00, 0x00, 0x0c, 0x02, 0x00, 0x00, 0x29, 0x00, 0x03, 0x00, 0xb2, 0x00, 0x00, 0x00, 0x0f, // .......)........
	0x02, 0x00, 0x00, 0x2c, 0x00, 0x07, 0x00, 0x0d, 0x00, 0x00, 0x00, 0xb0, 0x03, 0x00, 0x00, 0x75, // ...,...........u
	0x00, 0x00, 0x00, 0x75, 0x00, 0x00, 0x00, 0x75, 0x00, 0x00, 0x00, 0x75, 0x00, 0x00, 0x00, 0x2b, // ...u...u...u...+
	0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0xb4, 0x03, 0x00, 0x00, 0x00, 0x00, 0xa0, 0xc0, 0x01, // ................
	0x00, 0x03, 0x00, 0x0d, 0x00, 0x00, 0x00, 0xb7, 0x03, 0x00, 0x00, 0x01, 0x00, 0x03, 0x00, 0x07, // ................
	0x00, 0x00, 0x00, 0xd4, 0x03, 0x00, 0x00, 0x36, 0x00, 0x05, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, // .......6........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x05, // ................
	0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0x47, 0x00, 0x00, 0x00, 0x46, // ...=.......G...F
	0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x08, 0x00, 0x00, 0x00, 0x4a, 0x00, 0x00, 0x00, 0x49, // ...=.......J...I
	0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0x4e, 0x00, 0x00, 0x00, 0x4d, // ...=.......N...M
	0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x08, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x4f, // ...=.......P...O
	0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0xe0, 0x01, 0x00, 0x00, 0xdf, // ...=............
	0x01, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x33, 0x00, 0x00, 0x00, 0xe4, 0x01, 0x00, 0x00, 0xe3, // ...=...3........
	0x01, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xe8, 0x01, 0x00, 0x00, 0xe7, // ...=............
	0x01, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0xd1, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfb, // ................
	0x00, 0x03, 0x00, 0xf1, 0x00, 0x00, 0x00, 0x34, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x34, // .......4.......4
	0x02, 0x00, 0x00, 0xb8, 0x00, 0x05, 0x00, 0xb2, 0x00, 0x00, 0x00, 0x37, 0x02, 0x00, 0x00, 0xe0, // ...........7....
	0x01, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x39, 0x02, 0x00, 0x00, 0x00, // ...........9....
	0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0x37, 0x02, 0x00, 0x00, 0x38, 0x02, 0x00, 0x00, 0x39, // .......7...8...9
	0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x38, 0x02, 0x00, 0x00, 0xfc, 0x00, 0x01, 0x00, 0xf8, // .......8........
	0x00, 0x02, 0x00, 0x39, 0x02, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0xbd, 0x00, 0x00, 0x00, 0x3a, // ...9...A.......:
	0x02, 0x00, 0x00, 0xba, 0x00, 0x00, 0x00, 0x21, 0x01, 0x00, 0x00, 0x22, 0x01, 0x00, 0x00, 0x3d, // .......!..."...=
	0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x3b, 0x02, 0x00, 0x00, 0x3a, 0x02, 0x00, 0x00, 0xb8, // .......;...:....
	0x00, 0x05, 0x00, 0xb2, 0x00, 0x00, 0x00, 0x3c, 0x02, 0x00, 0x00, 0x3b, 0x02, 0x00, 0x00, 0x93, // .......<...;....
	0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x49, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, // .......I........
	0x00, 0x04, 0x00, 0x3c, 0x02, 0x00, 0x00, 0x3d, 0x02, 0x00, 0x00, 0x49, 0x02, 0x00, 0x00, 0xf8, // ...<...=...I....
	0x00, 0x02, 0x00, 0x3d, 0x02, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, 0x5b, 0x00, 0x00, 0x00, 0xe0, // ...=...V...[....
	0x02, 0x00, 0x00, 0x4a, 0x00, 0x00, 0x00, 0x47, 0x00, 0x00, 0x00, 0x57, 0x00, 0x05, 0x00, 0x0d, // ...J...G...W....
	0x00, 0x00, 0x00, 0xe2, 0x02, 0x00, 0x00, 0xe0, 0x02, 0x00, 0x00, 0xe8, 0x01, 0x00, 0x00, 0x51, // ...............Q
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x42, 0x02, 0x00, 0x00, 0xe2, 0x02, 0x00, 0x00, 0x03, // .......B........
	0x00, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0xbd, 0x00, 0x00, 0x00, 0x43, 0x02, 0x00, 0x00, 0xba, // ...A.......C....
	0x00, 0x00, 0x00, 0x30, 0x01, 0x00, 0x00, 0xf1, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, // ...0.......=....
	0x00, 0x00, 0x00, 0x44, 0x02, 0x00, 0x00, 0x43, 0x02, 0x00, 0x00, 0xbc, 0x00, 0x05, 0x00, 0xb2, // ...D...C........
	0x00, 0x00, 0x00, 0x45, 0x02, 0x00, 0x00, 0x42, 0x02, 0x00, 0x00, 0x44, 0x02, 0x00, 0x00, 0xf7, // ...E...B...D....
	0x00, 0x03, 0x00, 0x48, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0x45, // ...H...........E
	0x02, 0x00, 0x00, 0x46, 0x02, 0x00, 0x00, 0x48, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x46, // ...F...H.......F
	0x02, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0xd1, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x48, // ...............H
	0x02, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x49, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x49, // .......I.......I
	0x02, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x0d, 0x00, 0x00, 0x00, 0xb6, 0x03, 0x00, 0x00, 0xb7, // ................
	0x03, 0x00, 0x00, 0x39, 0x02, 0x00, 0x00, 0xe2, 0x02, 0x00, 0x00, 0x48, 0x02, 0x00, 0x00, 0x41, // ...9.......H...A
	0x00, 0x06, 0x00, 0xbd, 0x00, 0x00, 0x00, 0x4a, 0x02, 0x00, 0x00, 0xba, 0x00, 0x00, 0x00, 0x21, // .......J.......!
	0x01, 0x00, 0x00, 0x22, 0x01, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x4b, // ..."...=.......K
	0x02, 0x00, 0x00, 0x4a, 0x02, 0x00, 0x00, 0xb4, 0x00, 0x05, 0x00, 0xb2, 0x00, 0x00, 0x00, 0x4c, // ...J...........L
	0x02, 0x00, 0x00, 0x4b, 0x02, 0x00, 0x00, 0x75, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x59, // ...K...u.......Y
	0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0x4c, 0x02, 0x00, 0x00, 0x4d, // ...........L...M
	0x02, 0x00, 0x00, 0x59, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x4d, 0x02, 0x00, 0x00, 0x56, // ...Y.......M...V
	0x00, 0x05, 0x00, 0x5b, 0x00, 0x00, 0x00, 0xf0, 0x02, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x4e, // ...[.......P...N
	0x00, 0x00, 0x00, 0x57, 0x00, 0x05, 0x00, 0x0d, 0x00, 0x00, 0x00, 0xf2, 0x02, 0x00, 0x00, 0xf0, // ...W............
	0x02, 0x00, 0x00, 0xe8, 0x01, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x52, // .......Q.......R
	0x02, 0x00, 0x00, 0xf2, 0x02, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0xbd, // ...........A....
	0x00, 0x00, 0x00, 0x53, 0x02, 0x00, 0x00, 0xba, 0x00, 0x00, 0x00, 0x30, 0x01, 0x00, 0x00, 0xf7, // ...S.......0....
	0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x54, 0x02, 0x00, 0x00, 0x53, // ...=.......T...S
	0x02, 0x00, 0x00, 0xbc, 0x00, 0x05, 0x00, 0xb2, 0x00, 0x00, 0x00, 0x55, 0x02, 0x00, 0x00, 0x52, // ...........U...R
	0x02, 0x00, 0x00, 0x54, 0x02, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x58, 0x02, 0x00, 0x00, 0x00, // ...T.......X....
	0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0x55, 0x02, 0x00, 0x00, 0x56, 0x02, 0x00, 0x00, 0x58, // .......U...V...X
	0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x56, 0x02, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0xd1, // .......V........
	0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x58, 0x02, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x59, // .......X.......Y
	0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x59, 0x02, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x0d, // .......Y........
	0x00, 0x00, 0x00, 0xba, 0x03, 0x00, 0x00, 0xb7, 0x03, 0x00, 0x00, 0x49, 0x02, 0x00, 0x00, 0xf2, // ...........I....
	0x02, 0x00, 0x00, 0x58, 0x02, 0x00, 0x00, 0x41, 0x00, 0x05, 0x00, 0xc8, 0x00, 0x00, 0x00, 0x5a, // ...X...A.......Z
	0x02, 0x00, 0x00, 0xba, 0x00, 0x00, 0x00, 0x53, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x0d, // .......S...=....
	0x00, 0x00, 0x00, 0x5b, 0x02, 0x00, 0x00, 0x5a, 0x02, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0xbd, // ...[...Z...A....
	0x00, 0x00, 0x00, 0x5c, 0x02, 0x00, 0x00, 0xba, 0x00, 0x00, 0x00, 0x21, 0x01, 0x00, 0x00, 0x22, // ...........!..."
	0x01, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x5d, 0x02, 0x00, 0x00, 0x5c, // ...=.......]....
	0x02, 0x00, 0x00, 0xb4, 0x00, 0x05, 0x00, 0xb2, 0x00, 0x00, 0x00, 0x5e, 0x02, 0x00, 0x00, 0x5d, // ...........^...]
	0x02, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x63, 0x02, 0x00, 0x00, 0x00, // ...........c....
	0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0x5e, 0x02, 0x00, 0x00, 0x5f, 0x02, 0x00, 0x00, 0x63, // .......^..._...c
	0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x5f, 0x02, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x0d, // ......._........
	0x00, 0x00, 0x00, 0x62, 0x02, 0x00, 0x00, 0x5b, 0x02, 0x00, 0x00, 0xb6, 0x03, 0x00, 0x00, 0xf9, // ...b...[........
	0x00, 0x02, 0x00, 0x63, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x63, 0x02, 0x00, 0x00, 0xf5, // ...c.......c....
	0x00, 0x07, 0x00, 0x0d, 0x00, 0x00, 0x00, 0xbc, 0x03, 0x00, 0x00, 0x5b, 0x02, 0x00, 0x00, 0x59, // ...........[...Y
	0x02, 0x00, 0x00, 0x62, 0x02, 0x00, 0x00, 0x5f, 0x02, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0xbd, // ...b..._...A....
	0x00, 0x00, 0x00, 0x64, 0x02, 0x00, 0x00, 0xba, 0x00, 0x00, 0x00, 0x21, 0x01, 0x00, 0x00, 0x22, // ...d.......!..."
	0x01, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x65, 0x02, 0x00, 0x00, 0x64, // ...=.......e...d
	0x02, 0x00, 0x00, 0xb4, 0x00, 0x05, 0x00, 0xb2, 0x00, 0x00, 0x00, 0x66, 0x02, 0x00, 0x00, 0x65, // ...........f...e
	0x02, 0x00, 0x00, 0x75, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x94, 0x02, 0x00, 0x00, 0x00, // ...u............
	0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0x66, 0x02, 0x00, 0x00, 0x67, 0x02, 0x00, 0x00, 0x94, // .......f...g....
	0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x67, 0x02, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0xbd, // .......g...A....
	0x00, 0x00, 0x00, 0x68, 0x02, 0x00, 0x00, 0xba, 0x00, 0x00, 0x00, 0x30, 0x01, 0x00, 0x00, 0x22, // ...h.......0..."
	0x01, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x69, 0x02, 0x00, 0x00, 0x68, // ...=.......i...h
	0x02, 0x00, 0x00, 0xb4, 0x00, 0x05, 0x00, 0xb2, 0x00, 0x00, 0x00, 0x6a, 0x02, 0x00, 0x00, 0x69, // ...........j...i
	0x02, 0x00, 0x00, 0x93, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x71, 0x02, 0x00, 0x00, 0x00, // ...........q....
	0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0x6a, 0x02, 0x00, 0x00, 0x6b, 0x02, 0x00, 0x00, 0x71, // .......j...k...q
	0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x6b, 0x02, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x0d, // .......k........
	0x00, 0x00, 0x00, 0x01, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x8d, // ...........0....
	0x00, 0x00, 0x00, 0xb6, 0x03, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x04, // ................
	0x03, 0x00, 0x00, 0xb6, 0x03, 0x00, 0x00, 0xba, 0x03, 0x00, 0x00, 0x8e, 0x00, 0x05, 0x00, 0x0d, // ................
	0x00, 0x00, 0x00, 0x05, 0x03, 0x00, 0x00, 0x04, 0x03, 0x00, 0x00, 0x93, 0x00, 0x00, 0x00, 0x83, // ................
	0x00, 0x05, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x08, 0x03, 0x00, 0x00, 0xb0, 0x03, 0x00, 0x00, 0xb6, // ................
	0x03, 0x00, 0x00, 0x8e, 0x00, 0x05, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x09, 0x03, 0x00, 0x00, 0x08, // ................
	0x03, 0x00, 0x00, 0x93, 0x00, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x0c, // ................
	0x03, 0x00, 0x00, 0xb0, 0x03, 0x00, 0x00, 0xba, 0x03, 0x00, 0x00, 0x7f, 0x00, 0x04, 0x00, 0x0d, // ................
	0x00, 0x00, 0x00, 0xb1, 0x03, 0x00, 0x00, 0x09, 0x03, 0x00, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x0d, // ................
	0x00, 0x00, 0x00, 0x0f, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0xb1, // ...........2....
	0x03, 0x00, 0x00, 0x0c, 0x03, 0x00, 0x00, 0xb0, 0x03, 0x00, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x0d, // ................
	0x00, 0x00, 0x00, 0x19, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x05, // ................
	0x03, 0x00, 0x00, 0x0f, 0x03, 0x00, 0x00, 0x01, 0x03, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x0d, // ................
	0x00, 0x00, 0x00, 0x12, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x19, // ...........(....
	0x03, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x70, // ...............p
	0x02, 0x00, 0x00, 0xbc, 0x03, 0x00, 0x00, 0x12, 0x03, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x71, // ...............q
	0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x71, 0x02, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x0d, // .......q........
	0x00, 0x00, 0x00, 0xbf, 0x03, 0x00, 0x00, 0xbc, 0x03, 0x00, 0x00, 0x67, 0x02, 0x00, 0x00, 0x70, // ...........g...p
	0x02, 0x00, 0x00, 0x6b, 0x02, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0xbd, 0x00, 0x00, 0x00, 0x72, // ...k...A.......r
	0x02, 0x00, 0x00, 0xba, 0x00, 0x00, 0x00, 0x30, 0x01, 0x00, 0x00, 0x22, 0x01, 0x00, 0x00, 0x3d, // .......0..."...=
	0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x73, 0x02, 0x00, 0x00, 0x72, 0x02, 0x00, 0x00, 0xb4, // .......s...r....
	0x00, 0x05, 0x00, 0xb2, 0x00, 0x00, 0x00, 0x74, 0x02, 0x00, 0x00, 0x73, 0x02, 0x00, 0x00, 0x6c, // .......t...s...l
	0x01, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x7d, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, // .......}........
	0x00, 0x04, 0x00, 0x74, 0x02, 0x00, 0x00, 0x75, 0x02, 0x00, 0x00, 0x7d, 0x02, 0x00, 0x00, 0xf8, // ...t...u...}....
	0x00, 0x02, 0x00, 0x75, 0x02, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0xbd, 0x00, 0x00, 0x00, 0x78, // ...u...A.......x
	0x02, 0x00, 0x00, 0xba, 0x00, 0x00, 0x00, 0x21, 0x01, 0x00, 0x00, 0xf1, 0x00, 0x00, 0x00, 0x3d, // .......!.......=
	0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x79, 0x02, 0x00, 0x00, 0x78, 0x02, 0x00, 0x00, 0x85, // .......y...x....
	0x00, 0x05, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x1e, 0x03, 0x00, 0x00, 0xb6, 0x03, 0x00, 0x00, 0xba, // ................
	0x03, 0x00, 0x00, 0x8e, 0x00, 0x05, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x20, 0x03, 0x00, 0x00, 0x1e, // ........... ....
	0x03, 0x00, 0x00, 0x79, 0x02, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x7c, // ...y...........|
	0x02, 0x00, 0x00, 0xbf, 0x03, 0x00, 0x00, 0x20, 0x03, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x7d, // ....... .......}
	0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x7d, 0x02, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x0d, // .......}........
	0x00, 0x00, 0x00, 0xc2, 0x03, 0x00, 0x00, 0xbf, 0x03, 0x00, 0x00, 0x71, 0x02, 0x00, 0x00, 0x7c, // ...........q...|
	0x02, 0x00, 0x00, 0x75, 0x02, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0xbd, 0x00, 0x00, 0x00, 0x7e, // ...u...A.......~
	0x02, 0x00, 0x00, 0xba, 0x00, 0x00, 0x00, 0x30, 0x01, 0x00, 0x00, 0x22, 0x01, 0x00, 0x00, 0x3d, // .......0..."...=
	0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x7f, 0x02, 0x00, 0x00, 0x7e, 0x02, 0x00, 0x00, 0xb4, // ...........~....
	0x00, 0x05, 0x00, 0xb2, 0x00, 0x00, 0x00, 0x80, 0x02, 0x00, 0x00, 0x7f, 0x02, 0x00, 0x00, 0x75, // ...............u
	0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x89, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, // ................
	0x00, 0x04, 0x00, 0x80, 0x02, 0x00, 0x00, 0x81, 0x02, 0x00, 0x00, 0x89, 0x02, 0x00, 0x00, 0xf8, // ................
	0x00, 0x02, 0x00, 0x81, 0x02, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0xbd, 0x00, 0x00, 0x00, 0x84, // .......A........
	0x02, 0x00, 0x00, 0xba, 0x00, 0x00, 0x00, 0x21, 0x01, 0x00, 0x00, 0xf1, 0x00, 0x00, 0x00, 0x3d, // .......!.......=
	0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x85, 0x02, 0x00, 0x00, 0x84, 0x02, 0x00, 0x00, 0x8e, // ................
	0x00, 0x05, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x26, 0x03, 0x00, 0x00, 0xba, 0x03, 0x00, 0x00, 0x85, // .......&........
	0x02, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x27, 0x03, 0x00, 0x00, 0xb6, // ...........'....
	0x03, 0x00, 0x00, 0x26, 0x03, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x88, // ...&............
	0x02, 0x00, 0x00, 0xc2, 0x03, 0x00, 0x00, 0x27, 0x03, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x89, // .......'........
	0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x89, 0x02, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x0d, // ................
	0x00, 0x00, 0x00, 0xc5, 0x03, 0x00, 0x00, 0xc2, 0x03, 0x00, 0x00, 0x7d, 0x02, 0x00, 0x00, 0x88, // ...........}....
	0x02, 0x00, 0x00, 0x81, 0x02, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0xbd, 0x00, 0x00, 0x00, 0x8a, // .......A........
	0x02, 0x00, 0x00, 0xba, 0x00, 0x00, 0x00, 0x30, 0x01, 0x00, 0x00, 0x22, 0x01, 0x00, 0x00, 0x3d, // .......0..."...=
	0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x8b, 0x02, 0x00, 0x00, 0x8a, 0x02, 0x00, 0x00, 0xb4, // ................
	0x00, 0x05, 0x00, 0xb2, 0x00, 0x00, 0x00, 0x8c, 0x02, 0x00, 0x00, 0x8b, 0x02, 0x00, 0x00, 0x8b, // ................
	0x01, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x93, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, // ................
	0x00, 0x04, 0x00, 0x8c, 0x02, 0x00, 0x00, 0x8d, 0x02, 0x00, 0x00, 0x93, 0x02, 0x00, 0x00, 0xf8, // ................
	0x00, 0x02, 0x00, 0x8d, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x2f, // .............../
	0x03, 0x00, 0x00, 0xb0, 0x03, 0x00, 0x00, 0xba, 0x03, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x0d, // ................
	0x00, 0x00, 0x00, 0xb2, 0x03, 0x00, 0x00, 0xb6, 0x03, 0x00, 0x00, 0xb0, 0x03, 0x00, 0x00, 0x0c, // ................
	0x00, 0x08, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x32, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, // .......2.......2
	0x00, 0x00, 0x00, 0xb2, 0x03, 0x00, 0x00, 0x2f, 0x03, 0x00, 0x00, 0xb0, 0x03, 0x00, 0x00, 0x0c, // ......./........
	0x00, 0x07, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x33, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x28, // .......3.......(
	0x00, 0x00, 0x00, 0x32, 0x03, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x0d, // ...2............
	0x00, 0x00, 0x00, 0x92, 0x02, 0x00, 0x00, 0xc5, 0x03, 0x00, 0x00, 0x33, 0x03, 0x00, 0x00, 0xf9, // ...........3....
	0x00, 0x02, 0x00, 0x93, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x93, 0x02, 0x00, 0x00, 0xf5, // ................
	0x00, 0x07, 0x00, 0x0d, 0x00, 0x00, 0x00, 0xde, 0x03, 0x00, 0x00, 0xc5, 0x03, 0x00, 0x00, 0x89, // ................
	0x02, 0x00, 0x00, 0x92, 0x02, 0x00, 0x00, 0x8d, 0x02, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x94, // ................
	0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x94, 0x02, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x0d, // ................
	0x00, 0x00, 0x00, 0xdd, 0x03, 0x00, 0x00, 0xbc, 0x03, 0x00, 0x00, 0x63, 0x02, 0x00, 0x00, 0xde, // ...........c....
	0x03, 0x00, 0x00, 0x93, 0x02, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0xbd, 0x00, 0x00, 0x00, 0x95, // .......A........
	0x02, 0x00, 0x00, 0xba, 0x00, 0x00, 0x00, 0x96, 0x01, 0x00, 0x00, 0xbc, 0x00, 0x00, 0x00, 0x3d, // ...............=
	0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x96, 0x02, 0x00, 0x00, 0x95, 0x02, 0x00, 0x00, 0xb7, // ................
	0x00, 0x05, 0x00, 0xb2, 0x00, 0x00, 0x00, 0x97, 0x02, 0x00, 0x00, 0x96, 0x02, 0x00, 0x00, 0x7f, // ................
	0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0xb0, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, // ................
	0x00, 0x04, 0x00, 0x97, 0x02, 0x00, 0x00, 0x98, 0x02, 0x00, 0x00, 0xb0, 0x02, 0x00, 0x00, 0xf8, // ................
	0x00, 0x02, 0x00, 0x98, 0x02, 0x00, 0x00, 0x41, 0x00, 0x05, 0x00, 0xc8, 0x00, 0x00, 0x00, 0x9a, // .......A........
	0x02, 0x00, 0x00, 0xba, 0x00, 0x00, 0x00, 0x96, 0x01, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x0d, // ...........=....
	0x00, 0x00, 0x00, 0x9b, 0x02, 0x00, 0x00, 0x9a, 0x02, 0x00, 0x00, 0x4f, 0x00, 0x08, 0x00, 0x33, // ...........O...3
	0x00, 0x00, 0x00, 0x9c, 0x02, 0x00, 0x00, 0x9b, 0x02, 0x00, 0x00, 0x9b, 0x02, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x33, // ...............3
	0x00, 0x00, 0x00, 0x9d, 0x02, 0x00, 0x00, 0xe4, 0x01, 0x00, 0x00, 0x9c, 0x02, 0x00, 0x00, 0x0c, // ................
	0x00, 0x06, 0x00, 0x07, 0x00, 0x00, 0x00, 0x9f, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x42, // ...............B
	0x00, 0x00, 0x00, 0x9d, 0x02, 0x00, 0x00, 0x41, 0x00, 0x05, 0x00, 0xc8, 0x00, 0x00, 0x00, 0xa0, // .......A........
	0x02, 0x00, 0x00, 0xba, 0x00, 0x00, 0x00, 0x96, 0x01, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x0d, // ...........=....
	0x00, 0x00, 0x00, 0xa1, 0x02, 0x00, 0x00, 0xa0, 0x02, 0x00, 0x00, 0x4f, 0x00, 0x08, 0x00, 0x33, // ...........O...3
	0x00, 0x00, 0x00, 0xa2, 0x02, 0x00, 0x00, 0xa1, 0x02, 0x00, 0x00, 0xa1, 0x02, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x98, // ................
	0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfb, 0x00, 0x03, 0x00, 0xf1, 0x00, 0x00, 0x00, 0x43, // ...............C
	0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x43, 0x03, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x44, // .......C.......D
	0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x44, 0x03, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x07, // .......D........
	0x00, 0x00, 0x00, 0xc7, 0x03, 0x00, 0x00, 0x75, 0x00, 0x00, 0x00, 0x43, 0x03, 0x00, 0x00, 0xe3, // .......u...C....
	0x03, 0x00, 0x00, 0x91, 0x03, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x52, 0x00, 0x00, 0x00, 0xc6, // ...........R....
	0x03, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, 0x43, 0x03, 0x00, 0x00, 0x93, 0x03, 0x00, 0x00, 0x91, // ...W...C........
	0x03, 0x00, 0x00, 0xb1, 0x00, 0x05, 0x00, 0xb2, 0x00, 0x00, 0x00, 0x47, 0x03, 0x00, 0x00, 0xc6, // ...........G....
	0x03, 0x00, 0x00, 0xb1, 0x00, 0x00, 0x00, 0xf6, 0x00, 0x04, 0x00, 0x94, 0x03, 0x00, 0x00, 0x91, // ................
	0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0x47, 0x03, 0x00, 0x00, 0x48, // ...........G...H
	0x03, 0x00, 0x00, 0x94, 0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x48, 0x03, 0x00, 0x00, 0x41, // ...........H...A
	0x00, 0x07, 0x00, 0xbd, 0x00, 0x00, 0x00, 0x4a, 0x03, 0x00, 0x00, 0xba, 0x00, 0x00, 0x00, 0x57, // .......J.......W
	0x00, 0x00, 0x00, 0xc6, 0x03, 0x00, 0x00, 0xbc, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, // ...........=....
	0x00, 0x00, 0x00, 0x4b, 0x03, 0x00, 0x00, 0x4a, 0x03, 0x00, 0x00, 0xb4, 0x00, 0x05, 0x00, 0xb2, // ...K...J........
	0x00, 0x00, 0x00, 0x4d, 0x03, 0x00, 0x00, 0x4b, 0x03, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0xf7, // ...M...K........
	0x00, 0x03, 0x00, 0x50, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0x4d, // ...P...........M
	0x03, 0x00, 0x00, 0x4e, 0x03, 0x00, 0x00, 0x50, 0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x4e, // ...N...P.......N
	0x03, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x94, 0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x50, // ...............P
	0x03, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0xc8, 0x00, 0x00, 0x00, 0x52, 0x03, 0x00, 0x00, 0xba, // ...A.......R....
	0x00, 0x00, 0x00, 0x57, 0x00, 0x00, 0x00, 0xc6, 0x03, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x0d, // ...W.......=....
	0x00, 0x00, 0x00, 0x53, 0x03, 0x00, 0x00, 0x52, 0x03, 0x00, 0x00, 0x4f, 0x00, 0x08, 0x00, 0x33, // ...S...R...O...3
	0x00, 0x00, 0x00, 0x54, 0x03, 0x00, 0x00, 0x53, 0x03, 0x00, 0x00, 0x53, 0x03, 0x00, 0x00, 0x00, // ...T...S...S....
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x33, // ...............3
	0x00, 0x00, 0x00, 0x57, 0x03, 0x00, 0x00, 0x54, 0x03, 0x00, 0x00, 0xa2, 0x02, 0x00, 0x00, 0x94, // ...W...T........
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x5a, 0x03, 0x00, 0x00, 0x57, 0x03, 0x00, 0x00, 0x9d, // .......Z...W....
	0x02, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x5d, 0x03, 0x00, 0x00, 0x9f, // ...........]....
	0x02, 0x00, 0x00, 0x9f, 0x02, 0x00, 0x00, 0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x5e, // ...............^
	0x03, 0x00, 0x00, 0x5a, 0x03, 0x00, 0x00, 0x5d, 0x03, 0x00, 0x00, 0xba, 0x00, 0x05, 0x00, 0xb2, // ...Z...]........
	0x00, 0x00, 0x00, 0x60, 0x03, 0x00, 0x00, 0x5e, 0x03, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0xb8, // ...`...^........
	0x00, 0x05, 0x00, 0xb2, 0x00, 0x00, 0x00, 0x62, 0x03, 0x00, 0x00, 0x5e, 0x03, 0x00, 0x00, 0x75, // .......b...^...u
	0x00, 0x00, 0x00, 0xa7, 0x00, 0x05, 0x00, 0xb2, 0x00, 0x00, 0x00, 0x63, 0x03, 0x00, 0x00, 0x60, // ...........c...`
	0x03, 0x00, 0x00, 0x62, 0x03, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x90, 0x03, 0x00, 0x00, 0x00, // ...b............
	0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0x63, 0x03, 0x00, 0x00, 0x64, 0x03, 0x00, 0x00, 0x90, // .......c...d....
	0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x64, 0x03, 0x00, 0x00, 0x8e, 0x00, 0x05, 0x00, 0x33, // .......d.......3
	0x00, 0x00, 0x00, 0x68, 0x03, 0x00, 0x00, 0x9d, 0x02, 0x00, 0x00, 0x5e, 0x03, 0x00, 0x00, 0x83, // ...h.......^....
	0x00, 0x05, 0x00, 0x33, 0x00, 0x00, 0x00, 0x69, 0x03, 0x00, 0x00, 0x57, 0x03, 0x00, 0x00, 0x68, // ...3...i...W...h
	0x03, 0x00, 0x00, 0x0c, 0x00, 0x06, 0x00, 0x07, 0x00, 0x00, 0x00, 0x6b, 0x03, 0x00, 0x00, 0x01, // ...........k....
	0x00, 0x00, 0x00, 0x42, 0x00, 0x00, 0x00, 0x69, 0x03, 0x00, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x07, // ...B...i........
	0x00, 0x00, 0x00, 0x70, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0xb4, // ...p.......2....
	0x03, 0x00, 0x00, 0x5e, 0x03, 0x00, 0x00, 0xe9, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, // ...^.......Q....
	0x00, 0x00, 0x00, 0x72, 0x03, 0x00, 0x00, 0x57, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, // ...r...W.......Q
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x74, 0x03, 0x00, 0x00, 0x57, 0x03, 0x00, 0x00, 0x00, // .......t...W....
	0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x77, 0x03, 0x00, 0x00, 0x57, // ...Q.......w...W
	0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x79, // .......Q.......y
	0x03, 0x00, 0x00, 0x57, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, // ...W............
	0x00, 0x00, 0x00, 0x7a, 0x03, 0x00, 0x00, 0x77, 0x03, 0x00, 0x00, 0x79, 0x03, 0x00, 0x00, 0x0c, // ...z...w...y....
	0x00, 0x08, 0x00, 0x07, 0x00, 0x00, 0x00, 0x7b, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, // .......{.......2
	0x00, 0x00, 0x00, 0x72, 0x03, 0x00, 0x00, 0x74, 0x03, 0x00, 0x00, 0x7a, 0x03, 0x00, 0x00, 0x85, // ...r...t...z....
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x7e, 0x03, 0x00, 0x00, 0x4b, 0x03, 0x00, 0x00, 0x4b, // .......~...K...K
	0x03, 0x00, 0x00, 0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x7f, 0x03, 0x00, 0x00, 0x7b, // ...............{
	0x03, 0x00, 0x00, 0x7e, 0x03, 0x00, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x07, 0x00, 0x00, 0x00, 0x80, // ...~............
	0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x00, 0x00, 0x7f, 0x03, 0x00, 0x00, 0x7f, // .......+........
	0x00, 0x00, 0x00, 0x75, 0x00, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x84, // ...u............
	0x03, 0x00, 0x00, 0x4b, 0x03, 0x00, 0x00, 0x70, 0x03, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x07, // ...K...p........
	0x00, 0x00, 0x00, 0x87, 0x03, 0x00, 0x00, 0x4b, 0x03, 0x00, 0x00, 0x70, 0x03, 0x00, 0x00, 0x0c, // .......K...p....
	0x00, 0x08, 0x00, 0x07, 0x00, 0x00, 0x00, 0x89, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x31, // ...............1
	0x00, 0x00, 0x00, 0x84, 0x03, 0x00, 0x00, 0x87, 0x03, 0x00, 0x00, 0x6b, 0x03, 0x00, 0x00, 0x0c, // ...........k....
	0x00, 0x08, 0x00, 0x07, 0x00, 0x00, 0x00, 0x8b, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, // ...............2
	0x00, 0x00, 0x00, 0x05, 0x01, 0x00, 0x00, 0x89, 0x03, 0x00, 0x00, 0x04, 0x01, 0x00, 0x00, 0x0c, // ................
	0x00, 0x08, 0x00, 0x07, 0x00, 0x00, 0x00, 0x8d, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, // ...............2
	0x00, 0x00, 0x00, 0x80, 0x03, 0x00, 0x00, 0x8b, 0x03, 0x00, 0x00, 0x75, 0x00, 0x00, 0x00, 0x85, // ...........u....
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x8f, 0x03, 0x00, 0x00, 0xc7, 0x03, 0x00, 0x00, 0x8d, // ................
	0x03, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x90, 0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x90, // ................
	0x03, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0xe3, 0x03, 0x00, 0x00, 0xc7, // ................
	0x03, 0x00, 0x00, 0x50, 0x03, 0x00, 0x00, 0x8f, 0x03, 0x00, 0x00, 0x64, 0x03, 0x00, 0x00, 0xf9, // ...P.......d....
	0x00, 0x02, 0x00, 0x91, 0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x91, 0x03, 0x00, 0x00, 0x80, // ................
	0x00, 0x05, 0x00, 0x52, 0x00, 0x00, 0x00, 0x93, 0x03, 0x00, 0x00, 0xc6, 0x03, 0x00, 0x00, 0x53, // ...R...........S
	0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x44, 0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x94, // .......D........
	0x03, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0xce, 0x03, 0x00, 0x00, 0xd4, // ................
	0x03, 0x00, 0x00, 0x44, 0x03, 0x00, 0x00, 0xc7, 0x03, 0x00, 0x00, 0x4e, 0x03, 0x00, 0x00, 0xf5, // ...D.......N....
	0x00, 0x07, 0x00, 0xb2, 0x00, 0x00, 0x00, 0xc9, 0x03, 0x00, 0x00, 0x0c, 0x02, 0x00, 0x00, 0x44, // ...............D
	0x03, 0x00, 0x00, 0x0f, 0x02, 0x00, 0x00, 0x4e, 0x03, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x96, // .......N........
	0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0xc9, 0x03, 0x00, 0x00, 0x98, // ................
	0x03, 0x00, 0x00, 0x96, 0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x96, 0x03, 0x00, 0x00, 0xf9, // ................
	0x00, 0x02, 0x00, 0x98, 0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x98, 0x03, 0x00, 0x00, 0xf5, // ................
	0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0xcd, 0x03, 0x00, 0x00, 0xce, 0x03, 0x00, 0x00, 0x94, // ................
	0x03, 0x00, 0x00, 0xc7, 0x03, 0x00, 0x00, 0x96, 0x03, 0x00, 0x00, 0x4f, 0x00, 0x08, 0x00, 0x33, // ...........O...3
	0x00, 0x00, 0x00, 0xa8, 0x02, 0x00, 0x00, 0xdd, 0x03, 0x00, 0x00, 0xdd, 0x03, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x8e, 0x00, 0x05, 0x00, 0x33, // ...............3
	0x00, 0x00, 0x00, 0xa9, 0x02, 0x00, 0x00, 0xa8, 0x02, 0x00, 0x00, 0xcd, 0x03, 0x00, 0x00, 0x51, // ...............Q
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xab, 0x02, 0x00, 0x00, 0xa9, 0x02, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x52, 0x00, 0x06, 0x00, 0x0d, 0x00, 0x00, 0x00, 0xa9, 0x03, 0x00, 0x00, 0xab, // ...R............
	0x02, 0x00, 0x00, 0xdd, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, // ...........Q....
	0x00, 0x00, 0x00, 0xad, 0x02, 0x00, 0x00, 0xa9, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x52, // ...............R
	0x00, 0x06, 0x00, 0x0d, 0x00, 0x00, 0x00, 0xab, 0x03, 0x00, 0x00, 0xad, 0x02, 0x00, 0x00, 0xa9, // ................
	0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xaf, // .......Q........
	0x02, 0x00, 0x00, 0xa9, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x52, 0x00, 0x06, 0x00, 0x0d, // ...........R....
	0x00, 0x00, 0x00, 0xad, 0x03, 0x00, 0x00, 0xaf, 0x02, 0x00, 0x00, 0xab, 0x03, 0x00, 0x00, 0x02, // ................
	0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0xb0, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xb0, // ................
	0x02, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x0d, 0x00, 0x00, 0x00, 0xe0, 0x03, 0x00, 0x00, 0xdd, // ................
	0x03, 0x00, 0x00, 0x94, 0x02, 0x00, 0x00, 0xad, 0x03, 0x00, 0x00, 0x98, 0x03, 0x00, 0x00, 0x41, // ...............A
	0x00, 0x06, 0x00, 0xbd, 0x00, 0x00, 0x00, 0xb1, 0x02, 0x00, 0x00, 0xba, 0x00, 0x00, 0x00, 0x30, // ...............0
	0x01, 0x00, 0x00, 0xbc, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0xb2, // .......=........
	0x02, 0x00, 0x00, 0xb1, 0x02, 0x00, 0x00, 0xb4, 0x00, 0x05, 0x00, 0xb2, 0x00, 0x00, 0x00, 0xb3, // ................
	0x02, 0x00, 0x00, 0xb2, 0x02, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0xd0, // ................
	0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0xb3, 0x02, 0x00, 0x00, 0xb4, // ................
	0x02, 0x00, 0x00, 0xbe, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xb4, 0x02, 0x00, 0x00, 0x51, // ...............Q
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xb8, 0x02, 0x00, 0x00, 0xe0, 0x03, 0x00, 0x00, 0x03, // ................
	0x00, 0x00, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x07, 0x00, 0x00, 0x00, 0xb9, 0x02, 0x00, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x2b, 0x00, 0x00, 0x00, 0xb8, 0x02, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x75, // ...+...........u
	0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xba, 0x02, 0x00, 0x00, 0xe0, // ...Q............
	0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xbb, // .......Q........
	0x02, 0x00, 0x00, 0xe0, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, // ...........Q....
	0x00, 0x00, 0x00, 0xbc, 0x02, 0x00, 0x00, 0xe0, 0x03, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x50, // ...............P
	0x00, 0x07, 0x00, 0x0d, 0x00, 0x00, 0x00, 0xbd, 0x02, 0x00, 0x00, 0xba, 0x02, 0x00, 0x00, 0xbb, // ................
	0x02, 0x00, 0x00, 0xbc, 0x02, 0x00, 0x00, 0xb9, 0x02, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0xd0, // ................
	0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xbe, 0x02, 0x00, 0x00, 0x4f, 0x00, 0x08, 0x00, 0x33, // ...........O...3
	0x00, 0x00, 0x00, 0xc0, 0x02, 0x00, 0x00, 0xe0, 0x03, 0x00, 0x00, 0xe0, 0x03, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0xbd, // ...........A....
	0x00, 0x00, 0x00, 0xc1, 0x02, 0x00, 0x00, 0xba, 0x00, 0x00, 0x00, 0x21, 0x01, 0x00, 0x00, 0xf7, // ...........!....
	0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0xc2, 0x02, 0x00, 0x00, 0xc1, // ...=............
	0x02, 0x00, 0x00, 0x7f, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0xc3, 0x02, 0x00, 0x00, 0xc2, // ................
	0x02, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xc5, 0x02, 0x00, 0x00, 0xe0, // ...Q............
	0x03, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xc6, // ................
	0x02, 0x00, 0x00, 0xc3, 0x02, 0x00, 0x00, 0xc5, 0x02, 0x00, 0x00, 0x8e, 0x00, 0x05, 0x00, 0x33, // ...............3
	0x00, 0x00, 0x00, 0xc7, 0x02, 0x00, 0x00, 0xc0, 0x02, 0x00, 0x00, 0xc6, 0x02, 0x00, 0x00, 0x41, // ...............A
	0x00, 0x06, 0x00, 0xbd, 0x00, 0x00, 0x00, 0xc8, 0x02, 0x00, 0x00, 0xba, 0x00, 0x00, 0x00, 0x21, // ...............!
	0x01, 0x00, 0x00, 0xf7, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0xc9, // .......=........
	0x02, 0x00, 0x00, 0xc8, 0x02, 0x00, 0x00, 0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xca, // ................
	0x02, 0x00, 0x00, 0x75, 0x00, 0x00, 0x00, 0xc9, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x07, // ...u............
	0x00, 0x00, 0x00, 0xcb, 0x02, 0x00, 0x00, 0xca, 0x02, 0x00, 0x00, 0x75, 0x00, 0x00, 0x00, 0x51, // ...........u...Q
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xcc, 0x02, 0x00, 0x00, 0xc7, 0x02, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xcd, 0x02, 0x00, 0x00, 0xc7, // ...Q............
	0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xce, // .......Q........
	0x02, 0x00, 0x00, 0xc7, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x50, 0x00, 0x07, 0x00, 0x0d, // ...........P....
	0x00, 0x00, 0x00, 0xcf, 0x02, 0x00, 0x00, 0xcc, 0x02, 0x00, 0x00, 0xcd, 0x02, 0x00, 0x00, 0xce, // ................
	0x02, 0x00, 0x00, 0xcb, 0x02, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0xd0, 0x02, 0x00, 0x00, 0xf8, // ................
	0x00, 0x02, 0x00, 0xd0, 0x02, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x0d, 0x00, 0x00, 0x00, 0xe2, // ................
	0x03, 0x00, 0x00, 0xbd, 0x02, 0x00, 0x00, 0xb4, 0x02, 0x00, 0x00, 0xcf, 0x02, 0x00, 0x00, 0xbe, // ................
	0x02, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0xd1, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xd1, // ................
	0x02, 0x00, 0x00, 0xf5, 0x00, 0x09, 0x00, 0x0d, 0x00, 0x00, 0x00, 0xe1, 0x03, 0x00, 0x00, 0x80, // ................
	0x00, 0x00, 0x00, 0x46, 0x02, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x56, 0x02, 0x00, 0x00, 0xe2, // ...F.......V....
	0x03, 0x00, 0x00, 0xd0, 0x02, 0x00, 0x00, 0x3e, 0x00, 0x03, 0x00, 0xf6, 0x01, 0x00, 0x00, 0xe1, // .......>........
	0x03, 0x00, 0x00, 0xfd, 0x00, 0x01, 0x00, 0x38, 0x00, 0x01, 0x00, 0x00, 0x00, 0xc0, 0x00,       // .......8.......
};
static const bgfx::EmbeddedShader fs_flasher_clip = BGFX_EMBEDDED_SHADER(fs_flasher_clip);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Build of vertex shader from vs_flasher.sc to vs_flasher_noclip with options: NOCLIP
static const uint8_t vs_flasher_noclip_mtl[859] =
{
	0x56, 0x53, 0x48, 0x0b, 0x00, 0x00, 0x00, 0x00, 0xe2, 0xbc, 0x2a, 0x7e, 0x01, 0x00, 0x10, 0x6d, // VSH.......*~...m
	0x61, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x04, // atWorldViewProj.
	0x01, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x26, 0x03, 0x00, 0x00, 0x23, 0x69, 0x6e, // .........&...#in
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x64, // clude <metal_std
	0x6c, 0x69, 0x62, 0x3e, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x73, // lib>.#include <s
	0x69, 0x6d, 0x64, 0x2f, 0x73, 0x69, 0x6d, 0x64, 0x2e, 0x68, 0x3e, 0x0a, 0x0a, 0x75, 0x73, 0x69, // imd/simd.h>..usi
	0x6e, 0x67, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x6d, 0x65, 0x74, // ng namespace met
	0x61, 0x6c, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x5f, 0x47, 0x6c, 0x6f, // al;..struct _Glo
	0x62, 0x61, 0x6c, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, // bal.{.    float4
	0x78, 0x34, 0x20, 0x6d, 0x61, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x56, 0x69, 0x65, 0x77, 0x50, // x4 matWorldViewP
	0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, // roj;.};..struct 
	0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x0a, // xlatMtlMain_out.
	0x7b, 0x0a, 0x09, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x6d, 0x65, // {..float bgfx_me
	0x74, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x20, 0x5b, 0x5b, // tal_pointSize [[
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5d, 0x5d, 0x20, 0x3d, 0x20, 0x31, // point_size]] = 1
	0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x65, 0x6e, // ;.    float3 _en
	0x74, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, // tryPointOutput_v
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x20, 0x5b, 0x5b, 0x75, 0x73, 0x65, 0x72, // _tablePos [[user
	0x28, 0x6c, 0x6f, 0x63, 0x6e, 0x30, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, // (locn0)]];.    f
	0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, // loat2 _entryPoin
	0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, // tOutput_v_texcoo
	0x72, 0x64, 0x30, 0x20, 0x5b, 0x5b, 0x75, 0x73, 0x65, 0x72, 0x28, 0x6c, 0x6f, 0x63, 0x6e, 0x31, // rd0 [[user(locn1
	0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, // )]];.    float4 
	0x67, 0x6c, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x5b, 0x5b, 0x70, 0x6f, // gl_Position [[po
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, // sition]];.};..st
	0x72, 0x75, 0x63, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, // ruct xlatMtlMain
	0x5f, 0x69, 0x6e, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, // _in.{.    float3
	0x20, 0x61, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x5b, 0x5b, 0x61, 0x74, //  a_position [[at
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x20, 0x20, // tribute(0)]];.  
	0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x61, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, //   float2 a_texco
	0x6f, 0x72, 0x64, 0x30, 0x20, 0x5b, 0x5b, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, // ord0 [[attribute
	0x28, 0x31, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x76, 0x65, 0x72, 0x74, 0x65, // (1)]];.};..verte
	0x78, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, // x xlatMtlMain_ou
	0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x28, 0x78, 0x6c, // t xlatMtlMain(xl
	0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x20, 0x69, 0x6e, 0x20, // atMtlMain_in in 
	0x5b, 0x5b, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x5d, 0x5d, 0x2c, 0x20, 0x63, 0x6f, // [[stage_in]], co
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x20, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x26, 0x20, // nstant _Global& 
	0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x20, 0x5b, 0x5b, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x28, // _mtl_u [[buffer(
	0x30, 0x29, 0x5d, 0x5d, 0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x78, 0x6c, 0x61, 0x74, // 0)]]).{.    xlat
	0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x6f, 0x75, 0x74, 0x20, // MtlMain_out out 
	0x3d, 0x20, 0x7b, 0x7d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x6f, 0x75, 0x74, 0x2e, 0x67, 0x6c, // = {};.    out.gl
	0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x5f, 0x6d, 0x74, 0x6c, // _Position = _mtl
	0x5f, 0x75, 0x2e, 0x6d, 0x61, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x56, 0x69, 0x65, 0x77, 0x50, // _u.matWorldViewP
	0x72, 0x6f, 0x6a, 0x20, 0x2a, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x69, 0x6e, 0x2e, // roj * float4(in.
	0x61, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, // a_position, 1.0)
	0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x6f, 0x75, 0x74, 0x2e, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, // ;.    out._entry
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x5f, 0x74, 0x61, // PointOutput_v_ta
	0x62, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x20, 0x3d, 0x20, 0x69, 0x6e, 0x2e, 0x61, 0x5f, 0x70, 0x6f, // blePos = in.a_po
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x6f, 0x75, 0x74, 0x2e, // sition;.    out.
	0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, // _entryPointOutpu
	0x74, 0x5f, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x3d, 0x20, // t_v_texcoord0 = 
	0x69, 0x6e, 0x2e, 0x61, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x3b, 0x0a, // in.a_texcoord0;.
	0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6f, 0x75, 0x74, 0x3b, 0x0a, //     return out;.
	0x7d, 0x0a, 0x0a, 0x00, 0x02, 0x01, 0x00, 0x10, 0x00, 0x40, 0x00,                               // }........@.
};
static const uint8_t vs_flasher_noclip_essl[6340] =
{
	0x56, 0x53, 0x48, 0x0b, 0x00, 0x00, 0x00, 0x00, 0xe2, 0xbc, 0x2a, 0x7e, 0x00, 0x00, 0xb1, 0x18, // VSH.......*~....
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x33, 0x32, 0x30, 0x20, 0x65, // ..#version 320 e
	0x73, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, // s.#define attrib
	0x75, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x76, // ute in.#define v
	0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x75, 0x74, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, // arying out.preci
	0x73, 0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // sion highp float
	0x3b, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, // ;.precision high
	0x70, 0x20, 0x69, 0x6e, 0x74, 0x3b, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x73, // p int;.#define s
	0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // hadow2D(_sampler
	0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // , _coord) textur
	0x65, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, // e(_sampler, _coo
	0x72, 0x64, 0x29, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x73, 0x68, 0x61, 0x64, // rd).#define shad
	0x6f, 0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // ow2DProj(_sample
	0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, // r, _coord) textu
	0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, // reProj(_sampler,
	0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, //  _coord).attribu
	0x74, 0x65, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x61, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, // te vec3 a_positi
	0x6f, 0x6e, 0x3b, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x76, 0x65, // on;.attribute ve
	0x63, 0x32, 0x20, 0x61, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x3b, 0x0a, // c2 a_texcoord0;.
	0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x5f, 0x74, // varying vec3 v_t
	0x61, 0x62, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x3b, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, // ablePos;.varying
	0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, //  vec2 v_texcoord
	0x30, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, // 0;.vec3 instMul(
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x20, // vec3 _vec, mat3 
	0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // _mtx) { return (
	0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, //  (_vec) * (_mtx)
	0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, //  ); }.vec3 instM
	0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, // ul(mat3 _mtx, ve
	0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, // c3 _vec) { retur
	0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, // n ( (_mtx) * (_v
	0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, // ec) ); }.vec4 in
	0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, // stMul(vec4 _vec,
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, //  mat4 _mtx) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, // turn ( (_vec) * 
	0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, // (_mtx) ); }.vec4
	0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, //  instMul(mat4 _m
	0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, // tx, vec4 _vec) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, //  return ( (_mtx)
	0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, //  * (_vec) ); }.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, 0x70, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, // loat rcp(float _
	0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x2f, // a) { return 1.0/
	0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, // _a; }.vec2 rcp(v
	0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // ec2 _a) { return
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, //  vec2(1.0)/_a; }
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, // .vec3 rcp(vec3 _
	0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, // a) { return vec3
	0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, // (1.0)/_a; }.vec4
	0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, //  rcp(vec4 _a) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x31, 0x2e, 0x30, 0x29, // return vec4(1.0)
	0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x65, 0x63, 0x32, // /_a; }.vec2 vec2
	0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, // _splat(float _x)
	0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, //  { return vec2(_
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, // x, _x); }.vec3 v
	0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // ec3_splat(float 
	0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, // _x) { return vec
	0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, // 3(_x, _x, _x); }
	0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, // .vec4 vec4_splat
	0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // (float _x) { ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, // urn vec4(_x, _x,
	0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, //  _x, _x); }.uvec
	0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, // 2 uvec2_splat(ui
	0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // nt _x) { return 
	0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, // uvec2(_x, _x); }
	0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, // .uvec3 uvec3_spl
	0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // at(uint _x) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, // turn uvec3(_x, _
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x34, 0x20, // x, _x); }.uvec4 
	0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, // uvec4_splat(uint
	0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, //  _x) { return uv
	0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, // ec4(_x, _x, _x, 
	0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, // _x); }.mat4 mtxF
	0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, // romRows(vec4 _0,
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, //  vec4 _1, vec4 _
	0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // 2, vec4 _3).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, // turn transpose(m
	0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, // at4(_0, _1, _2, 
	0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, // _3) );.}.mat4 mt
	0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, // xFromCols(vec4 _
	0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // 0, vec4 _1, vec4
	0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, //  _2, vec4 _3).{.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, // return mat4(_0, 
	0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, // _1, _2, _3);.}.m
	0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, // at3 mtxFromRows(
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, // vec3 _0, vec3 _1
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // , vec3 _2).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, // urn transpose(ma
	0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x20, 0x29, // t3(_0, _1, _2) )
	0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, // ;.}.mat3 mtxFrom
	0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, // Cols(vec3 _0, ve
	0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, // c3 _1, vec3 _2).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, // {.return mat3(_0
	0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, // , _1, _2);.}.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, // form vec4 u_view
	0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, // Rect;.uniform ve
	0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x54, 0x65, 0x78, 0x65, 0x6c, 0x3b, 0x0a, // c4 u_viewTexel;.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, // uniform mat4 u_v
	0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, // iew;.uniform mat
	0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, // 4 u_invView;.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x70, 0x72, 0x6f, 0x6a, // form mat4 u_proj
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, // ;.uniform mat4 u
	0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // _invProj;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, // m mat4 u_viewPro
	0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, // j;.uniform mat4 
	0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, // u_invViewProj;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, // niform mat4 u_mo
	0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // del[32];.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, //  mat4 u_modelVie
	0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, // w;.uniform mat4 
	0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, // u_modelViewProj;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, // .uniform vec4 u_
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x66, 0x34, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // alphaRef4;.float
	0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, //  sqr( float v).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // .return v*v;.}.v
	0x65, 0x63, 0x32, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x29, // ec2 sqr( vec2 v)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, // .{.return v*v;.}
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // .vec3 sqr( vec3 
	0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, // v).{.return v*v;
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6d, 0x75, 0x6c, 0x5f, 0x77, 0x31, 0x28, 0x20, // .}.vec3 mul_w1( 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x29, 0x0a, // vec3 v, mat4 m).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2e, 0x78, 0x2a, 0x6d, 0x5b, 0x30, // {.return v.x*m[0
	0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x79, 0x2a, 0x6d, 0x5b, 0x31, // ].xyz + (v.y*m[1
	0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x7a, 0x2a, 0x6d, 0x5b, 0x32, // ].xyz + (v.z*m[2
	0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x6d, 0x5b, 0x33, 0x5d, 0x2e, 0x78, 0x79, 0x7a, // ].xyz + m[3].xyz
	0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x63, 0x6f, 0x73, // ));.}.float acos
	0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x20, 0x66, // _approx_divPI( f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // loat v).{.float 
	0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, // x = abs(v);.if(1
	0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, // . - x <= 0.00006
	0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // 103515625).retur
	0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, // n (v >= 0.) ? 0.
	0x20, 0x3a, 0x20, 0x31, 0x2e, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, //  : 1.;.float res
	0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, //  = ((-0.155972/3
	0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, // .141592653589793
	0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, // 2384626433832795
	0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, // ) * x + (1.56467
	0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, // /3.1415926535897
	0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, // 9323846264338327
	0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, // 95) ) * sqrt(1. 
	0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, // - x);.return (v 
	0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x31, // >= 0.) ? res : 1
	0x2e, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // . - res;.}.float
	0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, //  atan2_approx_di
	0x76, 0x32, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x79, 0x2c, 0x20, 0x66, // v2PI( float y, f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // loat x).{.float 
	0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x79, 0x29, 0x3b, 0x0a, // abs_y = abs(y);.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, // float abs_x = ab
	0x73, 0x28, 0x78, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3c, // s(x);.if(abs_x <
	0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, // = 0.000061035156
	0x32, 0x35, 0x20, 0x26, 0x26, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3c, 0x3d, 0x20, 0x30, // 25 && abs_y <= 0
	0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, // .00006103515625)
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x30, 0x2e, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // .return 0.;.floa
	0x74, 0x20, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2d, 0x20, 0x61, // t r = (abs_x - a
	0x62, 0x73, 0x5f, 0x79, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2b, // bs_y) / (abs_x +
	0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, //  abs_y);.float a
	0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, // ngle = ((x < 0.)
	0x20, 0x3f, 0x20, 0x28, 0x33, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x20, 0x3a, 0x20, 0x28, 0x31, 0x2e, //  ? (3./8.) : (1.
	0x2f, 0x38, 0x2e, 0x29, 0x29, 0x0a, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x32, 0x31, 0x31, 0x38, 0x36, // /8.)).+ (0.21186
	0x38, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, // 8 /(2.*3.1415926
	0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, // 5358979323846264
	0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x72, 0x20, 0x2a, 0x20, // 33832795) * r * 
	0x72, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x39, 0x38, 0x37, 0x33, 0x30, 0x35, 0x20, 0x2f, 0x28, 0x32, // r - 0.987305 /(2
	0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, // .*3.141592653589
	0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, // 7932384626433832
	0x37, 0x39, 0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, // 795)) * ((x < 0.
	0x29, 0x20, 0x3f, 0x20, 0x2d, 0x72, 0x20, 0x3a, 0x20, 0x72, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, // ) ? -r : r);.ret
	0x75, 0x72, 0x6e, 0x20, 0x28, 0x79, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, // urn (y < 0.) ? -
	0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3a, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x3b, 0x0a, 0x7d, // angle : angle;.}
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x73, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x72, // .float asin_appr
	0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // ox_divPI( float 
	0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, // v).{.float x = a
	0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, // bs(v);.if(1. - x
	0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, //  <= 0.0000610351
	0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, // 5625).return (v 
	0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x3a, 0x20, 0x2d, // >= 0.) ? 0.5 : -
	0x30, 0x2e, 0x35, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, // 0.5;.float res =
	0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, //  ((-0.155972/3.1
	0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, // 4159265358979323
	0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, // 84626433832795) 
	0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, // * x + (1.56467/3
	0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, // .141592653589793
	0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, // 2384626433832795
	0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, // ) ) * sqrt(1. - 
	0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, // x);.return (v >=
	0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, //  0.) ? 0.5 - res
	0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, //  : -0.5 + res;.}
	0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x61, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x71, 0x75, // .vec2 ray_to_equ
	0x69, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x75, 0x76, 0x28, // irectangular_uv(
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x61, 0x79, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, //  vec3 ray).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x0a, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, // urn vec2(.0.5 + 
	0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, // atan2_approx_div
	0x32, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x79, 0x2c, 0x20, 0x72, 0x61, 0x79, 0x2e, 0x78, // 2PI(ray.y, ray.x
	0x29, 0x2c, 0x0a, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, // ),.acos_approx_d
	0x69, 0x76, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // ivPI(ray.z));.}.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x20, 0x66, // float InvsRGB( f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, // loat color).{.if
	0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, //  (color <= 0.040
	0x34, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // 45).return color
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x29, 0x3b, 0x0a, //  * (1.0/12.92);.
	0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, // else.return pow(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, // color * (1.0/1.0
	0x35, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x2f, 0x31, 0x2e, 0x30, // 55) + (0.055/1.0
	0x35, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // 55), 2.4);.}.flo
	0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x20, 0x66, 0x6c, // at InvRec709( fl
	0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, // oat color).{.if 
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x38, 0x31, 0x29, // (color <= 0.081)
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, // .return color * 
	0x28, 0x31, 0x2e, 0x30, 0x2f, 0x34, 0x2e, 0x35, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, // (1.0/4.5);.else.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // return pow(color
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, 0x20, 0x2b, //  * (1.0/1.099) +
	0x20, 0x28, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, 0x2c, 0x20, //  (0.099/1.099), 
	0x31, 0x2e, 0x30, 0x2f, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // 1.0/0.45);.}.flo
	0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x66, 0x6c, 0x6f, // at InvGamma( flo
	0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, // at color).{.retu
	0x72, 0x6e, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // rn InvsRGB(color
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, // );.}.vec3 InvGam
	0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, // ma( vec3 color).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x49, 0x6e, // {.return vec3(In
	0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, // vGamma(color.x),
	0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, // InvGamma(color.y
	0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // ),InvGamma(color
	0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, // .z));.}.vec3 Inv
	0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, // ToneMap( vec3 co
	0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x69, 0x6e, 0x76, // lor).{.float inv
	0x5f, 0x32, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x30, 0x2e, 0x35, 0x2f, 0x30, 0x2e, 0x32, 0x35, 0x3b, // _2bh = 0.5/0.25;
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x34, 0x2e, 0x30, 0x2a, // .float bh = 4.0*
	0x30, 0x2e, 0x32, 0x35, 0x20, 0x2d, 0x20, 0x32, 0x2e, 0x30, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // 0.25 - 2.0;.retu
	0x72, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, // rn (color - 1.0 
	0x2b, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2a, 0x28, 0x63, 0x6f, // + sqrt(color*(co
	0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x20, 0x62, 0x68, 0x29, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, // lor + bh) + 1.0)
	0x29, 0x2a, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // )*inv_2bh;.}.flo
	0x61, 0x74, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, // at sRGB( float f
	0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, // ).{.float s;.if 
	0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x33, 0x31, 0x33, 0x30, 0x38, 0x29, // (f <= 0.0031308)
	0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, // .s = 12.92 * f;.
	0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x20, 0x2a, // else.s = 1.055 *
	0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x34, 0x29, //  pow(f, 1.0/2.4)
	0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, //  - 0.055;.return
	0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x52, 0x65, 0x63, 0x37, //  s;.}.float Rec7
	0x30, 0x39, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, // 09( float f).{.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, // loat s;.if (f <=
	0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x34, 0x2e, 0x35, 0x20, //  0.018).s = 4.5 
	0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, // * f;.else.s = 1.
	0x30, 0x39, 0x39, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x34, // 099 * pow(f, 0.4
	0x35, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // 5) - 0.099;.retu
	0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, // rn s;.}.float FB
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, // Gamma( float col
	0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x52, 0x47, // or).{.return sRG
	0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, // B(color);.}.vec2
	0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, //  FBGamma( vec2 c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // olor).{.return v
	0x65, 0x63, 0x32, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // ec2(FBGamma(colo
	0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, // r.x),FBGamma(col
	0x6f, 0x72, 0x2e, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, // or.y));.}.vec3 F
	0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, // BGamma( vec3 col
	0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, // or).{.return vec
	0x33, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, // 3(FBGamma(color.
	0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // x),FBGamma(color
	0x2e, 0x79, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // .y),FBGamma(colo
	0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, // r.z));.}.vec3 FB
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x32, 0x32, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, // Gamma22( vec3 co
	0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, // lor).{.return ve
	0x63, 0x33, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x2c, 0x20, // c3(pow(color.x, 
	0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, // 1.0/2.2),pow(col
	0x6f, 0x72, 0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, // or.y, 1.0/2.2),p
	0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, // ow(color.z, 1.0/
	0x32, 0x2e, 0x32, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, // 2.2));.}.float F
	0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // BToneMap( float 
	0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6c, 0x20, 0x2a, 0x20, // l).{.return l * 
	0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, // ((l*0.25 + 1.0) 
	0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // / (l + 1.0));.}.
	0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, // vec2 FBToneMap( 
	0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, // vec2 color).{.fl
	0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // oat l = dot(colo
	0x72, 0x2c, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2b, // r,vec2(0.176204+
	0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x2c, 0x30, 0x2e, // 0.0108109*0.5,0.
	0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, // 812985+0.0108109
	0x2a, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, // *0.5));.return c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, // olor * ((l*0.25 
	0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, // + 1.0) / (l + 1.
	0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x54, 0x6f, // 0));.}.vec3 FBTo
	0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // neMap( vec3 colo
	0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, // r).{.float l = d
	0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, // ot(color,vec3(0.
	0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2c, // 176204,0.812985,
	0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, // 0.0108109));.ret
	0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, // urn color * ((l*
	0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, // 0.25 + 1.0) / (l
	0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, //  + 1.0));.}.vec4
	0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, //  Additive( vec4 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, // cBase, vec4 cBle
	0x6e, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, // nd, float percen
	0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, // t).{.return cBas
	0x65, 0x20, 0x2b, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, // e + cBlend*perce
	0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, // nt;.}.vec3 Scree
	0x6e, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, // n ( vec3 cBase, 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, // vec3 cBlend).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, // eturn 1.0 - (1.0
	0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, //  - cBase) * (1.0
	0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, //  - cBlend);.}.ve
	0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, // c4 Screen ( vec4
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, //  cBase, vec4 cBl
	0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, // end).{.return 1.
	0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, // 0 - (1.0 - cBase
	0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // ) * (1.0 - cBlen
	0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, // d);.}.vec3 Scree
	0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, // nHDR ( vec3 cBas
	0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, // e, vec3 cBlend).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, // {.return max(1.0
	0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, //  - (1.0 - cBase)
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, //  * (1.0 - cBlend
	0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, // ), vec3(0.,0.,0.
	0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, // ));.}.vec4 Scree
	0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, // nHDR ( vec4 cBas
	0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, // e, vec4 cBlend).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, // {.return max(1.0
	0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, //  - (1.0 - cBase)
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, //  * (1.0 - cBlend
	0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, // ), vec4(0.,0.,0.
	0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4d, 0x75, // ,0.));.}.vec4 Mu
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // ltiply ( vec4 cB
	0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, // ase, vec4 cBlend
	0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, // , float percent)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, // .{.return cBase 
	0x2a, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, // * cBlend*percent
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, // ;.}.vec4 Overlay
	0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, //  ( vec4 cBase, v
	0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, // ec4 cBlend).{.ve
	0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, // c4 cNew = step(0
	0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, // .5, cBase);.cNew
	0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, //  = mix(cBase*cBl
	0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, // end*2.0, 1.0-2.0
	0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, // *(1.0-cBase)*(1.
	0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, // 0-cBlend), cNew)
	0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, // ;.return cNew;.}
	0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x48, 0x44, 0x52, // .vec4 OverlayHDR
	0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, //  ( vec4 cBase, v
	0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, // ec4 cBlend).{.ve
	0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, // c4 cNew = step(0
	0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, // .5, cBase);.cNew
	0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, //  = max(mix(cBase
	0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, // *cBlend*2.0, 1.0
	0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, // -2.0*(1.0-cBase)
	0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, // *(1.0-cBlend), c
	0x4e, 0x65, 0x77, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, // New), vec4(0.,0.
	0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // ,0.,0.));.return
	0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, //  cNew;.}.vec3 co
	0x73, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x5f, 0x73, 0x61, 0x6d, // s_hemisphere_sam
	0x70, 0x6c, 0x65, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x66, // ple( vec2 t).{.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x68, 0x69, 0x20, 0x3d, 0x20, 0x74, 0x2e, 0x79, 0x20, 0x2a, // loat phi = t.y *
	0x20, 0x28, 0x32, 0x2e, 0x30, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, //  (2.0*3.14159265
	0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, // 3589793238462643
	0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // 3832795);.float 
	0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, // cosTheta = sqrt(
	0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // 1.0 - t.x);.floa
	0x74, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, // t sinTheta = sqr
	0x74, 0x28, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x70, // t(t.x);.float sp
	0x2c, 0x63, 0x70, 0x3b, 0x0a, 0x7b, 0x73, 0x70, 0x3d, 0x73, 0x69, 0x6e, 0x28, 0x70, 0x68, 0x69, // ,cp;.{sp=sin(phi
	0x29, 0x3b, 0x63, 0x70, 0x3d, 0x63, 0x6f, 0x73, 0x28, 0x70, 0x68, 0x69, 0x29, 0x3b, 0x7d, 0x3b, // );cp=cos(phi);};
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x63, 0x70, 0x20, // .return vec3(cp 
	0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x63, 0x6f, 0x73, 0x54, // * sinTheta, cosT
	0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x73, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, // heta, sp * sinTh
	0x65, 0x74, 0x61, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x6f, 0x74, // eta);.}.vec3 rot
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x70, // ate_to_vector_up
	0x70, 0x65, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x76, // per( vec3 vec, v
	0x65, 0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, // ec3 normal).{.if
	0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x3e, 0x20, 0x2d, 0x30, 0x2e, 0x39, // (normal.y > -0.9
	0x39, 0x39, 0x39, 0x39, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x20, // 9999).{.float h 
	0x3d, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x28, 0x31, 0x2e, 0x30, 0x2b, 0x6e, 0x6f, 0x72, 0x6d, 0x61, // = 1.0/(1.0+norma
	0x6c, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x20, 0x3d, // l.y);.float hz =
	0x20, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, //  h*normal.z;.flo
	0x61, 0x74, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x3d, 0x20, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, // at hzx = hz*norm
	0x61, 0x6c, 0x2e, 0x78, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, // al.x;.return vec
	0x33, 0x28, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, // 3(.vec.x * (norm
	0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, // al.y+hz*normal.z
	0x29, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, // ) + vec.y * norm
	0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x68, // al.x - vec.z * h
	0x7a, 0x78, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, // zx,.vec.y * norm
	0x61, 0x6c, 0x2e, 0x79, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x6e, // al.y - vec.x * n
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, // ormal.x - vec.z 
	0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, // * normal.z,.vec.
	0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x20, 0x2d, 0x20, 0x76, // y * normal.z - v
	0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, // ec.x * hzx + vec
	0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, // .z * (normal.y+h
	0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, // *normal.x*normal
	0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x72, 0x65, 0x74, // .x));.}.else ret
	0x75, 0x72, 0x6e, 0x20, 0x2d, 0x76, 0x65, 0x63, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, // urn -vec;.}.unif
	0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x61, 0x74, 0x57, 0x6f, 0x72, 0x6c, // orm mat4 matWorl
	0x64, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, // dViewProj;.void 
	0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, // main().{.v_table
	0x50, 0x6f, 0x73, 0x20, 0x3d, 0x20, 0x61, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, // Pos = a_position
	0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, // .xyz;.v_texcoord
	0x30, 0x20, 0x3d, 0x20, 0x61, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x3b, // 0 = a_texcoord0;
	0x0a, 0x67, 0x6c, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x28, // .gl_Position = (
	0x20, 0x28, 0x6d, 0x61, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, //  (matWorldViewPr
	0x6f, 0x6a, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x61, 0x5f, 0x70, 0x6f, // oj) * (vec4(a_po
	0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x20, 0x29, 0x3b, // sition, 1.0)) );
	0x0a, 0x7d, 0x0a, 0x00,                                                                         // .}..
};
static const uint8_t vs_flasher_noclip_glsl[6684] =
{
	0x56, 0x53, 0x48, 0x0b, 0x00, 0x00, 0x00, 0x00, 0xe2, 0xbc, 0x2a, 0x7e, 0x00, 0x00, 0x09, 0x1a, // VSH.......*~....
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x34, 0x34, 0x30, 0x0a, 0x23, // ..#version 440.#
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, // define texture2D
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, //           textur
	0x65, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // e.#define textur
	0x65, 0x32, 0x44, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, // e2DLod       tex
	0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, // tureLod.#define 
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, 0x20, // texture2DGrad   
	0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, //    textureGrad.#
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, // define texture2D
	0x50, 0x72, 0x6f, 0x6a, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // ProjLod   textur
	0x65, 0x50, 0x72, 0x6f, 0x6a, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, // eProjLod.#define
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, //  texture2DProjGr
	0x61, 0x64, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x47, // ad  textureProjG
	0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, // rad.#define text
	0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, // ureCubeLod     t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, // extureLod.#defin
	0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x47, 0x72, 0x61, // e textureCubeGra
	0x64, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x47, 0x72, 0x61, 0x64, // d    textureGrad
	0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // .#define texture
	0x33, 0x44, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, // 3D          text
	0x75, 0x72, 0x65, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, // ure.#define text
	0x75, 0x72, 0x65, 0x32, 0x44, 0x4c, 0x6f, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x20, 0x74, // ure2DLodOffset t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x0a, // extureLodOffset.
	0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, // #define attribut
	0x65, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x76, 0x61, 0x72, // e in.#define var
	0x79, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x75, 0x74, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, // ying out.#define
	0x20, 0x62, 0x67, 0x66, 0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x28, 0x5f, 0x73, //  bgfxShadow2D(_s
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, // ampler, _coord) 
	0x20, 0x20, 0x20, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x74, //     vec4_splat(t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, // exture(_sampler,
	0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x29, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, //  _coord) ).#defi
	0x6e, 0x65, 0x20, 0x62, 0x67, 0x66, 0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x50, // ne bgfxShadow2DP
	0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, // roj(_sampler, _c
	0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, // oord) vec4_splat
	0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, // (textureProj(_sa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x29, // mpler, _coord) )
	0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // .attribute vec3 
	0x61, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x0a, 0x61, 0x74, 0x74, 0x72, // a_position;.attr
	0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x61, 0x5f, 0x74, 0x65, 0x78, // ibute vec2 a_tex
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x3b, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, // coord0;.varying 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x3b, // vec3 v_tablePos;
	0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x5f, // .varying vec2 v_
	0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // texcoord0;.vec3 
	0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, // instMul(vec3 _ve
	0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, // c, mat3 _mtx) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, // return ( (_vec) 
	0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, // * (_mtx) ); }.ve
	0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x20, // c3 instMul(mat3 
	0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, // _mtx, vec3 _vec)
	0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, //  { return ( (_mt
	0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, // x) * (_vec) ); }
	0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, // .vec4 instMul(ve
	0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, // c4 _vec, mat4 _m
	0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, // tx) { return ( (
	0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, // _vec) * (_mtx) )
	0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, // ; }.vec4 instMul
	0x28, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // (mat4 _mtx, vec4
	0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, //  _vec) { return 
	0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, // ( (_mtx) * (_vec
	0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, 0x70, // ) ); }.float rcp
	0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // (float _a) { ret
	0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, // urn 1.0/_a; }.ve
	0x63, 0x32, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, 0x20, // c2 rcp(vec2 _a) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2e, // { return vec2(1.
	0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, // 0)/_a; }.vec3 rc
	0x70, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // p(vec3 _a) { ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, // urn vec3(1.0)/_a
	0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, // ; }.vec4 rcp(vec
	0x34, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // 4 _a) { return v
	0x65, 0x63, 0x34, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, // ec4(1.0)/_a; }.v
	0x65, 0x63, 0x32, 0x20, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, // ec2 vec2_splat(f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, // loat _x) { retur
	0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, // n vec2(_x, _x); 
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, // }.vec3 vec3_spla
	0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // t(float _x) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, // turn vec3(_x, _x
	0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, 0x65, // , _x); }.vec4 ve
	0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, // c4_splat(float _
	0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, // x) { return vec4
	0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, // (_x, _x, _x, _x)
	0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x5f, // ; }.uvec2 uvec2_
	0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, // splat(uint _x) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, //  return uvec2(_x
	0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, 0x75, // , _x); }.uvec3 u
	0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, // vec3_splat(uint 
	0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, // _x) { return uve
	0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, // c3(_x, _x, _x); 
	0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, // }.uvec4 uvec4_sp
	0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, // lat(uint _x) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, // eturn uvec4(_x, 
	0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x6d, // _x, _x, _x); }.m
	0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, // at4 mtxFromRows(
	0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, // vec4 _0, vec4 _1
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // , vec4 _2, vec4 
	0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, // _3).{.return tra
	0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, // nspose(mat4(_0, 
	0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, // _1, _2, _3) );.}
	0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, // .mat4 mtxFromCol
	0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // s(vec4 _0, vec4 
	0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, // _1, vec4 _2, vec
	0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, // 4 _3).{.return m
	0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, // at4(_0, _1, _2, 
	0x5f, 0x33, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, // _3);.}.mat3 mtxF
	0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, // romRows(vec3 _0,
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, //  vec3 _1, vec3 _
	0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, // 2).{.return tran
	0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, // spose(mat3(_0, _
	0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, // 1, _2) );.}.mat3
	0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, //  mtxFromCols(vec
	0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, // 3 _0, vec3 _1, v
	0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // ec3 _2).{.return
	0x20, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, //  mat3(_0, _1, _2
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, // );.}.uniform vec
	0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, 0x6e, // 4 u_viewRect;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, // iform vec4 u_vie
	0x77, 0x54, 0x65, 0x78, 0x65, 0x6c, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // wTexel;.uniform 
	0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, // mat4 u_view;.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, // form mat4 u_invV
	0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, // iew;.uniform mat
	0x34, 0x20, 0x75, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // 4 u_proj;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, 0x6a, // m mat4 u_invProj
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, // ;.uniform mat4 u
	0x5f, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, // _viewProj;.unifo
	0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, // rm mat4 u_invVie
	0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, // wProj;.uniform m
	0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, 0x3b, // at4 u_model[32];
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, // .uniform mat4 u_
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, // modelView;.unifo
	0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, // rm mat4 u_modelV
	0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // iewProj;.uniform
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x66, //  vec4 u_alphaRef
	0x34, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x66, 0x6c, // 4;.float sqr( fl
	0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // oat v).{.return 
	0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x73, 0x71, 0x72, 0x28, // v*v;.}.vec2 sqr(
	0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, //  vec2 v).{.retur
	0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x73, 0x71, // n v*v;.}.vec3 sq
	0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // r( vec3 v).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // urn v*v;.}.vec3 
	0x6d, 0x75, 0x6c, 0x5f, 0x77, 0x31, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x2c, 0x20, // mul_w1( vec3 v, 
	0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // mat4 m).{.return
	0x20, 0x76, 0x2e, 0x78, 0x2a, 0x6d, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, //  v.x*m[0].xyz + 
	0x28, 0x76, 0x2e, 0x79, 0x2a, 0x6d, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, // (v.y*m[1].xyz + 
	0x28, 0x76, 0x2e, 0x7a, 0x2a, 0x6d, 0x5b, 0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, // (v.z*m[2].xyz + 
	0x6d, 0x5b, 0x33, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, // m[3].xyz));.}.fl
	0x6f, 0x61, 0x74, 0x20, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, // oat acos_approx_
	0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, // divPI( float v).
	0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, // {.float x = abs(
	0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, // v);.if(1. - x <=
	0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, //  0.0000610351562
	0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, // 5).return (v >= 
	0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x3b, 0x0a, 0x66, // 0.) ? 0. : 1.;.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, // loat res = ((-0.
	0x31, 0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, // 155972/3.1415926
	0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, // 5358979323846264
	0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, // 33832795) * x + 
	0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, // (1.56467/3.14159
	0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, // 2653589793238462
	0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, // 6433832795) ) * 
	0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, // sqrt(1. - x);.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, // turn (v >= 0.) ?
	0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x3b, //  res : 1. - res;
	0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, // .}.float atan2_a
	0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, // pprox_div2PI( fl
	0x6f, 0x61, 0x74, 0x20, 0x79, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x29, 0x0a, // oat y, float x).
	0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3d, 0x20, // {.float abs_y = 
	0x61, 0x62, 0x73, 0x28, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, // abs(y);.float ab
	0x73, 0x5f, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x78, 0x29, 0x3b, 0x0a, 0x69, 0x66, // s_x = abs(x);.if
	0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, // (abs_x <= 0.0000
	0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x20, 0x26, 0x26, 0x20, 0x61, 0x62, // 6103515625 && ab
	0x73, 0x5f, 0x79, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, // s_y <= 0.0000610
	0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // 3515625).return 
	0x30, 0x2e, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x61, // 0.;.float r = (a
	0x62, 0x73, 0x5f, 0x78, 0x20, 0x2d, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x20, 0x2f, 0x20, // bs_x - abs_y) / 
	0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2b, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x3b, // (abs_x + abs_y);
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3d, 0x20, 0x28, // .float angle = (
	0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x28, 0x33, 0x2e, 0x2f, 0x38, // (x < 0.) ? (3./8
	0x2e, 0x29, 0x20, 0x3a, 0x20, 0x28, 0x31, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x29, 0x0a, 0x2b, 0x20, // .) : (1./8.)).+ 
	0x28, 0x30, 0x2e, 0x32, 0x31, 0x31, 0x38, 0x36, 0x38, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, // (0.211868 /(2.*3
	0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, // .141592653589793
	0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, // 2384626433832795
	0x29, 0x20, 0x2a, 0x20, 0x72, 0x20, 0x2a, 0x20, 0x72, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x39, 0x38, // ) * r * r - 0.98
	0x37, 0x33, 0x30, 0x35, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, // 7305 /(2.*3.1415
	0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, // 9265358979323846
	0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, // 26433832795)) * 
	0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x72, 0x20, 0x3a, // ((x < 0.) ? -r :
	0x20, 0x72, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x79, 0x20, 0x3c, //  r);.return (y <
	0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3a, 0x20, //  0.) ? -angle : 
	0x61, 0x6e, 0x67, 0x6c, 0x65, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, // angle;.}.float a
	0x73, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, // sin_approx_divPI
	0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, // ( float v).{.flo
	0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, // at x = abs(v);.i
	0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, // f(1. - x <= 0.00
	0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, // 006103515625).re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, // turn (v >= 0.) ?
	0x20, 0x30, 0x2e, 0x35, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, //  0.5 : -0.5;.flo
	0x61, 0x74, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, // at res = ((-0.15
	0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, // 5972/3.141592653
	0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, // 5897932384626433
	0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, // 832795) * x + (1
	0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, // .56467/3.1415926
	0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, // 5358979323846264
	0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, // 33832795) ) * sq
	0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // rt(1. - x);.retu
	0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, // rn (v >= 0.) ? 0
	0x2e, 0x35, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x20, // .5 - res : -0.5 
	0x2b, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x61, // + res;.}.vec2 ra
	0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, // y_to_equirectang
	0x75, 0x6c, 0x61, 0x72, 0x5f, 0x75, 0x76, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x61, // ular_uv( vec3 ra
	0x79, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, // y).{.return vec2
	0x28, 0x0a, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, // (.0.5 + atan2_ap
	0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, // prox_div2PI(ray.
	0x79, 0x2c, 0x20, 0x72, 0x61, 0x79, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x61, 0x63, 0x6f, 0x73, 0x5f, // y, ray.x),.acos_
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, // approx_divPI(ray
	0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, // .z));.}.float In
	0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, // vsRGB( float col
	0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, // or).{.if (color 
	0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, 0x34, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, // <= 0.04045).retu
	0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, // rn color * (1.0/
	0x31, 0x32, 0x2e, 0x39, 0x32, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, // 12.92);.else.ret
	0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, // urn pow(color * 
	0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, // (1.0/1.055) + (0
	0x2e, 0x30, 0x35, 0x35, 0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, 0x34, // .055/1.055), 2.4
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x52, 0x65, // );.}.float InvRe
	0x63, 0x37, 0x30, 0x39, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // c709( float colo
	0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, // r).{.if (color <
	0x3d, 0x20, 0x30, 0x2e, 0x30, 0x38, 0x31, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // = 0.081).return 
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x34, 0x2e, 0x35, // color * (1.0/4.5
	0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, // );.else.return p
	0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, // ow(color * (1.0/
	0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x2f, // 1.099) + (0.099/
	0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x30, 0x2e, 0x34, 0x35, // 1.099), 1.0/0.45
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, // );.}.float InvGa
	0x6d, 0x6d, 0x61, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // mma( float color
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, // ).{.return InvsR
	0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // GB(color);.}.vec
	0x33, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, // 3 InvGamma( vec3
	0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, //  color).{.return
	0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, //  vec3(InvGamma(c
	0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, // olor.x),InvGamma
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, // (color.y),InvGam
	0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // ma(color.z));.}.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, // vec3 InvToneMap(
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, //  vec3 color).{.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x30, // loat inv_2bh = 0
	0x2e, 0x35, 0x2f, 0x30, 0x2e, 0x32, 0x35, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, // .5/0.25;.float b
	0x68, 0x20, 0x3d, 0x20, 0x34, 0x2e, 0x30, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2d, 0x20, 0x32, // h = 4.0*0.25 - 2
	0x2e, 0x30, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // .0;.return (colo
	0x72, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2b, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x63, // r - 1.0 + sqrt(c
	0x6f, 0x6c, 0x6f, 0x72, 0x2a, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x20, 0x62, 0x68, // olor*(color + bh
	0x29, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x2a, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, // ) + 1.0))*inv_2b
	0x68, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, // h;.}.float sRGB(
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, //  float f).{.floa
	0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, // t s;.if (f <= 0.
	0x30, 0x30, 0x33, 0x31, 0x33, 0x30, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, // 0031308).s = 12.
	0x39, 0x32, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, // 92 * f;.else.s =
	0x20, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, //  1.055 * pow(f, 
	0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x34, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, // 1.0/2.4) - 0.055
	0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, // ;.return s;.}.fl
	0x6f, 0x61, 0x74, 0x20, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, // oat Rec709( floa
	0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, // t f).{.float s;.
	0x69, 0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, 0x29, 0x0a, // if (f <= 0.018).
	0x73, 0x20, 0x3d, 0x20, 0x34, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, // s = 4.5 * f;.els
	0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x20, 0x2a, 0x20, 0x70, 0x6f, // e.s = 1.099 * po
	0x77, 0x28, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, // w(f, 0.45) - 0.0
	0x39, 0x39, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, // 99;.return s;.}.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x66, // float FBGamma( f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // loat color).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, // turn sRGB(color)
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, // ;.}.vec2 FBGamma
	0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, // ( vec2 color).{.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x46, 0x42, 0x47, 0x61, // return vec2(FBGa
	0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, // mma(color.x),FBG
	0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x29, 0x3b, 0x0a, // amma(color.y));.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, // }.vec3 FBGamma( 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // vec3 color).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, // turn vec3(FBGamm
	0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, // a(color.x),FBGam
	0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, // ma(color.y),FBGa
	0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, // mma(color.z));.}
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x32, 0x32, 0x28, // .vec3 FBGamma22(
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, //  vec3 color).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, // eturn vec3(pow(c
	0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, // olor.x, 1.0/2.2)
	0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, // ,pow(color.y, 1.
	0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // 0/2.2),pow(color
	0x2e, 0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x29, 0x3b, 0x0a, 0x7d, // .z, 1.0/2.2));.}
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, // .float FBToneMap
	0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // ( float l).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x6c, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, // urn l * ((l*0.25
	0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, //  + 1.0) / (l + 1
	0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x54, // .0));.}.vec2 FBT
	0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, // oneMap( vec2 col
	0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, // or).{.float l = 
	0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, // dot(color,vec2(0
	0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, // .176204+0.010810
	0x39, 0x2a, 0x30, 0x2e, 0x35, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2b, 0x30, // 9*0.5,0.812985+0
	0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x3b, 0x0a, // .0108109*0.5));.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, // return color * (
	0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, // (l*0.25 + 1.0) /
	0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, //  (l + 1.0));.}.v
	0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, // ec3 FBToneMap( v
	0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, // ec3 color).{.flo
	0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // at l = dot(color
	0x2c, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2c, 0x30, // ,vec3(0.176204,0
	0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2c, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, // .812985,0.010810
	0x39, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // 9));.return colo
	0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, // r * ((l*0.25 + 1
	0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, // .0) / (l + 1.0))
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, // ;.}.vec4 Additiv
	0x65, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, // e( vec4 cBase, v
	0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, // ec4 cBlend, floa
	0x74, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // t percent).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2b, 0x20, 0x63, 0x42, 0x6c, 0x65, // urn cBase + cBle
	0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // nd*percent;.}.ve
	0x63, 0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, // c3 Screen ( vec3
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, //  cBase, vec3 cBl
	0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, // end).{.return 1.
	0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, // 0 - (1.0 - cBase
	0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // ) * (1.0 - cBlen
	0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, // d);.}.vec4 Scree
	0x6e, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, // n ( vec4 cBase, 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, // vec4 cBlend).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, // eturn 1.0 - (1.0
	0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, //  - cBase) * (1.0
	0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, //  - cBlend);.}.ve
	0x63, 0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, // c3 ScreenHDR ( v
	0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // ec3 cBase, vec3 
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // cBlend).{.return
	0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, //  max(1.0 - (1.0 
	0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, // - cBase) * (1.0 
	0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, // - cBlend), vec3(
	0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // 0.,0.,0.));.}.ve
	0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, // c4 ScreenHDR ( v
	0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // ec4 cBase, vec4 
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // cBlend).{.return
	0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, //  max(1.0 - (1.0 
	0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, // - cBase) * (1.0 
	0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, // - cBlend), vec4(
	0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, // 0.,0.,0.,0.));.}
	0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x20, 0x28, // .vec4 Multiply (
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, //  vec4 cBase, vec
	0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // 4 cBlend, float 
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // percent).{.retur
	0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2a, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, // n cBase * cBlend
	0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, // *percent;.}.vec4
	0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, //  Overlay ( vec4 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, // cBase, vec4 cBle
	0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, // nd).{.vec4 cNew 
	0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, // = step(0.5, cBas
	0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x63, // e);.cNew = mix(c
	0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, // Base*cBlend*2.0,
	0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, //  1.0-2.0*(1.0-cB
	0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, // ase)*(1.0-cBlend
	0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // ), cNew);.return
	0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, //  cNew;.}.vec4 Ov
	0x65, 0x72, 0x6c, 0x61, 0x79, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // erlayHDR ( vec4 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, // cBase, vec4 cBle
	0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, // nd).{.vec4 cNew 
	0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, // = step(0.5, cBas
	0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x6d, // e);.cNew = max(m
	0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, // ix(cBase*cBlend*
	0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, // 2.0, 1.0-2.0*(1.
	0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, // 0-cBase)*(1.0-cB
	0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x2c, 0x20, 0x76, 0x65, // lend), cNew), ve
	0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, // c4(0.,0.,0.,0.))
	0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, // ;.return cNew;.}
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x73, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, // .vec3 cos_hemisp
	0x68, 0x65, 0x72, 0x65, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x20, 0x76, 0x65, 0x63, // here_sample( vec
	0x32, 0x20, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x68, 0x69, // 2 t).{.float phi
	0x20, 0x3d, 0x20, 0x74, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x28, 0x32, 0x2e, 0x30, 0x2a, 0x33, 0x2e, //  = t.y * (2.0*3.
	0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, // 1415926535897932
	0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, // 384626433832795)
	0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, // ;.float cosTheta
	0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x74, 0x2e, //  = sqrt(1.0 - t.
	0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, // x);.float sinThe
	0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, // ta = sqrt(t.x);.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x70, 0x2c, 0x63, 0x70, 0x3b, 0x0a, 0x7b, 0x73, 0x70, // float sp,cp;.{sp
	0x3d, 0x73, 0x69, 0x6e, 0x28, 0x70, 0x68, 0x69, 0x29, 0x3b, 0x63, 0x70, 0x3d, 0x63, 0x6f, 0x73, // =sin(phi);cp=cos
	0x28, 0x70, 0x68, 0x69, 0x29, 0x3b, 0x7d, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // (phi);};.return 
	0x76, 0x65, 0x63, 0x33, 0x28, 0x63, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, // vec3(cp * sinThe
	0x74, 0x61, 0x2c, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x73, 0x70, // ta, cosTheta, sp
	0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, //  * sinTheta);.}.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x76, // vec3 rotate_to_v
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, // ector_upper( vec
	0x33, 0x20, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, // 3 vec, vec3 norm
	0x61, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, // al).{.if(normal.
	0x79, 0x20, 0x3e, 0x20, 0x2d, 0x30, 0x2e, 0x39, 0x39, 0x39, 0x39, 0x39, 0x29, 0x0a, 0x7b, 0x0a, // y > -0.99999).{.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x28, 0x31, // float h = 1.0/(1
	0x2e, 0x30, 0x2b, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, // .0+normal.y);.fl
	0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x20, 0x3d, 0x20, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, // oat hz = h*norma
	0x6c, 0x2e, 0x7a, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x3d, // l.z;.float hzx =
	0x20, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x3b, 0x0a, 0x72, 0x65, //  hz*normal.x;.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x78, // turn vec3(.vec.x
	0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x7a, 0x2a, //  * (normal.y+hz*
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x29, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, // normal.z) + vec.
	0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, // y * normal.x - v
	0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, // ec.z * hzx,.vec.
	0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x2d, 0x20, 0x76, // y * normal.y - v
	0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, // ec.x * normal.x 
	0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, // - vec.z * normal
	0x2e, 0x7a, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, // .z,.vec.y * norm
	0x61, 0x6c, 0x2e, 0x7a, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x68, // al.z - vec.x * h
	0x7a, 0x78, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, // zx + vec.z * (no
	0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, // rmal.y+h*normal.
	0x78, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // x*normal.x));.}.
	0x65, 0x6c, 0x73, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x2d, 0x76, 0x65, 0x63, // else return -vec
	0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, // ;.}.uniform mat4
	0x20, 0x6d, 0x61, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, //  matWorldViewPro
	0x6a, 0x3b, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, // j;.void main().{
	0x0a, 0x76, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x20, 0x3d, 0x20, 0x61, 0x5f, // .v_tablePos = a_
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x76, 0x5f, // position.xyz;.v_
	0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x3d, 0x20, 0x61, 0x5f, 0x74, 0x65, // texcoord0 = a_te
	0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x3b, 0x0a, 0x67, 0x6c, 0x5f, 0x50, 0x6f, 0x73, 0x69, // xcoord0;.gl_Posi
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x28, 0x20, 0x28, 0x6d, 0x61, 0x74, 0x57, 0x6f, 0x72, // tion = ( (matWor
	0x6c, 0x64, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x76, // ldViewProj) * (v
	0x65, 0x63, 0x34, 0x28, 0x61, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, // ec4(a_position, 
	0x31, 0x2e, 0x30, 0x29, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x00,                         // 1.0)) );.}..
};
static const uint8_t vs_flasher_noclip_dx11[589] =
{
	0x56, 0x53, 0x48, 0x0b, 0x00, 0x00, 0x00, 0x00, 0xe2, 0xbc, 0x2a, 0x7e, 0x01, 0x00, 0x10, 0x6d, // VSH.......*~...m
	0x61, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x04, // atWorldViewProj.
	0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x02, 0x00, 0x00, 0x44, 0x58, 0x42, // .............DXB
	0x43, 0xb4, 0x27, 0x22, 0x0f, 0x0d, 0xec, 0xf0, 0xf7, 0x56, 0xf3, 0xae, 0x82, 0xc9, 0x8b, 0x17, // C.'".....V......
	0x9b, 0x01, 0x00, 0x00, 0x00, 0x18, 0x02, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x2c, 0x00, 0x00, // .............,..
	0x00, 0x80, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x4e, 0x4c, 0x00, 0x00, // .........ISGNL..
	0x00, 0x02, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .........8......
	0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x07, 0x00, // ................
	0x00, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, // .A..............
	0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, // .........POSITIO
	0x4e, 0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0xab, 0xab, 0x4f, 0x53, 0x47, // N.TEXCOORD...OSG
	0x4e, 0x68, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, // Nh...........P..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x0f, 0x00, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x07, 0x08, 0x00, 0x00, 0x5c, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, // ................
	0x00, 0x03, 0x0c, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, // .....SV_POSITION
	0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0xab, 0xab, 0xab, 0x53, 0x48, 0x45, // .TEXCOORD....SHE
	0x58, 0x20, 0x01, 0x00, 0x00, 0x50, 0x00, 0x01, 0x00, 0x48, 0x00, 0x00, 0x00, 0x6a, 0x08, 0x00, // X ...P...H...j..
	0x01, 0x59, 0x00, 0x00, 0x04, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, // .Y...F. ........
	0x00, 0x5f, 0x00, 0x00, 0x03, 0x72, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5f, 0x00, 0x00, // ._...r......._..
	0x03, 0x32, 0x10, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x67, 0x00, 0x00, 0x04, 0xf2, 0x20, 0x10, // .2.......g.... .
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x03, 0x72, 0x20, 0x10, // .........e...r .
	0x00, 0x01, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x03, 0x32, 0x20, 0x10, 0x00, 0x02, 0x00, 0x00, // .....e...2 .....
	0x00, 0x68, 0x00, 0x00, 0x02, 0x01, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x08, 0xf2, 0x00, 0x10, // .h.......8......
	0x00, 0x00, 0x00, 0x00, 0x00, 0x56, 0x15, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, // .....V.......F. 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x0a, 0xf2, 0x00, 0x10, // .........2......
	0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .....F. ........
	0x00, 0x06, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, // .........F......
	0x00, 0x32, 0x00, 0x00, 0x0a, 0xf2, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, // .2...........F. 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xa6, 0x1a, 0x10, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0xf2, 0x20, 0x10, // .F............ .
	0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, // .....F.......F. 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x72, 0x20, 0x10, // .........6...r .
	0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x12, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, // .....F.......6..
	0x05, 0x32, 0x20, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x10, 0x10, 0x00, 0x01, 0x00, 0x00, // .2 ......F......
	0x00, 0x3e, 0x00, 0x00, 0x01, 0x00, 0x02, 0x01, 0x00, 0x10, 0x00, 0x40, 0x00,                   // .>.........@.
};
static const uint8_t vs_flasher_noclip_spv[1205] =
{
	0x56, 0x53, 0x48, 0x0b, 0x00, 0x00, 0x00, 0x00, 0xe2, 0xbc, 0x2a, 0x7e, 0x01, 0x00, 0x10, 0x6d, // VSH.......*~...m
	0x61, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x04, // atWorldViewProj.
	0x01, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x04, 0x00, 0x00, 0x03, 0x02, 0x23, // ...............#
	0x07, 0x00, 0x00, 0x01, 0x00, 0x0b, 0x00, 0x08, 0x00, 0x71, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .........q......
	0x00, 0x11, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x06, 0x00, 0x01, 0x00, 0x00, // ................
	0x00, 0x47, 0x4c, 0x53, 0x4c, 0x2e, 0x73, 0x74, 0x64, 0x2e, 0x34, 0x35, 0x30, 0x00, 0x00, 0x00, // .GLSL.std.450...
	0x00, 0x0e, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x0a, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, // .........main...
	0x00, 0x36, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00, 0x47, 0x00, 0x00, // .6...:...C...G..
	0x00, 0x4b, 0x00, 0x00, 0x00, 0x03, 0x00, 0x03, 0x00, 0x05, 0x00, 0x00, 0x00, 0xf4, 0x01, 0x00, // .K..............
	0x00, 0x05, 0x00, 0x04, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, // .........main...
	0x00, 0x05, 0x00, 0x06, 0x00, 0x28, 0x00, 0x00, 0x00, 0x55, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // .....(...Uniform
	0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x08, 0x00, 0x28, 0x00, 0x00, // Block........(..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x56, 0x69, 0x65, // .....matWorldVie
	0x77, 0x50, 0x72, 0x6f, 0x6a, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x03, 0x00, 0x2a, 0x00, 0x00, // wProj........*..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x05, 0x00, 0x36, 0x00, 0x00, 0x00, 0x61, 0x5f, 0x70, // .........6...a_p
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x00, 0x00, 0x05, 0x00, 0x05, 0x00, 0x3a, 0x00, 0x00, // osition......:..
	0x00, 0x61, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x00, 0x05, 0x00, 0x0a, // .a_texcoord0....
	0x00, 0x43, 0x00, 0x00, 0x00, 0x40, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, // .C...@entryPoint
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x67, 0x6c, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, // Output.gl_Positi
	0x6f, 0x6e, 0x00, 0x00, 0x00, 0x05, 0x00, 0x0a, 0x00, 0x47, 0x00, 0x00, 0x00, 0x40, 0x65, 0x6e, // on.......G...@en
	0x74, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x76, // tryPointOutput.v
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x0a, // _tablePos.......
	0x00, 0x4b, 0x00, 0x00, 0x00, 0x40, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, // .K...@entryPoint
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, // Output.v_texcoor
	0x64, 0x30, 0x00, 0x00, 0x00, 0x48, 0x00, 0x04, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // d0...H...(......
	0x00, 0x04, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .....H...(......
	0x00, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0x28, 0x00, 0x00, // .#.......H...(..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x47, 0x00, 0x03, // .............G..
	0x00, 0x28, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x2a, 0x00, 0x00, // .(.......G...*..
	0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x2a, 0x00, 0x00, // .".......G...*..
	0x00, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x36, 0x00, 0x00, // .!.......G...6..
	0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x3a, 0x00, 0x00, // .........G...:..
	0x00, 0x1e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x43, 0x00, 0x00, // .........G...C..
	0x00, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x47, 0x00, 0x00, // .........G...G..
	0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x4b, 0x00, 0x00, // .........G...K..
	0x00, 0x1e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x13, 0x00, 0x02, 0x00, 0x02, 0x00, 0x00, // ................
	0x00, 0x21, 0x00, 0x03, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x16, 0x00, 0x03, // .!..............
	0x00, 0x06, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, // ..... ..........
	0x00, 0x06, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x09, 0x00, 0x00, // ................
	0x00, 0x06, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x0b, 0x00, 0x00, // ................
	0x00, 0x06, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x15, 0x00, 0x04, 0x00, 0x14, 0x00, 0x00, // ................
	0x00, 0x20, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x14, 0x00, 0x00, // . .......+......
	0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, // . .......+......
	0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x18, 0x00, 0x04, 0x00, 0x27, 0x00, 0x00, // ."......?....'..
	0x00, 0x0b, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x03, 0x00, 0x28, 0x00, 0x00, // .............(..
	0x00, 0x27, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x29, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, // .'... ...)......
	0x00, 0x28, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x29, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, // .(...;...)...*..
	0x00, 0x02, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x2b, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, // ..... ...+......
	0x00, 0x27, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x35, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, // .'... ...5......
	0x00, 0x07, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x35, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, // .....;...5...6..
	0x00, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x39, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, // ..... ...9......
	0x00, 0x09, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x39, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x00, // .....;...9...:..
	0x00, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x42, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, // ..... ...B......
	0x00, 0x0b, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x42, 0x00, 0x00, 0x00, 0x43, 0x00, 0x00, // .....;...B...C..
	0x00, 0x03, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x46, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, // ..... ...F......
	0x00, 0x07, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x46, 0x00, 0x00, 0x00, 0x47, 0x00, 0x00, // .....;...F...G..
	0x00, 0x03, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x4a, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, // ..... ...J......
	0x00, 0x09, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x4a, 0x00, 0x00, 0x00, 0x4b, 0x00, 0x00, // .....;...J...K..
	0x00, 0x03, 0x00, 0x00, 0x00, 0x36, 0x00, 0x05, 0x00, 0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, // .....6..........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x05, 0x00, 0x00, // ................
	0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, // .=.......7...6..
	0x00, 0x3d, 0x00, 0x04, 0x00, 0x09, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x00, // .=.......;...:..
	0x00, 0x51, 0x00, 0x05, 0x00, 0x06, 0x00, 0x00, 0x00, 0x6a, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, // .Q.......j...7..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x06, 0x00, 0x00, 0x00, 0x6b, 0x00, 0x00, // .....Q.......k..
	0x00, 0x37, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x06, 0x00, 0x00, // .7.......Q......
	0x00, 0x6c, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x50, 0x00, 0x07, // .l...7.......P..
	0x00, 0x0b, 0x00, 0x00, 0x00, 0x6d, 0x00, 0x00, 0x00, 0x6a, 0x00, 0x00, 0x00, 0x6b, 0x00, 0x00, // .....m...j...k..
	0x00, 0x6c, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x41, 0x00, 0x05, 0x00, 0x2b, 0x00, 0x00, // .l..."...A...+..
	0x00, 0x6e, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, // .n...*... ...=..
	0x00, 0x27, 0x00, 0x00, 0x00, 0x6f, 0x00, 0x00, 0x00, 0x6e, 0x00, 0x00, 0x00, 0x90, 0x00, 0x05, // .'...o...n......
	0x00, 0x0b, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x6d, 0x00, 0x00, 0x00, 0x6f, 0x00, 0x00, // .....p...m...o..
	0x00, 0x3e, 0x00, 0x03, 0x00, 0x43, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x03, // .>...C...p...>..
	0x00, 0x47, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x03, 0x00, 0x4b, 0x00, 0x00, // .G...7...>...K..
	0x00, 0x3b, 0x00, 0x00, 0x00, 0xfd, 0x00, 0x01, 0x00, 0x38, 0x00, 0x01, 0x00, 0x00, 0x02, 0x01, // .;.......8......
	0x00, 0x10, 0x00, 0x40, 0x00,                                                                   // ...@.
};
static const bgfx::EmbeddedShader vs_flasher_noclip = BGFX_EMBEDDED_SHADER(vs_flasher_noclip);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Build of vertex shader from vs_flasher.sc to vs_flasher_noclip_st with options: STEREO NOCLIP
static const uint8_t vs_flasher_noclip_st_mtl[1007] =
{
	0x56, 0x53, 0x48, 0x0b, 0x00, 0x00, 0x00, 0x00, 0xe2, 0xbc, 0x2a, 0x7e, 0x01, 0x00, 0x10, 0x6d, // VSH.......*~...m
	0x61, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x04, // atWorldViewProj.
	0x02, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb8, 0x03, 0x00, 0x00, 0x23, 0x69, 0x6e, // .............#in
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x64, // clude <metal_std
	0x6c, 0x69, 0x62, 0x3e, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x73, // lib>.#include <s
	0x69, 0x6d, 0x64, 0x2f, 0x73, 0x69, 0x6d, 0x64, 0x2e, 0x68, 0x3e, 0x0a, 0x0a, 0x75, 0x73, 0x69, // imd/simd.h>..usi
	0x6e, 0x67, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x6d, 0x65, 0x74, // ng namespace met
	0x61, 0x6c, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x5f, 0x47, 0x6c, 0x6f, // al;..struct _Glo
	0x62, 0x61, 0x6c, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, // bal.{.    float4
	0x78, 0x34, 0x20, 0x6d, 0x61, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x56, 0x69, 0x65, 0x77, 0x50, // x4 matWorldViewP
	0x72, 0x6f, 0x6a, 0x5b, 0x32, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, // roj[2];.};..stru
	0x63, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, // ct xlatMtlMain_o
	0x75, 0x74, 0x0a, 0x7b, 0x0a, 0x09, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x67, 0x66, 0x78, // ut.{..float bgfx
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x69, 0x7a, 0x65, // _metal_pointSize
	0x20, 0x5b, 0x5b, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5d, 0x5d, 0x20, //  [[point_size]] 
	0x3d, 0x20, 0x31, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, // = 1;.    float3 
	0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, // _entryPointOutpu
	0x74, 0x5f, 0x76, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x20, 0x5b, 0x5b, 0x75, // t_v_tablePos [[u
	0x73, 0x65, 0x72, 0x28, 0x6c, 0x6f, 0x63, 0x6e, 0x30, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x20, 0x20, // ser(locn0)]];.  
	0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x50, //   float2 _entryP
	0x6f, 0x69, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x5f, 0x74, 0x65, 0x78, // ointOutput_v_tex
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x5b, 0x5b, 0x75, 0x73, 0x65, 0x72, 0x28, 0x6c, 0x6f, // coord0 [[user(lo
	0x63, 0x6e, 0x31, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, // cn1)]];.    floa
	0x74, 0x34, 0x20, 0x67, 0x6c, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x5b, // t4 gl_Position [
	0x5b, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5d, 0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, // [position]];.   
	0x20, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x67, 0x6c, 0x5f, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x20, 0x5b, //  uint gl_Layer [
	0x5b, 0x72, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x61, // [render_target_a
	0x72, 0x72, 0x61, 0x79, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, // rray_index]];.};
	0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, // ..struct xlatMtl
	0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, // Main_in.{.    fl
	0x6f, 0x61, 0x74, 0x33, 0x20, 0x61, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, // oat3 a_position 
	0x5b, 0x5b, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x28, 0x30, 0x29, 0x5d, 0x5d, // [[attribute(0)]]
	0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x61, 0x5f, 0x74, // ;.    float2 a_t
	0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x5b, 0x5b, 0x61, 0x74, 0x74, 0x72, 0x69, // excoord0 [[attri
	0x62, 0x75, 0x74, 0x65, 0x28, 0x31, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x76, // bute(1)]];.};..v
	0x65, 0x72, 0x74, 0x65, 0x78, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, // ertex xlatMtlMai
	0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, // n_out xlatMtlMai
	0x6e, 0x28, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, // n(xlatMtlMain_in
	0x20, 0x69, 0x6e, 0x20, 0x5b, 0x5b, 0x73, 0x74, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x6e, 0x5d, 0x5d, //  in [[stage_in]]
	0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x20, 0x5f, 0x47, 0x6c, 0x6f, 0x62, // , constant _Glob
	0x61, 0x6c, 0x26, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x20, 0x5b, 0x5b, 0x62, 0x75, 0x66, // al& _mtl_u [[buf
	0x66, 0x65, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x67, // fer(0)]], uint g
	0x6c, 0x5f, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x20, // l_InstanceIndex 
	0x5b, 0x5b, 0x69, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x5d, 0x5d, 0x29, // [[instance_id]])
	0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, // .{.    xlatMtlMa
	0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x6f, 0x75, 0x74, 0x20, 0x3d, 0x20, 0x7b, 0x7d, 0x3b, // in_out out = {};
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x6f, 0x75, 0x74, 0x2e, 0x67, 0x6c, 0x5f, 0x50, 0x6f, 0x73, 0x69, // .    out.gl_Posi
	0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x6d, 0x61, // tion = _mtl_u.ma
	0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x5b, 0x67, // tWorldViewProj[g
	0x6c, 0x5f, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x5d, // l_InstanceIndex]
	0x20, 0x2a, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x69, 0x6e, 0x2e, 0x61, 0x5f, 0x70, //  * float4(in.a_p
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, // osition, 1.0);. 
	0x20, 0x20, 0x20, 0x6f, 0x75, 0x74, 0x2e, 0x5f, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x69, //    out._entryPoi
	0x6e, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, // ntOutput_v_table
	0x50, 0x6f, 0x73, 0x20, 0x3d, 0x20, 0x69, 0x6e, 0x2e, 0x61, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, // Pos = in.a_posit
	0x69, 0x6f, 0x6e, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x6f, 0x75, 0x74, 0x2e, 0x5f, 0x65, 0x6e, // ion;.    out._en
	0x74, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x76, // tryPointOutput_v
	0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x3d, 0x20, 0x69, 0x6e, 0x2e, // _texcoord0 = in.
	0x61, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x3b, 0x0a, 0x20, 0x20, 0x20, // a_texcoord0;.   
	0x20, 0x6f, 0x75, 0x74, 0x2e, 0x67, 0x6c, 0x5f, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x20, 0x3d, 0x20, //  out.gl_Layer = 
	0x67, 0x6c, 0x5f, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x6e, 0x64, 0x65, 0x78, // gl_InstanceIndex
	0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6f, 0x75, 0x74, // ;.    return out
	0x3b, 0x0a, 0x7d, 0x0a, 0x0a, 0x00, 0x03, 0x01, 0x00, 0x10, 0x00, 0xff, 0xff, 0x80, 0x00,       // ;.}............
};
static const uint8_t vs_flasher_noclip_st_essl[6384] =
{
	0x56, 0x53, 0x48, 0x0b, 0x00, 0x00, 0x00, 0x00, 0xe2, 0xbc, 0x2a, 0x7e, 0x00, 0x00, 0xdd, 0x18, // VSH.......*~....
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x33, 0x32, 0x30, 0x20, 0x65, // ..#version 320 e
	0x73, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, // s.#define attrib
	0x75, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x76, // ute in.#define v
	0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x75, 0x74, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, // arying out.preci
	0x73, 0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // sion highp float
	0x3b, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, // ;.precision high
	0x70, 0x20, 0x69, 0x6e, 0x74, 0x3b, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x73, // p int;.#define s
	0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // hadow2D(_sampler
	0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // , _coord) textur
	0x65, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, // e(_sampler, _coo
	0x72, 0x64, 0x29, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x73, 0x68, 0x61, 0x64, // rd).#define shad
	0x6f, 0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // ow2DProj(_sample
	0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, // r, _coord) textu
	0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, // reProj(_sampler,
	0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, //  _coord).attribu
	0x74, 0x65, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x61, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, // te vec3 a_positi
	0x6f, 0x6e, 0x3b, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x76, 0x65, // on;.attribute ve
	0x63, 0x32, 0x20, 0x61, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x3b, 0x0a, // c2 a_texcoord0;.
	0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x5f, 0x74, // varying vec3 v_t
	0x61, 0x62, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x3b, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, // ablePos;.varying
	0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, //  vec2 v_texcoord
	0x30, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, // 0;.vec3 instMul(
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x20, // vec3 _vec, mat3 
	0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // _mtx) { return (
	0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, //  (_vec) * (_mtx)
	0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, //  ); }.vec3 instM
	0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, // ul(mat3 _mtx, ve
	0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, // c3 _vec) { retur
	0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, // n ( (_mtx) * (_v
	0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, // ec) ); }.vec4 in
	0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, // stMul(vec4 _vec,
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, //  mat4 _mtx) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, // turn ( (_vec) * 
	0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, // (_mtx) ); }.vec4
	0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, //  instMul(mat4 _m
	0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, // tx, vec4 _vec) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, //  return ( (_mtx)
	0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, //  * (_vec) ); }.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, 0x70, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, // loat rcp(float _
	0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x2f, // a) { return 1.0/
	0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, // _a; }.vec2 rcp(v
	0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // ec2 _a) { return
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, //  vec2(1.0)/_a; }
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, // .vec3 rcp(vec3 _
	0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, // a) { return vec3
	0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, // (1.0)/_a; }.vec4
	0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, //  rcp(vec4 _a) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x31, 0x2e, 0x30, 0x29, // return vec4(1.0)
	0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x65, 0x63, 0x32, // /_a; }.vec2 vec2
	0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, // _splat(float _x)
	0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, //  { return vec2(_
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, // x, _x); }.vec3 v
	0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // ec3_splat(float 
	0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, // _x) { return vec
	0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, // 3(_x, _x, _x); }
	0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, // .vec4 vec4_splat
	0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // (float _x) { ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, // urn vec4(_x, _x,
	0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, //  _x, _x); }.uvec
	0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, // 2 uvec2_splat(ui
	0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // nt _x) { return 
	0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, // uvec2(_x, _x); }
	0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, // .uvec3 uvec3_spl
	0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // at(uint _x) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, // turn uvec3(_x, _
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x34, 0x20, // x, _x); }.uvec4 
	0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, // uvec4_splat(uint
	0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, //  _x) { return uv
	0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, // ec4(_x, _x, _x, 
	0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, // _x); }.mat4 mtxF
	0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, // romRows(vec4 _0,
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, //  vec4 _1, vec4 _
	0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // 2, vec4 _3).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, // turn transpose(m
	0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, // at4(_0, _1, _2, 
	0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, // _3) );.}.mat4 mt
	0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, // xFromCols(vec4 _
	0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // 0, vec4 _1, vec4
	0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, //  _2, vec4 _3).{.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, // return mat4(_0, 
	0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, // _1, _2, _3);.}.m
	0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, // at3 mtxFromRows(
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, // vec3 _0, vec3 _1
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // , vec3 _2).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, // urn transpose(ma
	0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x20, 0x29, // t3(_0, _1, _2) )
	0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, // ;.}.mat3 mtxFrom
	0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, // Cols(vec3 _0, ve
	0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, // c3 _1, vec3 _2).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, // {.return mat3(_0
	0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, // , _1, _2);.}.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, // form vec4 u_view
	0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, // Rect;.uniform ve
	0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x54, 0x65, 0x78, 0x65, 0x6c, 0x3b, 0x0a, // c4 u_viewTexel;.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, // uniform mat4 u_v
	0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, // iew;.uniform mat
	0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, // 4 u_invView;.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x70, 0x72, 0x6f, 0x6a, // form mat4 u_proj
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, // ;.uniform mat4 u
	0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // _invProj;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, // m mat4 u_viewPro
	0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, // j;.uniform mat4 
	0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, // u_invViewProj;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, // niform mat4 u_mo
	0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // del[32];.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, //  mat4 u_modelVie
	0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, // w;.uniform mat4 
	0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, // u_modelViewProj;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, // .uniform vec4 u_
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x66, 0x34, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // alphaRef4;.float
	0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, //  sqr( float v).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // .return v*v;.}.v
	0x65, 0x63, 0x32, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x29, // ec2 sqr( vec2 v)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, // .{.return v*v;.}
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // .vec3 sqr( vec3 
	0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, // v).{.return v*v;
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6d, 0x75, 0x6c, 0x5f, 0x77, 0x31, 0x28, 0x20, // .}.vec3 mul_w1( 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x29, 0x0a, // vec3 v, mat4 m).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2e, 0x78, 0x2a, 0x6d, 0x5b, 0x30, // {.return v.x*m[0
	0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x79, 0x2a, 0x6d, 0x5b, 0x31, // ].xyz + (v.y*m[1
	0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x7a, 0x2a, 0x6d, 0x5b, 0x32, // ].xyz + (v.z*m[2
	0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, 0x6d, 0x5b, 0x33, 0x5d, 0x2e, 0x78, 0x79, 0x7a, // ].xyz + m[3].xyz
	0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x63, 0x6f, 0x73, // ));.}.float acos
	0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x20, 0x66, // _approx_divPI( f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // loat v).{.float 
	0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, // x = abs(v);.if(1
	0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, // . - x <= 0.00006
	0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // 103515625).retur
	0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, // n (v >= 0.) ? 0.
	0x20, 0x3a, 0x20, 0x31, 0x2e, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, //  : 1.;.float res
	0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, //  = ((-0.155972/3
	0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, // .141592653589793
	0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, // 2384626433832795
	0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, // ) * x + (1.56467
	0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, // /3.1415926535897
	0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, // 9323846264338327
	0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, // 95) ) * sqrt(1. 
	0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, // - x);.return (v 
	0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x31, // >= 0.) ? res : 1
	0x2e, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // . - res;.}.float
	0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, //  atan2_approx_di
	0x76, 0x32, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x79, 0x2c, 0x20, 0x66, // v2PI( float y, f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // loat x).{.float 
	0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x79, 0x29, 0x3b, 0x0a, // abs_y = abs(y);.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, // float abs_x = ab
	0x73, 0x28, 0x78, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3c, // s(x);.if(abs_x <
	0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, // = 0.000061035156
	0x32, 0x35, 0x20, 0x26, 0x26, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3c, 0x3d, 0x20, 0x30, // 25 && abs_y <= 0
	0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, // .00006103515625)
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x30, 0x2e, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // .return 0.;.floa
	0x74, 0x20, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2d, 0x20, 0x61, // t r = (abs_x - a
	0x62, 0x73, 0x5f, 0x79, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2b, // bs_y) / (abs_x +
	0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, //  abs_y);.float a
	0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, // ngle = ((x < 0.)
	0x20, 0x3f, 0x20, 0x28, 0x33, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x20, 0x3a, 0x20, 0x28, 0x31, 0x2e, //  ? (3./8.) : (1.
	0x2f, 0x38, 0x2e, 0x29, 0x29, 0x0a, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x32, 0x31, 0x31, 0x38, 0x36, // /8.)).+ (0.21186
	0x38, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, // 8 /(2.*3.1415926
	0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, // 5358979323846264
	0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x72, 0x20, 0x2a, 0x20, // 33832795) * r * 
	0x72, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x39, 0x38, 0x37, 0x33, 0x30, 0x35, 0x20, 0x2f, 0x28, 0x32, // r - 0.987305 /(2
	0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, // .*3.141592653589
	0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, // 7932384626433832
	0x37, 0x39, 0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, // 795)) * ((x < 0.
	0x29, 0x20, 0x3f, 0x20, 0x2d, 0x72, 0x20, 0x3a, 0x20, 0x72, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, // ) ? -r : r);.ret
	0x75, 0x72, 0x6e, 0x20, 0x28, 0x79, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, // urn (y < 0.) ? -
	0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3a, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x3b, 0x0a, 0x7d, // angle : angle;.}
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x73, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x72, // .float asin_appr
	0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // ox_divPI( float 
	0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, // v).{.float x = a
	0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, // bs(v);.if(1. - x
	0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, //  <= 0.0000610351
	0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, // 5625).return (v 
	0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x3a, 0x20, 0x2d, // >= 0.) ? 0.5 : -
	0x30, 0x2e, 0x35, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, // 0.5;.float res =
	0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, //  ((-0.155972/3.1
	0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, // 4159265358979323
	0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, // 84626433832795) 
	0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, // * x + (1.56467/3
	0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, // .141592653589793
	0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, // 2384626433832795
	0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, // ) ) * sqrt(1. - 
	0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, // x);.return (v >=
	0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, //  0.) ? 0.5 - res
	0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, //  : -0.5 + res;.}
	0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x61, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x71, 0x75, // .vec2 ray_to_equ
	0x69, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x75, 0x76, 0x28, // irectangular_uv(
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x61, 0x79, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, //  vec3 ray).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x0a, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, // urn vec2(.0.5 + 
	0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, // atan2_approx_div
	0x32, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x79, 0x2c, 0x20, 0x72, 0x61, 0x79, 0x2e, 0x78, // 2PI(ray.y, ray.x
	0x29, 0x2c, 0x0a, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, // ),.acos_approx_d
	0x69, 0x76, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // ivPI(ray.z));.}.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x20, 0x66, // float InvsRGB( f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, // loat color).{.if
	0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, //  (color <= 0.040
	0x34, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // 45).return color
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x29, 0x3b, 0x0a, //  * (1.0/12.92);.
	0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, // else.return pow(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, // color * (1.0/1.0
	0x35, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x2f, 0x31, 0x2e, 0x30, // 55) + (0.055/1.0
	0x35, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, 0x34, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // 55), 2.4);.}.flo
	0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x20, 0x66, 0x6c, // at InvRec709( fl
	0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, // oat color).{.if 
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x38, 0x31, 0x29, // (color <= 0.081)
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, // .return color * 
	0x28, 0x31, 0x2e, 0x30, 0x2f, 0x34, 0x2e, 0x35, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, // (1.0/4.5);.else.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // return pow(color
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, 0x20, 0x2b, //  * (1.0/1.099) +
	0x20, 0x28, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, 0x2c, 0x20, //  (0.099/1.099), 
	0x31, 0x2e, 0x30, 0x2f, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // 1.0/0.45);.}.flo
	0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x66, 0x6c, 0x6f, // at InvGamma( flo
	0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, // at color).{.retu
	0x72, 0x6e, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // rn InvsRGB(color
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, // );.}.vec3 InvGam
	0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, // ma( vec3 color).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x49, 0x6e, // {.return vec3(In
	0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, // vGamma(color.x),
	0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, // InvGamma(color.y
	0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // ),InvGamma(color
	0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, // .z));.}.vec3 Inv
	0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, // ToneMap( vec3 co
	0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x69, 0x6e, 0x76, // lor).{.float inv
	0x5f, 0x32, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x30, 0x2e, 0x35, 0x2f, 0x30, 0x2e, 0x32, 0x35, 0x3b, // _2bh = 0.5/0.25;
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x34, 0x2e, 0x30, 0x2a, // .float bh = 4.0*
	0x30, 0x2e, 0x32, 0x35, 0x20, 0x2d, 0x20, 0x32, 0x2e, 0x30, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // 0.25 - 2.0;.retu
	0x72, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, // rn (color - 1.0 
	0x2b, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2a, 0x28, 0x63, 0x6f, // + sqrt(color*(co
	0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x20, 0x62, 0x68, 0x29, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, // lor + bh) + 1.0)
	0x29, 0x2a, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // )*inv_2bh;.}.flo
	0x61, 0x74, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, // at sRGB( float f
	0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, // ).{.float s;.if 
	0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x33, 0x31, 0x33, 0x30, 0x38, 0x29, // (f <= 0.0031308)
	0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, // .s = 12.92 * f;.
	0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x20, 0x2a, // else.s = 1.055 *
	0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x34, 0x29, //  pow(f, 1.0/2.4)
	0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, //  - 0.055;.return
	0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x52, 0x65, 0x63, 0x37, //  s;.}.float Rec7
	0x30, 0x39, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, // 09( float f).{.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, // loat s;.if (f <=
	0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x34, 0x2e, 0x35, 0x20, //  0.018).s = 4.5 
	0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, // * f;.else.s = 1.
	0x30, 0x39, 0x39, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x34, // 099 * pow(f, 0.4
	0x35, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // 5) - 0.099;.retu
	0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, // rn s;.}.float FB
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, // Gamma( float col
	0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x52, 0x47, // or).{.return sRG
	0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, // B(color);.}.vec2
	0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, //  FBGamma( vec2 c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // olor).{.return v
	0x65, 0x63, 0x32, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // ec2(FBGamma(colo
	0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, // r.x),FBGamma(col
	0x6f, 0x72, 0x2e, 0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, // or.y));.}.vec3 F
	0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, // BGamma( vec3 col
	0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, // or).{.return vec
	0x33, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, // 3(FBGamma(color.
	0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // x),FBGamma(color
	0x2e, 0x79, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // .y),FBGamma(colo
	0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, // r.z));.}.vec3 FB
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x32, 0x32, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, // Gamma22( vec3 co
	0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, // lor).{.return ve
	0x63, 0x33, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x2c, 0x20, // c3(pow(color.x, 
	0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, // 1.0/2.2),pow(col
	0x6f, 0x72, 0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, // or.y, 1.0/2.2),p
	0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, // ow(color.z, 1.0/
	0x32, 0x2e, 0x32, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, // 2.2));.}.float F
	0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // BToneMap( float 
	0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6c, 0x20, 0x2a, 0x20, // l).{.return l * 
	0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, // ((l*0.25 + 1.0) 
	0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // / (l + 1.0));.}.
	0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, // vec2 FBToneMap( 
	0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, // vec2 color).{.fl
	0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // oat l = dot(colo
	0x72, 0x2c, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2b, // r,vec2(0.176204+
	0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x2c, 0x30, 0x2e, // 0.0108109*0.5,0.
	0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, // 812985+0.0108109
	0x2a, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, // *0.5));.return c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, // olor * ((l*0.25 
	0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, // + 1.0) / (l + 1.
	0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x54, 0x6f, // 0));.}.vec3 FBTo
	0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // neMap( vec3 colo
	0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, // r).{.float l = d
	0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, // ot(color,vec3(0.
	0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2c, // 176204,0.812985,
	0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, // 0.0108109));.ret
	0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, // urn color * ((l*
	0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, // 0.25 + 1.0) / (l
	0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, //  + 1.0));.}.vec4
	0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, //  Additive( vec4 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, // cBase, vec4 cBle
	0x6e, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, // nd, float percen
	0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, // t).{.return cBas
	0x65, 0x20, 0x2b, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, // e + cBlend*perce
	0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, // nt;.}.vec3 Scree
	0x6e, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, // n ( vec3 cBase, 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, // vec3 cBlend).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, // eturn 1.0 - (1.0
	0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, //  - cBase) * (1.0
	0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, //  - cBlend);.}.ve
	0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, // c4 Screen ( vec4
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, //  cBase, vec4 cBl
	0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, // end).{.return 1.
	0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, // 0 - (1.0 - cBase
	0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // ) * (1.0 - cBlen
	0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, // d);.}.vec3 Scree
	0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, // nHDR ( vec3 cBas
	0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, // e, vec3 cBlend).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, // {.return max(1.0
	0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, //  - (1.0 - cBase)
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, //  * (1.0 - cBlend
	0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, // ), vec3(0.,0.,0.
	0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, // ));.}.vec4 Scree
	0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, // nHDR ( vec4 cBas
	0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, // e, vec4 cBlend).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, // {.return max(1.0
	0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, //  - (1.0 - cBase)
	0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, //  * (1.0 - cBlend
	0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, // ), vec4(0.,0.,0.
	0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4d, 0x75, // ,0.));.}.vec4 Mu
	0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // ltiply ( vec4 cB
	0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, // ase, vec4 cBlend
	0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, // , float percent)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, // .{.return cBase 
	0x2a, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, // * cBlend*percent
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, // ;.}.vec4 Overlay
	0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, //  ( vec4 cBase, v
	0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, // ec4 cBlend).{.ve
	0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, // c4 cNew = step(0
	0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, // .5, cBase);.cNew
	0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, //  = mix(cBase*cBl
	0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, // end*2.0, 1.0-2.0
	0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, // *(1.0-cBase)*(1.
	0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, // 0-cBlend), cNew)
	0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, // ;.return cNew;.}
	0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x48, 0x44, 0x52, // .vec4 OverlayHDR
	0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, //  ( vec4 cBase, v
	0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, // ec4 cBlend).{.ve
	0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, // c4 cNew = step(0
	0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, // .5, cBase);.cNew
	0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, //  = max(mix(cBase
	0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, // *cBlend*2.0, 1.0
	0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, // -2.0*(1.0-cBase)
	0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, // *(1.0-cBlend), c
	0x4e, 0x65, 0x77, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, // New), vec4(0.,0.
	0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // ,0.,0.));.return
	0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, //  cNew;.}.vec3 co
	0x73, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x5f, 0x73, 0x61, 0x6d, // s_hemisphere_sam
	0x70, 0x6c, 0x65, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x66, // ple( vec2 t).{.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x68, 0x69, 0x20, 0x3d, 0x20, 0x74, 0x2e, 0x79, 0x20, 0x2a, // loat phi = t.y *
	0x20, 0x28, 0x32, 0x2e, 0x30, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, //  (2.0*3.14159265
	0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, // 3589793238462643
	0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // 3832795);.float 
	0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, // cosTheta = sqrt(
	0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // 1.0 - t.x);.floa
	0x74, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, // t sinTheta = sqr
	0x74, 0x28, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x70, // t(t.x);.float sp
	0x2c, 0x63, 0x70, 0x3b, 0x0a, 0x7b, 0x73, 0x70, 0x3d, 0x73, 0x69, 0x6e, 0x28, 0x70, 0x68, 0x69, // ,cp;.{sp=sin(phi
	0x29, 0x3b, 0x63, 0x70, 0x3d, 0x63, 0x6f, 0x73, 0x28, 0x70, 0x68, 0x69, 0x29, 0x3b, 0x7d, 0x3b, // );cp=cos(phi);};
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x63, 0x70, 0x20, // .return vec3(cp 
	0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x63, 0x6f, 0x73, 0x54, // * sinTheta, cosT
	0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x73, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, // heta, sp * sinTh
	0x65, 0x74, 0x61, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x6f, 0x74, // eta);.}.vec3 rot
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x70, // ate_to_vector_up
	0x70, 0x65, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x76, // per( vec3 vec, v
	0x65, 0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, // ec3 normal).{.if
	0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x3e, 0x20, 0x2d, 0x30, 0x2e, 0x39, // (normal.y > -0.9
	0x39, 0x39, 0x39, 0x39, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x20, // 9999).{.float h 
	0x3d, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x28, 0x31, 0x2e, 0x30, 0x2b, 0x6e, 0x6f, 0x72, 0x6d, 0x61, // = 1.0/(1.0+norma
	0x6c, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x20, 0x3d, // l.y);.float hz =
	0x20, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, //  h*normal.z;.flo
	0x61, 0x74, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x3d, 0x20, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, // at hzx = hz*norm
	0x61, 0x6c, 0x2e, 0x78, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, // al.x;.return vec
	0x33, 0x28, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, // 3(.vec.x * (norm
	0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, // al.y+hz*normal.z
	0x29, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, // ) + vec.y * norm
	0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x68, // al.x - vec.z * h
	0x7a, 0x78, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, // zx,.vec.y * norm
	0x61, 0x6c, 0x2e, 0x79, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x6e, // al.y - vec.x * n
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, // ormal.x - vec.z 
	0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, // * normal.z,.vec.
	0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x20, 0x2d, 0x20, 0x76, // y * normal.z - v
	0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, // ec.x * hzx + vec
	0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, // .z * (normal.y+h
	0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, // *normal.x*normal
	0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x72, 0x65, 0x74, // .x));.}.else ret
	0x75, 0x72, 0x6e, 0x20, 0x2d, 0x76, 0x65, 0x63, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, // urn -vec;.}.unif
	0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x61, 0x74, 0x57, 0x6f, 0x72, 0x6c, // orm mat4 matWorl
	0x64, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x5b, 0x32, 0x5d, 0x3b, 0x0a, 0x76, 0x6f, // dViewProj[2];.vo
	0x69, 0x64, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x5f, 0x74, 0x61, // id main().{.v_ta
	0x62, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x20, 0x3d, 0x20, 0x61, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, // blePos = a_posit
	0x69, 0x6f, 0x6e, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, // ion.xyz;.v_texco
	0x6f, 0x72, 0x64, 0x30, 0x20, 0x3d, 0x20, 0x61, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, // ord0 = a_texcoor
	0x64, 0x30, 0x3b, 0x0a, 0x67, 0x6c, 0x5f, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x20, 0x3d, 0x20, 0x67, // d0;.gl_Layer = g
	0x6c, 0x5f, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x3b, 0x0a, 0x67, 0x6c, // l_InstanceID;.gl
	0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x3d, 0x20, 0x28, 0x20, 0x28, 0x6d, // _Position = ( (m
	0x61, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x5b, // atWorldViewProj[
	0x67, 0x6c, 0x5f, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x5d, 0x29, 0x20, // gl_InstanceID]) 
	0x2a, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, 0x61, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, // * (vec4(a_positi
	0x6f, 0x6e, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x00, // on, 1.0)) );.}..
};
static const uint8_t vs_flasher_noclip_st_glsl[6728] =
{
	0x56, 0x53, 0x48, 0x0b, 0x00, 0x00, 0x00, 0x00, 0xe2, 0xbc, 0x2a, 0x7e, 0x00, 0x00, 0x35, 0x1a, // VSH.......*~..5.
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x34, 0x34, 0x30, 0x0a, 0x23, // ..#version 440.#
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, // define texture2D
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, //           textur
	0x65, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // e.#define textur
	0x65, 0x32, 0x44, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, // e2DLod       tex
	0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, // tureLod.#define 
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, 0x20, // texture2DGrad   
	0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, //    textureGrad.#
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, // define texture2D
	0x50, 0x72, 0x6f, 0x6a, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // ProjLod   textur
	0x65, 0x50, 0x72, 0x6f, 0x6a, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, // eProjLod.#define
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, //  texture2DProjGr
	0x61, 0x64, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x47, // ad  textureProjG
	0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, // rad.#define text
	0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, // ureCubeLod     t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, // extureLod.#defin
	0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x47, 0x72, 0x61, // e textureCubeGra
	0x64, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x47, 0x72, 0x61, 0x64, // d    textureGrad
	0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // .#define texture
	0x33, 0x44, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, // 3D          text
	0x75, 0x72, 0x65, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, // ure.#define text
	0x75, 0x72, 0x65, 0x32, 0x44, 0x4c, 0x6f, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x20, 0x74, // ure2DLodOffset t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x0a, // extureLodOffset.
	0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, // #define attribut
	0x65, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x76, 0x61, 0x72, // e in.#define var
	0x79, 0x69, 0x6e, 0x67, 0x20, 0x6f, 0x75, 0x74, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, // ying out.#define
	0x20, 0x62, 0x67, 0x66, 0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x28, 0x5f, 0x73, //  bgfxShadow2D(_s
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, // ampler, _coord) 
	0x20, 0x20, 0x20, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x74, //     vec4_splat(t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, // exture(_sampler,
	0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x29, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, //  _coord) ).#defi
	0x6e, 0x65, 0x20, 0x62, 0x67, 0x66, 0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x50, // ne bgfxShadow2DP
	0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, // roj(_sampler, _c
	0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, // oord) vec4_splat
	0x28, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, // (textureProj(_sa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x29, // mpler, _coord) )
	0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // .attribute vec3 
	0x61, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x0a, 0x61, 0x74, 0x74, 0x72, // a_position;.attr
	0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x61, 0x5f, 0x74, 0x65, 0x78, // ibute vec2 a_tex
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x3b, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, // coord0;.varying 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x3b, // vec3 v_tablePos;
	0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x5f, // .varying vec2 v_
	0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // texcoord0;.vec3 
	0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, // instMul(vec3 _ve
	0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, // c, mat3 _mtx) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, // return ( (_vec) 
	0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, // * (_mtx) ); }.ve
	0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x20, // c3 instMul(mat3 
	0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, // _mtx, vec3 _vec)
	0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, //  { return ( (_mt
	0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, // x) * (_vec) ); }
	0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, // .vec4 instMul(ve
	0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, // c4 _vec, mat4 _m
	0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, // tx) { return ( (
	0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, // _vec) * (_mtx) )
	0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, // ; }.vec4 instMul
	0x28, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // (mat4 _mtx, vec4
	0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, //  _vec) { return 
	0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, // ( (_mtx) * (_vec
	0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, 0x70, // ) ); }.float rcp
	0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // (float _a) { ret
	0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, // urn 1.0/_a; }.ve
	0x63, 0x32, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, 0x20, // c2 rcp(vec2 _a) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, 0x2e, // { return vec2(1.
	0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x63, // 0)/_a; }.vec3 rc
	0x70, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // p(vec3 _a) { ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, // urn vec3(1.0)/_a
	0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, // ; }.vec4 rcp(vec
	0x34, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, // 4 _a) { return v
	0x65, 0x63, 0x34, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, // ec4(1.0)/_a; }.v
	0x65, 0x63, 0x32, 0x20, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, // ec2 vec2_splat(f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, // loat _x) { retur
	0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, // n vec2(_x, _x); 
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, // }.vec3 vec3_spla
	0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // t(float _x) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, // turn vec3(_x, _x
	0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, 0x65, // , _x); }.vec4 ve
	0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, // c4_splat(float _
	0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, // x) { return vec4
	0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, // (_x, _x, _x, _x)
	0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x5f, // ; }.uvec2 uvec2_
	0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, // splat(uint _x) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, //  return uvec2(_x
	0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, 0x75, // , _x); }.uvec3 u
	0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, // vec3_splat(uint 
	0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, // _x) { return uve
	0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, // c3(_x, _x, _x); 
	0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, // }.uvec4 uvec4_sp
	0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, // lat(uint _x) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, // eturn uvec4(_x, 
	0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x6d, // _x, _x, _x); }.m
	0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, // at4 mtxFromRows(
	0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, // vec4 _0, vec4 _1
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // , vec4 _2, vec4 
	0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, // _3).{.return tra
	0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, // nspose(mat4(_0, 
	0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, // _1, _2, _3) );.}
	0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, // .mat4 mtxFromCol
	0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // s(vec4 _0, vec4 
	0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, // _1, vec4 _2, vec
	0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, // 4 _3).{.return m
	0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, // at4(_0, _1, _2, 
	0x5f, 0x33, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, // _3);.}.mat3 mtxF
	0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, // romRows(vec3 _0,
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, //  vec3 _1, vec3 _
	0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, // 2).{.return tran
	0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, // spose(mat3(_0, _
	0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, // 1, _2) );.}.mat3
	0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, //  mtxFromCols(vec
	0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, // 3 _0, vec3 _1, v
	0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // ec3 _2).{.return
	0x20, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, //  mat3(_0, _1, _2
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, // );.}.uniform vec
	0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, 0x6e, // 4 u_viewRect;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, // iform vec4 u_vie
	0x77, 0x54, 0x65, 0x78, 0x65, 0x6c, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // wTexel;.uniform 
	0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, // mat4 u_view;.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, // form mat4 u_invV
	0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, // iew;.uniform mat
	0x34, 0x20, 0x75, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // 4 u_proj;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, 0x6a, // m mat4 u_invProj
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, // ;.uniform mat4 u
	0x5f, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, // _viewProj;.unifo
	0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, // rm mat4 u_invVie
	0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, // wProj;.uniform m
	0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, 0x3b, // at4 u_model[32];
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, // .uniform mat4 u_
	0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, // modelView;.unifo
	0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, // rm mat4 u_modelV
	0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // iewProj;.uniform
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, 0x66, //  vec4 u_alphaRef
	0x34, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x66, 0x6c, // 4;.float sqr( fl
	0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // oat v).{.return 
	0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x73, 0x71, 0x72, 0x28, // v*v;.}.vec2 sqr(
	0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, //  vec2 v).{.retur
	0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x73, 0x71, // n v*v;.}.vec3 sq
	0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // r( vec3 v).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, // urn v*v;.}.vec3 
	0x6d, 0x75, 0x6c, 0x5f, 0x77, 0x31, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x2c, 0x20, // mul_w1( vec3 v, 
	0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // mat4 m).{.return
	0x20, 0x76, 0x2e, 0x78, 0x2a, 0x6d, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, //  v.x*m[0].xyz + 
	0x28, 0x76, 0x2e, 0x79, 0x2a, 0x6d, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, // (v.y*m[1].xyz + 
	0x28, 0x76, 0x2e, 0x7a, 0x2a, 0x6d, 0x5b, 0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, 0x20, // (v.z*m[2].xyz + 
	0x6d, 0x5b, 0x33, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, // m[3].xyz));.}.fl
	0x6f, 0x61, 0x74, 0x20, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, // oat acos_approx_
	0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, // divPI( float v).
	0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, // {.float x = abs(
	0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, // v);.if(1. - x <=
	0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, //  0.0000610351562
	0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, // 5).return (v >= 
	0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x3b, 0x0a, 0x66, // 0.) ? 0. : 1.;.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, // loat res = ((-0.
	0x31, 0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, // 155972/3.1415926
	0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, // 5358979323846264
	0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, // 33832795) * x + 
	0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, // (1.56467/3.14159
	0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, // 2653589793238462
	0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, // 6433832795) ) * 
	0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, // sqrt(1. - x);.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, // turn (v >= 0.) ?
	0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x3b, //  res : 1. - res;
	0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, // .}.float atan2_a
	0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, // pprox_div2PI( fl
	0x6f, 0x61, 0x74, 0x20, 0x79, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x29, 0x0a, // oat y, float x).
	0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3d, 0x20, // {.float abs_y = 
	0x61, 0x62, 0x73, 0x28, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, // abs(y);.float ab
	0x73, 0x5f, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x78, 0x29, 0x3b, 0x0a, 0x69, 0x66, // s_x = abs(x);.if
	0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, // (abs_x <= 0.0000
	0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x20, 0x26, 0x26, 0x20, 0x61, 0x62, // 6103515625 && ab
	0x73, 0x5f, 0x79, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, // s_y <= 0.0000610
	0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // 3515625).return 
	0x30, 0x2e, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x20, 0x3d, 0x20, 0x28, 0x61, // 0.;.float r = (a
	0x62, 0x73, 0x5f, 0x78, 0x20, 0x2d, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x20, 0x2f, 0x20, // bs_x - abs_y) / 
	0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2b, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x3b, // (abs_x + abs_y);
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3d, 0x20, 0x28, // .float angle = (
	0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x28, 0x33, 0x2e, 0x2f, 0x38, // (x < 0.) ? (3./8
	0x2e, 0x29, 0x20, 0x3a, 0x20, 0x28, 0x31, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x29, 0x0a, 0x2b, 0x20, // .) : (1./8.)).+ 
	0x28, 0x30, 0x2e, 0x32, 0x31, 0x31, 0x38, 0x36, 0x38, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, // (0.211868 /(2.*3
	0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, // .141592653589793
	0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, // 2384626433832795
	0x29, 0x20, 0x2a, 0x20, 0x72, 0x20, 0x2a, 0x20, 0x72, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x39, 0x38, // ) * r * r - 0.98
	0x37, 0x33, 0x30, 0x35, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, // 7305 /(2.*3.1415
	0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, // 9265358979323846
	0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x29, 0x20, 0x2a, 0x20, // 26433832795)) * 
	0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x72, 0x20, 0x3a, // ((x < 0.) ? -r :
	0x20, 0x72, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x79, 0x20, 0x3c, //  r);.return (y <
	0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3a, 0x20, //  0.) ? -angle : 
	0x61, 0x6e, 0x67, 0x6c, 0x65, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, // angle;.}.float a
	0x73, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, // sin_approx_divPI
	0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, // ( float v).{.flo
	0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, // at x = abs(v);.i
	0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, // f(1. - x <= 0.00
	0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, // 006103515625).re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, // turn (v >= 0.) ?
	0x20, 0x30, 0x2e, 0x35, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, //  0.5 : -0.5;.flo
	0x61, 0x74, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, // at res = ((-0.15
	0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, // 5972/3.141592653
	0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, // 5897932384626433
	0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, // 832795) * x + (1
	0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, // .56467/3.1415926
	0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, // 5358979323846264
	0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, // 33832795) ) * sq
	0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, // rt(1. - x);.retu
	0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, // rn (v >= 0.) ? 0
	0x2e, 0x35, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x20, // .5 - res : -0.5 
	0x2b, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x61, // + res;.}.vec2 ra
	0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, 0x67, // y_to_equirectang
	0x75, 0x6c, 0x61, 0x72, 0x5f, 0x75, 0x76, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x61, // ular_uv( vec3 ra
	0x79, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, // y).{.return vec2
	0x28, 0x0a, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, // (.0.5 + atan2_ap
	0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, // prox_div2PI(ray.
	0x79, 0x2c, 0x20, 0x72, 0x61, 0x79, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x61, 0x63, 0x6f, 0x73, 0x5f, // y, ray.x),.acos_
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, // approx_divPI(ray
	0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, // .z));.}.float In
	0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, // vsRGB( float col
	0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, // or).{.if (color 
	0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, 0x34, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, // <= 0.04045).retu
	0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, // rn color * (1.0/
	0x31, 0x32, 0x2e, 0x39, 0x32, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, // 12.92);.else.ret
	0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, // urn pow(color * 
	0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, // (1.0/1.055) + (0
	0x2e, 0x30, 0x35, 0x35, 0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, 0x34, // .055/1.055), 2.4
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x52, 0x65, // );.}.float InvRe
	0x63, 0x37, 0x30, 0x39, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // c709( float colo
	0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, // r).{.if (color <
	0x3d, 0x20, 0x30, 0x2e, 0x30, 0x38, 0x31, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // = 0.081).return 
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x34, 0x2e, 0x35, // color * (1.0/4.5
	0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, // );.else.return p
	0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, // ow(color * (1.0/
	0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x2f, // 1.099) + (0.099/
	0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x30, 0x2e, 0x34, 0x35, // 1.099), 1.0/0.45
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, // );.}.float InvGa
	0x6d, 0x6d, 0x61, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // mma( float color
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, // ).{.return InvsR
	0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // GB(color);.}.vec
	0x33, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, // 3 InvGamma( vec3
	0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, //  color).{.return
	0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, //  vec3(InvGamma(c
	0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, // olor.x),InvGamma
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, // (color.y),InvGam
	0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // ma(color.z));.}.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, // vec3 InvToneMap(
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, //  vec3 color).{.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x30, // loat inv_2bh = 0
	0x2e, 0x35, 0x2f, 0x30, 0x2e, 0x32, 0x35, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, // .5/0.25;.float b
	0x68, 0x20, 0x3d, 0x20, 0x34, 0x2e, 0x30, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2d, 0x20, 0x32, // h = 4.0*0.25 - 2
	0x2e, 0x30, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // .0;.return (colo
	0x72, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2b, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x63, // r - 1.0 + sqrt(c
	0x6f, 0x6c, 0x6f, 0x72, 0x2a, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x20, 0x62, 0x68, // olor*(color + bh
	0x29, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x2a, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, // ) + 1.0))*inv_2b
	0x68, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, // h;.}.float sRGB(
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, //  float f).{.floa
	0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, // t s;.if (f <= 0.
	0x30, 0x30, 0x33, 0x31, 0x33, 0x30, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x32, 0x2e, // 0031308).s = 12.
	0x39, 0x32, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, // 92 * f;.else.s =
	0x20, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, //  1.055 * pow(f, 
	0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x34, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, 0x35, // 1.0/2.4) - 0.055
	0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, // ;.return s;.}.fl
	0x6f, 0x61, 0x74, 0x20, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, // oat Rec709( floa
	0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, // t f).{.float s;.
	0x69, 0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, 0x29, 0x0a, // if (f <= 0.018).
	0x73, 0x20, 0x3d, 0x20, 0x34, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, // s = 4.5 * f;.els
	0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x20, 0x2a, 0x20, 0x70, 0x6f, // e.s = 1.099 * po
	0x77, 0x28, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, // w(f, 0.45) - 0.0
	0x39, 0x39, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, // 99;.return s;.}.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x66, // float FBGamma( f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // loat color).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, // turn sRGB(color)
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, // ;.}.vec2 FBGamma
	0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, // ( vec2 color).{.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x46, 0x42, 0x47, 0x61, // return vec2(FBGa
	0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, // mma(color.x),FBG
	0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x29, 0x3b, 0x0a, // amma(color.y));.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, // }.vec3 FBGamma( 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // vec3 color).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, // turn vec3(FBGamm
	0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, // a(color.x),FBGam
	0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, // ma(color.y),FBGa
	0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, // mma(color.z));.}
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x32, 0x32, 0x28, // .vec3 FBGamma22(
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, //  vec3 color).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x70, 0x6f, 0x77, 0x28, 0x63, // eturn vec3(pow(c
	0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, // olor.x, 1.0/2.2)
	0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x2c, 0x20, 0x31, 0x2e, // ,pow(color.y, 1.
	0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // 0/2.2),pow(color
	0x2e, 0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x29, 0x3b, 0x0a, 0x7d, // .z, 1.0/2.2));.}
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, // .float FBToneMap
	0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // ( float l).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x6c, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, // urn l * ((l*0.25
	0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, //  + 1.0) / (l + 1
	0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x54, // .0));.}.vec2 FBT
	0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, // oneMap( vec2 col
	0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, // or).{.float l = 
	0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x32, 0x28, 0x30, // dot(color,vec2(0
	0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, // .176204+0.010810
	0x39, 0x2a, 0x30, 0x2e, 0x35, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2b, 0x30, // 9*0.5,0.812985+0
	0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x3b, 0x0a, // .0108109*0.5));.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, // return color * (
	0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, // (l*0.25 + 1.0) /
	0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, //  (l + 1.0));.}.v
	0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, // ec3 FBToneMap( v
	0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, // ec3 color).{.flo
	0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // at l = dot(color
	0x2c, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2c, 0x30, // ,vec3(0.176204,0
	0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2c, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, // .812985,0.010810
	0x39, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // 9));.return colo
	0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, // r * ((l*0.25 + 1
	0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, // .0) / (l + 1.0))
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, // ;.}.vec4 Additiv
	0x65, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, // e( vec4 cBase, v
	0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, // ec4 cBlend, floa
	0x74, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // t percent).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2b, 0x20, 0x63, 0x42, 0x6c, 0x65, // urn cBase + cBle
	0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // nd*percent;.}.ve
	0x63, 0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, // c3 Screen ( vec3
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, //  cBase, vec3 cBl
	0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, // end).{.return 1.
	0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, // 0 - (1.0 - cBase
	0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // ) * (1.0 - cBlen
	0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, // d);.}.vec4 Scree
	0x6e, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, // n ( vec4 cBase, 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, // vec4 cBlend).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, // eturn 1.0 - (1.0
	0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, //  - cBase) * (1.0
	0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, //  - cBlend);.}.ve
	0x63, 0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, // c3 ScreenHDR ( v
	0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // ec3 cBase, vec3 
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // cBlend).{.return
	0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, //  max(1.0 - (1.0 
	0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, // - cBase) * (1.0 
	0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, // - cBlend), vec3(
	0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // 0.,0.,0.));.}.ve
	0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, // c4 ScreenHDR ( v
	0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // ec4 cBase, vec4 
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // cBlend).{.return
	0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, //  max(1.0 - (1.0 
	0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, // - cBase) * (1.0 
	0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, // - cBlend), vec4(
	0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, // 0.,0.,0.,0.));.}
	0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x20, 0x28, // .vec4 Multiply (
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, //  vec4 cBase, vec
	0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // 4 cBlend, float 
	0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // percent).{.retur
	0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2a, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, // n cBase * cBlend
	0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, // *percent;.}.vec4
	0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, //  Overlay ( vec4 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, // cBase, vec4 cBle
	0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, // nd).{.vec4 cNew 
	0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, // = step(0.5, cBas
	0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, 0x63, // e);.cNew = mix(c
	0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, // Base*cBlend*2.0,
	0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, //  1.0-2.0*(1.0-cB
	0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, // ase)*(1.0-cBlend
	0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // ), cNew);.return
	0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, //  cNew;.}.vec4 Ov
	0x65, 0x72, 0x6c, 0x61, 0x79, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // erlayHDR ( vec4 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, // cBase, vec4 cBle
	0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x20, // nd).{.vec4 cNew 
	0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, 0x73, // = step(0.5, cBas
	0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x6d, // e);.cNew = max(m
	0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, // ix(cBase*cBlend*
	0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, // 2.0, 1.0-2.0*(1.
	0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, // 0-cBase)*(1.0-cB
	0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x2c, 0x20, 0x76, 0x65, // lend), cNew), ve
	0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, // c4(0.,0.,0.,0.))
	0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, // ;.return cNew;.}
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x73, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, 0x70, // .vec3 cos_hemisp
	0x68, 0x65, 0x72, 0x65, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x20, 0x76, 0x65, 0x63, // here_sample( vec
	0x32, 0x20, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x68, 0x69, // 2 t).{.float phi
	0x20, 0x3d, 0x20, 0x74, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x28, 0x32, 0x2e, 0x30, 0x2a, 0x33, 0x2e, //  = t.y * (2.0*3.
	0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, // 1415926535897932
	0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, // 384626433832795)
	0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, // ;.float cosTheta
	0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x74, 0x2e, //  = sqrt(1.0 - t.
	0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, // x);.float sinThe
	0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, // ta = sqrt(t.x);.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x70, 0x2c, 0x63, 0x70, 0x3b, 0x0a, 0x7b, 0x73, 0x70, // float sp,cp;.{sp
	0x3d, 0x73, 0x69, 0x6e, 0x28, 0x70, 0x68, 0x69, 0x29, 0x3b, 0x63, 0x70, 0x3d, 0x63, 0x6f, 0x73, // =sin(phi);cp=cos
	0x28, 0x70, 0x68, 0x69, 0x29, 0x3b, 0x7d, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // (phi);};.return 
	0x76, 0x65, 0x63, 0x33, 0x28, 0x63, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, // vec3(cp * sinThe
	0x74, 0x61, 0x2c, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x73, 0x70, // ta, cosTheta, sp
	0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, //  * sinTheta);.}.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x76, // vec3 rotate_to_v
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, // ector_upper( vec
	0x33, 0x20, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, 0x6d, // 3 vec, vec3 norm
	0x61, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, // al).{.if(normal.
	0x79, 0x20, 0x3e, 0x20, 0x2d, 0x30, 0x2e, 0x39, 0x39, 0x39, 0x39, 0x39, 0x29, 0x0a, 0x7b, 0x0a, // y > -0.99999).{.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x28, 0x31, // float h = 1.0/(1
	0x2e, 0x30, 0x2b, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, // .0+normal.y);.fl
	0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x20, 0x3d, 0x20, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, // oat hz = h*norma
	0x6c, 0x2e, 0x7a, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x3d, // l.z;.float hzx =
	0x20, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x3b, 0x0a, 0x72, 0x65, //  hz*normal.x;.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x78, // turn vec3(.vec.x
	0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x7a, 0x2a, //  * (normal.y+hz*
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x29, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, // normal.z) + vec.
	0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, // y * normal.x - v
	0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, // ec.z * hzx,.vec.
	0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x2d, 0x20, 0x76, // y * normal.y - v
	0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, // ec.x * normal.x 
	0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, // - vec.z * normal
	0x2e, 0x7a, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, // .z,.vec.y * norm
	0x61, 0x6c, 0x2e, 0x7a, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x68, // al.z - vec.x * h
	0x7a, 0x78, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, // zx + vec.z * (no
	0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, // rmal.y+h*normal.
	0x78, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // x*normal.x));.}.
	0x65, 0x6c, 0x73, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x2d, 0x76, 0x65, 0x63, // else return -vec
	0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, // ;.}.uniform mat4
	0x20, 0x6d, 0x61, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, //  matWorldViewPro
	0x6a, 0x5b, 0x32, 0x5d, 0x3b, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, // j[2];.void main(
	0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x20, 0x3d, // ).{.v_tablePos =
	0x20, 0x61, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x78, 0x79, 0x7a, 0x3b, //  a_position.xyz;
	0x0a, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x20, 0x3d, 0x20, 0x61, // .v_texcoord0 = a
	0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x3b, 0x0a, 0x67, 0x6c, 0x5f, 0x4c, // _texcoord0;.gl_L
	0x61, 0x79, 0x65, 0x72, 0x20, 0x3d, 0x20, 0x67, 0x6c, 0x5f, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, // ayer = gl_Instan
	0x63, 0x65, 0x49, 0x44, 0x3b, 0x0a, 0x67, 0x6c, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, // ceID;.gl_Positio
	0x6e, 0x20, 0x3d, 0x20, 0x28, 0x20, 0x28, 0x6d, 0x61, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x56, // n = ( (matWorldV
	0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x5b, 0x67, 0x6c, 0x5f, 0x49, 0x6e, 0x73, 0x74, 0x61, // iewProj[gl_Insta
	0x6e, 0x63, 0x65, 0x49, 0x44, 0x5d, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x76, 0x65, 0x63, 0x34, 0x28, // nceID]) * (vec4(
	0x61, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, // a_position, 1.0)
	0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x00,                                                 // ) );.}..
};
static const uint8_t vs_flasher_noclip_st_dx11[801] =
{
	0x56, 0x53, 0x48, 0x0b, 0x00, 0x00, 0x00, 0x00, 0xe2, 0xbc, 0x2a, 0x7e, 0x01, 0x00, 0x10, 0x6d, // VSH.......*~...m
	0x61, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x04, // atWorldViewProj.
	0x02, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0xec, 0x02, 0x00, 0x00, 0x44, 0x58, 0x42, // .............DXB
	0x43, 0xb6, 0x5d, 0xce, 0x50, 0xab, 0x04, 0x7c, 0x47, 0x37, 0x78, 0x03, 0x09, 0x8a, 0x20, 0x63, // C.].P..|G7x... c
	0xaa, 0x01, 0x00, 0x00, 0x00, 0xec, 0x02, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, // .............0..
	0x00, 0xa8, 0x00, 0x00, 0x00, 0x48, 0x01, 0x00, 0x00, 0xdc, 0x02, 0x00, 0x00, 0x49, 0x53, 0x47, // .....H.......ISG
	0x4e, 0x70, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, // Np...........P..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x07, 0x07, 0x00, 0x00, 0x59, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .....Y..........
	0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x03, 0x00, 0x00, 0x62, 0x00, 0x00, // .............b..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, // ................
	0x00, 0x01, 0x01, 0x00, 0x00, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x00, 0x54, 0x45, // .....POSITION.TE
	0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x53, 0x56, 0x5f, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, // XCOORD.SV_Instan
	0x63, 0x65, 0x49, 0x44, 0x00, 0x4f, 0x53, 0x47, 0x4e, 0x98, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, // ceID.OSGN.......
	0x00, 0x08, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, // .....h..........
	0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x74, 0x00, 0x00, // .............t..
	0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, // ................
	0x00, 0x07, 0x08, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // .....t..........
	0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, 0x0c, 0x00, 0x00, 0x7d, 0x00, 0x00, // .............}..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, // ................
	0x00, 0x01, 0x0e, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, // .....SV_POSITION
	0x00, 0x54, 0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0x53, 0x56, 0x5f, 0x52, 0x65, 0x6e, // .TEXCOORD.SV_Ren
	0x64, 0x65, 0x72, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x49, 0x6e, // derTargetArrayIn
	0x64, 0x65, 0x78, 0x00, 0xab, 0x53, 0x48, 0x45, 0x58, 0x8c, 0x01, 0x00, 0x00, 0x50, 0x00, 0x01, // dex..SHEX....P..
	0x00, 0x63, 0x00, 0x00, 0x00, 0x6a, 0x08, 0x00, 0x01, 0x59, 0x08, 0x00, 0x04, 0x46, 0x8e, 0x20, // .c...j...Y...F. 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x5f, 0x00, 0x00, 0x03, 0x72, 0x10, 0x10, // ........._...r..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x5f, 0x00, 0x00, 0x03, 0x32, 0x10, 0x10, 0x00, 0x01, 0x00, 0x00, // ....._...2......
	0x00, 0x60, 0x00, 0x00, 0x04, 0x12, 0x10, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, // .`..............
	0x00, 0x67, 0x00, 0x00, 0x04, 0xf2, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, // .g.... .........
	0x00, 0x65, 0x00, 0x00, 0x03, 0x72, 0x20, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x65, 0x00, 0x00, // .e...r ......e..
	0x03, 0x32, 0x20, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x67, 0x00, 0x00, 0x04, 0x12, 0x20, 0x10, // .2 ......g.... .
	0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00, // .........h......
	0x00, 0x29, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x10, 0x10, // .)..............
	0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, // ......@......8..
	0x0a, 0xf2, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x56, 0x15, 0x10, 0x00, 0x00, 0x00, 0x00, // .........V......
	0x00, 0x46, 0x8e, 0x20, 0x06, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, // .F. ............
	0x00, 0x00, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x0b, 0xf2, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, // .....2..........
	0x00, 0x46, 0x8e, 0x20, 0x04, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, // .F. ............
	0x00, 0x06, 0x10, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x01, 0x00, 0x00, // .........F......
	0x00, 0x32, 0x00, 0x00, 0x0c, 0xf2, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, // .2...........F. 
	0x06, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0xa6, 0x1a, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x01, 0x00, 0x00, // .........F......
	0x00, 0x00, 0x00, 0x00, 0x0a, 0xf2, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, // ...... ......F..
	0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x06, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, // .....F. ........
	0x00, 0x0a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x72, 0x20, 0x10, // .........6...r .
	0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x12, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, // .....F.......6..
	0x05, 0x32, 0x20, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x10, 0x10, 0x00, 0x01, 0x00, 0x00, // .2 ......F......
	0x00, 0x36, 0x00, 0x00, 0x05, 0x12, 0x20, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0a, 0x10, 0x10, // .6.... .........
	0x00, 0x02, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x01, 0x53, 0x46, 0x49, 0x30, 0x08, 0x00, 0x00, // .....>...SFI0...
	0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x01, 0x00, 0x10, 0x00, 0x80, // .. .............
	0x00,                                                                                           // .
};
static const uint8_t vs_flasher_noclip_st_spv[1515] =
{
	0x56, 0x53, 0x48, 0x0b, 0x00, 0x00, 0x00, 0x00, 0xe2, 0xbc, 0x2a, 0x7e, 0x01, 0x00, 0x10, 0x6d, // VSH.......*~...m
	0x61, 0x74, 0x57, 0x6f, 0x72, 0x6c, 0x64, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x04, // atWorldViewProj.
	0x02, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0xb4, 0x05, 0x00, 0x00, 0x03, 0x02, 0x23, // ...............#
	0x07, 0x00, 0x00, 0x01, 0x00, 0x0b, 0x00, 0x08, 0x00, 0x86, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x11, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x11, 0x00, 0x02, 0x00, 0x86, 0x14, 0x00, // ................
	0x00, 0x0a, 0x00, 0x0a, 0x00, 0x53, 0x50, 0x56, 0x5f, 0x45, 0x58, 0x54, 0x5f, 0x73, 0x68, 0x61, // .....SPV_EXT_sha
	0x64, 0x65, 0x72, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x64, // der_viewport_ind
	0x65, 0x78, 0x5f, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x00, 0x0b, 0x00, 0x06, 0x00, 0x01, 0x00, 0x00, // ex_layer........
	0x00, 0x47, 0x4c, 0x53, 0x4c, 0x2e, 0x73, 0x74, 0x64, 0x2e, 0x34, 0x35, 0x30, 0x00, 0x00, 0x00, // .GLSL.std.450...
	0x00, 0x0e, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x0c, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, // .........main...
	0x00, 0x3f, 0x00, 0x00, 0x00, 0x43, 0x00, 0x00, 0x00, 0x47, 0x00, 0x00, 0x00, 0x52, 0x00, 0x00, // .?...C...G...R..
	0x00, 0x56, 0x00, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x00, 0x5e, 0x00, 0x00, 0x00, 0x03, 0x00, 0x03, // .V...Z...^......
	0x00, 0x05, 0x00, 0x00, 0x00, 0xf4, 0x01, 0x00, 0x00, 0x05, 0x00, 0x04, 0x00, 0x04, 0x00, 0x00, // ................
	0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x06, 0x00, 0x30, 0x00, 0x00, // .main........0..
	0x00, 0x55, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x00, 0x00, 0x00, // .UniformBlock...
	0x00, 0x06, 0x00, 0x08, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x74, // .....0.......mat
	0x57, 0x6f, 0x72, 0x6c, 0x64, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x00, 0x00, 0x00, // WorldViewProj...
	0x00, 0x05, 0x00, 0x03, 0x00, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x05, // .....2..........
	0x00, 0x3f, 0x00, 0x00, 0x00, 0x61, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x00, // .?...a_position.
	0x00, 0x05, 0x00, 0x05, 0x00, 0x43, 0x00, 0x00, 0x00, 0x61, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, // .....C...a_texco
	0x6f, 0x72, 0x64, 0x30, 0x00, 0x05, 0x00, 0x06, 0x00, 0x47, 0x00, 0x00, 0x00, 0x67, 0x6c, 0x5f, // ord0.....G...gl_
	0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x44, 0x00, 0x00, 0x00, 0x05, 0x00, 0x0a, // InstanceID......
	0x00, 0x52, 0x00, 0x00, 0x00, 0x40, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, // .R...@entryPoint
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x67, 0x6c, 0x5f, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, // Output.gl_Positi
	0x6f, 0x6e, 0x00, 0x00, 0x00, 0x05, 0x00, 0x0a, 0x00, 0x56, 0x00, 0x00, 0x00, 0x40, 0x65, 0x6e, // on.......V...@en
	0x74, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x76, // tryPointOutput.v
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x0a, // _tablePos.......
	0x00, 0x5a, 0x00, 0x00, 0x00, 0x40, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, // .Z...@entryPoint
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, // Output.v_texcoor
	0x64, 0x30, 0x00, 0x00, 0x00, 0x05, 0x00, 0x09, 0x00, 0x5e, 0x00, 0x00, 0x00, 0x40, 0x65, 0x6e, // d0.......^...@en
	0x74, 0x72, 0x79, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x2e, 0x67, // tryPointOutput.g
	0x6c, 0x5f, 0x4c, 0x61, 0x79, 0x65, 0x72, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x2f, 0x00, 0x00, // l_Layer..G.../..
	0x00, 0x06, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x48, 0x00, 0x04, 0x00, 0x30, 0x00, 0x00, // .....@...H...0..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0x30, 0x00, 0x00, // .........H...0..
	0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, // .....#.......H..
	0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, // .0..............
	0x00, 0x47, 0x00, 0x03, 0x00, 0x30, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, // .G...0.......G..
	0x00, 0x32, 0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, // .2...".......G..
	0x00, 0x32, 0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, // .2...!.......G..
	0x00, 0x3f, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, // .?...........G..
	0x00, 0x43, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, // .C...........G..
	0x00, 0x47, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, // .G.......+...G..
	0x00, 0x52, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, // .R...........G..
	0x00, 0x56, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, // .V...........G..
	0x00, 0x5a, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, // .Z...........G..
	0x00, 0x5e, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x13, 0x00, 0x02, // .^..............
	0x00, 0x02, 0x00, 0x00, 0x00, 0x21, 0x00, 0x03, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, // .....!..........
	0x00, 0x16, 0x00, 0x03, 0x00, 0x06, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, // ......... ......
	0x00, 0x07, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, // ................
	0x00, 0x09, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x15, 0x00, 0x04, // ................
	0x00, 0x0b, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, // ..... ..........
	0x00, 0x0d, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x15, 0x00, 0x04, // ................
	0x00, 0x17, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, // ..... .......+..
	0x00, 0x17, 0x00, 0x00, 0x00, 0x26, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, // .....&.......+..
	0x00, 0x06, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x18, 0x00, 0x04, // .....(......?...
	0x00, 0x2d, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, // .-...........+..
	0x00, 0x0b, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x04, // ................
	0x00, 0x2f, 0x00, 0x00, 0x00, 0x2d, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x03, // ./...-..........
	0x00, 0x30, 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x31, 0x00, 0x00, // .0.../... ...1..
	0x00, 0x02, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x31, 0x00, 0x00, // .....0...;...1..
	0x00, 0x32, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x34, 0x00, 0x00, // .2....... ...4..
	0x00, 0x02, 0x00, 0x00, 0x00, 0x2d, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x3e, 0x00, 0x00, // .....-... ...>..
	0x00, 0x01, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x3e, 0x00, 0x00, // .........;...>..
	0x00, 0x3f, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x42, 0x00, 0x00, // .?....... ...B..
	0x00, 0x01, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x42, 0x00, 0x00, // .........;...B..
	0x00, 0x43, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x46, 0x00, 0x00, // .C....... ...F..
	0x00, 0x01, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x46, 0x00, 0x00, // .........;...F..
	0x00, 0x47, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x51, 0x00, 0x00, // .G....... ...Q..
	0x00, 0x03, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x51, 0x00, 0x00, // .........;...Q..
	0x00, 0x52, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x55, 0x00, 0x00, // .R....... ...U..
	0x00, 0x03, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x55, 0x00, 0x00, // .........;...U..
	0x00, 0x56, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x59, 0x00, 0x00, // .V....... ...Y..
	0x00, 0x03, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x59, 0x00, 0x00, // .........;...Y..
	0x00, 0x5a, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x5d, 0x00, 0x00, // .Z....... ...]..
	0x00, 0x03, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x5d, 0x00, 0x00, // .........;...]..
	0x00, 0x5e, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x36, 0x00, 0x05, 0x00, 0x02, 0x00, 0x00, // .^.......6......
	0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0xf8, 0x00, 0x02, // ................
	0x00, 0x05, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, // .....=.......@..
	0x00, 0x3f, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x09, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, // .?...=.......D..
	0x00, 0x43, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, // .C...=.......H..
	0x00, 0x47, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x06, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, // .G...Q.......~..
	0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x06, 0x00, 0x00, // .@.......Q......
	0x00, 0x7f, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, // .....@.......Q..
	0x00, 0x06, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, // .........@......
	0x00, 0x50, 0x00, 0x07, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x81, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, // .P...........~..
	0x00, 0x7f, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x41, 0x00, 0x06, // .........(...A..
	0x00, 0x34, 0x00, 0x00, 0x00, 0x83, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0x26, 0x00, 0x00, // .4.......2...&..
	0x00, 0x48, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x2d, 0x00, 0x00, 0x00, 0x84, 0x00, 0x00, // .H...=...-......
	0x00, 0x83, 0x00, 0x00, 0x00, 0x90, 0x00, 0x05, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x85, 0x00, 0x00, // ................
	0x00, 0x81, 0x00, 0x00, 0x00, 0x84, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x03, 0x00, 0x52, 0x00, 0x00, // .........>...R..
	0x00, 0x85, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x03, 0x00, 0x56, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, // .....>...V...@..
	0x00, 0x3e, 0x00, 0x03, 0x00, 0x5a, 0x00, 0x00, 0x00, 0x44, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x03, // .>...Z...D...>..
	0x00, 0x5e, 0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0xfd, 0x00, 0x01, 0x00, 0x38, 0x00, 0x01, // .^...H.......8..
	0x00, 0x00, 0x03, 0x01, 0x00, 0x10, 0x00, 0xff, 0xff, 0x80, 0x00,                               // ...........
};
static const bgfx::EmbeddedShader vs_flasher_noclip_st = BGFX_EMBEDDED_SHADER(vs_flasher_noclip_st);

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Build of fragment shader from fs_flasher.sc to fs_flasher_noclip with options: NOCLIP
static const uint8_t fs_flasher_noclip_mtl[6625] =
{
	0x46, 0x53, 0x48, 0x0b, 0xe2, 0xbc, 0x2a, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x05, 0x62, // FSH...*~.......b
	0x61, 0x6c, 0x6c, 0x73, 0x12, 0x08, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x74, // alls...........t
	0x65, 0x78, 0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x41, 0x53, 0x61, 0x6d, 0x70, // ex_flasher_ASamp
	0x6c, 0x65, 0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x74, 0x65, // ler...........te
	0x78, 0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x41, 0x54, 0x65, 0x78, 0x74, 0x75, // x_flasher_ATextu
	0x72, 0x65, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x74, 0x65, 0x78, // re...........tex
	0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x42, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, // _flasher_BSample
	0x72, 0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x74, 0x65, 0x78, 0x5f, // r...........tex_
	0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x42, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // flasher_BTexture
	0x11, 0x01, 0xff, 0xff, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, // ..........(amoun
	0x74, 0x5f, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x61, 0x74, 0x65, // t_blend_modulate
	0x5f, 0x76, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x4d, // _vs_add_flasherM
	0x6f, 0x64, 0x65, 0x12, 0x01, 0xa0, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x61, 0x6c, // ode..........$al
	0x70, 0x68, 0x61, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x42, 0x5f, 0x66, // phaTestValueAB_f
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x42, 0x6c, 0x65, // ilterMode_addBle
	0x6e, 0x64, 0x12, 0x01, 0x90, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x73, 0x74, 0x61, // nd...........sta
	0x74, 0x69, 0x63, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x12, 0x01, // ticColor_Alpha..
	0x80, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x43, 0x65, // .........lightCe
	0x6e, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x12, 0x01, 0xb0, // nter_doShadow...
	0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x66, 0x6c, 0x61, 0x73, // ........tex_flas
	0x68, 0x65, 0x72, 0x5f, 0x41, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, // her_A...........
	0x74, 0x65, 0x78, 0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x42, 0x10, 0x00, 0x00, // tex_flasher_B...
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x72, 0x18, 0x00, 0x00, 0x23, 0x69, 0x6e, 0x63, 0x6c, // .......r...#incl
	0x75, 0x64, 0x65, 0x20, 0x3c, 0x6d, 0x65, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x64, 0x6c, 0x69, // ude <metal_stdli
	0x62, 0x3e, 0x0a, 0x23, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x3c, 0x73, 0x69, 0x6d, // b>.#include <sim
	0x64, 0x2f, 0x73, 0x69, 0x6d, 0x64, 0x2e, 0x68, 0x3e, 0x0a, 0x0a, 0x75, 0x73, 0x69, 0x6e, 0x67, // d/simd.h>..using
	0x20, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x20, 0x6d, 0x65, 0x74, 0x61, 0x6c, //  namespace metal
	0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, // ;..struct _Globa
	0x6c, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x62, // l.{.    float4 b
	0x61, 0x6c, 0x6c, 0x73, 0x5b, 0x38, 0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, // alls[8];.    flo
	0x61, 0x74, 0x34, 0x20, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, // at4 staticColor_
	0x41, 0x6c, 0x70, 0x68, 0x61, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // Alpha;.    float
	0x34, 0x20, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, // 4 alphaTestValue
	0x41, 0x42, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, // AB_filterMode_ad
	0x64, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, // dBlend;.    floa
	0x74, 0x34, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x5f, // t4 amount_blend_
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x5f, // modulate_vs_add_
	0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x3b, 0x0a, 0x20, 0x20, 0x20, // flasherMode;.   
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x43, 0x65, 0x6e, //  float4 lightCen
	0x74, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x3b, 0x0a, 0x7d, 0x3b, // ter_doShadow;.};
	0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // ..constant float
	0x34, 0x20, 0x5f, 0x38, 0x36, 0x36, 0x20, 0x3d, 0x20, 0x7b, 0x7d, 0x3b, 0x0a, 0x63, 0x6f, 0x6e, // 4 _866 = {};.con
	0x73, 0x74, 0x61, 0x6e, 0x74, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x38, 0x39, 0x35, // stant float _895
	0x20, 0x3d, 0x20, 0x7b, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x20, 0x78, //  = {};..struct x
	0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x0a, 0x7b, // latMtlMain_out.{
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, // .    float4 bgfx
	0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x20, 0x5b, 0x5b, 0x63, 0x6f, 0x6c, // _FragData0 [[col
	0x6f, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x73, 0x74, 0x72, // or(0)]];.};..str
	0x75, 0x63, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, // uct xlatMtlMain_
	0x69, 0x6e, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, // in.{.    float3 
	0x76, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x20, 0x5b, 0x5b, 0x75, 0x73, 0x65, // v_tablePos [[use
	0x72, 0x28, 0x6c, 0x6f, 0x63, 0x6e, 0x30, 0x29, 0x5d, 0x5d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, // r(locn0)]];.    
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, // float2 v_texcoor
	0x64, 0x30, 0x20, 0x5b, 0x5b, 0x75, 0x73, 0x65, 0x72, 0x28, 0x6c, 0x6f, 0x63, 0x6e, 0x31, 0x29, // d0 [[user(locn1)
	0x5d, 0x5d, 0x3b, 0x0a, 0x7d, 0x3b, 0x0a, 0x0a, 0x5b, 0x5b, 0x20, 0x65, 0x61, 0x72, 0x6c, 0x79, // ]];.};..[[ early
	0x5f, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x73, 0x20, // _fragment_tests 
	0x5d, 0x5d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, // ]] fragment xlat
	0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x78, 0x6c, 0x61, 0x74, // MtlMain_out xlat
	0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x28, 0x78, 0x6c, 0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, // MtlMain(xlatMtlM
	0x61, 0x69, 0x6e, 0x5f, 0x69, 0x6e, 0x20, 0x69, 0x6e, 0x20, 0x5b, 0x5b, 0x73, 0x74, 0x61, 0x67, // ain_in in [[stag
	0x65, 0x5f, 0x69, 0x6e, 0x5d, 0x5d, 0x2c, 0x20, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x74, // e_in]], constant
	0x20, 0x5f, 0x47, 0x6c, 0x6f, 0x62, 0x61, 0x6c, 0x26, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, //  _Global& _mtl_u
	0x20, 0x5b, 0x5b, 0x62, 0x75, 0x66, 0x66, 0x65, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x2c, 0x20, //  [[buffer(0)]], 
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3e, // texture2d<float>
	0x20, 0x74, 0x65, 0x78, 0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x41, 0x20, 0x5b, //  tex_flasher_A [
	0x5b, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x74, // [texture(0)]], t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x64, 0x3c, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3e, 0x20, // exture2d<float> 
	0x74, 0x65, 0x78, 0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x42, 0x20, 0x5b, 0x5b, // tex_flasher_B [[
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x31, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x73, 0x61, // texture(1)]], sa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, // mpler tex_flashe
	0x72, 0x5f, 0x41, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x5b, 0x5b, 0x73, 0x61, 0x6d, // r_ASampler [[sam
	0x70, 0x6c, 0x65, 0x72, 0x28, 0x30, 0x29, 0x5d, 0x5d, 0x2c, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, // pler(0)]], sampl
	0x65, 0x72, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x42, // er tex_flasher_B
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x20, 0x5b, 0x5b, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // Sampler [[sample
	0x72, 0x28, 0x31, 0x29, 0x5d, 0x5d, 0x29, 0x0a, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x78, 0x6c, // r(1)]]).{.    xl
	0x61, 0x74, 0x4d, 0x74, 0x6c, 0x4d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x20, 0x6f, 0x75, // atMtlMain_out ou
	0x74, 0x20, 0x3d, 0x20, 0x7b, 0x7d, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, // t = {};.    floa
	0x74, 0x34, 0x20, 0x5f, 0x39, 0x30, 0x38, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x64, 0x6f, 0x0a, // t4 _908;.    do.
	0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, //     {.        fl
	0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x38, 0x36, 0x35, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // oat4 _865;.     
	0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x61, 0x6d, //    if (_mtl_u.am
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, // ount_blend_modul
	0x61, 0x74, 0x65, 0x5f, 0x76, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, // ate_vs_add_flash
	0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x7a, 0x20, 0x3c, 0x20, 0x32, 0x2e, 0x30, 0x29, 0x0a, // erMode.z < 2.0).
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //         {.      
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x36, 0x37, //       float4 _67
	0x34, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x5f, // 4 = tex_flasher_
	0x41, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x66, 0x6c, 0x61, // A.sample(tex_fla
	0x73, 0x68, 0x65, 0x72, 0x5f, 0x41, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x69, // sher_ASampler, i
	0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x29, 0x3b, 0x0a, // n.v_texcoord0);.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, //             if (
	0x5f, 0x36, 0x37, 0x34, 0x2e, 0x77, 0x20, 0x3c, 0x3d, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, // _674.w <= _mtl_u
	0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, // .alphaTestValueA
	0x42, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, // B_filterMode_add
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2e, 0x78, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // Blend.x).       
	0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //      {.         
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x39, 0x30, 0x38, 0x20, 0x3d, 0x20, 0x66, 0x6c, //        _908 = fl
	0x6f, 0x61, 0x74, 0x34, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // oat4(0.0);.     
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, //            break
	0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, // ;.            }.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x38, 0x36, 0x35, //             _865
	0x20, 0x3d, 0x20, 0x5f, 0x36, 0x37, 0x34, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //  = _674;.       
	0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, //  }.        else.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //         {.      
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x38, 0x36, 0x35, 0x20, 0x3d, 0x20, 0x5f, 0x38, 0x36, //       _865 = _86
	0x36, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, // 6;.        }.   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x38, 0x36, 0x39, //      float4 _869
	0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, 0x6d, // ;.        if (_m
	0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x65, 0x6e, // tl_u.amount_blen
	0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x73, 0x5f, 0x61, 0x64, // d_modulate_vs_ad
	0x64, 0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x7a, 0x20, // d_flasherMode.z 
	0x3d, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // == 1.0).        
	0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, // {.            fl
	0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x36, 0x39, 0x30, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x5f, // oat4 _690 = tex_
	0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x42, 0x2e, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // flasher_B.sample
	0x28, 0x74, 0x65, 0x78, 0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x42, 0x53, 0x61, // (tex_flasher_BSa
	0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x69, 0x6e, 0x2e, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, // mpler, in.v_texc
	0x6f, 0x6f, 0x72, 0x64, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // oord0);.        
	0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, 0x36, 0x39, 0x30, 0x2e, 0x77, 0x20, 0x3c, //     if (_690.w <
	0x3d, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x54, 0x65, // = _mtl_u.alphaTe
	0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x42, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, // stValueAB_filter
	0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2e, 0x79, 0x29, // Mode_addBlend.y)
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, // .            {. 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, //                _
	0x39, 0x30, 0x38, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x30, 0x2e, 0x30, // 908 = float4(0.0
	0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // );.             
	0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //    break;.      
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //       }.        
	0x20, 0x20, 0x20, 0x20, 0x5f, 0x38, 0x36, 0x39, 0x20, 0x3d, 0x20, 0x5f, 0x36, 0x39, 0x30, 0x3b, //     _869 = _690;
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // .        }.     
	0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //    else.        
	0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x38, // {.            _8
	0x36, 0x39, 0x20, 0x3d, 0x20, 0x5f, 0x38, 0x36, 0x36, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // 69 = _866;.     
	0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, //    }.        flo
	0x61, 0x74, 0x34, 0x20, 0x5f, 0x38, 0x37, 0x31, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // at4 _871;.      
	0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x61, 0x6d, 0x6f, //   if (_mtl_u.amo
	0x75, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x61, // unt_blend_modula
	0x74, 0x65, 0x5f, 0x76, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, // te_vs_add_flashe
	0x72, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x7a, 0x20, 0x3d, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x0a, // rMode.z == 0.0).
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //         {.      
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x38, 0x37, 0x31, 0x20, 0x3d, 0x20, 0x5f, 0x6d, 0x74, //       _871 = _mt
	0x6c, 0x5f, 0x75, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, // l_u.staticColor_
	0x41, 0x6c, 0x70, 0x68, 0x61, 0x20, 0x2a, 0x20, 0x5f, 0x38, 0x36, 0x35, 0x3b, 0x0a, 0x20, 0x20, // Alpha * _865;.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //       }.        
	0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, // else.        {. 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x38, 0x37, 0x31, 0x20, //            _871 
	0x3d, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x43, // = _mtl_u.staticC
	0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, // olor_Alpha;.    
	0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, //     }.        fl
	0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x39, 0x30, 0x34, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // oat4 _904;.     
	0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x61, 0x6d, //    if (_mtl_u.am
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, // ount_blend_modul
	0x61, 0x74, 0x65, 0x5f, 0x76, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, // ate_vs_add_flash
	0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x7a, 0x20, 0x3d, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x29, // erMode.z == 1.0)
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // .        {.     
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x38, //        float4 _8
	0x37, 0x34, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 74;.            
	0x69, 0x66, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, // if (_mtl_u.alpha
	0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x42, 0x5f, 0x66, 0x69, 0x6c, 0x74, // TestValueAB_filt
	0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2e, // erMode_addBlend.
	0x7a, 0x20, 0x3d, 0x3d, 0x20, 0x32, 0x2e, 0x30, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // z == 2.0).      
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //       {.        
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x38, 0x37, 0x34, 0x20, 0x3d, 0x20, 0x5f, //         _874 = _
	0x38, 0x37, 0x31, 0x20, 0x2a, 0x20, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, 0x61, 0x78, 0x28, // 871 * fast::max(
	0x6d, 0x69, 0x78, 0x28, 0x28, 0x5f, 0x38, 0x36, 0x35, 0x20, 0x2a, 0x20, 0x5f, 0x38, 0x36, 0x39, // mix((_865 * _869
	0x29, 0x20, 0x2a, 0x20, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x2d, 0x28, 0x28, // ) * 2.0, fma(-((
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2d, 0x20, 0x5f, 0x38, // float4(1.0) - _8
	0x36, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x32, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, // 65) * 2.0), floa
	0x74, 0x34, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2d, 0x20, 0x5f, 0x38, 0x36, 0x39, 0x2c, 0x20, // t4(1.0) - _869, 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x73, 0x74, // float4(1.0)), st
	0x65, 0x70, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x30, 0x2e, 0x35, 0x29, 0x2c, 0x20, // ep(float4(0.5), 
	0x5f, 0x38, 0x36, 0x35, 0x29, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x30, // _865)), float4(0
	0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // .0));.          
	0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //   }.            
	0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // else.           
	0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //  {.             
	0x20, 0x20, 0x20, 0x5f, 0x38, 0x37, 0x34, 0x20, 0x3d, 0x20, 0x5f, 0x38, 0x37, 0x31, 0x3b, 0x0a, //    _874 = _871;.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, //             }.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, //           float4
	0x20, 0x5f, 0x38, 0x37, 0x37, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //  _877;.         
	0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x61, 0x6c, //    if (_mtl_u.al
	0x70, 0x68, 0x61, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x42, 0x5f, 0x66, // phaTestValueAB_f
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x42, 0x6c, 0x65, // ilterMode_addBle
	0x6e, 0x64, 0x2e, 0x7a, 0x20, 0x3d, 0x3d, 0x20, 0x33, 0x2e, 0x30, 0x29, 0x0a, 0x20, 0x20, 0x20, // nd.z == 3.0).   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, //          {.     
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x38, 0x37, 0x37, 0x20, //            _877 
	0x3d, 0x20, 0x5f, 0x38, 0x37, 0x34, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x5f, 0x38, 0x36, 0x35, 0x20, // = _874 * ((_865 
	0x2a, 0x20, 0x5f, 0x38, 0x36, 0x39, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, // * _869) * _mtl_u
	0x2e, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, // .amount_blend_mo
	0x64, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x66, 0x6c, // dulate_vs_add_fl
	0x61, 0x73, 0x68, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x20, 0x20, // asherMode.x);.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, //           }.    
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, //         else.   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, //          {.     
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x38, 0x37, 0x37, 0x20, //            _877 
	0x3d, 0x20, 0x5f, 0x38, 0x37, 0x34, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // = _874;.        
	0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //     }.          
	0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x38, 0x38, 0x30, 0x3b, 0x0a, 0x20, //   float4 _880;. 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, //            if (_
	0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x54, 0x65, 0x73, 0x74, 0x56, // mtl_u.alphaTestV
	0x61, 0x6c, 0x75, 0x65, 0x41, 0x42, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, // alueAB_filterMod
	0x65, 0x5f, 0x61, 0x64, 0x64, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2e, 0x7a, 0x20, 0x3d, 0x3d, 0x20, // e_addBlend.z == 
	0x31, 0x2e, 0x30, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 1.0).           
	0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //  {.             
	0x20, 0x20, 0x20, 0x5f, 0x38, 0x38, 0x30, 0x20, 0x3d, 0x20, 0x5f, 0x38, 0x37, 0x37, 0x20, 0x2a, //    _880 = _877 *
	0x20, 0x28, 0x5f, 0x38, 0x36, 0x35, 0x20, 0x2b, 0x20, 0x28, 0x5f, 0x38, 0x36, 0x39, 0x20, 0x2a, //  (_865 + (_869 *
	0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, //  _mtl_u.amount_b
	0x6c, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x73, // lend_modulate_vs
	0x5f, 0x61, 0x64, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, // _add_flasherMode
	0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // .x));.          
	0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //   }.            
	0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // else.           
	0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //  {.             
	0x20, 0x20, 0x20, 0x5f, 0x38, 0x38, 0x30, 0x20, 0x3d, 0x20, 0x5f, 0x38, 0x37, 0x37, 0x3b, 0x0a, //    _880 = _877;.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, //             }.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, //           float4
	0x20, 0x5f, 0x39, 0x30, 0x35, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //  _905;.         
	0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x61, 0x6c, //    if (_mtl_u.al
	0x70, 0x68, 0x61, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x42, 0x5f, 0x66, // phaTestValueAB_f
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x42, 0x6c, 0x65, // ilterMode_addBle
	0x6e, 0x64, 0x2e, 0x7a, 0x20, 0x3d, 0x3d, 0x20, 0x34, 0x2e, 0x30, 0x29, 0x0a, 0x20, 0x20, 0x20, // nd.z == 4.0).   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, //          {.     
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x39, 0x30, 0x35, 0x20, //            _905 
	0x3d, 0x20, 0x5f, 0x38, 0x38, 0x30, 0x20, 0x2a, 0x20, 0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x6d, // = _880 * fast::m
	0x61, 0x78, 0x28, 0x66, 0x6d, 0x61, 0x28, 0x5f, 0x38, 0x36, 0x35, 0x20, 0x2d, 0x20, 0x66, 0x6c, // ax(fma(_865 - fl
	0x6f, 0x61, 0x74, 0x34, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // oat4(1.0), float
	0x34, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2d, 0x20, 0x5f, 0x38, 0x36, 0x39, 0x2c, 0x20, 0x66, // 4(1.0) - _869, f
	0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x2c, 0x20, 0x66, 0x6c, 0x6f, // loat4(1.0)), flo
	0x61, 0x74, 0x34, 0x28, 0x30, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // at4(0.0));.     
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //        }.       
	0x20, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //      else.      
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //       {.        
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x39, 0x30, 0x35, 0x20, 0x3d, 0x20, 0x5f, //         _905 = _
	0x38, 0x38, 0x30, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 880;.           
	0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, //  }.            _
	0x39, 0x30, 0x34, 0x20, 0x3d, 0x20, 0x5f, 0x39, 0x30, 0x35, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, // 904 = _905;.    
	0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, //     }.        el
	0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, // se.        {.   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x39, 0x30, 0x34, 0x20, 0x3d, 0x20, //          _904 = 
	0x5f, 0x38, 0x37, 0x31, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, // _871;.        }.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, //         float4 _
	0x39, 0x30, 0x37, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, // 907;.        if 
	0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x43, 0x65, 0x6e, // (_mtl_u.lightCen
	0x74, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x2e, 0x77, 0x20, 0x21, // ter_doShadow.w !
	0x3d, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, // = 0.0).        {
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, // .            flo
	0x61, 0x74, 0x33, 0x20, 0x5f, 0x36, 0x30, 0x36, 0x20, 0x3d, 0x20, 0x69, 0x6e, 0x2e, 0x76, 0x5f, // at3 _606 = in.v_
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x20, 0x2d, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, // tablePos - _mtl_
	0x75, 0x2e, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x6f, // u.lightCenter_do
	0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, // Shadow.xyz;.    
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x36, //         float _6
	0x30, 0x38, 0x20, 0x3d, 0x20, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x28, 0x5f, 0x36, 0x30, 0x36, // 08 = length(_606
	0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, // );.            f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x38, 0x38, 0x38, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // loat _888;.     
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x64, 0x6f, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //        do.      
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //       {.        
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x38, //         float _8
	0x38, 0x32, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 82;.            
	0x20, 0x20, 0x20, 0x20, 0x5f, 0x38, 0x38, 0x32, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x3b, 0x0a, //     _882 = 1.0;.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x62, 0x6f, 0x6f, 0x6c, 0x20, 0x5f, 0x38, 0x38, 0x34, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // bool _884;.     
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, //            float
	0x20, 0x5f, 0x38, 0x38, 0x39, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //  _889;.         
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x39, 0x31, //        float _91
	0x30, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 0;.             
	0x20, 0x20, 0x20, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x38, 0x38, 0x31, 0x20, 0x3d, 0x20, 0x30, 0x3b, //    int _881 = 0;
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // .               
	0x20, 0x66, 0x6f, 0x72, 0x20, 0x28, 0x3b, 0x3b, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //  for (;;).      
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, //           {.    
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x69, 0x66, 0x20, 0x28, 0x5f, 0x38, 0x38, 0x31, 0x20, 0x3c, 0x20, 0x38, 0x29, 0x0a, 0x20, 0x20, // if (_881 < 8).  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //   {.            
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, //             if (
	0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x62, 0x61, 0x6c, 0x6c, 0x73, 0x5b, 0x5f, 0x38, 0x38, // _mtl_u.balls[_88
	0x31, 0x5d, 0x2e, 0x77, 0x20, 0x3d, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x0a, 0x20, 0x20, 0x20, // 1].w == 0.0).   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //      {.         
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x20, 0x20, 0x20, 0x5f, 0x38, 0x38, 0x39, 0x20, 0x3d, 0x20, 0x5f, 0x38, 0x38, 0x32, 0x3b, 0x0a, //    _889 = _882;.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x38, 0x38, 0x34, //             _884
	0x20, 0x3d, 0x20, 0x74, 0x72, 0x75, 0x65, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //  = true;.       
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, //      break;.    
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //     }.          
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, //               fl
	0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x37, 0x37, 0x36, 0x20, 0x3d, 0x20, 0x5f, 0x6d, 0x74, 0x6c, // oat3 _776 = _mtl
	0x5f, 0x75, 0x2e, 0x62, 0x61, 0x6c, 0x6c, 0x73, 0x5b, 0x5f, 0x38, 0x38, 0x31, 0x5d, 0x2e, 0x78, // _u.balls[_881].x
	0x79, 0x7a, 0x20, 0x2d, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x6c, 0x69, 0x67, 0x68, // yz - _mtl_u.ligh
	0x74, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, // tCenter_doShadow
	0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // .xyz;.          
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, //               fl
	0x6f, 0x61, 0x74, 0x20, 0x5f, 0x37, 0x38, 0x30, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x5f, // oat _780 = dot(_
	0x37, 0x37, 0x36, 0x2c, 0x20, 0x5f, 0x36, 0x30, 0x36, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x5f, 0x36, // 776, _606) / (_6
	0x30, 0x38, 0x20, 0x2a, 0x20, 0x5f, 0x36, 0x30, 0x38, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, // 08 * _608);.    
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x28, 0x5f, 0x37, 0x38, 0x30, 0x20, 0x3e, 0x20, //     if ((_780 > 
	0x30, 0x2e, 0x30, 0x29, 0x20, 0x26, 0x26, 0x20, 0x28, 0x5f, 0x37, 0x38, 0x30, 0x20, 0x3c, 0x20, // 0.0) && (_780 < 
	0x31, 0x2e, 0x30, 0x29, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 1.0)).          
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, //               {.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, //             floa
	0x74, 0x20, 0x5f, 0x37, 0x39, 0x35, 0x20, 0x3d, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x2d, 0x35, 0x2e, // t _795 = fma(-5.
	0x30, 0x2c, 0x20, 0x5f, 0x37, 0x38, 0x30, 0x2c, 0x20, 0x35, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, // 0, _780, 5.0);. 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x39, 0x31, 0x30, 0x20, //            _910 
	0x3d, 0x20, 0x5f, 0x38, 0x38, 0x32, 0x20, 0x2a, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x66, 0x61, 0x73, // = _882 * fma(fas
	0x74, 0x3a, 0x3a, 0x63, 0x6c, 0x61, 0x6d, 0x70, 0x28, 0x66, 0x6d, 0x61, 0x28, 0x5f, 0x37, 0x37, // t::clamp(fma(_77
	0x36, 0x2e, 0x78, 0x2c, 0x20, 0x5f, 0x37, 0x37, 0x36, 0x2e, 0x78, 0x2c, 0x20, 0x5f, 0x37, 0x37, // 6.x, _776.x, _77
	0x36, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x5f, 0x37, 0x37, 0x36, 0x2e, 0x79, 0x29, 0x20, 0x2f, 0x20, // 6.y * _776.y) / 
	0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x62, 0x61, 0x6c, 0x6c, 0x73, 0x5b, 0x5f, 0x38, // (_mtl_u.balls[_8
	0x38, 0x31, 0x5d, 0x2e, 0x77, 0x20, 0x2a, 0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x62, // 81].w * _mtl_u.b
	0x61, 0x6c, 0x6c, 0x73, 0x5b, 0x5f, 0x38, 0x38, 0x31, 0x5d, 0x2e, 0x77, 0x29, 0x2c, 0x20, 0x30, // alls[_881].w), 0
	0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x2c, 0x20, 0x66, 0x6d, 0x61, 0x28, 0x30, 0x2e, // .0, 1.0), fma(0.
	0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x37, 0x36, 0x31, 0x35, 0x38, 0x31, 0x34, 0x32, 0x30, // 8999999761581420
	0x38, 0x39, 0x38, 0x34, 0x33, 0x37, 0x35, 0x2c, 0x20, 0x73, 0x6d, 0x6f, 0x6f, 0x74, 0x68, 0x73, // 8984375, smooths
	0x74, 0x65, 0x70, 0x28, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x62, 0x61, 0x6c, 0x6c, 0x73, // tep(_mtl_u.balls
	0x5b, 0x5f, 0x38, 0x38, 0x31, 0x5d, 0x2e, 0x77, 0x20, 0x2d, 0x20, 0x5f, 0x37, 0x39, 0x35, 0x2c, // [_881].w - _795,
	0x20, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x62, 0x61, 0x6c, 0x6c, 0x73, 0x5b, 0x5f, 0x38, //  _mtl_u.balls[_8
	0x38, 0x31, 0x5d, 0x2e, 0x77, 0x20, 0x2b, 0x20, 0x5f, 0x37, 0x39, 0x35, 0x2c, 0x20, 0x6c, 0x65, // 81].w + _795, le
	0x6e, 0x67, 0x74, 0x68, 0x28, 0x5f, 0x37, 0x37, 0x36, 0x20, 0x2d, 0x20, 0x28, 0x5f, 0x36, 0x30, // ngth(_776 - (_60
	0x36, 0x20, 0x2a, 0x20, 0x5f, 0x37, 0x38, 0x30, 0x29, 0x29, 0x29, 0x2c, 0x20, 0x2d, 0x30, 0x2e, // 6 * _780))), -0.
	0x38, 0x39, 0x39, 0x39, 0x39, 0x39, 0x39, 0x37, 0x36, 0x31, 0x35, 0x38, 0x31, 0x34, 0x32, 0x30, // 8999999761581420
	0x38, 0x39, 0x38, 0x34, 0x33, 0x37, 0x35, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, // 8984375), 1.0);.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //         }.      
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //   else.         
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, //                {
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // .               
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x39, 0x31, //              _91
	0x30, 0x20, 0x3d, 0x20, 0x5f, 0x38, 0x38, 0x32, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 0 = _882;.      
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //   }.            
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x38, 0x38, 0x32, //             _882
	0x20, 0x3d, 0x20, 0x5f, 0x39, 0x31, 0x30, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //  = _910;.       
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x20, 0x5f, 0x38, 0x38, 0x31, 0x2b, 0x2b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //  _881++;.       
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x20, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, //  continue;.     
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, //                }
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // .               
	0x20, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //      else.      
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, //               {.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x38, 0x38, 0x39, 0x20, 0x3d, 0x20, 0x5f, //         _889 = _
	0x38, 0x39, 0x35, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // 895;.           
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x38, 0x38, //              _88
	0x34, 0x20, 0x3d, 0x20, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // 4 = false;.     
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //    break;.      
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, //               }.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // }.              
	0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, 0x38, 0x38, 0x34, 0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, //   if (_884).    
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, //             {.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x20, 0x20, 0x5f, 0x38, 0x38, 0x38, 0x20, 0x3d, 0x20, 0x5f, 0x38, 0x38, 0x39, 0x3b, 0x0a, 0x20, //   _888 = _889;. 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //                 
	0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //    break;.      
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, //           }.    
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x38, 0x38, 0x38, //             _888
	0x20, 0x3d, 0x20, 0x5f, 0x38, 0x38, 0x32, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //  = _882;.       
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, //          break;.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x20, 0x77, 0x68, //             } wh
	0x69, 0x6c, 0x65, 0x28, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, // ile(false);.    
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x33, 0x20, 0x5f, //         float3 _
	0x36, 0x31, 0x38, 0x20, 0x3d, 0x20, 0x5f, 0x39, 0x30, 0x34, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2a, // 618 = _904.xyz *
	0x20, 0x5f, 0x38, 0x38, 0x38, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //  _888;.         
	0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x38, 0x35, 0x32, 0x20, 0x3d, //    float4 _852 =
	0x20, 0x5f, 0x39, 0x30, 0x34, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //  _904;.         
	0x20, 0x20, 0x20, 0x5f, 0x38, 0x35, 0x32, 0x2e, 0x78, 0x20, 0x3d, 0x20, 0x5f, 0x36, 0x31, 0x38, //    _852.x = _618
	0x2e, 0x78, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // .x;.            
	0x5f, 0x38, 0x35, 0x32, 0x2e, 0x79, 0x20, 0x3d, 0x20, 0x5f, 0x36, 0x31, 0x38, 0x2e, 0x79, 0x3b, // _852.y = _618.y;
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x38, 0x35, // .            _85
	0x32, 0x2e, 0x7a, 0x20, 0x3d, 0x20, 0x5f, 0x36, 0x31, 0x38, 0x2e, 0x7a, 0x3b, 0x0a, 0x20, 0x20, // 2.z = _618.z;.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x39, 0x30, 0x37, 0x20, 0x3d, //           _907 =
	0x20, 0x5f, 0x38, 0x35, 0x32, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, //  _852;.        }
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, // .        else.  
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //       {.        
	0x20, 0x20, 0x20, 0x20, 0x5f, 0x39, 0x30, 0x37, 0x20, 0x3d, 0x20, 0x5f, 0x39, 0x30, 0x34, 0x3b, //     _907 = _904;
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, // .        }.     
	0x20, 0x20, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x39, 0x30, 0x39, 0x3b, 0x0a, //    float4 _909;.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x69, 0x66, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x6c, //         if (_mtl
	0x5f, 0x75, 0x2e, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, // _u.alphaTestValu
	0x65, 0x41, 0x42, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x61, // eAB_filterMode_a
	0x64, 0x64, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2e, 0x77, 0x20, 0x3d, 0x3d, 0x20, 0x30, 0x2e, 0x30, // ddBlend.w == 0.0
	0x29, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, 0x0a, 0x20, 0x20, 0x20, 0x20, // ).        {.    
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x39, 0x30, 0x39, 0x20, 0x3d, 0x20, 0x66, //         _909 = f
	0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x39, 0x30, 0x37, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, // loat4(_907.xyz, 
	0x66, 0x61, 0x73, 0x74, 0x3a, 0x3a, 0x63, 0x6c, 0x61, 0x6d, 0x70, 0x28, 0x5f, 0x39, 0x30, 0x37, // fast::clamp(_907
	0x2e, 0x77, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, // .w, 0.0, 1.0));.
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //         }.      
	0x20, 0x20, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7b, //   else.        {
	0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x39, 0x30, // .            _90
	0x39, 0x20, 0x3d, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x39, 0x30, 0x37, 0x2e, // 9 = float4(_907.
	0x78, 0x79, 0x7a, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x2d, 0x5f, 0x6d, 0x74, 0x6c, 0x5f, 0x75, 0x2e, // xyz * ((-_mtl_u.
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x64, // amount_blend_mod
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x66, 0x6c, 0x61, // ulate_vs_add_fla
	0x73, 0x68, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x79, 0x29, 0x20, 0x2a, 0x20, 0x5f, 0x39, // sherMode.y) * _9
	0x30, 0x37, 0x2e, 0x77, 0x29, 0x2c, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2f, 0x20, 0x5f, 0x6d, // 07.w), (1.0 / _m
	0x74, 0x6c, 0x5f, 0x75, 0x2e, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x65, 0x6e, // tl_u.amount_blen
	0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x73, 0x5f, 0x61, 0x64, // d_modulate_vs_ad
	0x64, 0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x79, 0x29, // d_flasherMode.y)
	0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, //  - 1.0);.       
	0x20, 0x7d, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5f, 0x39, 0x30, 0x38, 0x20, //  }.        _908 
	0x3d, 0x20, 0x5f, 0x39, 0x30, 0x39, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // = _909;.        
	0x62, 0x72, 0x65, 0x61, 0x6b, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x7d, 0x20, 0x77, 0x68, 0x69, // break;.    } whi
	0x6c, 0x65, 0x28, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x6f, // le(false);.    o
	0x75, 0x74, 0x2e, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, // ut.bgfx_FragData
	0x30, 0x20, 0x3d, 0x20, 0x5f, 0x39, 0x30, 0x38, 0x3b, 0x0a, 0x20, 0x20, 0x20, 0x20, 0x72, 0x65, // 0 = _908;.    re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x6f, 0x75, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x0a, 0x00, 0x00, 0x00, // turn out;.}.....
	0x01,                                                                                           // .
};
static const uint8_t fs_flasher_noclip_essl[8802] =
{
	0x46, 0x53, 0x48, 0x0b, 0xe2, 0xbc, 0x2a, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4f, 0x22, // FSH...*~......O"
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x33, 0x32, 0x30, 0x20, 0x65, // ..#version 320 e
	0x73, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, // s.#define attrib
	0x75, 0x74, 0x65, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x76, // ute in.#define v
	0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x69, 0x6e, 0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, // arying in.precis
	0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x3b, // ion highp float;
	0x0a, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x68, 0x69, 0x67, 0x68, 0x70, // .precision highp
	0x20, 0x69, 0x6e, 0x74, 0x3b, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x73, 0x68, //  int;.#define sh
	0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, // adow2D(_sampler,
	0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, //  _coord) texture
	0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, // (_sampler, _coor
	0x64, 0x29, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x73, 0x68, 0x61, 0x64, 0x6f, // d).#define shado
	0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // w2DProj(_sampler
	0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // , _coord) textur
	0x65, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, // eProj(_sampler, 
	0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x0a, 0x6f, 0x75, 0x74, 0x20, 0x6d, 0x65, 0x64, 0x69, // _coord).out medi
	0x75, 0x6d, 0x70, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, // ump vec4 bgfx_Fr
	0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, // agColor;.varying
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6f, 0x73, //  vec3 v_tablePos
	0x3b, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, // ;.varying vec2 v
	0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, // _texcoord0;.vec3
	0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, //  instMul(vec3 _v
	0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, // ec, mat3 _mtx) {
	0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, //  return ( (_vec)
	0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, //  * (_mtx) ); }.v
	0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x33, // ec3 instMul(mat3
	0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, //  _mtx, vec3 _vec
	0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, // ) { return ( (_m
	0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, // tx) * (_vec) ); 
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, // }.vec4 instMul(v
	0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, // ec4 _vec, mat4 _
	0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, // mtx) { return ( 
	0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, // (_vec) * (_mtx) 
	0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, // ); }.vec4 instMu
	0x6c, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, // l(mat4 _mtx, vec
	0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // 4 _vec) { return
	0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, //  ( (_mtx) * (_ve
	0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x63, // c) ); }.float rc
	0x70, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // p(float _a) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, // turn 1.0/_a; }.v
	0x65, 0x63, 0x32, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x32, 0x20, 0x5f, 0x61, 0x29, // ec2 rcp(vec2 _a)
	0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x31, //  { return vec2(1
	0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, // .0)/_a; }.vec3 r
	0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, // cp(vec3 _a) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, // turn vec3(1.0)/_
	0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, // a; }.vec4 rcp(ve
	0x63, 0x34, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // c4 _a) { return 
	0x76, 0x65, 0x63, 0x34, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, // vec4(1.0)/_a; }.
	0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, // vec2 vec2_splat(
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, // float _x) { retu
	0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, // rn vec2(_x, _x);
	0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, //  }.vec3 vec3_spl
	0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, // at(float _x) { r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, // eturn vec3(_x, _
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x76, // x, _x); }.vec4 v
	0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // ec4_splat(float 
	0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, // _x) { return vec
	0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, // 4(_x, _x, _x, _x
	0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, // ); }.uvec2 uvec2
	0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, // _splat(uint _x) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, // { return uvec2(_
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x33, 0x20, // x, _x); }.uvec3 
	0x75, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, // uvec3_splat(uint
	0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, //  _x) { return uv
	0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, // ec3(_x, _x, _x);
	0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, //  }.uvec4 uvec4_s
	0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, // plat(uint _x) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, // return uvec4(_x,
	0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, //  _x, _x, _x); }.
	0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, // mat4 mtxFromRows
	0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, // (vec4 _0, vec4 _
	0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // 1, vec4 _2, vec4
	0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, //  _3).{.return tr
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, // anspose(mat4(_0,
	0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x20, 0x29, 0x3b, 0x0a, //  _1, _2, _3) );.
	0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, // }.mat4 mtxFromCo
	0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // ls(vec4 _0, vec4
	0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x76, 0x65, //  _1, vec4 _2, ve
	0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // c4 _3).{.return 
	0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, // mat4(_0, _1, _2,
	0x20, 0x5f, 0x33, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, //  _3);.}.mat3 mtx
	0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, // FromRows(vec3 _0
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // , vec3 _1, vec3 
	0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x74, 0x72, 0x61, // _2).{.return tra
	0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, // nspose(mat3(_0, 
	0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, // _1, _2) );.}.mat
	0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, // 3 mtxFromCols(ve
	0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, // c3 _0, vec3 _1, 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // vec3 _2).{.retur
	0x6e, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, // n mat3(_0, _1, _
	0x32, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, // 2);.}.uniform ve
	0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x63, 0x74, 0x3b, 0x0a, 0x75, // c4 u_viewRect;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, // niform vec4 u_vi
	0x65, 0x77, 0x54, 0x65, 0x78, 0x65, 0x6c, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, // ewTexel;.uniform
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, //  mat4 u_view;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, // iform mat4 u_inv
	0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, // View;.uniform ma
	0x74, 0x34, 0x20, 0x75, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, // t4 u_proj;.unifo
	0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x50, 0x72, 0x6f, // rm mat4 u_invPro
	0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, // j;.uniform mat4 
	0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // u_viewProj;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, // orm mat4 u_invVi
	0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, // ewProj;.uniform 
	0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x5b, 0x33, 0x32, 0x5d, // mat4 u_model[32]
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, // ;.uniform mat4 u
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // _modelView;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, // orm mat4 u_model
	0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // ViewProj;.unifor
	0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x52, 0x65, // m vec4 u_alphaRe
	0x66, 0x34, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x66, // f4;.float sqr( f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // loat v).{.return
	0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x73, 0x71, 0x72, //  v*v;.}.vec2 sqr
	0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, // ( vec2 v).{.retu
	0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x73, // rn v*v;.}.vec3 s
	0x71, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // qr( vec3 v).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, // turn v*v;.}.vec3
	0x20, 0x6d, 0x75, 0x6c, 0x5f, 0x77, 0x31, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x2c, //  mul_w1( vec3 v,
	0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, //  mat4 m).{.retur
	0x6e, 0x20, 0x76, 0x2e, 0x78, 0x2a, 0x6d, 0x5b, 0x30, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, // n v.x*m[0].xyz +
	0x20, 0x28, 0x76, 0x2e, 0x79, 0x2a, 0x6d, 0x5b, 0x31, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, //  (v.y*m[1].xyz +
	0x20, 0x28, 0x76, 0x2e, 0x7a, 0x2a, 0x6d, 0x5b, 0x32, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2b, //  (v.z*m[2].xyz +
	0x20, 0x6d, 0x5b, 0x33, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, //  m[3].xyz));.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, // loat acos_approx
	0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, // _divPI( float v)
	0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, // .{.float x = abs
	0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, // (v);.if(1. - x <
	0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, // = 0.000061035156
	0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, // 25).return (v >=
	0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x3b, 0x0a, //  0.) ? 0. : 1.;.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, // float res = ((-0
	0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, // .155972/3.141592
	0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, // 6535897932384626
	0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, // 433832795) * x +
	0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, //  (1.56467/3.1415
	0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, // 9265358979323846
	0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, // 26433832795) ) *
	0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, //  sqrt(1. - x);.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, // eturn (v >= 0.) 
	0x3f, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, // ? res : 1. - res
	0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, // ;.}.float atan2_
	0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x20, 0x66, // approx_div2PI( f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x79, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x29, // loat y, float x)
	0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3d, // .{.float abs_y =
	0x20, 0x61, 0x62, 0x73, 0x28, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, //  abs(y);.float a
	0x62, 0x73, 0x5f, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x78, 0x29, 0x3b, 0x0a, 0x69, // bs_x = abs(x);.i
	0x66, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, // f(abs_x <= 0.000
	0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x20, 0x26, 0x26, 0x20, 0x61, // 06103515625 && a
	0x62, 0x73, 0x5f, 0x79, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, // bs_y <= 0.000061
	0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // 03515625).return
	0x20, 0x30, 0x2e, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x20, 0x3d, 0x20, 0x28, //  0.;.float r = (
	0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2d, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, 0x20, 0x2f, // abs_x - abs_y) /
	0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2b, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x29, //  (abs_x + abs_y)
	0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3d, 0x20, // ;.float angle = 
	0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x28, 0x33, 0x2e, 0x2f, // ((x < 0.) ? (3./
	0x38, 0x2e, 0x29, 0x20, 0x3a, 0x20, 0x28, 0x31, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x29, 0x0a, 0x2b, // 8.) : (1./8.)).+
	0x20, 0x28, 0x30, 0x2e, 0x32, 0x31, 0x31, 0x38, 0x36, 0x38, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, //  (0.211868 /(2.*
	0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, // 3.14159265358979
	0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, // 3238462643383279
	0x35, 0x29, 0x20, 0x2a, 0x20, 0x72, 0x20, 0x2a, 0x20, 0x72, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x39, // 5) * r * r - 0.9
	0x38, 0x37, 0x33, 0x30, 0x35, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, // 87305 /(2.*3.141
	0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, // 5926535897932384
	0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x29, 0x20, 0x2a, // 626433832795)) *
	0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x72, 0x20, //  ((x < 0.) ? -r 
	0x3a, 0x20, 0x72, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x79, 0x20, // : r);.return (y 
	0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x20, 0x3a, // < 0.) ? -angle :
	0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, //  angle;.}.float 
	0x61, 0x73, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, // asin_approx_divP
	0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, // I( float v).{.fl
	0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, // oat x = abs(v);.
	0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, // if(1. - x <= 0.0
	0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, // 0006103515625).r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, // eturn (v >= 0.) 
	0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, 0x3b, 0x0a, 0x66, 0x6c, // ? 0.5 : -0.5;.fl
	0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, // oat res = ((-0.1
	0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, // 55972/3.14159265
	0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, // 3589793238462643
	0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, // 3832795) * x + (
	0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, // 1.56467/3.141592
	0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, // 6535897932384626
	0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, // 433832795) ) * s
	0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, // qrt(1. - x);.ret
	0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, // urn (v >= 0.) ? 
	0x30, 0x2e, 0x35, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, // 0.5 - res : -0.5
	0x20, 0x2b, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, //  + res;.}.vec2 r
	0x61, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x63, 0x74, 0x61, 0x6e, // ay_to_equirectan
	0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x75, 0x76, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, // gular_uv( vec3 r
	0x61, 0x79, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, // ay).{.return vec
	0x32, 0x28, 0x0a, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x61, 0x74, 0x61, 0x6e, 0x32, 0x5f, 0x61, // 2(.0.5 + atan2_a
	0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, 0x28, 0x72, 0x61, 0x79, // pprox_div2PI(ray
	0x2e, 0x79, 0x2c, 0x20, 0x72, 0x61, 0x79, 0x2e, 0x78, 0x29, 0x2c, 0x0a, 0x61, 0x63, 0x6f, 0x73, // .y, ray.x),.acos
	0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x72, 0x61, // _approx_divPI(ra
	0x79, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, // y.z));.}.float I
	0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, // nvsRGB( float co
	0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // lor).{.if (color
	0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, 0x34, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, //  <= 0.04045).ret
	0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, // urn color * (1.0
	0x2f, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, // /12.92);.else.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, // turn pow(color *
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, 0x20, 0x2b, 0x20, 0x28, //  (1.0/1.055) + (
	0x30, 0x2e, 0x30, 0x35, 0x35, 0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, 0x2c, 0x20, 0x32, 0x2e, // 0.055/1.055), 2.
	0x34, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x52, // 4);.}.float InvR
	0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, // ec709( float col
	0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, // or).{.if (color 
	0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x38, 0x31, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // <= 0.081).return
	0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x34, 0x2e, //  color * (1.0/4.
	0x35, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // 5);.else.return 
	0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, // pow(color * (1.0
	0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x39, 0x39, // /1.099) + (0.099
	0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x30, 0x2e, 0x34, // /1.099), 1.0/0.4
	0x35, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x47, // 5);.}.float InvG
	0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // amma( float colo
	0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x49, 0x6e, 0x76, 0x73, // r).{.return Invs
	0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // RGB(color);.}.ve
	0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, // c3 InvGamma( vec
	0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // 3 color).{.retur
	0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, // n vec3(InvGamma(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, // color.x),InvGamm
	0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x49, 0x6e, 0x76, 0x47, 0x61, // a(color.y),InvGa
	0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, // mma(color.z));.}
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, // .vec3 InvToneMap
	0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, // ( vec3 color).{.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x20, 0x3d, 0x20, // float inv_2bh = 
	0x30, 0x2e, 0x35, 0x2f, 0x30, 0x2e, 0x32, 0x35, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // 0.5/0.25;.float 
	0x62, 0x68, 0x20, 0x3d, 0x20, 0x34, 0x2e, 0x30, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2d, 0x20, // bh = 4.0*0.25 - 
	0x32, 0x2e, 0x30, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x63, 0x6f, 0x6c, // 2.0;.return (col
	0x6f, 0x72, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2b, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, // or - 1.0 + sqrt(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2a, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2b, 0x20, 0x62, // color*(color + b
	0x68, 0x29, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x2a, 0x69, 0x6e, 0x76, 0x5f, 0x32, // h) + 1.0))*inv_2
	0x62, 0x68, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x52, 0x47, 0x42, // bh;.}.float sRGB
	0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, // ( float f).{.flo
	0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, // at s;.if (f <= 0
	0x2e, 0x30, 0x30, 0x33, 0x31, 0x33, 0x30, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x32, // .0031308).s = 12
	0x2e, 0x39, 0x32, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, // .92 * f;.else.s 
	0x3d, 0x20, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, // = 1.055 * pow(f,
	0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x34, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, 0x30, 0x35, //  1.0/2.4) - 0.05
	0x35, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, // 5;.return s;.}.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x20, 0x66, 0x6c, 0x6f, // loat Rec709( flo
	0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, // at f).{.float s;
	0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x31, 0x38, 0x29, // .if (f <= 0.018)
	0x0a, 0x73, 0x20, 0x3d, 0x20, 0x34, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, // .s = 4.5 * f;.el
	0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x20, 0x2a, 0x20, 0x70, // se.s = 1.099 * p
	0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x20, 0x2d, 0x20, 0x30, 0x2e, // ow(f, 0.45) - 0.
	0x30, 0x39, 0x39, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, 0x0a, 0x7d, // 099;.return s;.}
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, // .float FBGamma( 
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, // float color).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // eturn sRGB(color
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, // );.}.vec2 FBGamm
	0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, // a( vec2 color).{
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x46, 0x42, 0x47, // .return vec2(FBG
	0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, // amma(color.x),FB
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x29, 0x3b, // Gamma(color.y));
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, // .}.vec3 FBGamma(
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, //  vec3 color).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, // eturn vec3(FBGam
	0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, // ma(color.x),FBGa
	0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x46, 0x42, 0x47, // mma(color.y),FBG
	0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, // amma(color.z));.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x32, 0x32, // }.vec3 FBGamma22
	0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, // ( vec3 color).{.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x70, 0x6f, 0x77, 0x28, // return vec3(pow(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, // color.x, 1.0/2.2
	0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x2c, 0x20, 0x31, // ),pow(color.y, 1
	0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // .0/2.2),pow(colo
	0x72, 0x2e, 0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x29, 0x3b, 0x0a, // r.z, 1.0/2.2));.
	0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, // }.float FBToneMa
	0x70, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // p( float l).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x6c, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, // turn l * ((l*0.2
	0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, // 5 + 1.0) / (l + 
	0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, // 1.0));.}.vec2 FB
	0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, // ToneMap( vec2 co
	0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, // lor).{.float l =
	0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x32, 0x28, //  dot(color,vec2(
	0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, // 0.176204+0.01081
	0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2b, // 09*0.5,0.812985+
	0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x29, 0x29, 0x3b, // 0.0108109*0.5));
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, // .return color * 
	0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, // ((l*0.25 + 1.0) 
	0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // / (l + 1.0));.}.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, // vec3 FBToneMap( 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, // vec3 color).{.fl
	0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, // oat l = dot(colo
	0x72, 0x2c, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2c, // r,vec3(0.176204,
	0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2c, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, // 0.812985,0.01081
	0x30, 0x39, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, // 09));.return col
	0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, // or * ((l*0.25 + 
	0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, // 1.0) / (l + 1.0)
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, // );.}.vec4 Additi
	0x76, 0x65, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, // ve( vec4 cBase, 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, // vec4 cBlend, flo
	0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // at percent).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2b, 0x20, 0x63, 0x42, 0x6c, // turn cBase + cBl
	0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // end*percent;.}.v
	0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, // ec3 Screen ( vec
	0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, // 3 cBase, vec3 cB
	0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, // lend).{.return 1
	0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, // .0 - (1.0 - cBas
	0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, // e) * (1.0 - cBle
	0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, // nd);.}.vec4 Scre
	0x65, 0x6e, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, // en ( vec4 cBase,
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, //  vec4 cBlend).{.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, // return 1.0 - (1.
	0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, // 0 - cBase) * (1.
	0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // 0 - cBlend);.}.v
	0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, // ec3 ScreenHDR ( 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, // vec3 cBase, vec3
	0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, //  cBlend).{.retur
	0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, // n max(1.0 - (1.0
	0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, //  - cBase) * (1.0
	0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, //  - cBlend), vec3
	0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, // (0.,0.,0.));.}.v
	0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, // ec4 ScreenHDR ( 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // vec4 cBase, vec4
	0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, //  cBlend).{.retur
	0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, // n max(1.0 - (1.0
	0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, //  - cBase) * (1.0
	0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, //  - cBlend), vec4
	0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, // (0.,0.,0.,0.));.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x20, // }.vec4 Multiply 
	0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, // ( vec4 cBase, ve
	0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // c4 cBlend, float
	0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, //  percent).{.retu
	0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2a, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, // rn cBase * cBlen
	0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // d*percent;.}.vec
	0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, // 4 Overlay ( vec4
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, //  cBase, vec4 cBl
	0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, // end).{.vec4 cNew
	0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, //  = step(0.5, cBa
	0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x69, 0x78, 0x28, // se);.cNew = mix(
	0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, // cBase*cBlend*2.0
	0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, // , 1.0-2.0*(1.0-c
	0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, // Base)*(1.0-cBlen
	0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // d), cNew);.retur
	0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, // n cNew;.}.vec4 O
	0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, // verlayHDR ( vec4
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, //  cBase, vec4 cBl
	0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x4e, 0x65, 0x77, // end).{.vec4 cNew
	0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, 0x20, 0x63, 0x42, 0x61, //  = step(0.5, cBa
	0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x6d, 0x61, 0x78, 0x28, // se);.cNew = max(
	0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, // mix(cBase*cBlend
	0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, // *2.0, 1.0-2.0*(1
	0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, // .0-cBase)*(1.0-c
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x2c, 0x20, 0x76, // Blend), cNew), v
	0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, // ec4(0.,0.,0.,0.)
	0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, // );.return cNew;.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x73, 0x5f, 0x68, 0x65, 0x6d, 0x69, 0x73, // }.vec3 cos_hemis
	0x70, 0x68, 0x65, 0x72, 0x65, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x28, 0x20, 0x76, 0x65, // phere_sample( ve
	0x63, 0x32, 0x20, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x68, // c2 t).{.float ph
	0x69, 0x20, 0x3d, 0x20, 0x74, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x28, 0x32, 0x2e, 0x30, 0x2a, 0x33, // i = t.y * (2.0*3
	0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, // .141592653589793
	0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, // 2384626433832795
	0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, // );.float cosThet
	0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x74, // a = sqrt(1.0 - t
	0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, // .x);.float sinTh
	0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x74, 0x2e, 0x78, 0x29, 0x3b, // eta = sqrt(t.x);
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x70, 0x2c, 0x63, 0x70, 0x3b, 0x0a, 0x7b, 0x73, // .float sp,cp;.{s
	0x70, 0x3d, 0x73, 0x69, 0x6e, 0x28, 0x70, 0x68, 0x69, 0x29, 0x3b, 0x63, 0x70, 0x3d, 0x63, 0x6f, // p=sin(phi);cp=co
	0x73, 0x28, 0x70, 0x68, 0x69, 0x29, 0x3b, 0x7d, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // s(phi);};.return
	0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x63, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, //  vec3(cp * sinTh
	0x65, 0x74, 0x61, 0x2c, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x73, // eta, cosTheta, s
	0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x29, 0x3b, 0x0a, 0x7d, // p * sinTheta);.}
	0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x6f, 0x5f, // .vec3 rotate_to_
	0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, 0x28, 0x20, 0x76, 0x65, // vector_upper( ve
	0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6e, 0x6f, 0x72, // c3 vec, vec3 nor
	0x6d, 0x61, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, // mal).{.if(normal
	0x2e, 0x79, 0x20, 0x3e, 0x20, 0x2d, 0x30, 0x2e, 0x39, 0x39, 0x39, 0x39, 0x39, 0x29, 0x0a, 0x7b, // .y > -0.99999).{
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x28, // .float h = 1.0/(
	0x31, 0x2e, 0x30, 0x2b, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x29, 0x3b, 0x0a, 0x66, // 1.0+normal.y);.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x20, 0x3d, 0x20, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, // loat hz = h*norm
	0x61, 0x6c, 0x2e, 0x7a, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x78, 0x20, // al.z;.float hzx 
	0x3d, 0x20, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x3b, 0x0a, 0x72, // = hz*normal.x;.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x0a, 0x76, 0x65, 0x63, 0x2e, // eturn vec3(.vec.
	0x78, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x7a, // x * (normal.y+hz
	0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x29, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, // *normal.z) + vec
	0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, // .y * normal.x - 
	0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x2c, 0x0a, 0x76, 0x65, 0x63, // vec.z * hzx,.vec
	0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x2d, 0x20, // .y * normal.y - 
	0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, // vec.x * normal.x
	0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, //  - vec.z * norma
	0x6c, 0x2e, 0x7a, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, // l.z,.vec.y * nor
	0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, // mal.z - vec.x * 
	0x68, 0x7a, 0x78, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x28, 0x6e, // hzx + vec.z * (n
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, // ormal.y+h*normal
	0x2e, 0x78, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x29, 0x29, 0x3b, 0x0a, 0x7d, // .x*normal.x));.}
	0x0a, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x2d, 0x76, 0x65, // .else return -ve
	0x63, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, // c;.}.uniform vec
	0x34, 0x20, 0x62, 0x61, 0x6c, 0x6c, 0x73, 0x5b, 0x38, 0x5d, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // 4 balls[8];.floa
	0x74, 0x20, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x62, 0x61, 0x6c, 0x6c, // t get_light_ball
	0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x69, // _shadow( vec3 li
	0x67, 0x68, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x69, // ght_pos, vec3 li
	0x67, 0x68, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, // ght_dir, float l
	0x69, 0x67, 0x68, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, // ight_dist).{.flo
	0x61, 0x74, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x3b, // at result = 1.0;
	0x0a, 0x66, 0x6f, 0x72, 0x20, 0x28, 0x69, 0x6e, 0x74, 0x20, 0x69, 0x20, 0x3d, 0x20, 0x30, 0x3b, // .for (int i = 0;
	0x20, 0x69, 0x20, 0x3c, 0x20, 0x38, 0x3b, 0x20, 0x69, 0x2b, 0x2b, 0x29, 0x0a, 0x7b, 0x0a, 0x66, //  i < 8; i++).{.f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x20, 0x3d, 0x20, 0x62, 0x61, // loat ball_r = ba
	0x6c, 0x6c, 0x73, 0x5b, 0x69, 0x5d, 0x2e, 0x77, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x62, 0x61, // lls[i].w;.if (ba
	0x6c, 0x6c, 0x5f, 0x72, 0x20, 0x3d, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x29, 0x0a, 0x72, 0x65, 0x74, // ll_r == 0.0).ret
	0x75, 0x72, 0x6e, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, // urn result;.vec3
	0x20, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x6f, 0x73, 0x20, 0x3d, 0x20, 0x62, 0x61, 0x6c, 0x6c, //  ball_pos = ball
	0x73, 0x5b, 0x69, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, // s[i].xyz;.vec3 l
	0x69, 0x67, 0x68, 0x74, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x61, 0x79, 0x20, 0x3d, 0x20, // ight_ball_ray = 
	0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x6f, 0x73, 0x20, 0x2d, 0x20, 0x6c, 0x69, 0x67, 0x68, 0x74, // ball_pos - light
	0x5f, 0x70, 0x6f, 0x73, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x64, 0x6f, 0x74, 0x5f, // _pos;.float dot_
	0x6c, 0x62, 0x72, 0x5f, 0x6c, 0x72, 0x5f, 0x64, 0x69, 0x76, 0x6c, 0x64, 0x20, 0x3d, 0x20, 0x64, // lbr_lr_divld = d
	0x6f, 0x74, 0x28, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x61, // ot(light_ball_ra
	0x79, 0x2c, 0x20, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x29, 0x20, 0x2f, 0x20, // y, light_dir) / 
	0x28, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x20, 0x2a, 0x20, 0x6c, 0x69, // (light_dist * li
	0x67, 0x68, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x64, // ght_dist);.if (d
	0x6f, 0x74, 0x5f, 0x6c, 0x62, 0x72, 0x5f, 0x6c, 0x72, 0x5f, 0x64, 0x69, 0x76, 0x6c, 0x64, 0x20, // ot_lbr_lr_divld 
	0x3e, 0x20, 0x30, 0x2e, 0x30, 0x20, 0x26, 0x26, 0x20, 0x64, 0x6f, 0x74, 0x5f, 0x6c, 0x62, 0x72, // > 0.0 && dot_lbr
	0x5f, 0x6c, 0x72, 0x5f, 0x64, 0x69, 0x76, 0x6c, 0x64, 0x20, 0x3c, 0x20, 0x31, 0x2e, 0x30, 0x29, // _lr_divld < 1.0)
	0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x64, 0x69, 0x73, 0x74, 0x20, 0x3d, 0x20, 0x6c, // .{.vec3 dist = l
	0x69, 0x67, 0x68, 0x74, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x61, 0x79, 0x20, 0x2d, 0x20, // ight_ball_ray - 
	0x64, 0x6f, 0x74, 0x5f, 0x6c, 0x62, 0x72, 0x5f, 0x6c, 0x72, 0x5f, 0x64, 0x69, 0x76, 0x6c, 0x64, // dot_lbr_lr_divld
	0x20, 0x2a, 0x20, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x3b, 0x0a, 0x66, 0x6c, //  * light_dir;.fl
	0x6f, 0x61, 0x74, 0x20, 0x64, 0x32, 0x20, 0x3d, 0x20, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x28, // oat d2 = length(
	0x64, 0x69, 0x73, 0x74, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x69, 0x67, // dist);.float lig
	0x68, 0x74, 0x5f, 0x72, 0x20, 0x3d, 0x20, 0x35, 0x2e, 0x30, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // ht_r = 5.0;.floa
	0x74, 0x20, 0x73, 0x6d, 0x6f, 0x6f, 0x74, 0x68, 0x6e, 0x65, 0x73, 0x73, 0x20, 0x3d, 0x20, 0x6c, // t smoothness = l
	0x69, 0x67, 0x68, 0x74, 0x5f, 0x72, 0x20, 0x2d, 0x20, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x72, // ight_r - light_r
	0x20, 0x2a, 0x20, 0x64, 0x6f, 0x74, 0x5f, 0x6c, 0x62, 0x72, 0x5f, 0x6c, 0x72, 0x5f, 0x64, 0x69, //  * dot_lbr_lr_di
	0x76, 0x6c, 0x64, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x69, 0x67, 0x68, 0x74, // vld;.float light
	0x5f, 0x69, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x71, 0x72, // _inside_ball_sqr
	0x20, 0x3d, 0x20, 0x63, 0x6c, 0x61, 0x6d, 0x70, 0x28, 0x28, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, //  = clamp((light_
	0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x61, 0x79, 0x2e, 0x78, 0x2a, 0x6c, 0x69, 0x67, 0x68, 0x74, // ball_ray.x*light
	0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x61, 0x79, 0x2e, 0x78, 0x20, 0x2b, 0x20, 0x6c, 0x69, // _ball_ray.x + li
	0x67, 0x68, 0x74, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x61, 0x79, 0x2e, 0x79, 0x2a, 0x6c, // ght_ball_ray.y*l
	0x69, 0x67, 0x68, 0x74, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x61, 0x79, 0x2e, 0x79, 0x29, // ight_ball_ray.y)
	0x2f, 0x28, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x2a, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x29, // /(ball_r*ball_r)
	0x2c, 0x20, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x73, // , 0.0, 1.0);.res
	0x75, 0x6c, 0x74, 0x20, 0x2a, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2b, 0x20, 0x6c, 0x69, 0x67, // ult *= 1.0 + lig
	0x68, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x73, // ht_inside_ball_s
	0x71, 0x72, 0x2a, 0x28, 0x2d, 0x31, 0x2e, 0x30, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x31, 0x20, 0x2b, // qr*(-1.0 + 0.1 +
	0x20, 0x30, 0x2e, 0x39, 0x20, 0x2a, 0x20, 0x73, 0x6d, 0x6f, 0x6f, 0x74, 0x68, 0x73, 0x74, 0x65, //  0.9 * smoothste
	0x70, 0x28, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x2d, 0x73, 0x6d, 0x6f, 0x6f, 0x74, 0x68, 0x6e, // p(ball_r-smoothn
	0x65, 0x73, 0x73, 0x2c, 0x20, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x2b, 0x73, 0x6d, 0x6f, 0x6f, // ess, ball_r+smoo
	0x74, 0x68, 0x6e, 0x65, 0x73, 0x73, 0x2c, 0x20, 0x64, 0x32, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, // thness, d2));.}.
	0x7d, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3b, // }.return result;
	0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // .}.uniform vec4 
	0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x41, 0x6c, 0x70, 0x68, // staticColor_Alph
	0x61, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // a;.uniform vec4 
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x42, // alphaTestValueAB
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x42, // _filterMode_addB
	0x6c, 0x65, 0x6e, 0x64, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, // lend;.uniform ve
	0x63, 0x34, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x5f, // c4 amount_blend_
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x5f, // modulate_vs_add_
	0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x3b, 0x0a, 0x75, 0x6e, 0x69, // flasherMode;.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x43, // form vec4 lightC
	0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x3b, 0x0a, // enter_doShadow;.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x32, // uniform sampler2
	0x44, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x41, 0x3b, // D tex_flasher_A;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, // .uniform sampler
	0x32, 0x44, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x42, // 2D tex_flasher_B
	0x3b, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, 0x29, 0x0a, 0x7b, 0x0a, // ;.void main().{.
	0x76, 0x65, 0x63, 0x34, 0x20, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x31, 0x2c, 0x70, 0x69, 0x78, 0x65, // vec4 pixel1,pixe
	0x6c, 0x32, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, // l2;.if (amount_b
	0x6c, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x73, // lend_modulate_vs
	0x5f, 0x61, 0x64, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, // _add_flasherMode
	0x2e, 0x7a, 0x20, 0x3c, 0x20, 0x32, 0x2e, 0x29, 0x0a, 0x7b, 0x0a, 0x70, 0x69, 0x78, 0x65, 0x6c, // .z < 2.).{.pixel
	0x31, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, // 1 = texture(tex_
	0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x41, 0x2c, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, // flasher_A, v_tex
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x70, 0x69, 0x78, // coord0);.if (pix
	0x65, 0x6c, 0x31, 0x2e, 0x61, 0x20, 0x3c, 0x3d, 0x20, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x54, 0x65, // el1.a <= alphaTe
	0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x42, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, // stValueAB_filter
	0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2e, 0x78, 0x29, // Mode_addBlend.x)
	0x0a, 0x7b, 0x0a, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, // .{.bgfx_FragColo
	0x72, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x30, // r = vec4_splat(0
	0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x3b, 0x0a, 0x7d, 0x0a, 0x7d, // .0);.return;.}.}
	0x0a, 0x69, 0x66, 0x20, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x65, 0x6e, // .if (amount_blen
	0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x73, 0x5f, 0x61, 0x64, // d_modulate_vs_ad
	0x64, 0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x7a, 0x20, // d_flasherMode.z 
	0x3d, 0x3d, 0x20, 0x31, 0x2e, 0x29, 0x0a, 0x7b, 0x0a, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x32, 0x20, // == 1.).{.pixel2 
	0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, 0x66, 0x6c, // = texture(tex_fl
	0x61, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x42, 0x2c, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, // asher_B, v_texco
	0x6f, 0x72, 0x64, 0x30, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x70, 0x69, 0x78, 0x65, 0x6c, // ord0);.if (pixel
	0x32, 0x2e, 0x61, 0x20, 0x3c, 0x3d, 0x20, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x54, 0x65, 0x73, 0x74, // 2.a <= alphaTest
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x42, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x6f, // ValueAB_filterMo
	0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2e, 0x79, 0x29, 0x0a, 0x7b, // de_addBlend.y).{
	0x0a, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, // .bgfx_FragColor 
	0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x30, 0x2e, 0x30, // = vec4_splat(0.0
	0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x3b, 0x0a, 0x7d, 0x0a, 0x7d, 0x0a, 0x76, // );.return;.}.}.v
	0x65, 0x63, 0x34, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x61, // ec4 result = sta
	0x74, 0x69, 0x63, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x3b, 0x0a, // ticColor_Alpha;.
	0x69, 0x66, 0x20, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x65, 0x6e, 0x64, // if (amount_blend
	0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x73, 0x5f, 0x61, 0x64, 0x64, // _modulate_vs_add
	0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x7a, 0x20, 0x3d, // _flasherMode.z =
	0x3d, 0x20, 0x30, 0x2e, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x20, 0x2a, // = 0.).{.result *
	0x3d, 0x20, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x31, 0x3b, 0x0a, 0x7d, 0x0a, 0x69, 0x66, 0x20, 0x28, // = pixel1;.}.if (
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x64, // amount_blend_mod
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x66, 0x6c, 0x61, // ulate_vs_add_fla
	0x73, 0x68, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x7a, 0x20, 0x3d, 0x3d, 0x20, 0x31, 0x2e, // sherMode.z == 1.
	0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x54, 0x65, 0x73, // ).{.if (alphaTes
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x42, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, // tValueAB_filterM
	0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2e, 0x7a, 0x20, 0x3d, // ode_addBlend.z =
	0x3d, 0x20, 0x32, 0x2e, 0x29, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x20, 0x2a, 0x3d, 0x20, // = 2.).result *= 
	0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x48, 0x44, 0x52, 0x28, 0x70, 0x69, 0x78, 0x65, 0x6c, // OverlayHDR(pixel
	0x31, 0x2c, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x32, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x61, // 1,pixel2);.if (a
	0x6c, 0x70, 0x68, 0x61, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x42, 0x5f, // lphaTestValueAB_
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x42, 0x6c, // filterMode_addBl
	0x65, 0x6e, 0x64, 0x2e, 0x7a, 0x20, 0x3d, 0x3d, 0x20, 0x33, 0x2e, 0x29, 0x0a, 0x72, 0x65, 0x73, // end.z == 3.).res
	0x75, 0x6c, 0x74, 0x20, 0x2a, 0x3d, 0x20, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x28, // ult *= Multiply(
	0x70, 0x69, 0x78, 0x65, 0x6c, 0x31, 0x2c, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x32, 0x2c, 0x20, 0x61, // pixel1,pixel2, a
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x75, // mount_blend_modu
	0x6c, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x73, // late_vs_add_flas
	0x68, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, // herMode.x);.if (
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x42, // alphaTestValueAB
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x42, // _filterMode_addB
	0x6c, 0x65, 0x6e, 0x64, 0x2e, 0x7a, 0x20, 0x3d, 0x3d, 0x20, 0x31, 0x2e, 0x29, 0x0a, 0x72, 0x65, // lend.z == 1.).re
	0x73, 0x75, 0x6c, 0x74, 0x20, 0x2a, 0x3d, 0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, // sult *= Additive
	0x28, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x31, 0x2c, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x32, 0x2c, 0x20, // (pixel1,pixel2, 
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x64, // amount_blend_mod
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x66, 0x6c, 0x61, // ulate_vs_add_fla
	0x73, 0x68, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x20, // sherMode.x);.if 
	0x28, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, // (alphaTestValueA
	0x42, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, // B_filterMode_add
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2e, 0x7a, 0x20, 0x3d, 0x3d, 0x20, 0x34, 0x2e, 0x29, 0x0a, 0x72, // Blend.z == 4.).r
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x20, 0x2a, 0x3d, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, // esult *= ScreenH
	0x44, 0x52, 0x28, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x31, 0x2c, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x32, // DR(pixel1,pixel2
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x43, 0x65, // );.}.if (lightCe
	0x6e, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x2e, 0x77, 0x20, // nter_doShadow.w 
	0x21, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x69, // != 0.).{.vec3 li
	0x67, 0x68, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x20, 0x3d, 0x20, 0x76, 0x5f, 0x74, 0x61, 0x62, 0x6c, // ght_dir = v_tabl
	0x65, 0x50, 0x6f, 0x73, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2d, 0x20, 0x6c, 0x69, 0x67, 0x68, 0x74, // ePos.xyz - light
	0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x2e, // Center_doShadow.
	0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x69, 0x67, 0x68, 0x74, // xyz;.float light
	0x5f, 0x64, 0x69, 0x73, 0x74, 0x20, 0x3d, 0x20, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x28, 0x6c, // _dist = length(l
	0x69, 0x67, 0x68, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // ight_dir);.float
	0x20, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x20, 0x3d, 0x20, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x69, //  shadow = get_li
	0x67, 0x68, 0x74, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x28, // ght_ball_shadow(
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x53, 0x68, // lightCenter_doSh
	0x61, 0x64, 0x6f, 0x77, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, // adow.xyz, light_
	0x64, 0x69, 0x72, 0x2c, 0x20, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x29, // dir, light_dist)
	0x3b, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x72, 0x67, 0x62, 0x20, 0x2a, 0x3d, 0x20, // ;.result.rgb *= 
	0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x61, 0x6c, // shadow;.}.if (al
	0x70, 0x68, 0x61, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x42, 0x5f, 0x66, // phaTestValueAB_f
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x42, 0x6c, 0x65, // ilterMode_addBle
	0x6e, 0x64, 0x2e, 0x77, 0x20, 0x3d, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x0a, 0x62, 0x67, 0x66, 0x78, // nd.w == 0.).bgfx
	0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, // _FragColor = vec
	0x34, 0x28, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x63, 0x6c, // 4(result.xyz, cl
	0x61, 0x6d, 0x70, 0x28, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x61, 0x2c, 0x20, 0x30, 0x2e, // amp(result.a, 0.
	0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x62, // 0, 1.0));.else.b
	0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, // gfx_FragColor = 
	0x76, 0x65, 0x63, 0x34, 0x28, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x2a, // vec4(result.xyz*
	0x28, 0x2d, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x5f, 0x6d, // (-amount_blend_m
	0x6f, 0x64, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x66, // odulate_vs_add_f
	0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x79, 0x2a, 0x72, 0x65, 0x73, // lasherMode.y*res
	0x75, 0x6c, 0x74, 0x2e, 0x61, 0x29, 0x2c, 0x0a, 0x31, 0x2e, 0x30, 0x2f, 0x61, 0x6d, 0x6f, 0x75, // ult.a),.1.0/amou
	0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x61, 0x74, // nt_blend_modulat
	0x65, 0x5f, 0x76, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, // e_vs_add_flasher
	0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x79, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x7d, // Mode.y - 1.0);.}
	0x0a, 0x00,                                                                                     // ..
};
static const uint8_t fs_flasher_noclip_glsl[9166] =
{
	0x46, 0x53, 0x48, 0x0b, 0xe2, 0xbc, 0x2a, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xbb, 0x23, // FSH...*~.......#
	0x00, 0x00, 0x23, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x34, 0x34, 0x30, 0x0a, 0x6f, // ..#version 440.o
	0x75, 0x74, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x62, 0x67, 0x66, 0x78, 0x5f, 0x46, 0x72, 0x61, // ut vec4 bgfx_Fra
	0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x3b, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, // gColor;.#define 
	0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x62, 0x67, 0x66, // gl_FragColor bgf
	0x78, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x0a, 0x23, 0x64, 0x65, 0x66, // x_FragColor.#def
	0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x20, 0x20, 0x20, // ine texture2D   
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x0a, 0x23, //        texture.#
	0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, // define texture2D
	0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, // Lod       textur
	0x65, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, // eLod.#define tex
	0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, // ture2DGrad      
	0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, // textureGrad.#def
	0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, // ine texture2DPro
	0x6a, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, // jLod   texturePr
	0x6f, 0x6a, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, // ojLod.#define te
	0x78, 0x74, 0x75, 0x72, 0x65, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, 0x20, // xture2DProjGrad 
	0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x47, 0x72, 0x61, 0x64, //  textureProjGrad
	0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // .#define texture
	0x43, 0x75, 0x62, 0x65, 0x4c, 0x6f, 0x64, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, // CubeLod     text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, // ureLod.#define t
	0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x43, 0x75, 0x62, 0x65, 0x47, 0x72, 0x61, 0x64, 0x20, 0x20, // extureCubeGrad  
	0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x47, 0x72, 0x61, 0x64, 0x0a, 0x23, 0x64, //   textureGrad.#d
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x33, 0x44, 0x20, // efine texture3D 
	0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, //          texture
	0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, // .#define texture
	0x32, 0x44, 0x4c, 0x6f, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x20, 0x74, 0x65, 0x78, 0x74, // 2DLodOffset text
	0x75, 0x72, 0x65, 0x4c, 0x6f, 0x64, 0x4f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x0a, 0x23, 0x64, 0x65, // ureLodOffset.#de
	0x66, 0x69, 0x6e, 0x65, 0x20, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x20, 0x69, // fine attribute i
	0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, // n.#define varyin
	0x67, 0x20, 0x69, 0x6e, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x62, 0x67, 0x66, // g in.#define bgf
	0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, // xShadow2D(_sampl
	0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x20, 0x20, 0x20, 0x20, // er, _coord)     
	0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, 0x74, 0x75, // vec4_splat(textu
	0x72, 0x65, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, // re(_sampler, _co
	0x6f, 0x72, 0x64, 0x29, 0x20, 0x29, 0x0a, 0x23, 0x64, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x20, 0x62, // ord) ).#define b
	0x67, 0x66, 0x78, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x32, 0x44, 0x50, 0x72, 0x6f, 0x6a, 0x28, // gfxShadow2DProj(
	0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, // _sampler, _coord
	0x29, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x74, 0x65, 0x78, // ) vec4_splat(tex
	0x74, 0x75, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x6a, 0x28, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // tureProj(_sample
	0x72, 0x2c, 0x20, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x29, 0x20, 0x29, 0x0a, 0x76, 0x61, 0x72, // r, _coord) ).var
	0x79, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x5f, 0x74, 0x61, 0x62, 0x6c, // ying vec3 v_tabl
	0x65, 0x50, 0x6f, 0x73, 0x3b, 0x0a, 0x76, 0x61, 0x72, 0x79, 0x69, 0x6e, 0x67, 0x20, 0x76, 0x65, // ePos;.varying ve
	0x63, 0x32, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x3b, 0x0a, // c2 v_texcoord0;.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, // vec3 instMul(vec
	0x33, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, // 3 _vec, mat3 _mt
	0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, // x) { return ( (_
	0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, // vec) * (_mtx) );
	0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, //  }.vec3 instMul(
	0x6d, 0x61, 0x74, 0x33, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // mat3 _mtx, vec3 
	0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // _vec) { return (
	0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, //  (_mtx) * (_vec)
	0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, 0x73, 0x74, 0x4d, //  ); }.vec4 instM
	0x75, 0x6c, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x6d, 0x61, // ul(vec4 _vec, ma
	0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, // t4 _mtx) { retur
	0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x5f, 0x6d, // n ( (_vec) * (_m
	0x74, 0x78, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x69, 0x6e, // tx) ); }.vec4 in
	0x73, 0x74, 0x4d, 0x75, 0x6c, 0x28, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x5f, 0x6d, 0x74, 0x78, 0x2c, // stMul(mat4 _mtx,
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, //  vec4 _vec) { re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x20, 0x28, 0x5f, 0x6d, 0x74, 0x78, 0x29, 0x20, 0x2a, 0x20, // turn ( (_mtx) * 
	0x28, 0x5f, 0x76, 0x65, 0x63, 0x29, 0x20, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // (_vec) ); }.floa
	0x74, 0x20, 0x72, 0x63, 0x70, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x61, 0x29, 0x20, // t rcp(float _a) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x5f, 0x61, 0x3b, // { return 1.0/_a;
	0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x32, //  }.vec2 rcp(vec2
	0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, //  _a) { return ve
	0x63, 0x32, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, // c2(1.0)/_a; }.ve
	0x63, 0x33, 0x20, 0x72, 0x63, 0x70, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x61, 0x29, 0x20, // c3 rcp(vec3 _a) 
	0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x31, 0x2e, // { return vec3(1.
	0x30, 0x29, 0x2f, 0x5f, 0x61, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x72, 0x63, // 0)/_a; }.vec4 rc
	0x70, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x61, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, // p(vec4 _a) { ret
	0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x31, 0x2e, 0x30, 0x29, 0x2f, 0x5f, 0x61, // urn vec4(1.0)/_a
	0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, // ; }.vec2 vec2_sp
	0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, // lat(float _x) { 
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, // return vec2(_x, 
	0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x33, // _x); }.vec3 vec3
	0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, // _splat(float _x)
	0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, //  { return vec3(_
	0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x76, 0x65, // x, _x, _x); }.ve
	0x63, 0x34, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x66, 0x6c, // c4 vec4_splat(fl
	0x6f, 0x61, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // oat _x) { return
	0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, //  vec4(_x, _x, _x
	0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x32, 0x20, 0x75, // , _x); }.uvec2 u
	0x76, 0x65, 0x63, 0x32, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, // vec2_splat(uint 
	0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, // _x) { return uve
	0x63, 0x32, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, // c2(_x, _x); }.uv
	0x65, 0x63, 0x33, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, // ec3 uvec3_splat(
	0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, // uint _x) { retur
	0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x33, 0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, // n uvec3(_x, _x, 
	0x5f, 0x78, 0x29, 0x3b, 0x20, 0x7d, 0x0a, 0x75, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x76, 0x65, // _x); }.uvec4 uve
	0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x75, 0x69, 0x6e, 0x74, 0x20, 0x5f, 0x78, // c4_splat(uint _x
	0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x75, 0x76, 0x65, 0x63, 0x34, // ) { return uvec4
	0x28, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x2c, 0x20, 0x5f, 0x78, 0x29, // (_x, _x, _x, _x)
	0x3b, 0x20, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, // ; }.mat4 mtxFrom
	0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, // Rows(vec4 _0, ve
	0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, 0x2c, 0x20, // c4 _1, vec4 _2, 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, // vec4 _3).{.retur
	0x6e, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x34, // n transpose(mat4
	0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, // (_0, _1, _2, _3)
	0x20, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, //  );.}.mat4 mtxFr
	0x6f, 0x6d, 0x43, 0x6f, 0x6c, 0x73, 0x28, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x30, 0x2c, 0x20, // omCols(vec4 _0, 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x32, // vec4 _1, vec4 _2
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x5f, 0x33, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, // , vec4 _3).{.ret
	0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, // urn mat4(_0, _1,
	0x20, 0x5f, 0x32, 0x2c, 0x20, 0x5f, 0x33, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x6d, 0x61, 0x74, 0x33, //  _2, _3);.}.mat3
	0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x52, 0x6f, 0x77, 0x73, 0x28, 0x76, 0x65, 0x63, //  mtxFromRows(vec
	0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x76, // 3 _0, vec3 _1, v
	0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // ec3 _2).{.return
	0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x73, 0x65, 0x28, 0x6d, 0x61, 0x74, 0x33, 0x28, //  transpose(mat3(
	0x5f, 0x30, 0x2c, 0x20, 0x5f, 0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x20, 0x29, 0x3b, 0x0a, 0x7d, // _0, _1, _2) );.}
	0x0a, 0x6d, 0x61, 0x74, 0x33, 0x20, 0x6d, 0x74, 0x78, 0x46, 0x72, 0x6f, 0x6d, 0x43, 0x6f, 0x6c, // .mat3 mtxFromCol
	0x73, 0x28, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x30, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, // s(vec3 _0, vec3 
	0x5f, 0x31, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x5f, 0x32, 0x29, 0x0a, 0x7b, 0x0a, 0x72, // _1, vec3 _2).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x74, 0x33, 0x28, 0x5f, 0x30, 0x2c, 0x20, 0x5f, // eturn mat3(_0, _
	0x31, 0x2c, 0x20, 0x5f, 0x32, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // 1, _2);.}.unifor
	0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x52, 0x65, 0x63, // m vec4 u_viewRec
	0x74, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, // t;.uniform vec4 
	0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x54, 0x65, 0x78, 0x65, 0x6c, 0x3b, 0x0a, 0x75, 0x6e, 0x69, // u_viewTexel;.uni
	0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, // form mat4 u_view
	0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, // ;.uniform mat4 u
	0x5f, 0x69, 0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // _invView;.unifor
	0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, // m mat4 u_proj;.u
	0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, 0x6e, // niform mat4 u_in
	0x76, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, // vProj;.uniform m
	0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x76, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, // at4 u_viewProj;.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x69, // uniform mat4 u_i
	0x6e, 0x76, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, // nvViewProj;.unif
	0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, // orm mat4 u_model
	0x5b, 0x33, 0x32, 0x5d, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, // [32];.uniform ma
	0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x3b, 0x0a, // t4 u_modelView;.
	0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x75, 0x5f, 0x6d, // uniform mat4 u_m
	0x6f, 0x64, 0x65, 0x6c, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x6a, 0x3b, 0x0a, 0x75, 0x6e, // odelViewProj;.un
	0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x75, 0x5f, 0x61, 0x6c, 0x70, // iform vec4 u_alp
	0x68, 0x61, 0x52, 0x65, 0x66, 0x34, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x71, // haRef4;.float sq
	0x72, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, // r( float v).{.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, // turn v*v;.}.vec2
	0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, //  sqr( vec2 v).{.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // return v*v;.}.ve
	0x63, 0x33, 0x20, 0x73, 0x71, 0x72, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x29, 0x0a, // c3 sqr( vec3 v).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2a, 0x76, 0x3b, 0x0a, 0x7d, 0x0a, // {.return v*v;.}.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x6d, 0x75, 0x6c, 0x5f, 0x77, 0x31, 0x28, 0x20, 0x76, 0x65, 0x63, // vec3 mul_w1( vec
	0x33, 0x20, 0x76, 0x2c, 0x20, 0x6d, 0x61, 0x74, 0x34, 0x20, 0x6d, 0x29, 0x0a, 0x7b, 0x0a, 0x72, // 3 v, mat4 m).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x2e, 0x78, 0x2a, 0x6d, 0x5b, 0x30, 0x5d, 0x2e, 0x78, // eturn v.x*m[0].x
	0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x79, 0x2a, 0x6d, 0x5b, 0x31, 0x5d, 0x2e, 0x78, // yz + (v.y*m[1].x
	0x79, 0x7a, 0x20, 0x2b, 0x20, 0x28, 0x76, 0x2e, 0x7a, 0x2a, 0x6d, 0x5b, 0x32, 0x5d, 0x2e, 0x78, // yz + (v.z*m[2].x
	0x79, 0x7a, 0x20, 0x2b, 0x20, 0x6d, 0x5b, 0x33, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x29, 0x29, 0x3b, // yz + m[3].xyz));
	0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, // .}.float acos_ap
	0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, // prox_divPI( floa
	0x74, 0x20, 0x76, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, // t v).{.float x =
	0x20, 0x61, 0x62, 0x73, 0x28, 0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, //  abs(v);.if(1. -
	0x20, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, //  x <= 0.00006103
	0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, // 515625).return (
	0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x20, 0x3a, 0x20, // v >= 0.) ? 0. : 
	0x31, 0x2e, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, // 1.;.float res = 
	0x28, 0x28, 0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, // ((-0.155972/3.14
	0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, // 1592653589793238
	0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, // 4626433832795) *
	0x20, 0x78, 0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, //  x + (1.56467/3.
	0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, // 1415926535897932
	0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, // 384626433832795)
	0x20, 0x29, 0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, //  ) * sqrt(1. - x
	0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, // );.return (v >= 
	0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, 0x31, 0x2e, 0x20, 0x2d, // 0.) ? res : 1. -
	0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x74, //  res;.}.float at
	0x61, 0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, // an2_approx_div2P
	0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x79, 0x2c, 0x20, 0x66, 0x6c, 0x6f, 0x61, // I( float y, floa
	0x74, 0x20, 0x78, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x62, 0x73, // t x).{.float abs
	0x5f, 0x79, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, // _y = abs(y);.flo
	0x61, 0x74, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, 0x78, // at abs_x = abs(x
	0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x3c, 0x3d, 0x20, 0x30, // );.if(abs_x <= 0
	0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x20, // .00006103515625 
	0x26, 0x26, 0x20, 0x61, 0x62, 0x73, 0x5f, 0x79, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, // && abs_y <= 0.00
	0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, 0x35, 0x29, 0x0a, 0x72, 0x65, // 006103515625).re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x30, 0x2e, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, // turn 0.;.float r
	0x20, 0x3d, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2d, 0x20, 0x61, 0x62, 0x73, 0x5f, //  = (abs_x - abs_
	0x79, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x61, 0x62, 0x73, 0x5f, 0x78, 0x20, 0x2b, 0x20, 0x61, 0x62, // y) / (abs_x + ab
	0x73, 0x5f, 0x79, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x61, 0x6e, 0x67, 0x6c, // s_y);.float angl
	0x65, 0x20, 0x3d, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, // e = ((x < 0.) ? 
	0x28, 0x33, 0x2e, 0x2f, 0x38, 0x2e, 0x29, 0x20, 0x3a, 0x20, 0x28, 0x31, 0x2e, 0x2f, 0x38, 0x2e, // (3./8.) : (1./8.
	0x29, 0x29, 0x0a, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x32, 0x31, 0x31, 0x38, 0x36, 0x38, 0x20, 0x2f, // )).+ (0.211868 /
	0x28, 0x32, 0x2e, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, // (2.*3.1415926535
	0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, // 8979323846264338
	0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x72, 0x20, 0x2a, 0x20, 0x72, 0x20, 0x2d, // 32795) * r * r -
	0x20, 0x30, 0x2e, 0x39, 0x38, 0x37, 0x33, 0x30, 0x35, 0x20, 0x2f, 0x28, 0x32, 0x2e, 0x2a, 0x33, //  0.987305 /(2.*3
	0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, // .141592653589793
	0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, // 2384626433832795
	0x29, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x78, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, // )) * ((x < 0.) ?
	0x20, 0x2d, 0x72, 0x20, 0x3a, 0x20, 0x72, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, //  -r : r);.return
	0x20, 0x28, 0x79, 0x20, 0x3c, 0x20, 0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x2d, 0x61, 0x6e, 0x67, //  (y < 0.) ? -ang
	0x6c, 0x65, 0x20, 0x3a, 0x20, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, // le : angle;.}.fl
	0x6f, 0x61, 0x74, 0x20, 0x61, 0x73, 0x69, 0x6e, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, // oat asin_approx_
	0x64, 0x69, 0x76, 0x50, 0x49, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x76, 0x29, 0x0a, // divPI( float v).
	0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x78, 0x20, 0x3d, 0x20, 0x61, 0x62, 0x73, 0x28, // {.float x = abs(
	0x76, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x20, 0x3c, 0x3d, // v);.if(1. - x <=
	0x20, 0x30, 0x2e, 0x30, 0x30, 0x30, 0x30, 0x36, 0x31, 0x30, 0x33, 0x35, 0x31, 0x35, 0x36, 0x32, //  0.0000610351562
	0x35, 0x29, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, // 5).return (v >= 
	0x30, 0x2e, 0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x3a, 0x20, 0x2d, 0x30, 0x2e, 0x35, // 0.) ? 0.5 : -0.5
	0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3d, 0x20, 0x28, 0x28, // ;.float res = ((
	0x2d, 0x30, 0x2e, 0x31, 0x35, 0x35, 0x39, 0x37, 0x32, 0x2f, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, // -0.155972/3.1415
	0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, // 9265358979323846
	0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x2a, 0x20, 0x78, // 26433832795) * x
	0x20, 0x2b, 0x20, 0x28, 0x31, 0x2e, 0x35, 0x36, 0x34, 0x36, 0x37, 0x2f, 0x33, 0x2e, 0x31, 0x34, //  + (1.56467/3.14
	0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, 0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, // 1592653589793238
	0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, 0x32, 0x37, 0x39, 0x35, 0x29, 0x20, 0x29, // 4626433832795) )
	0x20, 0x2a, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x20, 0x2d, 0x20, 0x78, 0x29, 0x3b, //  * sqrt(1. - x);
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x28, 0x76, 0x20, 0x3e, 0x3d, 0x20, 0x30, 0x2e, // .return (v >= 0.
	0x29, 0x20, 0x3f, 0x20, 0x30, 0x2e, 0x35, 0x20, 0x2d, 0x20, 0x72, 0x65, 0x73, 0x20, 0x3a, 0x20, // ) ? 0.5 - res : 
	0x2d, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x72, 0x65, 0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // -0.5 + res;.}.ve
	0x63, 0x32, 0x20, 0x72, 0x61, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, // c2 ray_to_equire
	0x63, 0x74, 0x61, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x5f, 0x75, 0x76, 0x28, 0x20, 0x76, 0x65, // ctangular_uv( ve
	0x63, 0x33, 0x20, 0x72, 0x61, 0x79, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // c3 ray).{.return
	0x20, 0x76, 0x65, 0x63, 0x32, 0x28, 0x0a, 0x30, 0x2e, 0x35, 0x20, 0x2b, 0x20, 0x61, 0x74, 0x61, //  vec2(.0.5 + ata
	0x6e, 0x32, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x32, 0x50, 0x49, // n2_approx_div2PI
	0x28, 0x72, 0x61, 0x79, 0x2e, 0x79, 0x2c, 0x20, 0x72, 0x61, 0x79, 0x2e, 0x78, 0x29, 0x2c, 0x0a, // (ray.y, ray.x),.
	0x61, 0x63, 0x6f, 0x73, 0x5f, 0x61, 0x70, 0x70, 0x72, 0x6f, 0x78, 0x5f, 0x64, 0x69, 0x76, 0x50, // acos_approx_divP
	0x49, 0x28, 0x72, 0x61, 0x79, 0x2e, 0x7a, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, // I(ray.z));.}.flo
	0x61, 0x74, 0x20, 0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, // at InvsRGB( floa
	0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, // t color).{.if (c
	0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x34, 0x30, 0x34, 0x35, 0x29, // olor <= 0.04045)
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, // .return color * 
	0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, // (1.0/12.92);.els
	0x65, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, // e.return pow(col
	0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, // or * (1.0/1.055)
	0x20, 0x2b, 0x20, 0x28, 0x30, 0x2e, 0x30, 0x35, 0x35, 0x2f, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x29, //  + (0.055/1.055)
	0x2c, 0x20, 0x32, 0x2e, 0x34, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // , 2.4);.}.float 
	0x49, 0x6e, 0x76, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, // InvRec709( float
	0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x63, 0x6f, //  color).{.if (co
	0x6c, 0x6f, 0x72, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x38, 0x31, 0x29, 0x0a, 0x72, 0x65, // lor <= 0.081).re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, // turn color * (1.
	0x30, 0x2f, 0x34, 0x2e, 0x35, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x72, 0x65, 0x74, // 0/4.5);.else.ret
	0x75, 0x72, 0x6e, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, // urn pow(color * 
	0x28, 0x31, 0x2e, 0x30, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, 0x20, 0x2b, 0x20, 0x28, 0x30, // (1.0/1.099) + (0
	0x2e, 0x30, 0x39, 0x39, 0x2f, 0x31, 0x2e, 0x30, 0x39, 0x39, 0x29, 0x2c, 0x20, 0x31, 0x2e, 0x30, // .099/1.099), 1.0
	0x2f, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // /0.45);.}.float 
	0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // InvGamma( float 
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // color).{.return 
	0x49, 0x6e, 0x76, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, // InvsRGB(color);.
	0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, // }.vec3 InvGamma(
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, //  vec3 color).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x49, 0x6e, 0x76, 0x47, 0x61, // eturn vec3(InvGa
	0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, 0x49, 0x6e, 0x76, // mma(color.x),Inv
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, 0x2c, 0x49, // Gamma(color.y),I
	0x6e, 0x76, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x29, // nvGamma(color.z)
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x49, 0x6e, 0x76, 0x54, 0x6f, 0x6e, // );.}.vec3 InvTon
	0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // eMap( vec3 color
	0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x69, 0x6e, 0x76, 0x5f, 0x32, 0x62, // ).{.float inv_2b
	0x68, 0x20, 0x3d, 0x20, 0x30, 0x2e, 0x35, 0x2f, 0x30, 0x2e, 0x32, 0x35, 0x3b, 0x0a, 0x66, 0x6c, // h = 0.5/0.25;.fl
	0x6f, 0x61, 0x74, 0x20, 0x62, 0x68, 0x20, 0x3d, 0x20, 0x34, 0x2e, 0x30, 0x2a, 0x30, 0x2e, 0x32, // oat bh = 4.0*0.2
	0x35, 0x20, 0x2d, 0x20, 0x32, 0x2e, 0x30, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // 5 - 2.0;.return 
	0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2b, 0x20, 0x73, // (color - 1.0 + s
	0x71, 0x72, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2a, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // qrt(color*(color
	0x20, 0x2b, 0x20, 0x62, 0x68, 0x29, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x2a, 0x69, //  + bh) + 1.0))*i
	0x6e, 0x76, 0x5f, 0x32, 0x62, 0x68, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // nv_2bh;.}.float 
	0x73, 0x52, 0x47, 0x42, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, // sRGB( float f).{
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, // .float s;.if (f 
	0x3c, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x30, 0x33, 0x31, 0x33, 0x30, 0x38, 0x29, 0x0a, 0x73, 0x20, // <= 0.0031308).s 
	0x3d, 0x20, 0x31, 0x32, 0x2e, 0x39, 0x32, 0x20, 0x2a, 0x20, 0x66, 0x3b, 0x0a, 0x65, 0x6c, 0x73, // = 12.92 * f;.els
	0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x35, 0x35, 0x20, 0x2a, 0x20, 0x70, 0x6f, // e.s = 1.055 * po
	0x77, 0x28, 0x66, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x34, 0x29, 0x20, 0x2d, 0x20, // w(f, 1.0/2.4) - 
	0x30, 0x2e, 0x30, 0x35, 0x35, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x3b, // 0.055;.return s;
	0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x52, 0x65, 0x63, 0x37, 0x30, 0x39, 0x28, // .}.float Rec709(
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x66, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, //  float f).{.floa
	0x74, 0x20, 0x73, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x66, 0x20, 0x3c, 0x3d, 0x20, 0x30, 0x2e, // t s;.if (f <= 0.
	0x30, 0x31, 0x38, 0x29, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x34, 0x2e, 0x35, 0x20, 0x2a, 0x20, 0x66, // 018).s = 4.5 * f
	0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x73, 0x20, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x39, 0x39, // ;.else.s = 1.099
	0x20, 0x2a, 0x20, 0x70, 0x6f, 0x77, 0x28, 0x66, 0x2c, 0x20, 0x30, 0x2e, 0x34, 0x35, 0x29, 0x20, //  * pow(f, 0.45) 
	0x2d, 0x20, 0x30, 0x2e, 0x30, 0x39, 0x39, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, // - 0.099;.return 
	0x73, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, // s;.}.float FBGam
	0x6d, 0x61, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, // ma( float color)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x73, 0x52, 0x47, 0x42, 0x28, 0x63, // .{.return sRGB(c
	0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x32, 0x20, 0x46, 0x42, // olor);.}.vec2 FB
	0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // Gamma( vec2 colo
	0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x32, // r).{.return vec2
	0x28, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, // (FBGamma(color.x
	0x29, 0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, // ),FBGamma(color.
	0x79, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, // y));.}.vec3 FBGa
	0x6d, 0x6d, 0x61, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, // mma( vec3 color)
	0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x46, // .{.return vec3(F
	0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x29, 0x2c, // BGamma(color.x),
	0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x79, 0x29, // FBGamma(color.y)
	0x2c, 0x46, 0x42, 0x47, 0x61, 0x6d, 0x6d, 0x61, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, // ,FBGamma(color.z
	0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x47, 0x61, 0x6d, // ));.}.vec3 FBGam
	0x6d, 0x61, 0x32, 0x32, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, // ma22( vec3 color
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, // ).{.return vec3(
	0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x78, 0x2c, 0x20, 0x31, 0x2e, 0x30, // pow(color.x, 1.0
	0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, // /2.2),pow(color.
	0x79, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, 0x29, 0x2c, 0x70, 0x6f, 0x77, 0x28, // y, 1.0/2.2),pow(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2e, 0x7a, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2f, 0x32, 0x2e, 0x32, // color.z, 1.0/2.2
	0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x46, 0x42, 0x54, 0x6f, // ));.}.float FBTo
	0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x29, 0x0a, // neMap( float l).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6c, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, // {.return l * ((l
	0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, // *0.25 + 1.0) / (
	0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, // l + 1.0));.}.vec
	0x32, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, 0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, // 2 FBToneMap( vec
	0x32, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // 2 color).{.float
	0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, //  l = dot(color,v
	0x65, 0x63, 0x32, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, 0x32, 0x30, 0x34, 0x2b, 0x30, 0x2e, 0x30, // ec2(0.176204+0.0
	0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, 0x35, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, // 108109*0.5,0.812
	0x39, 0x38, 0x35, 0x2b, 0x30, 0x2e, 0x30, 0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x2a, 0x30, 0x2e, // 985+0.0108109*0.
	0x35, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x6f, 0x6c, 0x6f, // 5));.return colo
	0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, 0x35, 0x20, 0x2b, 0x20, 0x31, // r * ((l*0.25 + 1
	0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, // .0) / (l + 1.0))
	0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x46, 0x42, 0x54, 0x6f, 0x6e, 0x65, 0x4d, // ;.}.vec3 FBToneM
	0x61, 0x70, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x29, 0x0a, // ap( vec3 color).
	0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, // {.float l = dot(
	0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x2c, 0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x31, 0x37, 0x36, // color,vec3(0.176
	0x32, 0x30, 0x34, 0x2c, 0x30, 0x2e, 0x38, 0x31, 0x32, 0x39, 0x38, 0x35, 0x2c, 0x30, 0x2e, 0x30, // 204,0.812985,0.0
	0x31, 0x30, 0x38, 0x31, 0x30, 0x39, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // 108109));.return
	0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2a, 0x20, 0x28, 0x28, 0x6c, 0x2a, 0x30, 0x2e, 0x32, //  color * ((l*0.2
	0x35, 0x20, 0x2b, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x20, 0x2b, 0x20, // 5 + 1.0) / (l + 
	0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x41, 0x64, // 1.0));.}.vec4 Ad
	0x64, 0x69, 0x74, 0x69, 0x76, 0x65, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, // ditive( vec4 cBa
	0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, // se, vec4 cBlend,
	0x20, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, //  float percent).
	0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2b, // {.return cBase +
	0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, //  cBlend*percent;
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, // .}.vec3 Screen (
	0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, //  vec3 cBase, vec
	0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, // 3 cBlend).{.retu
	0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, // rn 1.0 - (1.0 - 
	0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, // cBase) * (1.0 - 
	0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, // cBlend);.}.vec4 
	0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, // Screen ( vec4 cB
	0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, // ase, vec4 cBlend
	0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2d, // ).{.return 1.0 -
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, //  (1.0 - cBase) *
	0x20, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x3b, //  (1.0 - cBlend);
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, // .}.vec3 ScreenHD
	0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, // R ( vec3 cBase, 
	0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, // vec3 cBlend).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, // eturn max(1.0 - 
	0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, // (1.0 - cBase) * 
	0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, // (1.0 - cBlend), 
	0x76, 0x65, 0x63, 0x33, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, // vec3(0.,0.,0.));
	0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, 0x44, // .}.vec4 ScreenHD
	0x52, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, // R ( vec4 cBase, 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x72, // vec4 cBlend).{.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x6d, 0x61, 0x78, 0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, // eturn max(1.0 - 
	0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x20, 0x2a, 0x20, // (1.0 - cBase) * 
	0x28, 0x31, 0x2e, 0x30, 0x20, 0x2d, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, // (1.0 - cBlend), 
	0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, // vec4(0.,0.,0.,0.
	0x29, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4d, 0x75, 0x6c, 0x74, 0x69, // ));.}.vec4 Multi
	0x70, 0x6c, 0x79, 0x20, 0x28, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, // ply ( vec4 cBase
	0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2c, 0x20, 0x66, // , vec4 cBlend, f
	0x6c, 0x6f, 0x61, 0x74, 0x20, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x29, 0x0a, 0x7b, 0x0a, // loat percent).{.
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x20, 0x2a, 0x20, 0x63, // return cBase * c
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74, 0x3b, 0x0a, 0x7d, // Blend*percent;.}
	0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x20, 0x28, 0x20, // .vec4 Overlay ( 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // vec4 cBase, vec4
	0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, //  cBlend).{.vec4 
	0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, // cNew = step(0.5,
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, //  cBase);.cNew = 
	0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, // mix(cBase*cBlend
	0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, 0x30, 0x2a, 0x28, 0x31, // *2.0, 1.0-2.0*(1
	0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, // .0-cBase)*(1.0-c
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x29, 0x3b, 0x0a, 0x72, // Blend), cNew);.r
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, 0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, // eturn cNew;.}.ve
	0x63, 0x34, 0x20, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x48, 0x44, 0x52, 0x20, 0x28, 0x20, // c4 OverlayHDR ( 
	0x76, 0x65, 0x63, 0x34, 0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, // vec4 cBase, vec4
	0x20, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, //  cBlend).{.vec4 
	0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x65, 0x70, 0x28, 0x30, 0x2e, 0x35, 0x2c, // cNew = step(0.5,
	0x20, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x3b, 0x0a, 0x63, 0x4e, 0x65, 0x77, 0x20, 0x3d, 0x20, //  cBase);.cNew = 
	0x6d, 0x61, 0x78, 0x28, 0x6d, 0x69, 0x78, 0x28, 0x63, 0x42, 0x61, 0x73, 0x65, 0x2a, 0x63, 0x42, // max(mix(cBase*cB
	0x6c, 0x65, 0x6e, 0x64, 0x2a, 0x32, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x2d, 0x32, 0x2e, // lend*2.0, 1.0-2.
	0x30, 0x2a, 0x28, 0x31, 0x2e, 0x30, 0x2d, 0x63, 0x42, 0x61, 0x73, 0x65, 0x29, 0x2a, 0x28, 0x31, // 0*(1.0-cBase)*(1
	0x2e, 0x30, 0x2d, 0x63, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x29, 0x2c, 0x20, 0x63, 0x4e, 0x65, 0x77, // .0-cBlend), cNew
	0x29, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, 0x30, 0x2e, 0x2c, 0x30, 0x2e, 0x2c, 0x30, 0x2e, // ), vec4(0.,0.,0.
	0x2c, 0x30, 0x2e, 0x29, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x63, 0x4e, // ,0.));.return cN
	0x65, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x63, 0x6f, 0x73, 0x5f, 0x68, // ew;.}.vec3 cos_h
	0x65, 0x6d, 0x69, 0x73, 0x70, 0x68, 0x65, 0x72, 0x65, 0x5f, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, // emisphere_sample
	0x28, 0x20, 0x76, 0x65, 0x63, 0x32, 0x20, 0x74, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, // ( vec2 t).{.floa
	0x74, 0x20, 0x70, 0x68, 0x69, 0x20, 0x3d, 0x20, 0x74, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x28, 0x32, // t phi = t.y * (2
	0x2e, 0x30, 0x2a, 0x33, 0x2e, 0x31, 0x34, 0x31, 0x35, 0x39, 0x32, 0x36, 0x35, 0x33, 0x35, 0x38, // .0*3.14159265358
	0x39, 0x37, 0x39, 0x33, 0x32, 0x33, 0x38, 0x34, 0x36, 0x32, 0x36, 0x34, 0x33, 0x33, 0x38, 0x33, // 9793238462643383
	0x32, 0x37, 0x39, 0x35, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x63, 0x6f, 0x73, // 2795);.float cos
	0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x31, 0x2e, 0x30, // Theta = sqrt(1.0
	0x20, 0x2d, 0x20, 0x74, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, //  - t.x);.float s
	0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x20, 0x3d, 0x20, 0x73, 0x71, 0x72, 0x74, 0x28, 0x74, // inTheta = sqrt(t
	0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x70, 0x2c, 0x63, 0x70, // .x);.float sp,cp
	0x3b, 0x0a, 0x7b, 0x73, 0x70, 0x3d, 0x73, 0x69, 0x6e, 0x28, 0x70, 0x68, 0x69, 0x29, 0x3b, 0x63, // ;.{sp=sin(phi);c
	0x70, 0x3d, 0x63, 0x6f, 0x73, 0x28, 0x70, 0x68, 0x69, 0x29, 0x3b, 0x7d, 0x3b, 0x0a, 0x72, 0x65, // p=cos(phi);};.re
	0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x63, 0x70, 0x20, 0x2a, 0x20, 0x73, // turn vec3(cp * s
	0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, 0x2c, 0x20, 0x63, 0x6f, 0x73, 0x54, 0x68, 0x65, 0x74, // inTheta, cosThet
	0x61, 0x2c, 0x20, 0x73, 0x70, 0x20, 0x2a, 0x20, 0x73, 0x69, 0x6e, 0x54, 0x68, 0x65, 0x74, 0x61, // a, sp * sinTheta
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, // );.}.vec3 rotate
	0x5f, 0x74, 0x6f, 0x5f, 0x76, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x75, 0x70, 0x70, 0x65, 0x72, // _to_vector_upper
	0x28, 0x20, 0x76, 0x65, 0x63, 0x33, 0x20, 0x76, 0x65, 0x63, 0x2c, 0x20, 0x76, 0x65, 0x63, 0x33, // ( vec3 vec, vec3
	0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x28, 0x6e, 0x6f, //  normal).{.if(no
	0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x20, 0x3e, 0x20, 0x2d, 0x30, 0x2e, 0x39, 0x39, 0x39, 0x39, // rmal.y > -0.9999
	0x39, 0x29, 0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x20, 0x3d, 0x20, 0x31, // 9).{.float h = 1
	0x2e, 0x30, 0x2f, 0x28, 0x31, 0x2e, 0x30, 0x2b, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, // .0/(1.0+normal.y
	0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x68, 0x7a, 0x20, 0x3d, 0x20, 0x68, 0x2a, // );.float hz = h*
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // normal.z;.float 
	0x68, 0x7a, 0x78, 0x20, 0x3d, 0x20, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, // hzx = hz*normal.
	0x78, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x76, 0x65, 0x63, 0x33, 0x28, 0x0a, // x;.return vec3(.
	0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, // vec.x * (normal.
	0x79, 0x2b, 0x68, 0x7a, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x29, 0x20, 0x2b, // y+hz*normal.z) +
	0x20, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, //  vec.y * normal.
	0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x2c, // x - vec.z * hzx,
	0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, // .vec.y * normal.
	0x79, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x78, 0x20, 0x2a, 0x20, 0x6e, 0x6f, 0x72, 0x6d, // y - vec.x * norm
	0x61, 0x6c, 0x2e, 0x78, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, 0x2a, 0x20, 0x6e, // al.x - vec.z * n
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x2c, 0x0a, 0x76, 0x65, 0x63, 0x2e, 0x79, 0x20, 0x2a, // ormal.z,.vec.y *
	0x20, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x7a, 0x20, 0x2d, 0x20, 0x76, 0x65, 0x63, 0x2e, //  normal.z - vec.
	0x78, 0x20, 0x2a, 0x20, 0x68, 0x7a, 0x78, 0x20, 0x2b, 0x20, 0x76, 0x65, 0x63, 0x2e, 0x7a, 0x20, // x * hzx + vec.z 
	0x2a, 0x20, 0x28, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x79, 0x2b, 0x68, 0x2a, 0x6e, 0x6f, // * (normal.y+h*no
	0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x2a, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x2e, 0x78, 0x29, // rmal.x*normal.x)
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x20, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, // );.}.else return
	0x20, 0x2d, 0x76, 0x65, 0x63, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, //  -vec;.}.uniform
	0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x62, 0x61, 0x6c, 0x6c, 0x73, 0x5b, 0x38, 0x5d, 0x3b, 0x0a, //  vec4 balls[8];.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, // float get_light_
	0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x28, 0x20, 0x76, 0x65, 0x63, // ball_shadow( vec
	0x33, 0x20, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x2c, 0x20, 0x76, 0x65, 0x63, // 3 light_pos, vec
	0x33, 0x20, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x2c, 0x20, 0x66, 0x6c, 0x6f, // 3 light_dir, flo
	0x61, 0x74, 0x20, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x29, 0x0a, 0x7b, // at light_dist).{
	0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x20, 0x3d, 0x20, // .float result = 
	0x31, 0x2e, 0x30, 0x3b, 0x0a, 0x66, 0x6f, 0x72, 0x20, 0x28, 0x69, 0x6e, 0x74, 0x20, 0x69, 0x20, // 1.0;.for (int i 
	0x3d, 0x20, 0x30, 0x3b, 0x20, 0x69, 0x20, 0x3c, 0x20, 0x38, 0x3b, 0x20, 0x69, 0x2b, 0x2b, 0x29, // = 0; i < 8; i++)
	0x0a, 0x7b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x20, // .{.float ball_r 
	0x3d, 0x20, 0x62, 0x61, 0x6c, 0x6c, 0x73, 0x5b, 0x69, 0x5d, 0x2e, 0x77, 0x3b, 0x0a, 0x69, 0x66, // = balls[i].w;.if
	0x20, 0x28, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x20, 0x3d, 0x3d, 0x20, 0x30, 0x2e, 0x30, 0x29, //  (ball_r == 0.0)
	0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x3b, 0x0a, // .return result;.
	0x76, 0x65, 0x63, 0x33, 0x20, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x6f, 0x73, 0x20, 0x3d, 0x20, // vec3 ball_pos = 
	0x62, 0x61, 0x6c, 0x6c, 0x73, 0x5b, 0x69, 0x5d, 0x2e, 0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x76, 0x65, // balls[i].xyz;.ve
	0x63, 0x33, 0x20, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x61, // c3 light_ball_ra
	0x79, 0x20, 0x3d, 0x20, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x6f, 0x73, 0x20, 0x2d, 0x20, 0x6c, // y = ball_pos - l
	0x69, 0x67, 0x68, 0x74, 0x5f, 0x70, 0x6f, 0x73, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, // ight_pos;.float 
	0x64, 0x6f, 0x74, 0x5f, 0x6c, 0x62, 0x72, 0x5f, 0x6c, 0x72, 0x5f, 0x64, 0x69, 0x76, 0x6c, 0x64, // dot_lbr_lr_divld
	0x20, 0x3d, 0x20, 0x64, 0x6f, 0x74, 0x28, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x62, 0x61, 0x6c, //  = dot(light_bal
	0x6c, 0x5f, 0x72, 0x61, 0x79, 0x2c, 0x20, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x64, 0x69, 0x72, // l_ray, light_dir
	0x29, 0x20, 0x2f, 0x20, 0x28, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x20, // ) / (light_dist 
	0x2a, 0x20, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x29, 0x3b, 0x0a, 0x69, // * light_dist);.i
	0x66, 0x20, 0x28, 0x64, 0x6f, 0x74, 0x5f, 0x6c, 0x62, 0x72, 0x5f, 0x6c, 0x72, 0x5f, 0x64, 0x69, // f (dot_lbr_lr_di
	0x76, 0x6c, 0x64, 0x20, 0x3e, 0x20, 0x30, 0x2e, 0x30, 0x20, 0x26, 0x26, 0x20, 0x64, 0x6f, 0x74, // vld > 0.0 && dot
	0x5f, 0x6c, 0x62, 0x72, 0x5f, 0x6c, 0x72, 0x5f, 0x64, 0x69, 0x76, 0x6c, 0x64, 0x20, 0x3c, 0x20, // _lbr_lr_divld < 
	0x31, 0x2e, 0x30, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x64, 0x69, 0x73, 0x74, // 1.0).{.vec3 dist
	0x20, 0x3d, 0x20, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x61, //  = light_ball_ra
	0x79, 0x20, 0x2d, 0x20, 0x64, 0x6f, 0x74, 0x5f, 0x6c, 0x62, 0x72, 0x5f, 0x6c, 0x72, 0x5f, 0x64, // y - dot_lbr_lr_d
	0x69, 0x76, 0x6c, 0x64, 0x20, 0x2a, 0x20, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x64, 0x69, 0x72, // ivld * light_dir
	0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x64, 0x32, 0x20, 0x3d, 0x20, 0x6c, 0x65, 0x6e, // ;.float d2 = len
	0x67, 0x74, 0x68, 0x28, 0x64, 0x69, 0x73, 0x74, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // gth(dist);.float
	0x20, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x72, 0x20, 0x3d, 0x20, 0x35, 0x2e, 0x30, 0x3b, 0x0a, //  light_r = 5.0;.
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x73, 0x6d, 0x6f, 0x6f, 0x74, 0x68, 0x6e, 0x65, 0x73, 0x73, // float smoothness
	0x20, 0x3d, 0x20, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x72, 0x20, 0x2d, 0x20, 0x6c, 0x69, 0x67, //  = light_r - lig
	0x68, 0x74, 0x5f, 0x72, 0x20, 0x2a, 0x20, 0x64, 0x6f, 0x74, 0x5f, 0x6c, 0x62, 0x72, 0x5f, 0x6c, // ht_r * dot_lbr_l
	0x72, 0x5f, 0x64, 0x69, 0x76, 0x6c, 0x64, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, // r_divld;.float l
	0x69, 0x67, 0x68, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x62, 0x61, 0x6c, 0x6c, // ight_inside_ball
	0x5f, 0x73, 0x71, 0x72, 0x20, 0x3d, 0x20, 0x63, 0x6c, 0x61, 0x6d, 0x70, 0x28, 0x28, 0x6c, 0x69, // _sqr = clamp((li
	0x67, 0x68, 0x74, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x61, 0x79, 0x2e, 0x78, 0x2a, 0x6c, // ght_ball_ray.x*l
	0x69, 0x67, 0x68, 0x74, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x61, 0x79, 0x2e, 0x78, 0x20, // ight_ball_ray.x 
	0x2b, 0x20, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x61, 0x79, // + light_ball_ray
	0x2e, 0x79, 0x2a, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x61, // .y*light_ball_ra
	0x79, 0x2e, 0x79, 0x29, 0x2f, 0x28, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x2a, 0x62, 0x61, 0x6c, // y.y)/(ball_r*bal
	0x6c, 0x5f, 0x72, 0x29, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x2c, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, // l_r), 0.0, 1.0);
	0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x20, 0x2a, 0x3d, 0x20, 0x31, 0x2e, 0x30, 0x20, 0x2b, // .result *= 1.0 +
	0x20, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x69, 0x6e, 0x73, 0x69, 0x64, 0x65, 0x5f, 0x62, 0x61, //  light_inside_ba
	0x6c, 0x6c, 0x5f, 0x73, 0x71, 0x72, 0x2a, 0x28, 0x2d, 0x31, 0x2e, 0x30, 0x20, 0x2b, 0x20, 0x30, // ll_sqr*(-1.0 + 0
	0x2e, 0x31, 0x20, 0x2b, 0x20, 0x30, 0x2e, 0x39, 0x20, 0x2a, 0x20, 0x73, 0x6d, 0x6f, 0x6f, 0x74, // .1 + 0.9 * smoot
	0x68, 0x73, 0x74, 0x65, 0x70, 0x28, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x2d, 0x73, 0x6d, 0x6f, // hstep(ball_r-smo
	0x6f, 0x74, 0x68, 0x6e, 0x65, 0x73, 0x73, 0x2c, 0x20, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x72, 0x2b, // othness, ball_r+
	0x73, 0x6d, 0x6f, 0x6f, 0x74, 0x68, 0x6e, 0x65, 0x73, 0x73, 0x2c, 0x20, 0x64, 0x32, 0x29, 0x29, // smoothness, d2))
	0x3b, 0x0a, 0x7d, 0x0a, 0x7d, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x20, 0x72, 0x65, 0x73, // ;.}.}.return res
	0x75, 0x6c, 0x74, 0x3b, 0x0a, 0x7d, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, // ult;.}.uniform v
	0x65, 0x63, 0x34, 0x20, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, // ec4 staticColor_
	0x41, 0x6c, 0x70, 0x68, 0x61, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, // Alpha;.uniform v
	0x65, 0x63, 0x34, 0x20, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x6c, // ec4 alphaTestVal
	0x75, 0x65, 0x41, 0x42, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x5f, // ueAB_filterMode_
	0x61, 0x64, 0x64, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, // addBlend;.unifor
	0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x6c, // m vec4 amount_bl
	0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x73, 0x5f, // end_modulate_vs_
	0x61, 0x64, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x3b, // add_flasherMode;
	0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x20, 0x6c, 0x69, // .uniform vec4 li
	0x67, 0x68, 0x74, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x53, 0x68, 0x61, 0x64, // ghtCenter_doShad
	0x6f, 0x77, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, 0x70, // ow;.uniform samp
	0x6c, 0x65, 0x72, 0x32, 0x44, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, // ler2D tex_flashe
	0x72, 0x5f, 0x41, 0x3b, 0x0a, 0x75, 0x6e, 0x69, 0x66, 0x6f, 0x72, 0x6d, 0x20, 0x73, 0x61, 0x6d, // r_A;.uniform sam
	0x70, 0x6c, 0x65, 0x72, 0x32, 0x44, 0x20, 0x74, 0x65, 0x78, 0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, // pler2D tex_flash
	0x65, 0x72, 0x5f, 0x42, 0x3b, 0x0a, 0x76, 0x6f, 0x69, 0x64, 0x20, 0x6d, 0x61, 0x69, 0x6e, 0x28, // er_B;.void main(
	0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x34, 0x20, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x31, 0x2c, // ).{.vec4 pixel1,
	0x70, 0x69, 0x78, 0x65, 0x6c, 0x32, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x61, 0x6d, 0x6f, 0x75, // pixel2;.if (amou
	0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x61, 0x74, // nt_blend_modulat
	0x65, 0x5f, 0x76, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, // e_vs_add_flasher
	0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x7a, 0x20, 0x3c, 0x20, 0x32, 0x2e, 0x29, 0x0a, 0x7b, 0x0a, 0x70, // Mode.z < 2.).{.p
	0x69, 0x78, 0x65, 0x6c, 0x31, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, // ixel1 = texture(
	0x74, 0x65, 0x78, 0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x41, 0x2c, 0x20, 0x76, // tex_flasher_A, v
	0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x20, // _texcoord0);.if 
	0x28, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x31, 0x2e, 0x61, 0x20, 0x3c, 0x3d, 0x20, 0x61, 0x6c, 0x70, // (pixel1.a <= alp
	0x68, 0x61, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x42, 0x5f, 0x66, 0x69, // haTestValueAB_fi
	0x6c, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x42, 0x6c, 0x65, 0x6e, // lterMode_addBlen
	0x64, 0x2e, 0x78, 0x29, 0x0a, 0x7b, 0x0a, 0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, // d.x).{.gl_FragCo
	0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, // lor = vec4_splat
	0x28, 0x30, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x3b, 0x0a, 0x7d, // (0.0);.return;.}
	0x0a, 0x7d, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x6c, // .}.if (amount_bl
	0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x73, 0x5f, // end_modulate_vs_
	0x61, 0x64, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x2e, // add_flasherMode.
	0x7a, 0x20, 0x3d, 0x3d, 0x20, 0x31, 0x2e, 0x29, 0x0a, 0x7b, 0x0a, 0x70, 0x69, 0x78, 0x65, 0x6c, // z == 1.).{.pixel
	0x32, 0x20, 0x3d, 0x20, 0x74, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x28, 0x74, 0x65, 0x78, 0x5f, // 2 = texture(tex_
	0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x42, 0x2c, 0x20, 0x76, 0x5f, 0x74, 0x65, 0x78, // flasher_B, v_tex
	0x63, 0x6f, 0x6f, 0x72, 0x64, 0x30, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x70, 0x69, 0x78, // coord0);.if (pix
	0x65, 0x6c, 0x32, 0x2e, 0x61, 0x20, 0x3c, 0x3d, 0x20, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x54, 0x65, // el2.a <= alphaTe
	0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x42, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, // stValueAB_filter
	0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2e, 0x79, 0x29, // Mode_addBlend.y)
	0x0a, 0x7b, 0x0a, 0x67, 0x6c, 0x5f, 0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, // .{.gl_FragColor 
	0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x5f, 0x73, 0x70, 0x6c, 0x61, 0x74, 0x28, 0x30, 0x2e, 0x30, // = vec4_splat(0.0
	0x29, 0x3b, 0x0a, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x3b, 0x0a, 0x7d, 0x0a, 0x7d, 0x0a, 0x76, // );.return;.}.}.v
	0x65, 0x63, 0x34, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x20, 0x3d, 0x20, 0x73, 0x74, 0x61, // ec4 result = sta
	0x74, 0x69, 0x63, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x3b, 0x0a, // ticColor_Alpha;.
	0x69, 0x66, 0x20, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x65, 0x6e, 0x64, // if (amount_blend
	0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x73, 0x5f, 0x61, 0x64, 0x64, // _modulate_vs_add
	0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x7a, 0x20, 0x3d, // _flasherMode.z =
	0x3d, 0x20, 0x30, 0x2e, 0x29, 0x0a, 0x7b, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x20, 0x2a, // = 0.).{.result *
	0x3d, 0x20, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x31, 0x3b, 0x0a, 0x7d, 0x0a, 0x69, 0x66, 0x20, 0x28, // = pixel1;.}.if (
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x64, // amount_blend_mod
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x66, 0x6c, 0x61, // ulate_vs_add_fla
	0x73, 0x68, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x7a, 0x20, 0x3d, 0x3d, 0x20, 0x31, 0x2e, // sherMode.z == 1.
	0x29, 0x0a, 0x7b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x54, 0x65, 0x73, // ).{.if (alphaTes
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x42, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, // tValueAB_filterM
	0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2e, 0x7a, 0x20, 0x3d, // ode_addBlend.z =
	0x3d, 0x20, 0x32, 0x2e, 0x29, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x20, 0x2a, 0x3d, 0x20, // = 2.).result *= 
	0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x48, 0x44, 0x52, 0x28, 0x70, 0x69, 0x78, 0x65, 0x6c, // OverlayHDR(pixel
	0x31, 0x2c, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x32, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x61, // 1,pixel2);.if (a
	0x6c, 0x70, 0x68, 0x61, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x42, 0x5f, // lphaTestValueAB_
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x42, 0x6c, // filterMode_addBl
	0x65, 0x6e, 0x64, 0x2e, 0x7a, 0x20, 0x3d, 0x3d, 0x20, 0x33, 0x2e, 0x29, 0x0a, 0x72, 0x65, 0x73, // end.z == 3.).res
	0x75, 0x6c, 0x74, 0x20, 0x2a, 0x3d, 0x20, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x79, 0x28, // ult *= Multiply(
	0x70, 0x69, 0x78, 0x65, 0x6c, 0x31, 0x2c, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x32, 0x2c, 0x20, 0x61, // pixel1,pixel2, a
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x75, // mount_blend_modu
	0x6c, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x73, // late_vs_add_flas
	0x68, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x20, 0x28, // herMode.x);.if (
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x42, // alphaTestValueAB
	0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x42, // _filterMode_addB
	0x6c, 0x65, 0x6e, 0x64, 0x2e, 0x7a, 0x20, 0x3d, 0x3d, 0x20, 0x31, 0x2e, 0x29, 0x0a, 0x72, 0x65, // lend.z == 1.).re
	0x73, 0x75, 0x6c, 0x74, 0x20, 0x2a, 0x3d, 0x20, 0x41, 0x64, 0x64, 0x69, 0x74, 0x69, 0x76, 0x65, // sult *= Additive
	0x28, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x31, 0x2c, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x32, 0x2c, 0x20, // (pixel1,pixel2, 
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x64, // amount_blend_mod
	0x75, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x66, 0x6c, 0x61, // ulate_vs_add_fla
	0x73, 0x68, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x78, 0x29, 0x3b, 0x0a, 0x69, 0x66, 0x20, // sherMode.x);.if 
	0x28, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, // (alphaTestValueA
	0x42, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, // B_filterMode_add
	0x42, 0x6c, 0x65, 0x6e, 0x64, 0x2e, 0x7a, 0x20, 0x3d, 0x3d, 0x20, 0x34, 0x2e, 0x29, 0x0a, 0x72, // Blend.z == 4.).r
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x20, 0x2a, 0x3d, 0x20, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x48, // esult *= ScreenH
	0x44, 0x52, 0x28, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x31, 0x2c, 0x70, 0x69, 0x78, 0x65, 0x6c, 0x32, // DR(pixel1,pixel2
	0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x43, 0x65, // );.}.if (lightCe
	0x6e, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x2e, 0x77, 0x20, // nter_doShadow.w 
	0x21, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x0a, 0x7b, 0x0a, 0x76, 0x65, 0x63, 0x33, 0x20, 0x6c, 0x69, // != 0.).{.vec3 li
	0x67, 0x68, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x20, 0x3d, 0x20, 0x76, 0x5f, 0x74, 0x61, 0x62, 0x6c, // ght_dir = v_tabl
	0x65, 0x50, 0x6f, 0x73, 0x2e, 0x78, 0x79, 0x7a, 0x20, 0x2d, 0x20, 0x6c, 0x69, 0x67, 0x68, 0x74, // ePos.xyz - light
	0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x2e, // Center_doShadow.
	0x78, 0x79, 0x7a, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x20, 0x6c, 0x69, 0x67, 0x68, 0x74, // xyz;.float light
	0x5f, 0x64, 0x69, 0x73, 0x74, 0x20, 0x3d, 0x20, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x28, 0x6c, // _dist = length(l
	0x69, 0x67, 0x68, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x29, 0x3b, 0x0a, 0x66, 0x6c, 0x6f, 0x61, 0x74, // ight_dir);.float
	0x20, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x20, 0x3d, 0x20, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x69, //  shadow = get_li
	0x67, 0x68, 0x74, 0x5f, 0x62, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x28, // ght_ball_shadow(
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x53, 0x68, // lightCenter_doSh
	0x61, 0x64, 0x6f, 0x77, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, // adow.xyz, light_
	0x64, 0x69, 0x72, 0x2c, 0x20, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x64, 0x69, 0x73, 0x74, 0x29, // dir, light_dist)
	0x3b, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x72, 0x67, 0x62, 0x20, 0x2a, 0x3d, 0x20, // ;.result.rgb *= 
	0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x3b, 0x0a, 0x7d, 0x0a, 0x69, 0x66, 0x20, 0x28, 0x61, 0x6c, // shadow;.}.if (al
	0x70, 0x68, 0x61, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x42, 0x5f, 0x66, // phaTestValueAB_f
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x42, 0x6c, 0x65, // ilterMode_addBle
	0x6e, 0x64, 0x2e, 0x77, 0x20, 0x3d, 0x3d, 0x20, 0x30, 0x2e, 0x29, 0x0a, 0x67, 0x6c, 0x5f, 0x46, // nd.w == 0.).gl_F
	0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, 0x28, // ragColor = vec4(
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x2c, 0x20, 0x63, 0x6c, 0x61, 0x6d, // result.xyz, clam
	0x70, 0x28, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x61, 0x2c, 0x20, 0x30, 0x2e, 0x30, 0x2c, // p(result.a, 0.0,
	0x20, 0x31, 0x2e, 0x30, 0x29, 0x29, 0x3b, 0x0a, 0x65, 0x6c, 0x73, 0x65, 0x0a, 0x67, 0x6c, 0x5f, //  1.0));.else.gl_
	0x46, 0x72, 0x61, 0x67, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x3d, 0x20, 0x76, 0x65, 0x63, 0x34, // FragColor = vec4
	0x28, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x78, 0x79, 0x7a, 0x2a, 0x28, 0x2d, 0x61, 0x6d, // (result.xyz*(-am
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, // ount_blend_modul
	0x61, 0x74, 0x65, 0x5f, 0x76, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, // ate_vs_add_flash
	0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x2e, 0x79, 0x2a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, // erMode.y*result.
	0x61, 0x29, 0x2c, 0x0a, 0x31, 0x2e, 0x30, 0x2f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, // a),.1.0/amount_b
	0x6c, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x73, // lend_modulate_vs
	0x5f, 0x61, 0x64, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, // _add_flasherMode
	0x2e, 0x79, 0x20, 0x2d, 0x20, 0x31, 0x2e, 0x30, 0x29, 0x3b, 0x0a, 0x7d, 0x0a, 0x00,             // .y - 1.0);.}..
};
static const uint8_t fs_flasher_noclip_dx11[3731] =
{
	0x46, 0x53, 0x48, 0x0b, 0xe2, 0xbc, 0x2a, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x09, 0x00, 0x05, 0x62, // FSH...*~.......b
	0x61, 0x6c, 0x6c, 0x73, 0x12, 0x08, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x73, // alls...........s
	0x74, 0x61, 0x74, 0x69, 0x63, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x41, 0x6c, 0x70, 0x68, 0x61, // taticColor_Alpha
	0x12, 0x00, 0x80, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x24, 0x61, 0x6c, 0x70, 0x68, 0x61, // ..........$alpha
	0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x42, 0x5f, 0x66, 0x69, 0x6c, 0x74, // TestValueAB_filt
	0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x12, // erMode_addBlend.
	0x00, 0x90, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, // .........(amount
	0x5f, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x61, 0x74, 0x65, 0x5f, // _blend_modulate_
	0x76, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x4d, 0x6f, // vs_add_flasherMo
	0x64, 0x65, 0x12, 0x00, 0xa0, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x6c, 0x69, 0x67, // de...........lig
	0x68, 0x74, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x53, 0x68, 0x61, 0x64, 0x6f, // htCenter_doShado
	0x77, 0x12, 0x00, 0xb0, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, // w...........tex_
	0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x41, 0x30, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, // flasher_A0......
	0x00, 0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x5f, // ....tex_flasher_
	0x42, 0x30, 0x01, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, // B0..........tex_
	0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x41, 0x30, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, // flasher_A0......
	0x00, 0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x5f, // ....tex_flasher_
	0x42, 0x30, 0x01, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x0d, 0x00, 0x00, 0x44, // B0.........p...D
	0x58, 0x42, 0x43, 0x85, 0x15, 0xe7, 0x73, 0x36, 0x76, 0x35, 0x8b, 0x73, 0x76, 0xd3, 0x62, 0xd3, // XBC...s6v5.sv.b.
	0xae, 0x55, 0x48, 0x01, 0x00, 0x00, 0x00, 0x70, 0x0d, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x2c, // .UH....p.......,
	0x00, 0x00, 0x00, 0x9c, 0x00, 0x00, 0x00, 0xd0, 0x00, 0x00, 0x00, 0x49, 0x53, 0x47, 0x4e, 0x68, // ...........ISGNh
	0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x00, // ...........P....
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, // ................
	0x00, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, // ................
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x07, 0x07, 0x00, 0x00, 0x5c, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x03, // ................
	0x03, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x00, 0x54, // ...SV_POSITION.T
	0x45, 0x58, 0x43, 0x4f, 0x4f, 0x52, 0x44, 0x00, 0xab, 0xab, 0xab, 0x4f, 0x53, 0x47, 0x4e, 0x2c, // EXCOORD....OSGN,
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, // ........... ....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, // ................
	0x00, 0x00, 0x00, 0x53, 0x56, 0x5f, 0x54, 0x41, 0x52, 0x47, 0x45, 0x54, 0x00, 0xab, 0xab, 0x53, // ...SV_TARGET...S
	0x48, 0x45, 0x58, 0x98, 0x0c, 0x00, 0x00, 0x50, 0x00, 0x00, 0x00, 0x26, 0x03, 0x00, 0x00, 0x6a, // HEX....P...&...j
	0x28, 0x00, 0x01, 0x59, 0x08, 0x00, 0x04, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0c, // (..Y...F. ......
	0x00, 0x00, 0x00, 0x5a, 0x00, 0x00, 0x03, 0x00, 0x60, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x5a, // ...Z....`......Z
	0x00, 0x00, 0x03, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x58, 0x18, 0x00, 0x04, 0x00, // ....`......X....
	0x70, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x55, 0x55, 0x00, 0x00, 0x58, 0x18, 0x00, 0x04, 0x00, // p......UU..X....
	0x70, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x55, 0x55, 0x00, 0x00, 0x62, 0x10, 0x00, 0x03, 0x72, // p......UU..b...r
	0x10, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x62, 0x10, 0x00, 0x03, 0x32, 0x10, 0x10, 0x00, 0x02, // .......b...2....
	0x00, 0x00, 0x00, 0x65, 0x00, 0x00, 0x03, 0xf2, 0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x68, // ...e.... ......h
	0x00, 0x00, 0x02, 0x09, 0x00, 0x00, 0x00, 0x31, 0x00, 0x00, 0x08, 0x12, 0x00, 0x10, 0x00, 0x00, // .......1........
	0x00, 0x00, 0x00, 0x2a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x01, // ...*. ..........
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x1f, 0x00, 0x04, 0x03, 0x0a, 0x00, 0x10, 0x00, 0x00, // @.....@.........
	0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x8b, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0xf2, // ...E.......CU...
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x10, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, // .......F.......F
	0x7e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1d, // ~.......`.......
	0x00, 0x00, 0x08, 0x12, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0a, 0x80, 0x20, 0x00, 0x00, // ............. ..
	0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, // .......:........
	0x00, 0x04, 0x03, 0x0a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x08, 0xf2, // ...........6....
	0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //  .......@.......
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x01, 0x15, // ...........>....
	0x00, 0x00, 0x01, 0x15, 0x00, 0x00, 0x01, 0x18, 0x00, 0x00, 0x08, 0x12, 0x00, 0x10, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x2a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x01, // ...*. ..........
	0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x1f, 0x00, 0x04, 0x03, 0x0a, 0x00, 0x10, 0x00, 0x01, // @.....?.........
	0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x8b, 0xc2, 0x00, 0x00, 0x80, 0x43, 0x55, 0x15, 0x00, 0xf2, // ...E.......CU...
	0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, 0x10, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, // .......F.......F
	0x7e, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x60, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1d, // ~.......`.......
	0x00, 0x00, 0x08, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1a, 0x80, 0x20, 0x00, 0x00, // ..."......... ..
	0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x1f, // .......:........
	0x00, 0x04, 0x03, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x08, 0xf2, // ...........6....
	0x20, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, //  .......@.......
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x01, 0x15, // ...........>....
	0x00, 0x00, 0x01, 0x15, 0x00, 0x00, 0x01, 0x18, 0x00, 0x00, 0x08, 0x22, 0x00, 0x10, 0x00, 0x01, // ..........."....
	0x00, 0x00, 0x00, 0x2a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x01, // ...*. ..........
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x08, 0xf2, 0x00, 0x10, 0x00, 0x03, // @......8........
	0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, // ...F.......F. ..
	0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x0a, 0xf2, 0x00, 0x10, 0x00, 0x03, // .......7........
	0x00, 0x00, 0x00, 0x56, 0x05, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x03, // ...V.......F....
	0x00, 0x00, 0x00, 0x46, 0x8e, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x1f, // ...F. ..........
	0x00, 0x04, 0x03, 0x0a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x0b, 0xf2, // ................
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0xa6, 0x8a, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, // ......... ......
	0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x40, 0x40, 0x00, // ....@.....@..@@.
	0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x40, 0x1f, 0x00, 0x04, 0x03, 0x0a, 0x00, 0x10, 0x00, 0x01, // ..?...@.........
	0x00, 0x00, 0x00, 0x1d, 0x00, 0x00, 0x0a, 0xf2, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x46, // ...............F
	0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, // ........@.....?.
	0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x00, 0x3f, 0x01, 0x00, 0x00, 0x0a, 0xf2, // ..?...?...?.....
	0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, // .......F........
	0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, // @.....?...?...?.
	0x00, 0x80, 0x3f, 0x38, 0x00, 0x00, 0x07, 0xf2, 0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x46, // ..?8...........F
	0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, // .......F........
	0x00, 0x00, 0x07, 0xf2, 0x00, 0x10, 0x00, 0x06, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x05, // ...........F....
	0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0xf2, // ...F............
	0x00, 0x10, 0x00, 0x07, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x00, // .......F...A....
	0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, // ....@.....?...?.
	0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x00, 0x07, 0xf2, 0x00, 0x10, 0x00, 0x07, // ..?...?.........
	0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x07, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x07, // ...F.......F....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0xf2, 0x00, 0x10, 0x00, 0x08, 0x00, 0x00, 0x00, 0x46, // ...............F
	0x0e, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, // ...A........@...
	0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x32, // ..?...?...?...?2
	0x00, 0x00, 0x0d, 0xf2, 0x00, 0x10, 0x00, 0x07, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x80, 0x41, // ...........F...A
	0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x08, 0x00, 0x00, 0x00, 0x02, // .......F........
	0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, // @.....?...?...?.
	0x00, 0x80, 0x3f, 0x32, 0x00, 0x00, 0x0d, 0xf2, 0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x46, // ..?2...........F
	0x0e, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, // ...A........@...
	0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x40, 0x46, // ..@...@...@...@F
	0x0e, 0x10, 0x00, 0x07, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x09, 0xf2, 0x00, 0x10, 0x00, 0x04, // .......2........
	0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x05, // ...F.......F....
	0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x06, 0x00, 0x00, 0x00, 0x34, 0x00, 0x00, 0x0a, 0xf2, // ...F.......4....
	0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, // .......F........
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // @...............
	0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x07, 0xf2, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x46, // ...8...........F
	0x0e, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x15, // .......F........
	0x00, 0x00, 0x01, 0x38, 0x00, 0x00, 0x07, 0xf2, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x46, // ...8...........F
	0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x38, // .......F.......8
	0x00, 0x00, 0x08, 0xf2, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x04, // ...........F....
	0x00, 0x00, 0x00, 0x06, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x38, // ..... .........8
	0x00, 0x00, 0x07, 0xf2, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x03, // ...........F....
	0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x09, 0xf2, // ...F.......7....
	0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x56, 0x05, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, // .......V.......F
	0x0e, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x32, // .......F.......2
	0x00, 0x00, 0x0a, 0xf2, 0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x02, // ...........F....
	0x00, 0x00, 0x00, 0x06, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x46, // ..... .........F
	0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x07, 0xf2, 0x00, 0x10, 0x00, 0x05, // .......8........
	0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x05, // ...F.......F....
	0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x09, 0xf2, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0xa6, // ...7............
	0x0a, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x46, // .......F.......F
	0x0e, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0xf2, 0x00, 0x10, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, // ...F...A........
	0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, // @.....?...?...?.
	0x00, 0x80, 0x3f, 0x00, 0x00, 0x00, 0x0b, 0xf2, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, // ..?............F
	0x0e, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, // ...A........@...
	0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x32, // ..?...?...?...?2
	0x00, 0x00, 0x0d, 0xf2, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x80, 0x41, // ...........F...A
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x02, // .......F........
	0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, // @.....?...?...?.
	0x00, 0x80, 0x3f, 0x34, 0x00, 0x00, 0x0a, 0xf2, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, // ..?4...........F
	0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........@.......
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x07, 0xf2, // ...........8....
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, // .......F.......F
	0x0e, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x37, 0x00, 0x00, 0x09, 0xf2, 0x00, 0x10, 0x00, 0x03, // .......7........
	0x00, 0x00, 0x00, 0xf6, 0x0f, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, // ...........F....
	0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x72, // ...F.......6...r
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x12, // .......F........
	0x00, 0x00, 0x01, 0x36, 0x00, 0x00, 0x05, 0x72, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, // ...6...r.......F
	0x02, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x01, 0x39, 0x00, 0x00, 0x08, 0x12, // ...........9....
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, // .......:. ......
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x04, 0x03, 0x0a, // ....@...........
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x72, 0x00, 0x10, 0x00, 0x01, // ...........r....
	0x00, 0x00, 0x00, 0x46, 0x12, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x82, 0x20, 0x80, 0x41, // ...F.......F. .A
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x07, 0x82, // ................
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, // .......F.......F
	0x02, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x42, 0x00, 0x10, 0x00, 0x02, // .......6...B....
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x08, 0x72, // ....@......6...r
	0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, // ........@.......
	0x00, 0x80, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x82, // ..?........6....
	0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, // ........@......0
	0x00, 0x00, 0x01, 0x21, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x2a, // ...!...........*
	0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x36, // ........@......6
	0x00, 0x00, 0x05, 0x82, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, // ............@...
	0x00, 0x00, 0x00, 0x03, 0x00, 0x04, 0x03, 0x0a, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x18, // ................
	0x00, 0x00, 0x09, 0x12, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, // ............@...
	0x00, 0x00, 0x00, 0x3a, 0x80, 0x20, 0x04, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x03, // ...:. .....*....
	0x00, 0x00, 0x00, 0x1f, 0x00, 0x04, 0x03, 0x0a, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x36, // ...............6
	0x00, 0x00, 0x05, 0x32, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x56, 0x05, 0x10, 0x00, 0x03, // ...2.......V....
	0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x82, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x01, // ...6............
	0x40, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x02, 0x00, 0x00, 0x01, 0x15, 0x00, 0x00, 0x01, 0x00, // @...............
	0x00, 0x00, 0x0b, 0xe2, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x06, 0x89, 0x20, 0x80, 0x41, // ............. .A
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x06, 0x89, 0x20, 0x04, 0x00, // ............. ..
	0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x07, 0x12, // ...*............
	0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x96, 0x07, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x46, // ...............F
	0x02, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x05, // ................
	0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x01, // ...........:....
	0x00, 0x00, 0x00, 0x31, 0x00, 0x00, 0x07, 0x22, 0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x01, // ...1..."........
	0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x31, // @..............1
	0x00, 0x00, 0x07, 0x42, 0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x05, // ...B............
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x01, 0x00, 0x00, 0x07, 0x22, // ....@.....?...."
	0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x1a, // .......*........
	0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x04, 0x03, 0x1a, 0x00, 0x10, 0x00, 0x05, // ................
	0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x0a, 0xe2, 0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x06, // ...2............
	0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x06, 0x09, 0x10, 0x00, 0x01, // ...A............
	0x00, 0x00, 0x00, 0x56, 0x0e, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x07, 0x82, // ...V............
	0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x96, 0x07, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x96, // ................
	0x07, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x4b, 0x00, 0x00, 0x05, 0x82, 0x00, 0x10, 0x00, 0x04, // .......K........
	0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x0a, 0x12, // ...:.......2....
	0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x05, // ...........A....
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x40, 0x01, 0x40, 0x00, 0x00, 0x00, // ....@.....@.@...
	0x00, 0xa0, 0x40, 0x0f, 0x00, 0x00, 0x07, 0x22, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x96, // ..@...."........
	0x05, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x96, 0x05, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x38, // ...............8
	0x00, 0x00, 0x0b, 0x42, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x3a, 0x80, 0x20, 0x04, 0x00, // ...B.......:. ..
	0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x3a, 0x80, 0x20, 0x04, 0x00, // ...*.......:. ..
	0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x07, 0x22, // ...*..........."
	0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x2a, // ...............*
	0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x07, 0x22, 0x00, 0x10, 0x00, 0x04, // .......3..."....
	0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, // ............@...
	0x00, 0x80, 0x3f, 0x00, 0x00, 0x00, 0x0a, 0x42, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0a, // ..?....B........
	0x00, 0x10, 0x80, 0x41, 0x00, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0x3a, 0x80, 0x20, 0x04, 0x00, // ...A.......:. ..
	0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x12, // ...*............
	0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x3a, // ...............:
	0x80, 0x20, 0x04, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, // . .....*........
	0x00, 0x00, 0x08, 0x12, 0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x80, 0x41, // ...........*...A
	0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x08, 0x42, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x80, 0x41, // ...B.......*...A
	0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x0e, // .......:........
	0x00, 0x00, 0x0a, 0x82, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, // ............@...
	0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x0a, // ..?...?...?...?.
	0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00, 0x38, 0x20, 0x00, 0x07, 0x42, 0x00, 0x10, 0x00, 0x04, // .......8 ..B....
	0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x04, // ...:.......*....
	0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x09, 0x82, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x2a, // ...2...........*
	0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x01, // ........@.......
	0x40, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x38, 0x00, 0x00, 0x07, 0x42, 0x00, 0x10, 0x00, 0x04, // @....@@8...B....
	0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x04, // ...*.......*....
	0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x07, 0x42, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x2a, // ...8...B.......*
	0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x32, // .......:.......2
	0x00, 0x00, 0x09, 0x42, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x04, // ...B.......*....
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x66, 0x66, 0x66, 0x3f, 0x01, 0x40, 0x00, 0x00, 0x66, // ....@..fff?.@..f
	0x66, 0x66, 0xbf, 0x32, 0x00, 0x00, 0x09, 0x22, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x1a, // ff.2..."........
	0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x04, 0x00, 0x00, 0x00, 0x01, // .......*........
	0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0x3f, 0x38, 0x00, 0x00, 0x07, 0x12, 0x00, 0x10, 0x00, 0x02, // @.....?8........
	0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x04, // ................
	0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x01, 0x36, 0x00, 0x00, 0x05, 0x12, 0x00, 0x10, 0x00, 0x02, // .......6........
	0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x01, 0x1e, // ................
	0x00, 0x00, 0x07, 0x22, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2a, 0x00, 0x10, 0x00, 0x03, // ...".......*....
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x36, 0x00, 0x00, 0x05, 0x72, // ....@......6...r
	0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x26, 0x09, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x36, // .......&.......6
	0x00, 0x00, 0x05, 0x82, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x04, // ................
	0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x01, 0x37, 0x00, 0x00, 0x09, 0x12, 0x00, 0x10, 0x00, 0x01, // .......7........
	0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x10, 0x00, 0x03, // ...:............
	0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x07, 0x72, // ...........8...r
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x46, 0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, // .......F........
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x15, 0x00, 0x00, 0x01, 0x18, 0x00, 0x00, 0x08, 0x12, // ................
	0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3a, 0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, // .......:. ......
	0x00, 0x00, 0x00, 0x01, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x20, 0x00, 0x05, 0x82, // ....@......6 ...
	0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x03, 0x00, 0x00, 0x00, 0x38, // .......:.......8
	0x00, 0x00, 0x09, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x10, 0x00, 0x03, // ...".......:....
	0x00, 0x00, 0x00, 0x1a, 0x80, 0x20, 0x80, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, // ..... .A........
	0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x07, 0x72, 0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x46, // ...8...r.......F
	0x02, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x56, 0x05, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0e, // .......V........
	0x00, 0x00, 0x0b, 0x22, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x40, 0x00, 0x00, 0x00, // ..."........@...
	0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x00, 0x00, 0x80, 0x3f, 0x1a, // ..?...?...?...?.
	0x80, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x82, // . ..............
	0x00, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x1a, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, // ................
	0x40, 0x00, 0x00, 0x00, 0x00, 0x80, 0xbf, 0x37, 0x00, 0x00, 0x09, 0xf2, 0x20, 0x10, 0x00, 0x00, // @......7.... ...
	0x00, 0x00, 0x00, 0x06, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x00, // ...........F....
	0x00, 0x00, 0x00, 0x46, 0x0e, 0x10, 0x00, 0x02, 0x00, 0x00, 0x00, 0x3e, 0x00, 0x00, 0x01, 0x00, // ...F.......>....
	0x00, 0xc0, 0x00,                                                                               // ...
};
static const uint8_t fs_flasher_noclip_spv[6751] =
{
	0x46, 0x53, 0x48, 0x0b, 0xe2, 0xbc, 0x2a, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x05, 0x62, // FSH...*~.......b
	0x61, 0x6c, 0x6c, 0x73, 0x12, 0x08, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x61, // alls..........(a
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x75, // mount_blend_modu
	0x6c, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x73, // late_vs_add_flas
	0x68, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x01, 0xa0, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, // herMode.........
	0x00, 0x24, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, // .$alphaTestValue
	0x41, 0x42, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, // AB_filterMode_ad
	0x64, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x12, 0x01, 0x90, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, // dBlend..........
	0x11, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x41, 0x6c, 0x70, // .staticColor_Alp
	0x68, 0x61, 0x12, 0x01, 0x80, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x6c, 0x69, 0x67, // ha...........lig
	0x68, 0x74, 0x43, 0x65, 0x6e, 0x74, 0x65, 0x72, 0x5f, 0x64, 0x6f, 0x53, 0x68, 0x61, 0x64, 0x6f, // htCenter_doShado
	0x77, 0x12, 0x01, 0xb0, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, // w...........tex_
	0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x41, 0x30, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, // flasher_A0......
	0x02, 0x22, 0x00, 0x0d, 0x74, 0x65, 0x78, 0x5f, 0x66, 0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x5f, // ."..tex_flasher_
	0x42, 0x30, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x02, 0x22, 0x00, 0x6c, 0x19, 0x00, 0x00, 0x03, // B0.......".l....
	0x02, 0x23, 0x07, 0x00, 0x00, 0x01, 0x00, 0x0b, 0x00, 0x08, 0x00, 0xd3, 0x03, 0x00, 0x00, 0x00, // .#..............
	0x00, 0x00, 0x00, 0x11, 0x00, 0x02, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x06, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x47, 0x4c, 0x53, 0x4c, 0x2e, 0x73, 0x74, 0x64, 0x2e, 0x34, 0x35, 0x30, 0x00, // ...GLSL.std.450.
	0x00, 0x00, 0x00, 0x0e, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0f, // ................
	0x00, 0x08, 0x00, 0x04, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, // ...........main.
	0x00, 0x00, 0x00, 0xd9, 0x01, 0x00, 0x00, 0xdd, 0x01, 0x00, 0x00, 0xea, 0x01, 0x00, 0x00, 0x10, // ................
	0x00, 0x03, 0x00, 0x04, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x10, 0x00, 0x03, 0x00, 0x04, // ................
	0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x00, 0x03, 0x00, 0x03, 0x00, 0x05, 0x00, 0x00, 0x00, 0xf4, // ................
	0x01, 0x00, 0x00, 0x05, 0x00, 0x04, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6d, 0x61, 0x69, 0x6e, 0x00, // ...........main.
	0x00, 0x00, 0x00, 0x05, 0x00, 0x08, 0x00, 0x45, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x66, // .......E...tex_f
	0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x41, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x00, // lasher_ASampler.
	0x00, 0x00, 0x00, 0x05, 0x00, 0x08, 0x00, 0x48, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x66, // .......H...tex_f
	0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x41, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x00, // lasher_ATexture.
	0x00, 0x00, 0x00, 0x05, 0x00, 0x08, 0x00, 0x4c, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x66, // .......L...tex_f
	0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x42, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x72, 0x00, // lasher_BSampler.
	0x00, 0x00, 0x00, 0x05, 0x00, 0x08, 0x00, 0x4e, 0x00, 0x00, 0x00, 0x74, 0x65, 0x78, 0x5f, 0x66, // .......N...tex_f
	0x6c, 0x61, 0x73, 0x68, 0x65, 0x72, 0x5f, 0x42, 0x54, 0x65, 0x78, 0x74, 0x75, 0x72, 0x65, 0x00, // lasher_BTexture.
	0x00, 0x00, 0x00, 0x05, 0x00, 0x06, 0x00, 0xb7, 0x00, 0x00, 0x00, 0x55, 0x6e, 0x69, 0x66, 0x6f, // ...........Unifo
	0x72, 0x6d, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x05, 0x00, 0xb7, // rmBlock.........
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x62, 0x61, 0x6c, 0x6c, 0x73, 0x00, 0x00, 0x00, 0x06, // .......balls....
	0x00, 0x08, 0x00, 0xb7, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x73, 0x74, 0x61, 0x74, 0x69, // ...........stati
	0x63, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x41, 0x6c, 0x70, 0x68, 0x61, 0x00, 0x00, 0x00, 0x06, // cColor_Alpha....
	0x00, 0x0d, 0x00, 0xb7, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x61, 0x6c, 0x70, 0x68, 0x61, // ...........alpha
	0x54, 0x65, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x42, 0x5f, 0x66, 0x69, 0x6c, 0x74, // TestValueAB_filt
	0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x64, 0x64, 0x42, 0x6c, 0x65, 0x6e, 0x64, 0x00, // erMode_addBlend.
	0x00, 0x00, 0x00, 0x06, 0x00, 0x0e, 0x00, 0xb7, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x61, // ...............a
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x62, 0x6c, 0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x64, 0x75, // mount_blend_modu
	0x6c, 0x61, 0x74, 0x65, 0x5f, 0x76, 0x73, 0x5f, 0x61, 0x64, 0x64, 0x5f, 0x66, 0x6c, 0x61, 0x73, // late_vs_add_flas
	0x68, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x65, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x09, 0x00, 0xb7, // herMode.........
	0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x43, 0x65, 0x6e, 0x74, // .......lightCent
	0x65, 0x72, 0x5f, 0x64, 0x6f, 0x53, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x00, 0x00, 0x00, 0x00, 0x05, // er_doShadow.....
	0x00, 0x03, 0x00, 0xb9, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x05, 0x00, 0xd9, // ................
	0x01, 0x00, 0x00, 0x76, 0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x6f, 0x73, 0x00, 0x00, 0x05, // ...v_tablePos...
	0x00, 0x05, 0x00, 0xdd, 0x01, 0x00, 0x00, 0x76, 0x5f, 0x74, 0x65, 0x78, 0x63, 0x6f, 0x6f, 0x72, // .......v_texcoor
	0x64, 0x30, 0x00, 0x05, 0x00, 0x06, 0x00, 0xea, 0x01, 0x00, 0x00, 0x62, 0x67, 0x66, 0x78, 0x5f, // d0.........bgfx_
	0x46, 0x72, 0x61, 0x67, 0x44, 0x61, 0x74, 0x61, 0x30, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x45, // FragData0..G...E
	0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x45, // ...".......G...E
	0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x48, // ...!.......G...H
	0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x48, // ...".......G...H
	0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x4c, // ...!.......G...L
	0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x4c, // ...".......G...L
	0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x4e, // ...!.......G...N
	0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0x4e, // ...".......G...N
	0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0xb6, // ...!.......G....
	0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0xb7, // ...........H....
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, // .......#.......H
	0x00, 0x05, 0x00, 0xb7, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0x80, // ...........#....
	0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0xb7, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x23, // ...H...........#
	0x00, 0x00, 0x00, 0x90, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0xb7, 0x00, 0x00, 0x00, 0x03, // .......H........
	0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0xa0, 0x00, 0x00, 0x00, 0x48, 0x00, 0x05, 0x00, 0xb7, // ...#.......H....
	0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x23, 0x00, 0x00, 0x00, 0xb0, 0x00, 0x00, 0x00, 0x47, // .......#.......G
	0x00, 0x03, 0x00, 0xb7, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0xb9, // ...........G....
	0x00, 0x00, 0x00, 0x22, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0xb9, // ...".......G....
	0x00, 0x00, 0x00, 0x21, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0xd9, // ...!.......G....
	0x01, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0xdd, // ...........G....
	0x01, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x47, 0x00, 0x04, 0x00, 0xea, // ...........G....
	0x01, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x13, 0x00, 0x02, 0x00, 0x02, // ................
	0x00, 0x00, 0x00, 0x21, 0x00, 0x03, 0x00, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x1a, // ...!............
	0x00, 0x02, 0x00, 0x06, 0x00, 0x00, 0x00, 0x16, 0x00, 0x03, 0x00, 0x07, 0x00, 0x00, 0x00, 0x20, // ............... 
	0x00, 0x00, 0x00, 0x19, 0x00, 0x09, 0x00, 0x08, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x07, // ................
	0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x07, // ................
	0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x17, 0x00, 0x04, 0x00, 0x33, 0x00, 0x00, 0x00, 0x07, // ...........3....
	0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x44, 0x00, 0x00, 0x00, 0x00, // ....... ...D....
	0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x44, 0x00, 0x00, 0x00, 0x45, // .......;...D...E
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x04, 0x00, 0x47, 0x00, 0x00, 0x00, 0x00, // ....... ...G....
	0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x47, 0x00, 0x00, 0x00, 0x48, // .......;...G...H
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x44, 0x00, 0x00, 0x00, 0x4c, // .......;...D...L
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3b, 0x00, 0x04, 0x00, 0x47, 0x00, 0x00, 0x00, 0x4e, // .......;...G...N
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x15, 0x00, 0x04, 0x00, 0x51, 0x00, 0x00, 0x00, 0x20, // ...........Q... 
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x51, 0x00, 0x00, 0x00, 0x52, // .......+...Q...R
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x51, 0x00, 0x00, 0x00, 0x56, // .......+...Q...V
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1b, 0x00, 0x03, 0x00, 0x5a, 0x00, 0x00, 0x00, 0x08, // ...........Z....
	0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0x00, // ...+.......t....
	0x00, 0x80, 0x3f, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, // ..?+.......~....
	0x00, 0x00, 0x00, 0x2c, 0x00, 0x07, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x7e, // ...,...........~
	0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x2b, // ...~...~...~...+
	0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x8b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x2c, // ..............?,
	0x00, 0x07, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x8c, 0x00, 0x00, 0x00, 0x8b, 0x00, 0x00, 0x00, 0x8b, // ................
	0x00, 0x00, 0x00, 0x8b, 0x00, 0x00, 0x00, 0x8b, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, // ...........+....
	0x00, 0x00, 0x00, 0x92, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x2b, 0x00, 0x04, 0x00, 0x51, // ..........@+...Q
	0x00, 0x00, 0x00, 0xb0, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x14, 0x00, 0x02, 0x00, 0xb1, // ................
	0x00, 0x00, 0x00, 0x15, 0x00, 0x04, 0x00, 0xb4, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, // ........... ....
	0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0xb4, 0x00, 0x00, 0x00, 0xb5, 0x00, 0x00, 0x00, 0x08, // ...+............
	0x00, 0x00, 0x00, 0x1c, 0x00, 0x04, 0x00, 0xb6, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0xb5, // ................
	0x00, 0x00, 0x00, 0x1e, 0x00, 0x07, 0x00, 0xb7, 0x00, 0x00, 0x00, 0xb6, 0x00, 0x00, 0x00, 0x0d, // ................
	0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x20, // ............... 
	0x00, 0x04, 0x00, 0xb8, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xb7, 0x00, 0x00, 0x00, 0x3b, // ...............;
	0x00, 0x04, 0x00, 0xb8, 0x00, 0x00, 0x00, 0xb9, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2b, // ...............+
	0x00, 0x04, 0x00, 0xb4, 0x00, 0x00, 0x00, 0xbb, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x20, // ............... 
	0x00, 0x04, 0x00, 0xbc, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x20, // ............... 
	0x00, 0x04, 0x00, 0xc7, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x2b, // ...............+
	0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x00, 0xa0, 0x40, 0x2b, // ..............@+
	0x00, 0x04, 0x00, 0xb4, 0x00, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x2b, // ...............+
	0x00, 0x04, 0x00, 0xb4, 0x00, 0x00, 0x00, 0xf6, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2b, // ...............+
	0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x03, 0x01, 0x00, 0x00, 0x66, 0x66, 0x66, 0xbf, 0x2b, // ...........fff.+
	0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x04, 0x01, 0x00, 0x00, 0x66, 0x66, 0x66, 0x3f, 0x2b, // ...........fff?+
	0x00, 0x04, 0x00, 0x51, 0x00, 0x00, 0x00, 0x1b, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x2b, // ...Q...........+
	0x00, 0x04, 0x00, 0xb4, 0x00, 0x00, 0x00, 0x1c, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2b, // ...............+
	0x00, 0x04, 0x00, 0x51, 0x00, 0x00, 0x00, 0x2a, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x2b, // ...Q...*.......+
	0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x66, 0x01, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x2b, // .......f.....@@+
	0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x85, 0x01, 0x00, 0x00, 0x00, 0x00, 0x80, 0x40, 0x2b, // ..............@+
	0x00, 0x04, 0x00, 0x51, 0x00, 0x00, 0x00, 0x90, 0x01, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x20, // ...Q........... 
	0x00, 0x04, 0x00, 0xd8, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x33, 0x00, 0x00, 0x00, 0x3b, // ...........3...;
	0x00, 0x04, 0x00, 0xd8, 0x01, 0x00, 0x00, 0xd9, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x20, // ............... 
	0x00, 0x04, 0x00, 0xdc, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x0b, 0x00, 0x00, 0x00, 0x3b, // ...............;
	0x00, 0x04, 0x00, 0xdc, 0x01, 0x00, 0x00, 0xdd, 0x01, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x20, // ............... 
	0x00, 0x04, 0x00, 0xe9, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x3b, // ...............;
	0x00, 0x04, 0x00, 0xe9, 0x01, 0x00, 0x00, 0xea, 0x01, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x2a, // ...............*
	0x00, 0x03, 0x00, 0xb1, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x29, 0x00, 0x03, 0x00, 0xb1, // ...........)....
	0x00, 0x00, 0x00, 0x03, 0x02, 0x00, 0x00, 0x2c, 0x00, 0x07, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x9f, // .......,........
	0x03, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0x74, // ...t...t...t...t
	0x00, 0x00, 0x00, 0x2b, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0xa3, 0x03, 0x00, 0x00, 0x00, // ...+............
	0x00, 0xa0, 0xc0, 0x01, 0x00, 0x03, 0x00, 0x0d, 0x00, 0x00, 0x00, 0xa6, 0x03, 0x00, 0x00, 0x01, // ................
	0x00, 0x03, 0x00, 0x07, 0x00, 0x00, 0x00, 0xc3, 0x03, 0x00, 0x00, 0x36, 0x00, 0x05, 0x00, 0x02, // ...........6....
	0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0xf8, // ................
	0x00, 0x02, 0x00, 0x05, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0x46, // .......=.......F
	0x00, 0x00, 0x00, 0x45, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x08, 0x00, 0x00, 0x00, 0x49, // ...E...=.......I
	0x00, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x06, 0x00, 0x00, 0x00, 0x4d, // ...H...=.......M
	0x00, 0x00, 0x00, 0x4c, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x08, 0x00, 0x00, 0x00, 0x4f, // ...L...=.......O
	0x00, 0x00, 0x00, 0x4e, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x33, 0x00, 0x00, 0x00, 0xda, // ...N...=...3....
	0x01, 0x00, 0x00, 0xd9, 0x01, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x0b, 0x00, 0x00, 0x00, 0xde, // .......=........
	0x01, 0x00, 0x00, 0xdd, 0x01, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0xc1, 0x02, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0xfb, 0x00, 0x03, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x28, 0x02, 0x00, 0x00, 0xf8, // ...........(....
	0x00, 0x02, 0x00, 0x28, 0x02, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0xbc, 0x00, 0x00, 0x00, 0x2a, // ...(...A.......*
	0x02, 0x00, 0x00, 0xb9, 0x00, 0x00, 0x00, 0x1b, 0x01, 0x00, 0x00, 0x1c, 0x01, 0x00, 0x00, 0x3d, // ...............=
	0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x2b, 0x02, 0x00, 0x00, 0x2a, 0x02, 0x00, 0x00, 0xb8, // .......+...*....
	0x00, 0x05, 0x00, 0xb1, 0x00, 0x00, 0x00, 0x2c, 0x02, 0x00, 0x00, 0x2b, 0x02, 0x00, 0x00, 0x92, // .......,...+....
	0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x39, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, // .......9........
	0x00, 0x04, 0x00, 0x2c, 0x02, 0x00, 0x00, 0x2d, 0x02, 0x00, 0x00, 0x39, 0x02, 0x00, 0x00, 0xf8, // ...,...-...9....
	0x00, 0x02, 0x00, 0x2d, 0x02, 0x00, 0x00, 0x56, 0x00, 0x05, 0x00, 0x5a, 0x00, 0x00, 0x00, 0xcf, // ...-...V...Z....
	0x02, 0x00, 0x00, 0x49, 0x00, 0x00, 0x00, 0x46, 0x00, 0x00, 0x00, 0x57, 0x00, 0x05, 0x00, 0x0d, // ...I...F...W....
	0x00, 0x00, 0x00, 0xd1, 0x02, 0x00, 0x00, 0xcf, 0x02, 0x00, 0x00, 0xde, 0x01, 0x00, 0x00, 0x51, // ...............Q
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x32, 0x02, 0x00, 0x00, 0xd1, 0x02, 0x00, 0x00, 0x03, // .......2........
	0x00, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0xbc, 0x00, 0x00, 0x00, 0x33, 0x02, 0x00, 0x00, 0xb9, // ...A.......3....
	0x00, 0x00, 0x00, 0x2a, 0x01, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, // ...*.......=....
	0x00, 0x00, 0x00, 0x34, 0x02, 0x00, 0x00, 0x33, 0x02, 0x00, 0x00, 0xbc, 0x00, 0x05, 0x00, 0xb1, // ...4...3........
	0x00, 0x00, 0x00, 0x35, 0x02, 0x00, 0x00, 0x32, 0x02, 0x00, 0x00, 0x34, 0x02, 0x00, 0x00, 0xf7, // ...5...2...4....
	0x00, 0x03, 0x00, 0x38, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0x35, // ...8...........5
	0x02, 0x00, 0x00, 0x36, 0x02, 0x00, 0x00, 0x38, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x36, // ...6...8.......6
	0x02, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0xc1, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x38, // ...............8
	0x02, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x39, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x39, // .......9.......9
	0x02, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x0d, 0x00, 0x00, 0x00, 0xa5, 0x03, 0x00, 0x00, 0xa6, // ................
	0x03, 0x00, 0x00, 0x28, 0x02, 0x00, 0x00, 0xd1, 0x02, 0x00, 0x00, 0x38, 0x02, 0x00, 0x00, 0x41, // ...(.......8...A
	0x00, 0x06, 0x00, 0xbc, 0x00, 0x00, 0x00, 0x3a, 0x02, 0x00, 0x00, 0xb9, 0x00, 0x00, 0x00, 0x1b, // .......:........
	0x01, 0x00, 0x00, 0x1c, 0x01, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x3b, // .......=.......;
	0x02, 0x00, 0x00, 0x3a, 0x02, 0x00, 0x00, 0xb4, 0x00, 0x05, 0x00, 0xb1, 0x00, 0x00, 0x00, 0x3c, // ...:...........<
	0x02, 0x00, 0x00, 0x3b, 0x02, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x49, // ...;...t.......I
	0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0x3c, 0x02, 0x00, 0x00, 0x3d, // ...........<...=
	0x02, 0x00, 0x00, 0x49, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x3d, 0x02, 0x00, 0x00, 0x56, // ...I.......=...V
	0x00, 0x05, 0x00, 0x5a, 0x00, 0x00, 0x00, 0xdf, 0x02, 0x00, 0x00, 0x4f, 0x00, 0x00, 0x00, 0x4d, // ...Z.......O...M
	0x00, 0x00, 0x00, 0x57, 0x00, 0x05, 0x00, 0x0d, 0x00, 0x00, 0x00, 0xe1, 0x02, 0x00, 0x00, 0xdf, // ...W............
	0x02, 0x00, 0x00, 0xde, 0x01, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x42, // .......Q.......B
	0x02, 0x00, 0x00, 0xe1, 0x02, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0xbc, // ...........A....
	0x00, 0x00, 0x00, 0x43, 0x02, 0x00, 0x00, 0xb9, 0x00, 0x00, 0x00, 0x2a, 0x01, 0x00, 0x00, 0xf6, // ...C.......*....
	0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x44, 0x02, 0x00, 0x00, 0x43, // ...=.......D...C
	0x02, 0x00, 0x00, 0xbc, 0x00, 0x05, 0x00, 0xb1, 0x00, 0x00, 0x00, 0x45, 0x02, 0x00, 0x00, 0x42, // ...........E...B
	0x02, 0x00, 0x00, 0x44, 0x02, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x48, 0x02, 0x00, 0x00, 0x00, // ...D.......H....
	0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0x45, 0x02, 0x00, 0x00, 0x46, 0x02, 0x00, 0x00, 0x48, // .......E...F...H
	0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x46, 0x02, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0xc1, // .......F........
	0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x48, 0x02, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x49, // .......H.......I
	0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x49, 0x02, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x0d, // .......I........
	0x00, 0x00, 0x00, 0xa9, 0x03, 0x00, 0x00, 0xa6, 0x03, 0x00, 0x00, 0x39, 0x02, 0x00, 0x00, 0xe1, // ...........9....
	0x02, 0x00, 0x00, 0x48, 0x02, 0x00, 0x00, 0x41, 0x00, 0x05, 0x00, 0xc7, 0x00, 0x00, 0x00, 0x4a, // ...H...A.......J
	0x02, 0x00, 0x00, 0xb9, 0x00, 0x00, 0x00, 0x52, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x0d, // .......R...=....
	0x00, 0x00, 0x00, 0x4b, 0x02, 0x00, 0x00, 0x4a, 0x02, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0xbc, // ...K...J...A....
	0x00, 0x00, 0x00, 0x4c, 0x02, 0x00, 0x00, 0xb9, 0x00, 0x00, 0x00, 0x1b, 0x01, 0x00, 0x00, 0x1c, // ...L............
	0x01, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x4d, 0x02, 0x00, 0x00, 0x4c, // ...=.......M...L
	0x02, 0x00, 0x00, 0xb4, 0x00, 0x05, 0x00, 0xb1, 0x00, 0x00, 0x00, 0x4e, 0x02, 0x00, 0x00, 0x4d, // ...........N...M
	0x02, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x53, 0x02, 0x00, 0x00, 0x00, // ...~.......S....
	0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0x4e, 0x02, 0x00, 0x00, 0x4f, 0x02, 0x00, 0x00, 0x53, // .......N...O...S
	0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x4f, 0x02, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x0d, // .......O........
	0x00, 0x00, 0x00, 0x52, 0x02, 0x00, 0x00, 0x4b, 0x02, 0x00, 0x00, 0xa5, 0x03, 0x00, 0x00, 0xf9, // ...R...K........
	0x00, 0x02, 0x00, 0x53, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x53, 0x02, 0x00, 0x00, 0xf5, // ...S.......S....
	0x00, 0x07, 0x00, 0x0d, 0x00, 0x00, 0x00, 0xab, 0x03, 0x00, 0x00, 0x4b, 0x02, 0x00, 0x00, 0x49, // ...........K...I
	0x02, 0x00, 0x00, 0x52, 0x02, 0x00, 0x00, 0x4f, 0x02, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0xbc, // ...R...O...A....
	0x00, 0x00, 0x00, 0x54, 0x02, 0x00, 0x00, 0xb9, 0x00, 0x00, 0x00, 0x1b, 0x01, 0x00, 0x00, 0x1c, // ...T............
	0x01, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x55, 0x02, 0x00, 0x00, 0x54, // ...=.......U...T
	0x02, 0x00, 0x00, 0xb4, 0x00, 0x05, 0x00, 0xb1, 0x00, 0x00, 0x00, 0x56, 0x02, 0x00, 0x00, 0x55, // ...........V...U
	0x02, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x84, 0x02, 0x00, 0x00, 0x00, // ...t............
	0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0x56, 0x02, 0x00, 0x00, 0x57, 0x02, 0x00, 0x00, 0x84, // .......V...W....
	0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x57, 0x02, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0xbc, // .......W...A....
	0x00, 0x00, 0x00, 0x58, 0x02, 0x00, 0x00, 0xb9, 0x00, 0x00, 0x00, 0x2a, 0x01, 0x00, 0x00, 0x1c, // ...X.......*....
	0x01, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x59, 0x02, 0x00, 0x00, 0x58, // ...=.......Y...X
	0x02, 0x00, 0x00, 0xb4, 0x00, 0x05, 0x00, 0xb1, 0x00, 0x00, 0x00, 0x5a, 0x02, 0x00, 0x00, 0x59, // ...........Z...Y
	0x02, 0x00, 0x00, 0x92, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x61, 0x02, 0x00, 0x00, 0x00, // ...........a....
	0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0x5a, 0x02, 0x00, 0x00, 0x5b, 0x02, 0x00, 0x00, 0x61, // .......Z...[...a
	0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x5b, 0x02, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x0d, // .......[........
	0x00, 0x00, 0x00, 0xf0, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x8c, // ...........0....
	0x00, 0x00, 0x00, 0xa5, 0x03, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x0d, 0x00, 0x00, 0x00, 0xf3, // ................
	0x02, 0x00, 0x00, 0xa5, 0x03, 0x00, 0x00, 0xa9, 0x03, 0x00, 0x00, 0x8e, 0x00, 0x05, 0x00, 0x0d, // ................
	0x00, 0x00, 0x00, 0xf4, 0x02, 0x00, 0x00, 0xf3, 0x02, 0x00, 0x00, 0x92, 0x00, 0x00, 0x00, 0x83, // ................
	0x00, 0x05, 0x00, 0x0d, 0x00, 0x00, 0x00, 0xf7, 0x02, 0x00, 0x00, 0x9f, 0x03, 0x00, 0x00, 0xa5, // ................
	0x03, 0x00, 0x00, 0x8e, 0x00, 0x05, 0x00, 0x0d, 0x00, 0x00, 0x00, 0xf8, 0x02, 0x00, 0x00, 0xf7, // ................
	0x02, 0x00, 0x00, 0x92, 0x00, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x0d, 0x00, 0x00, 0x00, 0xfb, // ................
	0x02, 0x00, 0x00, 0x9f, 0x03, 0x00, 0x00, 0xa9, 0x03, 0x00, 0x00, 0x7f, 0x00, 0x04, 0x00, 0x0d, // ................
	0x00, 0x00, 0x00, 0xa0, 0x03, 0x00, 0x00, 0xf8, 0x02, 0x00, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x0d, // ................
	0x00, 0x00, 0x00, 0xfe, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0xa0, // ...........2....
	0x03, 0x00, 0x00, 0xfb, 0x02, 0x00, 0x00, 0x9f, 0x03, 0x00, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x0d, // ................
	0x00, 0x00, 0x00, 0x08, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2e, 0x00, 0x00, 0x00, 0xf4, // ................
	0x02, 0x00, 0x00, 0xfe, 0x02, 0x00, 0x00, 0xf0, 0x02, 0x00, 0x00, 0x0c, 0x00, 0x07, 0x00, 0x0d, // ................
	0x00, 0x00, 0x00, 0x01, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 0x08, // ...........(....
	0x03, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x60, // ...............`
	0x02, 0x00, 0x00, 0xab, 0x03, 0x00, 0x00, 0x01, 0x03, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x61, // ...............a
	0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x61, 0x02, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x0d, // .......a........
	0x00, 0x00, 0x00, 0xae, 0x03, 0x00, 0x00, 0xab, 0x03, 0x00, 0x00, 0x57, 0x02, 0x00, 0x00, 0x60, // ...........W...`
	0x02, 0x00, 0x00, 0x5b, 0x02, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0xbc, 0x00, 0x00, 0x00, 0x62, // ...[...A.......b
	0x02, 0x00, 0x00, 0xb9, 0x00, 0x00, 0x00, 0x2a, 0x01, 0x00, 0x00, 0x1c, 0x01, 0x00, 0x00, 0x3d, // .......*.......=
	0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x63, 0x02, 0x00, 0x00, 0x62, 0x02, 0x00, 0x00, 0xb4, // .......c...b....
	0x00, 0x05, 0x00, 0xb1, 0x00, 0x00, 0x00, 0x64, 0x02, 0x00, 0x00, 0x63, 0x02, 0x00, 0x00, 0x66, // .......d...c...f
	0x01, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x6d, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, // .......m........
	0x00, 0x04, 0x00, 0x64, 0x02, 0x00, 0x00, 0x65, 0x02, 0x00, 0x00, 0x6d, 0x02, 0x00, 0x00, 0xf8, // ...d...e...m....
	0x00, 0x02, 0x00, 0x65, 0x02, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0xbc, 0x00, 0x00, 0x00, 0x68, // ...e...A.......h
	0x02, 0x00, 0x00, 0xb9, 0x00, 0x00, 0x00, 0x1b, 0x01, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x3d, // ...............=
	0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x69, 0x02, 0x00, 0x00, 0x68, 0x02, 0x00, 0x00, 0x85, // .......i...h....
	0x00, 0x05, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x0d, 0x03, 0x00, 0x00, 0xa5, 0x03, 0x00, 0x00, 0xa9, // ................
	0x03, 0x00, 0x00, 0x8e, 0x00, 0x05, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x0f, 0x03, 0x00, 0x00, 0x0d, // ................
	0x03, 0x00, 0x00, 0x69, 0x02, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x6c, // ...i...........l
	0x02, 0x00, 0x00, 0xae, 0x03, 0x00, 0x00, 0x0f, 0x03, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x6d, // ...............m
	0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x6d, 0x02, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x0d, // .......m........
	0x00, 0x00, 0x00, 0xb1, 0x03, 0x00, 0x00, 0xae, 0x03, 0x00, 0x00, 0x61, 0x02, 0x00, 0x00, 0x6c, // ...........a...l
	0x02, 0x00, 0x00, 0x65, 0x02, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0xbc, 0x00, 0x00, 0x00, 0x6e, // ...e...A.......n
	0x02, 0x00, 0x00, 0xb9, 0x00, 0x00, 0x00, 0x2a, 0x01, 0x00, 0x00, 0x1c, 0x01, 0x00, 0x00, 0x3d, // .......*.......=
	0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x6f, 0x02, 0x00, 0x00, 0x6e, 0x02, 0x00, 0x00, 0xb4, // .......o...n....
	0x00, 0x05, 0x00, 0xb1, 0x00, 0x00, 0x00, 0x70, 0x02, 0x00, 0x00, 0x6f, 0x02, 0x00, 0x00, 0x74, // .......p...o...t
	0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x79, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, // .......y........
	0x00, 0x04, 0x00, 0x70, 0x02, 0x00, 0x00, 0x71, 0x02, 0x00, 0x00, 0x79, 0x02, 0x00, 0x00, 0xf8, // ...p...q...y....
	0x00, 0x02, 0x00, 0x71, 0x02, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0xbc, 0x00, 0x00, 0x00, 0x74, // ...q...A.......t
	0x02, 0x00, 0x00, 0xb9, 0x00, 0x00, 0x00, 0x1b, 0x01, 0x00, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x3d, // ...............=
	0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x75, 0x02, 0x00, 0x00, 0x74, 0x02, 0x00, 0x00, 0x8e, // .......u...t....
	0x00, 0x05, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x15, 0x03, 0x00, 0x00, 0xa9, 0x03, 0x00, 0x00, 0x75, // ...............u
	0x02, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x16, 0x03, 0x00, 0x00, 0xa5, // ................
	0x03, 0x00, 0x00, 0x15, 0x03, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x78, // ...............x
	0x02, 0x00, 0x00, 0xb1, 0x03, 0x00, 0x00, 0x16, 0x03, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x79, // ...............y
	0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x79, 0x02, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x0d, // .......y........
	0x00, 0x00, 0x00, 0xb4, 0x03, 0x00, 0x00, 0xb1, 0x03, 0x00, 0x00, 0x6d, 0x02, 0x00, 0x00, 0x78, // ...........m...x
	0x02, 0x00, 0x00, 0x71, 0x02, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0xbc, 0x00, 0x00, 0x00, 0x7a, // ...q...A.......z
	0x02, 0x00, 0x00, 0xb9, 0x00, 0x00, 0x00, 0x2a, 0x01, 0x00, 0x00, 0x1c, 0x01, 0x00, 0x00, 0x3d, // .......*.......=
	0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x7b, 0x02, 0x00, 0x00, 0x7a, 0x02, 0x00, 0x00, 0xb4, // .......{...z....
	0x00, 0x05, 0x00, 0xb1, 0x00, 0x00, 0x00, 0x7c, 0x02, 0x00, 0x00, 0x7b, 0x02, 0x00, 0x00, 0x85, // .......|...{....
	0x01, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x83, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, // ................
	0x00, 0x04, 0x00, 0x7c, 0x02, 0x00, 0x00, 0x7d, 0x02, 0x00, 0x00, 0x83, 0x02, 0x00, 0x00, 0xf8, // ...|...}........
	0x00, 0x02, 0x00, 0x7d, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x1e, // ...}............
	0x03, 0x00, 0x00, 0x9f, 0x03, 0x00, 0x00, 0xa9, 0x03, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x0d, // ................
	0x00, 0x00, 0x00, 0xa1, 0x03, 0x00, 0x00, 0xa5, 0x03, 0x00, 0x00, 0x9f, 0x03, 0x00, 0x00, 0x0c, // ................
	0x00, 0x08, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x21, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, // .......!.......2
	0x00, 0x00, 0x00, 0xa1, 0x03, 0x00, 0x00, 0x1e, 0x03, 0x00, 0x00, 0x9f, 0x03, 0x00, 0x00, 0x0c, // ................
	0x00, 0x07, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x22, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x28, // .......".......(
	0x00, 0x00, 0x00, 0x21, 0x03, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x0d, // ...!............
	0x00, 0x00, 0x00, 0x82, 0x02, 0x00, 0x00, 0xb4, 0x03, 0x00, 0x00, 0x22, 0x03, 0x00, 0x00, 0xf9, // ..........."....
	0x00, 0x02, 0x00, 0x83, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x83, 0x02, 0x00, 0x00, 0xf5, // ................
	0x00, 0x07, 0x00, 0x0d, 0x00, 0x00, 0x00, 0xcd, 0x03, 0x00, 0x00, 0xb4, 0x03, 0x00, 0x00, 0x79, // ...............y
	0x02, 0x00, 0x00, 0x82, 0x02, 0x00, 0x00, 0x7d, 0x02, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x84, // .......}........
	0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x84, 0x02, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x0d, // ................
	0x00, 0x00, 0x00, 0xcc, 0x03, 0x00, 0x00, 0xab, 0x03, 0x00, 0x00, 0x53, 0x02, 0x00, 0x00, 0xcd, // ...........S....
	0x03, 0x00, 0x00, 0x83, 0x02, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0xbc, 0x00, 0x00, 0x00, 0x85, // .......A........
	0x02, 0x00, 0x00, 0xb9, 0x00, 0x00, 0x00, 0x90, 0x01, 0x00, 0x00, 0xbb, 0x00, 0x00, 0x00, 0x3d, // ...............=
	0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0x86, 0x02, 0x00, 0x00, 0x85, 0x02, 0x00, 0x00, 0xb7, // ................
	0x00, 0x05, 0x00, 0xb1, 0x00, 0x00, 0x00, 0x87, 0x02, 0x00, 0x00, 0x86, 0x02, 0x00, 0x00, 0x7e, // ...............~
	0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0xa0, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, // ................
	0x00, 0x04, 0x00, 0x87, 0x02, 0x00, 0x00, 0x88, 0x02, 0x00, 0x00, 0xa0, 0x02, 0x00, 0x00, 0xf8, // ................
	0x00, 0x02, 0x00, 0x88, 0x02, 0x00, 0x00, 0x41, 0x00, 0x05, 0x00, 0xc7, 0x00, 0x00, 0x00, 0x8a, // .......A........
	0x02, 0x00, 0x00, 0xb9, 0x00, 0x00, 0x00, 0x90, 0x01, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x0d, // ...........=....
	0x00, 0x00, 0x00, 0x8b, 0x02, 0x00, 0x00, 0x8a, 0x02, 0x00, 0x00, 0x4f, 0x00, 0x08, 0x00, 0x33, // ...........O...3
	0x00, 0x00, 0x00, 0x8c, 0x02, 0x00, 0x00, 0x8b, 0x02, 0x00, 0x00, 0x8b, 0x02, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x33, // ...............3
	0x00, 0x00, 0x00, 0x8d, 0x02, 0x00, 0x00, 0xda, 0x01, 0x00, 0x00, 0x8c, 0x02, 0x00, 0x00, 0x0c, // ................
	0x00, 0x06, 0x00, 0x07, 0x00, 0x00, 0x00, 0x8f, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x42, // ...............B
	0x00, 0x00, 0x00, 0x8d, 0x02, 0x00, 0x00, 0x41, 0x00, 0x05, 0x00, 0xc7, 0x00, 0x00, 0x00, 0x90, // .......A........
	0x02, 0x00, 0x00, 0xb9, 0x00, 0x00, 0x00, 0x90, 0x01, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x0d, // ...........=....
	0x00, 0x00, 0x00, 0x91, 0x02, 0x00, 0x00, 0x90, 0x02, 0x00, 0x00, 0x4f, 0x00, 0x08, 0x00, 0x33, // ...........O...3
	0x00, 0x00, 0x00, 0x92, 0x02, 0x00, 0x00, 0x91, 0x02, 0x00, 0x00, 0x91, 0x02, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x87, // ................
	0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfb, 0x00, 0x03, 0x00, 0xf0, 0x00, 0x00, 0x00, 0x32, // ...............2
	0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x32, 0x03, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x33, // .......2.......3
	0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x33, 0x03, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x07, // .......3........
	0x00, 0x00, 0x00, 0xb6, 0x03, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0x32, 0x03, 0x00, 0x00, 0xd2, // .......t...2....
	0x03, 0x00, 0x00, 0x80, 0x03, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x51, 0x00, 0x00, 0x00, 0xb5, // ...........Q....
	0x03, 0x00, 0x00, 0x56, 0x00, 0x00, 0x00, 0x32, 0x03, 0x00, 0x00, 0x82, 0x03, 0x00, 0x00, 0x80, // ...V...2........
	0x03, 0x00, 0x00, 0xb1, 0x00, 0x05, 0x00, 0xb1, 0x00, 0x00, 0x00, 0x36, 0x03, 0x00, 0x00, 0xb5, // ...........6....
	0x03, 0x00, 0x00, 0xb0, 0x00, 0x00, 0x00, 0xf6, 0x00, 0x04, 0x00, 0x83, 0x03, 0x00, 0x00, 0x80, // ................
	0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0x36, 0x03, 0x00, 0x00, 0x37, // ...........6...7
	0x03, 0x00, 0x00, 0x83, 0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x37, 0x03, 0x00, 0x00, 0x41, // ...........7...A
	0x00, 0x07, 0x00, 0xbc, 0x00, 0x00, 0x00, 0x39, 0x03, 0x00, 0x00, 0xb9, 0x00, 0x00, 0x00, 0x56, // .......9.......V
	0x00, 0x00, 0x00, 0xb5, 0x03, 0x00, 0x00, 0xbb, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, // ...........=....
	0x00, 0x00, 0x00, 0x3a, 0x03, 0x00, 0x00, 0x39, 0x03, 0x00, 0x00, 0xb4, 0x00, 0x05, 0x00, 0xb1, // ...:...9........
	0x00, 0x00, 0x00, 0x3c, 0x03, 0x00, 0x00, 0x3a, 0x03, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0xf7, // ...<...:...~....
	0x00, 0x03, 0x00, 0x3f, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0x3c, // ...?...........<
	0x03, 0x00, 0x00, 0x3d, 0x03, 0x00, 0x00, 0x3f, 0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x3d, // ...=...?.......=
	0x03, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x83, 0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x3f, // ...............?
	0x03, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0xc7, 0x00, 0x00, 0x00, 0x41, 0x03, 0x00, 0x00, 0xb9, // ...A.......A....
	0x00, 0x00, 0x00, 0x56, 0x00, 0x00, 0x00, 0xb5, 0x03, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x0d, // ...V.......=....
	0x00, 0x00, 0x00, 0x42, 0x03, 0x00, 0x00, 0x41, 0x03, 0x00, 0x00, 0x4f, 0x00, 0x08, 0x00, 0x33, // ...B...A...O...3
	0x00, 0x00, 0x00, 0x43, 0x03, 0x00, 0x00, 0x42, 0x03, 0x00, 0x00, 0x42, 0x03, 0x00, 0x00, 0x00, // ...C...B...B....
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x33, // ...............3
	0x00, 0x00, 0x00, 0x46, 0x03, 0x00, 0x00, 0x43, 0x03, 0x00, 0x00, 0x92, 0x02, 0x00, 0x00, 0x94, // ...F...C........
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x49, 0x03, 0x00, 0x00, 0x46, 0x03, 0x00, 0x00, 0x8d, // .......I...F....
	0x02, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x4c, 0x03, 0x00, 0x00, 0x8f, // ...........L....
	0x02, 0x00, 0x00, 0x8f, 0x02, 0x00, 0x00, 0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x4d, // ...............M
	0x03, 0x00, 0x00, 0x49, 0x03, 0x00, 0x00, 0x4c, 0x03, 0x00, 0x00, 0xba, 0x00, 0x05, 0x00, 0xb1, // ...I...L........
	0x00, 0x00, 0x00, 0x4f, 0x03, 0x00, 0x00, 0x4d, 0x03, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0xb8, // ...O...M...~....
	0x00, 0x05, 0x00, 0xb1, 0x00, 0x00, 0x00, 0x51, 0x03, 0x00, 0x00, 0x4d, 0x03, 0x00, 0x00, 0x74, // .......Q...M...t
	0x00, 0x00, 0x00, 0xa7, 0x00, 0x05, 0x00, 0xb1, 0x00, 0x00, 0x00, 0x52, 0x03, 0x00, 0x00, 0x4f, // ...........R...O
	0x03, 0x00, 0x00, 0x51, 0x03, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x7f, 0x03, 0x00, 0x00, 0x00, // ...Q............
	0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0x52, 0x03, 0x00, 0x00, 0x53, 0x03, 0x00, 0x00, 0x7f, // .......R...S....
	0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x53, 0x03, 0x00, 0x00, 0x8e, 0x00, 0x05, 0x00, 0x33, // .......S.......3
	0x00, 0x00, 0x00, 0x57, 0x03, 0x00, 0x00, 0x8d, 0x02, 0x00, 0x00, 0x4d, 0x03, 0x00, 0x00, 0x83, // ...W.......M....
	0x00, 0x05, 0x00, 0x33, 0x00, 0x00, 0x00, 0x58, 0x03, 0x00, 0x00, 0x46, 0x03, 0x00, 0x00, 0x57, // ...3...X...F...W
	0x03, 0x00, 0x00, 0x0c, 0x00, 0x06, 0x00, 0x07, 0x00, 0x00, 0x00, 0x5a, 0x03, 0x00, 0x00, 0x01, // ...........Z....
	0x00, 0x00, 0x00, 0x42, 0x00, 0x00, 0x00, 0x58, 0x03, 0x00, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x07, // ...B...X........
	0x00, 0x00, 0x00, 0x5f, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, 0x00, 0x00, 0x00, 0xa3, // ..._.......2....
	0x03, 0x00, 0x00, 0x4d, 0x03, 0x00, 0x00, 0xe8, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, // ...M.......Q....
	0x00, 0x00, 0x00, 0x61, 0x03, 0x00, 0x00, 0x46, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, // ...a...F.......Q
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x63, 0x03, 0x00, 0x00, 0x46, 0x03, 0x00, 0x00, 0x00, // .......c...F....
	0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x66, 0x03, 0x00, 0x00, 0x46, // ...Q.......f...F
	0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x68, // .......Q.......h
	0x03, 0x00, 0x00, 0x46, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, // ...F............
	0x00, 0x00, 0x00, 0x69, 0x03, 0x00, 0x00, 0x66, 0x03, 0x00, 0x00, 0x68, 0x03, 0x00, 0x00, 0x0c, // ...i...f...h....
	0x00, 0x08, 0x00, 0x07, 0x00, 0x00, 0x00, 0x6a, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, // .......j.......2
	0x00, 0x00, 0x00, 0x61, 0x03, 0x00, 0x00, 0x63, 0x03, 0x00, 0x00, 0x69, 0x03, 0x00, 0x00, 0x85, // ...a...c...i....
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x6d, 0x03, 0x00, 0x00, 0x3a, 0x03, 0x00, 0x00, 0x3a, // .......m...:...:
	0x03, 0x00, 0x00, 0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x6e, 0x03, 0x00, 0x00, 0x6a, // ...........n...j
	0x03, 0x00, 0x00, 0x6d, 0x03, 0x00, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x07, 0x00, 0x00, 0x00, 0x6f, // ...m...........o
	0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x2b, 0x00, 0x00, 0x00, 0x6e, 0x03, 0x00, 0x00, 0x7e, // .......+...n...~
	0x00, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x73, // ...t...........s
	0x03, 0x00, 0x00, 0x3a, 0x03, 0x00, 0x00, 0x5f, 0x03, 0x00, 0x00, 0x81, 0x00, 0x05, 0x00, 0x07, // ...:..._........
	0x00, 0x00, 0x00, 0x76, 0x03, 0x00, 0x00, 0x3a, 0x03, 0x00, 0x00, 0x5f, 0x03, 0x00, 0x00, 0x0c, // ...v...:..._....
	0x00, 0x08, 0x00, 0x07, 0x00, 0x00, 0x00, 0x78, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x31, // .......x.......1
	0x00, 0x00, 0x00, 0x73, 0x03, 0x00, 0x00, 0x76, 0x03, 0x00, 0x00, 0x5a, 0x03, 0x00, 0x00, 0x0c, // ...s...v...Z....
	0x00, 0x08, 0x00, 0x07, 0x00, 0x00, 0x00, 0x7a, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, // .......z.......2
	0x00, 0x00, 0x00, 0x04, 0x01, 0x00, 0x00, 0x78, 0x03, 0x00, 0x00, 0x03, 0x01, 0x00, 0x00, 0x0c, // .......x........
	0x00, 0x08, 0x00, 0x07, 0x00, 0x00, 0x00, 0x7c, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x32, // .......|.......2
	0x00, 0x00, 0x00, 0x6f, 0x03, 0x00, 0x00, 0x7a, 0x03, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0x85, // ...o...z...t....
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x7e, 0x03, 0x00, 0x00, 0xb6, 0x03, 0x00, 0x00, 0x7c, // .......~.......|
	0x03, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x7f, 0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x7f, // ................
	0x03, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0xd2, 0x03, 0x00, 0x00, 0xb6, // ................
	0x03, 0x00, 0x00, 0x3f, 0x03, 0x00, 0x00, 0x7e, 0x03, 0x00, 0x00, 0x53, 0x03, 0x00, 0x00, 0xf9, // ...?...~...S....
	0x00, 0x02, 0x00, 0x80, 0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x80, 0x03, 0x00, 0x00, 0x80, // ................
	0x00, 0x05, 0x00, 0x51, 0x00, 0x00, 0x00, 0x82, 0x03, 0x00, 0x00, 0xb5, 0x03, 0x00, 0x00, 0x52, // ...Q...........R
	0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0x33, 0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x83, // .......3........
	0x03, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0xbd, 0x03, 0x00, 0x00, 0xc3, // ................
	0x03, 0x00, 0x00, 0x33, 0x03, 0x00, 0x00, 0xb6, 0x03, 0x00, 0x00, 0x3d, 0x03, 0x00, 0x00, 0xf5, // ...3.......=....
	0x00, 0x07, 0x00, 0xb1, 0x00, 0x00, 0x00, 0xb8, 0x03, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x33, // ...............3
	0x03, 0x00, 0x00, 0x03, 0x02, 0x00, 0x00, 0x3d, 0x03, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0x85, // .......=........
	0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0xb8, 0x03, 0x00, 0x00, 0x87, // ................
	0x03, 0x00, 0x00, 0x85, 0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x85, 0x03, 0x00, 0x00, 0xf9, // ................
	0x00, 0x02, 0x00, 0x87, 0x03, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0x87, 0x03, 0x00, 0x00, 0xf5, // ................
	0x00, 0x07, 0x00, 0x07, 0x00, 0x00, 0x00, 0xbc, 0x03, 0x00, 0x00, 0xbd, 0x03, 0x00, 0x00, 0x83, // ................
	0x03, 0x00, 0x00, 0xb6, 0x03, 0x00, 0x00, 0x85, 0x03, 0x00, 0x00, 0x4f, 0x00, 0x08, 0x00, 0x33, // ...........O...3
	0x00, 0x00, 0x00, 0x98, 0x02, 0x00, 0x00, 0xcc, 0x03, 0x00, 0x00, 0xcc, 0x03, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x8e, 0x00, 0x05, 0x00, 0x33, // ...............3
	0x00, 0x00, 0x00, 0x99, 0x02, 0x00, 0x00, 0x98, 0x02, 0x00, 0x00, 0xbc, 0x03, 0x00, 0x00, 0x51, // ...............Q
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x9b, 0x02, 0x00, 0x00, 0x99, 0x02, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x52, 0x00, 0x06, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x98, 0x03, 0x00, 0x00, 0x9b, // ...R............
	0x02, 0x00, 0x00, 0xcc, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, // ...........Q....
	0x00, 0x00, 0x00, 0x9d, 0x02, 0x00, 0x00, 0x99, 0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x52, // ...............R
	0x00, 0x06, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x9a, 0x03, 0x00, 0x00, 0x9d, 0x02, 0x00, 0x00, 0x98, // ................
	0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0x9f, // .......Q........
	0x02, 0x00, 0x00, 0x99, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x52, 0x00, 0x06, 0x00, 0x0d, // ...........R....
	0x00, 0x00, 0x00, 0x9c, 0x03, 0x00, 0x00, 0x9f, 0x02, 0x00, 0x00, 0x9a, 0x03, 0x00, 0x00, 0x02, // ................
	0x00, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0xa0, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xa0, // ................
	0x02, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x0d, 0x00, 0x00, 0x00, 0xcf, 0x03, 0x00, 0x00, 0xcc, // ................
	0x03, 0x00, 0x00, 0x84, 0x02, 0x00, 0x00, 0x9c, 0x03, 0x00, 0x00, 0x87, 0x03, 0x00, 0x00, 0x41, // ...............A
	0x00, 0x06, 0x00, 0xbc, 0x00, 0x00, 0x00, 0xa1, 0x02, 0x00, 0x00, 0xb9, 0x00, 0x00, 0x00, 0x2a, // ...............*
	0x01, 0x00, 0x00, 0xbb, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0xa2, // .......=........
	0x02, 0x00, 0x00, 0xa1, 0x02, 0x00, 0x00, 0xb4, 0x00, 0x05, 0x00, 0xb1, 0x00, 0x00, 0x00, 0xa3, // ................
	0x02, 0x00, 0x00, 0xa2, 0x02, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0xf7, 0x00, 0x03, 0x00, 0xc0, // .......~........
	0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfa, 0x00, 0x04, 0x00, 0xa3, 0x02, 0x00, 0x00, 0xa4, // ................
	0x02, 0x00, 0x00, 0xae, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xa4, 0x02, 0x00, 0x00, 0x51, // ...............Q
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xa8, 0x02, 0x00, 0x00, 0xcf, 0x03, 0x00, 0x00, 0x03, // ................
	0x00, 0x00, 0x00, 0x0c, 0x00, 0x08, 0x00, 0x07, 0x00, 0x00, 0x00, 0xa9, 0x02, 0x00, 0x00, 0x01, // ................
	0x00, 0x00, 0x00, 0x2b, 0x00, 0x00, 0x00, 0xa8, 0x02, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x74, // ...+.......~...t
	0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xaa, 0x02, 0x00, 0x00, 0xcf, // ...Q............
	0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xab, // .......Q........
	0x02, 0x00, 0x00, 0xcf, 0x03, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, // ...........Q....
	0x00, 0x00, 0x00, 0xac, 0x02, 0x00, 0x00, 0xcf, 0x03, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x50, // ...............P
	0x00, 0x07, 0x00, 0x0d, 0x00, 0x00, 0x00, 0xad, 0x02, 0x00, 0x00, 0xaa, 0x02, 0x00, 0x00, 0xab, // ................
	0x02, 0x00, 0x00, 0xac, 0x02, 0x00, 0x00, 0xa9, 0x02, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0xc0, // ................
	0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xae, 0x02, 0x00, 0x00, 0x4f, 0x00, 0x08, 0x00, 0x33, // ...........O...3
	0x00, 0x00, 0x00, 0xb0, 0x02, 0x00, 0x00, 0xcf, 0x03, 0x00, 0x00, 0xcf, 0x03, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x41, 0x00, 0x06, 0x00, 0xbc, // ...........A....
	0x00, 0x00, 0x00, 0xb1, 0x02, 0x00, 0x00, 0xb9, 0x00, 0x00, 0x00, 0x1b, 0x01, 0x00, 0x00, 0xf6, // ................
	0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0xb2, 0x02, 0x00, 0x00, 0xb1, // ...=............
	0x02, 0x00, 0x00, 0x7f, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0xb3, 0x02, 0x00, 0x00, 0xb2, // ................
	0x02, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xb5, 0x02, 0x00, 0x00, 0xcf, // ...Q............
	0x03, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x85, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xb6, // ................
	0x02, 0x00, 0x00, 0xb3, 0x02, 0x00, 0x00, 0xb5, 0x02, 0x00, 0x00, 0x8e, 0x00, 0x05, 0x00, 0x33, // ...............3
	0x00, 0x00, 0x00, 0xb7, 0x02, 0x00, 0x00, 0xb0, 0x02, 0x00, 0x00, 0xb6, 0x02, 0x00, 0x00, 0x41, // ...............A
	0x00, 0x06, 0x00, 0xbc, 0x00, 0x00, 0x00, 0xb8, 0x02, 0x00, 0x00, 0xb9, 0x00, 0x00, 0x00, 0x1b, // ................
	0x01, 0x00, 0x00, 0xf6, 0x00, 0x00, 0x00, 0x3d, 0x00, 0x04, 0x00, 0x07, 0x00, 0x00, 0x00, 0xb9, // .......=........
	0x02, 0x00, 0x00, 0xb8, 0x02, 0x00, 0x00, 0x88, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xba, // ................
	0x02, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0xb9, 0x02, 0x00, 0x00, 0x83, 0x00, 0x05, 0x00, 0x07, // ...t............
	0x00, 0x00, 0x00, 0xbb, 0x02, 0x00, 0x00, 0xba, 0x02, 0x00, 0x00, 0x74, 0x00, 0x00, 0x00, 0x51, // ...........t...Q
	0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xbc, 0x02, 0x00, 0x00, 0xb7, 0x02, 0x00, 0x00, 0x00, // ................
	0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xbd, 0x02, 0x00, 0x00, 0xb7, // ...Q............
	0x02, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x51, 0x00, 0x05, 0x00, 0x07, 0x00, 0x00, 0x00, 0xbe, // .......Q........
	0x02, 0x00, 0x00, 0xb7, 0x02, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x50, 0x00, 0x07, 0x00, 0x0d, // ...........P....
	0x00, 0x00, 0x00, 0xbf, 0x02, 0x00, 0x00, 0xbc, 0x02, 0x00, 0x00, 0xbd, 0x02, 0x00, 0x00, 0xbe, // ................
	0x02, 0x00, 0x00, 0xbb, 0x02, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0xc0, 0x02, 0x00, 0x00, 0xf8, // ................
	0x00, 0x02, 0x00, 0xc0, 0x02, 0x00, 0x00, 0xf5, 0x00, 0x07, 0x00, 0x0d, 0x00, 0x00, 0x00, 0xd1, // ................
	0x03, 0x00, 0x00, 0xad, 0x02, 0x00, 0x00, 0xa4, 0x02, 0x00, 0x00, 0xbf, 0x02, 0x00, 0x00, 0xae, // ................
	0x02, 0x00, 0x00, 0xf9, 0x00, 0x02, 0x00, 0xc1, 0x02, 0x00, 0x00, 0xf8, 0x00, 0x02, 0x00, 0xc1, // ................
	0x02, 0x00, 0x00, 0xf5, 0x00, 0x09, 0x00, 0x0d, 0x00, 0x00, 0x00, 0xd0, 0x03, 0x00, 0x00, 0x7f, // ................
	0x00, 0x00, 0x00, 0x36, 0x02, 0x00, 0x00, 0x7f, 0x00, 0x00, 0x00, 0x46, 0x02, 0x00, 0x00, 0xd1, // ...6.......F....
	0x03, 0x00, 0x00, 0xc0, 0x02, 0x00, 0x00, 0x3e, 0x00, 0x03, 0x00, 0xea, 0x01, 0x00, 0x00, 0xd0, // .......>........
	0x03, 0x00, 0x00, 0xfd, 0x00, 0x01, 0x00, 0x38, 0x00, 0x01, 0x00, 0x00, 0x00, 0xc0, 0x00,       // .......8.......
};
static const bgfx::EmbeddedShader fs_flasher_noclip = BGFX_EMBEDDED_SHADER(fs_flasher_noclip);
